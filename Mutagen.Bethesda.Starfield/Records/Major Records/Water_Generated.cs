/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Water :
        StarfieldMajorRecord,
        IEquatable<IWaterGetter>,
        ILoquiObjectSetter<Water>,
        IWaterInternal
    {
        #region Ctor
        protected Water()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWaterGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Opacity
        public Byte Opacity { get; set; } = default(Byte);
        #endregion
        #region Flags
        public Water.Flag Flags { get; set; } = default(Water.Flag);
        #endregion
        #region WASH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _WASH;
        public SoundReference? WASH
        {
            get => _WASH;
            set => _WASH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IWaterGetter.WASH => this.WASH;
        #endregion
        #region ConsumeSpell
        private readonly IFormLinkNullable<ISpellGetter> _ConsumeSpell = new FormLinkNullable<ISpellGetter>();
        public IFormLinkNullable<ISpellGetter> ConsumeSpell
        {
            get => _ConsumeSpell;
            set => _ConsumeSpell.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISpellGetter> IWaterGetter.ConsumeSpell => this.ConsumeSpell;
        #endregion
        #region ContactSpell
        private readonly IFormLinkNullable<ISpellGetter> _ContactSpell = new FormLinkNullable<ISpellGetter>();
        public IFormLinkNullable<ISpellGetter> ContactSpell
        {
            get => _ContactSpell;
            set => _ContactSpell.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISpellGetter> IWaterGetter.ContactSpell => this.ContactSpell;
        #endregion
        #region DATA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DATA;
        public MemorySlice<Byte>? DATA
        {
            get => this._DATA;
            set => this._DATA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWaterGetter.DATA => this.DATA;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWaterGetter.DNAM => this.DNAM;
        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWaterGetter.GNAM => this.GNAM;
        #endregion
        #region LinearVelocity
        public P3Float? LinearVelocity { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IWaterGetter.LinearVelocity => this.LinearVelocity;
        #endregion
        #region AngularVelocity
        public P3Float? AngularVelocity { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IWaterGetter.AngularVelocity => this.AngularVelocity;
        #endregion
        #region NAM2
        public String? NAM2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        public String? NAM3 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.NAM3 => this.NAM3;
        #endregion
        #region NAM4
        public String? NAM4 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.NAM4 => this.NAM4;
        #endregion
        #region NAM5
        public Byte? NAM5 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IWaterGetter.NAM5 => this.NAM5;
        #endregion
        #region NAM6
        public Byte? NAM6 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IWaterGetter.NAM6 => this.NAM6;
        #endregion
        #region RiverAbsorptionCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _RiverAbsorptionCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> RiverAbsorptionCurve
        {
            get => _RiverAbsorptionCurve;
            set => _RiverAbsorptionCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.RiverAbsorptionCurve => this.RiverAbsorptionCurve;
        #endregion
        #region OceanAbsorptionCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _OceanAbsorptionCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> OceanAbsorptionCurve
        {
            get => _OceanAbsorptionCurve;
            set => _OceanAbsorptionCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.OceanAbsorptionCurve => this.OceanAbsorptionCurve;
        #endregion
        #region RiverScatteringCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _RiverScatteringCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> RiverScatteringCurve
        {
            get => _RiverScatteringCurve;
            set => _RiverScatteringCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.RiverScatteringCurve => this.RiverScatteringCurve;
        #endregion
        #region OceanScatteringCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _OceanScatteringCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> OceanScatteringCurve
        {
            get => _OceanScatteringCurve;
            set => _OceanScatteringCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.OceanScatteringCurve => this.OceanScatteringCurve;
        #endregion
        #region PhytoplanktonCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _PhytoplanktonCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> PhytoplanktonCurve
        {
            get => _PhytoplanktonCurve;
            set => _PhytoplanktonCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.PhytoplanktonCurve => this.PhytoplanktonCurve;
        #endregion
        #region SedimentCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _SedimentCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> SedimentCurve
        {
            get => _SedimentCurve;
            set => _SedimentCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.SedimentCurve => this.SedimentCurve;
        #endregion
        #region YelowMatterCurve
        private readonly IFormLinkNullable<ICurve3DGetter> _YelowMatterCurve = new FormLinkNullable<ICurve3DGetter>();
        public IFormLinkNullable<ICurve3DGetter> YelowMatterCurve
        {
            get => _YelowMatterCurve;
            set => _YelowMatterCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurve3DGetter> IWaterGetter.YelowMatterCurve => this.YelowMatterCurve;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WaterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Opacity = initialValue;
                this.Flags = initialValue;
                this.WASH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.ConsumeSpell = initialValue;
                this.ContactSpell = initialValue;
                this.DATA = initialValue;
                this.DNAM = initialValue;
                this.GNAM = initialValue;
                this.LinearVelocity = initialValue;
                this.AngularVelocity = initialValue;
                this.NAM2 = initialValue;
                this.NAM3 = initialValue;
                this.NAM4 = initialValue;
                this.NAM5 = initialValue;
                this.NAM6 = initialValue;
                this.RiverAbsorptionCurve = initialValue;
                this.OceanAbsorptionCurve = initialValue;
                this.RiverScatteringCurve = initialValue;
                this.OceanScatteringCurve = initialValue;
                this.PhytoplanktonCurve = initialValue;
                this.SedimentCurve = initialValue;
                this.YelowMatterCurve = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Name,
                TItem Opacity,
                TItem Flags,
                TItem WASH,
                TItem ConsumeSpell,
                TItem ContactSpell,
                TItem DATA,
                TItem DNAM,
                TItem GNAM,
                TItem LinearVelocity,
                TItem AngularVelocity,
                TItem NAM2,
                TItem NAM3,
                TItem NAM4,
                TItem NAM5,
                TItem NAM6,
                TItem RiverAbsorptionCurve,
                TItem OceanAbsorptionCurve,
                TItem RiverScatteringCurve,
                TItem OceanScatteringCurve,
                TItem PhytoplanktonCurve,
                TItem SedimentCurve,
                TItem YelowMatterCurve)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Name = Name;
                this.Opacity = Opacity;
                this.Flags = Flags;
                this.WASH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WASH, new SoundReference.Mask<TItem>(WASH));
                this.ConsumeSpell = ConsumeSpell;
                this.ContactSpell = ContactSpell;
                this.DATA = DATA;
                this.DNAM = DNAM;
                this.GNAM = GNAM;
                this.LinearVelocity = LinearVelocity;
                this.AngularVelocity = AngularVelocity;
                this.NAM2 = NAM2;
                this.NAM3 = NAM3;
                this.NAM4 = NAM4;
                this.NAM5 = NAM5;
                this.NAM6 = NAM6;
                this.RiverAbsorptionCurve = RiverAbsorptionCurve;
                this.OceanAbsorptionCurve = OceanAbsorptionCurve;
                this.RiverScatteringCurve = RiverScatteringCurve;
                this.OceanScatteringCurve = OceanScatteringCurve;
                this.PhytoplanktonCurve = PhytoplanktonCurve;
                this.SedimentCurve = SedimentCurve;
                this.YelowMatterCurve = YelowMatterCurve;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Opacity;
            public TItem Flags;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WASH { get; set; }
            public TItem ConsumeSpell;
            public TItem ContactSpell;
            public TItem DATA;
            public TItem DNAM;
            public TItem GNAM;
            public TItem LinearVelocity;
            public TItem AngularVelocity;
            public TItem NAM2;
            public TItem NAM3;
            public TItem NAM4;
            public TItem NAM5;
            public TItem NAM6;
            public TItem RiverAbsorptionCurve;
            public TItem OceanAbsorptionCurve;
            public TItem RiverScatteringCurve;
            public TItem OceanScatteringCurve;
            public TItem PhytoplanktonCurve;
            public TItem SedimentCurve;
            public TItem YelowMatterCurve;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Opacity, rhs.Opacity)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.WASH, rhs.WASH)) return false;
                if (!object.Equals(this.ConsumeSpell, rhs.ConsumeSpell)) return false;
                if (!object.Equals(this.ContactSpell, rhs.ContactSpell)) return false;
                if (!object.Equals(this.DATA, rhs.DATA)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.LinearVelocity, rhs.LinearVelocity)) return false;
                if (!object.Equals(this.AngularVelocity, rhs.AngularVelocity)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.NAM4, rhs.NAM4)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                if (!object.Equals(this.NAM6, rhs.NAM6)) return false;
                if (!object.Equals(this.RiverAbsorptionCurve, rhs.RiverAbsorptionCurve)) return false;
                if (!object.Equals(this.OceanAbsorptionCurve, rhs.OceanAbsorptionCurve)) return false;
                if (!object.Equals(this.RiverScatteringCurve, rhs.RiverScatteringCurve)) return false;
                if (!object.Equals(this.OceanScatteringCurve, rhs.OceanScatteringCurve)) return false;
                if (!object.Equals(this.PhytoplanktonCurve, rhs.PhytoplanktonCurve)) return false;
                if (!object.Equals(this.SedimentCurve, rhs.SedimentCurve)) return false;
                if (!object.Equals(this.YelowMatterCurve, rhs.YelowMatterCurve)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Opacity);
                hash.Add(this.Flags);
                hash.Add(this.WASH);
                hash.Add(this.ConsumeSpell);
                hash.Add(this.ContactSpell);
                hash.Add(this.DATA);
                hash.Add(this.DNAM);
                hash.Add(this.GNAM);
                hash.Add(this.LinearVelocity);
                hash.Add(this.AngularVelocity);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.NAM4);
                hash.Add(this.NAM5);
                hash.Add(this.NAM6);
                hash.Add(this.RiverAbsorptionCurve);
                hash.Add(this.OceanAbsorptionCurve);
                hash.Add(this.RiverScatteringCurve);
                hash.Add(this.OceanScatteringCurve);
                hash.Add(this.PhytoplanktonCurve);
                hash.Add(this.SedimentCurve);
                hash.Add(this.YelowMatterCurve);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Opacity)) return false;
                if (!eval(this.Flags)) return false;
                if (WASH != null)
                {
                    if (!eval(this.WASH.Overall)) return false;
                    if (this.WASH.Specific != null && !this.WASH.Specific.All(eval)) return false;
                }
                if (!eval(this.ConsumeSpell)) return false;
                if (!eval(this.ContactSpell)) return false;
                if (!eval(this.DATA)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.GNAM)) return false;
                if (!eval(this.LinearVelocity)) return false;
                if (!eval(this.AngularVelocity)) return false;
                if (!eval(this.NAM2)) return false;
                if (!eval(this.NAM3)) return false;
                if (!eval(this.NAM4)) return false;
                if (!eval(this.NAM5)) return false;
                if (!eval(this.NAM6)) return false;
                if (!eval(this.RiverAbsorptionCurve)) return false;
                if (!eval(this.OceanAbsorptionCurve)) return false;
                if (!eval(this.RiverScatteringCurve)) return false;
                if (!eval(this.OceanScatteringCurve)) return false;
                if (!eval(this.PhytoplanktonCurve)) return false;
                if (!eval(this.SedimentCurve)) return false;
                if (!eval(this.YelowMatterCurve)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Opacity)) return true;
                if (eval(this.Flags)) return true;
                if (WASH != null)
                {
                    if (eval(this.WASH.Overall)) return true;
                    if (this.WASH.Specific != null && this.WASH.Specific.Any(eval)) return true;
                }
                if (eval(this.ConsumeSpell)) return true;
                if (eval(this.ContactSpell)) return true;
                if (eval(this.DATA)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.GNAM)) return true;
                if (eval(this.LinearVelocity)) return true;
                if (eval(this.AngularVelocity)) return true;
                if (eval(this.NAM2)) return true;
                if (eval(this.NAM3)) return true;
                if (eval(this.NAM4)) return true;
                if (eval(this.NAM5)) return true;
                if (eval(this.NAM6)) return true;
                if (eval(this.RiverAbsorptionCurve)) return true;
                if (eval(this.OceanAbsorptionCurve)) return true;
                if (eval(this.RiverScatteringCurve)) return true;
                if (eval(this.OceanScatteringCurve)) return true;
                if (eval(this.PhytoplanktonCurve)) return true;
                if (eval(this.SedimentCurve)) return true;
                if (eval(this.YelowMatterCurve)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Water.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Opacity = eval(this.Opacity);
                obj.Flags = eval(this.Flags);
                obj.WASH = this.WASH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WASH.Overall), this.WASH.Specific?.Translate(eval));
                obj.ConsumeSpell = eval(this.ConsumeSpell);
                obj.ContactSpell = eval(this.ContactSpell);
                obj.DATA = eval(this.DATA);
                obj.DNAM = eval(this.DNAM);
                obj.GNAM = eval(this.GNAM);
                obj.LinearVelocity = eval(this.LinearVelocity);
                obj.AngularVelocity = eval(this.AngularVelocity);
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = eval(this.NAM3);
                obj.NAM4 = eval(this.NAM4);
                obj.NAM5 = eval(this.NAM5);
                obj.NAM6 = eval(this.NAM6);
                obj.RiverAbsorptionCurve = eval(this.RiverAbsorptionCurve);
                obj.OceanAbsorptionCurve = eval(this.OceanAbsorptionCurve);
                obj.RiverScatteringCurve = eval(this.RiverScatteringCurve);
                obj.OceanScatteringCurve = eval(this.OceanScatteringCurve);
                obj.PhytoplanktonCurve = eval(this.PhytoplanktonCurve);
                obj.SedimentCurve = eval(this.SedimentCurve);
                obj.YelowMatterCurve = eval(this.YelowMatterCurve);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Water.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Water.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Water.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Opacity ?? true)
                    {
                        sb.AppendItem(Opacity, "Opacity");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.WASH?.Overall ?? true)
                    {
                        WASH?.Print(sb);
                    }
                    if (printMask?.ConsumeSpell ?? true)
                    {
                        sb.AppendItem(ConsumeSpell, "ConsumeSpell");
                    }
                    if (printMask?.ContactSpell ?? true)
                    {
                        sb.AppendItem(ContactSpell, "ContactSpell");
                    }
                    if (printMask?.DATA ?? true)
                    {
                        sb.AppendItem(DATA, "DATA");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.LinearVelocity ?? true)
                    {
                        sb.AppendItem(LinearVelocity, "LinearVelocity");
                    }
                    if (printMask?.AngularVelocity ?? true)
                    {
                        sb.AppendItem(AngularVelocity, "AngularVelocity");
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        sb.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        sb.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.NAM4 ?? true)
                    {
                        sb.AppendItem(NAM4, "NAM4");
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        sb.AppendItem(NAM5, "NAM5");
                    }
                    if (printMask?.NAM6 ?? true)
                    {
                        sb.AppendItem(NAM6, "NAM6");
                    }
                    if (printMask?.RiverAbsorptionCurve ?? true)
                    {
                        sb.AppendItem(RiverAbsorptionCurve, "RiverAbsorptionCurve");
                    }
                    if (printMask?.OceanAbsorptionCurve ?? true)
                    {
                        sb.AppendItem(OceanAbsorptionCurve, "OceanAbsorptionCurve");
                    }
                    if (printMask?.RiverScatteringCurve ?? true)
                    {
                        sb.AppendItem(RiverScatteringCurve, "RiverScatteringCurve");
                    }
                    if (printMask?.OceanScatteringCurve ?? true)
                    {
                        sb.AppendItem(OceanScatteringCurve, "OceanScatteringCurve");
                    }
                    if (printMask?.PhytoplanktonCurve ?? true)
                    {
                        sb.AppendItem(PhytoplanktonCurve, "PhytoplanktonCurve");
                    }
                    if (printMask?.SedimentCurve ?? true)
                    {
                        sb.AppendItem(SedimentCurve, "SedimentCurve");
                    }
                    if (printMask?.YelowMatterCurve ?? true)
                    {
                        sb.AppendItem(YelowMatterCurve, "YelowMatterCurve");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Opacity;
            public Exception? Flags;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WASH;
            public Exception? ConsumeSpell;
            public Exception? ContactSpell;
            public Exception? DATA;
            public Exception? DNAM;
            public Exception? GNAM;
            public Exception? LinearVelocity;
            public Exception? AngularVelocity;
            public Exception? NAM2;
            public Exception? NAM3;
            public Exception? NAM4;
            public Exception? NAM5;
            public Exception? NAM6;
            public Exception? RiverAbsorptionCurve;
            public Exception? OceanAbsorptionCurve;
            public Exception? RiverScatteringCurve;
            public Exception? OceanScatteringCurve;
            public Exception? PhytoplanktonCurve;
            public Exception? SedimentCurve;
            public Exception? YelowMatterCurve;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Name:
                        return Name;
                    case Water_FieldIndex.Opacity:
                        return Opacity;
                    case Water_FieldIndex.Flags:
                        return Flags;
                    case Water_FieldIndex.WASH:
                        return WASH;
                    case Water_FieldIndex.ConsumeSpell:
                        return ConsumeSpell;
                    case Water_FieldIndex.ContactSpell:
                        return ContactSpell;
                    case Water_FieldIndex.DATA:
                        return DATA;
                    case Water_FieldIndex.DNAM:
                        return DNAM;
                    case Water_FieldIndex.GNAM:
                        return GNAM;
                    case Water_FieldIndex.LinearVelocity:
                        return LinearVelocity;
                    case Water_FieldIndex.AngularVelocity:
                        return AngularVelocity;
                    case Water_FieldIndex.NAM2:
                        return NAM2;
                    case Water_FieldIndex.NAM3:
                        return NAM3;
                    case Water_FieldIndex.NAM4:
                        return NAM4;
                    case Water_FieldIndex.NAM5:
                        return NAM5;
                    case Water_FieldIndex.NAM6:
                        return NAM6;
                    case Water_FieldIndex.RiverAbsorptionCurve:
                        return RiverAbsorptionCurve;
                    case Water_FieldIndex.OceanAbsorptionCurve:
                        return OceanAbsorptionCurve;
                    case Water_FieldIndex.RiverScatteringCurve:
                        return RiverScatteringCurve;
                    case Water_FieldIndex.OceanScatteringCurve:
                        return OceanScatteringCurve;
                    case Water_FieldIndex.PhytoplanktonCurve:
                        return PhytoplanktonCurve;
                    case Water_FieldIndex.SedimentCurve:
                        return SedimentCurve;
                    case Water_FieldIndex.YelowMatterCurve:
                        return YelowMatterCurve;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = ex;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Water_FieldIndex.WASH:
                        this.WASH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Water_FieldIndex.ConsumeSpell:
                        this.ConsumeSpell = ex;
                        break;
                    case Water_FieldIndex.ContactSpell:
                        this.ContactSpell = ex;
                        break;
                    case Water_FieldIndex.DATA:
                        this.DATA = ex;
                        break;
                    case Water_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case Water_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case Water_FieldIndex.LinearVelocity:
                        this.LinearVelocity = ex;
                        break;
                    case Water_FieldIndex.AngularVelocity:
                        this.AngularVelocity = ex;
                        break;
                    case Water_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case Water_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case Water_FieldIndex.NAM4:
                        this.NAM4 = ex;
                        break;
                    case Water_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    case Water_FieldIndex.NAM6:
                        this.NAM6 = ex;
                        break;
                    case Water_FieldIndex.RiverAbsorptionCurve:
                        this.RiverAbsorptionCurve = ex;
                        break;
                    case Water_FieldIndex.OceanAbsorptionCurve:
                        this.OceanAbsorptionCurve = ex;
                        break;
                    case Water_FieldIndex.RiverScatteringCurve:
                        this.RiverScatteringCurve = ex;
                        break;
                    case Water_FieldIndex.OceanScatteringCurve:
                        this.OceanScatteringCurve = ex;
                        break;
                    case Water_FieldIndex.PhytoplanktonCurve:
                        this.PhytoplanktonCurve = ex;
                        break;
                    case Water_FieldIndex.SedimentCurve:
                        this.SedimentCurve = ex;
                        break;
                    case Water_FieldIndex.YelowMatterCurve:
                        this.YelowMatterCurve = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Water_FieldIndex.WASH:
                        this.WASH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Water_FieldIndex.ConsumeSpell:
                        this.ConsumeSpell = (Exception?)obj;
                        break;
                    case Water_FieldIndex.ContactSpell:
                        this.ContactSpell = (Exception?)obj;
                        break;
                    case Water_FieldIndex.DATA:
                        this.DATA = (Exception?)obj;
                        break;
                    case Water_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case Water_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case Water_FieldIndex.LinearVelocity:
                        this.LinearVelocity = (Exception?)obj;
                        break;
                    case Water_FieldIndex.AngularVelocity:
                        this.AngularVelocity = (Exception?)obj;
                        break;
                    case Water_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case Water_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case Water_FieldIndex.NAM4:
                        this.NAM4 = (Exception?)obj;
                        break;
                    case Water_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    case Water_FieldIndex.NAM6:
                        this.NAM6 = (Exception?)obj;
                        break;
                    case Water_FieldIndex.RiverAbsorptionCurve:
                        this.RiverAbsorptionCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.OceanAbsorptionCurve:
                        this.OceanAbsorptionCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.RiverScatteringCurve:
                        this.RiverScatteringCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.OceanScatteringCurve:
                        this.OceanScatteringCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.PhytoplanktonCurve:
                        this.PhytoplanktonCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.SedimentCurve:
                        this.SedimentCurve = (Exception?)obj;
                        break;
                    case Water_FieldIndex.YelowMatterCurve:
                        this.YelowMatterCurve = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Opacity != null) return true;
                if (Flags != null) return true;
                if (WASH != null) return true;
                if (ConsumeSpell != null) return true;
                if (ContactSpell != null) return true;
                if (DATA != null) return true;
                if (DNAM != null) return true;
                if (GNAM != null) return true;
                if (LinearVelocity != null) return true;
                if (AngularVelocity != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (NAM4 != null) return true;
                if (NAM5 != null) return true;
                if (NAM6 != null) return true;
                if (RiverAbsorptionCurve != null) return true;
                if (OceanAbsorptionCurve != null) return true;
                if (RiverScatteringCurve != null) return true;
                if (OceanScatteringCurve != null) return true;
                if (PhytoplanktonCurve != null) return true;
                if (SedimentCurve != null) return true;
                if (YelowMatterCurve != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Opacity, "Opacity");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                WASH?.Print(sb);
                {
                    sb.AppendItem(ConsumeSpell, "ConsumeSpell");
                }
                {
                    sb.AppendItem(ContactSpell, "ContactSpell");
                }
                {
                    sb.AppendItem(DATA, "DATA");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(LinearVelocity, "LinearVelocity");
                }
                {
                    sb.AppendItem(AngularVelocity, "AngularVelocity");
                }
                {
                    sb.AppendItem(NAM2, "NAM2");
                }
                {
                    sb.AppendItem(NAM3, "NAM3");
                }
                {
                    sb.AppendItem(NAM4, "NAM4");
                }
                {
                    sb.AppendItem(NAM5, "NAM5");
                }
                {
                    sb.AppendItem(NAM6, "NAM6");
                }
                {
                    sb.AppendItem(RiverAbsorptionCurve, "RiverAbsorptionCurve");
                }
                {
                    sb.AppendItem(OceanAbsorptionCurve, "OceanAbsorptionCurve");
                }
                {
                    sb.AppendItem(RiverScatteringCurve, "RiverScatteringCurve");
                }
                {
                    sb.AppendItem(OceanScatteringCurve, "OceanScatteringCurve");
                }
                {
                    sb.AppendItem(PhytoplanktonCurve, "PhytoplanktonCurve");
                }
                {
                    sb.AppendItem(SedimentCurve, "SedimentCurve");
                }
                {
                    sb.AppendItem(YelowMatterCurve, "YelowMatterCurve");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Opacity = this.Opacity.Combine(rhs.Opacity);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.WASH = this.WASH.Combine(rhs.WASH, (l, r) => l.Combine(r));
                ret.ConsumeSpell = this.ConsumeSpell.Combine(rhs.ConsumeSpell);
                ret.ContactSpell = this.ContactSpell.Combine(rhs.ContactSpell);
                ret.DATA = this.DATA.Combine(rhs.DATA);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.LinearVelocity = this.LinearVelocity.Combine(rhs.LinearVelocity);
                ret.AngularVelocity = this.AngularVelocity.Combine(rhs.AngularVelocity);
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.NAM4 = this.NAM4.Combine(rhs.NAM4);
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                ret.NAM6 = this.NAM6.Combine(rhs.NAM6);
                ret.RiverAbsorptionCurve = this.RiverAbsorptionCurve.Combine(rhs.RiverAbsorptionCurve);
                ret.OceanAbsorptionCurve = this.OceanAbsorptionCurve.Combine(rhs.OceanAbsorptionCurve);
                ret.RiverScatteringCurve = this.RiverScatteringCurve.Combine(rhs.RiverScatteringCurve);
                ret.OceanScatteringCurve = this.OceanScatteringCurve.Combine(rhs.OceanScatteringCurve);
                ret.PhytoplanktonCurve = this.PhytoplanktonCurve.Combine(rhs.PhytoplanktonCurve);
                ret.SedimentCurve = this.SedimentCurve.Combine(rhs.SedimentCurve);
                ret.YelowMatterCurve = this.YelowMatterCurve.Combine(rhs.YelowMatterCurve);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Opacity;
            public bool Flags;
            public SoundReference.TranslationMask? WASH;
            public bool ConsumeSpell;
            public bool ContactSpell;
            public bool DATA;
            public bool DNAM;
            public bool GNAM;
            public bool LinearVelocity;
            public bool AngularVelocity;
            public bool NAM2;
            public bool NAM3;
            public bool NAM4;
            public bool NAM5;
            public bool NAM6;
            public bool RiverAbsorptionCurve;
            public bool OceanAbsorptionCurve;
            public bool RiverScatteringCurve;
            public bool OceanScatteringCurve;
            public bool PhytoplanktonCurve;
            public bool SedimentCurve;
            public bool YelowMatterCurve;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Opacity = defaultOn;
                this.Flags = defaultOn;
                this.ConsumeSpell = defaultOn;
                this.ContactSpell = defaultOn;
                this.DATA = defaultOn;
                this.DNAM = defaultOn;
                this.GNAM = defaultOn;
                this.LinearVelocity = defaultOn;
                this.AngularVelocity = defaultOn;
                this.NAM2 = defaultOn;
                this.NAM3 = defaultOn;
                this.NAM4 = defaultOn;
                this.NAM5 = defaultOn;
                this.NAM6 = defaultOn;
                this.RiverAbsorptionCurve = defaultOn;
                this.OceanAbsorptionCurve = defaultOn;
                this.RiverScatteringCurve = defaultOn;
                this.OceanScatteringCurve = defaultOn;
                this.PhytoplanktonCurve = defaultOn;
                this.SedimentCurve = defaultOn;
                this.YelowMatterCurve = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Opacity, null));
                ret.Add((Flags, null));
                ret.Add((WASH != null ? WASH.OnOverall : DefaultOn, WASH?.GetCrystal()));
                ret.Add((ConsumeSpell, null));
                ret.Add((ContactSpell, null));
                ret.Add((DATA, null));
                ret.Add((DNAM, null));
                ret.Add((GNAM, null));
                ret.Add((LinearVelocity, null));
                ret.Add((AngularVelocity, null));
                ret.Add((NAM2, null));
                ret.Add((NAM3, null));
                ret.Add((NAM4, null));
                ret.Add((NAM5, null));
                ret.Add((NAM6, null));
                ret.Add((RiverAbsorptionCurve, null));
                ret.Add((OceanAbsorptionCurve, null));
                ret.Add((RiverScatteringCurve, null));
                ret.Add((OceanScatteringCurve, null));
                ret.Add((PhytoplanktonCurve, null));
                ret.Add((SedimentCurve, null));
                ret.Add((YelowMatterCurve, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Water_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WaterCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterSetterCommon.Instance.RemapLinks(this, mapping);
        public Water(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Water(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Water(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Water(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Water(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Water>.ToString(this);
        }

        protected override Type LinkType => typeof(IWater);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWaterGetter rhs) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWaterGetter? obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Water CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Water();
            ((WaterSetterCommon)((IWaterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Water item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WaterSetterCommon)((IWaterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Water GetNew()
        {
            return new Water();
        }

    }
    #endregion

    #region Interface
    public partial interface IWater :
        IBaseObject,
        IFormLinkContainer,
        ILoquiObjectSetter<IWaterInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWaterGetter
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Byte Opacity { get; set; }
        new Water.Flag Flags { get; set; }
        new SoundReference? WASH { get; set; }
        new IFormLinkNullable<ISpellGetter> ConsumeSpell { get; set; }
        new IFormLinkNullable<ISpellGetter> ContactSpell { get; set; }
        new MemorySlice<Byte>? DATA { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? GNAM { get; set; }
        new P3Float? LinearVelocity { get; set; }
        new P3Float? AngularVelocity { get; set; }
        new String? NAM2 { get; set; }
        new String? NAM3 { get; set; }
        new String? NAM4 { get; set; }
        new Byte? NAM5 { get; set; }
        new Byte? NAM6 { get; set; }
        new IFormLinkNullable<ICurve3DGetter> RiverAbsorptionCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> OceanAbsorptionCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> RiverScatteringCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> OceanScatteringCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> PhytoplanktonCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> SedimentCurve { get; set; }
        new IFormLinkNullable<ICurve3DGetter> YelowMatterCurve { get; set; }
    }

    public partial interface IWaterInternal :
        IStarfieldMajorRecordInternal,
        IWater,
        IWaterGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.WATR)]
    public partial interface IWaterGetter :
        IStarfieldMajorRecordGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWaterGetter>,
        IMapsToGetter<IWaterGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Byte Opacity { get; }
        Water.Flag Flags { get; }
        ISoundReferenceGetter? WASH { get; }
        IFormLinkNullableGetter<ISpellGetter> ConsumeSpell { get; }
        IFormLinkNullableGetter<ISpellGetter> ContactSpell { get; }
        ReadOnlyMemorySlice<Byte>? DATA { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }
        P3Float? LinearVelocity { get; }
        P3Float? AngularVelocity { get; }
        String? NAM2 { get; }
        String? NAM3 { get; }
        String? NAM4 { get; }
        Byte? NAM5 { get; }
        Byte? NAM6 { get; }
        IFormLinkNullableGetter<ICurve3DGetter> RiverAbsorptionCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> OceanAbsorptionCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> RiverScatteringCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> OceanScatteringCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> PhytoplanktonCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> SedimentCurve { get; }
        IFormLinkNullableGetter<ICurve3DGetter> YelowMatterCurve { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WaterMixIn
    {
        public static void Clear(this IWaterInternal item)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Water.Mask<bool> GetEqualsMask(
            this IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWaterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWaterGetter item,
            IWaterGetter rhs,
            Water.TranslationMask? equalsMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Water Duplicate(
            this IWaterGetter item,
            FormKey formKey,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Water Duplicate(
            this IWaterGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWaterInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Water_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Name = 7,
        Opacity = 8,
        Flags = 9,
        WASH = 10,
        ConsumeSpell = 11,
        ContactSpell = 12,
        DATA = 13,
        DNAM = 14,
        GNAM = 15,
        LinearVelocity = 16,
        AngularVelocity = 17,
        NAM2 = 18,
        NAM3 = 19,
        NAM4 = 20,
        NAM5 = 21,
        NAM6 = 22,
        RiverAbsorptionCurve = 23,
        OceanAbsorptionCurve = 24,
        RiverScatteringCurve = 25,
        OceanScatteringCurve = 26,
        PhytoplanktonCurve = 27,
        SedimentCurve = 28,
        YelowMatterCurve = 29,
    }
    #endregion

    #region Registration
    internal partial class Water_Registration : ILoquiRegistration
    {
        public static readonly Water_Registration Instance = new Water_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(Water.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Water.ErrorMask);

        public static readonly Type ClassType = typeof(Water);

        public static readonly Type GetterType = typeof(IWaterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWater);

        public static readonly Type? InternalSetterType = typeof(IWaterInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Water";

        public const string Name = "Water";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WATR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WATR);
            var all = RecordCollection.Factory(
                RecordTypes.WATR,
                RecordTypes.FULL,
                RecordTypes.ANAM,
                RecordTypes.FNAM,
                RecordTypes.WASH,
                RecordTypes.XNAM,
                RecordTypes.YNAM,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.GNAM,
                RecordTypes.NAM0,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.ENAM,
                RecordTypes.HNAM,
                RecordTypes.JNAM,
                RecordTypes.LNAM,
                RecordTypes.MNAM,
                RecordTypes.QNAM,
                RecordTypes.UNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WaterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WaterSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly WaterSetterCommon Instance = new WaterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWaterInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Opacity = default(Byte);
            item.Flags = default(Water.Flag);
            item.WASH = null;
            item.ConsumeSpell.Clear();
            item.ContactSpell.Clear();
            item.DATA = default;
            item.DNAM = default;
            item.GNAM = default;
            item.LinearVelocity = default;
            item.AngularVelocity = default;
            item.NAM2 = default;
            item.NAM3 = default;
            item.NAM4 = default;
            item.NAM5 = default;
            item.NAM6 = default;
            item.RiverAbsorptionCurve.Clear();
            item.OceanAbsorptionCurve.Clear();
            item.RiverScatteringCurve.Clear();
            item.OceanScatteringCurve.Clear();
            item.PhytoplanktonCurve.Clear();
            item.SedimentCurve.Clear();
            item.YelowMatterCurve.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWater obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WASH?.RemapLinks(mapping);
            obj.ConsumeSpell.Relink(mapping);
            obj.ContactSpell.Relink(mapping);
            obj.RiverAbsorptionCurve.Relink(mapping);
            obj.OceanAbsorptionCurve.Relink(mapping);
            obj.RiverScatteringCurve.Relink(mapping);
            obj.OceanScatteringCurve.Relink(mapping);
            obj.PhytoplanktonCurve.Relink(mapping);
            obj.SedimentCurve.Relink(mapping);
            obj.YelowMatterCurve.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWaterInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWaterInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WaterBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WaterBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WaterCommon : StarfieldMajorRecordCommon
    {
        public new static readonly WaterCommon Instance = new WaterCommon();

        public Water.Mask<bool> GetEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Water.Mask<bool>(false);
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            Water.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Opacity = item.Opacity == rhs.Opacity;
            ret.Flags = item.Flags == rhs.Flags;
            ret.WASH = EqualsMaskHelper.EqualsHelper(
                item.WASH,
                rhs.WASH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ConsumeSpell = item.ConsumeSpell.Equals(rhs.ConsumeSpell);
            ret.ContactSpell = item.ContactSpell.Equals(rhs.ContactSpell);
            ret.DATA = MemorySliceExt.SequenceEqual(item.DATA, rhs.DATA);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
            ret.LinearVelocity = item.LinearVelocity.Equals(rhs.LinearVelocity);
            ret.AngularVelocity = item.AngularVelocity.Equals(rhs.AngularVelocity);
            ret.NAM2 = string.Equals(item.NAM2, rhs.NAM2);
            ret.NAM3 = string.Equals(item.NAM3, rhs.NAM3);
            ret.NAM4 = string.Equals(item.NAM4, rhs.NAM4);
            ret.NAM5 = item.NAM5 == rhs.NAM5;
            ret.NAM6 = item.NAM6 == rhs.NAM6;
            ret.RiverAbsorptionCurve = item.RiverAbsorptionCurve.Equals(rhs.RiverAbsorptionCurve);
            ret.OceanAbsorptionCurve = item.OceanAbsorptionCurve.Equals(rhs.OceanAbsorptionCurve);
            ret.RiverScatteringCurve = item.RiverScatteringCurve.Equals(rhs.RiverScatteringCurve);
            ret.OceanScatteringCurve = item.OceanScatteringCurve.Equals(rhs.OceanScatteringCurve);
            ret.PhytoplanktonCurve = item.PhytoplanktonCurve.Equals(rhs.PhytoplanktonCurve);
            ret.SedimentCurve = item.SedimentCurve.Equals(rhs.SedimentCurve);
            ret.YelowMatterCurve = item.YelowMatterCurve.Equals(rhs.YelowMatterCurve);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWaterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Water =>");
            }
            else
            {
                sb.AppendLine($"{name} (Water) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWaterGetter item,
            StructuredStringBuilder sb,
            Water.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Opacity ?? true)
            {
                sb.AppendItem(item.Opacity, "Opacity");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.WASH?.Overall ?? true)
                && item.WASH is {} WASHItem)
            {
                WASHItem?.Print(sb, "WASH");
            }
            if (printMask?.ConsumeSpell ?? true)
            {
                sb.AppendItem(item.ConsumeSpell.FormKeyNullable, "ConsumeSpell");
            }
            if (printMask?.ContactSpell ?? true)
            {
                sb.AppendItem(item.ContactSpell.FormKeyNullable, "ContactSpell");
            }
            if ((printMask?.DATA ?? true)
                && item.DATA is {} DATAItem)
            {
                sb.AppendLine($"DATA => {SpanExt.ToHexString(DATAItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
            if ((printMask?.LinearVelocity ?? true)
                && item.LinearVelocity is {} LinearVelocityItem)
            {
                sb.AppendItem(LinearVelocityItem, "LinearVelocity");
            }
            if ((printMask?.AngularVelocity ?? true)
                && item.AngularVelocity is {} AngularVelocityItem)
            {
                sb.AppendItem(AngularVelocityItem, "AngularVelocity");
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2 is {} NAM2Item)
            {
                sb.AppendItem(NAM2Item, "NAM2");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                sb.AppendItem(NAM3Item, "NAM3");
            }
            if ((printMask?.NAM4 ?? true)
                && item.NAM4 is {} NAM4Item)
            {
                sb.AppendItem(NAM4Item, "NAM4");
            }
            if ((printMask?.NAM5 ?? true)
                && item.NAM5 is {} NAM5Item)
            {
                sb.AppendItem(NAM5Item, "NAM5");
            }
            if ((printMask?.NAM6 ?? true)
                && item.NAM6 is {} NAM6Item)
            {
                sb.AppendItem(NAM6Item, "NAM6");
            }
            if (printMask?.RiverAbsorptionCurve ?? true)
            {
                sb.AppendItem(item.RiverAbsorptionCurve.FormKeyNullable, "RiverAbsorptionCurve");
            }
            if (printMask?.OceanAbsorptionCurve ?? true)
            {
                sb.AppendItem(item.OceanAbsorptionCurve.FormKeyNullable, "OceanAbsorptionCurve");
            }
            if (printMask?.RiverScatteringCurve ?? true)
            {
                sb.AppendItem(item.RiverScatteringCurve.FormKeyNullable, "RiverScatteringCurve");
            }
            if (printMask?.OceanScatteringCurve ?? true)
            {
                sb.AppendItem(item.OceanScatteringCurve.FormKeyNullable, "OceanScatteringCurve");
            }
            if (printMask?.PhytoplanktonCurve ?? true)
            {
                sb.AppendItem(item.PhytoplanktonCurve.FormKeyNullable, "PhytoplanktonCurve");
            }
            if (printMask?.SedimentCurve ?? true)
            {
                sb.AppendItem(item.SedimentCurve.FormKeyNullable, "SedimentCurve");
            }
            if (printMask?.YelowMatterCurve ?? true)
            {
                sb.AppendItem(item.YelowMatterCurve.FormKeyNullable, "YelowMatterCurve");
            }
        }
        
        public static Water_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Water_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Water_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWaterGetter? lhs,
            IWaterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                if (lhs.Opacity != rhs.Opacity) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.WASH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WASH, rhs.WASH, out var lhsWASH, out var rhsWASH, out var isWASHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWASH).CommonInstance()!).Equals(lhsWASH, rhsWASH, equalsMask?.GetSubCrystal((int)Water_FieldIndex.WASH))) return false;
                }
                else if (!isWASHEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.ConsumeSpell) ?? true))
            {
                if (!lhs.ConsumeSpell.Equals(rhs.ConsumeSpell)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.ContactSpell) ?? true))
            {
                if (!lhs.ContactSpell.Equals(rhs.ContactSpell)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.DATA) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DATA, rhs.DATA)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.LinearVelocity) ?? true))
            {
                if (!lhs.LinearVelocity.Equals(rhs.LinearVelocity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.AngularVelocity) ?? true))
            {
                if (!lhs.AngularVelocity.Equals(rhs.AngularVelocity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.NAM2) ?? true))
            {
                if (!string.Equals(lhs.NAM2, rhs.NAM2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.NAM3) ?? true))
            {
                if (!string.Equals(lhs.NAM3, rhs.NAM3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.NAM4) ?? true))
            {
                if (!string.Equals(lhs.NAM4, rhs.NAM4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.NAM5) ?? true))
            {
                if (lhs.NAM5 != rhs.NAM5) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.NAM6) ?? true))
            {
                if (lhs.NAM6 != rhs.NAM6) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.RiverAbsorptionCurve) ?? true))
            {
                if (!lhs.RiverAbsorptionCurve.Equals(rhs.RiverAbsorptionCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.OceanAbsorptionCurve) ?? true))
            {
                if (!lhs.OceanAbsorptionCurve.Equals(rhs.OceanAbsorptionCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.RiverScatteringCurve) ?? true))
            {
                if (!lhs.RiverScatteringCurve.Equals(rhs.RiverScatteringCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.OceanScatteringCurve) ?? true))
            {
                if (!lhs.OceanScatteringCurve.Equals(rhs.OceanScatteringCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.PhytoplanktonCurve) ?? true))
            {
                if (!lhs.PhytoplanktonCurve.Equals(rhs.PhytoplanktonCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.SedimentCurve) ?? true))
            {
                if (!lhs.SedimentCurve.Equals(rhs.SedimentCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.YelowMatterCurve) ?? true))
            {
                if (!lhs.YelowMatterCurve.Equals(rhs.YelowMatterCurve)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWaterGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Opacity);
            hash.Add(item.Flags);
            if (item.WASH is {} WASHitem)
            {
                hash.Add(WASHitem);
            }
            hash.Add(item.ConsumeSpell);
            hash.Add(item.ContactSpell);
            if (item.DATA is {} DATAItem)
            {
                hash.Add(DATAItem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            if (item.LinearVelocity is {} LinearVelocityitem)
            {
                hash.Add(LinearVelocityitem);
            }
            if (item.AngularVelocity is {} AngularVelocityitem)
            {
                hash.Add(AngularVelocityitem);
            }
            if (item.NAM2 is {} NAM2item)
            {
                hash.Add(NAM2item);
            }
            if (item.NAM3 is {} NAM3item)
            {
                hash.Add(NAM3item);
            }
            if (item.NAM4 is {} NAM4item)
            {
                hash.Add(NAM4item);
            }
            if (item.NAM5 is {} NAM5item)
            {
                hash.Add(NAM5item);
            }
            if (item.NAM6 is {} NAM6item)
            {
                hash.Add(NAM6item);
            }
            hash.Add(item.RiverAbsorptionCurve);
            hash.Add(item.OceanAbsorptionCurve);
            hash.Add(item.RiverScatteringCurve);
            hash.Add(item.OceanScatteringCurve);
            hash.Add(item.PhytoplanktonCurve);
            hash.Add(item.SedimentCurve);
            hash.Add(item.YelowMatterCurve);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Water.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWaterGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.WASH is {} WASHItems)
            {
                foreach (var item in WASHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ConsumeSpell, out var ConsumeSpellInfo))
            {
                yield return ConsumeSpellInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ContactSpell, out var ContactSpellInfo))
            {
                yield return ContactSpellInfo;
            }
            if (FormLinkInformation.TryFactory(obj.RiverAbsorptionCurve, out var RiverAbsorptionCurveInfo))
            {
                yield return RiverAbsorptionCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.OceanAbsorptionCurve, out var OceanAbsorptionCurveInfo))
            {
                yield return OceanAbsorptionCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.RiverScatteringCurve, out var RiverScatteringCurveInfo))
            {
                yield return RiverScatteringCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.OceanScatteringCurve, out var OceanScatteringCurveInfo))
            {
                yield return OceanScatteringCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PhytoplanktonCurve, out var PhytoplanktonCurveInfo))
            {
                yield return PhytoplanktonCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SedimentCurve, out var SedimentCurveInfo))
            {
                yield return SedimentCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.YelowMatterCurve, out var YelowMatterCurveInfo))
            {
                yield return YelowMatterCurveInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Water Duplicate(
            IWaterGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Water(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWaterGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWaterGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WaterSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly WaterSetterTranslationCommon Instance = new WaterSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWaterInternal item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWater item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                item.Opacity = rhs.Opacity;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.WASH) ?? true))
            {
                errorMask?.PushIndex((int)Water_FieldIndex.WASH);
                try
                {
                    if(rhs.WASH is {} rhsWASH)
                    {
                        item.WASH = rhsWASH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Water_FieldIndex.WASH));
                    }
                    else
                    {
                        item.WASH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.ConsumeSpell) ?? true))
            {
                item.ConsumeSpell.SetTo(rhs.ConsumeSpell.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.ContactSpell) ?? true))
            {
                item.ContactSpell.SetTo(rhs.ContactSpell.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.DATA) ?? true))
            {
                if(rhs.DATA is {} DATArhs)
                {
                    item.DATA = DATArhs.ToArray();
                }
                else
                {
                    item.DATA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.LinearVelocity) ?? true))
            {
                item.LinearVelocity = rhs.LinearVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.AngularVelocity) ?? true))
            {
                item.AngularVelocity = rhs.AngularVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.NAM2) ?? true))
            {
                item.NAM2 = rhs.NAM2;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.NAM3) ?? true))
            {
                item.NAM3 = rhs.NAM3;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.NAM4) ?? true))
            {
                item.NAM4 = rhs.NAM4;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.NAM5) ?? true))
            {
                item.NAM5 = rhs.NAM5;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.NAM6) ?? true))
            {
                item.NAM6 = rhs.NAM6;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.RiverAbsorptionCurve) ?? true))
            {
                item.RiverAbsorptionCurve.SetTo(rhs.RiverAbsorptionCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.OceanAbsorptionCurve) ?? true))
            {
                item.OceanAbsorptionCurve.SetTo(rhs.OceanAbsorptionCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.RiverScatteringCurve) ?? true))
            {
                item.RiverScatteringCurve.SetTo(rhs.RiverScatteringCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.OceanScatteringCurve) ?? true))
            {
                item.OceanScatteringCurve.SetTo(rhs.OceanScatteringCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.PhytoplanktonCurve) ?? true))
            {
                item.PhytoplanktonCurve.SetTo(rhs.PhytoplanktonCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.SedimentCurve) ?? true))
            {
                item.SedimentCurve.SetTo(rhs.SedimentCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.YelowMatterCurve) ?? true))
            {
                item.YelowMatterCurve.SetTo(rhs.YelowMatterCurve.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWater item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Water DeepCopy(
            IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Water
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WaterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class WaterBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WaterBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IWaterGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Opacity,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            EnumBinaryTranslation<Water.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            if (item.WASH is {} WASHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WASH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WASHItem).BinaryWriteTranslator).Write(
                        item: WASHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ConsumeSpell,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ContactSpell,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DATA,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LinearVelocity,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0));
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AngularVelocity,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM2,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM3,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM5,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM6,
                header: translationParams.ConvertToCustom(RecordTypes.NAM6));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RiverAbsorptionCurve,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OceanAbsorptionCurve,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RiverScatteringCurve,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OceanScatteringCurve,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PhytoplanktonCurve,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SedimentCurve,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.YelowMatterCurve,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
        }

        public void Write(
            MutagenWriter writer,
            IWaterGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WATR,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WaterBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly WaterBinaryCreateTranslation Instance = new WaterBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WATR;
        public static ParseResult FillBinaryRecordTypes(
            IWaterInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.Name;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Opacity = frame.ReadUInt8();
                    return (int)Water_FieldIndex.Opacity;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Water.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Water_FieldIndex.Flags;
                }
                case RecordTypeInts.WASH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.WASH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Water_FieldIndex.WASH;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ConsumeSpell.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.ConsumeSpell;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ContactSpell.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.ContactSpell;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DATA = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Water_FieldIndex.DATA;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Water_FieldIndex.DNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Water_FieldIndex.GNAM;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LinearVelocity = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Water_FieldIndex.LinearVelocity;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AngularVelocity = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Water_FieldIndex.AngularVelocity;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM4 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5 = frame.ReadUInt8();
                    return (int)Water_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM6 = frame.ReadUInt8();
                    return (int)Water_FieldIndex.NAM6;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RiverAbsorptionCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.RiverAbsorptionCurve;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OceanAbsorptionCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.OceanAbsorptionCurve;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RiverScatteringCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.RiverScatteringCurve;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OceanScatteringCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.OceanScatteringCurve;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PhytoplanktonCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.PhytoplanktonCurve;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SedimentCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.SedimentCurve;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.YelowMatterCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.YelowMatterCurve;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class WaterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class WaterBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IWaterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WaterCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWater);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Opacity
        private int? _OpacityLocation;
        public Byte Opacity => _OpacityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _OpacityLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Water.Flag Flags => EnumBinaryTranslation<Water.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_FlagsLocation, _recordData, _package, 1);
        #endregion
        public ISoundReferenceGetter? WASH { get; private set; }
        #region ConsumeSpell
        private int? _ConsumeSpellLocation;
        public IFormLinkNullableGetter<ISpellGetter> ConsumeSpell => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISpellGetter>(_package, _recordData, _ConsumeSpellLocation);
        #endregion
        #region ContactSpell
        private int? _ContactSpellLocation;
        public IFormLinkNullableGetter<ISpellGetter> ContactSpell => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISpellGetter>(_package, _recordData, _ContactSpellLocation);
        #endregion
        #region DATA
        private int? _DATALocation;
        public ReadOnlyMemorySlice<Byte>? DATA => _DATALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DATALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        public ReadOnlyMemorySlice<Byte>? GNAM => _GNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LinearVelocity
        private int? _LinearVelocityLocation;
        public P3Float? LinearVelocity => _LinearVelocityLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LinearVelocityLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region AngularVelocity
        private int? _AngularVelocityLocation;
        public P3Float? AngularVelocity => _AngularVelocityLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AngularVelocityLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region NAM2
        private int? _NAM2Location;
        public String? NAM2 => _NAM2Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM2Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public String? NAM3 => _NAM3Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM3Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM4
        private int? _NAM4Location;
        public String? NAM4 => _NAM4Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM4Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM5
        private int? _NAM5Location;
        public Byte? NAM5 => _NAM5Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM5Location.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region NAM6
        private int? _NAM6Location;
        public Byte? NAM6 => _NAM6Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM6Location.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region RiverAbsorptionCurve
        private int? _RiverAbsorptionCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> RiverAbsorptionCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _RiverAbsorptionCurveLocation);
        #endregion
        #region OceanAbsorptionCurve
        private int? _OceanAbsorptionCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> OceanAbsorptionCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _OceanAbsorptionCurveLocation);
        #endregion
        #region RiverScatteringCurve
        private int? _RiverScatteringCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> RiverScatteringCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _RiverScatteringCurveLocation);
        #endregion
        #region OceanScatteringCurve
        private int? _OceanScatteringCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> OceanScatteringCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _OceanScatteringCurveLocation);
        #endregion
        #region PhytoplanktonCurve
        private int? _PhytoplanktonCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> PhytoplanktonCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _PhytoplanktonCurveLocation);
        #endregion
        #region SedimentCurve
        private int? _SedimentCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> SedimentCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _SedimentCurveLocation);
        #endregion
        #region YelowMatterCurve
        private int? _YelowMatterCurveLocation;
        public IFormLinkNullableGetter<ICurve3DGetter> YelowMatterCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurve3DGetter>(_package, _recordData, _YelowMatterCurveLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WaterBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWaterGetter WaterFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WaterBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWaterGetter WaterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WaterFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Name;
                }
                case RecordTypeInts.ANAM:
                {
                    _OpacityLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Opacity;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Flags;
                }
                case RecordTypeInts.WASH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.WASH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Water_FieldIndex.WASH;
                }
                case RecordTypeInts.XNAM:
                {
                    _ConsumeSpellLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.ConsumeSpell;
                }
                case RecordTypeInts.YNAM:
                {
                    _ContactSpellLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.ContactSpell;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.DATA;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.DNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    _GNAMLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.GNAM;
                }
                case RecordTypeInts.NAM0:
                {
                    _LinearVelocityLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.LinearVelocity;
                }
                case RecordTypeInts.NAM1:
                {
                    _AngularVelocityLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.AngularVelocity;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)Water_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)Water_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    _NAM4Location = (stream.Position - offset);
                    return (int)Water_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)Water_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    _NAM6Location = (stream.Position - offset);
                    return (int)Water_FieldIndex.NAM6;
                }
                case RecordTypeInts.ENAM:
                {
                    _RiverAbsorptionCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.RiverAbsorptionCurve;
                }
                case RecordTypeInts.HNAM:
                {
                    _OceanAbsorptionCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.OceanAbsorptionCurve;
                }
                case RecordTypeInts.JNAM:
                {
                    _RiverScatteringCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.RiverScatteringCurve;
                }
                case RecordTypeInts.LNAM:
                {
                    _OceanScatteringCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.OceanScatteringCurve;
                }
                case RecordTypeInts.MNAM:
                {
                    _PhytoplanktonCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.PhytoplanktonCurve;
                }
                case RecordTypeInts.QNAM:
                {
                    _SedimentCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.SedimentCurve;
                }
                case RecordTypeInts.UNAM:
                {
                    _YelowMatterCurveLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.YelowMatterCurve;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WaterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Water>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWaterGetter rhs) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWaterGetter? obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

