/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GameplayOptionsGroup :
        StarfieldMajorRecord,
        IEquatable<IGameplayOptionsGroupGetter>,
        IGameplayOptionsGroupInternal,
        ILoquiObjectSetter<GameplayOptionsGroup>
    {
        #region Ctor
        protected GameplayOptionsGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGameplayOptionsGroupGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Options
        public AGameplayOptionsNode Options { get; set; } = default!;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAGameplayOptionsNodeGetter IGameplayOptionsGroupGetter.Options => Options;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Options = new MaskItem<TItem, AGameplayOptionsNode.Mask<TItem>?>(initialValue, new AGameplayOptionsNode.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Name,
                TItem Options)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Name = Name;
                this.Options = new MaskItem<TItem, AGameplayOptionsNode.Mask<TItem>?>(Options, new AGameplayOptionsNode.Mask<TItem>(Options));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, AGameplayOptionsNode.Mask<TItem>?>? Options { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Options, rhs.Options)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Options);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Options != null)
                {
                    if (!eval(this.Options.Overall)) return false;
                    if (this.Options.Specific != null && !this.Options.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Options != null)
                {
                    if (eval(this.Options.Overall)) return true;
                    if (this.Options.Specific != null && this.Options.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GameplayOptionsGroup.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Options = this.Options == null ? null : new MaskItem<R, AGameplayOptionsNode.Mask<R>?>(eval(this.Options.Overall), this.Options.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GameplayOptionsGroup.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GameplayOptionsGroup.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GameplayOptionsGroup.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Options?.Overall ?? true)
                    {
                        Options?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, AGameplayOptionsNode.ErrorMask?>? Options;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GameplayOptionsGroup_FieldIndex enu = (GameplayOptionsGroup_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionsGroup_FieldIndex.Name:
                        return Name;
                    case GameplayOptionsGroup_FieldIndex.Options:
                        return Options;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GameplayOptionsGroup_FieldIndex enu = (GameplayOptionsGroup_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionsGroup_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case GameplayOptionsGroup_FieldIndex.Options:
                        this.Options = new MaskItem<Exception?, AGameplayOptionsNode.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GameplayOptionsGroup_FieldIndex enu = (GameplayOptionsGroup_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionsGroup_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case GameplayOptionsGroup_FieldIndex.Options:
                        this.Options = (MaskItem<Exception?, AGameplayOptionsNode.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Options != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Options?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Options = this.Options.Combine(rhs.Options, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public AGameplayOptionsNode.TranslationMask? Options;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Options != null ? Options.OnOverall : DefaultOn, Options?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = GameplayOptionsGroup_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GameplayOptionsGroupCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GameplayOptionsGroupSetterCommon.Instance.RemapLinks(this, mapping);
        public GameplayOptionsGroup(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private GameplayOptionsGroup(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal GameplayOptionsGroup(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public GameplayOptionsGroup(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public GameplayOptionsGroup(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptionsGroup>.ToString(this);
        }

        protected override Type LinkType => typeof(IGameplayOptionsGroup);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGroupGetter rhs) return false;
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGroupGetter? obj)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsGroupBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GameplayOptionsGroup CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GameplayOptionsGroup();
            ((GameplayOptionsGroupSetterCommon)((IGameplayOptionsGroupGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GameplayOptionsGroup item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GameplayOptionsGroupSetterCommon)((IGameplayOptionsGroupGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GameplayOptionsGroup GetNew()
        {
            return new GameplayOptionsGroup();
        }

    }
    #endregion

    #region Interface
    public partial interface IGameplayOptionsGroup :
        IFormLinkContainer,
        IGameplayOptionsGroupGetter,
        ILoquiObjectSetter<IGameplayOptionsGroupInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new AGameplayOptionsNode Options { get; set; }
    }

    public partial interface IGameplayOptionsGroupInternal :
        IStarfieldMajorRecordInternal,
        IGameplayOptionsGroup,
        IGameplayOptionsGroupGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.GPOG)]
    public partial interface IGameplayOptionsGroupGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGameplayOptionsGroupGetter>,
        IMapsToGetter<IGameplayOptionsGroupGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => GameplayOptionsGroup_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        IAGameplayOptionsNodeGetter Options { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GameplayOptionsGroupMixIn
    {
        public static void Clear(this IGameplayOptionsGroupInternal item)
        {
            ((GameplayOptionsGroupSetterCommon)((IGameplayOptionsGroupGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GameplayOptionsGroup.Mask<bool> GetEqualsMask(
            this IGameplayOptionsGroupGetter item,
            IGameplayOptionsGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGameplayOptionsGroupGetter item,
            string? name = null,
            GameplayOptionsGroup.Mask<bool>? printMask = null)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGameplayOptionsGroupGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptionsGroup.Mask<bool>? printMask = null)
        {
            ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGameplayOptionsGroupGetter item,
            IGameplayOptionsGroupGetter rhs,
            GameplayOptionsGroup.TranslationMask? equalsMask = null)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGameplayOptionsGroupInternal lhs,
            IGameplayOptionsGroupGetter rhs,
            out GameplayOptionsGroup.ErrorMask errorMask,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GameplayOptionsGroup.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGameplayOptionsGroupInternal lhs,
            IGameplayOptionsGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GameplayOptionsGroup DeepCopy(
            this IGameplayOptionsGroupGetter item,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GameplayOptionsGroup DeepCopy(
            this IGameplayOptionsGroupGetter item,
            out GameplayOptionsGroup.ErrorMask errorMask,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GameplayOptionsGroup DeepCopy(
            this IGameplayOptionsGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static GameplayOptionsGroup Duplicate(
            this IGameplayOptionsGroupGetter item,
            FormKey formKey,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static GameplayOptionsGroup Duplicate(
            this IGameplayOptionsGroupGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGameplayOptionsGroupInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GameplayOptionsGroupSetterCommon)((IGameplayOptionsGroupGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GameplayOptionsGroup_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Name = 7,
        Options = 8,
    }
    #endregion

    #region Registration
    internal partial class GameplayOptionsGroup_Registration : ILoquiRegistration
    {
        public static readonly GameplayOptionsGroup_Registration Instance = new GameplayOptionsGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(GameplayOptionsGroup.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameplayOptionsGroup.ErrorMask);

        public static readonly Type ClassType = typeof(GameplayOptionsGroup);

        public static readonly Type GetterType = typeof(IGameplayOptionsGroupGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGameplayOptionsGroup);

        public static readonly Type? InternalSetterType = typeof(IGameplayOptionsGroupInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.GameplayOptionsGroup";

        public const string Name = "GameplayOptionsGroup";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GPOG;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GPOG);
            var all = RecordCollection.Factory(
                RecordTypes.GPOG,
                RecordTypes.NNAM,
                RecordTypes.BNAM,
                RecordTypes.GOGL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GameplayOptionsGroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GameplayOptionsGroupSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly GameplayOptionsGroupSetterCommon Instance = new GameplayOptionsGroupSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGameplayOptionsGroupInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Options.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsGroupInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsGroupInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGameplayOptionsGroup obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Options.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGameplayOptionsGroupInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGameplayOptionsGroupInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GameplayOptionsGroupBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GameplayOptionsGroupBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptionsGroup)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptionsGroup)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GameplayOptionsGroupCommon : StarfieldMajorRecordCommon
    {
        public new static readonly GameplayOptionsGroupCommon Instance = new GameplayOptionsGroupCommon();

        public GameplayOptionsGroup.Mask<bool> GetEqualsMask(
            IGameplayOptionsGroupGetter item,
            IGameplayOptionsGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameplayOptionsGroup.Mask<bool>(false);
            ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGameplayOptionsGroupGetter item,
            IGameplayOptionsGroupGetter rhs,
            GameplayOptionsGroup.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Options = MaskItemExt.Factory(item.Options.GetEqualsMask(rhs.Options, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGameplayOptionsGroupGetter item,
            string? name = null,
            GameplayOptionsGroup.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGameplayOptionsGroupGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptionsGroup.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GameplayOptionsGroup =>");
            }
            else
            {
                sb.AppendLine($"{name} (GameplayOptionsGroup) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGameplayOptionsGroupGetter item,
            StructuredStringBuilder sb,
            GameplayOptionsGroup.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Options?.Overall ?? true)
            {
                item.Options?.Print(sb, "Options");
            }
        }
        
        public static GameplayOptionsGroup_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new GameplayOptionsGroup_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GameplayOptionsGroup_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGameplayOptionsGroupGetter? lhs,
            IGameplayOptionsGroupGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptionsGroup_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptionsGroup_FieldIndex.Options) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Options, rhs.Options, out var lhsOptions, out var rhsOptions, out var isOptionsEqual))
                {
                    if (!((AGameplayOptionsNodeCommon)((IAGameplayOptionsNodeGetter)lhsOptions).CommonInstance()!).Equals(lhsOptions, rhsOptions, equalsMask?.GetSubCrystal((int)GameplayOptionsGroup_FieldIndex.Options))) return false;
                }
                else if (!isOptionsEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGroupGetter?)lhs,
                rhs: rhs as IGameplayOptionsGroupGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGroupGetter?)lhs,
                rhs: rhs as IGameplayOptionsGroupGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGameplayOptionsGroupGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Options);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGroupGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGroupGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GameplayOptionsGroup.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGameplayOptionsGroupGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Options is IFormLinkContainerGetter OptionslinkCont)
            {
                foreach (var item in OptionslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public GameplayOptionsGroup Duplicate(
            IGameplayOptionsGroupGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new GameplayOptionsGroup(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGroupGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGroupGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GameplayOptionsGroupSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly GameplayOptionsGroupSetterTranslationCommon Instance = new GameplayOptionsGroupSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGameplayOptionsGroupInternal item,
            IGameplayOptionsGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGameplayOptionsGroup item,
            IGameplayOptionsGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GameplayOptionsGroup_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptionsGroup_FieldIndex.Options) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptionsGroup_FieldIndex.Options);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)GameplayOptionsGroup_FieldIndex.Options) ?? true))
                    {
                        item.Options = rhs.Options.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)GameplayOptionsGroup_FieldIndex.Options),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGameplayOptionsGroup item,
            IGameplayOptionsGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsGroupInternal)item,
                rhs: (IGameplayOptionsGroupGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsGroup)item,
                rhs: (IGameplayOptionsGroupGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsGroupInternal)item,
                rhs: (IGameplayOptionsGroupGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsGroup)item,
                rhs: (IGameplayOptionsGroupGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GameplayOptionsGroup DeepCopy(
            IGameplayOptionsGroupGetter item,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            GameplayOptionsGroup ret = (GameplayOptionsGroup)((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GameplayOptionsGroup DeepCopy(
            IGameplayOptionsGroupGetter item,
            out GameplayOptionsGroup.ErrorMask errorMask,
            GameplayOptionsGroup.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GameplayOptionsGroup ret = (GameplayOptionsGroup)((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GameplayOptionsGroup.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GameplayOptionsGroup DeepCopy(
            IGameplayOptionsGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GameplayOptionsGroup ret = (GameplayOptionsGroup)((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsGroupSetterTranslationCommon)((IGameplayOptionsGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionsGroup
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptionsGroup_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptionsGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsGroupCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GameplayOptionsGroupSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsGroupSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionsGroupBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GameplayOptionsGroupBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGameplayOptionsGroupGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            GameplayOptionsGroupBinaryWriteTranslation.WriteBinaryGroups(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryGroupsCustom(
            MutagenWriter writer,
            IGameplayOptionsGroupGetter item);

        public static void WriteBinaryGroups(
            MutagenWriter writer,
            IGameplayOptionsGroupGetter item)
        {
            WriteBinaryGroupsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IGameplayOptionsGroupGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GPOG,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGameplayOptionsGroupGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGroupGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGroupGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GameplayOptionsGroupBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly GameplayOptionsGroupBinaryCreateTranslation Instance = new GameplayOptionsGroupBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GPOG;
        public static ParseResult FillBinaryRecordTypes(
            IGameplayOptionsGroupInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GameplayOptionsGroup_FieldIndex.Name;
                }
                case RecordTypeInts.BNAM:
                {
                    return GameplayOptionsGroupBinaryCreateTranslation.FillBinaryGroupsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryGroupsCustom(
            MutagenFrame frame,
            IGameplayOptionsGroupInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GameplayOptionsGroupBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GameplayOptionsGroupBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IGameplayOptionsGroupGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptionsGroup_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptionsGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsGroupCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsGroupSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GameplayOptionsGroupCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsGroupBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGameplayOptionsGroup);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Groups
        public partial ParseResult GroupsCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GameplayOptionsGroupBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGameplayOptionsGroupGetter GameplayOptionsGroupFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GameplayOptionsGroupBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGameplayOptionsGroupGetter GameplayOptionsGroupFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GameplayOptionsGroupFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)GameplayOptionsGroup_FieldIndex.Name;
                }
                case RecordTypeInts.BNAM:
                {
                    return GroupsCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptionsGroup>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGroupGetter rhs) return false;
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGroupGetter? obj)
        {
            return ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsGroupCommon)((IGameplayOptionsGroupGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

