/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ImageSpace :
        StarfieldMajorRecord,
        IEquatable<IImageSpaceGetter>,
        IImageSpaceInternal,
        ILoquiObjectSetter<ImageSpace>
    {
        #region Ctor
        protected ImageSpace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region REFL
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _REFL;
        public MemorySlice<Byte>? REFL
        {
            get => this._REFL;
            set => this._REFL = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.REFL => this.REFL;
        #endregion
        #region ReflectionParent
        private readonly IFormLinkNullable<IWeatherSettingGetter> _ReflectionParent = new FormLinkNullable<IWeatherSettingGetter>();
        public IFormLinkNullable<IWeatherSettingGetter> ReflectionParent
        {
            get => _ReflectionParent;
            set => _ReflectionParent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWeatherSettingGetter> IImageSpaceGetter.ReflectionParent => this.ReflectionParent;
        #endregion
        #region ReflectionDiff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ReflectionDiff;
        public MemorySlice<Byte>? ReflectionDiff
        {
            get => this._ReflectionDiff;
            set => this._ReflectionDiff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.ReflectionDiff => this.ReflectionDiff;
        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.ENAM => this.ENAM;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.CNAM => this.CNAM;
        #endregion
        #region TNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TNAM;
        public MemorySlice<Byte>? TNAM
        {
            get => this._TNAM;
            set => this._TNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.TNAM => this.TNAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.DNAM => this.DNAM;
        #endregion
        #region XNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XNAM;
        public MemorySlice<Byte>? XNAM
        {
            get => this._XNAM;
            set => this._XNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.XNAM => this.XNAM;
        #endregion
        #region INAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _INAM;
        public MemorySlice<Byte>? INAM
        {
            get => this._INAM;
            set => this._INAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.INAM => this.INAM;
        #endregion
        #region YNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _YNAM;
        public MemorySlice<Byte>? YNAM
        {
            get => this._YNAM;
            set => this._YNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.YNAM => this.YNAM;
        #endregion
        #region ZNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ZNAM;
        public MemorySlice<Byte>? ZNAM
        {
            get => this._ZNAM;
            set => this._ZNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.ZNAM => this.ZNAM;
        #endregion
        #region Lut
        public String? Lut { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IImageSpaceGetter.Lut => this.Lut;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.REFL = initialValue;
                this.ReflectionParent = initialValue;
                this.ReflectionDiff = initialValue;
                this.ENAM = initialValue;
                this.CNAM = initialValue;
                this.TNAM = initialValue;
                this.DNAM = initialValue;
                this.XNAM = initialValue;
                this.INAM = initialValue;
                this.YNAM = initialValue;
                this.ZNAM = initialValue;
                this.Lut = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem REFL,
                TItem ReflectionParent,
                TItem ReflectionDiff,
                TItem ENAM,
                TItem CNAM,
                TItem TNAM,
                TItem DNAM,
                TItem XNAM,
                TItem INAM,
                TItem YNAM,
                TItem ZNAM,
                TItem Lut)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.REFL = REFL;
                this.ReflectionParent = ReflectionParent;
                this.ReflectionDiff = ReflectionDiff;
                this.ENAM = ENAM;
                this.CNAM = CNAM;
                this.TNAM = TNAM;
                this.DNAM = DNAM;
                this.XNAM = XNAM;
                this.INAM = INAM;
                this.YNAM = YNAM;
                this.ZNAM = ZNAM;
                this.Lut = Lut;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem REFL;
            public TItem ReflectionParent;
            public TItem ReflectionDiff;
            public TItem ENAM;
            public TItem CNAM;
            public TItem TNAM;
            public TItem DNAM;
            public TItem XNAM;
            public TItem INAM;
            public TItem YNAM;
            public TItem ZNAM;
            public TItem Lut;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.REFL, rhs.REFL)) return false;
                if (!object.Equals(this.ReflectionParent, rhs.ReflectionParent)) return false;
                if (!object.Equals(this.ReflectionDiff, rhs.ReflectionDiff)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.TNAM, rhs.TNAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.XNAM, rhs.XNAM)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.YNAM, rhs.YNAM)) return false;
                if (!object.Equals(this.ZNAM, rhs.ZNAM)) return false;
                if (!object.Equals(this.Lut, rhs.Lut)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.REFL);
                hash.Add(this.ReflectionParent);
                hash.Add(this.ReflectionDiff);
                hash.Add(this.ENAM);
                hash.Add(this.CNAM);
                hash.Add(this.TNAM);
                hash.Add(this.DNAM);
                hash.Add(this.XNAM);
                hash.Add(this.INAM);
                hash.Add(this.YNAM);
                hash.Add(this.ZNAM);
                hash.Add(this.Lut);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.REFL)) return false;
                if (!eval(this.ReflectionParent)) return false;
                if (!eval(this.ReflectionDiff)) return false;
                if (!eval(this.ENAM)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.TNAM)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.XNAM)) return false;
                if (!eval(this.INAM)) return false;
                if (!eval(this.YNAM)) return false;
                if (!eval(this.ZNAM)) return false;
                if (!eval(this.Lut)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.REFL)) return true;
                if (eval(this.ReflectionParent)) return true;
                if (eval(this.ReflectionDiff)) return true;
                if (eval(this.ENAM)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.TNAM)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.XNAM)) return true;
                if (eval(this.INAM)) return true;
                if (eval(this.YNAM)) return true;
                if (eval(this.ZNAM)) return true;
                if (eval(this.Lut)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImageSpace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.REFL = eval(this.REFL);
                obj.ReflectionParent = eval(this.ReflectionParent);
                obj.ReflectionDiff = eval(this.ReflectionDiff);
                obj.ENAM = eval(this.ENAM);
                obj.CNAM = eval(this.CNAM);
                obj.TNAM = eval(this.TNAM);
                obj.DNAM = eval(this.DNAM);
                obj.XNAM = eval(this.XNAM);
                obj.INAM = eval(this.INAM);
                obj.YNAM = eval(this.YNAM);
                obj.ZNAM = eval(this.ZNAM);
                obj.Lut = eval(this.Lut);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ImageSpace.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ImageSpace.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ImageSpace.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.REFL ?? true)
                    {
                        sb.AppendItem(REFL, "REFL");
                    }
                    if (printMask?.ReflectionParent ?? true)
                    {
                        sb.AppendItem(ReflectionParent, "ReflectionParent");
                    }
                    if (printMask?.ReflectionDiff ?? true)
                    {
                        sb.AppendItem(ReflectionDiff, "ReflectionDiff");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.TNAM ?? true)
                    {
                        sb.AppendItem(TNAM, "TNAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.XNAM ?? true)
                    {
                        sb.AppendItem(XNAM, "XNAM");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        sb.AppendItem(INAM, "INAM");
                    }
                    if (printMask?.YNAM ?? true)
                    {
                        sb.AppendItem(YNAM, "YNAM");
                    }
                    if (printMask?.ZNAM ?? true)
                    {
                        sb.AppendItem(ZNAM, "ZNAM");
                    }
                    if (printMask?.Lut ?? true)
                    {
                        sb.AppendItem(Lut, "Lut");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? REFL;
            public Exception? ReflectionParent;
            public Exception? ReflectionDiff;
            public Exception? ENAM;
            public Exception? CNAM;
            public Exception? TNAM;
            public Exception? DNAM;
            public Exception? XNAM;
            public Exception? INAM;
            public Exception? YNAM;
            public Exception? ZNAM;
            public Exception? Lut;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.REFL:
                        return REFL;
                    case ImageSpace_FieldIndex.ReflectionParent:
                        return ReflectionParent;
                    case ImageSpace_FieldIndex.ReflectionDiff:
                        return ReflectionDiff;
                    case ImageSpace_FieldIndex.ENAM:
                        return ENAM;
                    case ImageSpace_FieldIndex.CNAM:
                        return CNAM;
                    case ImageSpace_FieldIndex.TNAM:
                        return TNAM;
                    case ImageSpace_FieldIndex.DNAM:
                        return DNAM;
                    case ImageSpace_FieldIndex.XNAM:
                        return XNAM;
                    case ImageSpace_FieldIndex.INAM:
                        return INAM;
                    case ImageSpace_FieldIndex.YNAM:
                        return YNAM;
                    case ImageSpace_FieldIndex.ZNAM:
                        return ZNAM;
                    case ImageSpace_FieldIndex.Lut:
                        return Lut;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.REFL:
                        this.REFL = ex;
                        break;
                    case ImageSpace_FieldIndex.ReflectionParent:
                        this.ReflectionParent = ex;
                        break;
                    case ImageSpace_FieldIndex.ReflectionDiff:
                        this.ReflectionDiff = ex;
                        break;
                    case ImageSpace_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case ImageSpace_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.TNAM:
                        this.TNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.XNAM:
                        this.XNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case ImageSpace_FieldIndex.YNAM:
                        this.YNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.ZNAM:
                        this.ZNAM = ex;
                        break;
                    case ImageSpace_FieldIndex.Lut:
                        this.Lut = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.REFL:
                        this.REFL = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.ReflectionParent:
                        this.ReflectionParent = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.ReflectionDiff:
                        this.ReflectionDiff = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.TNAM:
                        this.TNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.XNAM:
                        this.XNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.YNAM:
                        this.YNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.ZNAM:
                        this.ZNAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.Lut:
                        this.Lut = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (REFL != null) return true;
                if (ReflectionParent != null) return true;
                if (ReflectionDiff != null) return true;
                if (ENAM != null) return true;
                if (CNAM != null) return true;
                if (TNAM != null) return true;
                if (DNAM != null) return true;
                if (XNAM != null) return true;
                if (INAM != null) return true;
                if (YNAM != null) return true;
                if (ZNAM != null) return true;
                if (Lut != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(REFL, "REFL");
                }
                {
                    sb.AppendItem(ReflectionParent, "ReflectionParent");
                }
                {
                    sb.AppendItem(ReflectionDiff, "ReflectionDiff");
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                {
                    sb.AppendItem(TNAM, "TNAM");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(XNAM, "XNAM");
                }
                {
                    sb.AppendItem(INAM, "INAM");
                }
                {
                    sb.AppendItem(YNAM, "YNAM");
                }
                {
                    sb.AppendItem(ZNAM, "ZNAM");
                }
                {
                    sb.AppendItem(Lut, "Lut");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.REFL = this.REFL.Combine(rhs.REFL);
                ret.ReflectionParent = this.ReflectionParent.Combine(rhs.ReflectionParent);
                ret.ReflectionDiff = this.ReflectionDiff.Combine(rhs.ReflectionDiff);
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.TNAM = this.TNAM.Combine(rhs.TNAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.XNAM = this.XNAM.Combine(rhs.XNAM);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.YNAM = this.YNAM.Combine(rhs.YNAM);
                ret.ZNAM = this.ZNAM.Combine(rhs.ZNAM);
                ret.Lut = this.Lut.Combine(rhs.Lut);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool REFL;
            public bool ReflectionParent;
            public bool ReflectionDiff;
            public bool ENAM;
            public bool CNAM;
            public bool TNAM;
            public bool DNAM;
            public bool XNAM;
            public bool INAM;
            public bool YNAM;
            public bool ZNAM;
            public bool Lut;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.REFL = defaultOn;
                this.ReflectionParent = defaultOn;
                this.ReflectionDiff = defaultOn;
                this.ENAM = defaultOn;
                this.CNAM = defaultOn;
                this.TNAM = defaultOn;
                this.DNAM = defaultOn;
                this.XNAM = defaultOn;
                this.INAM = defaultOn;
                this.YNAM = defaultOn;
                this.ZNAM = defaultOn;
                this.Lut = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((REFL, null));
                ret.Add((ReflectionParent, null));
                ret.Add((ReflectionDiff, null));
                ret.Add((ENAM, null));
                ret.Add((CNAM, null));
                ret.Add((TNAM, null));
                ret.Add((DNAM, null));
                ret.Add((XNAM, null));
                ret.Add((INAM, null));
                ret.Add((YNAM, null));
                ret.Add((ZNAM, null));
                ret.Add((Lut, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ImageSpace_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ImageSpaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImageSpaceSetterCommon.Instance.RemapLinks(this, mapping);
        public ImageSpace(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ImageSpace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ImageSpace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ImageSpace(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ImageSpace(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        protected override Type LinkType => typeof(IImageSpace);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ImageSpace CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ImageSpace();
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImageSpace item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ImageSpace GetNew()
        {
            return new ImageSpace();
        }

    }
    #endregion

    #region Interface
    public partial interface IImageSpace :
        IFormLinkContainer,
        IImageSpaceGetter,
        ILoquiObjectSetter<IImageSpaceInternal>,
        IStarfieldMajorRecordInternal
    {
        new MemorySlice<Byte>? REFL { get; set; }
        new IFormLinkNullable<IWeatherSettingGetter> ReflectionParent { get; set; }
        new MemorySlice<Byte>? ReflectionDiff { get; set; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new MemorySlice<Byte>? TNAM { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? XNAM { get; set; }
        new MemorySlice<Byte>? INAM { get; set; }
        new MemorySlice<Byte>? YNAM { get; set; }
        new MemorySlice<Byte>? ZNAM { get; set; }
        new String? Lut { get; set; }
    }

    public partial interface IImageSpaceInternal :
        IStarfieldMajorRecordInternal,
        IImageSpace,
        IImageSpaceGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.IMGS)]
    public partial interface IImageSpaceGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IImageSpaceGetter>,
        IMapsToGetter<IImageSpaceGetter>
    {
        static new ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? REFL { get; }
        IFormLinkNullableGetter<IWeatherSettingGetter> ReflectionParent { get; }
        ReadOnlyMemorySlice<Byte>? ReflectionDiff { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        ReadOnlyMemorySlice<Byte>? TNAM { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? XNAM { get; }
        ReadOnlyMemorySlice<Byte>? INAM { get; }
        ReadOnlyMemorySlice<Byte>? YNAM { get; }
        ReadOnlyMemorySlice<Byte>? ZNAM { get; }
        String? Lut { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImageSpaceMixIn
    {
        public static void Clear(this IImageSpaceInternal item)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImageSpace.Mask<bool> GetEqualsMask(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.TranslationMask? equalsMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ImageSpace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        REFL = 7,
        ReflectionParent = 8,
        ReflectionDiff = 9,
        ENAM = 10,
        CNAM = 11,
        TNAM = 12,
        DNAM = 13,
        XNAM = 14,
        INAM = 15,
        YNAM = 16,
        ZNAM = 17,
        Lut = 18,
    }
    #endregion

    #region Registration
    internal partial class ImageSpace_Registration : ILoquiRegistration
    {
        public static readonly ImageSpace_Registration Instance = new ImageSpace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(ImageSpace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImageSpace.ErrorMask);

        public static readonly Type ClassType = typeof(ImageSpace);

        public static readonly Type GetterType = typeof(IImageSpaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImageSpace);

        public static readonly Type? InternalSetterType = typeof(IImageSpaceInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ImageSpace";

        public const string Name = "ImageSpace";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IMGS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IMGS);
            var all = RecordCollection.Factory(
                RecordTypes.IMGS,
                RecordTypes.REFL,
                RecordTypes.RFDP,
                RecordTypes.RDIF,
                RecordTypes.ENAM,
                RecordTypes.CNAM,
                RecordTypes.TNAM,
                RecordTypes.DNAM,
                RecordTypes.XNAM,
                RecordTypes.INAM,
                RecordTypes.YNAM,
                RecordTypes.ZNAM,
                RecordTypes.TX00);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ImageSpaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ImageSpaceSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ImageSpaceSetterCommon Instance = new ImageSpaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImageSpaceInternal item)
        {
            ClearPartial();
            item.REFL = default;
            item.ReflectionParent.Clear();
            item.ReflectionDiff = default;
            item.ENAM = default;
            item.CNAM = default;
            item.TNAM = default;
            item.DNAM = default;
            item.XNAM = default;
            item.INAM = default;
            item.YNAM = default;
            item.ZNAM = default;
            item.Lut = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IImageSpace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ReflectionParent.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IImageSpaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ImageSpaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImageSpaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ImageSpaceCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ImageSpaceCommon Instance = new ImageSpaceCommon();

        public ImageSpace.Mask<bool> GetEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImageSpace.Mask<bool>(false);
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.REFL = MemorySliceExt.SequenceEqual(item.REFL, rhs.REFL);
            ret.ReflectionParent = item.ReflectionParent.Equals(rhs.ReflectionParent);
            ret.ReflectionDiff = MemorySliceExt.SequenceEqual(item.ReflectionDiff, rhs.ReflectionDiff);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.CNAM = MemorySliceExt.SequenceEqual(item.CNAM, rhs.CNAM);
            ret.TNAM = MemorySliceExt.SequenceEqual(item.TNAM, rhs.TNAM);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.XNAM = MemorySliceExt.SequenceEqual(item.XNAM, rhs.XNAM);
            ret.INAM = MemorySliceExt.SequenceEqual(item.INAM, rhs.INAM);
            ret.YNAM = MemorySliceExt.SequenceEqual(item.YNAM, rhs.YNAM);
            ret.ZNAM = MemorySliceExt.SequenceEqual(item.ZNAM, rhs.ZNAM);
            ret.Lut = string.Equals(item.Lut, rhs.Lut);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ImageSpace =>");
            }
            else
            {
                sb.AppendLine($"{name} (ImageSpace) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            ImageSpace.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.REFL ?? true)
                && item.REFL is {} REFLItem)
            {
                sb.AppendLine($"REFL => {SpanExt.ToHexString(REFLItem)}");
            }
            if (printMask?.ReflectionParent ?? true)
            {
                sb.AppendItem(item.ReflectionParent.FormKeyNullable, "ReflectionParent");
            }
            if ((printMask?.ReflectionDiff ?? true)
                && item.ReflectionDiff is {} ReflectionDiffItem)
            {
                sb.AppendLine($"ReflectionDiff => {SpanExt.ToHexString(ReflectionDiffItem)}");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.TNAM ?? true)
                && item.TNAM is {} TNAMItem)
            {
                sb.AppendLine($"TNAM => {SpanExt.ToHexString(TNAMItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.XNAM ?? true)
                && item.XNAM is {} XNAMItem)
            {
                sb.AppendLine($"XNAM => {SpanExt.ToHexString(XNAMItem)}");
            }
            if ((printMask?.INAM ?? true)
                && item.INAM is {} INAMItem)
            {
                sb.AppendLine($"INAM => {SpanExt.ToHexString(INAMItem)}");
            }
            if ((printMask?.YNAM ?? true)
                && item.YNAM is {} YNAMItem)
            {
                sb.AppendLine($"YNAM => {SpanExt.ToHexString(YNAMItem)}");
            }
            if ((printMask?.ZNAM ?? true)
                && item.ZNAM is {} ZNAMItem)
            {
                sb.AppendLine($"ZNAM => {SpanExt.ToHexString(ZNAMItem)}");
            }
            if ((printMask?.Lut ?? true)
                && item.Lut is {} LutItem)
            {
                sb.AppendItem(LutItem, "Lut");
            }
        }
        
        public static ImageSpace_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ImageSpace_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ImageSpace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImageSpaceGetter? lhs,
            IImageSpaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.REFL) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.REFL, rhs.REFL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ReflectionParent) ?? true))
            {
                if (!lhs.ReflectionParent.Equals(rhs.ReflectionParent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ReflectionDiff) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ReflectionDiff, rhs.ReflectionDiff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CNAM, rhs.CNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TNAM, rhs.TNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.XNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XNAM, rhs.XNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.INAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.INAM, rhs.INAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.YNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.YNAM, rhs.YNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ZNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ZNAM, rhs.ZNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Lut) ?? true))
            {
                if (!string.Equals(lhs.Lut, rhs.Lut)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IImageSpaceGetter item)
        {
            var hash = new HashCode();
            if (item.REFL is {} REFLItem)
            {
                hash.Add(REFLItem);
            }
            hash.Add(item.ReflectionParent);
            if (item.ReflectionDiff is {} ReflectionDiffItem)
            {
                hash.Add(ReflectionDiffItem);
            }
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.CNAM is {} CNAMItem)
            {
                hash.Add(CNAMItem);
            }
            if (item.TNAM is {} TNAMItem)
            {
                hash.Add(TNAMItem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.XNAM is {} XNAMItem)
            {
                hash.Add(XNAMItem);
            }
            if (item.INAM is {} INAMItem)
            {
                hash.Add(INAMItem);
            }
            if (item.YNAM is {} YNAMItem)
            {
                hash.Add(YNAMItem);
            }
            if (item.ZNAM is {} ZNAMItem)
            {
                hash.Add(ZNAMItem);
            }
            if (item.Lut is {} Lutitem)
            {
                hash.Add(Lutitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ImageSpace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IImageSpaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.ReflectionParent, out var ReflectionParentInfo))
            {
                yield return ReflectionParentInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public ImageSpace Duplicate(
            IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ImageSpace(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ImageSpaceSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ImageSpaceSetterTranslationCommon Instance = new ImageSpaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImageSpaceInternal item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.REFL) ?? true))
            {
                if(rhs.REFL is {} REFLrhs)
                {
                    item.REFL = REFLrhs.ToArray();
                }
                else
                {
                    item.REFL = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ReflectionParent) ?? true))
            {
                item.ReflectionParent.SetTo(rhs.ReflectionParent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ReflectionDiff) ?? true))
            {
                if(rhs.ReflectionDiff is {} ReflectionDiffrhs)
                {
                    item.ReflectionDiff = ReflectionDiffrhs.ToArray();
                }
                else
                {
                    item.ReflectionDiff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM is {} CNAMrhs)
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TNAM) ?? true))
            {
                if(rhs.TNAM is {} TNAMrhs)
                {
                    item.TNAM = TNAMrhs.ToArray();
                }
                else
                {
                    item.TNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.XNAM) ?? true))
            {
                if(rhs.XNAM is {} XNAMrhs)
                {
                    item.XNAM = XNAMrhs.ToArray();
                }
                else
                {
                    item.XNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.INAM) ?? true))
            {
                if(rhs.INAM is {} INAMrhs)
                {
                    item.INAM = INAMrhs.ToArray();
                }
                else
                {
                    item.INAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.YNAM) ?? true))
            {
                if(rhs.YNAM is {} YNAMrhs)
                {
                    item.YNAM = YNAMrhs.ToArray();
                }
                else
                {
                    item.YNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ZNAM) ?? true))
            {
                if(rhs.ZNAM is {} ZNAMrhs)
                {
                    item.ZNAM = ZNAMrhs.ToArray();
                }
                else
                {
                    item.ZNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Lut) ?? true))
            {
                item.Lut = rhs.Lut;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ImageSpace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImageSpaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ImageSpaceBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ImageSpaceBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IImageSpaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.REFL,
                header: translationParams.ConvertToCustom(RecordTypes.REFL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ReflectionParent,
                header: translationParams.ConvertToCustom(RecordTypes.RFDP));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ReflectionDiff,
                header: translationParams.ConvertToCustom(RecordTypes.RDIF));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TNAM,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XNAM,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.YNAM,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ZNAM,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Lut,
                header: translationParams.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IImageSpaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IMGS,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ImageSpaceBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ImageSpaceBinaryCreateTranslation Instance = new ImageSpaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IMGS;
        public static ParseResult FillBinaryRecordTypes(
            IImageSpaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.REFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.REFL = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.REFL;
                }
                case RecordTypeInts.RFDP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReflectionParent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ImageSpace_FieldIndex.ReflectionParent;
                }
                case RecordTypeInts.RDIF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReflectionDiff = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.ReflectionDiff;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.ENAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.CNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.TNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.DNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.XNAM;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.INAM;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.YNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.YNAM;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ZNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.ZNAM;
                }
                case RecordTypeInts.TX00:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Lut = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ImageSpace_FieldIndex.Lut;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ImageSpaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ImageSpaceBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IImageSpaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ImageSpaceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IImageSpace);


        #region REFL
        private int? _REFLLocation;
        public ReadOnlyMemorySlice<Byte>? REFL => _REFLLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _REFLLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ReflectionParent
        private int? _ReflectionParentLocation;
        public IFormLinkNullableGetter<IWeatherSettingGetter> ReflectionParent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWeatherSettingGetter>(_package, _recordData, _ReflectionParentLocation);
        #endregion
        #region ReflectionDiff
        private int? _ReflectionDiffLocation;
        public ReadOnlyMemorySlice<Byte>? ReflectionDiff => _ReflectionDiffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ReflectionDiffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region TNAM
        private int? _TNAMLocation;
        public ReadOnlyMemorySlice<Byte>? TNAM => _TNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XNAM
        private int? _XNAMLocation;
        public ReadOnlyMemorySlice<Byte>? XNAM => _XNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region INAM
        private int? _INAMLocation;
        public ReadOnlyMemorySlice<Byte>? INAM => _INAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _INAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region YNAM
        private int? _YNAMLocation;
        public ReadOnlyMemorySlice<Byte>? YNAM => _YNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _YNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ZNAM
        private int? _ZNAMLocation;
        public ReadOnlyMemorySlice<Byte>? ZNAM => _ZNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ZNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Lut
        private int? _LutLocation;
        public String? Lut => _LutLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LutLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImageSpaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IImageSpaceGetter ImageSpaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ImageSpaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IImageSpaceGetter ImageSpaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ImageSpaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.REFL:
                {
                    _REFLLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.REFL;
                }
                case RecordTypeInts.RFDP:
                {
                    _ReflectionParentLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.ReflectionParent;
                }
                case RecordTypeInts.RDIF:
                {
                    _ReflectionDiffLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.ReflectionDiff;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.ENAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.CNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.TNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.DNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    _XNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.XNAM;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.INAM;
                }
                case RecordTypeInts.YNAM:
                {
                    _YNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.YNAM;
                }
                case RecordTypeInts.ZNAM:
                {
                    _ZNAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.ZNAM;
                }
                case RecordTypeInts.TX00:
                {
                    _LutLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.Lut;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

