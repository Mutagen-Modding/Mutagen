/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ResearchProject :
        StarfieldMajorRecord,
        IEquatable<IResearchProjectGetter>,
        ILoquiObjectSetter<ResearchProject>,
        IResearchProjectInternal
    {
        #region Ctor
        protected ResearchProject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IResearchProjectGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IResearchProjectGetter.Description => this.Description;
        #endregion
        #region WorkbenchKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _WorkbenchKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> WorkbenchKeyword
        {
            get => _WorkbenchKeyword;
            set => _WorkbenchKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IResearchProjectGetter.WorkbenchKeyword => this.WorkbenchKeyword;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IResearchProjectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region RequiredItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ResearchProjectRequiredItem>? _RequiredItems;
        public ExtendedList<ResearchProjectRequiredItem>? RequiredItems
        {
            get => this._RequiredItems;
            set => this._RequiredItems = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IResearchProjectRequiredItemGetter>? IResearchProjectGetter.RequiredItems => _RequiredItems;
        #endregion

        #endregion
        #region RequiredPerks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ResearchProjectRequiredPerk>? _RequiredPerks;
        public ExtendedList<ResearchProjectRequiredPerk>? RequiredPerks
        {
            get => this._RequiredPerks;
            set => this._RequiredPerks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IResearchProjectRequiredPerkGetter>? IResearchProjectGetter.RequiredPerks => _RequiredPerks;
        #endregion

        #endregion
        #region CreatedItem
        private readonly IFormLinkNullable<IStarfieldMajorRecordGetter> _CreatedItem = new FormLinkNullable<IStarfieldMajorRecordGetter>();
        public IFormLinkNullable<IStarfieldMajorRecordGetter> CreatedItem
        {
            get => _CreatedItem;
            set => _CreatedItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IStarfieldMajorRecordGetter> IResearchProjectGetter.CreatedItem => this.CreatedItem;
        #endregion
        #region NumberCreated
        public UInt16? NumberCreated { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IResearchProjectGetter.NumberCreated => this.NumberCreated;
        #endregion
        #region SortingPriority
        public Single? SortingPriority { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IResearchProjectGetter.SortingPriority => this.SortingPriority;
        #endregion
        #region Tier
        public ResearchProject.TierEnum Tier { get; set; } = default(ResearchProject.TierEnum);
        #endregion
        #region CategoryKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _CategoryKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> CategoryKeyword
        {
            get => _CategoryKeyword;
            set => _CategoryKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IResearchProjectGetter.CategoryKeyword => this.CategoryKeyword;
        #endregion
        #region RequiredProjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IResearchProjectGetter>> _RequiredProjects = new ExtendedList<IFormLinkGetter<IResearchProjectGetter>>();
        public ExtendedList<IFormLinkGetter<IResearchProjectGetter>> RequiredProjects
        {
            get => this._RequiredProjects;
            init => this._RequiredProjects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IResearchProjectGetter>> IResearchProjectGetter.RequiredProjects => _RequiredProjects;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ResearchProjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.WorkbenchKeyword = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.RequiredItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ResearchProjectRequiredItem.Mask<TItem>?>>());
                this.RequiredPerks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredPerk.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ResearchProjectRequiredPerk.Mask<TItem>?>>());
                this.CreatedItem = initialValue;
                this.NumberCreated = initialValue;
                this.SortingPriority = initialValue;
                this.Tier = initialValue;
                this.CategoryKeyword = initialValue;
                this.RequiredProjects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem WorkbenchKeyword,
                TItem Conditions,
                TItem RequiredItems,
                TItem RequiredPerks,
                TItem CreatedItem,
                TItem NumberCreated,
                TItem SortingPriority,
                TItem Tier,
                TItem CategoryKeyword,
                TItem RequiredProjects)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.WorkbenchKeyword = WorkbenchKeyword;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.RequiredItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredItem.Mask<TItem>?>>?>(RequiredItems, Enumerable.Empty<MaskItemIndexed<TItem, ResearchProjectRequiredItem.Mask<TItem>?>>());
                this.RequiredPerks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredPerk.Mask<TItem>?>>?>(RequiredPerks, Enumerable.Empty<MaskItemIndexed<TItem, ResearchProjectRequiredPerk.Mask<TItem>?>>());
                this.CreatedItem = CreatedItem;
                this.NumberCreated = NumberCreated;
                this.SortingPriority = SortingPriority;
                this.Tier = Tier;
                this.CategoryKeyword = CategoryKeyword;
                this.RequiredProjects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RequiredProjects, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem WorkbenchKeyword;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredItem.Mask<TItem>?>>?>? RequiredItems;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ResearchProjectRequiredPerk.Mask<TItem>?>>?>? RequiredPerks;
            public TItem CreatedItem;
            public TItem NumberCreated;
            public TItem SortingPriority;
            public TItem Tier;
            public TItem CategoryKeyword;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RequiredProjects;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.WorkbenchKeyword, rhs.WorkbenchKeyword)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.RequiredItems, rhs.RequiredItems)) return false;
                if (!object.Equals(this.RequiredPerks, rhs.RequiredPerks)) return false;
                if (!object.Equals(this.CreatedItem, rhs.CreatedItem)) return false;
                if (!object.Equals(this.NumberCreated, rhs.NumberCreated)) return false;
                if (!object.Equals(this.SortingPriority, rhs.SortingPriority)) return false;
                if (!object.Equals(this.Tier, rhs.Tier)) return false;
                if (!object.Equals(this.CategoryKeyword, rhs.CategoryKeyword)) return false;
                if (!object.Equals(this.RequiredProjects, rhs.RequiredProjects)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.WorkbenchKeyword);
                hash.Add(this.Conditions);
                hash.Add(this.RequiredItems);
                hash.Add(this.RequiredPerks);
                hash.Add(this.CreatedItem);
                hash.Add(this.NumberCreated);
                hash.Add(this.SortingPriority);
                hash.Add(this.Tier);
                hash.Add(this.CategoryKeyword);
                hash.Add(this.RequiredProjects);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.WorkbenchKeyword)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredItems != null)
                {
                    if (!eval(this.RequiredItems.Overall)) return false;
                    if (this.RequiredItems.Specific != null)
                    {
                        foreach (var item in this.RequiredItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredPerks != null)
                {
                    if (!eval(this.RequiredPerks.Overall)) return false;
                    if (this.RequiredPerks.Specific != null)
                    {
                        foreach (var item in this.RequiredPerks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CreatedItem)) return false;
                if (!eval(this.NumberCreated)) return false;
                if (!eval(this.SortingPriority)) return false;
                if (!eval(this.Tier)) return false;
                if (!eval(this.CategoryKeyword)) return false;
                if (this.RequiredProjects != null)
                {
                    if (!eval(this.RequiredProjects.Overall)) return false;
                    if (this.RequiredProjects.Specific != null)
                    {
                        foreach (var item in this.RequiredProjects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.WorkbenchKeyword)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredItems != null)
                {
                    if (eval(this.RequiredItems.Overall)) return true;
                    if (this.RequiredItems.Specific != null)
                    {
                        foreach (var item in this.RequiredItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredPerks != null)
                {
                    if (eval(this.RequiredPerks.Overall)) return true;
                    if (this.RequiredPerks.Specific != null)
                    {
                        foreach (var item in this.RequiredPerks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CreatedItem)) return true;
                if (eval(this.NumberCreated)) return true;
                if (eval(this.SortingPriority)) return true;
                if (eval(this.Tier)) return true;
                if (eval(this.CategoryKeyword)) return true;
                if (this.RequiredProjects != null)
                {
                    if (eval(this.RequiredProjects.Overall)) return true;
                    if (this.RequiredProjects.Specific != null)
                    {
                        foreach (var item in this.RequiredProjects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ResearchProject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.WorkbenchKeyword = eval(this.WorkbenchKeyword);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RequiredItems != null)
                {
                    obj.RequiredItems = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ResearchProjectRequiredItem.Mask<R>?>>?>(eval(this.RequiredItems.Overall), Enumerable.Empty<MaskItemIndexed<R, ResearchProjectRequiredItem.Mask<R>?>>());
                    if (RequiredItems.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ResearchProjectRequiredItem.Mask<R>?>>();
                        obj.RequiredItems.Specific = l;
                        foreach (var item in RequiredItems.Specific)
                        {
                            MaskItemIndexed<R, ResearchProjectRequiredItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ResearchProjectRequiredItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RequiredPerks != null)
                {
                    obj.RequiredPerks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ResearchProjectRequiredPerk.Mask<R>?>>?>(eval(this.RequiredPerks.Overall), Enumerable.Empty<MaskItemIndexed<R, ResearchProjectRequiredPerk.Mask<R>?>>());
                    if (RequiredPerks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ResearchProjectRequiredPerk.Mask<R>?>>();
                        obj.RequiredPerks.Specific = l;
                        foreach (var item in RequiredPerks.Specific)
                        {
                            MaskItemIndexed<R, ResearchProjectRequiredPerk.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ResearchProjectRequiredPerk.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CreatedItem = eval(this.CreatedItem);
                obj.NumberCreated = eval(this.NumberCreated);
                obj.SortingPriority = eval(this.SortingPriority);
                obj.Tier = eval(this.Tier);
                obj.CategoryKeyword = eval(this.CategoryKeyword);
                if (RequiredProjects != null)
                {
                    obj.RequiredProjects = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RequiredProjects.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RequiredProjects.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RequiredProjects.Specific = l;
                        foreach (var item in RequiredProjects.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ResearchProject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ResearchProject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ResearchProject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.WorkbenchKeyword ?? true)
                    {
                        sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RequiredItems?.Overall ?? true)
                        && RequiredItems is {} RequiredItemsItem)
                    {
                        sb.AppendLine("RequiredItems =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RequiredItemsItem.Overall);
                            if (RequiredItemsItem.Specific != null)
                            {
                                foreach (var subItem in RequiredItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RequiredPerks?.Overall ?? true)
                        && RequiredPerks is {} RequiredPerksItem)
                    {
                        sb.AppendLine("RequiredPerks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RequiredPerksItem.Overall);
                            if (RequiredPerksItem.Specific != null)
                            {
                                foreach (var subItem in RequiredPerksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.CreatedItem ?? true)
                    {
                        sb.AppendItem(CreatedItem, "CreatedItem");
                    }
                    if (printMask?.NumberCreated ?? true)
                    {
                        sb.AppendItem(NumberCreated, "NumberCreated");
                    }
                    if (printMask?.SortingPriority ?? true)
                    {
                        sb.AppendItem(SortingPriority, "SortingPriority");
                    }
                    if (printMask?.Tier ?? true)
                    {
                        sb.AppendItem(Tier, "Tier");
                    }
                    if (printMask?.CategoryKeyword ?? true)
                    {
                        sb.AppendItem(CategoryKeyword, "CategoryKeyword");
                    }
                    if ((printMask?.RequiredProjects?.Overall ?? true)
                        && RequiredProjects is {} RequiredProjectsItem)
                    {
                        sb.AppendLine("RequiredProjects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RequiredProjectsItem.Overall);
                            if (RequiredProjectsItem.Specific != null)
                            {
                                foreach (var subItem in RequiredProjectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? WorkbenchKeyword;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredItem.ErrorMask?>>?>? RequiredItems;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredPerk.ErrorMask?>>?>? RequiredPerks;
            public Exception? CreatedItem;
            public Exception? NumberCreated;
            public Exception? SortingPriority;
            public Exception? Tier;
            public Exception? CategoryKeyword;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RequiredProjects;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ResearchProject_FieldIndex enu = (ResearchProject_FieldIndex)index;
                switch (enu)
                {
                    case ResearchProject_FieldIndex.Name:
                        return Name;
                    case ResearchProject_FieldIndex.Description:
                        return Description;
                    case ResearchProject_FieldIndex.WorkbenchKeyword:
                        return WorkbenchKeyword;
                    case ResearchProject_FieldIndex.Conditions:
                        return Conditions;
                    case ResearchProject_FieldIndex.RequiredItems:
                        return RequiredItems;
                    case ResearchProject_FieldIndex.RequiredPerks:
                        return RequiredPerks;
                    case ResearchProject_FieldIndex.CreatedItem:
                        return CreatedItem;
                    case ResearchProject_FieldIndex.NumberCreated:
                        return NumberCreated;
                    case ResearchProject_FieldIndex.SortingPriority:
                        return SortingPriority;
                    case ResearchProject_FieldIndex.Tier:
                        return Tier;
                    case ResearchProject_FieldIndex.CategoryKeyword:
                        return CategoryKeyword;
                    case ResearchProject_FieldIndex.RequiredProjects:
                        return RequiredProjects;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ResearchProject_FieldIndex enu = (ResearchProject_FieldIndex)index;
                switch (enu)
                {
                    case ResearchProject_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ResearchProject_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case ResearchProject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = ex;
                        break;
                    case ResearchProject_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ResearchProject_FieldIndex.RequiredItems:
                        this.RequiredItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredItem.ErrorMask?>>?>(ex, null);
                        break;
                    case ResearchProject_FieldIndex.RequiredPerks:
                        this.RequiredPerks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredPerk.ErrorMask?>>?>(ex, null);
                        break;
                    case ResearchProject_FieldIndex.CreatedItem:
                        this.CreatedItem = ex;
                        break;
                    case ResearchProject_FieldIndex.NumberCreated:
                        this.NumberCreated = ex;
                        break;
                    case ResearchProject_FieldIndex.SortingPriority:
                        this.SortingPriority = ex;
                        break;
                    case ResearchProject_FieldIndex.Tier:
                        this.Tier = ex;
                        break;
                    case ResearchProject_FieldIndex.CategoryKeyword:
                        this.CategoryKeyword = ex;
                        break;
                    case ResearchProject_FieldIndex.RequiredProjects:
                        this.RequiredProjects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ResearchProject_FieldIndex enu = (ResearchProject_FieldIndex)index;
                switch (enu)
                {
                    case ResearchProject_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ResearchProject_FieldIndex.RequiredItems:
                        this.RequiredItems = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredItem.ErrorMask?>>?>)obj;
                        break;
                    case ResearchProject_FieldIndex.RequiredPerks:
                        this.RequiredPerks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredPerk.ErrorMask?>>?>)obj;
                        break;
                    case ResearchProject_FieldIndex.CreatedItem:
                        this.CreatedItem = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.NumberCreated:
                        this.NumberCreated = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.SortingPriority:
                        this.SortingPriority = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.Tier:
                        this.Tier = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.CategoryKeyword:
                        this.CategoryKeyword = (Exception?)obj;
                        break;
                    case ResearchProject_FieldIndex.RequiredProjects:
                        this.RequiredProjects = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (WorkbenchKeyword != null) return true;
                if (Conditions != null) return true;
                if (RequiredItems != null) return true;
                if (RequiredPerks != null) return true;
                if (CreatedItem != null) return true;
                if (NumberCreated != null) return true;
                if (SortingPriority != null) return true;
                if (Tier != null) return true;
                if (CategoryKeyword != null) return true;
                if (RequiredProjects != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RequiredItems is {} RequiredItemsItem)
                {
                    sb.AppendLine("RequiredItems =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RequiredItemsItem.Overall);
                        if (RequiredItemsItem.Specific != null)
                        {
                            foreach (var subItem in RequiredItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RequiredPerks is {} RequiredPerksItem)
                {
                    sb.AppendLine("RequiredPerks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RequiredPerksItem.Overall);
                        if (RequiredPerksItem.Specific != null)
                        {
                            foreach (var subItem in RequiredPerksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(CreatedItem, "CreatedItem");
                }
                {
                    sb.AppendItem(NumberCreated, "NumberCreated");
                }
                {
                    sb.AppendItem(SortingPriority, "SortingPriority");
                }
                {
                    sb.AppendItem(Tier, "Tier");
                }
                {
                    sb.AppendItem(CategoryKeyword, "CategoryKeyword");
                }
                if (RequiredProjects is {} RequiredProjectsItem)
                {
                    sb.AppendLine("RequiredProjects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RequiredProjectsItem.Overall);
                        if (RequiredProjectsItem.Specific != null)
                        {
                            foreach (var subItem in RequiredProjectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.WorkbenchKeyword = this.WorkbenchKeyword.Combine(rhs.WorkbenchKeyword);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.RequiredItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.RequiredItems?.Overall, rhs.RequiredItems?.Overall), Noggog.ExceptionExt.Combine(this.RequiredItems?.Specific, rhs.RequiredItems?.Specific));
                ret.RequiredPerks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ResearchProjectRequiredPerk.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.RequiredPerks?.Overall, rhs.RequiredPerks?.Overall), Noggog.ExceptionExt.Combine(this.RequiredPerks?.Specific, rhs.RequiredPerks?.Specific));
                ret.CreatedItem = this.CreatedItem.Combine(rhs.CreatedItem);
                ret.NumberCreated = this.NumberCreated.Combine(rhs.NumberCreated);
                ret.SortingPriority = this.SortingPriority.Combine(rhs.SortingPriority);
                ret.Tier = this.Tier.Combine(rhs.Tier);
                ret.CategoryKeyword = this.CategoryKeyword.Combine(rhs.CategoryKeyword);
                ret.RequiredProjects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RequiredProjects?.Overall, rhs.RequiredProjects?.Overall), Noggog.ExceptionExt.Combine(this.RequiredProjects?.Specific, rhs.RequiredProjects?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool WorkbenchKeyword;
            public Condition.TranslationMask? Conditions;
            public ResearchProjectRequiredItem.TranslationMask? RequiredItems;
            public ResearchProjectRequiredPerk.TranslationMask? RequiredPerks;
            public bool CreatedItem;
            public bool NumberCreated;
            public bool SortingPriority;
            public bool Tier;
            public bool CategoryKeyword;
            public bool RequiredProjects;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.WorkbenchKeyword = defaultOn;
                this.CreatedItem = defaultOn;
                this.NumberCreated = defaultOn;
                this.SortingPriority = defaultOn;
                this.Tier = defaultOn;
                this.CategoryKeyword = defaultOn;
                this.RequiredProjects = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((WorkbenchKeyword, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((RequiredItems == null ? DefaultOn : !RequiredItems.GetCrystal().CopyNothing, RequiredItems?.GetCrystal()));
                ret.Add((RequiredPerks == null ? DefaultOn : !RequiredPerks.GetCrystal().CopyNothing, RequiredPerks?.GetCrystal()));
                ret.Add((CreatedItem, null));
                ret.Add((NumberCreated, null));
                ret.Add((SortingPriority, null));
                ret.Add((Tier, null));
                ret.Add((CategoryKeyword, null));
                ret.Add((RequiredProjects, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ResearchProject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ResearchProjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ResearchProjectSetterCommon.Instance.RemapLinks(this, mapping);
        public ResearchProject(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ResearchProject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ResearchProject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ResearchProject(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ResearchProject(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ResearchProject>.ToString(this);
        }

        protected override Type LinkType => typeof(IResearchProject);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IResearchProjectGetter rhs) return false;
            return ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IResearchProjectGetter? obj)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ResearchProjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ResearchProjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ResearchProject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ResearchProject();
            ((ResearchProjectSetterCommon)((IResearchProjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ResearchProject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ResearchProjectSetterCommon)((IResearchProjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ResearchProject GetNew()
        {
            return new ResearchProject();
        }

    }
    #endregion

    #region Interface
    public partial interface IResearchProject :
        IFormLinkContainer,
        ILoquiObjectSetter<IResearchProjectInternal>,
        INamed,
        INamedRequired,
        IResearchProjectGetter,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString? Description { get; set; }
        new IFormLinkNullable<IKeywordGetter> WorkbenchKeyword { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new ExtendedList<ResearchProjectRequiredItem>? RequiredItems { get; set; }
        new ExtendedList<ResearchProjectRequiredPerk>? RequiredPerks { get; set; }
        new IFormLinkNullable<IStarfieldMajorRecordGetter> CreatedItem { get; set; }
        new UInt16? NumberCreated { get; set; }
        new Single? SortingPriority { get; set; }
        new ResearchProject.TierEnum Tier { get; set; }
        new IFormLinkNullable<IKeywordGetter> CategoryKeyword { get; set; }
        new ExtendedList<IFormLinkGetter<IResearchProjectGetter>> RequiredProjects { get; }
    }

    public partial interface IResearchProjectInternal :
        IStarfieldMajorRecordInternal,
        IResearchProject,
        IResearchProjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.RSPJ)]
    public partial interface IResearchProjectGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IResearchProjectGetter>,
        IMapsToGetter<IResearchProjectGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ResearchProject_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter? Description { get; }
        IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        IReadOnlyList<IResearchProjectRequiredItemGetter>? RequiredItems { get; }
        IReadOnlyList<IResearchProjectRequiredPerkGetter>? RequiredPerks { get; }
        IFormLinkNullableGetter<IStarfieldMajorRecordGetter> CreatedItem { get; }
        UInt16? NumberCreated { get; }
        Single? SortingPriority { get; }
        ResearchProject.TierEnum Tier { get; }
        IFormLinkNullableGetter<IKeywordGetter> CategoryKeyword { get; }
        IReadOnlyList<IFormLinkGetter<IResearchProjectGetter>> RequiredProjects { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ResearchProjectMixIn
    {
        public static void Clear(this IResearchProjectInternal item)
        {
            ((ResearchProjectSetterCommon)((IResearchProjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ResearchProject.Mask<bool> GetEqualsMask(
            this IResearchProjectGetter item,
            IResearchProjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IResearchProjectGetter item,
            string? name = null,
            ResearchProject.Mask<bool>? printMask = null)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IResearchProjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ResearchProject.Mask<bool>? printMask = null)
        {
            ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IResearchProjectGetter item,
            IResearchProjectGetter rhs,
            ResearchProject.TranslationMask? equalsMask = null)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IResearchProjectInternal lhs,
            IResearchProjectGetter rhs,
            out ResearchProject.ErrorMask errorMask,
            ResearchProject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ResearchProject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IResearchProjectInternal lhs,
            IResearchProjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ResearchProject DeepCopy(
            this IResearchProjectGetter item,
            ResearchProject.TranslationMask? copyMask = null)
        {
            return ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ResearchProject DeepCopy(
            this IResearchProjectGetter item,
            out ResearchProject.ErrorMask errorMask,
            ResearchProject.TranslationMask? copyMask = null)
        {
            return ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ResearchProject DeepCopy(
            this IResearchProjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ResearchProject Duplicate(
            this IResearchProjectGetter item,
            FormKey formKey,
            ResearchProject.TranslationMask? copyMask = null)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ResearchProject Duplicate(
            this IResearchProjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IResearchProjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ResearchProjectSetterCommon)((IResearchProjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ResearchProject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        WorkbenchKeyword = 9,
        Conditions = 10,
        RequiredItems = 11,
        RequiredPerks = 12,
        CreatedItem = 13,
        NumberCreated = 14,
        SortingPriority = 15,
        Tier = 16,
        CategoryKeyword = 17,
        RequiredProjects = 18,
    }
    #endregion

    #region Registration
    internal partial class ResearchProject_Registration : ILoquiRegistration
    {
        public static readonly ResearchProject_Registration Instance = new ResearchProject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(ResearchProject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ResearchProject.ErrorMask);

        public static readonly Type ClassType = typeof(ResearchProject);

        public static readonly Type GetterType = typeof(IResearchProjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IResearchProject);

        public static readonly Type? InternalSetterType = typeof(IResearchProjectInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ResearchProject";

        public const string Name = "ResearchProject";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RSPJ;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.RSPJ);
            var all = RecordCollection.Factory(
                RecordTypes.RSPJ,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.BNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.FVPA,
                RecordTypes.RQPK,
                RecordTypes.CNAM,
                RecordTypes.NNAM,
                RecordTypes.SNAM,
                RecordTypes.TNAM,
                RecordTypes.KNAM,
                RecordTypes.RNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ResearchProjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ResearchProjectSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ResearchProjectSetterCommon Instance = new ResearchProjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IResearchProjectInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.WorkbenchKeyword.Clear();
            item.Conditions = null;
            item.RequiredItems = null;
            item.RequiredPerks = null;
            item.CreatedItem.Clear();
            item.NumberCreated = default;
            item.SortingPriority = default;
            item.Tier = default(ResearchProject.TierEnum);
            item.CategoryKeyword.Clear();
            item.RequiredProjects.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IResearchProjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IResearchProjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IResearchProject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WorkbenchKeyword.Relink(mapping);
            obj.Conditions?.RemapLinks(mapping);
            obj.RequiredItems?.RemapLinks(mapping);
            obj.RequiredPerks?.RemapLinks(mapping);
            obj.CreatedItem.Relink(mapping);
            obj.CategoryKeyword.Relink(mapping);
            obj.RequiredProjects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IResearchProjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IResearchProjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ResearchProjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ResearchProjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ResearchProject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ResearchProject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ResearchProjectCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ResearchProjectCommon Instance = new ResearchProjectCommon();

        public ResearchProject.Mask<bool> GetEqualsMask(
            IResearchProjectGetter item,
            IResearchProjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ResearchProject.Mask<bool>(false);
            ((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IResearchProjectGetter item,
            IResearchProjectGetter rhs,
            ResearchProject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.WorkbenchKeyword = item.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RequiredItems = item.RequiredItems.CollectionEqualsHelper(
                rhs.RequiredItems,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RequiredPerks = item.RequiredPerks.CollectionEqualsHelper(
                rhs.RequiredPerks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CreatedItem = item.CreatedItem.Equals(rhs.CreatedItem);
            ret.NumberCreated = item.NumberCreated == rhs.NumberCreated;
            ret.SortingPriority = item.SortingPriority.EqualsWithin(rhs.SortingPriority);
            ret.Tier = item.Tier == rhs.Tier;
            ret.CategoryKeyword = item.CategoryKeyword.Equals(rhs.CategoryKeyword);
            ret.RequiredProjects = item.RequiredProjects.CollectionEqualsHelper(
                rhs.RequiredProjects,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IResearchProjectGetter item,
            string? name = null,
            ResearchProject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IResearchProjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ResearchProject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ResearchProject =>");
            }
            else
            {
                sb.AppendLine($"{name} (ResearchProject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IResearchProjectGetter item,
            StructuredStringBuilder sb,
            ResearchProject.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.WorkbenchKeyword ?? true)
            {
                sb.AppendItem(item.WorkbenchKeyword.FormKeyNullable, "WorkbenchKeyword");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RequiredItems?.Overall ?? true)
                && item.RequiredItems is {} RequiredItemsItem)
            {
                sb.AppendLine("RequiredItems =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RequiredItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RequiredPerks?.Overall ?? true)
                && item.RequiredPerks is {} RequiredPerksItem)
            {
                sb.AppendLine("RequiredPerks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RequiredPerksItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.CreatedItem ?? true)
            {
                sb.AppendItem(item.CreatedItem.FormKeyNullable, "CreatedItem");
            }
            if ((printMask?.NumberCreated ?? true)
                && item.NumberCreated is {} NumberCreatedItem)
            {
                sb.AppendItem(NumberCreatedItem, "NumberCreated");
            }
            if ((printMask?.SortingPriority ?? true)
                && item.SortingPriority is {} SortingPriorityItem)
            {
                sb.AppendItem(SortingPriorityItem, "SortingPriority");
            }
            if (printMask?.Tier ?? true)
            {
                sb.AppendItem(item.Tier, "Tier");
            }
            if (printMask?.CategoryKeyword ?? true)
            {
                sb.AppendItem(item.CategoryKeyword.FormKeyNullable, "CategoryKeyword");
            }
            if (printMask?.RequiredProjects?.Overall ?? true)
            {
                sb.AppendLine("RequiredProjects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RequiredProjects)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static ResearchProject_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ResearchProject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ResearchProject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ResearchProject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ResearchProject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ResearchProject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ResearchProject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ResearchProject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IResearchProjectGetter? lhs,
            IResearchProjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                if (!lhs.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ResearchProject_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredItems) ?? true))
            {
                if (!lhs.RequiredItems.SequenceEqualNullable(rhs.RequiredItems, (l, r) => ((ResearchProjectRequiredItemCommon)((IResearchProjectRequiredItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ResearchProject_FieldIndex.RequiredItems)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredPerks) ?? true))
            {
                if (!lhs.RequiredPerks.SequenceEqualNullable(rhs.RequiredPerks, (l, r) => ((ResearchProjectRequiredPerkCommon)((IResearchProjectRequiredPerkGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ResearchProject_FieldIndex.RequiredPerks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.CreatedItem) ?? true))
            {
                if (!lhs.CreatedItem.Equals(rhs.CreatedItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.NumberCreated) ?? true))
            {
                if (lhs.NumberCreated != rhs.NumberCreated) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.SortingPriority) ?? true))
            {
                if (!lhs.SortingPriority.EqualsWithin(rhs.SortingPriority)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Tier) ?? true))
            {
                if (lhs.Tier != rhs.Tier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.CategoryKeyword) ?? true))
            {
                if (!lhs.CategoryKeyword.Equals(rhs.CategoryKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredProjects) ?? true))
            {
                if (!lhs.RequiredProjects.SequenceEqualNullable(rhs.RequiredProjects)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IResearchProjectGetter?)lhs,
                rhs: rhs as IResearchProjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IResearchProjectGetter?)lhs,
                rhs: rhs as IResearchProjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IResearchProjectGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.WorkbenchKeyword);
            hash.Add(item.Conditions);
            hash.Add(item.RequiredItems);
            hash.Add(item.RequiredPerks);
            hash.Add(item.CreatedItem);
            if (item.NumberCreated is {} NumberCreateditem)
            {
                hash.Add(NumberCreateditem);
            }
            if (item.SortingPriority is {} SortingPriorityitem)
            {
                hash.Add(SortingPriorityitem);
            }
            hash.Add(item.Tier);
            hash.Add(item.CategoryKeyword);
            hash.Add(item.RequiredProjects);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IResearchProjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IResearchProjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ResearchProject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IResearchProjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.WorkbenchKeyword, out var WorkbenchKeywordInfo))
            {
                yield return WorkbenchKeywordInfo;
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RequiredItems is {} RequiredItemsItem)
            {
                foreach (var item in RequiredItemsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RequiredPerks is {} RequiredPerksItem)
            {
                foreach (var item in RequiredPerksItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.CreatedItem, out var CreatedItemInfo))
            {
                yield return CreatedItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CategoryKeyword, out var CategoryKeywordInfo))
            {
                yield return CategoryKeywordInfo;
            }
            foreach (var item in obj.RequiredProjects)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ResearchProject Duplicate(
            IResearchProjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ResearchProject(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IResearchProjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IResearchProjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ResearchProjectSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ResearchProjectSetterTranslationCommon Instance = new ResearchProjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IResearchProjectInternal item,
            IResearchProjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IResearchProject item,
            IResearchProjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                item.WorkbenchKeyword.SetTo(rhs.WorkbenchKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)ResearchProject_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredItems) ?? true))
            {
                errorMask?.PushIndex((int)ResearchProject_FieldIndex.RequiredItems);
                try
                {
                    if ((rhs.RequiredItems != null))
                    {
                        item.RequiredItems = 
                            rhs.RequiredItems
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ResearchProjectRequiredItem>();
                    }
                    else
                    {
                        item.RequiredItems = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredPerks) ?? true))
            {
                errorMask?.PushIndex((int)ResearchProject_FieldIndex.RequiredPerks);
                try
                {
                    if ((rhs.RequiredPerks != null))
                    {
                        item.RequiredPerks = 
                            rhs.RequiredPerks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ResearchProjectRequiredPerk>();
                    }
                    else
                    {
                        item.RequiredPerks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.CreatedItem) ?? true))
            {
                item.CreatedItem.SetTo(rhs.CreatedItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.NumberCreated) ?? true))
            {
                item.NumberCreated = rhs.NumberCreated;
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.SortingPriority) ?? true))
            {
                item.SortingPriority = rhs.SortingPriority;
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.Tier) ?? true))
            {
                item.Tier = rhs.Tier;
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.CategoryKeyword) ?? true))
            {
                item.CategoryKeyword.SetTo(rhs.CategoryKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ResearchProject_FieldIndex.RequiredProjects) ?? true))
            {
                errorMask?.PushIndex((int)ResearchProject_FieldIndex.RequiredProjects);
                try
                {
                    item.RequiredProjects.SetTo(
                        rhs.RequiredProjects
                            .Select(b => (IFormLinkGetter<IResearchProjectGetter>)new FormLink<IResearchProjectGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IResearchProject item,
            IResearchProjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IResearchProjectInternal)item,
                rhs: (IResearchProjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IResearchProject)item,
                rhs: (IResearchProjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IResearchProjectInternal)item,
                rhs: (IResearchProjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IResearchProject)item,
                rhs: (IResearchProjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ResearchProject DeepCopy(
            IResearchProjectGetter item,
            ResearchProject.TranslationMask? copyMask = null)
        {
            ResearchProject ret = (ResearchProject)((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).GetNew();
            ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ResearchProject DeepCopy(
            IResearchProjectGetter item,
            out ResearchProject.ErrorMask errorMask,
            ResearchProject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ResearchProject ret = (ResearchProject)((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).GetNew();
            ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ResearchProject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ResearchProject DeepCopy(
            IResearchProjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ResearchProject ret = (ResearchProject)((ResearchProjectCommon)((IResearchProjectGetter)item).CommonInstance()!).GetNew();
            ((ResearchProjectSetterTranslationCommon)((IResearchProjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ResearchProject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ResearchProject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ResearchProject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ResearchProjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ResearchProjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ResearchProjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ResearchProjectBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ResearchProjectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IResearchProjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorkbenchKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IResearchProjectRequiredItemGetter>.Instance.Write(
                writer: writer,
                items: item.RequiredItems,
                recordType: translationParams.ConvertToCustom(RecordTypes.FVPA),
                transl: (MutagenWriter subWriter, IResearchProjectRequiredItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ResearchProjectRequiredItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IResearchProjectRequiredPerkGetter>.Instance.Write(
                writer: writer,
                items: item.RequiredPerks,
                recordType: translationParams.ConvertToCustom(RecordTypes.RQPK),
                transl: (MutagenWriter subWriter, IResearchProjectRequiredPerkGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ResearchProjectRequiredPerkBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CreatedItem,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NumberCreated,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SortingPriority,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            EnumBinaryTranslation<ResearchProject.TierEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Tier,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CategoryKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.KNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IResearchProjectGetter>>.Instance.Write(
                writer: writer,
                items: item.RequiredProjects,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IResearchProjectGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.RNAM));
                });
        }

        public void Write(
            MutagenWriter writer,
            IResearchProjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.RSPJ,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IResearchProjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IResearchProjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IResearchProjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ResearchProjectBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ResearchProjectBinaryCreateTranslation Instance = new ResearchProjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RSPJ;
        public static ParseResult FillBinaryRecordTypes(
            IResearchProjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ResearchProject_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ResearchProject_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorkbenchKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ResearchProject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)ResearchProject_FieldIndex.Conditions;
                }
                case RecordTypeInts.FVPA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RequiredItems = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ResearchProjectRequiredItem>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ResearchProjectRequiredItem.TryCreateFromBinary)
                        .CastExtendedList<ResearchProjectRequiredItem>();
                    return (int)ResearchProject_FieldIndex.RequiredItems;
                }
                case RecordTypeInts.RQPK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RequiredPerks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ResearchProjectRequiredPerk>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ResearchProjectRequiredPerk.TryCreateFromBinary)
                        .CastExtendedList<ResearchProjectRequiredPerk>();
                    return (int)ResearchProject_FieldIndex.RequiredPerks;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CreatedItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ResearchProject_FieldIndex.CreatedItem;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NumberCreated = frame.ReadUInt16();
                    return (int)ResearchProject_FieldIndex.NumberCreated;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SortingPriority = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ResearchProject_FieldIndex.SortingPriority;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Tier = EnumBinaryTranslation<ResearchProject.TierEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ResearchProject_FieldIndex.Tier;
                }
                case RecordTypeInts.KNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CategoryKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ResearchProject_FieldIndex.CategoryKeyword;
                }
                case RecordTypeInts.RNAM:
                {
                    item.RequiredProjects.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IResearchProjectGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.RNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)ResearchProject_FieldIndex.RequiredProjects;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ResearchProjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ResearchProjectBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IResearchProjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ResearchProject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ResearchProject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ResearchProjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ResearchProjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ResearchProjectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ResearchProjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ResearchProjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IResearchProject);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region WorkbenchKeyword
        private int? _WorkbenchKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _WorkbenchKeywordLocation);
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        public IReadOnlyList<IResearchProjectRequiredItemGetter>? RequiredItems { get; private set; }
        public IReadOnlyList<IResearchProjectRequiredPerkGetter>? RequiredPerks { get; private set; }
        #region CreatedItem
        private int? _CreatedItemLocation;
        public IFormLinkNullableGetter<IStarfieldMajorRecordGetter> CreatedItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IStarfieldMajorRecordGetter>(_package, _recordData, _CreatedItemLocation);
        #endregion
        #region NumberCreated
        private int? _NumberCreatedLocation;
        public UInt16? NumberCreated => _NumberCreatedLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NumberCreatedLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region SortingPriority
        private int? _SortingPriorityLocation;
        public Single? SortingPriority => _SortingPriorityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SortingPriorityLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Tier
        private int? _TierLocation;
        public ResearchProject.TierEnum Tier => _TierLocation.HasValue ? (ResearchProject.TierEnum)HeaderTranslation.ExtractSubrecordMemory(_recordData, _TierLocation!.Value, _package.MetaData.Constants)[0] : default(ResearchProject.TierEnum);
        #endregion
        #region CategoryKeyword
        private int? _CategoryKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> CategoryKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _CategoryKeywordLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IResearchProjectGetter>> RequiredProjects { get; private set; } = Array.Empty<IFormLinkGetter<IResearchProjectGetter>>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ResearchProjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IResearchProjectGetter ResearchProjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ResearchProjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IResearchProjectGetter ResearchProjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ResearchProjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    _WorkbenchKeywordLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    this.Conditions = BinaryOverlayList.FactoryByCountPerItem<IConditionGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: Condition_Registration.TriggerSpecs,
                        countType: RecordTypes.CITC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)ResearchProject_FieldIndex.Conditions;
                }
                case RecordTypeInts.FVPA:
                {
                    this.RequiredItems = BinaryOverlayList.FactoryByStartIndexWithTrigger<IResearchProjectRequiredItemGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ResearchProjectRequiredItemBinaryOverlay.ResearchProjectRequiredItemFactory(s, p));
                    return (int)ResearchProject_FieldIndex.RequiredItems;
                }
                case RecordTypeInts.RQPK:
                {
                    this.RequiredPerks = BinaryOverlayList.FactoryByStartIndexWithTrigger<IResearchProjectRequiredPerkGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ResearchProjectRequiredPerkBinaryOverlay.ResearchProjectRequiredPerkFactory(s, p));
                    return (int)ResearchProject_FieldIndex.RequiredPerks;
                }
                case RecordTypeInts.CNAM:
                {
                    _CreatedItemLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.CreatedItem;
                }
                case RecordTypeInts.NNAM:
                {
                    _NumberCreatedLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.NumberCreated;
                }
                case RecordTypeInts.SNAM:
                {
                    _SortingPriorityLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.SortingPriority;
                }
                case RecordTypeInts.TNAM:
                {
                    _TierLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.Tier;
                }
                case RecordTypeInts.KNAM:
                {
                    _CategoryKeywordLocation = (stream.Position - offset);
                    return (int)ResearchProject_FieldIndex.CategoryKeyword;
                }
                case RecordTypeInts.RNAM:
                {
                    this.RequiredProjects = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IResearchProjectGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IResearchProjectGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.RNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)ResearchProject_FieldIndex.RequiredProjects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ResearchProjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ResearchProject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IResearchProjectGetter rhs) return false;
            return ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IResearchProjectGetter? obj)
        {
            return ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ResearchProjectCommon)((IResearchProjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

