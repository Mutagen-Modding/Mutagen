/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class OrbitalData :
        IEquatable<IOrbitalDataGetter>,
        ILoquiObjectSetter<OrbitalData>,
        IOrbitalData
    {
        #region Ctor
        public OrbitalData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorAxis
        public Double MajorAxis { get; set; } = default(Double);
        #endregion
        #region MinorAxis
        public Double MinorAxis { get; set; } = default(Double);
        #endregion
        #region Aphelion
        public Double Aphelion { get; set; } = default(Double);
        #endregion
        #region Eccentricity
        public Double Eccentricity { get; set; } = default(Double);
        #endregion
        #region Incline
        public Double Incline { get; set; } = default(Double);
        #endregion
        #region MeanOrbit
        public Double MeanOrbit { get; set; } = default(Double);
        #endregion
        #region AxialTilt
        public Single AxialTilt { get; set; } = default(Single);
        #endregion
        #region RotationalVelocity
        public Single RotationalVelocity { get; set; } = default(Single);
        #endregion
        #region StartAngle
        public Single StartAngle { get; set; } = default(Single);
        #endregion
        #region PerihelionAngle
        public Single PerihelionAngle { get; set; } = default(Single);
        #endregion
        #region ApplyOrbitalVelocity
        public Boolean ApplyOrbitalVelocity { get; set; } = default(Boolean);
        #endregion
        #region GeostationaryOrbit
        public Boolean GeostationaryOrbit { get; set; } = default(Boolean);
        #endregion
        #region Unknown1
        public UInt32 Unknown1 { get; set; } = default(UInt32);
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default(UInt16);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OrbitalDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOrbitalDataGetter rhs) return false;
            return ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOrbitalDataGetter? obj)
        {
            return ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MajorAxis = initialValue;
                this.MinorAxis = initialValue;
                this.Aphelion = initialValue;
                this.Eccentricity = initialValue;
                this.Incline = initialValue;
                this.MeanOrbit = initialValue;
                this.AxialTilt = initialValue;
                this.RotationalVelocity = initialValue;
                this.StartAngle = initialValue;
                this.PerihelionAngle = initialValue;
                this.ApplyOrbitalVelocity = initialValue;
                this.GeostationaryOrbit = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem MajorAxis,
                TItem MinorAxis,
                TItem Aphelion,
                TItem Eccentricity,
                TItem Incline,
                TItem MeanOrbit,
                TItem AxialTilt,
                TItem RotationalVelocity,
                TItem StartAngle,
                TItem PerihelionAngle,
                TItem ApplyOrbitalVelocity,
                TItem GeostationaryOrbit,
                TItem Unknown1,
                TItem Unknown2)
            {
                this.MajorAxis = MajorAxis;
                this.MinorAxis = MinorAxis;
                this.Aphelion = Aphelion;
                this.Eccentricity = Eccentricity;
                this.Incline = Incline;
                this.MeanOrbit = MeanOrbit;
                this.AxialTilt = AxialTilt;
                this.RotationalVelocity = RotationalVelocity;
                this.StartAngle = StartAngle;
                this.PerihelionAngle = PerihelionAngle;
                this.ApplyOrbitalVelocity = ApplyOrbitalVelocity;
                this.GeostationaryOrbit = GeostationaryOrbit;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MajorAxis;
            public TItem MinorAxis;
            public TItem Aphelion;
            public TItem Eccentricity;
            public TItem Incline;
            public TItem MeanOrbit;
            public TItem AxialTilt;
            public TItem RotationalVelocity;
            public TItem StartAngle;
            public TItem PerihelionAngle;
            public TItem ApplyOrbitalVelocity;
            public TItem GeostationaryOrbit;
            public TItem Unknown1;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MajorAxis, rhs.MajorAxis)) return false;
                if (!object.Equals(this.MinorAxis, rhs.MinorAxis)) return false;
                if (!object.Equals(this.Aphelion, rhs.Aphelion)) return false;
                if (!object.Equals(this.Eccentricity, rhs.Eccentricity)) return false;
                if (!object.Equals(this.Incline, rhs.Incline)) return false;
                if (!object.Equals(this.MeanOrbit, rhs.MeanOrbit)) return false;
                if (!object.Equals(this.AxialTilt, rhs.AxialTilt)) return false;
                if (!object.Equals(this.RotationalVelocity, rhs.RotationalVelocity)) return false;
                if (!object.Equals(this.StartAngle, rhs.StartAngle)) return false;
                if (!object.Equals(this.PerihelionAngle, rhs.PerihelionAngle)) return false;
                if (!object.Equals(this.ApplyOrbitalVelocity, rhs.ApplyOrbitalVelocity)) return false;
                if (!object.Equals(this.GeostationaryOrbit, rhs.GeostationaryOrbit)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MajorAxis);
                hash.Add(this.MinorAxis);
                hash.Add(this.Aphelion);
                hash.Add(this.Eccentricity);
                hash.Add(this.Incline);
                hash.Add(this.MeanOrbit);
                hash.Add(this.AxialTilt);
                hash.Add(this.RotationalVelocity);
                hash.Add(this.StartAngle);
                hash.Add(this.PerihelionAngle);
                hash.Add(this.ApplyOrbitalVelocity);
                hash.Add(this.GeostationaryOrbit);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MajorAxis)) return false;
                if (!eval(this.MinorAxis)) return false;
                if (!eval(this.Aphelion)) return false;
                if (!eval(this.Eccentricity)) return false;
                if (!eval(this.Incline)) return false;
                if (!eval(this.MeanOrbit)) return false;
                if (!eval(this.AxialTilt)) return false;
                if (!eval(this.RotationalVelocity)) return false;
                if (!eval(this.StartAngle)) return false;
                if (!eval(this.PerihelionAngle)) return false;
                if (!eval(this.ApplyOrbitalVelocity)) return false;
                if (!eval(this.GeostationaryOrbit)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MajorAxis)) return true;
                if (eval(this.MinorAxis)) return true;
                if (eval(this.Aphelion)) return true;
                if (eval(this.Eccentricity)) return true;
                if (eval(this.Incline)) return true;
                if (eval(this.MeanOrbit)) return true;
                if (eval(this.AxialTilt)) return true;
                if (eval(this.RotationalVelocity)) return true;
                if (eval(this.StartAngle)) return true;
                if (eval(this.PerihelionAngle)) return true;
                if (eval(this.ApplyOrbitalVelocity)) return true;
                if (eval(this.GeostationaryOrbit)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new OrbitalData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MajorAxis = eval(this.MajorAxis);
                obj.MinorAxis = eval(this.MinorAxis);
                obj.Aphelion = eval(this.Aphelion);
                obj.Eccentricity = eval(this.Eccentricity);
                obj.Incline = eval(this.Incline);
                obj.MeanOrbit = eval(this.MeanOrbit);
                obj.AxialTilt = eval(this.AxialTilt);
                obj.RotationalVelocity = eval(this.RotationalVelocity);
                obj.StartAngle = eval(this.StartAngle);
                obj.PerihelionAngle = eval(this.PerihelionAngle);
                obj.ApplyOrbitalVelocity = eval(this.ApplyOrbitalVelocity);
                obj.GeostationaryOrbit = eval(this.GeostationaryOrbit);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(OrbitalData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, OrbitalData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(OrbitalData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MajorAxis ?? true)
                    {
                        sb.AppendItem(MajorAxis, "MajorAxis");
                    }
                    if (printMask?.MinorAxis ?? true)
                    {
                        sb.AppendItem(MinorAxis, "MinorAxis");
                    }
                    if (printMask?.Aphelion ?? true)
                    {
                        sb.AppendItem(Aphelion, "Aphelion");
                    }
                    if (printMask?.Eccentricity ?? true)
                    {
                        sb.AppendItem(Eccentricity, "Eccentricity");
                    }
                    if (printMask?.Incline ?? true)
                    {
                        sb.AppendItem(Incline, "Incline");
                    }
                    if (printMask?.MeanOrbit ?? true)
                    {
                        sb.AppendItem(MeanOrbit, "MeanOrbit");
                    }
                    if (printMask?.AxialTilt ?? true)
                    {
                        sb.AppendItem(AxialTilt, "AxialTilt");
                    }
                    if (printMask?.RotationalVelocity ?? true)
                    {
                        sb.AppendItem(RotationalVelocity, "RotationalVelocity");
                    }
                    if (printMask?.StartAngle ?? true)
                    {
                        sb.AppendItem(StartAngle, "StartAngle");
                    }
                    if (printMask?.PerihelionAngle ?? true)
                    {
                        sb.AppendItem(PerihelionAngle, "PerihelionAngle");
                    }
                    if (printMask?.ApplyOrbitalVelocity ?? true)
                    {
                        sb.AppendItem(ApplyOrbitalVelocity, "ApplyOrbitalVelocity");
                    }
                    if (printMask?.GeostationaryOrbit ?? true)
                    {
                        sb.AppendItem(GeostationaryOrbit, "GeostationaryOrbit");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MajorAxis;
            public Exception? MinorAxis;
            public Exception? Aphelion;
            public Exception? Eccentricity;
            public Exception? Incline;
            public Exception? MeanOrbit;
            public Exception? AxialTilt;
            public Exception? RotationalVelocity;
            public Exception? StartAngle;
            public Exception? PerihelionAngle;
            public Exception? ApplyOrbitalVelocity;
            public Exception? GeostationaryOrbit;
            public Exception? Unknown1;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                OrbitalData_FieldIndex enu = (OrbitalData_FieldIndex)index;
                switch (enu)
                {
                    case OrbitalData_FieldIndex.MajorAxis:
                        return MajorAxis;
                    case OrbitalData_FieldIndex.MinorAxis:
                        return MinorAxis;
                    case OrbitalData_FieldIndex.Aphelion:
                        return Aphelion;
                    case OrbitalData_FieldIndex.Eccentricity:
                        return Eccentricity;
                    case OrbitalData_FieldIndex.Incline:
                        return Incline;
                    case OrbitalData_FieldIndex.MeanOrbit:
                        return MeanOrbit;
                    case OrbitalData_FieldIndex.AxialTilt:
                        return AxialTilt;
                    case OrbitalData_FieldIndex.RotationalVelocity:
                        return RotationalVelocity;
                    case OrbitalData_FieldIndex.StartAngle:
                        return StartAngle;
                    case OrbitalData_FieldIndex.PerihelionAngle:
                        return PerihelionAngle;
                    case OrbitalData_FieldIndex.ApplyOrbitalVelocity:
                        return ApplyOrbitalVelocity;
                    case OrbitalData_FieldIndex.GeostationaryOrbit:
                        return GeostationaryOrbit;
                    case OrbitalData_FieldIndex.Unknown1:
                        return Unknown1;
                    case OrbitalData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                OrbitalData_FieldIndex enu = (OrbitalData_FieldIndex)index;
                switch (enu)
                {
                    case OrbitalData_FieldIndex.MajorAxis:
                        this.MajorAxis = ex;
                        break;
                    case OrbitalData_FieldIndex.MinorAxis:
                        this.MinorAxis = ex;
                        break;
                    case OrbitalData_FieldIndex.Aphelion:
                        this.Aphelion = ex;
                        break;
                    case OrbitalData_FieldIndex.Eccentricity:
                        this.Eccentricity = ex;
                        break;
                    case OrbitalData_FieldIndex.Incline:
                        this.Incline = ex;
                        break;
                    case OrbitalData_FieldIndex.MeanOrbit:
                        this.MeanOrbit = ex;
                        break;
                    case OrbitalData_FieldIndex.AxialTilt:
                        this.AxialTilt = ex;
                        break;
                    case OrbitalData_FieldIndex.RotationalVelocity:
                        this.RotationalVelocity = ex;
                        break;
                    case OrbitalData_FieldIndex.StartAngle:
                        this.StartAngle = ex;
                        break;
                    case OrbitalData_FieldIndex.PerihelionAngle:
                        this.PerihelionAngle = ex;
                        break;
                    case OrbitalData_FieldIndex.ApplyOrbitalVelocity:
                        this.ApplyOrbitalVelocity = ex;
                        break;
                    case OrbitalData_FieldIndex.GeostationaryOrbit:
                        this.GeostationaryOrbit = ex;
                        break;
                    case OrbitalData_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case OrbitalData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                OrbitalData_FieldIndex enu = (OrbitalData_FieldIndex)index;
                switch (enu)
                {
                    case OrbitalData_FieldIndex.MajorAxis:
                        this.MajorAxis = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.MinorAxis:
                        this.MinorAxis = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.Aphelion:
                        this.Aphelion = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.Eccentricity:
                        this.Eccentricity = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.Incline:
                        this.Incline = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.MeanOrbit:
                        this.MeanOrbit = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.AxialTilt:
                        this.AxialTilt = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.RotationalVelocity:
                        this.RotationalVelocity = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.StartAngle:
                        this.StartAngle = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.PerihelionAngle:
                        this.PerihelionAngle = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.ApplyOrbitalVelocity:
                        this.ApplyOrbitalVelocity = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.GeostationaryOrbit:
                        this.GeostationaryOrbit = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case OrbitalData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MajorAxis != null) return true;
                if (MinorAxis != null) return true;
                if (Aphelion != null) return true;
                if (Eccentricity != null) return true;
                if (Incline != null) return true;
                if (MeanOrbit != null) return true;
                if (AxialTilt != null) return true;
                if (RotationalVelocity != null) return true;
                if (StartAngle != null) return true;
                if (PerihelionAngle != null) return true;
                if (ApplyOrbitalVelocity != null) return true;
                if (GeostationaryOrbit != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MajorAxis, "MajorAxis");
                }
                {
                    sb.AppendItem(MinorAxis, "MinorAxis");
                }
                {
                    sb.AppendItem(Aphelion, "Aphelion");
                }
                {
                    sb.AppendItem(Eccentricity, "Eccentricity");
                }
                {
                    sb.AppendItem(Incline, "Incline");
                }
                {
                    sb.AppendItem(MeanOrbit, "MeanOrbit");
                }
                {
                    sb.AppendItem(AxialTilt, "AxialTilt");
                }
                {
                    sb.AppendItem(RotationalVelocity, "RotationalVelocity");
                }
                {
                    sb.AppendItem(StartAngle, "StartAngle");
                }
                {
                    sb.AppendItem(PerihelionAngle, "PerihelionAngle");
                }
                {
                    sb.AppendItem(ApplyOrbitalVelocity, "ApplyOrbitalVelocity");
                }
                {
                    sb.AppendItem(GeostationaryOrbit, "GeostationaryOrbit");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MajorAxis = this.MajorAxis.Combine(rhs.MajorAxis);
                ret.MinorAxis = this.MinorAxis.Combine(rhs.MinorAxis);
                ret.Aphelion = this.Aphelion.Combine(rhs.Aphelion);
                ret.Eccentricity = this.Eccentricity.Combine(rhs.Eccentricity);
                ret.Incline = this.Incline.Combine(rhs.Incline);
                ret.MeanOrbit = this.MeanOrbit.Combine(rhs.MeanOrbit);
                ret.AxialTilt = this.AxialTilt.Combine(rhs.AxialTilt);
                ret.RotationalVelocity = this.RotationalVelocity.Combine(rhs.RotationalVelocity);
                ret.StartAngle = this.StartAngle.Combine(rhs.StartAngle);
                ret.PerihelionAngle = this.PerihelionAngle.Combine(rhs.PerihelionAngle);
                ret.ApplyOrbitalVelocity = this.ApplyOrbitalVelocity.Combine(rhs.ApplyOrbitalVelocity);
                ret.GeostationaryOrbit = this.GeostationaryOrbit.Combine(rhs.GeostationaryOrbit);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MajorAxis;
            public bool MinorAxis;
            public bool Aphelion;
            public bool Eccentricity;
            public bool Incline;
            public bool MeanOrbit;
            public bool AxialTilt;
            public bool RotationalVelocity;
            public bool StartAngle;
            public bool PerihelionAngle;
            public bool ApplyOrbitalVelocity;
            public bool GeostationaryOrbit;
            public bool Unknown1;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MajorAxis = defaultOn;
                this.MinorAxis = defaultOn;
                this.Aphelion = defaultOn;
                this.Eccentricity = defaultOn;
                this.Incline = defaultOn;
                this.MeanOrbit = defaultOn;
                this.AxialTilt = defaultOn;
                this.RotationalVelocity = defaultOn;
                this.StartAngle = defaultOn;
                this.PerihelionAngle = defaultOn;
                this.ApplyOrbitalVelocity = defaultOn;
                this.GeostationaryOrbit = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MajorAxis, null));
                ret.Add((MinorAxis, null));
                ret.Add((Aphelion, null));
                ret.Add((Eccentricity, null));
                ret.Add((Incline, null));
                ret.Add((MeanOrbit, null));
                ret.Add((AxialTilt, null));
                ret.Add((RotationalVelocity, null));
                ret.Add((StartAngle, null));
                ret.Add((PerihelionAngle, null));
                ret.Add((ApplyOrbitalVelocity, null));
                ret.Add((GeostationaryOrbit, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => OrbitalDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((OrbitalDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static OrbitalData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new OrbitalData();
            ((OrbitalDataSetterCommon)((IOrbitalDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out OrbitalData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((OrbitalDataSetterCommon)((IOrbitalDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static OrbitalData GetNew()
        {
            return new OrbitalData();
        }

    }
    #endregion

    #region Interface
    public partial interface IOrbitalData :
        ILoquiObjectSetter<IOrbitalData>,
        IOrbitalDataGetter
    {
        new Double MajorAxis { get; set; }
        new Double MinorAxis { get; set; }
        new Double Aphelion { get; set; }
        new Double Eccentricity { get; set; }
        new Double Incline { get; set; }
        new Double MeanOrbit { get; set; }
        new Single AxialTilt { get; set; }
        new Single RotationalVelocity { get; set; }
        new Single StartAngle { get; set; }
        new Single PerihelionAngle { get; set; }
        new Boolean ApplyOrbitalVelocity { get; set; }
        new Boolean GeostationaryOrbit { get; set; }
        new UInt32 Unknown1 { get; set; }
        new UInt16 Unknown2 { get; set; }
    }

    public partial interface IOrbitalDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IOrbitalDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => OrbitalData_Registration.Instance;
        Double MajorAxis { get; }
        Double MinorAxis { get; }
        Double Aphelion { get; }
        Double Eccentricity { get; }
        Double Incline { get; }
        Double MeanOrbit { get; }
        Single AxialTilt { get; }
        Single RotationalVelocity { get; }
        Single StartAngle { get; }
        Single PerihelionAngle { get; }
        Boolean ApplyOrbitalVelocity { get; }
        Boolean GeostationaryOrbit { get; }
        UInt32 Unknown1 { get; }
        UInt16 Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class OrbitalDataMixIn
    {
        public static void Clear(this IOrbitalData item)
        {
            ((OrbitalDataSetterCommon)((IOrbitalDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static OrbitalData.Mask<bool> GetEqualsMask(
            this IOrbitalDataGetter item,
            IOrbitalDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IOrbitalDataGetter item,
            string? name = null,
            OrbitalData.Mask<bool>? printMask = null)
        {
            return ((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IOrbitalDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OrbitalData.Mask<bool>? printMask = null)
        {
            ((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IOrbitalDataGetter item,
            IOrbitalDataGetter rhs,
            OrbitalData.TranslationMask? equalsMask = null)
        {
            return ((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IOrbitalData lhs,
            IOrbitalDataGetter rhs)
        {
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOrbitalData lhs,
            IOrbitalDataGetter rhs,
            OrbitalData.TranslationMask? copyMask = null)
        {
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOrbitalData lhs,
            IOrbitalDataGetter rhs,
            out OrbitalData.ErrorMask errorMask,
            OrbitalData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = OrbitalData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IOrbitalData lhs,
            IOrbitalDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static OrbitalData DeepCopy(
            this IOrbitalDataGetter item,
            OrbitalData.TranslationMask? copyMask = null)
        {
            return ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static OrbitalData DeepCopy(
            this IOrbitalDataGetter item,
            out OrbitalData.ErrorMask errorMask,
            OrbitalData.TranslationMask? copyMask = null)
        {
            return ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static OrbitalData DeepCopy(
            this IOrbitalDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IOrbitalData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((OrbitalDataSetterCommon)((IOrbitalDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum OrbitalData_FieldIndex
    {
        MajorAxis = 0,
        MinorAxis = 1,
        Aphelion = 2,
        Eccentricity = 3,
        Incline = 4,
        MeanOrbit = 5,
        AxialTilt = 6,
        RotationalVelocity = 7,
        StartAngle = 8,
        PerihelionAngle = 9,
        ApplyOrbitalVelocity = 10,
        GeostationaryOrbit = 11,
        Unknown1 = 12,
        Unknown2 = 13,
    }
    #endregion

    #region Registration
    internal partial class OrbitalData_Registration : ILoquiRegistration
    {
        public static readonly OrbitalData_Registration Instance = new OrbitalData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(OrbitalData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(OrbitalData.ErrorMask);

        public static readonly Type ClassType = typeof(OrbitalData);

        public static readonly Type GetterType = typeof(IOrbitalDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IOrbitalData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.OrbitalData";

        public const string Name = "OrbitalData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ENAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ENAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(OrbitalDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class OrbitalDataSetterCommon
    {
        public static readonly OrbitalDataSetterCommon Instance = new OrbitalDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IOrbitalData item)
        {
            ClearPartial();
            item.MajorAxis = default(Double);
            item.MinorAxis = default(Double);
            item.Aphelion = default(Double);
            item.Eccentricity = default(Double);
            item.Incline = default(Double);
            item.MeanOrbit = default(Double);
            item.AxialTilt = default(Single);
            item.RotationalVelocity = default(Single);
            item.StartAngle = default(Single);
            item.PerihelionAngle = default(Single);
            item.ApplyOrbitalVelocity = default(Boolean);
            item.GeostationaryOrbit = default(Boolean);
            item.Unknown1 = default(UInt32);
            item.Unknown2 = default(UInt16);
        }
        
        #region Mutagen
        public void RemapLinks(IOrbitalData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IOrbitalData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ENAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: OrbitalDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class OrbitalDataCommon
    {
        public static readonly OrbitalDataCommon Instance = new OrbitalDataCommon();

        public OrbitalData.Mask<bool> GetEqualsMask(
            IOrbitalDataGetter item,
            IOrbitalDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OrbitalData.Mask<bool>(false);
            ((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IOrbitalDataGetter item,
            IOrbitalDataGetter rhs,
            OrbitalData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MajorAxis = item.MajorAxis.EqualsWithin(rhs.MajorAxis);
            ret.MinorAxis = item.MinorAxis.EqualsWithin(rhs.MinorAxis);
            ret.Aphelion = item.Aphelion.EqualsWithin(rhs.Aphelion);
            ret.Eccentricity = item.Eccentricity.EqualsWithin(rhs.Eccentricity);
            ret.Incline = item.Incline.EqualsWithin(rhs.Incline);
            ret.MeanOrbit = item.MeanOrbit.EqualsWithin(rhs.MeanOrbit);
            ret.AxialTilt = item.AxialTilt.EqualsWithin(rhs.AxialTilt);
            ret.RotationalVelocity = item.RotationalVelocity.EqualsWithin(rhs.RotationalVelocity);
            ret.StartAngle = item.StartAngle.EqualsWithin(rhs.StartAngle);
            ret.PerihelionAngle = item.PerihelionAngle.EqualsWithin(rhs.PerihelionAngle);
            ret.ApplyOrbitalVelocity = item.ApplyOrbitalVelocity == rhs.ApplyOrbitalVelocity;
            ret.GeostationaryOrbit = item.GeostationaryOrbit == rhs.GeostationaryOrbit;
            ret.Unknown1 = item.Unknown1 == rhs.Unknown1;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string Print(
            IOrbitalDataGetter item,
            string? name = null,
            OrbitalData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IOrbitalDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OrbitalData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"OrbitalData =>");
            }
            else
            {
                sb.AppendLine($"{name} (OrbitalData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IOrbitalDataGetter item,
            StructuredStringBuilder sb,
            OrbitalData.Mask<bool>? printMask = null)
        {
            if (printMask?.MajorAxis ?? true)
            {
                sb.AppendItem(item.MajorAxis, "MajorAxis");
            }
            if (printMask?.MinorAxis ?? true)
            {
                sb.AppendItem(item.MinorAxis, "MinorAxis");
            }
            if (printMask?.Aphelion ?? true)
            {
                sb.AppendItem(item.Aphelion, "Aphelion");
            }
            if (printMask?.Eccentricity ?? true)
            {
                sb.AppendItem(item.Eccentricity, "Eccentricity");
            }
            if (printMask?.Incline ?? true)
            {
                sb.AppendItem(item.Incline, "Incline");
            }
            if (printMask?.MeanOrbit ?? true)
            {
                sb.AppendItem(item.MeanOrbit, "MeanOrbit");
            }
            if (printMask?.AxialTilt ?? true)
            {
                sb.AppendItem(item.AxialTilt, "AxialTilt");
            }
            if (printMask?.RotationalVelocity ?? true)
            {
                sb.AppendItem(item.RotationalVelocity, "RotationalVelocity");
            }
            if (printMask?.StartAngle ?? true)
            {
                sb.AppendItem(item.StartAngle, "StartAngle");
            }
            if (printMask?.PerihelionAngle ?? true)
            {
                sb.AppendItem(item.PerihelionAngle, "PerihelionAngle");
            }
            if (printMask?.ApplyOrbitalVelocity ?? true)
            {
                sb.AppendItem(item.ApplyOrbitalVelocity, "ApplyOrbitalVelocity");
            }
            if (printMask?.GeostationaryOrbit ?? true)
            {
                sb.AppendItem(item.GeostationaryOrbit, "GeostationaryOrbit");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IOrbitalDataGetter? lhs,
            IOrbitalDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MajorAxis) ?? true))
            {
                if (!lhs.MajorAxis.EqualsWithin(rhs.MajorAxis)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MinorAxis) ?? true))
            {
                if (!lhs.MinorAxis.EqualsWithin(rhs.MinorAxis)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Aphelion) ?? true))
            {
                if (!lhs.Aphelion.EqualsWithin(rhs.Aphelion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Eccentricity) ?? true))
            {
                if (!lhs.Eccentricity.EqualsWithin(rhs.Eccentricity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Incline) ?? true))
            {
                if (!lhs.Incline.EqualsWithin(rhs.Incline)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MeanOrbit) ?? true))
            {
                if (!lhs.MeanOrbit.EqualsWithin(rhs.MeanOrbit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.AxialTilt) ?? true))
            {
                if (!lhs.AxialTilt.EqualsWithin(rhs.AxialTilt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.RotationalVelocity) ?? true))
            {
                if (!lhs.RotationalVelocity.EqualsWithin(rhs.RotationalVelocity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.StartAngle) ?? true))
            {
                if (!lhs.StartAngle.EqualsWithin(rhs.StartAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.PerihelionAngle) ?? true))
            {
                if (!lhs.PerihelionAngle.EqualsWithin(rhs.PerihelionAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.ApplyOrbitalVelocity) ?? true))
            {
                if (lhs.ApplyOrbitalVelocity != rhs.ApplyOrbitalVelocity) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.GeostationaryOrbit) ?? true))
            {
                if (lhs.GeostationaryOrbit != rhs.GeostationaryOrbit) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Unknown1) ?? true))
            {
                if (lhs.Unknown1 != rhs.Unknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IOrbitalDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MajorAxis);
            hash.Add(item.MinorAxis);
            hash.Add(item.Aphelion);
            hash.Add(item.Eccentricity);
            hash.Add(item.Incline);
            hash.Add(item.MeanOrbit);
            hash.Add(item.AxialTilt);
            hash.Add(item.RotationalVelocity);
            hash.Add(item.StartAngle);
            hash.Add(item.PerihelionAngle);
            hash.Add(item.ApplyOrbitalVelocity);
            hash.Add(item.GeostationaryOrbit);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return OrbitalData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IOrbitalDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class OrbitalDataSetterTranslationCommon
    {
        public static readonly OrbitalDataSetterTranslationCommon Instance = new OrbitalDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IOrbitalData item,
            IOrbitalDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MajorAxis) ?? true))
            {
                item.MajorAxis = rhs.MajorAxis;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MinorAxis) ?? true))
            {
                item.MinorAxis = rhs.MinorAxis;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Aphelion) ?? true))
            {
                item.Aphelion = rhs.Aphelion;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Eccentricity) ?? true))
            {
                item.Eccentricity = rhs.Eccentricity;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Incline) ?? true))
            {
                item.Incline = rhs.Incline;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.MeanOrbit) ?? true))
            {
                item.MeanOrbit = rhs.MeanOrbit;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.AxialTilt) ?? true))
            {
                item.AxialTilt = rhs.AxialTilt;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.RotationalVelocity) ?? true))
            {
                item.RotationalVelocity = rhs.RotationalVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.StartAngle) ?? true))
            {
                item.StartAngle = rhs.StartAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.PerihelionAngle) ?? true))
            {
                item.PerihelionAngle = rhs.PerihelionAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.ApplyOrbitalVelocity) ?? true))
            {
                item.ApplyOrbitalVelocity = rhs.ApplyOrbitalVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.GeostationaryOrbit) ?? true))
            {
                item.GeostationaryOrbit = rhs.GeostationaryOrbit;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)OrbitalData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IOrbitalData item,
            IOrbitalDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public OrbitalData DeepCopy(
            IOrbitalDataGetter item,
            OrbitalData.TranslationMask? copyMask = null)
        {
            OrbitalData ret = (OrbitalData)((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).GetNew();
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public OrbitalData DeepCopy(
            IOrbitalDataGetter item,
            out OrbitalData.ErrorMask errorMask,
            OrbitalData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            OrbitalData ret = (OrbitalData)((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).GetNew();
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = OrbitalData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public OrbitalData DeepCopy(
            IOrbitalDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            OrbitalData ret = (OrbitalData)((OrbitalDataCommon)((IOrbitalDataGetter)item).CommonInstance()!).GetNew();
            ((OrbitalDataSetterTranslationCommon)((IOrbitalDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class OrbitalData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OrbitalData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => OrbitalData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OrbitalDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return OrbitalDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OrbitalDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOrbitalDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IOrbitalDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IOrbitalDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class OrbitalDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly OrbitalDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IOrbitalDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.MajorAxis);
            writer.Write(item.MinorAxis);
            writer.Write(item.Aphelion);
            writer.Write(item.Eccentricity);
            writer.Write(item.Incline);
            writer.Write(item.MeanOrbit);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AxialTilt);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RotationalVelocity);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StartAngle,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PerihelionAngle,
                divisor: 57.295799255371094f,
                multiplier: null);
            writer.Write(item.ApplyOrbitalVelocity);
            writer.Write(item.GeostationaryOrbit);
            writer.Write(item.Unknown1);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            IOrbitalDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ENAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IOrbitalDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class OrbitalDataBinaryCreateTranslation
    {
        public static readonly OrbitalDataBinaryCreateTranslation Instance = new OrbitalDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IOrbitalData item,
            MutagenFrame frame)
        {
            item.MajorAxis = frame.ReadDouble();
            item.MinorAxis = frame.ReadDouble();
            item.Aphelion = frame.ReadDouble();
            item.Eccentricity = frame.ReadDouble();
            item.Incline = frame.ReadDouble();
            item.MeanOrbit = frame.ReadDouble();
            item.AxialTilt = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.RotationalVelocity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.StartAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.PerihelionAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.ApplyOrbitalVelocity = frame.ReadBoolean();
            item.GeostationaryOrbit = frame.ReadBoolean();
            item.Unknown1 = frame.ReadUInt32();
            item.Unknown2 = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class OrbitalDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IOrbitalDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((OrbitalDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class OrbitalDataBinaryOverlay :
        PluginBinaryOverlay,
        IOrbitalDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OrbitalData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => OrbitalData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OrbitalDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OrbitalDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOrbitalDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IOrbitalDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IOrbitalDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => OrbitalDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((OrbitalDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Double MajorAxis => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x0, 0x8));
        public Double MinorAxis => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x8, 0x8));
        public Double Aphelion => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x10, 0x8));
        public Double Eccentricity => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x18, 0x8));
        public Double Incline => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x20, 0x8));
        public Double MeanOrbit => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(0x28, 0x8));
        public Single AxialTilt => _structData.Slice(0x30, 0x4).Float();
        public Single RotationalVelocity => _structData.Slice(0x34, 0x4).Float();
        public Single StartAngle => _structData.Slice(0x38, 0x4).Float() * 57.2958f;
        public Single PerihelionAngle => _structData.Slice(0x3C, 0x4).Float() * 57.2958f;
        public Boolean ApplyOrbitalVelocity => _structData.Slice(0x40, 0x1)[0] >= 1;
        public Boolean GeostationaryOrbit => _structData.Slice(0x41, 0x1)[0] >= 1;
        public UInt32 Unknown1 => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x42, 0x4));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x46, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected OrbitalDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IOrbitalDataGetter OrbitalDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x48,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new OrbitalDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x48 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IOrbitalDataGetter OrbitalDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return OrbitalDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OrbitalDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOrbitalDataGetter rhs) return false;
            return ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOrbitalDataGetter? obj)
        {
            return ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OrbitalDataCommon)((IOrbitalDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

