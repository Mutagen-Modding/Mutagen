/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ObjectModification :
        AObjectModification,
        IEquatable<IObjectModificationGetter>,
        ILoquiObjectSetter<ObjectModification>,
        IObjectModificationInternal
    {
        #region Ctor
        protected ObjectModification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AObjectModProperty<AObjectModification.NoneProperty>> _Properties = new ExtendedList<AObjectModProperty<AObjectModification.NoneProperty>>();
        public ExtendedList<AObjectModProperty<AObjectModification.NoneProperty>> Properties
        {
            get => this._Properties;
            init => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAObjectModPropertyGetter<AObjectModification.NoneProperty>> IObjectModificationGetter.Properties => _Properties;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AObjectModification.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Description,
                TItem Model,
                TItem Unknown,
                TItem Unknown2,
                TItem AttachPoint,
                TItem AttachParentSlots,
                TItem Unknown3,
                TItem Includes,
                TItem TargetOmodKeywords,
                TItem FilterKeywords,
                TItem LooseMod,
                TItem Priority,
                TItem Filter,
                TItem Properties)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags,
                Components: Components,
                Name: Name,
                Description: Description,
                Model: Model,
                Unknown: Unknown,
                Unknown2: Unknown2,
                AttachPoint: AttachPoint,
                AttachParentSlots: AttachParentSlots,
                Unknown3: Unknown3,
                Includes: Includes,
                TargetOmodKeywords: TargetOmodKeywords,
                FilterKeywords: FilterKeywords,
                LooseMod: LooseMod,
                Priority: Priority,
                Filter: Filter)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>? Properties;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Properties);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectModification.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, AObjectModProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AObjectModProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ObjectModification.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ObjectModification.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectModification.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AObjectModification.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>? Properties;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectModification_FieldIndex enu = (ObjectModification_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModification_FieldIndex.Properties:
                        return Properties;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ObjectModification_FieldIndex enu = (ObjectModification_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModification_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ObjectModification_FieldIndex enu = (ObjectModification_FieldIndex)index;
                switch (enu)
                {
                    case ObjectModification_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Properties != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AObjectModification.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AObjectModProperty.TranslationMask? Properties;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ObjectModification_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectModificationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectModificationSetterCommon.Instance.RemapLinks(this, mapping);
        public ObjectModification(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ObjectModification(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ObjectModification(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ObjectModification(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ObjectModification(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectModification>.ToString(this);
        }

        protected override Type LinkType => typeof(IObjectModification);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectModificationGetter rhs) return false;
            return ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModificationGetter? obj)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ObjectModification CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectModification();
            ((ObjectModificationSetterCommon)((IObjectModificationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectModification item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectModificationSetterCommon)((IObjectModificationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ObjectModification GetNew()
        {
            return new ObjectModification();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectModification :
        IAObjectModificationInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IObjectModificationInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectModificationGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AObjectModProperty<AObjectModification.NoneProperty>> Properties { get; }
    }

    public partial interface IObjectModificationInternal :
        IAObjectModificationInternal,
        IObjectModification,
        IObjectModificationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.OMOD)]
    public partial interface IObjectModificationGetter :
        IAObjectModificationGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IObjectModificationGetter>,
        IMapsToGetter<IObjectModificationGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ObjectModification_Registration.Instance;
        IReadOnlyList<IAObjectModPropertyGetter<AObjectModification.NoneProperty>> Properties { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectModificationMixIn
    {
        public static void Clear(this IObjectModificationInternal item)
        {
            ((ObjectModificationSetterCommon)((IObjectModificationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectModification.Mask<bool> GetEqualsMask(
            this IObjectModificationGetter item,
            IObjectModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IObjectModificationGetter item,
            string? name = null,
            ObjectModification.Mask<bool>? printMask = null)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IObjectModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModification.Mask<bool>? printMask = null)
        {
            ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectModificationGetter item,
            IObjectModificationGetter rhs,
            ObjectModification.TranslationMask? equalsMask = null)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectModificationInternal lhs,
            IObjectModificationGetter rhs,
            out ObjectModification.ErrorMask errorMask,
            ObjectModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectModification.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectModificationInternal lhs,
            IObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectModification DeepCopy(
            this IObjectModificationGetter item,
            ObjectModification.TranslationMask? copyMask = null)
        {
            return ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectModification DeepCopy(
            this IObjectModificationGetter item,
            out ObjectModification.ErrorMask errorMask,
            ObjectModification.TranslationMask? copyMask = null)
        {
            return ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectModification DeepCopy(
            this IObjectModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ObjectModification Duplicate(
            this IObjectModificationGetter item,
            FormKey formKey,
            ObjectModification.TranslationMask? copyMask = null)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ObjectModification Duplicate(
            this IObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ObjectModificationSetterCommon)((IObjectModificationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ObjectModification_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Description = 9,
        Model = 10,
        Unknown = 11,
        Unknown2 = 12,
        AttachPoint = 13,
        AttachParentSlots = 14,
        Unknown3 = 15,
        Includes = 16,
        TargetOmodKeywords = 17,
        FilterKeywords = 18,
        LooseMod = 19,
        Priority = 20,
        Filter = 21,
        Properties = 22,
    }
    #endregion

    #region Registration
    internal partial class ObjectModification_Registration : ILoquiRegistration
    {
        public static readonly ObjectModification_Registration Instance = new ObjectModification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(ObjectModification.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectModification.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectModification);

        public static readonly Type GetterType = typeof(IObjectModificationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectModification);

        public static readonly Type? InternalSetterType = typeof(IObjectModificationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ObjectModification";

        public const string Name = "ObjectModification";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OMOD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.OMOD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectModificationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ObjectModificationSetterCommon : AObjectModificationSetterCommon
    {
        public new static readonly ObjectModificationSetterCommon Instance = new ObjectModificationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectModificationInternal item)
        {
            ClearPartial();
            item.Properties.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAObjectModificationInternal item)
        {
            Clear(item: (IObjectModificationInternal)item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IObjectModificationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IObjectModificationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectModification obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Properties.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IObjectModificationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectModificationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ObjectModificationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ObjectModificationCommon : AObjectModificationCommon
    {
        public new static readonly ObjectModificationCommon Instance = new ObjectModificationCommon();

        public ObjectModification.Mask<bool> GetEqualsMask(
            IObjectModificationGetter item,
            IObjectModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectModification.Mask<bool>(false);
            ((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectModificationGetter item,
            IObjectModificationGetter rhs,
            ObjectModification.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IObjectModificationGetter item,
            string? name = null,
            ObjectModification.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectModification.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectModification =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectModification) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectModificationGetter item,
            StructuredStringBuilder sb,
            ObjectModification.Mask<bool>? printMask = null)
        {
            AObjectModificationCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Properties?.Overall ?? true)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Properties)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static ObjectModification_FieldIndex ConvertFieldIndex(AObjectModification_FieldIndex index)
        {
            switch (index)
            {
                case AObjectModification_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormKey:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.VersionControl:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.EditorID:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormVersion:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Version2:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.StarfieldMajorRecordFlags:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Components:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Name:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Description:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Model:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown2:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachPoint:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachParentSlots:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown3:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Includes:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.TargetOmodKeywords:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FilterKeywords:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.LooseMod:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Priority:
                    return (ObjectModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Filter:
                    return (ObjectModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ObjectModification_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ObjectModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ObjectModification_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ObjectModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectModificationGetter? lhs,
            IObjectModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAObjectModificationGetter)lhs, (IAObjectModificationGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ObjectModification_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqual(rhs.Properties, (l, r) => ((AObjectModPropertyCommon<AObjectModification.NoneProperty>)((IAObjectModPropertyGetter<AObjectModification.NoneProperty>)l).CommonInstance(typeof(AObjectModification.NoneProperty))!).Equals(l, r, equalsMask?.GetSubCrystal((int)ObjectModification_FieldIndex.Properties)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAObjectModificationGetter? lhs,
            IAObjectModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectModificationGetter?)lhs,
                rhs: rhs as IObjectModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectModificationGetter?)lhs,
                rhs: rhs as IObjectModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectModificationGetter?)lhs,
                rhs: rhs as IObjectModificationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IObjectModificationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Properties);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAObjectModificationGetter item)
        {
            return GetHashCode(item: (IObjectModificationGetter)item);
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectModificationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectModificationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ObjectModification.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectModificationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Properties.WhereCastable<IAObjectModPropertyGetter<AObjectModification.NoneProperty>, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ObjectModification Duplicate(
            IObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ObjectModification(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override AObjectModification Duplicate(
            IAObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ObjectModificationSetterTranslationCommon : AObjectModificationSetterTranslationCommon
    {
        public new static readonly ObjectModificationSetterTranslationCommon Instance = new ObjectModificationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectModificationInternal item,
            IObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IObjectModification item,
            IObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAObjectModification)item,
                (IAObjectModificationGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ObjectModification_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)ObjectModification_FieldIndex.Properties);
                try
                {
                    item.Properties.SetTo(
                        rhs.Properties
                        .Select(r =>
                        {
                            return r.DeepCopy<AObjectModification.NoneProperty>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IObjectModification item,
            IObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAObjectModificationInternal item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModificationInternal)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAObjectModification item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModification)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModificationInternal)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModification)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModificationInternal)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectModification)item,
                rhs: (IObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ObjectModification DeepCopy(
            IObjectModificationGetter item,
            ObjectModification.TranslationMask? copyMask = null)
        {
            ObjectModification ret = (ObjectModification)((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectModification DeepCopy(
            IObjectModificationGetter item,
            out ObjectModification.ErrorMask errorMask,
            ObjectModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectModification ret = (ObjectModification)((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectModification.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectModification DeepCopy(
            IObjectModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectModification ret = (ObjectModification)((ObjectModificationCommon)((IObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((ObjectModificationSetterTranslationCommon)((IObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectModification
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ObjectModificationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectModificationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectModificationBinaryWriteTranslation :
        AObjectModificationBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ObjectModificationBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IObjectModificationGetter item,
            MutagenWriter writer)
        {
            AObjectModificationBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IObjectModificationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.OMOD,
                writeEmbedded: AObjectModificationBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAObjectModificationGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectModificationBinaryCreateTranslation : AObjectModificationBinaryCreateTranslation
    {
        public new static readonly ObjectModificationBinaryCreateTranslation Instance = new ObjectModificationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.OMOD;
        public static void FillBinaryStructs(
            IObjectModificationInternal item,
            MutagenFrame frame)
        {
            AObjectModificationBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ObjectModificationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ObjectModificationBinaryOverlay :
        AObjectModificationBinaryOverlay,
        IObjectModificationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectModificationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectModificationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IObjectModification);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectModificationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectModificationGetter ObjectModificationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ObjectModificationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IObjectModificationGetter ObjectModificationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectModificationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectModification>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectModificationGetter rhs) return false;
            return ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectModificationGetter? obj)
        {
            return ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectModificationCommon)((IObjectModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

