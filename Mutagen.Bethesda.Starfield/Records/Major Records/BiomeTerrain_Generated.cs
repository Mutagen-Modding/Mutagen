/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeTerrain :
        IBiomeTerrain,
        IEquatable<IBiomeTerrainGetter>,
        ILoquiObjectSetter<BiomeTerrain>
    {
        #region Ctor
        public BiomeTerrain()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Main
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BiomeTerrainData? _Main;
        public BiomeTerrainData? Main
        {
            get => _Main;
            set => _Main = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeTerrainDataGetter? IBiomeTerrainGetter.Main => this.Main;
        #endregion
        #region Alternate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BiomeTerrainData? _Alternate;
        public BiomeTerrainData? Alternate
        {
            get => _Alternate;
            set => _Alternate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeTerrainDataGetter? IBiomeTerrainGetter.Alternate => this.Alternate;
        #endregion
        #region BaseNoiseDataTexture
        public String? BaseNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.BaseNoiseDataTexture => this.BaseNoiseDataTexture;
        #endregion
        #region FlowNoiseDataTexture
        public String? FlowNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.FlowNoiseDataTexture => this.FlowNoiseDataTexture;
        #endregion
        #region FlatOuterNoiseDataTexture
        public String? FlatOuterNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.FlatOuterNoiseDataTexture => this.FlatOuterNoiseDataTexture;
        #endregion
        #region FlatInnerNoiseDataTexture
        public String? FlatInnerNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.FlatInnerNoiseDataTexture => this.FlatInnerNoiseDataTexture;
        #endregion
        #region TalusNoiseDataTexture
        public String? TalusNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.TalusNoiseDataTexture => this.TalusNoiseDataTexture;
        #endregion
        #region SolidNoiseDataTexture
        public String? SolidNoiseDataTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeTerrainGetter.SolidNoiseDataTexture => this.SolidNoiseDataTexture;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeTerrainMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeTerrainGetter rhs) return false;
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeTerrainGetter? obj)
        {
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Main = new MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>(initialValue, new BiomeTerrainData.Mask<TItem>(initialValue));
                this.Alternate = new MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>(initialValue, new BiomeTerrainData.Mask<TItem>(initialValue));
                this.BaseNoiseDataTexture = initialValue;
                this.FlowNoiseDataTexture = initialValue;
                this.FlatOuterNoiseDataTexture = initialValue;
                this.FlatInnerNoiseDataTexture = initialValue;
                this.TalusNoiseDataTexture = initialValue;
                this.SolidNoiseDataTexture = initialValue;
            }

            public Mask(
                TItem Main,
                TItem Alternate,
                TItem BaseNoiseDataTexture,
                TItem FlowNoiseDataTexture,
                TItem FlatOuterNoiseDataTexture,
                TItem FlatInnerNoiseDataTexture,
                TItem TalusNoiseDataTexture,
                TItem SolidNoiseDataTexture)
            {
                this.Main = new MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>(Main, new BiomeTerrainData.Mask<TItem>(Main));
                this.Alternate = new MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>(Alternate, new BiomeTerrainData.Mask<TItem>(Alternate));
                this.BaseNoiseDataTexture = BaseNoiseDataTexture;
                this.FlowNoiseDataTexture = FlowNoiseDataTexture;
                this.FlatOuterNoiseDataTexture = FlatOuterNoiseDataTexture;
                this.FlatInnerNoiseDataTexture = FlatInnerNoiseDataTexture;
                this.TalusNoiseDataTexture = TalusNoiseDataTexture;
                this.SolidNoiseDataTexture = SolidNoiseDataTexture;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>? Main { get; set; }
            public MaskItem<TItem, BiomeTerrainData.Mask<TItem>?>? Alternate { get; set; }
            public TItem BaseNoiseDataTexture;
            public TItem FlowNoiseDataTexture;
            public TItem FlatOuterNoiseDataTexture;
            public TItem FlatInnerNoiseDataTexture;
            public TItem TalusNoiseDataTexture;
            public TItem SolidNoiseDataTexture;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Main, rhs.Main)) return false;
                if (!object.Equals(this.Alternate, rhs.Alternate)) return false;
                if (!object.Equals(this.BaseNoiseDataTexture, rhs.BaseNoiseDataTexture)) return false;
                if (!object.Equals(this.FlowNoiseDataTexture, rhs.FlowNoiseDataTexture)) return false;
                if (!object.Equals(this.FlatOuterNoiseDataTexture, rhs.FlatOuterNoiseDataTexture)) return false;
                if (!object.Equals(this.FlatInnerNoiseDataTexture, rhs.FlatInnerNoiseDataTexture)) return false;
                if (!object.Equals(this.TalusNoiseDataTexture, rhs.TalusNoiseDataTexture)) return false;
                if (!object.Equals(this.SolidNoiseDataTexture, rhs.SolidNoiseDataTexture)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Main);
                hash.Add(this.Alternate);
                hash.Add(this.BaseNoiseDataTexture);
                hash.Add(this.FlowNoiseDataTexture);
                hash.Add(this.FlatOuterNoiseDataTexture);
                hash.Add(this.FlatInnerNoiseDataTexture);
                hash.Add(this.TalusNoiseDataTexture);
                hash.Add(this.SolidNoiseDataTexture);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Main != null)
                {
                    if (!eval(this.Main.Overall)) return false;
                    if (this.Main.Specific != null && !this.Main.Specific.All(eval)) return false;
                }
                if (Alternate != null)
                {
                    if (!eval(this.Alternate.Overall)) return false;
                    if (this.Alternate.Specific != null && !this.Alternate.Specific.All(eval)) return false;
                }
                if (!eval(this.BaseNoiseDataTexture)) return false;
                if (!eval(this.FlowNoiseDataTexture)) return false;
                if (!eval(this.FlatOuterNoiseDataTexture)) return false;
                if (!eval(this.FlatInnerNoiseDataTexture)) return false;
                if (!eval(this.TalusNoiseDataTexture)) return false;
                if (!eval(this.SolidNoiseDataTexture)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Main != null)
                {
                    if (eval(this.Main.Overall)) return true;
                    if (this.Main.Specific != null && this.Main.Specific.Any(eval)) return true;
                }
                if (Alternate != null)
                {
                    if (eval(this.Alternate.Overall)) return true;
                    if (this.Alternate.Specific != null && this.Alternate.Specific.Any(eval)) return true;
                }
                if (eval(this.BaseNoiseDataTexture)) return true;
                if (eval(this.FlowNoiseDataTexture)) return true;
                if (eval(this.FlatOuterNoiseDataTexture)) return true;
                if (eval(this.FlatInnerNoiseDataTexture)) return true;
                if (eval(this.TalusNoiseDataTexture)) return true;
                if (eval(this.SolidNoiseDataTexture)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeTerrain.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Main = this.Main == null ? null : new MaskItem<R, BiomeTerrainData.Mask<R>?>(eval(this.Main.Overall), this.Main.Specific?.Translate(eval));
                obj.Alternate = this.Alternate == null ? null : new MaskItem<R, BiomeTerrainData.Mask<R>?>(eval(this.Alternate.Overall), this.Alternate.Specific?.Translate(eval));
                obj.BaseNoiseDataTexture = eval(this.BaseNoiseDataTexture);
                obj.FlowNoiseDataTexture = eval(this.FlowNoiseDataTexture);
                obj.FlatOuterNoiseDataTexture = eval(this.FlatOuterNoiseDataTexture);
                obj.FlatInnerNoiseDataTexture = eval(this.FlatInnerNoiseDataTexture);
                obj.TalusNoiseDataTexture = eval(this.TalusNoiseDataTexture);
                obj.SolidNoiseDataTexture = eval(this.SolidNoiseDataTexture);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeTerrain.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeTerrain.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeTerrain.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Main?.Overall ?? true)
                    {
                        Main?.Print(sb);
                    }
                    if (printMask?.Alternate?.Overall ?? true)
                    {
                        Alternate?.Print(sb);
                    }
                    if (printMask?.BaseNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(BaseNoiseDataTexture, "BaseNoiseDataTexture");
                    }
                    if (printMask?.FlowNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(FlowNoiseDataTexture, "FlowNoiseDataTexture");
                    }
                    if (printMask?.FlatOuterNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(FlatOuterNoiseDataTexture, "FlatOuterNoiseDataTexture");
                    }
                    if (printMask?.FlatInnerNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(FlatInnerNoiseDataTexture, "FlatInnerNoiseDataTexture");
                    }
                    if (printMask?.TalusNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(TalusNoiseDataTexture, "TalusNoiseDataTexture");
                    }
                    if (printMask?.SolidNoiseDataTexture ?? true)
                    {
                        sb.AppendItem(SolidNoiseDataTexture, "SolidNoiseDataTexture");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, BiomeTerrainData.ErrorMask?>? Main;
            public MaskItem<Exception?, BiomeTerrainData.ErrorMask?>? Alternate;
            public Exception? BaseNoiseDataTexture;
            public Exception? FlowNoiseDataTexture;
            public Exception? FlatOuterNoiseDataTexture;
            public Exception? FlatInnerNoiseDataTexture;
            public Exception? TalusNoiseDataTexture;
            public Exception? SolidNoiseDataTexture;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeTerrain_FieldIndex enu = (BiomeTerrain_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrain_FieldIndex.Main:
                        return Main;
                    case BiomeTerrain_FieldIndex.Alternate:
                        return Alternate;
                    case BiomeTerrain_FieldIndex.BaseNoiseDataTexture:
                        return BaseNoiseDataTexture;
                    case BiomeTerrain_FieldIndex.FlowNoiseDataTexture:
                        return FlowNoiseDataTexture;
                    case BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture:
                        return FlatOuterNoiseDataTexture;
                    case BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture:
                        return FlatInnerNoiseDataTexture;
                    case BiomeTerrain_FieldIndex.TalusNoiseDataTexture:
                        return TalusNoiseDataTexture;
                    case BiomeTerrain_FieldIndex.SolidNoiseDataTexture:
                        return SolidNoiseDataTexture;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeTerrain_FieldIndex enu = (BiomeTerrain_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrain_FieldIndex.Main:
                        this.Main = new MaskItem<Exception?, BiomeTerrainData.ErrorMask?>(ex, null);
                        break;
                    case BiomeTerrain_FieldIndex.Alternate:
                        this.Alternate = new MaskItem<Exception?, BiomeTerrainData.ErrorMask?>(ex, null);
                        break;
                    case BiomeTerrain_FieldIndex.BaseNoiseDataTexture:
                        this.BaseNoiseDataTexture = ex;
                        break;
                    case BiomeTerrain_FieldIndex.FlowNoiseDataTexture:
                        this.FlowNoiseDataTexture = ex;
                        break;
                    case BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture:
                        this.FlatOuterNoiseDataTexture = ex;
                        break;
                    case BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture:
                        this.FlatInnerNoiseDataTexture = ex;
                        break;
                    case BiomeTerrain_FieldIndex.TalusNoiseDataTexture:
                        this.TalusNoiseDataTexture = ex;
                        break;
                    case BiomeTerrain_FieldIndex.SolidNoiseDataTexture:
                        this.SolidNoiseDataTexture = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeTerrain_FieldIndex enu = (BiomeTerrain_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrain_FieldIndex.Main:
                        this.Main = (MaskItem<Exception?, BiomeTerrainData.ErrorMask?>?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.Alternate:
                        this.Alternate = (MaskItem<Exception?, BiomeTerrainData.ErrorMask?>?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.BaseNoiseDataTexture:
                        this.BaseNoiseDataTexture = (Exception?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.FlowNoiseDataTexture:
                        this.FlowNoiseDataTexture = (Exception?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture:
                        this.FlatOuterNoiseDataTexture = (Exception?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture:
                        this.FlatInnerNoiseDataTexture = (Exception?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.TalusNoiseDataTexture:
                        this.TalusNoiseDataTexture = (Exception?)obj;
                        break;
                    case BiomeTerrain_FieldIndex.SolidNoiseDataTexture:
                        this.SolidNoiseDataTexture = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Main != null) return true;
                if (Alternate != null) return true;
                if (BaseNoiseDataTexture != null) return true;
                if (FlowNoiseDataTexture != null) return true;
                if (FlatOuterNoiseDataTexture != null) return true;
                if (FlatInnerNoiseDataTexture != null) return true;
                if (TalusNoiseDataTexture != null) return true;
                if (SolidNoiseDataTexture != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Main?.Print(sb);
                Alternate?.Print(sb);
                {
                    sb.AppendItem(BaseNoiseDataTexture, "BaseNoiseDataTexture");
                }
                {
                    sb.AppendItem(FlowNoiseDataTexture, "FlowNoiseDataTexture");
                }
                {
                    sb.AppendItem(FlatOuterNoiseDataTexture, "FlatOuterNoiseDataTexture");
                }
                {
                    sb.AppendItem(FlatInnerNoiseDataTexture, "FlatInnerNoiseDataTexture");
                }
                {
                    sb.AppendItem(TalusNoiseDataTexture, "TalusNoiseDataTexture");
                }
                {
                    sb.AppendItem(SolidNoiseDataTexture, "SolidNoiseDataTexture");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Main = this.Main.Combine(rhs.Main, (l, r) => l.Combine(r));
                ret.Alternate = this.Alternate.Combine(rhs.Alternate, (l, r) => l.Combine(r));
                ret.BaseNoiseDataTexture = this.BaseNoiseDataTexture.Combine(rhs.BaseNoiseDataTexture);
                ret.FlowNoiseDataTexture = this.FlowNoiseDataTexture.Combine(rhs.FlowNoiseDataTexture);
                ret.FlatOuterNoiseDataTexture = this.FlatOuterNoiseDataTexture.Combine(rhs.FlatOuterNoiseDataTexture);
                ret.FlatInnerNoiseDataTexture = this.FlatInnerNoiseDataTexture.Combine(rhs.FlatInnerNoiseDataTexture);
                ret.TalusNoiseDataTexture = this.TalusNoiseDataTexture.Combine(rhs.TalusNoiseDataTexture);
                ret.SolidNoiseDataTexture = this.SolidNoiseDataTexture.Combine(rhs.SolidNoiseDataTexture);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public BiomeTerrainData.TranslationMask? Main;
            public BiomeTerrainData.TranslationMask? Alternate;
            public bool BaseNoiseDataTexture;
            public bool FlowNoiseDataTexture;
            public bool FlatOuterNoiseDataTexture;
            public bool FlatInnerNoiseDataTexture;
            public bool TalusNoiseDataTexture;
            public bool SolidNoiseDataTexture;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.BaseNoiseDataTexture = defaultOn;
                this.FlowNoiseDataTexture = defaultOn;
                this.FlatOuterNoiseDataTexture = defaultOn;
                this.FlatInnerNoiseDataTexture = defaultOn;
                this.TalusNoiseDataTexture = defaultOn;
                this.SolidNoiseDataTexture = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Main != null ? Main.OnOverall : DefaultOn, Main?.GetCrystal()));
                ret.Add((Alternate != null ? Alternate.OnOverall : DefaultOn, Alternate?.GetCrystal()));
                ret.Add((BaseNoiseDataTexture, null));
                ret.Add((FlowNoiseDataTexture, null));
                ret.Add((FlatOuterNoiseDataTexture, null));
                ret.Add((FlatInnerNoiseDataTexture, null));
                ret.Add((TalusNoiseDataTexture, null));
                ret.Add((SolidNoiseDataTexture, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeTerrainCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeTerrainSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeTerrainBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeTerrain CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeTerrain();
            ((BiomeTerrainSetterCommon)((IBiomeTerrainGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeTerrain item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeTerrainSetterCommon)((IBiomeTerrainGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeTerrain GetNew()
        {
            return new BiomeTerrain();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeTerrain :
        IBiomeTerrainGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBiomeTerrain>
    {
        new BiomeTerrainData? Main { get; set; }
        new BiomeTerrainData? Alternate { get; set; }
        new String? BaseNoiseDataTexture { get; set; }
        new String? FlowNoiseDataTexture { get; set; }
        new String? FlatOuterNoiseDataTexture { get; set; }
        new String? FlatInnerNoiseDataTexture { get; set; }
        new String? TalusNoiseDataTexture { get; set; }
        new String? SolidNoiseDataTexture { get; set; }
    }

    public partial interface IBiomeTerrainGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBiomeTerrainGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeTerrain_Registration.Instance;
        IBiomeTerrainDataGetter? Main { get; }
        IBiomeTerrainDataGetter? Alternate { get; }
        String? BaseNoiseDataTexture { get; }
        String? FlowNoiseDataTexture { get; }
        String? FlatOuterNoiseDataTexture { get; }
        String? FlatInnerNoiseDataTexture { get; }
        String? TalusNoiseDataTexture { get; }
        String? SolidNoiseDataTexture { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeTerrainMixIn
    {
        public static void Clear(this IBiomeTerrain item)
        {
            ((BiomeTerrainSetterCommon)((IBiomeTerrainGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeTerrain.Mask<bool> GetEqualsMask(
            this IBiomeTerrainGetter item,
            IBiomeTerrainGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeTerrainGetter item,
            string? name = null,
            BiomeTerrain.Mask<bool>? printMask = null)
        {
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeTerrainGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeTerrain.Mask<bool>? printMask = null)
        {
            ((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeTerrainGetter item,
            IBiomeTerrainGetter rhs,
            BiomeTerrain.TranslationMask? equalsMask = null)
        {
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeTerrain lhs,
            IBiomeTerrainGetter rhs)
        {
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeTerrain lhs,
            IBiomeTerrainGetter rhs,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeTerrain lhs,
            IBiomeTerrainGetter rhs,
            out BiomeTerrain.ErrorMask errorMask,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeTerrain.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeTerrain lhs,
            IBiomeTerrainGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeTerrain DeepCopy(
            this IBiomeTerrainGetter item,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            return ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeTerrain DeepCopy(
            this IBiomeTerrainGetter item,
            out BiomeTerrain.ErrorMask errorMask,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            return ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeTerrain DeepCopy(
            this IBiomeTerrainGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeTerrain item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeTerrainSetterCommon)((IBiomeTerrainGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeTerrain_FieldIndex
    {
        Main = 0,
        Alternate = 1,
        BaseNoiseDataTexture = 2,
        FlowNoiseDataTexture = 3,
        FlatOuterNoiseDataTexture = 4,
        FlatInnerNoiseDataTexture = 5,
        TalusNoiseDataTexture = 6,
        SolidNoiseDataTexture = 7,
    }
    #endregion

    #region Registration
    internal partial class BiomeTerrain_Registration : ILoquiRegistration
    {
        public static readonly BiomeTerrain_Registration Instance = new BiomeTerrain_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(BiomeTerrain.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeTerrain.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeTerrain);

        public static readonly Type GetterType = typeof(IBiomeTerrainGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeTerrain);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeTerrain";

        public const string Name = "BiomeTerrain";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.LNAM,
                RecordTypes.ANAM,
                RecordTypes.TX00,
                RecordTypes.UX00,
                RecordTypes.VX00,
                RecordTypes.WX00,
                RecordTypes.XX00,
                RecordTypes.YX00);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BiomeTerrainBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeTerrainSetterCommon
    {
        public static readonly BiomeTerrainSetterCommon Instance = new BiomeTerrainSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeTerrain item)
        {
            ClearPartial();
            item.Main = null;
            item.Alternate = null;
            item.BaseNoiseDataTexture = default;
            item.FlowNoiseDataTexture = default;
            item.FlatOuterNoiseDataTexture = default;
            item.FlatInnerNoiseDataTexture = default;
            item.TalusNoiseDataTexture = default;
            item.SolidNoiseDataTexture = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeTerrain obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Main?.RemapLinks(mapping);
            obj.Alternate?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeTerrain item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BiomeTerrainBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BiomeTerrainCommon
    {
        public static readonly BiomeTerrainCommon Instance = new BiomeTerrainCommon();

        public BiomeTerrain.Mask<bool> GetEqualsMask(
            IBiomeTerrainGetter item,
            IBiomeTerrainGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeTerrain.Mask<bool>(false);
            ((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeTerrainGetter item,
            IBiomeTerrainGetter rhs,
            BiomeTerrain.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Main = EqualsMaskHelper.EqualsHelper(
                item.Main,
                rhs.Main,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Alternate = EqualsMaskHelper.EqualsHelper(
                item.Alternate,
                rhs.Alternate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BaseNoiseDataTexture = string.Equals(item.BaseNoiseDataTexture, rhs.BaseNoiseDataTexture);
            ret.FlowNoiseDataTexture = string.Equals(item.FlowNoiseDataTexture, rhs.FlowNoiseDataTexture);
            ret.FlatOuterNoiseDataTexture = string.Equals(item.FlatOuterNoiseDataTexture, rhs.FlatOuterNoiseDataTexture);
            ret.FlatInnerNoiseDataTexture = string.Equals(item.FlatInnerNoiseDataTexture, rhs.FlatInnerNoiseDataTexture);
            ret.TalusNoiseDataTexture = string.Equals(item.TalusNoiseDataTexture, rhs.TalusNoiseDataTexture);
            ret.SolidNoiseDataTexture = string.Equals(item.SolidNoiseDataTexture, rhs.SolidNoiseDataTexture);
        }
        
        public string Print(
            IBiomeTerrainGetter item,
            string? name = null,
            BiomeTerrain.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeTerrainGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeTerrain.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeTerrain =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeTerrain) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeTerrainGetter item,
            StructuredStringBuilder sb,
            BiomeTerrain.Mask<bool>? printMask = null)
        {
            if ((printMask?.Main?.Overall ?? true)
                && item.Main is {} MainItem)
            {
                MainItem?.Print(sb, "Main");
            }
            if ((printMask?.Alternate?.Overall ?? true)
                && item.Alternate is {} AlternateItem)
            {
                AlternateItem?.Print(sb, "Alternate");
            }
            if ((printMask?.BaseNoiseDataTexture ?? true)
                && item.BaseNoiseDataTexture is {} BaseNoiseDataTextureItem)
            {
                sb.AppendItem(BaseNoiseDataTextureItem, "BaseNoiseDataTexture");
            }
            if ((printMask?.FlowNoiseDataTexture ?? true)
                && item.FlowNoiseDataTexture is {} FlowNoiseDataTextureItem)
            {
                sb.AppendItem(FlowNoiseDataTextureItem, "FlowNoiseDataTexture");
            }
            if ((printMask?.FlatOuterNoiseDataTexture ?? true)
                && item.FlatOuterNoiseDataTexture is {} FlatOuterNoiseDataTextureItem)
            {
                sb.AppendItem(FlatOuterNoiseDataTextureItem, "FlatOuterNoiseDataTexture");
            }
            if ((printMask?.FlatInnerNoiseDataTexture ?? true)
                && item.FlatInnerNoiseDataTexture is {} FlatInnerNoiseDataTextureItem)
            {
                sb.AppendItem(FlatInnerNoiseDataTextureItem, "FlatInnerNoiseDataTexture");
            }
            if ((printMask?.TalusNoiseDataTexture ?? true)
                && item.TalusNoiseDataTexture is {} TalusNoiseDataTextureItem)
            {
                sb.AppendItem(TalusNoiseDataTextureItem, "TalusNoiseDataTexture");
            }
            if ((printMask?.SolidNoiseDataTexture ?? true)
                && item.SolidNoiseDataTexture is {} SolidNoiseDataTextureItem)
            {
                sb.AppendItem(SolidNoiseDataTextureItem, "SolidNoiseDataTexture");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeTerrainGetter? lhs,
            IBiomeTerrainGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.Main) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Main, rhs.Main, out var lhsMain, out var rhsMain, out var isMainEqual))
                {
                    if (!((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)lhsMain).CommonInstance()!).Equals(lhsMain, rhsMain, equalsMask?.GetSubCrystal((int)BiomeTerrain_FieldIndex.Main))) return false;
                }
                else if (!isMainEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.Alternate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Alternate, rhs.Alternate, out var lhsAlternate, out var rhsAlternate, out var isAlternateEqual))
                {
                    if (!((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)lhsAlternate).CommonInstance()!).Equals(lhsAlternate, rhsAlternate, equalsMask?.GetSubCrystal((int)BiomeTerrain_FieldIndex.Alternate))) return false;
                }
                else if (!isAlternateEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.BaseNoiseDataTexture, rhs.BaseNoiseDataTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.FlowNoiseDataTexture, rhs.FlowNoiseDataTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.FlatOuterNoiseDataTexture, rhs.FlatOuterNoiseDataTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.FlatInnerNoiseDataTexture, rhs.FlatInnerNoiseDataTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.TalusNoiseDataTexture, rhs.TalusNoiseDataTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture) ?? true))
            {
                if (!string.Equals(lhs.SolidNoiseDataTexture, rhs.SolidNoiseDataTexture)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeTerrainGetter item)
        {
            var hash = new HashCode();
            if (item.Main is {} Mainitem)
            {
                hash.Add(Mainitem);
            }
            if (item.Alternate is {} Alternateitem)
            {
                hash.Add(Alternateitem);
            }
            if (item.BaseNoiseDataTexture is {} BaseNoiseDataTextureitem)
            {
                hash.Add(BaseNoiseDataTextureitem);
            }
            if (item.FlowNoiseDataTexture is {} FlowNoiseDataTextureitem)
            {
                hash.Add(FlowNoiseDataTextureitem);
            }
            if (item.FlatOuterNoiseDataTexture is {} FlatOuterNoiseDataTextureitem)
            {
                hash.Add(FlatOuterNoiseDataTextureitem);
            }
            if (item.FlatInnerNoiseDataTexture is {} FlatInnerNoiseDataTextureitem)
            {
                hash.Add(FlatInnerNoiseDataTextureitem);
            }
            if (item.TalusNoiseDataTexture is {} TalusNoiseDataTextureitem)
            {
                hash.Add(TalusNoiseDataTextureitem);
            }
            if (item.SolidNoiseDataTexture is {} SolidNoiseDataTextureitem)
            {
                hash.Add(SolidNoiseDataTextureitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeTerrain.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeTerrainGetter obj)
        {
            if (obj.Main is {} MainItems)
            {
                foreach (var item in MainItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Alternate is {} AlternateItems)
            {
                foreach (var item in AlternateItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeTerrainSetterTranslationCommon
    {
        public static readonly BiomeTerrainSetterTranslationCommon Instance = new BiomeTerrainSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeTerrain item,
            IBiomeTerrainGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.Main) ?? true))
            {
                errorMask?.PushIndex((int)BiomeTerrain_FieldIndex.Main);
                try
                {
                    if(rhs.Main is {} rhsMain)
                    {
                        item.Main = rhsMain.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BiomeTerrain_FieldIndex.Main));
                    }
                    else
                    {
                        item.Main = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.Alternate) ?? true))
            {
                errorMask?.PushIndex((int)BiomeTerrain_FieldIndex.Alternate);
                try
                {
                    if(rhs.Alternate is {} rhsAlternate)
                    {
                        item.Alternate = rhsAlternate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BiomeTerrain_FieldIndex.Alternate));
                    }
                    else
                    {
                        item.Alternate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture) ?? true))
            {
                item.BaseNoiseDataTexture = rhs.BaseNoiseDataTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture) ?? true))
            {
                item.FlowNoiseDataTexture = rhs.FlowNoiseDataTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture) ?? true))
            {
                item.FlatOuterNoiseDataTexture = rhs.FlatOuterNoiseDataTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture) ?? true))
            {
                item.FlatInnerNoiseDataTexture = rhs.FlatInnerNoiseDataTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture) ?? true))
            {
                item.TalusNoiseDataTexture = rhs.TalusNoiseDataTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture) ?? true))
            {
                item.SolidNoiseDataTexture = rhs.SolidNoiseDataTexture;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeTerrain item,
            IBiomeTerrainGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeTerrain DeepCopy(
            IBiomeTerrainGetter item,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            BiomeTerrain ret = (BiomeTerrain)((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeTerrain DeepCopy(
            IBiomeTerrainGetter item,
            out BiomeTerrain.ErrorMask errorMask,
            BiomeTerrain.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeTerrain ret = (BiomeTerrain)((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeTerrain.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeTerrain DeepCopy(
            IBiomeTerrainGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeTerrain ret = (BiomeTerrain)((BiomeTerrainCommon)((IBiomeTerrainGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainSetterTranslationCommon)((IBiomeTerrainGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeTerrain
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeTerrain_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeTerrain_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeTerrainCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeTerrainSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeTerrainSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeTerrainGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeTerrainGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeTerrainGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeTerrainBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeTerrainBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBiomeTerrainGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.Main is {} MainItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.LNAM))
                {
                    ((BiomeTerrainDataBinaryWriteTranslation)((IBinaryItem)MainItem).BinaryWriteTranslator).Write(
                        item: MainItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.Alternate is {} AlternateItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ANAM))
                {
                    ((BiomeTerrainDataBinaryWriteTranslation)((IBinaryItem)AlternateItem).BinaryWriteTranslator).Write(
                        item: AlternateItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FlowNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.UX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FlatOuterNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.VX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FlatInnerNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.WX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TalusNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.XX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SolidNoiseDataTexture,
                header: translationParams.ConvertToCustom(RecordTypes.YX00),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeTerrainGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeTerrainGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeTerrainBinaryCreateTranslation
    {
        public static readonly BiomeTerrainBinaryCreateTranslation Instance = new BiomeTerrainBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBiomeTerrain item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.Main, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Main = Mutagen.Bethesda.Starfield.BiomeTerrainData.CreateFromBinary(frame: frame);
                    return (int)BiomeTerrain_FieldIndex.Main;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.Alternate, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Alternate = Mutagen.Bethesda.Starfield.BiomeTerrainData.CreateFromBinary(frame: frame);
                    return (int)BiomeTerrain_FieldIndex.Alternate;
                }
                case RecordTypeInts.TX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture;
                }
                case RecordTypeInts.UX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FlowNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture;
                }
                case RecordTypeInts.VX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FlatOuterNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture;
                }
                case RecordTypeInts.WX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FlatInnerNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture;
                }
                case RecordTypeInts.XX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TalusNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture;
                }
                case RecordTypeInts.YX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SolidNoiseDataTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeTerrainBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeTerrainGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeTerrainBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeTerrainGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeTerrain_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeTerrain_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeTerrainCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeTerrainSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeTerrainGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeTerrainGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeTerrainGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeTerrainCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeTerrainBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IBiomeTerrainDataGetter? Main { get; private set; }
        public IBiomeTerrainDataGetter? Alternate { get; private set; }
        #region BaseNoiseDataTexture
        private int? _BaseNoiseDataTextureLocation;
        public String? BaseNoiseDataTexture => _BaseNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BaseNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FlowNoiseDataTexture
        private int? _FlowNoiseDataTextureLocation;
        public String? FlowNoiseDataTexture => _FlowNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlowNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FlatOuterNoiseDataTexture
        private int? _FlatOuterNoiseDataTextureLocation;
        public String? FlatOuterNoiseDataTexture => _FlatOuterNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlatOuterNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FlatInnerNoiseDataTexture
        private int? _FlatInnerNoiseDataTextureLocation;
        public String? FlatInnerNoiseDataTexture => _FlatInnerNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlatInnerNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region TalusNoiseDataTexture
        private int? _TalusNoiseDataTextureLocation;
        public String? TalusNoiseDataTexture => _TalusNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TalusNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region SolidNoiseDataTexture
        private int? _SolidNoiseDataTextureLocation;
        public String? SolidNoiseDataTexture => _SolidNoiseDataTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SolidNoiseDataTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeTerrainBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeTerrainGetter BiomeTerrainFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BiomeTerrainBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBiomeTerrainGetter BiomeTerrainFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeTerrainFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.Main, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Main = BiomeTerrainDataBinaryOverlay.BiomeTerrainDataFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)BiomeTerrain_FieldIndex.Main;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.Alternate, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Alternate = BiomeTerrainDataBinaryOverlay.BiomeTerrainDataFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)BiomeTerrain_FieldIndex.Alternate;
                }
                case RecordTypeInts.TX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _BaseNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.BaseNoiseDataTexture;
                }
                case RecordTypeInts.UX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _FlowNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.FlowNoiseDataTexture;
                }
                case RecordTypeInts.VX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _FlatOuterNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.FlatOuterNoiseDataTexture;
                }
                case RecordTypeInts.WX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _FlatInnerNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.FlatInnerNoiseDataTexture;
                }
                case RecordTypeInts.XX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _TalusNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.TalusNoiseDataTexture;
                }
                case RecordTypeInts.YX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture, translationParams)) return ParseResult.Stop;
                    _SolidNoiseDataTextureLocation = (stream.Position - offset);
                    return (int)BiomeTerrain_FieldIndex.SolidNoiseDataTexture;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeTerrainMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeTerrainGetter rhs) return false;
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeTerrainGetter? obj)
        {
            return ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeTerrainCommon)((IBiomeTerrainGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

