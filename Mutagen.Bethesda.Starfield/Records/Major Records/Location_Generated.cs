/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Location :
        StarfieldMajorRecord,
        IEquatable<ILocationGetter>,
        ILocationInternal,
        ILoquiObjectSetter<Location>
    {
        #region Ctor
        protected Location()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ILocationGetter.Components => _Components;
        #endregion

        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? ILocationGetter.Properties => _Properties;
        #endregion

        #endregion
        #region AddedPersistLocationReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationReference>? _AddedPersistLocationReferences;
        public ExtendedList<LocationReference>? AddedPersistLocationReferences
        {
            get => this._AddedPersistLocationReferences;
            set => this._AddedPersistLocationReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationReferenceGetter>? ILocationGetter.AddedPersistLocationReferences => _AddedPersistLocationReferences;
        #endregion

        #endregion
        #region MasterPersistLocationReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationReference>? _MasterPersistLocationReferences;
        public ExtendedList<LocationReference>? MasterPersistLocationReferences
        {
            get => this._MasterPersistLocationReferences;
            set => this._MasterPersistLocationReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationReferenceGetter>? ILocationGetter.MasterPersistLocationReferences => _MasterPersistLocationReferences;
        #endregion

        #endregion
        #region RemovedPersistLocationReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? _RemovedPersistLocationReferences;
        public ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedPersistLocationReferences
        {
            get => this._RemovedPersistLocationReferences;
            set => this._RemovedPersistLocationReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ILocationGetter.RemovedPersistLocationReferences => _RemovedPersistLocationReferences;
        #endregion

        #endregion
        #region AddedUniqueBaseForms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUniqueReference>? _AddedUniqueBaseForms;
        public ExtendedList<LocationCellUniqueReference>? AddedUniqueBaseForms
        {
            get => this._AddedUniqueBaseForms;
            set => this._AddedUniqueBaseForms = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueReferenceGetter>? ILocationGetter.AddedUniqueBaseForms => _AddedUniqueBaseForms;
        #endregion

        #endregion
        #region LocationCellUniqueReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUniqueReference>? _LocationCellUniqueReferences;
        public ExtendedList<LocationCellUniqueReference>? LocationCellUniqueReferences
        {
            get => this._LocationCellUniqueReferences;
            set => this._LocationCellUniqueReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueReferenceGetter>? ILocationGetter.LocationCellUniqueReferences => _LocationCellUniqueReferences;
        #endregion

        #endregion
        #region RemovedUniqueBaseForms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>? _RemovedUniqueBaseForms;
        public ExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>? RemovedUniqueBaseForms
        {
            get => this._RemovedUniqueBaseForms;
            set => this._RemovedUniqueBaseForms = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGenericBaseFormGetter>>? ILocationGetter.RemovedUniqueBaseForms => _RemovedUniqueBaseForms;
        #endregion

        #endregion
        #region AddedUniqueNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUnique>? _AddedUniqueNpcs;
        public ExtendedList<LocationCellUnique>? AddedUniqueNpcs
        {
            get => this._AddedUniqueNpcs;
            set => this._AddedUniqueNpcs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueGetter>? ILocationGetter.AddedUniqueNpcs => _AddedUniqueNpcs;
        #endregion

        #endregion
        #region MasterUniqueNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUnique>? _MasterUniqueNpcs;
        public ExtendedList<LocationCellUnique>? MasterUniqueNpcs
        {
            get => this._MasterUniqueNpcs;
            set => this._MasterUniqueNpcs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueGetter>? ILocationGetter.MasterUniqueNpcs => _MasterUniqueNpcs;
        #endregion

        #endregion
        #region RemovedUniqueNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INpcGetter>>? _RemovedUniqueNpcs;
        public ExtendedList<IFormLinkGetter<INpcGetter>>? RemovedUniqueNpcs
        {
            get => this._RemovedUniqueNpcs;
            set => this._RemovedUniqueNpcs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? ILocationGetter.RemovedUniqueNpcs => _RemovedUniqueNpcs;
        #endregion

        #endregion
        #region AddedSpecialReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellStaticReference>? _AddedSpecialReferences;
        public ExtendedList<LocationCellStaticReference>? AddedSpecialReferences
        {
            get => this._AddedSpecialReferences;
            set => this._AddedSpecialReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellStaticReferenceGetter>? ILocationGetter.AddedSpecialReferences => _AddedSpecialReferences;
        #endregion

        #endregion
        #region MasterSpecialReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellStaticReference>? _MasterSpecialReferences;
        public ExtendedList<LocationCellStaticReference>? MasterSpecialReferences
        {
            get => this._MasterSpecialReferences;
            set => this._MasterSpecialReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellStaticReferenceGetter>? ILocationGetter.MasterSpecialReferences => _MasterSpecialReferences;
        #endregion

        #endregion
        #region RemovedSpecialReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? _RemovedSpecialReferences;
        public ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedSpecialReferences
        {
            get => this._RemovedSpecialReferences;
            set => this._RemovedSpecialReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ILocationGetter.RemovedSpecialReferences => _RemovedSpecialReferences;
        #endregion

        #endregion
        #region MasterWorldspaceCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCoordinate> _MasterWorldspaceCells = new ExtendedList<LocationCoordinate>();
        public ExtendedList<LocationCoordinate> MasterWorldspaceCells
        {
            get => this._MasterWorldspaceCells;
            init => this._MasterWorldspaceCells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCoordinateGetter> ILocationGetter.MasterWorldspaceCells => _MasterWorldspaceCells;
        #endregion

        #endregion
        #region AddedInitiallyDisabledReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedGetter>>? _AddedInitiallyDisabledReferences;
        public ExtendedList<IFormLinkGetter<IPlacedGetter>>? AddedInitiallyDisabledReferences
        {
            get => this._AddedInitiallyDisabledReferences;
            set => this._AddedInitiallyDisabledReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ILocationGetter.AddedInitiallyDisabledReferences => _AddedInitiallyDisabledReferences;
        #endregion

        #endregion
        #region MasterInitiallyDisabledReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedGetter>>? _MasterInitiallyDisabledReferences;
        public ExtendedList<IFormLinkGetter<IPlacedGetter>>? MasterInitiallyDisabledReferences
        {
            get => this._MasterInitiallyDisabledReferences;
            set => this._MasterInitiallyDisabledReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ILocationGetter.MasterInitiallyDisabledReferences => _MasterInitiallyDisabledReferences;
        #endregion

        #endregion
        #region AddedEnablePointReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellEnablePoint>? _AddedEnablePointReferences;
        public ExtendedList<LocationCellEnablePoint>? AddedEnablePointReferences
        {
            get => this._AddedEnablePointReferences;
            set => this._AddedEnablePointReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellEnablePointGetter>? ILocationGetter.AddedEnablePointReferences => _AddedEnablePointReferences;
        #endregion

        #endregion
        #region MasterEnablePointReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellEnablePoint>? _MasterEnablePointReferences;
        public ExtendedList<LocationCellEnablePoint>? MasterEnablePointReferences
        {
            get => this._MasterEnablePointReferences;
            set => this._MasterEnablePointReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellEnablePointGetter>? ILocationGetter.MasterEnablePointReferences => _MasterEnablePointReferences;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILocationGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ILocationGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties2;
        public ExtendedList<ObjectProperty>? Properties2
        {
            get => this._Properties2;
            set => this._Properties2 = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? ILocationGetter.Properties2 => _Properties2;
        #endregion

        #endregion
        #region Faction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationFaction? _Faction;
        public LocationFaction? Faction
        {
            get => _Faction;
            set => _Faction = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationFactionGetter? ILocationGetter.Faction => this.Faction;
        #endregion
        #region ParentLocation
        private readonly IFormLinkNullable<ILocationGetter> _ParentLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> ParentLocation
        {
            get => _ParentLocation;
            set => _ParentLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> ILocationGetter.ParentLocation => this.ParentLocation;
        #endregion
        #region NAM1
        private readonly IFormLinkNullable<IMusicTypeGetter> _NAM1 = new FormLinkNullable<IMusicTypeGetter>();
        public IFormLinkNullable<IMusicTypeGetter> NAM1
        {
            get => _NAM1;
            set => _NAM1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMusicTypeGetter> ILocationGetter.NAM1 => this.NAM1;
        #endregion
        #region UnreportedCrimeFaction
        private readonly IFormLinkNullable<IFactionGetter> _UnreportedCrimeFaction = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> UnreportedCrimeFaction
        {
            get => _UnreportedCrimeFaction;
            set => _UnreportedCrimeFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> ILocationGetter.UnreportedCrimeFaction => this.UnreportedCrimeFaction;
        #endregion
        #region WorldLocationMarkerRef
        private readonly IFormLinkNullable<IPlacedSimpleGetter> _WorldLocationMarkerRef = new FormLinkNullable<IPlacedSimpleGetter>();
        public IFormLinkNullable<IPlacedSimpleGetter> WorldLocationMarkerRef
        {
            get => _WorldLocationMarkerRef;
            set => _WorldLocationMarkerRef.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedSimpleGetter> ILocationGetter.WorldLocationMarkerRef => this.WorldLocationMarkerRef;
        #endregion
        #region WorldLocationRadius
        public Single? WorldLocationRadius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILocationGetter.WorldLocationRadius => this.WorldLocationRadius;
        #endregion
        #region ActorFadeMult
        public Single? ActorFadeMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILocationGetter.ActorFadeMult => this.ActorFadeMult;
        #endregion
        #region TNAM
        public Single? TNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILocationGetter.TNAM => this.TNAM;
        #endregion
        #region Color
        public Color? Color { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? ILocationGetter.Color => this.Color;
        #endregion
        #region StarID
        public Int32? StarID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ILocationGetter.StarID => this.StarID;
        #endregion
        #region PlanetID
        public Int32? PlanetID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ILocationGetter.PlanetID => this.PlanetID;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AddedPersistLocationReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.MasterPersistLocationReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.RemovedPersistLocationReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedUniqueBaseForms = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>());
                this.LocationCellUniqueReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>());
                this.RemovedUniqueBaseForms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedUniqueNpcs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.MasterUniqueNpcs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.RemovedUniqueNpcs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedSpecialReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.MasterSpecialReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.RemovedSpecialReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MasterWorldspaceCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.AddedInitiallyDisabledReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MasterInitiallyDisabledReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedEnablePointReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.MasterEnablePointReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties2 = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.Faction = new MaskItem<TItem, LocationFaction.Mask<TItem>?>(initialValue, new LocationFaction.Mask<TItem>(initialValue));
                this.ParentLocation = initialValue;
                this.NAM1 = initialValue;
                this.UnreportedCrimeFaction = initialValue;
                this.WorldLocationMarkerRef = initialValue;
                this.WorldLocationRadius = initialValue;
                this.ActorFadeMult = initialValue;
                this.TNAM = initialValue;
                this.Color = initialValue;
                this.StarID = initialValue;
                this.PlanetID = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Properties,
                TItem AddedPersistLocationReferences,
                TItem MasterPersistLocationReferences,
                TItem RemovedPersistLocationReferences,
                TItem AddedUniqueBaseForms,
                TItem LocationCellUniqueReferences,
                TItem RemovedUniqueBaseForms,
                TItem AddedUniqueNpcs,
                TItem MasterUniqueNpcs,
                TItem RemovedUniqueNpcs,
                TItem AddedSpecialReferences,
                TItem MasterSpecialReferences,
                TItem RemovedSpecialReferences,
                TItem MasterWorldspaceCells,
                TItem AddedInitiallyDisabledReferences,
                TItem MasterInitiallyDisabledReferences,
                TItem AddedEnablePointReferences,
                TItem MasterEnablePointReferences,
                TItem Name,
                TItem Keywords,
                TItem Properties2,
                TItem Faction,
                TItem ParentLocation,
                TItem NAM1,
                TItem UnreportedCrimeFaction,
                TItem WorldLocationMarkerRef,
                TItem WorldLocationRadius,
                TItem ActorFadeMult,
                TItem TNAM,
                TItem Color,
                TItem StarID,
                TItem PlanetID)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AddedPersistLocationReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(AddedPersistLocationReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.MasterPersistLocationReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(MasterPersistLocationReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.RemovedPersistLocationReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RemovedPersistLocationReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedUniqueBaseForms = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>(AddedUniqueBaseForms, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>());
                this.LocationCellUniqueReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>(LocationCellUniqueReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>());
                this.RemovedUniqueBaseForms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RemovedUniqueBaseForms, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedUniqueNpcs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(AddedUniqueNpcs, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.MasterUniqueNpcs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(MasterUniqueNpcs, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.RemovedUniqueNpcs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RemovedUniqueNpcs, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedSpecialReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(AddedSpecialReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.MasterSpecialReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(MasterSpecialReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.RemovedSpecialReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RemovedSpecialReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.MasterWorldspaceCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(MasterWorldspaceCells, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.AddedInitiallyDisabledReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AddedInitiallyDisabledReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.MasterInitiallyDisabledReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MasterInitiallyDisabledReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.AddedEnablePointReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(AddedEnablePointReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.MasterEnablePointReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(MasterEnablePointReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties2 = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties2, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.Faction = new MaskItem<TItem, LocationFaction.Mask<TItem>?>(Faction, new LocationFaction.Mask<TItem>(Faction));
                this.ParentLocation = ParentLocation;
                this.NAM1 = NAM1;
                this.UnreportedCrimeFaction = UnreportedCrimeFaction;
                this.WorldLocationMarkerRef = WorldLocationMarkerRef;
                this.WorldLocationRadius = WorldLocationRadius;
                this.ActorFadeMult = ActorFadeMult;
                this.TNAM = TNAM;
                this.Color = Color;
                this.StarID = StarID;
                this.PlanetID = PlanetID;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>? AddedPersistLocationReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>? MasterPersistLocationReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RemovedPersistLocationReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>? AddedUniqueBaseForms;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUniqueReference.Mask<TItem>?>>?>? LocationCellUniqueReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RemovedUniqueBaseForms;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>? AddedUniqueNpcs;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>? MasterUniqueNpcs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RemovedUniqueNpcs;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>? AddedSpecialReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>? MasterSpecialReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RemovedSpecialReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>? MasterWorldspaceCells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AddedInitiallyDisabledReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MasterInitiallyDisabledReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>? AddedEnablePointReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>? MasterEnablePointReferences;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties2;
            public MaskItem<TItem, LocationFaction.Mask<TItem>?>? Faction { get; set; }
            public TItem ParentLocation;
            public TItem NAM1;
            public TItem UnreportedCrimeFaction;
            public TItem WorldLocationMarkerRef;
            public TItem WorldLocationRadius;
            public TItem ActorFadeMult;
            public TItem TNAM;
            public TItem Color;
            public TItem StarID;
            public TItem PlanetID;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.AddedPersistLocationReferences, rhs.AddedPersistLocationReferences)) return false;
                if (!object.Equals(this.MasterPersistLocationReferences, rhs.MasterPersistLocationReferences)) return false;
                if (!object.Equals(this.RemovedPersistLocationReferences, rhs.RemovedPersistLocationReferences)) return false;
                if (!object.Equals(this.AddedUniqueBaseForms, rhs.AddedUniqueBaseForms)) return false;
                if (!object.Equals(this.LocationCellUniqueReferences, rhs.LocationCellUniqueReferences)) return false;
                if (!object.Equals(this.RemovedUniqueBaseForms, rhs.RemovedUniqueBaseForms)) return false;
                if (!object.Equals(this.AddedUniqueNpcs, rhs.AddedUniqueNpcs)) return false;
                if (!object.Equals(this.MasterUniqueNpcs, rhs.MasterUniqueNpcs)) return false;
                if (!object.Equals(this.RemovedUniqueNpcs, rhs.RemovedUniqueNpcs)) return false;
                if (!object.Equals(this.AddedSpecialReferences, rhs.AddedSpecialReferences)) return false;
                if (!object.Equals(this.MasterSpecialReferences, rhs.MasterSpecialReferences)) return false;
                if (!object.Equals(this.RemovedSpecialReferences, rhs.RemovedSpecialReferences)) return false;
                if (!object.Equals(this.MasterWorldspaceCells, rhs.MasterWorldspaceCells)) return false;
                if (!object.Equals(this.AddedInitiallyDisabledReferences, rhs.AddedInitiallyDisabledReferences)) return false;
                if (!object.Equals(this.MasterInitiallyDisabledReferences, rhs.MasterInitiallyDisabledReferences)) return false;
                if (!object.Equals(this.AddedEnablePointReferences, rhs.AddedEnablePointReferences)) return false;
                if (!object.Equals(this.MasterEnablePointReferences, rhs.MasterEnablePointReferences)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties2, rhs.Properties2)) return false;
                if (!object.Equals(this.Faction, rhs.Faction)) return false;
                if (!object.Equals(this.ParentLocation, rhs.ParentLocation)) return false;
                if (!object.Equals(this.NAM1, rhs.NAM1)) return false;
                if (!object.Equals(this.UnreportedCrimeFaction, rhs.UnreportedCrimeFaction)) return false;
                if (!object.Equals(this.WorldLocationMarkerRef, rhs.WorldLocationMarkerRef)) return false;
                if (!object.Equals(this.WorldLocationRadius, rhs.WorldLocationRadius)) return false;
                if (!object.Equals(this.ActorFadeMult, rhs.ActorFadeMult)) return false;
                if (!object.Equals(this.TNAM, rhs.TNAM)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.StarID, rhs.StarID)) return false;
                if (!object.Equals(this.PlanetID, rhs.PlanetID)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Properties);
                hash.Add(this.AddedPersistLocationReferences);
                hash.Add(this.MasterPersistLocationReferences);
                hash.Add(this.RemovedPersistLocationReferences);
                hash.Add(this.AddedUniqueBaseForms);
                hash.Add(this.LocationCellUniqueReferences);
                hash.Add(this.RemovedUniqueBaseForms);
                hash.Add(this.AddedUniqueNpcs);
                hash.Add(this.MasterUniqueNpcs);
                hash.Add(this.RemovedUniqueNpcs);
                hash.Add(this.AddedSpecialReferences);
                hash.Add(this.MasterSpecialReferences);
                hash.Add(this.RemovedSpecialReferences);
                hash.Add(this.MasterWorldspaceCells);
                hash.Add(this.AddedInitiallyDisabledReferences);
                hash.Add(this.MasterInitiallyDisabledReferences);
                hash.Add(this.AddedEnablePointReferences);
                hash.Add(this.MasterEnablePointReferences);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.Properties2);
                hash.Add(this.Faction);
                hash.Add(this.ParentLocation);
                hash.Add(this.NAM1);
                hash.Add(this.UnreportedCrimeFaction);
                hash.Add(this.WorldLocationMarkerRef);
                hash.Add(this.WorldLocationRadius);
                hash.Add(this.ActorFadeMult);
                hash.Add(this.TNAM);
                hash.Add(this.Color);
                hash.Add(this.StarID);
                hash.Add(this.PlanetID);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AddedPersistLocationReferences != null)
                {
                    if (!eval(this.AddedPersistLocationReferences.Overall)) return false;
                    if (this.AddedPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.AddedPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterPersistLocationReferences != null)
                {
                    if (!eval(this.MasterPersistLocationReferences.Overall)) return false;
                    if (this.MasterPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.MasterPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedPersistLocationReferences != null)
                {
                    if (!eval(this.RemovedPersistLocationReferences.Overall)) return false;
                    if (this.RemovedPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.RemovedPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedUniqueBaseForms != null)
                {
                    if (!eval(this.AddedUniqueBaseForms.Overall)) return false;
                    if (this.AddedUniqueBaseForms.Specific != null)
                    {
                        foreach (var item in this.AddedUniqueBaseForms.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellUniqueReferences != null)
                {
                    if (!eval(this.LocationCellUniqueReferences.Overall)) return false;
                    if (this.LocationCellUniqueReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellUniqueReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedUniqueBaseForms != null)
                {
                    if (!eval(this.RemovedUniqueBaseForms.Overall)) return false;
                    if (this.RemovedUniqueBaseForms.Specific != null)
                    {
                        foreach (var item in this.RemovedUniqueBaseForms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedUniqueNpcs != null)
                {
                    if (!eval(this.AddedUniqueNpcs.Overall)) return false;
                    if (this.AddedUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.AddedUniqueNpcs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterUniqueNpcs != null)
                {
                    if (!eval(this.MasterUniqueNpcs.Overall)) return false;
                    if (this.MasterUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.MasterUniqueNpcs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedUniqueNpcs != null)
                {
                    if (!eval(this.RemovedUniqueNpcs.Overall)) return false;
                    if (this.RemovedUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.RemovedUniqueNpcs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedSpecialReferences != null)
                {
                    if (!eval(this.AddedSpecialReferences.Overall)) return false;
                    if (this.AddedSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.AddedSpecialReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterSpecialReferences != null)
                {
                    if (!eval(this.MasterSpecialReferences.Overall)) return false;
                    if (this.MasterSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.MasterSpecialReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedSpecialReferences != null)
                {
                    if (!eval(this.RemovedSpecialReferences.Overall)) return false;
                    if (this.RemovedSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.RemovedSpecialReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterWorldspaceCells != null)
                {
                    if (!eval(this.MasterWorldspaceCells.Overall)) return false;
                    if (this.MasterWorldspaceCells.Specific != null)
                    {
                        foreach (var item in this.MasterWorldspaceCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AddedInitiallyDisabledReferences != null)
                {
                    if (!eval(this.AddedInitiallyDisabledReferences.Overall)) return false;
                    if (this.AddedInitiallyDisabledReferences.Specific != null)
                    {
                        foreach (var item in this.AddedInitiallyDisabledReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterInitiallyDisabledReferences != null)
                {
                    if (!eval(this.MasterInitiallyDisabledReferences.Overall)) return false;
                    if (this.MasterInitiallyDisabledReferences.Specific != null)
                    {
                        foreach (var item in this.MasterInitiallyDisabledReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedEnablePointReferences != null)
                {
                    if (!eval(this.AddedEnablePointReferences.Overall)) return false;
                    if (this.AddedEnablePointReferences.Specific != null)
                    {
                        foreach (var item in this.AddedEnablePointReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterEnablePointReferences != null)
                {
                    if (!eval(this.MasterEnablePointReferences.Overall)) return false;
                    if (this.MasterEnablePointReferences.Specific != null)
                    {
                        foreach (var item in this.MasterEnablePointReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties2 != null)
                {
                    if (!eval(this.Properties2.Overall)) return false;
                    if (this.Properties2.Specific != null)
                    {
                        foreach (var item in this.Properties2.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Faction != null)
                {
                    if (!eval(this.Faction.Overall)) return false;
                    if (this.Faction.Specific != null && !this.Faction.Specific.All(eval)) return false;
                }
                if (!eval(this.ParentLocation)) return false;
                if (!eval(this.NAM1)) return false;
                if (!eval(this.UnreportedCrimeFaction)) return false;
                if (!eval(this.WorldLocationMarkerRef)) return false;
                if (!eval(this.WorldLocationRadius)) return false;
                if (!eval(this.ActorFadeMult)) return false;
                if (!eval(this.TNAM)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.StarID)) return false;
                if (!eval(this.PlanetID)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AddedPersistLocationReferences != null)
                {
                    if (eval(this.AddedPersistLocationReferences.Overall)) return true;
                    if (this.AddedPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.AddedPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterPersistLocationReferences != null)
                {
                    if (eval(this.MasterPersistLocationReferences.Overall)) return true;
                    if (this.MasterPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.MasterPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedPersistLocationReferences != null)
                {
                    if (eval(this.RemovedPersistLocationReferences.Overall)) return true;
                    if (this.RemovedPersistLocationReferences.Specific != null)
                    {
                        foreach (var item in this.RemovedPersistLocationReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedUniqueBaseForms != null)
                {
                    if (eval(this.AddedUniqueBaseForms.Overall)) return true;
                    if (this.AddedUniqueBaseForms.Specific != null)
                    {
                        foreach (var item in this.AddedUniqueBaseForms.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellUniqueReferences != null)
                {
                    if (eval(this.LocationCellUniqueReferences.Overall)) return true;
                    if (this.LocationCellUniqueReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellUniqueReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedUniqueBaseForms != null)
                {
                    if (eval(this.RemovedUniqueBaseForms.Overall)) return true;
                    if (this.RemovedUniqueBaseForms.Specific != null)
                    {
                        foreach (var item in this.RemovedUniqueBaseForms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedUniqueNpcs != null)
                {
                    if (eval(this.AddedUniqueNpcs.Overall)) return true;
                    if (this.AddedUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.AddedUniqueNpcs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterUniqueNpcs != null)
                {
                    if (eval(this.MasterUniqueNpcs.Overall)) return true;
                    if (this.MasterUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.MasterUniqueNpcs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedUniqueNpcs != null)
                {
                    if (eval(this.RemovedUniqueNpcs.Overall)) return true;
                    if (this.RemovedUniqueNpcs.Specific != null)
                    {
                        foreach (var item in this.RemovedUniqueNpcs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedSpecialReferences != null)
                {
                    if (eval(this.AddedSpecialReferences.Overall)) return true;
                    if (this.AddedSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.AddedSpecialReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterSpecialReferences != null)
                {
                    if (eval(this.MasterSpecialReferences.Overall)) return true;
                    if (this.MasterSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.MasterSpecialReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RemovedSpecialReferences != null)
                {
                    if (eval(this.RemovedSpecialReferences.Overall)) return true;
                    if (this.RemovedSpecialReferences.Specific != null)
                    {
                        foreach (var item in this.RemovedSpecialReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterWorldspaceCells != null)
                {
                    if (eval(this.MasterWorldspaceCells.Overall)) return true;
                    if (this.MasterWorldspaceCells.Specific != null)
                    {
                        foreach (var item in this.MasterWorldspaceCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AddedInitiallyDisabledReferences != null)
                {
                    if (eval(this.AddedInitiallyDisabledReferences.Overall)) return true;
                    if (this.AddedInitiallyDisabledReferences.Specific != null)
                    {
                        foreach (var item in this.AddedInitiallyDisabledReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterInitiallyDisabledReferences != null)
                {
                    if (eval(this.MasterInitiallyDisabledReferences.Overall)) return true;
                    if (this.MasterInitiallyDisabledReferences.Specific != null)
                    {
                        foreach (var item in this.MasterInitiallyDisabledReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AddedEnablePointReferences != null)
                {
                    if (eval(this.AddedEnablePointReferences.Overall)) return true;
                    if (this.AddedEnablePointReferences.Specific != null)
                    {
                        foreach (var item in this.AddedEnablePointReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MasterEnablePointReferences != null)
                {
                    if (eval(this.MasterEnablePointReferences.Overall)) return true;
                    if (this.MasterEnablePointReferences.Specific != null)
                    {
                        foreach (var item in this.MasterEnablePointReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties2 != null)
                {
                    if (eval(this.Properties2.Overall)) return true;
                    if (this.Properties2.Specific != null)
                    {
                        foreach (var item in this.Properties2.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Faction != null)
                {
                    if (eval(this.Faction.Overall)) return true;
                    if (this.Faction.Specific != null && this.Faction.Specific.Any(eval)) return true;
                }
                if (eval(this.ParentLocation)) return true;
                if (eval(this.NAM1)) return true;
                if (eval(this.UnreportedCrimeFaction)) return true;
                if (eval(this.WorldLocationMarkerRef)) return true;
                if (eval(this.WorldLocationRadius)) return true;
                if (eval(this.ActorFadeMult)) return true;
                if (eval(this.TNAM)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.StarID)) return true;
                if (eval(this.PlanetID)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Location.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (AddedPersistLocationReferences != null)
                {
                    obj.AddedPersistLocationReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationReference.Mask<R>?>>?>(eval(this.AddedPersistLocationReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationReference.Mask<R>?>>());
                    if (AddedPersistLocationReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationReference.Mask<R>?>>();
                        obj.AddedPersistLocationReferences.Specific = l;
                        foreach (var item in AddedPersistLocationReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MasterPersistLocationReferences != null)
                {
                    obj.MasterPersistLocationReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationReference.Mask<R>?>>?>(eval(this.MasterPersistLocationReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationReference.Mask<R>?>>());
                    if (MasterPersistLocationReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationReference.Mask<R>?>>();
                        obj.MasterPersistLocationReferences.Specific = l;
                        foreach (var item in MasterPersistLocationReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RemovedPersistLocationReferences != null)
                {
                    obj.RemovedPersistLocationReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RemovedPersistLocationReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RemovedPersistLocationReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RemovedPersistLocationReferences.Specific = l;
                        foreach (var item in RemovedPersistLocationReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AddedUniqueBaseForms != null)
                {
                    obj.AddedUniqueBaseForms = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>?>(eval(this.AddedUniqueBaseForms.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>());
                    if (AddedUniqueBaseForms.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>();
                        obj.AddedUniqueBaseForms.Specific = l;
                        foreach (var item in AddedUniqueBaseForms.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellUniqueReferences != null)
                {
                    obj.LocationCellUniqueReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>?>(eval(this.LocationCellUniqueReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>());
                    if (LocationCellUniqueReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>>();
                        obj.LocationCellUniqueReferences.Specific = l;
                        foreach (var item in LocationCellUniqueReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUniqueReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RemovedUniqueBaseForms != null)
                {
                    obj.RemovedUniqueBaseForms = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RemovedUniqueBaseForms.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RemovedUniqueBaseForms.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RemovedUniqueBaseForms.Specific = l;
                        foreach (var item in RemovedUniqueBaseForms.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AddedUniqueNpcs != null)
                {
                    obj.AddedUniqueNpcs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>?>(eval(this.AddedUniqueNpcs.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>());
                    if (AddedUniqueNpcs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>();
                        obj.AddedUniqueNpcs.Specific = l;
                        foreach (var item in AddedUniqueNpcs.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUnique.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUnique.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MasterUniqueNpcs != null)
                {
                    obj.MasterUniqueNpcs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>?>(eval(this.MasterUniqueNpcs.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>());
                    if (MasterUniqueNpcs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>();
                        obj.MasterUniqueNpcs.Specific = l;
                        foreach (var item in MasterUniqueNpcs.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUnique.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUnique.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RemovedUniqueNpcs != null)
                {
                    obj.RemovedUniqueNpcs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RemovedUniqueNpcs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RemovedUniqueNpcs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RemovedUniqueNpcs.Specific = l;
                        foreach (var item in RemovedUniqueNpcs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AddedSpecialReferences != null)
                {
                    obj.AddedSpecialReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>?>(eval(this.AddedSpecialReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>());
                    if (AddedSpecialReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>();
                        obj.AddedSpecialReferences.Specific = l;
                        foreach (var item in AddedSpecialReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MasterSpecialReferences != null)
                {
                    obj.MasterSpecialReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>?>(eval(this.MasterSpecialReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>());
                    if (MasterSpecialReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>();
                        obj.MasterSpecialReferences.Specific = l;
                        foreach (var item in MasterSpecialReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RemovedSpecialReferences != null)
                {
                    obj.RemovedSpecialReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RemovedSpecialReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RemovedSpecialReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RemovedSpecialReferences.Specific = l;
                        foreach (var item in RemovedSpecialReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MasterWorldspaceCells != null)
                {
                    obj.MasterWorldspaceCells = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>?>(eval(this.MasterWorldspaceCells.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>());
                    if (MasterWorldspaceCells.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>();
                        obj.MasterWorldspaceCells.Specific = l;
                        foreach (var item in MasterWorldspaceCells.Specific)
                        {
                            MaskItemIndexed<R, LocationCoordinate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCoordinate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (AddedInitiallyDisabledReferences != null)
                {
                    obj.AddedInitiallyDisabledReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AddedInitiallyDisabledReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AddedInitiallyDisabledReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AddedInitiallyDisabledReferences.Specific = l;
                        foreach (var item in AddedInitiallyDisabledReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MasterInitiallyDisabledReferences != null)
                {
                    obj.MasterInitiallyDisabledReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MasterInitiallyDisabledReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MasterInitiallyDisabledReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MasterInitiallyDisabledReferences.Specific = l;
                        foreach (var item in MasterInitiallyDisabledReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AddedEnablePointReferences != null)
                {
                    obj.AddedEnablePointReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>?>(eval(this.AddedEnablePointReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>());
                    if (AddedEnablePointReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>();
                        obj.AddedEnablePointReferences.Specific = l;
                        foreach (var item in AddedEnablePointReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MasterEnablePointReferences != null)
                {
                    obj.MasterEnablePointReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>?>(eval(this.MasterEnablePointReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>());
                    if (MasterEnablePointReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>();
                        obj.MasterEnablePointReferences.Specific = l;
                        foreach (var item in MasterEnablePointReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties2 != null)
                {
                    obj.Properties2 = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties2.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties2.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties2.Specific = l;
                        foreach (var item in Properties2.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Faction = this.Faction == null ? null : new MaskItem<R, LocationFaction.Mask<R>?>(eval(this.Faction.Overall), this.Faction.Specific?.Translate(eval));
                obj.ParentLocation = eval(this.ParentLocation);
                obj.NAM1 = eval(this.NAM1);
                obj.UnreportedCrimeFaction = eval(this.UnreportedCrimeFaction);
                obj.WorldLocationMarkerRef = eval(this.WorldLocationMarkerRef);
                obj.WorldLocationRadius = eval(this.WorldLocationRadius);
                obj.ActorFadeMult = eval(this.ActorFadeMult);
                obj.TNAM = eval(this.TNAM);
                obj.Color = eval(this.Color);
                obj.StarID = eval(this.StarID);
                obj.PlanetID = eval(this.PlanetID);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Location.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Location.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Location.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedPersistLocationReferences?.Overall ?? true)
                        && AddedPersistLocationReferences is {} AddedPersistLocationReferencesItem)
                    {
                        sb.AppendLine("AddedPersistLocationReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedPersistLocationReferencesItem.Overall);
                            if (AddedPersistLocationReferencesItem.Specific != null)
                            {
                                foreach (var subItem in AddedPersistLocationReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterPersistLocationReferences?.Overall ?? true)
                        && MasterPersistLocationReferences is {} MasterPersistLocationReferencesItem)
                    {
                        sb.AppendLine("MasterPersistLocationReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterPersistLocationReferencesItem.Overall);
                            if (MasterPersistLocationReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterPersistLocationReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RemovedPersistLocationReferences?.Overall ?? true)
                        && RemovedPersistLocationReferences is {} RemovedPersistLocationReferencesItem)
                    {
                        sb.AppendLine("RemovedPersistLocationReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RemovedPersistLocationReferencesItem.Overall);
                            if (RemovedPersistLocationReferencesItem.Specific != null)
                            {
                                foreach (var subItem in RemovedPersistLocationReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedUniqueBaseForms?.Overall ?? true)
                        && AddedUniqueBaseForms is {} AddedUniqueBaseFormsItem)
                    {
                        sb.AppendLine("AddedUniqueBaseForms =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedUniqueBaseFormsItem.Overall);
                            if (AddedUniqueBaseFormsItem.Specific != null)
                            {
                                foreach (var subItem in AddedUniqueBaseFormsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellUniqueReferences?.Overall ?? true)
                        && LocationCellUniqueReferences is {} LocationCellUniqueReferencesItem)
                    {
                        sb.AppendLine("LocationCellUniqueReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellUniqueReferencesItem.Overall);
                            if (LocationCellUniqueReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellUniqueReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RemovedUniqueBaseForms?.Overall ?? true)
                        && RemovedUniqueBaseForms is {} RemovedUniqueBaseFormsItem)
                    {
                        sb.AppendLine("RemovedUniqueBaseForms =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RemovedUniqueBaseFormsItem.Overall);
                            if (RemovedUniqueBaseFormsItem.Specific != null)
                            {
                                foreach (var subItem in RemovedUniqueBaseFormsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedUniqueNpcs?.Overall ?? true)
                        && AddedUniqueNpcs is {} AddedUniqueNpcsItem)
                    {
                        sb.AppendLine("AddedUniqueNpcs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedUniqueNpcsItem.Overall);
                            if (AddedUniqueNpcsItem.Specific != null)
                            {
                                foreach (var subItem in AddedUniqueNpcsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterUniqueNpcs?.Overall ?? true)
                        && MasterUniqueNpcs is {} MasterUniqueNpcsItem)
                    {
                        sb.AppendLine("MasterUniqueNpcs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterUniqueNpcsItem.Overall);
                            if (MasterUniqueNpcsItem.Specific != null)
                            {
                                foreach (var subItem in MasterUniqueNpcsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RemovedUniqueNpcs?.Overall ?? true)
                        && RemovedUniqueNpcs is {} RemovedUniqueNpcsItem)
                    {
                        sb.AppendLine("RemovedUniqueNpcs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RemovedUniqueNpcsItem.Overall);
                            if (RemovedUniqueNpcsItem.Specific != null)
                            {
                                foreach (var subItem in RemovedUniqueNpcsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedSpecialReferences?.Overall ?? true)
                        && AddedSpecialReferences is {} AddedSpecialReferencesItem)
                    {
                        sb.AppendLine("AddedSpecialReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedSpecialReferencesItem.Overall);
                            if (AddedSpecialReferencesItem.Specific != null)
                            {
                                foreach (var subItem in AddedSpecialReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterSpecialReferences?.Overall ?? true)
                        && MasterSpecialReferences is {} MasterSpecialReferencesItem)
                    {
                        sb.AppendLine("MasterSpecialReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterSpecialReferencesItem.Overall);
                            if (MasterSpecialReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterSpecialReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RemovedSpecialReferences?.Overall ?? true)
                        && RemovedSpecialReferences is {} RemovedSpecialReferencesItem)
                    {
                        sb.AppendLine("RemovedSpecialReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RemovedSpecialReferencesItem.Overall);
                            if (RemovedSpecialReferencesItem.Specific != null)
                            {
                                foreach (var subItem in RemovedSpecialReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterWorldspaceCells?.Overall ?? true)
                        && MasterWorldspaceCells is {} MasterWorldspaceCellsItem)
                    {
                        sb.AppendLine("MasterWorldspaceCells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterWorldspaceCellsItem.Overall);
                            if (MasterWorldspaceCellsItem.Specific != null)
                            {
                                foreach (var subItem in MasterWorldspaceCellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedInitiallyDisabledReferences?.Overall ?? true)
                        && AddedInitiallyDisabledReferences is {} AddedInitiallyDisabledReferencesItem)
                    {
                        sb.AppendLine("AddedInitiallyDisabledReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedInitiallyDisabledReferencesItem.Overall);
                            if (AddedInitiallyDisabledReferencesItem.Specific != null)
                            {
                                foreach (var subItem in AddedInitiallyDisabledReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterInitiallyDisabledReferences?.Overall ?? true)
                        && MasterInitiallyDisabledReferences is {} MasterInitiallyDisabledReferencesItem)
                    {
                        sb.AppendLine("MasterInitiallyDisabledReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterInitiallyDisabledReferencesItem.Overall);
                            if (MasterInitiallyDisabledReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterInitiallyDisabledReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AddedEnablePointReferences?.Overall ?? true)
                        && AddedEnablePointReferences is {} AddedEnablePointReferencesItem)
                    {
                        sb.AppendLine("AddedEnablePointReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AddedEnablePointReferencesItem.Overall);
                            if (AddedEnablePointReferencesItem.Specific != null)
                            {
                                foreach (var subItem in AddedEnablePointReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterEnablePointReferences?.Overall ?? true)
                        && MasterEnablePointReferences is {} MasterEnablePointReferencesItem)
                    {
                        sb.AppendLine("MasterEnablePointReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterEnablePointReferencesItem.Overall);
                            if (MasterEnablePointReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterEnablePointReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties2?.Overall ?? true)
                        && Properties2 is {} Properties2Item)
                    {
                        sb.AppendLine("Properties2 =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(Properties2Item.Overall);
                            if (Properties2Item.Specific != null)
                            {
                                foreach (var subItem in Properties2Item.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Faction?.Overall ?? true)
                    {
                        Faction?.Print(sb);
                    }
                    if (printMask?.ParentLocation ?? true)
                    {
                        sb.AppendItem(ParentLocation, "ParentLocation");
                    }
                    if (printMask?.NAM1 ?? true)
                    {
                        sb.AppendItem(NAM1, "NAM1");
                    }
                    if (printMask?.UnreportedCrimeFaction ?? true)
                    {
                        sb.AppendItem(UnreportedCrimeFaction, "UnreportedCrimeFaction");
                    }
                    if (printMask?.WorldLocationMarkerRef ?? true)
                    {
                        sb.AppendItem(WorldLocationMarkerRef, "WorldLocationMarkerRef");
                    }
                    if (printMask?.WorldLocationRadius ?? true)
                    {
                        sb.AppendItem(WorldLocationRadius, "WorldLocationRadius");
                    }
                    if (printMask?.ActorFadeMult ?? true)
                    {
                        sb.AppendItem(ActorFadeMult, "ActorFadeMult");
                    }
                    if (printMask?.TNAM ?? true)
                    {
                        sb.AppendItem(TNAM, "TNAM");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.StarID ?? true)
                    {
                        sb.AppendItem(StarID, "StarID");
                    }
                    if (printMask?.PlanetID ?? true)
                    {
                        sb.AppendItem(PlanetID, "PlanetID");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>? AddedPersistLocationReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>? MasterPersistLocationReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RemovedPersistLocationReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>? AddedUniqueBaseForms;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>? LocationCellUniqueReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RemovedUniqueBaseForms;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>? AddedUniqueNpcs;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>? MasterUniqueNpcs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RemovedUniqueNpcs;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>? AddedSpecialReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>? MasterSpecialReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RemovedSpecialReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>? MasterWorldspaceCells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AddedInitiallyDisabledReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MasterInitiallyDisabledReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>? AddedEnablePointReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>? MasterEnablePointReferences;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties2;
            public MaskItem<Exception?, LocationFaction.ErrorMask?>? Faction;
            public Exception? ParentLocation;
            public Exception? NAM1;
            public Exception? UnreportedCrimeFaction;
            public Exception? WorldLocationMarkerRef;
            public Exception? WorldLocationRadius;
            public Exception? ActorFadeMult;
            public Exception? TNAM;
            public Exception? Color;
            public Exception? StarID;
            public Exception? PlanetID;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.Components:
                        return Components;
                    case Location_FieldIndex.Properties:
                        return Properties;
                    case Location_FieldIndex.AddedPersistLocationReferences:
                        return AddedPersistLocationReferences;
                    case Location_FieldIndex.MasterPersistLocationReferences:
                        return MasterPersistLocationReferences;
                    case Location_FieldIndex.RemovedPersistLocationReferences:
                        return RemovedPersistLocationReferences;
                    case Location_FieldIndex.AddedUniqueBaseForms:
                        return AddedUniqueBaseForms;
                    case Location_FieldIndex.LocationCellUniqueReferences:
                        return LocationCellUniqueReferences;
                    case Location_FieldIndex.RemovedUniqueBaseForms:
                        return RemovedUniqueBaseForms;
                    case Location_FieldIndex.AddedUniqueNpcs:
                        return AddedUniqueNpcs;
                    case Location_FieldIndex.MasterUniqueNpcs:
                        return MasterUniqueNpcs;
                    case Location_FieldIndex.RemovedUniqueNpcs:
                        return RemovedUniqueNpcs;
                    case Location_FieldIndex.AddedSpecialReferences:
                        return AddedSpecialReferences;
                    case Location_FieldIndex.MasterSpecialReferences:
                        return MasterSpecialReferences;
                    case Location_FieldIndex.RemovedSpecialReferences:
                        return RemovedSpecialReferences;
                    case Location_FieldIndex.MasterWorldspaceCells:
                        return MasterWorldspaceCells;
                    case Location_FieldIndex.AddedInitiallyDisabledReferences:
                        return AddedInitiallyDisabledReferences;
                    case Location_FieldIndex.MasterInitiallyDisabledReferences:
                        return MasterInitiallyDisabledReferences;
                    case Location_FieldIndex.AddedEnablePointReferences:
                        return AddedEnablePointReferences;
                    case Location_FieldIndex.MasterEnablePointReferences:
                        return MasterEnablePointReferences;
                    case Location_FieldIndex.Name:
                        return Name;
                    case Location_FieldIndex.Keywords:
                        return Keywords;
                    case Location_FieldIndex.Properties2:
                        return Properties2;
                    case Location_FieldIndex.Faction:
                        return Faction;
                    case Location_FieldIndex.ParentLocation:
                        return ParentLocation;
                    case Location_FieldIndex.NAM1:
                        return NAM1;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        return UnreportedCrimeFaction;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        return WorldLocationMarkerRef;
                    case Location_FieldIndex.WorldLocationRadius:
                        return WorldLocationRadius;
                    case Location_FieldIndex.ActorFadeMult:
                        return ActorFadeMult;
                    case Location_FieldIndex.TNAM:
                        return TNAM;
                    case Location_FieldIndex.Color:
                        return Color;
                    case Location_FieldIndex.StarID:
                        return StarID;
                    case Location_FieldIndex.PlanetID:
                        return PlanetID;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedPersistLocationReferences:
                        this.AddedPersistLocationReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterPersistLocationReferences:
                        this.MasterPersistLocationReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.RemovedPersistLocationReferences:
                        this.RemovedPersistLocationReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedUniqueBaseForms:
                        this.AddedUniqueBaseForms = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellUniqueReferences:
                        this.LocationCellUniqueReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.RemovedUniqueBaseForms:
                        this.RemovedUniqueBaseForms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedUniqueNpcs:
                        this.AddedUniqueNpcs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterUniqueNpcs:
                        this.MasterUniqueNpcs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.RemovedUniqueNpcs:
                        this.RemovedUniqueNpcs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedSpecialReferences:
                        this.AddedSpecialReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterSpecialReferences:
                        this.MasterSpecialReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.RemovedSpecialReferences:
                        this.RemovedSpecialReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterWorldspaceCells:
                        this.MasterWorldspaceCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedInitiallyDisabledReferences:
                        this.AddedInitiallyDisabledReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterInitiallyDisabledReferences:
                        this.MasterInitiallyDisabledReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.AddedEnablePointReferences:
                        this.AddedEnablePointReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.MasterEnablePointReferences:
                        this.MasterEnablePointReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Location_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.Properties2:
                        this.Properties2 = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.Faction:
                        this.Faction = new MaskItem<Exception?, LocationFaction.ErrorMask?>(ex, null);
                        break;
                    case Location_FieldIndex.ParentLocation:
                        this.ParentLocation = ex;
                        break;
                    case Location_FieldIndex.NAM1:
                        this.NAM1 = ex;
                        break;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        this.UnreportedCrimeFaction = ex;
                        break;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        this.WorldLocationMarkerRef = ex;
                        break;
                    case Location_FieldIndex.WorldLocationRadius:
                        this.WorldLocationRadius = ex;
                        break;
                    case Location_FieldIndex.ActorFadeMult:
                        this.ActorFadeMult = ex;
                        break;
                    case Location_FieldIndex.TNAM:
                        this.TNAM = ex;
                        break;
                    case Location_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Location_FieldIndex.StarID:
                        this.StarID = ex;
                        break;
                    case Location_FieldIndex.PlanetID:
                        this.PlanetID = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.AddedPersistLocationReferences:
                        this.AddedPersistLocationReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.MasterPersistLocationReferences:
                        this.MasterPersistLocationReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.RemovedPersistLocationReferences:
                        this.RemovedPersistLocationReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.AddedUniqueBaseForms:
                        this.AddedUniqueBaseForms = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellUniqueReferences:
                        this.LocationCellUniqueReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.RemovedUniqueBaseForms:
                        this.RemovedUniqueBaseForms = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.AddedUniqueNpcs:
                        this.AddedUniqueNpcs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.MasterUniqueNpcs:
                        this.MasterUniqueNpcs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.RemovedUniqueNpcs:
                        this.RemovedUniqueNpcs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.AddedSpecialReferences:
                        this.AddedSpecialReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.MasterSpecialReferences:
                        this.MasterSpecialReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.RemovedSpecialReferences:
                        this.RemovedSpecialReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.MasterWorldspaceCells:
                        this.MasterWorldspaceCells = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.AddedInitiallyDisabledReferences:
                        this.AddedInitiallyDisabledReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.MasterInitiallyDisabledReferences:
                        this.MasterInitiallyDisabledReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.AddedEnablePointReferences:
                        this.AddedEnablePointReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.MasterEnablePointReferences:
                        this.MasterEnablePointReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Location_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.Properties2:
                        this.Properties2 = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.Faction:
                        this.Faction = (MaskItem<Exception?, LocationFaction.ErrorMask?>?)obj;
                        break;
                    case Location_FieldIndex.ParentLocation:
                        this.ParentLocation = (Exception?)obj;
                        break;
                    case Location_FieldIndex.NAM1:
                        this.NAM1 = (Exception?)obj;
                        break;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        this.UnreportedCrimeFaction = (Exception?)obj;
                        break;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        this.WorldLocationMarkerRef = (Exception?)obj;
                        break;
                    case Location_FieldIndex.WorldLocationRadius:
                        this.WorldLocationRadius = (Exception?)obj;
                        break;
                    case Location_FieldIndex.ActorFadeMult:
                        this.ActorFadeMult = (Exception?)obj;
                        break;
                    case Location_FieldIndex.TNAM:
                        this.TNAM = (Exception?)obj;
                        break;
                    case Location_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Location_FieldIndex.StarID:
                        this.StarID = (Exception?)obj;
                        break;
                    case Location_FieldIndex.PlanetID:
                        this.PlanetID = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Properties != null) return true;
                if (AddedPersistLocationReferences != null) return true;
                if (MasterPersistLocationReferences != null) return true;
                if (RemovedPersistLocationReferences != null) return true;
                if (AddedUniqueBaseForms != null) return true;
                if (LocationCellUniqueReferences != null) return true;
                if (RemovedUniqueBaseForms != null) return true;
                if (AddedUniqueNpcs != null) return true;
                if (MasterUniqueNpcs != null) return true;
                if (RemovedUniqueNpcs != null) return true;
                if (AddedSpecialReferences != null) return true;
                if (MasterSpecialReferences != null) return true;
                if (RemovedSpecialReferences != null) return true;
                if (MasterWorldspaceCells != null) return true;
                if (AddedInitiallyDisabledReferences != null) return true;
                if (MasterInitiallyDisabledReferences != null) return true;
                if (AddedEnablePointReferences != null) return true;
                if (MasterEnablePointReferences != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (Properties2 != null) return true;
                if (Faction != null) return true;
                if (ParentLocation != null) return true;
                if (NAM1 != null) return true;
                if (UnreportedCrimeFaction != null) return true;
                if (WorldLocationMarkerRef != null) return true;
                if (WorldLocationRadius != null) return true;
                if (ActorFadeMult != null) return true;
                if (TNAM != null) return true;
                if (Color != null) return true;
                if (StarID != null) return true;
                if (PlanetID != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (AddedPersistLocationReferences is {} AddedPersistLocationReferencesItem)
                {
                    sb.AppendLine("AddedPersistLocationReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedPersistLocationReferencesItem.Overall);
                        if (AddedPersistLocationReferencesItem.Specific != null)
                        {
                            foreach (var subItem in AddedPersistLocationReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MasterPersistLocationReferences is {} MasterPersistLocationReferencesItem)
                {
                    sb.AppendLine("MasterPersistLocationReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterPersistLocationReferencesItem.Overall);
                        if (MasterPersistLocationReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterPersistLocationReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RemovedPersistLocationReferences is {} RemovedPersistLocationReferencesItem)
                {
                    sb.AppendLine("RemovedPersistLocationReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RemovedPersistLocationReferencesItem.Overall);
                        if (RemovedPersistLocationReferencesItem.Specific != null)
                        {
                            foreach (var subItem in RemovedPersistLocationReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AddedUniqueBaseForms is {} AddedUniqueBaseFormsItem)
                {
                    sb.AppendLine("AddedUniqueBaseForms =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedUniqueBaseFormsItem.Overall);
                        if (AddedUniqueBaseFormsItem.Specific != null)
                        {
                            foreach (var subItem in AddedUniqueBaseFormsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellUniqueReferences is {} LocationCellUniqueReferencesItem)
                {
                    sb.AppendLine("LocationCellUniqueReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellUniqueReferencesItem.Overall);
                        if (LocationCellUniqueReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellUniqueReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RemovedUniqueBaseForms is {} RemovedUniqueBaseFormsItem)
                {
                    sb.AppendLine("RemovedUniqueBaseForms =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RemovedUniqueBaseFormsItem.Overall);
                        if (RemovedUniqueBaseFormsItem.Specific != null)
                        {
                            foreach (var subItem in RemovedUniqueBaseFormsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AddedUniqueNpcs is {} AddedUniqueNpcsItem)
                {
                    sb.AppendLine("AddedUniqueNpcs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedUniqueNpcsItem.Overall);
                        if (AddedUniqueNpcsItem.Specific != null)
                        {
                            foreach (var subItem in AddedUniqueNpcsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MasterUniqueNpcs is {} MasterUniqueNpcsItem)
                {
                    sb.AppendLine("MasterUniqueNpcs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterUniqueNpcsItem.Overall);
                        if (MasterUniqueNpcsItem.Specific != null)
                        {
                            foreach (var subItem in MasterUniqueNpcsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RemovedUniqueNpcs is {} RemovedUniqueNpcsItem)
                {
                    sb.AppendLine("RemovedUniqueNpcs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RemovedUniqueNpcsItem.Overall);
                        if (RemovedUniqueNpcsItem.Specific != null)
                        {
                            foreach (var subItem in RemovedUniqueNpcsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AddedSpecialReferences is {} AddedSpecialReferencesItem)
                {
                    sb.AppendLine("AddedSpecialReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedSpecialReferencesItem.Overall);
                        if (AddedSpecialReferencesItem.Specific != null)
                        {
                            foreach (var subItem in AddedSpecialReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MasterSpecialReferences is {} MasterSpecialReferencesItem)
                {
                    sb.AppendLine("MasterSpecialReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterSpecialReferencesItem.Overall);
                        if (MasterSpecialReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterSpecialReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RemovedSpecialReferences is {} RemovedSpecialReferencesItem)
                {
                    sb.AppendLine("RemovedSpecialReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RemovedSpecialReferencesItem.Overall);
                        if (RemovedSpecialReferencesItem.Specific != null)
                        {
                            foreach (var subItem in RemovedSpecialReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MasterWorldspaceCells is {} MasterWorldspaceCellsItem)
                {
                    sb.AppendLine("MasterWorldspaceCells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterWorldspaceCellsItem.Overall);
                        if (MasterWorldspaceCellsItem.Specific != null)
                        {
                            foreach (var subItem in MasterWorldspaceCellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (AddedInitiallyDisabledReferences is {} AddedInitiallyDisabledReferencesItem)
                {
                    sb.AppendLine("AddedInitiallyDisabledReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedInitiallyDisabledReferencesItem.Overall);
                        if (AddedInitiallyDisabledReferencesItem.Specific != null)
                        {
                            foreach (var subItem in AddedInitiallyDisabledReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MasterInitiallyDisabledReferences is {} MasterInitiallyDisabledReferencesItem)
                {
                    sb.AppendLine("MasterInitiallyDisabledReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterInitiallyDisabledReferencesItem.Overall);
                        if (MasterInitiallyDisabledReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterInitiallyDisabledReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AddedEnablePointReferences is {} AddedEnablePointReferencesItem)
                {
                    sb.AppendLine("AddedEnablePointReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AddedEnablePointReferencesItem.Overall);
                        if (AddedEnablePointReferencesItem.Specific != null)
                        {
                            foreach (var subItem in AddedEnablePointReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MasterEnablePointReferences is {} MasterEnablePointReferencesItem)
                {
                    sb.AppendLine("MasterEnablePointReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterEnablePointReferencesItem.Overall);
                        if (MasterEnablePointReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterEnablePointReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties2 is {} Properties2Item)
                {
                    sb.AppendLine("Properties2 =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(Properties2Item.Overall);
                        if (Properties2Item.Specific != null)
                        {
                            foreach (var subItem in Properties2Item.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Faction?.Print(sb);
                {
                    sb.AppendItem(ParentLocation, "ParentLocation");
                }
                {
                    sb.AppendItem(NAM1, "NAM1");
                }
                {
                    sb.AppendItem(UnreportedCrimeFaction, "UnreportedCrimeFaction");
                }
                {
                    sb.AppendItem(WorldLocationMarkerRef, "WorldLocationMarkerRef");
                }
                {
                    sb.AppendItem(WorldLocationRadius, "WorldLocationRadius");
                }
                {
                    sb.AppendItem(ActorFadeMult, "ActorFadeMult");
                }
                {
                    sb.AppendItem(TNAM, "TNAM");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(StarID, "StarID");
                }
                {
                    sb.AppendItem(PlanetID, "PlanetID");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.AddedPersistLocationReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AddedPersistLocationReferences?.Overall, rhs.AddedPersistLocationReferences?.Overall), Noggog.ExceptionExt.Combine(this.AddedPersistLocationReferences?.Specific, rhs.AddedPersistLocationReferences?.Specific));
                ret.MasterPersistLocationReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterPersistLocationReferences?.Overall, rhs.MasterPersistLocationReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterPersistLocationReferences?.Specific, rhs.MasterPersistLocationReferences?.Specific));
                ret.RemovedPersistLocationReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RemovedPersistLocationReferences?.Overall, rhs.RemovedPersistLocationReferences?.Overall), Noggog.ExceptionExt.Combine(this.RemovedPersistLocationReferences?.Specific, rhs.RemovedPersistLocationReferences?.Specific));
                ret.AddedUniqueBaseForms = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AddedUniqueBaseForms?.Overall, rhs.AddedUniqueBaseForms?.Overall), Noggog.ExceptionExt.Combine(this.AddedUniqueBaseForms?.Specific, rhs.AddedUniqueBaseForms?.Specific));
                ret.LocationCellUniqueReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUniqueReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellUniqueReferences?.Overall, rhs.LocationCellUniqueReferences?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellUniqueReferences?.Specific, rhs.LocationCellUniqueReferences?.Specific));
                ret.RemovedUniqueBaseForms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RemovedUniqueBaseForms?.Overall, rhs.RemovedUniqueBaseForms?.Overall), Noggog.ExceptionExt.Combine(this.RemovedUniqueBaseForms?.Specific, rhs.RemovedUniqueBaseForms?.Specific));
                ret.AddedUniqueNpcs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AddedUniqueNpcs?.Overall, rhs.AddedUniqueNpcs?.Overall), Noggog.ExceptionExt.Combine(this.AddedUniqueNpcs?.Specific, rhs.AddedUniqueNpcs?.Specific));
                ret.MasterUniqueNpcs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterUniqueNpcs?.Overall, rhs.MasterUniqueNpcs?.Overall), Noggog.ExceptionExt.Combine(this.MasterUniqueNpcs?.Specific, rhs.MasterUniqueNpcs?.Specific));
                ret.RemovedUniqueNpcs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RemovedUniqueNpcs?.Overall, rhs.RemovedUniqueNpcs?.Overall), Noggog.ExceptionExt.Combine(this.RemovedUniqueNpcs?.Specific, rhs.RemovedUniqueNpcs?.Specific));
                ret.AddedSpecialReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AddedSpecialReferences?.Overall, rhs.AddedSpecialReferences?.Overall), Noggog.ExceptionExt.Combine(this.AddedSpecialReferences?.Specific, rhs.AddedSpecialReferences?.Specific));
                ret.MasterSpecialReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterSpecialReferences?.Overall, rhs.MasterSpecialReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterSpecialReferences?.Specific, rhs.MasterSpecialReferences?.Specific));
                ret.RemovedSpecialReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RemovedSpecialReferences?.Overall, rhs.RemovedSpecialReferences?.Overall), Noggog.ExceptionExt.Combine(this.RemovedSpecialReferences?.Specific, rhs.RemovedSpecialReferences?.Specific));
                ret.MasterWorldspaceCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterWorldspaceCells?.Overall, rhs.MasterWorldspaceCells?.Overall), Noggog.ExceptionExt.Combine(this.MasterWorldspaceCells?.Specific, rhs.MasterWorldspaceCells?.Specific));
                ret.AddedInitiallyDisabledReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AddedInitiallyDisabledReferences?.Overall, rhs.AddedInitiallyDisabledReferences?.Overall), Noggog.ExceptionExt.Combine(this.AddedInitiallyDisabledReferences?.Specific, rhs.AddedInitiallyDisabledReferences?.Specific));
                ret.MasterInitiallyDisabledReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MasterInitiallyDisabledReferences?.Overall, rhs.MasterInitiallyDisabledReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterInitiallyDisabledReferences?.Specific, rhs.MasterInitiallyDisabledReferences?.Specific));
                ret.AddedEnablePointReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.AddedEnablePointReferences?.Overall, rhs.AddedEnablePointReferences?.Overall), Noggog.ExceptionExt.Combine(this.AddedEnablePointReferences?.Specific, rhs.AddedEnablePointReferences?.Specific));
                ret.MasterEnablePointReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterEnablePointReferences?.Overall, rhs.MasterEnablePointReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterEnablePointReferences?.Specific, rhs.MasterEnablePointReferences?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties2 = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties2?.Overall, rhs.Properties2?.Overall), Noggog.ExceptionExt.Combine(this.Properties2?.Specific, rhs.Properties2?.Specific));
                ret.Faction = this.Faction.Combine(rhs.Faction, (l, r) => l.Combine(r));
                ret.ParentLocation = this.ParentLocation.Combine(rhs.ParentLocation);
                ret.NAM1 = this.NAM1.Combine(rhs.NAM1);
                ret.UnreportedCrimeFaction = this.UnreportedCrimeFaction.Combine(rhs.UnreportedCrimeFaction);
                ret.WorldLocationMarkerRef = this.WorldLocationMarkerRef.Combine(rhs.WorldLocationMarkerRef);
                ret.WorldLocationRadius = this.WorldLocationRadius.Combine(rhs.WorldLocationRadius);
                ret.ActorFadeMult = this.ActorFadeMult.Combine(rhs.ActorFadeMult);
                ret.TNAM = this.TNAM.Combine(rhs.TNAM);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.StarID = this.StarID.Combine(rhs.StarID);
                ret.PlanetID = this.PlanetID.Combine(rhs.PlanetID);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public ObjectProperty.TranslationMask? Properties;
            public LocationReference.TranslationMask? AddedPersistLocationReferences;
            public LocationReference.TranslationMask? MasterPersistLocationReferences;
            public bool RemovedPersistLocationReferences;
            public LocationCellUniqueReference.TranslationMask? AddedUniqueBaseForms;
            public LocationCellUniqueReference.TranslationMask? LocationCellUniqueReferences;
            public bool RemovedUniqueBaseForms;
            public LocationCellUnique.TranslationMask? AddedUniqueNpcs;
            public LocationCellUnique.TranslationMask? MasterUniqueNpcs;
            public bool RemovedUniqueNpcs;
            public LocationCellStaticReference.TranslationMask? AddedSpecialReferences;
            public LocationCellStaticReference.TranslationMask? MasterSpecialReferences;
            public bool RemovedSpecialReferences;
            public LocationCoordinate.TranslationMask? MasterWorldspaceCells;
            public bool AddedInitiallyDisabledReferences;
            public bool MasterInitiallyDisabledReferences;
            public LocationCellEnablePoint.TranslationMask? AddedEnablePointReferences;
            public LocationCellEnablePoint.TranslationMask? MasterEnablePointReferences;
            public bool Name;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties2;
            public LocationFaction.TranslationMask? Faction;
            public bool ParentLocation;
            public bool NAM1;
            public bool UnreportedCrimeFaction;
            public bool WorldLocationMarkerRef;
            public bool WorldLocationRadius;
            public bool ActorFadeMult;
            public bool TNAM;
            public bool Color;
            public bool StarID;
            public bool PlanetID;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.RemovedPersistLocationReferences = defaultOn;
                this.RemovedUniqueBaseForms = defaultOn;
                this.RemovedUniqueNpcs = defaultOn;
                this.RemovedSpecialReferences = defaultOn;
                this.AddedInitiallyDisabledReferences = defaultOn;
                this.MasterInitiallyDisabledReferences = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.ParentLocation = defaultOn;
                this.NAM1 = defaultOn;
                this.UnreportedCrimeFaction = defaultOn;
                this.WorldLocationMarkerRef = defaultOn;
                this.WorldLocationRadius = defaultOn;
                this.ActorFadeMult = defaultOn;
                this.TNAM = defaultOn;
                this.Color = defaultOn;
                this.StarID = defaultOn;
                this.PlanetID = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((AddedPersistLocationReferences == null ? DefaultOn : !AddedPersistLocationReferences.GetCrystal().CopyNothing, AddedPersistLocationReferences?.GetCrystal()));
                ret.Add((MasterPersistLocationReferences == null ? DefaultOn : !MasterPersistLocationReferences.GetCrystal().CopyNothing, MasterPersistLocationReferences?.GetCrystal()));
                ret.Add((RemovedPersistLocationReferences, null));
                ret.Add((AddedUniqueBaseForms == null ? DefaultOn : !AddedUniqueBaseForms.GetCrystal().CopyNothing, AddedUniqueBaseForms?.GetCrystal()));
                ret.Add((LocationCellUniqueReferences == null ? DefaultOn : !LocationCellUniqueReferences.GetCrystal().CopyNothing, LocationCellUniqueReferences?.GetCrystal()));
                ret.Add((RemovedUniqueBaseForms, null));
                ret.Add((AddedUniqueNpcs == null ? DefaultOn : !AddedUniqueNpcs.GetCrystal().CopyNothing, AddedUniqueNpcs?.GetCrystal()));
                ret.Add((MasterUniqueNpcs == null ? DefaultOn : !MasterUniqueNpcs.GetCrystal().CopyNothing, MasterUniqueNpcs?.GetCrystal()));
                ret.Add((RemovedUniqueNpcs, null));
                ret.Add((AddedSpecialReferences == null ? DefaultOn : !AddedSpecialReferences.GetCrystal().CopyNothing, AddedSpecialReferences?.GetCrystal()));
                ret.Add((MasterSpecialReferences == null ? DefaultOn : !MasterSpecialReferences.GetCrystal().CopyNothing, MasterSpecialReferences?.GetCrystal()));
                ret.Add((RemovedSpecialReferences, null));
                ret.Add((MasterWorldspaceCells == null ? DefaultOn : !MasterWorldspaceCells.GetCrystal().CopyNothing, MasterWorldspaceCells?.GetCrystal()));
                ret.Add((AddedInitiallyDisabledReferences, null));
                ret.Add((MasterInitiallyDisabledReferences, null));
                ret.Add((AddedEnablePointReferences == null ? DefaultOn : !AddedEnablePointReferences.GetCrystal().CopyNothing, AddedEnablePointReferences?.GetCrystal()));
                ret.Add((MasterEnablePointReferences == null ? DefaultOn : !MasterEnablePointReferences.GetCrystal().CopyNothing, MasterEnablePointReferences?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((Properties2 == null ? DefaultOn : !Properties2.GetCrystal().CopyNothing, Properties2?.GetCrystal()));
                ret.Add((Faction != null ? Faction.OnOverall : DefaultOn, Faction?.GetCrystal()));
                ret.Add((ParentLocation, null));
                ret.Add((NAM1, null));
                ret.Add((UnreportedCrimeFaction, null));
                ret.Add((WorldLocationMarkerRef, null));
                ret.Add((WorldLocationRadius, null));
                ret.Add((ActorFadeMult, null));
                ret.Add((TNAM, null));
                ret.Add((Color, null));
                ret.Add((StarID, null));
                ret.Add((PlanetID, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Location_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationSetterCommon.Instance.RemapLinks(this, mapping);
        public Location(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Location(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Location(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Location(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Location(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Location>.ToString(this);
        }

        protected override Type LinkType => typeof(ILocation);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LocationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => LocationSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => LocationSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => LocationSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILocationGetter rhs) return false;
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationGetter? obj)
        {
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCommon)((ILocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Location CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Location();
            ((LocationSetterCommon)((ILocationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Location item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LocationSetterCommon)((ILocationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Location GetNew()
        {
            return new Location();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocation :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILocationGetter,
        ILoquiObjectSetter<ILocationInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new ExtendedList<LocationReference>? AddedPersistLocationReferences { get; set; }
        new ExtendedList<LocationReference>? MasterPersistLocationReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedPersistLocationReferences { get; set; }
        new ExtendedList<LocationCellUniqueReference>? AddedUniqueBaseForms { get; set; }
        new ExtendedList<LocationCellUniqueReference>? LocationCellUniqueReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>? RemovedUniqueBaseForms { get; set; }
        new ExtendedList<LocationCellUnique>? AddedUniqueNpcs { get; set; }
        new ExtendedList<LocationCellUnique>? MasterUniqueNpcs { get; set; }
        new ExtendedList<IFormLinkGetter<INpcGetter>>? RemovedUniqueNpcs { get; set; }
        new ExtendedList<LocationCellStaticReference>? AddedSpecialReferences { get; set; }
        new ExtendedList<LocationCellStaticReference>? MasterSpecialReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedSpecialReferences { get; set; }
        new ExtendedList<LocationCoordinate> MasterWorldspaceCells { get; }
        new ExtendedList<IFormLinkGetter<IPlacedGetter>>? AddedInitiallyDisabledReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedGetter>>? MasterInitiallyDisabledReferences { get; set; }
        new ExtendedList<LocationCellEnablePoint>? AddedEnablePointReferences { get; set; }
        new ExtendedList<LocationCellEnablePoint>? MasterEnablePointReferences { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties2 { get; set; }
        new LocationFaction? Faction { get; set; }
        new IFormLinkNullable<ILocationGetter> ParentLocation { get; set; }
        new IFormLinkNullable<IMusicTypeGetter> NAM1 { get; set; }
        new IFormLinkNullable<IFactionGetter> UnreportedCrimeFaction { get; set; }
        new IFormLinkNullable<IPlacedSimpleGetter> WorldLocationMarkerRef { get; set; }
        new Single? WorldLocationRadius { get; set; }
        new Single? ActorFadeMult { get; set; }
        new Single? TNAM { get; set; }
        new Color? Color { get; set; }
        new Int32? StarID { get; set; }
        new Int32? PlanetID { get; set; }
        #region Mutagen
        new Location.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILocationInternal :
        IStarfieldMajorRecordInternal,
        ILocation,
        ILocationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.LCTN)]
    public partial interface ILocationGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ILocationGetter>,
        IMapsToGetter<ILocationGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IReadOnlyList<ILocationReferenceGetter>? AddedPersistLocationReferences { get; }
        IReadOnlyList<ILocationReferenceGetter>? MasterPersistLocationReferences { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedPersistLocationReferences { get; }
        IReadOnlyList<ILocationCellUniqueReferenceGetter>? AddedUniqueBaseForms { get; }
        IReadOnlyList<ILocationCellUniqueReferenceGetter>? LocationCellUniqueReferences { get; }
        IReadOnlyList<IFormLinkGetter<IGenericBaseFormGetter>>? RemovedUniqueBaseForms { get; }
        IReadOnlyList<ILocationCellUniqueGetter>? AddedUniqueNpcs { get; }
        IReadOnlyList<ILocationCellUniqueGetter>? MasterUniqueNpcs { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? RemovedUniqueNpcs { get; }
        IReadOnlyList<ILocationCellStaticReferenceGetter>? AddedSpecialReferences { get; }
        IReadOnlyList<ILocationCellStaticReferenceGetter>? MasterSpecialReferences { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedSpecialReferences { get; }
        IReadOnlyList<ILocationCoordinateGetter> MasterWorldspaceCells { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? AddedInitiallyDisabledReferences { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? MasterInitiallyDisabledReferences { get; }
        IReadOnlyList<ILocationCellEnablePointGetter>? AddedEnablePointReferences { get; }
        IReadOnlyList<ILocationCellEnablePointGetter>? MasterEnablePointReferences { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties2 { get; }
        ILocationFactionGetter? Faction { get; }
        IFormLinkNullableGetter<ILocationGetter> ParentLocation { get; }
        IFormLinkNullableGetter<IMusicTypeGetter> NAM1 { get; }
        IFormLinkNullableGetter<IFactionGetter> UnreportedCrimeFaction { get; }
        IFormLinkNullableGetter<IPlacedSimpleGetter> WorldLocationMarkerRef { get; }
        Single? WorldLocationRadius { get; }
        Single? ActorFadeMult { get; }
        Single? TNAM { get; }
        Color? Color { get; }
        Int32? StarID { get; }
        Int32? PlanetID { get; }

        #region Mutagen
        Location.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LocationMixIn
    {
        public static void Clear(this ILocationInternal item)
        {
            ((LocationSetterCommon)((ILocationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Location.Mask<bool> GetEqualsMask(
            this ILocationGetter item,
            ILocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILocationGetter item,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILocationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocationGetter item,
            ILocationGetter rhs,
            Location.TranslationMask? equalsMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocationInternal lhs,
            ILocationGetter rhs,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationSetterTranslationCommon)((ILocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Location.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationInternal lhs,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationSetterTranslationCommon)((ILocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Location Duplicate(
            this ILocationGetter item,
            FormKey formKey,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Location Duplicate(
            this ILocationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LocationSetterCommon)((ILocationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Location_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Properties = 8,
        AddedPersistLocationReferences = 9,
        MasterPersistLocationReferences = 10,
        RemovedPersistLocationReferences = 11,
        AddedUniqueBaseForms = 12,
        LocationCellUniqueReferences = 13,
        RemovedUniqueBaseForms = 14,
        AddedUniqueNpcs = 15,
        MasterUniqueNpcs = 16,
        RemovedUniqueNpcs = 17,
        AddedSpecialReferences = 18,
        MasterSpecialReferences = 19,
        RemovedSpecialReferences = 20,
        MasterWorldspaceCells = 21,
        AddedInitiallyDisabledReferences = 22,
        MasterInitiallyDisabledReferences = 23,
        AddedEnablePointReferences = 24,
        MasterEnablePointReferences = 25,
        Name = 26,
        Keywords = 27,
        Properties2 = 28,
        Faction = 29,
        ParentLocation = 30,
        NAM1 = 31,
        UnreportedCrimeFaction = 32,
        WorldLocationMarkerRef = 33,
        WorldLocationRadius = 34,
        ActorFadeMult = 35,
        TNAM = 36,
        Color = 37,
        StarID = 38,
        PlanetID = 39,
    }
    #endregion

    #region Registration
    internal partial class Location_Registration : ILoquiRegistration
    {
        public static readonly Location_Registration Instance = new Location_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 33;

        public const ushort FieldCount = 40;

        public static readonly Type MaskType = typeof(Location.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Location.ErrorMask);

        public static readonly Type ClassType = typeof(Location);

        public static readonly Type GetterType = typeof(ILocationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocation);

        public static readonly Type? InternalSetterType = typeof(ILocationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Location";

        public const string Name = "Location";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LCTN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LCTN);
            var all = RecordCollection.Factory(
                RecordTypes.LCTN,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.PRPS,
                RecordTypes.ACPR,
                RecordTypes.LCPR,
                RecordTypes.RCPR,
                RecordTypes.ACUR,
                RecordTypes.LCUR,
                RecordTypes.RCUR,
                RecordTypes.ACUN,
                RecordTypes.LCUN,
                RecordTypes.ACSR,
                RecordTypes.LCSR,
                RecordTypes.RCSR,
                RecordTypes.LCEC,
                RecordTypes.ACID,
                RecordTypes.LCID,
                RecordTypes.ACEP,
                RecordTypes.LCEP,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DATA,
                RecordTypes.PNAM,
                RecordTypes.NAM1,
                RecordTypes.FNAM,
                RecordTypes.MNAM,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.TNAM,
                RecordTypes.CNAM,
                RecordTypes.XNAM,
                RecordTypes.YNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LocationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LocationSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly LocationSetterCommon Instance = new LocationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Properties = null;
            item.AddedPersistLocationReferences = null;
            item.MasterPersistLocationReferences = null;
            item.RemovedPersistLocationReferences = null;
            item.AddedUniqueBaseForms = null;
            item.LocationCellUniqueReferences = null;
            item.RemovedUniqueBaseForms = null;
            item.AddedUniqueNpcs = null;
            item.MasterUniqueNpcs = null;
            item.RemovedUniqueNpcs = null;
            item.AddedSpecialReferences = null;
            item.MasterSpecialReferences = null;
            item.RemovedSpecialReferences = null;
            item.MasterWorldspaceCells.Clear();
            item.AddedInitiallyDisabledReferences = null;
            item.MasterInitiallyDisabledReferences = null;
            item.AddedEnablePointReferences = null;
            item.MasterEnablePointReferences = null;
            item.Name = default;
            item.Keywords = null;
            item.Properties2 = null;
            item.Faction = null;
            item.ParentLocation.Clear();
            item.NAM1.Clear();
            item.UnreportedCrimeFaction.Clear();
            item.WorldLocationMarkerRef.Clear();
            item.WorldLocationRadius = default;
            item.ActorFadeMult = default;
            item.TNAM = default;
            item.Color = default;
            item.StarID = default;
            item.PlanetID = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ILocationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILocationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILocation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.AddedPersistLocationReferences?.RemapLinks(mapping);
            obj.MasterPersistLocationReferences?.RemapLinks(mapping);
            obj.RemovedPersistLocationReferences?.RemapLinks(mapping);
            obj.AddedUniqueBaseForms?.RemapLinks(mapping);
            obj.LocationCellUniqueReferences?.RemapLinks(mapping);
            obj.RemovedUniqueBaseForms?.RemapLinks(mapping);
            obj.AddedUniqueNpcs?.RemapLinks(mapping);
            obj.MasterUniqueNpcs?.RemapLinks(mapping);
            obj.RemovedUniqueNpcs?.RemapLinks(mapping);
            obj.AddedSpecialReferences?.RemapLinks(mapping);
            obj.MasterSpecialReferences?.RemapLinks(mapping);
            obj.RemovedSpecialReferences?.RemapLinks(mapping);
            obj.MasterWorldspaceCells.RemapLinks(mapping);
            obj.AddedInitiallyDisabledReferences?.RemapLinks(mapping);
            obj.MasterInitiallyDisabledReferences?.RemapLinks(mapping);
            obj.AddedEnablePointReferences?.RemapLinks(mapping);
            obj.MasterEnablePointReferences?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties2?.RemapLinks(mapping);
            obj.Faction?.RemapLinks(mapping);
            obj.ParentLocation.Relink(mapping);
            obj.NAM1.Relink(mapping);
            obj.UnreportedCrimeFaction.Relink(mapping);
            obj.WorldLocationMarkerRef.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ILocation obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ILocation obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILocationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LocationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LocationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Location)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Location)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LocationCommon : StarfieldMajorRecordCommon
    {
        public new static readonly LocationCommon Instance = new LocationCommon();

        public Location.Mask<bool> GetEqualsMask(
            ILocationGetter item,
            ILocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Location.Mask<bool>(false);
            ((LocationCommon)((ILocationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationGetter item,
            ILocationGetter rhs,
            Location.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AddedPersistLocationReferences = item.AddedPersistLocationReferences.CollectionEqualsHelper(
                rhs.AddedPersistLocationReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MasterPersistLocationReferences = item.MasterPersistLocationReferences.CollectionEqualsHelper(
                rhs.MasterPersistLocationReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RemovedPersistLocationReferences = item.RemovedPersistLocationReferences.CollectionEqualsHelper(
                rhs.RemovedPersistLocationReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.AddedUniqueBaseForms = item.AddedUniqueBaseForms.CollectionEqualsHelper(
                rhs.AddedUniqueBaseForms,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellUniqueReferences = item.LocationCellUniqueReferences.CollectionEqualsHelper(
                rhs.LocationCellUniqueReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RemovedUniqueBaseForms = item.RemovedUniqueBaseForms.CollectionEqualsHelper(
                rhs.RemovedUniqueBaseForms,
                (l, r) => object.Equals(l, r),
                include);
            ret.AddedUniqueNpcs = item.AddedUniqueNpcs.CollectionEqualsHelper(
                rhs.AddedUniqueNpcs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MasterUniqueNpcs = item.MasterUniqueNpcs.CollectionEqualsHelper(
                rhs.MasterUniqueNpcs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RemovedUniqueNpcs = item.RemovedUniqueNpcs.CollectionEqualsHelper(
                rhs.RemovedUniqueNpcs,
                (l, r) => object.Equals(l, r),
                include);
            ret.AddedSpecialReferences = item.AddedSpecialReferences.CollectionEqualsHelper(
                rhs.AddedSpecialReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MasterSpecialReferences = item.MasterSpecialReferences.CollectionEqualsHelper(
                rhs.MasterSpecialReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RemovedSpecialReferences = item.RemovedSpecialReferences.CollectionEqualsHelper(
                rhs.RemovedSpecialReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.MasterWorldspaceCells = item.MasterWorldspaceCells.CollectionEqualsHelper(
                rhs.MasterWorldspaceCells,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AddedInitiallyDisabledReferences = item.AddedInitiallyDisabledReferences.CollectionEqualsHelper(
                rhs.AddedInitiallyDisabledReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.MasterInitiallyDisabledReferences = item.MasterInitiallyDisabledReferences.CollectionEqualsHelper(
                rhs.MasterInitiallyDisabledReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.AddedEnablePointReferences = item.AddedEnablePointReferences.CollectionEqualsHelper(
                rhs.AddedEnablePointReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MasterEnablePointReferences = item.MasterEnablePointReferences.CollectionEqualsHelper(
                rhs.MasterEnablePointReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties2 = item.Properties2.CollectionEqualsHelper(
                rhs.Properties2,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Faction = EqualsMaskHelper.EqualsHelper(
                item.Faction,
                rhs.Faction,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ParentLocation = item.ParentLocation.Equals(rhs.ParentLocation);
            ret.NAM1 = item.NAM1.Equals(rhs.NAM1);
            ret.UnreportedCrimeFaction = item.UnreportedCrimeFaction.Equals(rhs.UnreportedCrimeFaction);
            ret.WorldLocationMarkerRef = item.WorldLocationMarkerRef.Equals(rhs.WorldLocationMarkerRef);
            ret.WorldLocationRadius = item.WorldLocationRadius.EqualsWithin(rhs.WorldLocationRadius);
            ret.ActorFadeMult = item.ActorFadeMult.EqualsWithin(rhs.ActorFadeMult);
            ret.TNAM = item.TNAM.EqualsWithin(rhs.TNAM);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.StarID = item.StarID == rhs.StarID;
            ret.PlanetID = item.PlanetID == rhs.PlanetID;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILocationGetter item,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILocationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Location =>");
            }
            else
            {
                sb.AppendLine($"{name} (Location) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILocationGetter item,
            StructuredStringBuilder sb,
            Location.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.AddedPersistLocationReferences?.Overall ?? true)
                && item.AddedPersistLocationReferences is {} AddedPersistLocationReferencesItem)
            {
                sb.AppendLine("AddedPersistLocationReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedPersistLocationReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MasterPersistLocationReferences?.Overall ?? true)
                && item.MasterPersistLocationReferences is {} MasterPersistLocationReferencesItem)
            {
                sb.AppendLine("MasterPersistLocationReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterPersistLocationReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RemovedPersistLocationReferences?.Overall ?? true)
                && item.RemovedPersistLocationReferences is {} RemovedPersistLocationReferencesItem)
            {
                sb.AppendLine("RemovedPersistLocationReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RemovedPersistLocationReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.AddedUniqueBaseForms?.Overall ?? true)
                && item.AddedUniqueBaseForms is {} AddedUniqueBaseFormsItem)
            {
                sb.AppendLine("AddedUniqueBaseForms =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedUniqueBaseFormsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LocationCellUniqueReferences?.Overall ?? true)
                && item.LocationCellUniqueReferences is {} LocationCellUniqueReferencesItem)
            {
                sb.AppendLine("LocationCellUniqueReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellUniqueReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RemovedUniqueBaseForms?.Overall ?? true)
                && item.RemovedUniqueBaseForms is {} RemovedUniqueBaseFormsItem)
            {
                sb.AppendLine("RemovedUniqueBaseForms =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RemovedUniqueBaseFormsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.AddedUniqueNpcs?.Overall ?? true)
                && item.AddedUniqueNpcs is {} AddedUniqueNpcsItem)
            {
                sb.AppendLine("AddedUniqueNpcs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedUniqueNpcsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MasterUniqueNpcs?.Overall ?? true)
                && item.MasterUniqueNpcs is {} MasterUniqueNpcsItem)
            {
                sb.AppendLine("MasterUniqueNpcs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterUniqueNpcsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RemovedUniqueNpcs?.Overall ?? true)
                && item.RemovedUniqueNpcs is {} RemovedUniqueNpcsItem)
            {
                sb.AppendLine("RemovedUniqueNpcs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RemovedUniqueNpcsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.AddedSpecialReferences?.Overall ?? true)
                && item.AddedSpecialReferences is {} AddedSpecialReferencesItem)
            {
                sb.AppendLine("AddedSpecialReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedSpecialReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MasterSpecialReferences?.Overall ?? true)
                && item.MasterSpecialReferences is {} MasterSpecialReferencesItem)
            {
                sb.AppendLine("MasterSpecialReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterSpecialReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RemovedSpecialReferences?.Overall ?? true)
                && item.RemovedSpecialReferences is {} RemovedSpecialReferencesItem)
            {
                sb.AppendLine("RemovedSpecialReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RemovedSpecialReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.MasterWorldspaceCells?.Overall ?? true)
            {
                sb.AppendLine("MasterWorldspaceCells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MasterWorldspaceCells)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.AddedInitiallyDisabledReferences?.Overall ?? true)
                && item.AddedInitiallyDisabledReferences is {} AddedInitiallyDisabledReferencesItem)
            {
                sb.AppendLine("AddedInitiallyDisabledReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedInitiallyDisabledReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.MasterInitiallyDisabledReferences?.Overall ?? true)
                && item.MasterInitiallyDisabledReferences is {} MasterInitiallyDisabledReferencesItem)
            {
                sb.AppendLine("MasterInitiallyDisabledReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterInitiallyDisabledReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.AddedEnablePointReferences?.Overall ?? true)
                && item.AddedEnablePointReferences is {} AddedEnablePointReferencesItem)
            {
                sb.AppendLine("AddedEnablePointReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AddedEnablePointReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MasterEnablePointReferences?.Overall ?? true)
                && item.MasterEnablePointReferences is {} MasterEnablePointReferencesItem)
            {
                sb.AppendLine("MasterEnablePointReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterEnablePointReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties2?.Overall ?? true)
                && item.Properties2 is {} Properties2Item)
            {
                sb.AppendLine("Properties2 =>");
                using (sb.Brace())
                {
                    foreach (var subItem in Properties2Item)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Faction?.Overall ?? true)
                && item.Faction is {} FactionItem)
            {
                FactionItem?.Print(sb, "Faction");
            }
            if (printMask?.ParentLocation ?? true)
            {
                sb.AppendItem(item.ParentLocation.FormKeyNullable, "ParentLocation");
            }
            if (printMask?.NAM1 ?? true)
            {
                sb.AppendItem(item.NAM1.FormKeyNullable, "NAM1");
            }
            if (printMask?.UnreportedCrimeFaction ?? true)
            {
                sb.AppendItem(item.UnreportedCrimeFaction.FormKeyNullable, "UnreportedCrimeFaction");
            }
            if (printMask?.WorldLocationMarkerRef ?? true)
            {
                sb.AppendItem(item.WorldLocationMarkerRef.FormKeyNullable, "WorldLocationMarkerRef");
            }
            if ((printMask?.WorldLocationRadius ?? true)
                && item.WorldLocationRadius is {} WorldLocationRadiusItem)
            {
                sb.AppendItem(WorldLocationRadiusItem, "WorldLocationRadius");
            }
            if ((printMask?.ActorFadeMult ?? true)
                && item.ActorFadeMult is {} ActorFadeMultItem)
            {
                sb.AppendItem(ActorFadeMultItem, "ActorFadeMult");
            }
            if ((printMask?.TNAM ?? true)
                && item.TNAM is {} TNAMItem)
            {
                sb.AppendItem(TNAMItem, "TNAM");
            }
            if ((printMask?.Color ?? true)
                && item.Color is {} ColorItem)
            {
                sb.AppendItem(ColorItem, "Color");
            }
            if ((printMask?.StarID ?? true)
                && item.StarID is {} StarIDItem)
            {
                sb.AppendItem(StarIDItem, "StarID");
            }
            if ((printMask?.PlanetID ?? true)
                && item.PlanetID is {} PlanetIDItem)
            {
                sb.AppendItem(PlanetIDItem, "PlanetID");
            }
        }
        
        public static Location_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Location_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Location_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Location_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Location_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationGetter? lhs,
            ILocationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedPersistLocationReferences) ?? true))
            {
                if (!lhs.AddedPersistLocationReferences.SequenceEqualNullable(rhs.AddedPersistLocationReferences, (l, r) => ((LocationReferenceCommon)((ILocationReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.AddedPersistLocationReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterPersistLocationReferences) ?? true))
            {
                if (!lhs.MasterPersistLocationReferences.SequenceEqualNullable(rhs.MasterPersistLocationReferences, (l, r) => ((LocationReferenceCommon)((ILocationReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.MasterPersistLocationReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedPersistLocationReferences) ?? true))
            {
                if (!lhs.RemovedPersistLocationReferences.SequenceEqualNullable(rhs.RemovedPersistLocationReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedUniqueBaseForms) ?? true))
            {
                if (!lhs.AddedUniqueBaseForms.SequenceEqualNullable(rhs.AddedUniqueBaseForms, (l, r) => ((LocationCellUniqueReferenceCommon)((ILocationCellUniqueReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.AddedUniqueBaseForms)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellUniqueReferences) ?? true))
            {
                if (!lhs.LocationCellUniqueReferences.SequenceEqualNullable(rhs.LocationCellUniqueReferences, (l, r) => ((LocationCellUniqueReferenceCommon)((ILocationCellUniqueReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellUniqueReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedUniqueBaseForms) ?? true))
            {
                if (!lhs.RemovedUniqueBaseForms.SequenceEqualNullable(rhs.RemovedUniqueBaseForms)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedUniqueNpcs) ?? true))
            {
                if (!lhs.AddedUniqueNpcs.SequenceEqualNullable(rhs.AddedUniqueNpcs, (l, r) => ((LocationCellUniqueCommon)((ILocationCellUniqueGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.AddedUniqueNpcs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterUniqueNpcs) ?? true))
            {
                if (!lhs.MasterUniqueNpcs.SequenceEqualNullable(rhs.MasterUniqueNpcs, (l, r) => ((LocationCellUniqueCommon)((ILocationCellUniqueGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.MasterUniqueNpcs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedUniqueNpcs) ?? true))
            {
                if (!lhs.RemovedUniqueNpcs.SequenceEqualNullable(rhs.RemovedUniqueNpcs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedSpecialReferences) ?? true))
            {
                if (!lhs.AddedSpecialReferences.SequenceEqualNullable(rhs.AddedSpecialReferences, (l, r) => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.AddedSpecialReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterSpecialReferences) ?? true))
            {
                if (!lhs.MasterSpecialReferences.SequenceEqualNullable(rhs.MasterSpecialReferences, (l, r) => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.MasterSpecialReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedSpecialReferences) ?? true))
            {
                if (!lhs.RemovedSpecialReferences.SequenceEqualNullable(rhs.RemovedSpecialReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterWorldspaceCells) ?? true))
            {
                if (!lhs.MasterWorldspaceCells.SequenceEqual(rhs.MasterWorldspaceCells, (l, r) => ((LocationCoordinateCommon)((ILocationCoordinateGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.MasterWorldspaceCells)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedInitiallyDisabledReferences) ?? true))
            {
                if (!lhs.AddedInitiallyDisabledReferences.SequenceEqualNullable(rhs.AddedInitiallyDisabledReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterInitiallyDisabledReferences) ?? true))
            {
                if (!lhs.MasterInitiallyDisabledReferences.SequenceEqualNullable(rhs.MasterInitiallyDisabledReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.AddedEnablePointReferences) ?? true))
            {
                if (!lhs.AddedEnablePointReferences.SequenceEqualNullable(rhs.AddedEnablePointReferences, (l, r) => ((LocationCellEnablePointCommon)((ILocationCellEnablePointGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.AddedEnablePointReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.MasterEnablePointReferences) ?? true))
            {
                if (!lhs.MasterEnablePointReferences.SequenceEqualNullable(rhs.MasterEnablePointReferences, (l, r) => ((LocationCellEnablePointCommon)((ILocationCellEnablePointGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.MasterEnablePointReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Properties2) ?? true))
            {
                if (!lhs.Properties2.SequenceEqualNullable(rhs.Properties2, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.Properties2)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Faction) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Faction, rhs.Faction, out var lhsFaction, out var rhsFaction, out var isFactionEqual))
                {
                    if (!((LocationFactionCommon)((ILocationFactionGetter)lhsFaction).CommonInstance()!).Equals(lhsFaction, rhsFaction, equalsMask?.GetSubCrystal((int)Location_FieldIndex.Faction))) return false;
                }
                else if (!isFactionEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ParentLocation) ?? true))
            {
                if (!lhs.ParentLocation.Equals(rhs.ParentLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.NAM1) ?? true))
            {
                if (!lhs.NAM1.Equals(rhs.NAM1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.UnreportedCrimeFaction) ?? true))
            {
                if (!lhs.UnreportedCrimeFaction.Equals(rhs.UnreportedCrimeFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationMarkerRef) ?? true))
            {
                if (!lhs.WorldLocationMarkerRef.Equals(rhs.WorldLocationMarkerRef)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationRadius) ?? true))
            {
                if (!lhs.WorldLocationRadius.EqualsWithin(rhs.WorldLocationRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorFadeMult) ?? true))
            {
                if (!lhs.ActorFadeMult.EqualsWithin(rhs.ActorFadeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.TNAM) ?? true))
            {
                if (!lhs.TNAM.EqualsWithin(rhs.TNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.StarID) ?? true))
            {
                if (lhs.StarID != rhs.StarID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.PlanetID) ?? true))
            {
                if (lhs.PlanetID != rhs.PlanetID) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILocationGetter?)lhs,
                rhs: rhs as ILocationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILocationGetter?)lhs,
                rhs: rhs as ILocationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILocationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.Properties);
            hash.Add(item.AddedPersistLocationReferences);
            hash.Add(item.MasterPersistLocationReferences);
            hash.Add(item.RemovedPersistLocationReferences);
            hash.Add(item.AddedUniqueBaseForms);
            hash.Add(item.LocationCellUniqueReferences);
            hash.Add(item.RemovedUniqueBaseForms);
            hash.Add(item.AddedUniqueNpcs);
            hash.Add(item.MasterUniqueNpcs);
            hash.Add(item.RemovedUniqueNpcs);
            hash.Add(item.AddedSpecialReferences);
            hash.Add(item.MasterSpecialReferences);
            hash.Add(item.RemovedSpecialReferences);
            hash.Add(item.MasterWorldspaceCells);
            hash.Add(item.AddedInitiallyDisabledReferences);
            hash.Add(item.MasterInitiallyDisabledReferences);
            hash.Add(item.AddedEnablePointReferences);
            hash.Add(item.MasterEnablePointReferences);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties2);
            if (item.Faction is {} Factionitem)
            {
                hash.Add(Factionitem);
            }
            hash.Add(item.ParentLocation);
            hash.Add(item.NAM1);
            hash.Add(item.UnreportedCrimeFaction);
            hash.Add(item.WorldLocationMarkerRef);
            if (item.WorldLocationRadius is {} WorldLocationRadiusitem)
            {
                hash.Add(WorldLocationRadiusitem);
            }
            if (item.ActorFadeMult is {} ActorFadeMultitem)
            {
                hash.Add(ActorFadeMultitem);
            }
            if (item.TNAM is {} TNAMitem)
            {
                hash.Add(TNAMitem);
            }
            if (item.Color is {} Coloritem)
            {
                hash.Add(Coloritem);
            }
            if (item.StarID is {} StarIDitem)
            {
                hash.Add(StarIDitem);
            }
            if (item.PlanetID is {} PlanetIDitem)
            {
                hash.Add(PlanetIDitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Location.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILocationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AddedPersistLocationReferences is {} AddedPersistLocationReferencesItem)
            {
                foreach (var item in AddedPersistLocationReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MasterPersistLocationReferences is {} MasterPersistLocationReferencesItem)
            {
                foreach (var item in MasterPersistLocationReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RemovedPersistLocationReferences is {} RemovedPersistLocationReferencesItem)
            {
                foreach (var item in RemovedPersistLocationReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AddedUniqueBaseForms is {} AddedUniqueBaseFormsItem)
            {
                foreach (var item in AddedUniqueBaseFormsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellUniqueReferences is {} LocationCellUniqueReferencesItem)
            {
                foreach (var item in LocationCellUniqueReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RemovedUniqueBaseForms is {} RemovedUniqueBaseFormsItem)
            {
                foreach (var item in RemovedUniqueBaseFormsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AddedUniqueNpcs is {} AddedUniqueNpcsItem)
            {
                foreach (var item in AddedUniqueNpcsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MasterUniqueNpcs is {} MasterUniqueNpcsItem)
            {
                foreach (var item in MasterUniqueNpcsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RemovedUniqueNpcs is {} RemovedUniqueNpcsItem)
            {
                foreach (var item in RemovedUniqueNpcsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AddedSpecialReferences is {} AddedSpecialReferencesItem)
            {
                foreach (var item in AddedSpecialReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MasterSpecialReferences is {} MasterSpecialReferencesItem)
            {
                foreach (var item in MasterSpecialReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RemovedSpecialReferences is {} RemovedSpecialReferencesItem)
            {
                foreach (var item in RemovedSpecialReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.MasterWorldspaceCells.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.AddedInitiallyDisabledReferences is {} AddedInitiallyDisabledReferencesItem)
            {
                foreach (var item in AddedInitiallyDisabledReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MasterInitiallyDisabledReferences is {} MasterInitiallyDisabledReferencesItem)
            {
                foreach (var item in MasterInitiallyDisabledReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AddedEnablePointReferences is {} AddedEnablePointReferencesItem)
            {
                foreach (var item in AddedEnablePointReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MasterEnablePointReferences is {} MasterEnablePointReferencesItem)
            {
                foreach (var item in MasterEnablePointReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties2 is {} Properties2Item)
            {
                foreach (var item in Properties2Item.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Faction is {} FactionItems)
            {
                foreach (var item in FactionItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ParentLocation, out var ParentLocationInfo))
            {
                yield return ParentLocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.NAM1, out var NAM1Info))
            {
                yield return NAM1Info;
            }
            if (FormLinkInformation.TryFactory(obj.UnreportedCrimeFaction, out var UnreportedCrimeFactionInfo))
            {
                yield return UnreportedCrimeFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.WorldLocationMarkerRef, out var WorldLocationMarkerRefInfo))
            {
                yield return WorldLocationMarkerRefInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ILocationGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Location Duplicate(
            ILocationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Location(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILocationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILocationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LocationSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly LocationSetterTranslationCommon Instance = new LocationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocationInternal item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILocation item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedPersistLocationReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedPersistLocationReferences);
                try
                {
                    if ((rhs.AddedPersistLocationReferences != null))
                    {
                        item.AddedPersistLocationReferences = 
                            rhs.AddedPersistLocationReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationReference>();
                    }
                    else
                    {
                        item.AddedPersistLocationReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterPersistLocationReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterPersistLocationReferences);
                try
                {
                    if ((rhs.MasterPersistLocationReferences != null))
                    {
                        item.MasterPersistLocationReferences = 
                            rhs.MasterPersistLocationReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationReference>();
                    }
                    else
                    {
                        item.MasterPersistLocationReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedPersistLocationReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.RemovedPersistLocationReferences);
                try
                {
                    if ((rhs.RemovedPersistLocationReferences != null))
                    {
                        item.RemovedPersistLocationReferences = 
                            rhs.RemovedPersistLocationReferences
                                .Select(b => (IFormLinkGetter<IPlacedSimpleGetter>)new FormLink<IPlacedSimpleGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    }
                    else
                    {
                        item.RemovedPersistLocationReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedUniqueBaseForms) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedUniqueBaseForms);
                try
                {
                    if ((rhs.AddedUniqueBaseForms != null))
                    {
                        item.AddedUniqueBaseForms = 
                            rhs.AddedUniqueBaseForms
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUniqueReference>();
                    }
                    else
                    {
                        item.AddedUniqueBaseForms = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellUniqueReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellUniqueReferences);
                try
                {
                    if ((rhs.LocationCellUniqueReferences != null))
                    {
                        item.LocationCellUniqueReferences = 
                            rhs.LocationCellUniqueReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUniqueReference>();
                    }
                    else
                    {
                        item.LocationCellUniqueReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedUniqueBaseForms) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.RemovedUniqueBaseForms);
                try
                {
                    if ((rhs.RemovedUniqueBaseForms != null))
                    {
                        item.RemovedUniqueBaseForms = 
                            rhs.RemovedUniqueBaseForms
                                .Select(b => (IFormLinkGetter<IGenericBaseFormGetter>)new FormLink<IGenericBaseFormGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>();
                    }
                    else
                    {
                        item.RemovedUniqueBaseForms = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedUniqueNpcs) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedUniqueNpcs);
                try
                {
                    if ((rhs.AddedUniqueNpcs != null))
                    {
                        item.AddedUniqueNpcs = 
                            rhs.AddedUniqueNpcs
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUnique>();
                    }
                    else
                    {
                        item.AddedUniqueNpcs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterUniqueNpcs) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterUniqueNpcs);
                try
                {
                    if ((rhs.MasterUniqueNpcs != null))
                    {
                        item.MasterUniqueNpcs = 
                            rhs.MasterUniqueNpcs
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUnique>();
                    }
                    else
                    {
                        item.MasterUniqueNpcs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedUniqueNpcs) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.RemovedUniqueNpcs);
                try
                {
                    if ((rhs.RemovedUniqueNpcs != null))
                    {
                        item.RemovedUniqueNpcs = 
                            rhs.RemovedUniqueNpcs
                                .Select(b => (IFormLinkGetter<INpcGetter>)new FormLink<INpcGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<INpcGetter>>();
                    }
                    else
                    {
                        item.RemovedUniqueNpcs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedSpecialReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedSpecialReferences);
                try
                {
                    if ((rhs.AddedSpecialReferences != null))
                    {
                        item.AddedSpecialReferences = 
                            rhs.AddedSpecialReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellStaticReference>();
                    }
                    else
                    {
                        item.AddedSpecialReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterSpecialReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterSpecialReferences);
                try
                {
                    if ((rhs.MasterSpecialReferences != null))
                    {
                        item.MasterSpecialReferences = 
                            rhs.MasterSpecialReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellStaticReference>();
                    }
                    else
                    {
                        item.MasterSpecialReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.RemovedSpecialReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.RemovedSpecialReferences);
                try
                {
                    if ((rhs.RemovedSpecialReferences != null))
                    {
                        item.RemovedSpecialReferences = 
                            rhs.RemovedSpecialReferences
                                .Select(b => (IFormLinkGetter<IPlacedSimpleGetter>)new FormLink<IPlacedSimpleGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    }
                    else
                    {
                        item.RemovedSpecialReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterWorldspaceCells) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterWorldspaceCells);
                try
                {
                    item.MasterWorldspaceCells.SetTo(
                        rhs.MasterWorldspaceCells
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedInitiallyDisabledReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedInitiallyDisabledReferences);
                try
                {
                    if ((rhs.AddedInitiallyDisabledReferences != null))
                    {
                        item.AddedInitiallyDisabledReferences = 
                            rhs.AddedInitiallyDisabledReferences
                                .Select(b => (IFormLinkGetter<IPlacedGetter>)new FormLink<IPlacedGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    }
                    else
                    {
                        item.AddedInitiallyDisabledReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterInitiallyDisabledReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterInitiallyDisabledReferences);
                try
                {
                    if ((rhs.MasterInitiallyDisabledReferences != null))
                    {
                        item.MasterInitiallyDisabledReferences = 
                            rhs.MasterInitiallyDisabledReferences
                                .Select(b => (IFormLinkGetter<IPlacedGetter>)new FormLink<IPlacedGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    }
                    else
                    {
                        item.MasterInitiallyDisabledReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.AddedEnablePointReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.AddedEnablePointReferences);
                try
                {
                    if ((rhs.AddedEnablePointReferences != null))
                    {
                        item.AddedEnablePointReferences = 
                            rhs.AddedEnablePointReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellEnablePoint>();
                    }
                    else
                    {
                        item.AddedEnablePointReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.MasterEnablePointReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.MasterEnablePointReferences);
                try
                {
                    if ((rhs.MasterEnablePointReferences != null))
                    {
                        item.MasterEnablePointReferences = 
                            rhs.MasterEnablePointReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellEnablePoint>();
                    }
                    else
                    {
                        item.MasterEnablePointReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Properties2) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Properties2);
                try
                {
                    if ((rhs.Properties2 != null))
                    {
                        item.Properties2 = 
                            rhs.Properties2
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties2 = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Faction) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Faction);
                try
                {
                    if(rhs.Faction is {} rhsFaction)
                    {
                        item.Faction = rhsFaction.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Location_FieldIndex.Faction));
                    }
                    else
                    {
                        item.Faction = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ParentLocation) ?? true))
            {
                item.ParentLocation.SetTo(rhs.ParentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.NAM1) ?? true))
            {
                item.NAM1.SetTo(rhs.NAM1.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.UnreportedCrimeFaction) ?? true))
            {
                item.UnreportedCrimeFaction.SetTo(rhs.UnreportedCrimeFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationMarkerRef) ?? true))
            {
                item.WorldLocationMarkerRef.SetTo(rhs.WorldLocationMarkerRef.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationRadius) ?? true))
            {
                item.WorldLocationRadius = rhs.WorldLocationRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorFadeMult) ?? true))
            {
                item.ActorFadeMult = rhs.ActorFadeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.TNAM) ?? true))
            {
                item.TNAM = rhs.TNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.StarID) ?? true))
            {
                item.StarID = rhs.StarID;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.PlanetID) ?? true))
            {
                item.PlanetID = rhs.PlanetID;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILocation item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocationInternal)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocation)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocationInternal)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocation)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Location DeepCopy(
            ILocationGetter item,
            Location.TranslationMask? copyMask = null)
        {
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Location DeepCopy(
            ILocationGetter item,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Location.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Location DeepCopy(
            ILocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Location
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Location_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LocationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LocationBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LocationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILocationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.AddedPersistLocationReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACPR),
                transl: (MutagenWriter subWriter, ILocationReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.MasterPersistLocationReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCPR),
                transl: (MutagenWriter subWriter, ILocationReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Write(
                writer: writer,
                items: item.RemovedPersistLocationReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedSimpleGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.AddedUniqueBaseForms,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACUR),
                transl: (MutagenWriter subWriter, ILocationCellUniqueReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellUniqueReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCUR),
                transl: (MutagenWriter subWriter, ILocationCellUniqueReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGenericBaseFormGetter>>.Instance.Write(
                writer: writer,
                items: item.RemovedUniqueBaseForms,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCUR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGenericBaseFormGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueGetter>.Instance.Write(
                writer: writer,
                items: item.AddedUniqueNpcs,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACUN),
                transl: (MutagenWriter subWriter, ILocationCellUniqueGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueGetter>.Instance.Write(
                writer: writer,
                items: item.MasterUniqueNpcs,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCUN),
                transl: (MutagenWriter subWriter, ILocationCellUniqueGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.RemovedUniqueNpcs,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCUR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellStaticReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.AddedSpecialReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACSR),
                transl: (MutagenWriter subWriter, ILocationCellStaticReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellStaticReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellStaticReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.MasterSpecialReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCSR),
                transl: (MutagenWriter subWriter, ILocationCellStaticReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellStaticReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Write(
                writer: writer,
                items: item.RemovedSpecialReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCSR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedSimpleGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCoordinateGetter>.Instance.Write(
                writer: writer,
                items: item.MasterWorldspaceCells,
                transl: (MutagenWriter subWriter, ILocationCoordinateGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    using (HeaderExport.Subrecord(writer, RecordTypes.LCEC))
                    {
                        ((LocationCoordinateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Write(
                writer: writer,
                items: item.AddedInitiallyDisabledReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACID),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Write(
                writer: writer,
                items: item.MasterInitiallyDisabledReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCID),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellEnablePointGetter>.Instance.Write(
                writer: writer,
                items: item.AddedEnablePointReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACEP),
                transl: (MutagenWriter subWriter, ILocationCellEnablePointGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellEnablePointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellEnablePointGetter>.Instance.Write(
                writer: writer,
                items: item.MasterEnablePointReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCEP),
                transl: (MutagenWriter subWriter, ILocationCellEnablePointGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellEnablePointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties2,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Faction is {} FactionItem)
            {
                ((LocationFactionBinaryWriteTranslation)((IBinaryItem)FactionItem).BinaryWriteTranslator).Write(
                    item: FactionItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParentLocation,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM1,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnreportedCrimeFaction,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorldLocationMarkerRef,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WorldLocationRadius,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ActorFadeMult,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.TNAM,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.StarID,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PlanetID,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
        }

        public void Write(
            MutagenWriter writer,
            ILocationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LCTN,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LocationBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly LocationBinaryCreateTranslation Instance = new LocationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LCTN;
        public static ParseResult FillBinaryRecordTypes(
            ILocationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Location_FieldIndex.Components;
                }
                case RecordTypeInts.PRPS:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.Components)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Properties = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                                reader: frame.SpawnWithLength(contentLength),
                                transl: ObjectProperty.TryCreateFromBinary)
                            .CastExtendedList<ObjectProperty>();
                        return new ParseResult((int)Location_FieldIndex.Properties, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.Keywords)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Properties2 = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                                reader: frame.SpawnWithLength(contentLength),
                                transl: ObjectProperty.TryCreateFromBinary)
                            .CastExtendedList<ObjectProperty>();
                        return new ParseResult((int)Location_FieldIndex.Properties2, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.Properties = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                                        reader: frame.SpawnWithLength(contentLength),
                                        transl: ObjectProperty.TryCreateFromBinary)
                                    .CastExtendedList<ObjectProperty>();
                                return new ParseResult((int)Location_FieldIndex.Properties, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.Properties2 = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                                        reader: frame.SpawnWithLength(contentLength),
                                        transl: ObjectProperty.TryCreateFromBinary)
                                    .CastExtendedList<ObjectProperty>();
                                return new ParseResult((int)Location_FieldIndex.Properties2, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ACPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedPersistLocationReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationReference.TryCreateFromBinary)
                        .CastExtendedList<LocationReference>();
                    return (int)Location_FieldIndex.AddedPersistLocationReferences;
                }
                case RecordTypeInts.LCPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterPersistLocationReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationReference.TryCreateFromBinary)
                        .CastExtendedList<LocationReference>();
                    return (int)Location_FieldIndex.MasterPersistLocationReferences;
                }
                case RecordTypeInts.RCPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RemovedPersistLocationReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    return (int)Location_FieldIndex.RemovedPersistLocationReferences;
                }
                case RecordTypeInts.ACUR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedUniqueBaseForms = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUniqueReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUniqueReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUniqueReference>();
                    return (int)Location_FieldIndex.AddedUniqueBaseForms;
                }
                case RecordTypeInts.LCUR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellUniqueReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUniqueReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUniqueReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUniqueReference>();
                    return (int)Location_FieldIndex.LocationCellUniqueReferences;
                }
                case RecordTypeInts.RCUR:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.LocationCellUniqueReferences)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.RemovedUniqueBaseForms = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGenericBaseFormGetter>>.Instance.Parse(
                                reader: frame.SpawnWithLength(contentLength),
                                transl: FormLinkBinaryTranslation.Instance.Parse)
                            .CastExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>();
                        return new ParseResult((int)Location_FieldIndex.RemovedUniqueBaseForms, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.MasterUniqueNpcs)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.RemovedUniqueNpcs = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                                reader: frame.SpawnWithLength(contentLength),
                                transl: FormLinkBinaryTranslation.Instance.Parse)
                            .CastExtendedList<IFormLinkGetter<INpcGetter>>();
                        return new ParseResult((int)Location_FieldIndex.RemovedUniqueNpcs, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.RemovedUniqueBaseForms = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGenericBaseFormGetter>>.Instance.Parse(
                                        reader: frame.SpawnWithLength(contentLength),
                                        transl: FormLinkBinaryTranslation.Instance.Parse)
                                    .CastExtendedList<IFormLinkGetter<IGenericBaseFormGetter>>();
                                return new ParseResult((int)Location_FieldIndex.RemovedUniqueBaseForms, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.RemovedUniqueNpcs = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                                        reader: frame.SpawnWithLength(contentLength),
                                        transl: FormLinkBinaryTranslation.Instance.Parse)
                                    .CastExtendedList<IFormLinkGetter<INpcGetter>>();
                                return new ParseResult((int)Location_FieldIndex.RemovedUniqueNpcs, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ACUN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedUniqueNpcs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUnique>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUnique.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUnique>();
                    return (int)Location_FieldIndex.AddedUniqueNpcs;
                }
                case RecordTypeInts.LCUN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterUniqueNpcs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUnique>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUnique.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUnique>();
                    return (int)Location_FieldIndex.MasterUniqueNpcs;
                }
                case RecordTypeInts.ACSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedSpecialReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellStaticReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellStaticReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellStaticReference>();
                    return (int)Location_FieldIndex.AddedSpecialReferences;
                }
                case RecordTypeInts.LCSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterSpecialReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellStaticReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellStaticReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellStaticReference>();
                    return (int)Location_FieldIndex.MasterSpecialReferences;
                }
                case RecordTypeInts.RCSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RemovedSpecialReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    return (int)Location_FieldIndex.RemovedSpecialReferences;
                }
                case RecordTypeInts.LCEC:
                {
                    item.MasterWorldspaceCells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCoordinate>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RecordTypes.LCEC,
                            skipHeader: true,
                            translationParams: translationParams,
                            transl: LocationCoordinate.TryCreateFromBinary));
                    return (int)Location_FieldIndex.MasterWorldspaceCells;
                }
                case RecordTypeInts.ACID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedInitiallyDisabledReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    return (int)Location_FieldIndex.AddedInitiallyDisabledReferences;
                }
                case RecordTypeInts.LCID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterInitiallyDisabledReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    return (int)Location_FieldIndex.MasterInitiallyDisabledReferences;
                }
                case RecordTypeInts.ACEP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddedEnablePointReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellEnablePoint>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellEnablePoint.TryCreateFromBinary)
                        .CastExtendedList<LocationCellEnablePoint>();
                    return (int)Location_FieldIndex.AddedEnablePointReferences;
                }
                case RecordTypeInts.LCEP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterEnablePointReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellEnablePoint>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellEnablePoint.TryCreateFromBinary)
                        .CastExtendedList<LocationCellEnablePoint>();
                    return (int)Location_FieldIndex.MasterEnablePointReferences;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Location_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Location_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    item.Faction = Mutagen.Bethesda.Starfield.LocationFaction.CreateFromBinary(frame: frame);
                    return (int)Location_FieldIndex.Faction;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParentLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.ParentLocation;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.NAM1;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnreportedCrimeFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.UnreportedCrimeFaction;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorldLocationMarkerRef.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.WorldLocationMarkerRef;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorldLocationRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Location_FieldIndex.WorldLocationRadius;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorFadeMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Location_FieldIndex.ActorFadeMult;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TNAM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Location_FieldIndex.TNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Location_FieldIndex.Color;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StarID = frame.ReadInt32();
                    return (int)Location_FieldIndex.StarID;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PlanetID = frame.ReadInt32();
                    return (int)Location_FieldIndex.PlanetID;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LocationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LocationBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ILocationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Location_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LocationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILocation);

        public Location.MajorFlag MajorFlags => (Location.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        public IReadOnlyList<ILocationReferenceGetter>? AddedPersistLocationReferences { get; private set; }
        public IReadOnlyList<ILocationReferenceGetter>? MasterPersistLocationReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedPersistLocationReferences { get; private set; }
        public IReadOnlyList<ILocationCellUniqueReferenceGetter>? AddedUniqueBaseForms { get; private set; }
        public IReadOnlyList<ILocationCellUniqueReferenceGetter>? LocationCellUniqueReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IGenericBaseFormGetter>>? RemovedUniqueBaseForms { get; private set; }
        public IReadOnlyList<ILocationCellUniqueGetter>? AddedUniqueNpcs { get; private set; }
        public IReadOnlyList<ILocationCellUniqueGetter>? MasterUniqueNpcs { get; private set; }
        public IReadOnlyList<IFormLinkGetter<INpcGetter>>? RemovedUniqueNpcs { get; private set; }
        public IReadOnlyList<ILocationCellStaticReferenceGetter>? AddedSpecialReferences { get; private set; }
        public IReadOnlyList<ILocationCellStaticReferenceGetter>? MasterSpecialReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? RemovedSpecialReferences { get; private set; }
        public IReadOnlyList<ILocationCoordinateGetter> MasterWorldspaceCells { get; private set; } = Array.Empty<ILocationCoordinateGetter>();
        public IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? AddedInitiallyDisabledReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? MasterInitiallyDisabledReferences { get; private set; }
        public IReadOnlyList<ILocationCellEnablePointGetter>? AddedEnablePointReferences { get; private set; }
        public IReadOnlyList<ILocationCellEnablePointGetter>? MasterEnablePointReferences { get; private set; }
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties2 { get; private set; }
        #region Faction
        private RangeInt32? _FactionLocation;
        public ILocationFactionGetter? Faction => _FactionLocation.HasValue ? LocationFactionBinaryOverlay.LocationFactionFactory(_recordData.Slice(_FactionLocation!.Value.Min), _package) : default;
        #endregion
        #region ParentLocation
        private int? _ParentLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> ParentLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _ParentLocationLocation);
        #endregion
        #region NAM1
        private int? _NAM1Location;
        public IFormLinkNullableGetter<IMusicTypeGetter> NAM1 => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMusicTypeGetter>(_package, _recordData, _NAM1Location);
        #endregion
        #region UnreportedCrimeFaction
        private int? _UnreportedCrimeFactionLocation;
        public IFormLinkNullableGetter<IFactionGetter> UnreportedCrimeFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _UnreportedCrimeFactionLocation);
        #endregion
        #region WorldLocationMarkerRef
        private int? _WorldLocationMarkerRefLocation;
        public IFormLinkNullableGetter<IPlacedSimpleGetter> WorldLocationMarkerRef => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedSimpleGetter>(_package, _recordData, _WorldLocationMarkerRefLocation);
        #endregion
        #region WorldLocationRadius
        private int? _WorldLocationRadiusLocation;
        public Single? WorldLocationRadius => _WorldLocationRadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WorldLocationRadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ActorFadeMult
        private int? _ActorFadeMultLocation;
        public Single? ActorFadeMult => _ActorFadeMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActorFadeMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region TNAM
        private int? _TNAMLocation;
        public Single? TNAM => _TNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TNAMLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region StarID
        private int? _StarIDLocation;
        public Int32? StarID => _StarIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StarIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region PlanetID
        private int? _PlanetIDLocation;
        public Int32? PlanetID => _PlanetIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PlanetIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILocationGetter LocationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LocationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILocationGetter LocationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LocationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Location_FieldIndex.Components;
                }
                case RecordTypeInts.PRPS:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.Components)
                    {
                        this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                            stream: stream,
                            package: _package,
                            finalPos: finalPos,
                            itemLength: 12,
                            getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                        return new ParseResult((int)Location_FieldIndex.Properties, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.Keywords)
                    {
                        this.Properties2 = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                            stream: stream,
                            package: _package,
                            finalPos: finalPos,
                            itemLength: 12,
                            getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                        return new ParseResult((int)Location_FieldIndex.Properties2, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                                    stream: stream,
                                    package: _package,
                                    finalPos: finalPos,
                                    itemLength: 12,
                                    getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                                return new ParseResult((int)Location_FieldIndex.Properties, type);
                            }
                            case 1:
                            {
                                this.Properties2 = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                                    stream: stream,
                                    package: _package,
                                    finalPos: finalPos,
                                    itemLength: 12,
                                    getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                                return new ParseResult((int)Location_FieldIndex.Properties2, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ACPR:
                {
                    this.AddedPersistLocationReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 16,
                        getter: (s, p) => LocationReferenceBinaryOverlay.LocationReferenceFactory(s, p));
                    return (int)Location_FieldIndex.AddedPersistLocationReferences;
                }
                case RecordTypeInts.LCPR:
                {
                    this.MasterPersistLocationReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 16,
                        getter: (s, p) => LocationReferenceBinaryOverlay.LocationReferenceFactory(s, p));
                    return (int)Location_FieldIndex.MasterPersistLocationReferences;
                }
                case RecordTypeInts.RCPR:
                {
                    this.RemovedPersistLocationReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedSimpleGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedSimpleGetter>(p, s));
                    return (int)Location_FieldIndex.RemovedPersistLocationReferences;
                }
                case RecordTypeInts.ACUR:
                {
                    this.AddedUniqueBaseForms = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueReferenceBinaryOverlay.LocationCellUniqueReferenceFactory(s, p));
                    return (int)Location_FieldIndex.AddedUniqueBaseForms;
                }
                case RecordTypeInts.LCUR:
                {
                    this.LocationCellUniqueReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueReferenceBinaryOverlay.LocationCellUniqueReferenceFactory(s, p));
                    return (int)Location_FieldIndex.LocationCellUniqueReferences;
                }
                case RecordTypeInts.RCUR:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.LocationCellUniqueReferences)
                    {
                        this.RemovedUniqueBaseForms = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IGenericBaseFormGetter>>(
                            stream: stream,
                            package: _package,
                            finalPos: finalPos,
                            itemLength: 4,
                            getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IGenericBaseFormGetter>(p, s));
                        return new ParseResult((int)Location_FieldIndex.RemovedUniqueBaseForms, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Location_FieldIndex.MasterUniqueNpcs)
                    {
                        this.RemovedUniqueNpcs = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<INpcGetter>>(
                            stream: stream,
                            package: _package,
                            finalPos: finalPos,
                            itemLength: 4,
                            getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s));
                        return new ParseResult((int)Location_FieldIndex.RemovedUniqueNpcs, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.RemovedUniqueBaseForms = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IGenericBaseFormGetter>>(
                                    stream: stream,
                                    package: _package,
                                    finalPos: finalPos,
                                    itemLength: 4,
                                    getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IGenericBaseFormGetter>(p, s));
                                return new ParseResult((int)Location_FieldIndex.RemovedUniqueBaseForms, type);
                            }
                            case 1:
                            {
                                this.RemovedUniqueNpcs = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<INpcGetter>>(
                                    stream: stream,
                                    package: _package,
                                    finalPos: finalPos,
                                    itemLength: 4,
                                    getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s));
                                return new ParseResult((int)Location_FieldIndex.RemovedUniqueNpcs, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ACUN:
                {
                    this.AddedUniqueNpcs = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueBinaryOverlay.LocationCellUniqueFactory(s, p));
                    return (int)Location_FieldIndex.AddedUniqueNpcs;
                }
                case RecordTypeInts.LCUN:
                {
                    this.MasterUniqueNpcs = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueBinaryOverlay.LocationCellUniqueFactory(s, p));
                    return (int)Location_FieldIndex.MasterUniqueNpcs;
                }
                case RecordTypeInts.ACSR:
                {
                    this.AddedSpecialReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellStaticReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 20,
                        getter: (s, p) => LocationCellStaticReferenceBinaryOverlay.LocationCellStaticReferenceFactory(s, p));
                    return (int)Location_FieldIndex.AddedSpecialReferences;
                }
                case RecordTypeInts.LCSR:
                {
                    this.MasterSpecialReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellStaticReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 20,
                        getter: (s, p) => LocationCellStaticReferenceBinaryOverlay.LocationCellStaticReferenceFactory(s, p));
                    return (int)Location_FieldIndex.MasterSpecialReferences;
                }
                case RecordTypeInts.RCSR:
                {
                    this.RemovedSpecialReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedSimpleGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedSimpleGetter>(p, s));
                    return (int)Location_FieldIndex.RemovedSpecialReferences;
                }
                case RecordTypeInts.LCEC:
                {
                    this.MasterWorldspaceCells = this.ParseRepeatedTypelessSubrecord<ILocationCoordinateGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: RecordTypes.LCEC,
                        factory: LocationCoordinateBinaryOverlay.LocationCoordinateFactory,
                        skipHeader: true);
                    return (int)Location_FieldIndex.MasterWorldspaceCells;
                }
                case RecordTypeInts.ACID:
                {
                    this.AddedInitiallyDisabledReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedGetter>(p, s));
                    return (int)Location_FieldIndex.AddedInitiallyDisabledReferences;
                }
                case RecordTypeInts.LCID:
                {
                    this.MasterInitiallyDisabledReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedGetter>(p, s));
                    return (int)Location_FieldIndex.MasterInitiallyDisabledReferences;
                }
                case RecordTypeInts.ACEP:
                {
                    this.AddedEnablePointReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellEnablePointGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellEnablePointBinaryOverlay.LocationCellEnablePointFactory(s, p));
                    return (int)Location_FieldIndex.AddedEnablePointReferences;
                }
                case RecordTypeInts.LCEP:
                {
                    this.MasterEnablePointReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellEnablePointGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellEnablePointBinaryOverlay.LocationCellEnablePointFactory(s, p));
                    return (int)Location_FieldIndex.MasterEnablePointReferences;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Location_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    _FactionLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Location_FieldIndex.Faction;
                }
                case RecordTypeInts.PNAM:
                {
                    _ParentLocationLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.ParentLocation;
                }
                case RecordTypeInts.NAM1:
                {
                    _NAM1Location = (stream.Position - offset);
                    return (int)Location_FieldIndex.NAM1;
                }
                case RecordTypeInts.FNAM:
                {
                    _UnreportedCrimeFactionLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.UnreportedCrimeFaction;
                }
                case RecordTypeInts.MNAM:
                {
                    _WorldLocationMarkerRefLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.WorldLocationMarkerRef;
                }
                case RecordTypeInts.RNAM:
                {
                    _WorldLocationRadiusLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.WorldLocationRadius;
                }
                case RecordTypeInts.ANAM:
                {
                    _ActorFadeMultLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.ActorFadeMult;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.TNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.Color;
                }
                case RecordTypeInts.XNAM:
                {
                    _StarIDLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.StarID;
                }
                case RecordTypeInts.YNAM:
                {
                    _PlanetIDLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.PlanetID;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Location>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILocationGetter rhs) return false;
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationGetter? obj)
        {
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCommon)((ILocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

