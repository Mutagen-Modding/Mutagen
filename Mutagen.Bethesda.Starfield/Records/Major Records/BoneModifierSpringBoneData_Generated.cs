/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BoneModifierSpringBoneData :
        ABoneModifierData,
        IBoneModifierSpringBoneData,
        IEquatable<IBoneModifierSpringBoneDataGetter>,
        ILoquiObjectSetter<BoneModifierSpringBoneData>
    {
        #region Ctor
        public BoneModifierSpringBoneData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        public P3Float Strength { get; set; } = default(P3Float);
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default(Single);
        #endregion
        #region Damp
        public P3Float Damp { get; set; } = default(P3Float);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion
        #region Scale
        public P3Float Scale { get; set; } = default(P3Float);
        #endregion
        #region Unknown3
        public Single Unknown3 { get; set; } = default(Single);
        #endregion
        #region MaxDist
        public P3Float MaxDist { get; set; } = default(P3Float);
        #endregion
        #region Unknown4
        public Single Unknown4 { get; set; } = default(Single);
        #endregion
        #region LookAtParent
        public Boolean LookAtParent { get; set; } = default(Boolean);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierSpringBoneDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierSpringBoneDataGetter rhs) return false;
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierSpringBoneDataGetter? obj)
        {
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ABoneModifierData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Strength = initialValue;
                this.Unknown = initialValue;
                this.Damp = initialValue;
                this.Unknown2 = initialValue;
                this.Scale = initialValue;
                this.Unknown3 = initialValue;
                this.MaxDist = initialValue;
                this.Unknown4 = initialValue;
                this.LookAtParent = initialValue;
            }

            public Mask(
                TItem Driver,
                TItem Target,
                TItem MaxAnimationDistance,
                TItem Strength,
                TItem Unknown,
                TItem Damp,
                TItem Unknown2,
                TItem Scale,
                TItem Unknown3,
                TItem MaxDist,
                TItem Unknown4,
                TItem LookAtParent)
            : base(
                Driver: Driver,
                Target: Target,
                MaxAnimationDistance: MaxAnimationDistance)
            {
                this.Strength = Strength;
                this.Unknown = Unknown;
                this.Damp = Damp;
                this.Unknown2 = Unknown2;
                this.Scale = Scale;
                this.Unknown3 = Unknown3;
                this.MaxDist = MaxDist;
                this.Unknown4 = Unknown4;
                this.LookAtParent = LookAtParent;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Strength;
            public TItem Unknown;
            public TItem Damp;
            public TItem Unknown2;
            public TItem Scale;
            public TItem Unknown3;
            public TItem MaxDist;
            public TItem Unknown4;
            public TItem LookAtParent;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Damp, rhs.Damp)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.MaxDist, rhs.MaxDist)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.LookAtParent, rhs.LookAtParent)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Strength);
                hash.Add(this.Unknown);
                hash.Add(this.Damp);
                hash.Add(this.Unknown2);
                hash.Add(this.Scale);
                hash.Add(this.Unknown3);
                hash.Add(this.MaxDist);
                hash.Add(this.Unknown4);
                hash.Add(this.LookAtParent);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Damp)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.MaxDist)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.LookAtParent)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Damp)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.MaxDist)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.LookAtParent)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BoneModifierSpringBoneData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Strength = eval(this.Strength);
                obj.Unknown = eval(this.Unknown);
                obj.Damp = eval(this.Damp);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Scale = eval(this.Scale);
                obj.Unknown3 = eval(this.Unknown3);
                obj.MaxDist = eval(this.MaxDist);
                obj.Unknown4 = eval(this.Unknown4);
                obj.LookAtParent = eval(this.LookAtParent);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BoneModifierSpringBoneData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BoneModifierSpringBoneData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BoneModifierSpringBoneData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Strength ?? true)
                    {
                        sb.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Damp ?? true)
                    {
                        sb.AppendItem(Damp, "Damp");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.MaxDist ?? true)
                    {
                        sb.AppendItem(MaxDist, "MaxDist");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.LookAtParent ?? true)
                    {
                        sb.AppendItem(LookAtParent, "LookAtParent");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ABoneModifierData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Strength;
            public Exception? Unknown;
            public Exception? Damp;
            public Exception? Unknown2;
            public Exception? Scale;
            public Exception? Unknown3;
            public Exception? MaxDist;
            public Exception? Unknown4;
            public Exception? LookAtParent;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                BoneModifierSpringBoneData_FieldIndex enu = (BoneModifierSpringBoneData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierSpringBoneData_FieldIndex.Strength:
                        return Strength;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown:
                        return Unknown;
                    case BoneModifierSpringBoneData_FieldIndex.Damp:
                        return Damp;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown2:
                        return Unknown2;
                    case BoneModifierSpringBoneData_FieldIndex.Scale:
                        return Scale;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown3:
                        return Unknown3;
                    case BoneModifierSpringBoneData_FieldIndex.MaxDist:
                        return MaxDist;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown4:
                        return Unknown4;
                    case BoneModifierSpringBoneData_FieldIndex.LookAtParent:
                        return LookAtParent;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                BoneModifierSpringBoneData_FieldIndex enu = (BoneModifierSpringBoneData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierSpringBoneData_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Damp:
                        this.Damp = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.MaxDist:
                        this.MaxDist = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.LookAtParent:
                        this.LookAtParent = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                BoneModifierSpringBoneData_FieldIndex enu = (BoneModifierSpringBoneData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierSpringBoneData_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Damp:
                        this.Damp = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.MaxDist:
                        this.MaxDist = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case BoneModifierSpringBoneData_FieldIndex.LookAtParent:
                        this.LookAtParent = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Strength != null) return true;
                if (Unknown != null) return true;
                if (Damp != null) return true;
                if (Unknown2 != null) return true;
                if (Scale != null) return true;
                if (Unknown3 != null) return true;
                if (MaxDist != null) return true;
                if (Unknown4 != null) return true;
                if (LookAtParent != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Strength, "Strength");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Damp, "Damp");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(MaxDist, "MaxDist");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(LookAtParent, "LookAtParent");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Damp = this.Damp.Combine(rhs.Damp);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.MaxDist = this.MaxDist.Combine(rhs.MaxDist);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.LookAtParent = this.LookAtParent.Combine(rhs.LookAtParent);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ABoneModifierData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Strength;
            public bool Unknown;
            public bool Damp;
            public bool Unknown2;
            public bool Scale;
            public bool Unknown3;
            public bool MaxDist;
            public bool Unknown4;
            public bool LookAtParent;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Strength = defaultOn;
                this.Unknown = defaultOn;
                this.Damp = defaultOn;
                this.Unknown2 = defaultOn;
                this.Scale = defaultOn;
                this.Unknown3 = defaultOn;
                this.MaxDist = defaultOn;
                this.Unknown4 = defaultOn;
                this.LookAtParent = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Strength, null));
                ret.Add((Unknown, null));
                ret.Add((Damp, null));
                ret.Add((Unknown2, null));
                ret.Add((Scale, null));
                ret.Add((Unknown3, null));
                ret.Add((MaxDist, null));
                ret.Add((Unknown4, null));
                ret.Add((LookAtParent, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierSpringBoneDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierSpringBoneDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static BoneModifierSpringBoneData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BoneModifierSpringBoneData();
            ((BoneModifierSpringBoneDataSetterCommon)((IBoneModifierSpringBoneDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BoneModifierSpringBoneData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BoneModifierSpringBoneDataSetterCommon)((IBoneModifierSpringBoneDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new BoneModifierSpringBoneData GetNew()
        {
            return new BoneModifierSpringBoneData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBoneModifierSpringBoneData :
        IABoneModifierData,
        IBoneModifierSpringBoneDataGetter,
        ILoquiObjectSetter<IBoneModifierSpringBoneData>
    {
        new P3Float Strength { get; set; }
        new Single Unknown { get; set; }
        new P3Float Damp { get; set; }
        new Single Unknown2 { get; set; }
        new P3Float Scale { get; set; }
        new Single Unknown3 { get; set; }
        new P3Float MaxDist { get; set; }
        new Single Unknown4 { get; set; }
        new Boolean LookAtParent { get; set; }
    }

    public partial interface IBoneModifierSpringBoneDataGetter :
        IABoneModifierDataGetter,
        IBinaryItem,
        ILoquiObject<IBoneModifierSpringBoneDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => BoneModifierSpringBoneData_Registration.Instance;
        P3Float Strength { get; }
        Single Unknown { get; }
        P3Float Damp { get; }
        Single Unknown2 { get; }
        P3Float Scale { get; }
        Single Unknown3 { get; }
        P3Float MaxDist { get; }
        Single Unknown4 { get; }
        Boolean LookAtParent { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BoneModifierSpringBoneDataMixIn
    {
        public static void Clear(this IBoneModifierSpringBoneData item)
        {
            ((BoneModifierSpringBoneDataSetterCommon)((IBoneModifierSpringBoneDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BoneModifierSpringBoneData.Mask<bool> GetEqualsMask(
            this IBoneModifierSpringBoneDataGetter item,
            IBoneModifierSpringBoneDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBoneModifierSpringBoneDataGetter item,
            string? name = null,
            BoneModifierSpringBoneData.Mask<bool>? printMask = null)
        {
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBoneModifierSpringBoneDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierSpringBoneData.Mask<bool>? printMask = null)
        {
            ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBoneModifierSpringBoneDataGetter item,
            IBoneModifierSpringBoneDataGetter rhs,
            BoneModifierSpringBoneData.TranslationMask? equalsMask = null)
        {
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBoneModifierSpringBoneData lhs,
            IBoneModifierSpringBoneDataGetter rhs,
            out BoneModifierSpringBoneData.ErrorMask errorMask,
            BoneModifierSpringBoneData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BoneModifierSpringBoneData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBoneModifierSpringBoneData lhs,
            IBoneModifierSpringBoneDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BoneModifierSpringBoneData DeepCopy(
            this IBoneModifierSpringBoneDataGetter item,
            BoneModifierSpringBoneData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BoneModifierSpringBoneData DeepCopy(
            this IBoneModifierSpringBoneDataGetter item,
            out BoneModifierSpringBoneData.ErrorMask errorMask,
            BoneModifierSpringBoneData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BoneModifierSpringBoneData DeepCopy(
            this IBoneModifierSpringBoneDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBoneModifierSpringBoneData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BoneModifierSpringBoneDataSetterCommon)((IBoneModifierSpringBoneDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BoneModifierSpringBoneData_FieldIndex
    {
        Driver = 0,
        Target = 1,
        MaxAnimationDistance = 2,
        Strength = 3,
        Unknown = 4,
        Damp = 5,
        Unknown2 = 6,
        Scale = 7,
        Unknown3 = 8,
        MaxDist = 9,
        Unknown4 = 10,
        LookAtParent = 11,
    }
    #endregion

    #region Registration
    internal partial class BoneModifierSpringBoneData_Registration : ILoquiRegistration
    {
        public static readonly BoneModifierSpringBoneData_Registration Instance = new BoneModifierSpringBoneData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(BoneModifierSpringBoneData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BoneModifierSpringBoneData.ErrorMask);

        public static readonly Type ClassType = typeof(BoneModifierSpringBoneData);

        public static readonly Type GetterType = typeof(IBoneModifierSpringBoneDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBoneModifierSpringBoneData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BoneModifierSpringBoneData";

        public const string Name = "BoneModifierSpringBoneData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BoneModifierSpringBoneDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BoneModifierSpringBoneDataSetterCommon : ABoneModifierDataSetterCommon
    {
        public new static readonly BoneModifierSpringBoneDataSetterCommon Instance = new BoneModifierSpringBoneDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBoneModifierSpringBoneData item)
        {
            ClearPartial();
            item.Strength = default(P3Float);
            item.Unknown = default(Single);
            item.Damp = default(P3Float);
            item.Unknown2 = default(Single);
            item.Scale = default(P3Float);
            item.Unknown3 = default(Single);
            item.MaxDist = default(P3Float);
            item.Unknown4 = default(Single);
            item.LookAtParent = default(Boolean);
            base.Clear(item);
        }
        
        public override void Clear(IABoneModifierData item)
        {
            Clear(item: (IBoneModifierSpringBoneData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBoneModifierSpringBoneData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBoneModifierSpringBoneData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BoneModifierSpringBoneDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IABoneModifierData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (BoneModifierSpringBoneData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BoneModifierSpringBoneDataCommon : ABoneModifierDataCommon
    {
        public new static readonly BoneModifierSpringBoneDataCommon Instance = new BoneModifierSpringBoneDataCommon();

        public BoneModifierSpringBoneData.Mask<bool> GetEqualsMask(
            IBoneModifierSpringBoneDataGetter item,
            IBoneModifierSpringBoneDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BoneModifierSpringBoneData.Mask<bool>(false);
            ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBoneModifierSpringBoneDataGetter item,
            IBoneModifierSpringBoneDataGetter rhs,
            BoneModifierSpringBoneData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Strength = item.Strength.Equals(rhs.Strength);
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
            ret.Damp = item.Damp.Equals(rhs.Damp);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
            ret.Scale = item.Scale.Equals(rhs.Scale);
            ret.Unknown3 = item.Unknown3.EqualsWithin(rhs.Unknown3);
            ret.MaxDist = item.MaxDist.Equals(rhs.MaxDist);
            ret.Unknown4 = item.Unknown4.EqualsWithin(rhs.Unknown4);
            ret.LookAtParent = item.LookAtParent == rhs.LookAtParent;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBoneModifierSpringBoneDataGetter item,
            string? name = null,
            BoneModifierSpringBoneData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBoneModifierSpringBoneDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierSpringBoneData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BoneModifierSpringBoneData =>");
            }
            else
            {
                sb.AppendLine($"{name} (BoneModifierSpringBoneData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBoneModifierSpringBoneDataGetter item,
            StructuredStringBuilder sb,
            BoneModifierSpringBoneData.Mask<bool>? printMask = null)
        {
            ABoneModifierDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Strength ?? true)
            {
                sb.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Damp ?? true)
            {
                sb.AppendItem(item.Damp, "Damp");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.Scale ?? true)
            {
                sb.AppendItem(item.Scale, "Scale");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.MaxDist ?? true)
            {
                sb.AppendItem(item.MaxDist, "MaxDist");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.LookAtParent ?? true)
            {
                sb.AppendItem(item.LookAtParent, "LookAtParent");
            }
        }
        
        public static BoneModifierSpringBoneData_FieldIndex ConvertFieldIndex(ABoneModifierData_FieldIndex index)
        {
            switch (index)
            {
                case ABoneModifierData_FieldIndex.Driver:
                    return (BoneModifierSpringBoneData_FieldIndex)((int)index);
                case ABoneModifierData_FieldIndex.Target:
                    return (BoneModifierSpringBoneData_FieldIndex)((int)index);
                case ABoneModifierData_FieldIndex.MaxAnimationDistance:
                    return (BoneModifierSpringBoneData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBoneModifierSpringBoneDataGetter? lhs,
            IBoneModifierSpringBoneDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IABoneModifierDataGetter)lhs, (IABoneModifierDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Strength) ?? true))
            {
                if (!lhs.Strength.Equals(rhs.Strength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Damp) ?? true))
            {
                if (!lhs.Damp.Equals(rhs.Damp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.Equals(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown3) ?? true))
            {
                if (!lhs.Unknown3.EqualsWithin(rhs.Unknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.MaxDist) ?? true))
            {
                if (!lhs.MaxDist.Equals(rhs.MaxDist)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown4) ?? true))
            {
                if (!lhs.Unknown4.EqualsWithin(rhs.Unknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.LookAtParent) ?? true))
            {
                if (lhs.LookAtParent != rhs.LookAtParent) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IABoneModifierDataGetter? lhs,
            IABoneModifierDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBoneModifierSpringBoneDataGetter?)lhs,
                rhs: rhs as IBoneModifierSpringBoneDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBoneModifierSpringBoneDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Strength);
            hash.Add(item.Unknown);
            hash.Add(item.Damp);
            hash.Add(item.Unknown2);
            hash.Add(item.Scale);
            hash.Add(item.Unknown3);
            hash.Add(item.MaxDist);
            hash.Add(item.Unknown4);
            hash.Add(item.LookAtParent);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IABoneModifierDataGetter item)
        {
            return GetHashCode(item: (IBoneModifierSpringBoneDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return BoneModifierSpringBoneData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBoneModifierSpringBoneDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BoneModifierSpringBoneDataSetterTranslationCommon : ABoneModifierDataSetterTranslationCommon
    {
        public new static readonly BoneModifierSpringBoneDataSetterTranslationCommon Instance = new BoneModifierSpringBoneDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBoneModifierSpringBoneData item,
            IBoneModifierSpringBoneDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IABoneModifierData)item,
                (IABoneModifierDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Damp) ?? true))
            {
                item.Damp = rhs.Damp;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.MaxDist) ?? true))
            {
                item.MaxDist = rhs.MaxDist;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierSpringBoneData_FieldIndex.LookAtParent) ?? true))
            {
                item.LookAtParent = rhs.LookAtParent;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBoneModifierSpringBoneData item,
            IBoneModifierSpringBoneDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IABoneModifierData item,
            IABoneModifierDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBoneModifierSpringBoneData)item,
                rhs: (IBoneModifierSpringBoneDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public BoneModifierSpringBoneData DeepCopy(
            IBoneModifierSpringBoneDataGetter item,
            BoneModifierSpringBoneData.TranslationMask? copyMask = null)
        {
            BoneModifierSpringBoneData ret = (BoneModifierSpringBoneData)((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BoneModifierSpringBoneData DeepCopy(
            IBoneModifierSpringBoneDataGetter item,
            out BoneModifierSpringBoneData.ErrorMask errorMask,
            BoneModifierSpringBoneData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BoneModifierSpringBoneData ret = (BoneModifierSpringBoneData)((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BoneModifierSpringBoneData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BoneModifierSpringBoneData DeepCopy(
            IBoneModifierSpringBoneDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BoneModifierSpringBoneData ret = (BoneModifierSpringBoneData)((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierSpringBoneDataSetterTranslationCommon)((IBoneModifierSpringBoneDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierSpringBoneData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierSpringBoneData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierSpringBoneData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierSpringBoneDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BoneModifierSpringBoneDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierSpringBoneDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierSpringBoneDataBinaryWriteTranslation :
        ABoneModifierDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BoneModifierSpringBoneDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBoneModifierSpringBoneDataGetter item,
            MutagenWriter writer)
        {
            ABoneModifierDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Strength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Damp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown2);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Scale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown3);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxDist);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown4);
            writer.Write(item.LookAtParent);
        }

        public void Write(
            MutagenWriter writer,
            IBoneModifierSpringBoneDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBoneModifierSpringBoneDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IABoneModifierDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBoneModifierSpringBoneDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BoneModifierSpringBoneDataBinaryCreateTranslation : ABoneModifierDataBinaryCreateTranslation
    {
        public new static readonly BoneModifierSpringBoneDataBinaryCreateTranslation Instance = new BoneModifierSpringBoneDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBoneModifierSpringBoneData item,
            MutagenFrame frame)
        {
            ABoneModifierDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Strength = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Damp = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Scale = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaxDist = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LookAtParent = frame.ReadBoolean();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BoneModifierSpringBoneDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BoneModifierSpringBoneDataBinaryOverlay :
        ABoneModifierDataBinaryOverlay,
        IBoneModifierSpringBoneDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierSpringBoneData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierSpringBoneData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierSpringBoneDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierSpringBoneDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierSpringBoneDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierSpringBoneDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public P3Float Strength => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x4, 0xC));
        public Single Unknown => _structData.Slice(TargetEndingPos + 0x10, 0x4).Float();
        public P3Float Damp => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x14, 0xC));
        public Single Unknown2 => _structData.Slice(TargetEndingPos + 0x20, 0x4).Float();
        public P3Float Scale => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x24, 0xC));
        public Single Unknown3 => _structData.Slice(TargetEndingPos + 0x30, 0x4).Float();
        public P3Float MaxDist => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x34, 0xC));
        public Single Unknown4 => _structData.Slice(TargetEndingPos + 0x40, 0x4).Float();
        public Boolean LookAtParent => _structData.Slice(TargetEndingPos + 0x44, 0x1)[0] >= 1;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BoneModifierSpringBoneDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void BoneModifierSpringBoneDataParseEndingPositions(
            BoneModifierSpringBoneDataBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ABoneModifierDataParseEndingPositions(
                ret: ret,
                package: package);
        }

        public static IBoneModifierSpringBoneDataGetter BoneModifierSpringBoneDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BoneModifierSpringBoneDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            BoneModifierSpringBoneDataParseEndingPositions(ret, package);
            stream.Position += ret.TargetEndingPos + 0x45;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBoneModifierSpringBoneDataGetter BoneModifierSpringBoneDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BoneModifierSpringBoneDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierSpringBoneDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierSpringBoneDataGetter rhs) return false;
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierSpringBoneDataGetter? obj)
        {
            return ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierSpringBoneDataCommon)((IBoneModifierSpringBoneDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

