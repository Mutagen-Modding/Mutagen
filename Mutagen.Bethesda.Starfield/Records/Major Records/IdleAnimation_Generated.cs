/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class IdleAnimation :
        StarfieldMajorRecord,
        IEquatable<IIdleAnimationGetter>,
        IIdleAnimationInternal,
        ILoquiObjectSetter<IdleAnimation>
    {
        #region Ctor
        protected IdleAnimation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IIdleAnimationGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region BehaviorGraph
        public String? BehaviorGraph { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.BehaviorGraph => this.BehaviorGraph;
        #endregion
        #region AnimationEvent
        public String? AnimationEvent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.AnimationEvent => this.AnimationEvent;
        #endregion
        #region RelatedIdles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IIdleRelationGetter>> _RelatedIdles = new ExtendedList<IFormLinkGetter<IIdleRelationGetter>>();
        public ExtendedList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles
        {
            get => this._RelatedIdles;
            init => this._RelatedIdles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> IIdleAnimationGetter.RelatedIdles => _RelatedIdles;
        #endregion

        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IIdleAnimationGetter.FNAM => this.FNAM;
        #endregion
        #region AnimationFile
        public String? AnimationFile { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.AnimationFile => this.AnimationFile;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IIdleAnimationGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IdleAnimationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.BehaviorGraph = initialValue;
                this.AnimationEvent = initialValue;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FNAM = initialValue;
                this.AnimationFile = initialValue;
                this.Name = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Conditions,
                TItem BehaviorGraph,
                TItem AnimationEvent,
                TItem RelatedIdles,
                TItem FNAM,
                TItem AnimationFile,
                TItem Name)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.BehaviorGraph = BehaviorGraph;
                this.AnimationEvent = AnimationEvent;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RelatedIdles, Enumerable.Empty<(int Index, TItem Value)>());
                this.FNAM = FNAM;
                this.AnimationFile = AnimationFile;
                this.Name = Name;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem BehaviorGraph;
            public TItem AnimationEvent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RelatedIdles;
            public TItem FNAM;
            public TItem AnimationFile;
            public TItem Name;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.BehaviorGraph, rhs.BehaviorGraph)) return false;
                if (!object.Equals(this.AnimationEvent, rhs.AnimationEvent)) return false;
                if (!object.Equals(this.RelatedIdles, rhs.RelatedIdles)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.AnimationFile, rhs.AnimationFile)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Conditions);
                hash.Add(this.BehaviorGraph);
                hash.Add(this.AnimationEvent);
                hash.Add(this.RelatedIdles);
                hash.Add(this.FNAM);
                hash.Add(this.AnimationFile);
                hash.Add(this.Name);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.BehaviorGraph)) return false;
                if (!eval(this.AnimationEvent)) return false;
                if (this.RelatedIdles != null)
                {
                    if (!eval(this.RelatedIdles.Overall)) return false;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FNAM)) return false;
                if (!eval(this.AnimationFile)) return false;
                if (!eval(this.Name)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.BehaviorGraph)) return true;
                if (eval(this.AnimationEvent)) return true;
                if (this.RelatedIdles != null)
                {
                    if (eval(this.RelatedIdles.Overall)) return true;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FNAM)) return true;
                if (eval(this.AnimationFile)) return true;
                if (eval(this.Name)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IdleAnimation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BehaviorGraph = eval(this.BehaviorGraph);
                obj.AnimationEvent = eval(this.AnimationEvent);
                if (RelatedIdles != null)
                {
                    obj.RelatedIdles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RelatedIdles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RelatedIdles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RelatedIdles.Specific = l;
                        foreach (var item in RelatedIdles.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FNAM = eval(this.FNAM);
                obj.AnimationFile = eval(this.AnimationFile);
                obj.Name = eval(this.Name);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(IdleAnimation.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, IdleAnimation.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(IdleAnimation.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BehaviorGraph ?? true)
                    {
                        sb.AppendItem(BehaviorGraph, "BehaviorGraph");
                    }
                    if (printMask?.AnimationEvent ?? true)
                    {
                        sb.AppendItem(AnimationEvent, "AnimationEvent");
                    }
                    if ((printMask?.RelatedIdles?.Overall ?? true)
                        && RelatedIdles is {} RelatedIdlesItem)
                    {
                        sb.AppendLine("RelatedIdles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RelatedIdlesItem.Overall);
                            if (RelatedIdlesItem.Specific != null)
                            {
                                foreach (var subItem in RelatedIdlesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.AnimationFile ?? true)
                    {
                        sb.AppendItem(AnimationFile, "AnimationFile");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? BehaviorGraph;
            public Exception? AnimationEvent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RelatedIdles;
            public Exception? FNAM;
            public Exception? AnimationFile;
            public Exception? Name;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        return Conditions;
                    case IdleAnimation_FieldIndex.BehaviorGraph:
                        return BehaviorGraph;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        return AnimationEvent;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        return RelatedIdles;
                    case IdleAnimation_FieldIndex.FNAM:
                        return FNAM;
                    case IdleAnimation_FieldIndex.AnimationFile:
                        return AnimationFile;
                    case IdleAnimation_FieldIndex.Name:
                        return Name;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = ex;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationFile:
                        this.AnimationFile = ex;
                        break;
                    case IdleAnimation_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationFile:
                        this.AnimationFile = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Conditions != null) return true;
                if (BehaviorGraph != null) return true;
                if (AnimationEvent != null) return true;
                if (RelatedIdles != null) return true;
                if (FNAM != null) return true;
                if (AnimationFile != null) return true;
                if (Name != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BehaviorGraph, "BehaviorGraph");
                }
                {
                    sb.AppendItem(AnimationEvent, "AnimationEvent");
                }
                if (RelatedIdles is {} RelatedIdlesItem)
                {
                    sb.AppendLine("RelatedIdles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RelatedIdlesItem.Overall);
                        if (RelatedIdlesItem.Specific != null)
                        {
                            foreach (var subItem in RelatedIdlesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(AnimationFile, "AnimationFile");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.BehaviorGraph = this.BehaviorGraph.Combine(rhs.BehaviorGraph);
                ret.AnimationEvent = this.AnimationEvent.Combine(rhs.AnimationEvent);
                ret.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RelatedIdles?.Overall, rhs.RelatedIdles?.Overall), Noggog.ExceptionExt.Combine(this.RelatedIdles?.Specific, rhs.RelatedIdles?.Specific));
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.AnimationFile = this.AnimationFile.Combine(rhs.AnimationFile);
                ret.Name = this.Name.Combine(rhs.Name);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Condition.TranslationMask? Conditions;
            public bool BehaviorGraph;
            public bool AnimationEvent;
            public bool RelatedIdles;
            public bool FNAM;
            public bool AnimationFile;
            public bool Name;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.BehaviorGraph = defaultOn;
                this.AnimationEvent = defaultOn;
                this.RelatedIdles = defaultOn;
                this.FNAM = defaultOn;
                this.AnimationFile = defaultOn;
                this.Name = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((BehaviorGraph, null));
                ret.Add((AnimationEvent, null));
                ret.Add((RelatedIdles, null));
                ret.Add((FNAM, null));
                ret.Add((AnimationFile, null));
                ret.Add((Name, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = IdleAnimation_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IdleAnimationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleAnimationSetterCommon.Instance.RemapLinks(this, mapping);
        public IdleAnimation(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private IdleAnimation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal IdleAnimation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public IdleAnimation(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public IdleAnimation(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<IdleAnimation>.ToString(this);
        }

        protected override Type LinkType => typeof(IIdleAnimation);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIdleAnimationGetter rhs) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new IdleAnimation();
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out IdleAnimation item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new IdleAnimation GetNew()
        {
            return new IdleAnimation();
        }

    }
    #endregion

    #region Interface
    public partial interface IIdleAnimation :
        IFormLinkContainer,
        IIdleAnimationGetter,
        ILoquiObjectSetter<IIdleAnimationInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<Condition> Conditions { get; }
        new String? BehaviorGraph { get; set; }
        new String? AnimationEvent { get; set; }
        new ExtendedList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new String? AnimationFile { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
    }

    public partial interface IIdleAnimationInternal :
        IStarfieldMajorRecordInternal,
        IIdleAnimation,
        IIdleAnimationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.IDLE)]
    public partial interface IIdleAnimationGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IIdleAnimationGetter>,
        IMapsToGetter<IIdleAnimationGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        IReadOnlyList<IConditionGetter> Conditions { get; }
        String? BehaviorGraph { get; }
        String? AnimationEvent { get; }
        IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        String? AnimationFile { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class IdleAnimationMixIn
    {
        public static void Clear(this IIdleAnimationInternal item)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IdleAnimation.Mask<bool> GetEqualsMask(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.TranslationMask? equalsMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IdleAnimation Duplicate(
            this IIdleAnimationGetter item,
            FormKey formKey,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static IdleAnimation Duplicate(
            this IIdleAnimationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IIdleAnimationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum IdleAnimation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Conditions = 7,
        BehaviorGraph = 8,
        AnimationEvent = 9,
        RelatedIdles = 10,
        FNAM = 11,
        AnimationFile = 12,
        Name = 13,
    }
    #endregion

    #region Registration
    internal partial class IdleAnimation_Registration : ILoquiRegistration
    {
        public static readonly IdleAnimation_Registration Instance = new IdleAnimation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(IdleAnimation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleAnimation.ErrorMask);

        public static readonly Type ClassType = typeof(IdleAnimation);

        public static readonly Type GetterType = typeof(IIdleAnimationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIdleAnimation);

        public static readonly Type? InternalSetterType = typeof(IIdleAnimationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.IdleAnimation";

        public const string Name = "IdleAnimation";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IDLE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IDLE);
            var all = RecordCollection.Factory(
                RecordTypes.IDLE,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.ANAM,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.FULL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(IdleAnimationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class IdleAnimationSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly IdleAnimationSetterCommon Instance = new IdleAnimationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIdleAnimationInternal item)
        {
            ClearPartial();
            item.Conditions.Clear();
            item.BehaviorGraph = default;
            item.AnimationEvent = default;
            item.RelatedIdles.Clear();
            item.FNAM = default;
            item.AnimationFile = default;
            item.Name = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IIdleAnimation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.RelatedIdles.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IIdleAnimationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: IdleAnimationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IdleAnimationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class IdleAnimationCommon : StarfieldMajorRecordCommon
    {
        public new static readonly IdleAnimationCommon Instance = new IdleAnimationCommon();

        public IdleAnimation.Mask<bool> GetEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleAnimation.Mask<bool>(false);
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BehaviorGraph = string.Equals(item.BehaviorGraph, rhs.BehaviorGraph);
            ret.AnimationEvent = string.Equals(item.AnimationEvent, rhs.AnimationEvent);
            ret.RelatedIdles = item.RelatedIdles.CollectionEqualsHelper(
                rhs.RelatedIdles,
                (l, r) => object.Equals(l, r),
                include);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.AnimationFile = string.Equals(item.AnimationFile, rhs.AnimationFile);
            ret.Name = object.Equals(item.Name, rhs.Name);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"IdleAnimation =>");
            }
            else
            {
                sb.AppendLine($"{name} (IdleAnimation) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BehaviorGraph ?? true)
                && item.BehaviorGraph is {} BehaviorGraphItem)
            {
                sb.AppendItem(BehaviorGraphItem, "BehaviorGraph");
            }
            if ((printMask?.AnimationEvent ?? true)
                && item.AnimationEvent is {} AnimationEventItem)
            {
                sb.AppendItem(AnimationEventItem, "AnimationEvent");
            }
            if (printMask?.RelatedIdles?.Overall ?? true)
            {
                sb.AppendLine("RelatedIdles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RelatedIdles)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.AnimationFile ?? true)
                && item.AnimationFile is {} AnimationFileItem)
            {
                sb.AppendItem(AnimationFileItem, "AnimationFile");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
        }
        
        public static IdleAnimation_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (IdleAnimation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new IdleAnimation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIdleAnimationGetter? lhs,
            IIdleAnimationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.BehaviorGraph) ?? true))
            {
                if (!string.Equals(lhs.BehaviorGraph, rhs.BehaviorGraph)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationEvent) ?? true))
            {
                if (!string.Equals(lhs.AnimationEvent, rhs.AnimationEvent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdles) ?? true))
            {
                if (!lhs.RelatedIdles.SequenceEqualNullable(rhs.RelatedIdles)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationFile) ?? true))
            {
                if (!string.Equals(lhs.AnimationFile, rhs.AnimationFile)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IIdleAnimationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Conditions);
            if (item.BehaviorGraph is {} BehaviorGraphitem)
            {
                hash.Add(BehaviorGraphitem);
            }
            if (item.AnimationEvent is {} AnimationEventitem)
            {
                hash.Add(AnimationEventitem);
            }
            hash.Add(item.RelatedIdles);
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.AnimationFile is {} AnimationFileitem)
            {
                hash.Add(AnimationFileitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return IdleAnimation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IIdleAnimationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RelatedIdles)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public IdleAnimation Duplicate(
            IIdleAnimationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new IdleAnimation(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class IdleAnimationSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly IdleAnimationSetterTranslationCommon Instance = new IdleAnimationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IIdleAnimationInternal item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.BehaviorGraph) ?? true))
            {
                item.BehaviorGraph = rhs.BehaviorGraph;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationEvent) ?? true))
            {
                item.AnimationEvent = rhs.AnimationEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdles) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdles);
                try
                {
                    item.RelatedIdles.SetTo(
                        rhs.RelatedIdles
                            .Select(b => (IFormLinkGetter<IIdleRelationGetter>)new FormLink<IIdleRelationGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationFile) ?? true))
            {
                item.AnimationFile = rhs.AnimationFile;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class IdleAnimation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IdleAnimationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class IdleAnimationBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly IdleAnimationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IIdleAnimationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BehaviorGraph,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationEvent,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IIdleRelationGetter>>.Instance.Write(
                writer: writer,
                items: item.RelatedIdles,
                recordType: translationParams.ConvertToCustom(RecordTypes.ANAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IIdleRelationGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationFile,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
        }

        public void Write(
            MutagenWriter writer,
            IIdleAnimationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IDLE,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class IdleAnimationBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly IdleAnimationBinaryCreateTranslation Instance = new IdleAnimationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IDLE;
        public static ParseResult FillBinaryRecordTypes(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BehaviorGraph = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)IdleAnimation_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationEvent = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RelatedIdles.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IIdleRelationGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)IdleAnimation_FieldIndex.FNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationFile = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)IdleAnimation_FieldIndex.AnimationFile;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)IdleAnimation_FieldIndex.Name;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class IdleAnimationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class IdleAnimationBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IIdleAnimationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IdleAnimationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IIdleAnimation);


        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        #region BehaviorGraph
        private int? _BehaviorGraphLocation;
        public String? BehaviorGraph => _BehaviorGraphLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BehaviorGraphLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region AnimationEvent
        private int? _AnimationEventLocation;
        public String? AnimationEvent => _AnimationEventLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationEventLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; private set; } = Array.Empty<IFormLinkGetter<IIdleRelationGetter>>();
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region AnimationFile
        private int? _AnimationFileLocation;
        public String? AnimationFile => _AnimationFileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationFileLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IdleAnimationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IIdleAnimationGetter IdleAnimationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new IdleAnimationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IIdleAnimationGetter IdleAnimationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return IdleAnimationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    _BehaviorGraphLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.ENAM:
                {
                    _AnimationEventLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    this.RelatedIdles = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IIdleRelationGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IIdleRelationGetter>(p, s));
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.FNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    _AnimationFileLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.AnimationFile;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.Name;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IdleAnimationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<IdleAnimation>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIdleAnimationGetter rhs) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

