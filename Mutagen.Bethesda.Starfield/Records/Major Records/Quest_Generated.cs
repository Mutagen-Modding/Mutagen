/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Quest :
        StarfieldMajorRecord,
        IEquatable<IQuestGetter>,
        ILoquiObjectSetter<Quest>,
        IQuestInternal
    {
        #region Ctor
        protected Quest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QuestAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public QuestAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuestAdapterGetter? IQuestGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IQuestGetter.Components => _Components;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QuestData? _Data;
        public QuestData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuestDataGetter? IQuestGetter.Data => this.Data;
        #endregion
        #region QuestType
        private readonly IFormLinkNullable<IKeywordGetter> _QuestType = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> QuestType
        {
            get => _QuestType;
            set => _QuestType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IQuestGetter.QuestType => this.QuestType;
        #endregion
        #region QuestFaction
        private readonly IFormLinkNullable<IKeywordGetter> _QuestFaction = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> QuestFaction
        {
            get => _QuestFaction;
            set => _QuestFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IQuestGetter.QuestFaction => this.QuestFaction;
        #endregion
        #region Event
        public RecordType? Event { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RecordType? IQuestGetter.Event => this.Event;
        #endregion
        #region Location
        private readonly IFormLinkNullable<ILocationGetter> _Location = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> Location
        {
            get => _Location;
            set => _Location.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> IQuestGetter.Location => this.Location;
        #endregion
        #region QuestTimeLimit
        private readonly IFormLinkNullable<IGlobalGetter> _QuestTimeLimit = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> QuestTimeLimit
        {
            get => _QuestTimeLimit;
            set => _QuestTimeLimit.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IQuestGetter.QuestTimeLimit => this.QuestTimeLimit;
        #endregion
        #region SourceQuest
        private readonly IFormLinkNullable<IQuestGetter> _SourceQuest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> SourceQuest
        {
            get => _SourceQuest;
            set => _SourceQuest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IQuestGetter.SourceQuest => this.SourceQuest;
        #endregion
        #region QDUPs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogResponsesGetter>>? _QDUPs;
        public ExtendedList<IFormLinkGetter<IDialogResponsesGetter>>? QDUPs
        {
            get => this._QDUPs;
            set => this._QDUPs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogResponsesGetter>>? IQuestGetter.QDUPs => _QDUPs;
        #endregion

        #endregion
        #region TextDisplayGlobals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IGlobalGetter>> _TextDisplayGlobals = new ExtendedList<IFormLinkGetter<IGlobalGetter>>();
        public ExtendedList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals
        {
            get => this._TextDisplayGlobals;
            init => this._TextDisplayGlobals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGlobalGetter>> IQuestGetter.TextDisplayGlobals => _TextDisplayGlobals;
        #endregion

        #endregion
        #region Filter
        public String? Filter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.Filter => this.Filter;
        #endregion
        #region Summary
        public String? Summary { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.Summary => this.Summary;
        #endregion
        #region DialogConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _DialogConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> DialogConditions
        {
            get => this._DialogConditions;
            init => this._DialogConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestGetter.DialogConditions => _DialogConditions;
        #endregion

        #endregion
        #region UnusedConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _UnusedConditions;
        public ExtendedList<Condition>? UnusedConditions
        {
            get => this._UnusedConditions;
            set => this._UnusedConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IQuestGetter.UnusedConditions => _UnusedConditions;
        #endregion

        #endregion
        #region Stages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestStage> _Stages = new ExtendedList<QuestStage>();
        public ExtendedList<QuestStage> Stages
        {
            get => this._Stages;
            init => this._Stages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestStageGetter> IQuestGetter.Stages => _Stages;
        #endregion

        #endregion
        #region Objectives
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestObjective> _Objectives = new ExtendedList<QuestObjective>();
        public ExtendedList<QuestObjective> Objectives
        {
            get => this._Objectives;
            init => this._Objectives = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestObjectiveGetter> IQuestGetter.Objectives => _Objectives;
        #endregion

        #endregion
        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AQuestAlias>? _Aliases;
        public ExtendedList<AQuestAlias>? Aliases
        {
            get => this._Aliases;
            set => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAQuestAliasGetter>? IQuestGetter.Aliases => _Aliases;
        #endregion

        #endregion
        #region QuestGroup
        private readonly IFormLinkNullable<IKeywordGetter> _QuestGroup = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> QuestGroup
        {
            get => _QuestGroup;
            set => _QuestGroup.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IQuestGetter.QuestGroup => this.QuestGroup;
        #endregion
        #region SwfFile
        public String? SwfFile { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.SwfFile => this.SwfFile;
        #endregion
        #region MissionTypeKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _MissionTypeKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> MissionTypeKeyword
        {
            get => _MissionTypeKeyword;
            set => _MissionTypeKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IQuestGetter.MissionTypeKeyword => this.MissionTypeKeyword;
        #endregion
        #region MissionBoardDescription
        public TranslatedString? MissionBoardDescription { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.MissionBoardDescription => this.MissionBoardDescription;
        #endregion
        #region MissionBoardInfoPanels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestMissionBoardPanel> _MissionBoardInfoPanels = new ExtendedList<QuestMissionBoardPanel>();
        public ExtendedList<QuestMissionBoardPanel> MissionBoardInfoPanels
        {
            get => this._MissionBoardInfoPanels;
            init => this._MissionBoardInfoPanels = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestMissionBoardPanelGetter> IQuestGetter.MissionBoardInfoPanels => _MissionBoardInfoPanels;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IQuestGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region ScriptComment
        public String? ScriptComment { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.ScriptComment => this.ScriptComment;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default(Int32);
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region DialogBranches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogBranch> _DialogBranches = new ExtendedList<DialogBranch>();
        public ExtendedList<DialogBranch> DialogBranches
        {
            get => this._DialogBranches;
            init => this._DialogBranches = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogBranchGetter> IQuestGetter.DialogBranches => _DialogBranches;
        #endregion

        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogTopic> _DialogTopics = new ExtendedList<DialogTopic>();
        public ExtendedList<DialogTopic> DialogTopics
        {
            get => this._DialogTopics;
            init => this._DialogTopics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogTopicGetter> IQuestGetter.DialogTopics => _DialogTopics;
        #endregion

        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Scene> _Scenes = new ExtendedList<Scene>();
        public ExtendedList<Scene> Scenes
        {
            get => this._Scenes;
            init => this._Scenes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISceneGetter> IQuestGetter.Scenes => _Scenes;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(initialValue, new QuestAdapter.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, QuestData.Mask<TItem>?>(initialValue, new QuestData.Mask<TItem>(initialValue));
                this.QuestType = initialValue;
                this.QuestFaction = initialValue;
                this.Event = initialValue;
                this.Location = initialValue;
                this.QuestTimeLimit = initialValue;
                this.SourceQuest = initialValue;
                this.QDUPs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Filter = initialValue;
                this.Summary = initialValue;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnusedConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AQuestAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AQuestAlias.Mask<TItem>?>>());
                this.QuestGroup = initialValue;
                this.SwfFile = initialValue;
                this.MissionTypeKeyword = initialValue;
                this.MissionBoardDescription = initialValue;
                this.MissionBoardInfoPanels = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestMissionBoardPanel.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestMissionBoardPanel.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ScriptComment = initialValue;
                this.Timestamp = initialValue;
                this.Unknown = initialValue;
                this.DialogBranches = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogBranch.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogBranch.Mask<TItem>?>>());
                this.DialogTopics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogTopic.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogTopic.Mask<TItem>?>>());
                this.Scenes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Scene.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Scene.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem Components,
                TItem Data,
                TItem QuestType,
                TItem QuestFaction,
                TItem Event,
                TItem Location,
                TItem QuestTimeLimit,
                TItem SourceQuest,
                TItem QDUPs,
                TItem TextDisplayGlobals,
                TItem Filter,
                TItem Summary,
                TItem DialogConditions,
                TItem UnusedConditions,
                TItem Stages,
                TItem Objectives,
                TItem Aliases,
                TItem QuestGroup,
                TItem SwfFile,
                TItem MissionTypeKeyword,
                TItem MissionBoardDescription,
                TItem MissionBoardInfoPanels,
                TItem Keywords,
                TItem ScriptComment,
                TItem Timestamp,
                TItem Unknown,
                TItem DialogBranches,
                TItem DialogTopics,
                TItem Scenes)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(VirtualMachineAdapter, new QuestAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, QuestData.Mask<TItem>?>(Data, new QuestData.Mask<TItem>(Data));
                this.QuestType = QuestType;
                this.QuestFaction = QuestFaction;
                this.Event = Event;
                this.Location = Location;
                this.QuestTimeLimit = QuestTimeLimit;
                this.SourceQuest = SourceQuest;
                this.QDUPs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(QDUPs, Enumerable.Empty<(int Index, TItem Value)>());
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TextDisplayGlobals, Enumerable.Empty<(int Index, TItem Value)>());
                this.Filter = Filter;
                this.Summary = Summary;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(DialogConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnusedConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(UnusedConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(Stages, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(Objectives, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AQuestAlias.Mask<TItem>?>>?>(Aliases, Enumerable.Empty<MaskItemIndexed<TItem, AQuestAlias.Mask<TItem>?>>());
                this.QuestGroup = QuestGroup;
                this.SwfFile = SwfFile;
                this.MissionTypeKeyword = MissionTypeKeyword;
                this.MissionBoardDescription = MissionBoardDescription;
                this.MissionBoardInfoPanels = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestMissionBoardPanel.Mask<TItem>?>>?>(MissionBoardInfoPanels, Enumerable.Empty<MaskItemIndexed<TItem, QuestMissionBoardPanel.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.ScriptComment = ScriptComment;
                this.Timestamp = Timestamp;
                this.Unknown = Unknown;
                this.DialogBranches = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogBranch.Mask<TItem>?>>?>(DialogBranches, Enumerable.Empty<MaskItemIndexed<TItem, DialogBranch.Mask<TItem>?>>());
                this.DialogTopics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogTopic.Mask<TItem>?>>?>(DialogTopics, Enumerable.Empty<MaskItemIndexed<TItem, DialogTopic.Mask<TItem>?>>());
                this.Scenes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Scene.Mask<TItem>?>>?>(Scenes, Enumerable.Empty<MaskItemIndexed<TItem, Scene.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, QuestAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, QuestData.Mask<TItem>?>? Data { get; set; }
            public TItem QuestType;
            public TItem QuestFaction;
            public TItem Event;
            public TItem Location;
            public TItem QuestTimeLimit;
            public TItem SourceQuest;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? QDUPs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TextDisplayGlobals;
            public TItem Filter;
            public TItem Summary;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? DialogConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? UnusedConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>? Stages;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>? Objectives;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AQuestAlias.Mask<TItem>?>>?>? Aliases;
            public TItem QuestGroup;
            public TItem SwfFile;
            public TItem MissionTypeKeyword;
            public TItem MissionBoardDescription;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestMissionBoardPanel.Mask<TItem>?>>?>? MissionBoardInfoPanels;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem ScriptComment;
            public TItem Timestamp;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogBranch.Mask<TItem>?>>?>? DialogBranches;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogTopic.Mask<TItem>?>>?>? DialogTopics;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Scene.Mask<TItem>?>>?>? Scenes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.QuestType, rhs.QuestType)) return false;
                if (!object.Equals(this.QuestFaction, rhs.QuestFaction)) return false;
                if (!object.Equals(this.Event, rhs.Event)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.QuestTimeLimit, rhs.QuestTimeLimit)) return false;
                if (!object.Equals(this.SourceQuest, rhs.SourceQuest)) return false;
                if (!object.Equals(this.QDUPs, rhs.QDUPs)) return false;
                if (!object.Equals(this.TextDisplayGlobals, rhs.TextDisplayGlobals)) return false;
                if (!object.Equals(this.Filter, rhs.Filter)) return false;
                if (!object.Equals(this.Summary, rhs.Summary)) return false;
                if (!object.Equals(this.DialogConditions, rhs.DialogConditions)) return false;
                if (!object.Equals(this.UnusedConditions, rhs.UnusedConditions)) return false;
                if (!object.Equals(this.Stages, rhs.Stages)) return false;
                if (!object.Equals(this.Objectives, rhs.Objectives)) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                if (!object.Equals(this.QuestGroup, rhs.QuestGroup)) return false;
                if (!object.Equals(this.SwfFile, rhs.SwfFile)) return false;
                if (!object.Equals(this.MissionTypeKeyword, rhs.MissionTypeKeyword)) return false;
                if (!object.Equals(this.MissionBoardDescription, rhs.MissionBoardDescription)) return false;
                if (!object.Equals(this.MissionBoardInfoPanels, rhs.MissionBoardInfoPanels)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.ScriptComment, rhs.ScriptComment)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.DialogBranches, rhs.DialogBranches)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.Components);
                hash.Add(this.Data);
                hash.Add(this.QuestType);
                hash.Add(this.QuestFaction);
                hash.Add(this.Event);
                hash.Add(this.Location);
                hash.Add(this.QuestTimeLimit);
                hash.Add(this.SourceQuest);
                hash.Add(this.QDUPs);
                hash.Add(this.TextDisplayGlobals);
                hash.Add(this.Filter);
                hash.Add(this.Summary);
                hash.Add(this.DialogConditions);
                hash.Add(this.UnusedConditions);
                hash.Add(this.Stages);
                hash.Add(this.Objectives);
                hash.Add(this.Aliases);
                hash.Add(this.QuestGroup);
                hash.Add(this.SwfFile);
                hash.Add(this.MissionTypeKeyword);
                hash.Add(this.MissionBoardDescription);
                hash.Add(this.MissionBoardInfoPanels);
                hash.Add(this.Keywords);
                hash.Add(this.ScriptComment);
                hash.Add(this.Timestamp);
                hash.Add(this.Unknown);
                hash.Add(this.DialogBranches);
                hash.Add(this.DialogTopics);
                hash.Add(this.Scenes);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.QuestType)) return false;
                if (!eval(this.QuestFaction)) return false;
                if (!eval(this.Event)) return false;
                if (!eval(this.Location)) return false;
                if (!eval(this.QuestTimeLimit)) return false;
                if (!eval(this.SourceQuest)) return false;
                if (this.QDUPs != null)
                {
                    if (!eval(this.QDUPs.Overall)) return false;
                    if (this.QDUPs.Specific != null)
                    {
                        foreach (var item in this.QDUPs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TextDisplayGlobals != null)
                {
                    if (!eval(this.TextDisplayGlobals.Overall)) return false;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Filter)) return false;
                if (!eval(this.Summary)) return false;
                if (this.DialogConditions != null)
                {
                    if (!eval(this.DialogConditions.Overall)) return false;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnusedConditions != null)
                {
                    if (!eval(this.UnusedConditions.Overall)) return false;
                    if (this.UnusedConditions.Specific != null)
                    {
                        foreach (var item in this.UnusedConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (!eval(this.Stages.Overall)) return false;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (!eval(this.Objectives.Overall)) return false;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.QuestGroup)) return false;
                if (!eval(this.SwfFile)) return false;
                if (!eval(this.MissionTypeKeyword)) return false;
                if (!eval(this.MissionBoardDescription)) return false;
                if (this.MissionBoardInfoPanels != null)
                {
                    if (!eval(this.MissionBoardInfoPanels.Overall)) return false;
                    if (this.MissionBoardInfoPanels.Specific != null)
                    {
                        foreach (var item in this.MissionBoardInfoPanels.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ScriptComment)) return false;
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.DialogBranches != null)
                {
                    if (!eval(this.DialogBranches.Overall)) return false;
                    if (this.DialogBranches.Specific != null)
                    {
                        foreach (var item in this.DialogBranches.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null)
                    {
                        foreach (var item in this.DialogTopics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.QuestType)) return true;
                if (eval(this.QuestFaction)) return true;
                if (eval(this.Event)) return true;
                if (eval(this.Location)) return true;
                if (eval(this.QuestTimeLimit)) return true;
                if (eval(this.SourceQuest)) return true;
                if (this.QDUPs != null)
                {
                    if (eval(this.QDUPs.Overall)) return true;
                    if (this.QDUPs.Specific != null)
                    {
                        foreach (var item in this.QDUPs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TextDisplayGlobals != null)
                {
                    if (eval(this.TextDisplayGlobals.Overall)) return true;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Filter)) return true;
                if (eval(this.Summary)) return true;
                if (this.DialogConditions != null)
                {
                    if (eval(this.DialogConditions.Overall)) return true;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnusedConditions != null)
                {
                    if (eval(this.UnusedConditions.Overall)) return true;
                    if (this.UnusedConditions.Specific != null)
                    {
                        foreach (var item in this.UnusedConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (eval(this.Stages.Overall)) return true;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (eval(this.Objectives.Overall)) return true;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.QuestGroup)) return true;
                if (eval(this.SwfFile)) return true;
                if (eval(this.MissionTypeKeyword)) return true;
                if (eval(this.MissionBoardDescription)) return true;
                if (this.MissionBoardInfoPanels != null)
                {
                    if (eval(this.MissionBoardInfoPanels.Overall)) return true;
                    if (this.MissionBoardInfoPanels.Specific != null)
                    {
                        foreach (var item in this.MissionBoardInfoPanels.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ScriptComment)) return true;
                if (eval(this.Timestamp)) return true;
                if (eval(this.Unknown)) return true;
                if (this.DialogBranches != null)
                {
                    if (eval(this.DialogBranches.Overall)) return true;
                    if (this.DialogBranches.Specific != null)
                    {
                        foreach (var item in this.DialogBranches.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null)
                    {
                        foreach (var item in this.DialogTopics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Quest.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, QuestAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, QuestData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.QuestType = eval(this.QuestType);
                obj.QuestFaction = eval(this.QuestFaction);
                obj.Event = eval(this.Event);
                obj.Location = eval(this.Location);
                obj.QuestTimeLimit = eval(this.QuestTimeLimit);
                obj.SourceQuest = eval(this.SourceQuest);
                if (QDUPs != null)
                {
                    obj.QDUPs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.QDUPs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (QDUPs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.QDUPs.Specific = l;
                        foreach (var item in QDUPs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (TextDisplayGlobals != null)
                {
                    obj.TextDisplayGlobals = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TextDisplayGlobals.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TextDisplayGlobals.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TextDisplayGlobals.Specific = l;
                        foreach (var item in TextDisplayGlobals.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Filter = eval(this.Filter);
                obj.Summary = eval(this.Summary);
                if (DialogConditions != null)
                {
                    obj.DialogConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.DialogConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (DialogConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.DialogConditions.Specific = l;
                        foreach (var item in DialogConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnusedConditions != null)
                {
                    obj.UnusedConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.UnusedConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (UnusedConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.UnusedConditions.Specific = l;
                        foreach (var item in UnusedConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Stages != null)
                {
                    obj.Stages = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestStage.Mask<R>?>>?>(eval(this.Stages.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestStage.Mask<R>?>>());
                    if (Stages.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestStage.Mask<R>?>>();
                        obj.Stages.Specific = l;
                        foreach (var item in Stages.Specific)
                        {
                            MaskItemIndexed<R, QuestStage.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestStage.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Objectives != null)
                {
                    obj.Objectives = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestObjective.Mask<R>?>>?>(eval(this.Objectives.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestObjective.Mask<R>?>>());
                    if (Objectives.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestObjective.Mask<R>?>>();
                        obj.Objectives.Specific = l;
                        foreach (var item in Objectives.Specific)
                        {
                            MaskItemIndexed<R, QuestObjective.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestObjective.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AQuestAlias.Mask<R>?>>?>(eval(this.Aliases.Overall), Enumerable.Empty<MaskItemIndexed<R, AQuestAlias.Mask<R>?>>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AQuestAlias.Mask<R>?>>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific)
                        {
                            MaskItemIndexed<R, AQuestAlias.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AQuestAlias.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.QuestGroup = eval(this.QuestGroup);
                obj.SwfFile = eval(this.SwfFile);
                obj.MissionTypeKeyword = eval(this.MissionTypeKeyword);
                obj.MissionBoardDescription = eval(this.MissionBoardDescription);
                if (MissionBoardInfoPanels != null)
                {
                    obj.MissionBoardInfoPanels = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestMissionBoardPanel.Mask<R>?>>?>(eval(this.MissionBoardInfoPanels.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestMissionBoardPanel.Mask<R>?>>());
                    if (MissionBoardInfoPanels.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestMissionBoardPanel.Mask<R>?>>();
                        obj.MissionBoardInfoPanels.Specific = l;
                        foreach (var item in MissionBoardInfoPanels.Specific)
                        {
                            MaskItemIndexed<R, QuestMissionBoardPanel.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestMissionBoardPanel.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ScriptComment = eval(this.ScriptComment);
                obj.Timestamp = eval(this.Timestamp);
                obj.Unknown = eval(this.Unknown);
                if (DialogBranches != null)
                {
                    obj.DialogBranches = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogBranch.Mask<R>?>>?>(eval(this.DialogBranches.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogBranch.Mask<R>?>>());
                    if (DialogBranches.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogBranch.Mask<R>?>>();
                        obj.DialogBranches.Specific = l;
                        foreach (var item in DialogBranches.Specific)
                        {
                            MaskItemIndexed<R, DialogBranch.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogBranch.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (DialogTopics != null)
                {
                    obj.DialogTopics = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogTopic.Mask<R>?>>?>(eval(this.DialogTopics.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogTopic.Mask<R>?>>());
                    if (DialogTopics.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogTopic.Mask<R>?>>();
                        obj.DialogTopics.Specific = l;
                        foreach (var item in DialogTopics.Specific)
                        {
                            MaskItemIndexed<R, DialogTopic.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogTopic.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Scenes != null)
                {
                    obj.Scenes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Scene.Mask<R>?>>?>(eval(this.Scenes.Overall), Enumerable.Empty<MaskItemIndexed<R, Scene.Mask<R>?>>());
                    if (Scenes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Scene.Mask<R>?>>();
                        obj.Scenes.Specific = l;
                        foreach (var item in Scenes.Specific)
                        {
                            MaskItemIndexed<R, Scene.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Scene.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Quest.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Quest.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Quest.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.QuestType ?? true)
                    {
                        sb.AppendItem(QuestType, "QuestType");
                    }
                    if (printMask?.QuestFaction ?? true)
                    {
                        sb.AppendItem(QuestFaction, "QuestFaction");
                    }
                    if (printMask?.Event ?? true)
                    {
                        sb.AppendItem(Event, "Event");
                    }
                    if (printMask?.Location ?? true)
                    {
                        sb.AppendItem(Location, "Location");
                    }
                    if (printMask?.QuestTimeLimit ?? true)
                    {
                        sb.AppendItem(QuestTimeLimit, "QuestTimeLimit");
                    }
                    if (printMask?.SourceQuest ?? true)
                    {
                        sb.AppendItem(SourceQuest, "SourceQuest");
                    }
                    if ((printMask?.QDUPs?.Overall ?? true)
                        && QDUPs is {} QDUPsItem)
                    {
                        sb.AppendLine("QDUPs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(QDUPsItem.Overall);
                            if (QDUPsItem.Specific != null)
                            {
                                foreach (var subItem in QDUPsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.TextDisplayGlobals?.Overall ?? true)
                        && TextDisplayGlobals is {} TextDisplayGlobalsItem)
                    {
                        sb.AppendLine("TextDisplayGlobals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TextDisplayGlobalsItem.Overall);
                            if (TextDisplayGlobalsItem.Specific != null)
                            {
                                foreach (var subItem in TextDisplayGlobalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Filter ?? true)
                    {
                        sb.AppendItem(Filter, "Filter");
                    }
                    if (printMask?.Summary ?? true)
                    {
                        sb.AppendItem(Summary, "Summary");
                    }
                    if ((printMask?.DialogConditions?.Overall ?? true)
                        && DialogConditions is {} DialogConditionsItem)
                    {
                        sb.AppendLine("DialogConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DialogConditionsItem.Overall);
                            if (DialogConditionsItem.Specific != null)
                            {
                                foreach (var subItem in DialogConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.UnusedConditions?.Overall ?? true)
                        && UnusedConditions is {} UnusedConditionsItem)
                    {
                        sb.AppendLine("UnusedConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnusedConditionsItem.Overall);
                            if (UnusedConditionsItem.Specific != null)
                            {
                                foreach (var subItem in UnusedConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Stages?.Overall ?? true)
                        && Stages is {} StagesItem)
                    {
                        sb.AppendLine("Stages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(StagesItem.Overall);
                            if (StagesItem.Specific != null)
                            {
                                foreach (var subItem in StagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Objectives?.Overall ?? true)
                        && Objectives is {} ObjectivesItem)
                    {
                        sb.AppendLine("Objectives =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectivesItem.Overall);
                            if (ObjectivesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectivesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases is {} AliasesItem)
                    {
                        sb.AppendLine("Aliases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.QuestGroup ?? true)
                    {
                        sb.AppendItem(QuestGroup, "QuestGroup");
                    }
                    if (printMask?.SwfFile ?? true)
                    {
                        sb.AppendItem(SwfFile, "SwfFile");
                    }
                    if (printMask?.MissionTypeKeyword ?? true)
                    {
                        sb.AppendItem(MissionTypeKeyword, "MissionTypeKeyword");
                    }
                    if (printMask?.MissionBoardDescription ?? true)
                    {
                        sb.AppendItem(MissionBoardDescription, "MissionBoardDescription");
                    }
                    if ((printMask?.MissionBoardInfoPanels?.Overall ?? true)
                        && MissionBoardInfoPanels is {} MissionBoardInfoPanelsItem)
                    {
                        sb.AppendLine("MissionBoardInfoPanels =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MissionBoardInfoPanelsItem.Overall);
                            if (MissionBoardInfoPanelsItem.Specific != null)
                            {
                                foreach (var subItem in MissionBoardInfoPanelsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ScriptComment ?? true)
                    {
                        sb.AppendItem(ScriptComment, "ScriptComment");
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        sb.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.DialogBranches?.Overall ?? true)
                        && DialogBranches is {} DialogBranchesItem)
                    {
                        sb.AppendLine("DialogBranches =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DialogBranchesItem.Overall);
                            if (DialogBranchesItem.Specific != null)
                            {
                                foreach (var subItem in DialogBranchesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.DialogTopics?.Overall ?? true)
                        && DialogTopics is {} DialogTopicsItem)
                    {
                        sb.AppendLine("DialogTopics =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DialogTopicsItem.Overall);
                            if (DialogTopicsItem.Specific != null)
                            {
                                foreach (var subItem in DialogTopicsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Scenes?.Overall ?? true)
                        && Scenes is {} ScenesItem)
                    {
                        sb.AppendLine("Scenes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ScenesItem.Overall);
                            if (ScenesItem.Specific != null)
                            {
                                foreach (var subItem in ScenesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, QuestAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, QuestData.ErrorMask?>? Data;
            public Exception? QuestType;
            public Exception? QuestFaction;
            public Exception? Event;
            public Exception? Location;
            public Exception? QuestTimeLimit;
            public Exception? SourceQuest;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? QDUPs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TextDisplayGlobals;
            public Exception? Filter;
            public Exception? Summary;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? DialogConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? UnusedConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>? Stages;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>? Objectives;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AQuestAlias.ErrorMask?>>?>? Aliases;
            public Exception? QuestGroup;
            public Exception? SwfFile;
            public Exception? MissionTypeKeyword;
            public Exception? MissionBoardDescription;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestMissionBoardPanel.ErrorMask?>>?>? MissionBoardInfoPanels;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? ScriptComment;
            public Exception? Timestamp;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogBranch.ErrorMask?>>?>? DialogBranches;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogTopic.ErrorMask?>>?>? DialogTopics;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Scene.ErrorMask?>>?>? Scenes;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Quest_FieldIndex.Name:
                        return Name;
                    case Quest_FieldIndex.Components:
                        return Components;
                    case Quest_FieldIndex.Data:
                        return Data;
                    case Quest_FieldIndex.QuestType:
                        return QuestType;
                    case Quest_FieldIndex.QuestFaction:
                        return QuestFaction;
                    case Quest_FieldIndex.Event:
                        return Event;
                    case Quest_FieldIndex.Location:
                        return Location;
                    case Quest_FieldIndex.QuestTimeLimit:
                        return QuestTimeLimit;
                    case Quest_FieldIndex.SourceQuest:
                        return SourceQuest;
                    case Quest_FieldIndex.QDUPs:
                        return QDUPs;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        return TextDisplayGlobals;
                    case Quest_FieldIndex.Filter:
                        return Filter;
                    case Quest_FieldIndex.Summary:
                        return Summary;
                    case Quest_FieldIndex.DialogConditions:
                        return DialogConditions;
                    case Quest_FieldIndex.UnusedConditions:
                        return UnusedConditions;
                    case Quest_FieldIndex.Stages:
                        return Stages;
                    case Quest_FieldIndex.Objectives:
                        return Objectives;
                    case Quest_FieldIndex.Aliases:
                        return Aliases;
                    case Quest_FieldIndex.QuestGroup:
                        return QuestGroup;
                    case Quest_FieldIndex.SwfFile:
                        return SwfFile;
                    case Quest_FieldIndex.MissionTypeKeyword:
                        return MissionTypeKeyword;
                    case Quest_FieldIndex.MissionBoardDescription:
                        return MissionBoardDescription;
                    case Quest_FieldIndex.MissionBoardInfoPanels:
                        return MissionBoardInfoPanels;
                    case Quest_FieldIndex.Keywords:
                        return Keywords;
                    case Quest_FieldIndex.ScriptComment:
                        return ScriptComment;
                    case Quest_FieldIndex.Timestamp:
                        return Timestamp;
                    case Quest_FieldIndex.Unknown:
                        return Unknown;
                    case Quest_FieldIndex.DialogBranches:
                        return DialogBranches;
                    case Quest_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case Quest_FieldIndex.Scenes:
                        return Scenes;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, QuestAdapter.ErrorMask?>(ex, null);
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Quest_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, QuestData.ErrorMask?>(ex, null);
                        break;
                    case Quest_FieldIndex.QuestType:
                        this.QuestType = ex;
                        break;
                    case Quest_FieldIndex.QuestFaction:
                        this.QuestFaction = ex;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = ex;
                        break;
                    case Quest_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case Quest_FieldIndex.QuestTimeLimit:
                        this.QuestTimeLimit = ex;
                        break;
                    case Quest_FieldIndex.SourceQuest:
                        this.SourceQuest = ex;
                        break;
                    case Quest_FieldIndex.QDUPs:
                        this.QDUPs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Filter:
                        this.Filter = ex;
                        break;
                    case Quest_FieldIndex.Summary:
                        this.Summary = ex;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.UnusedConditions:
                        this.UnusedConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AQuestAlias.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.QuestGroup:
                        this.QuestGroup = ex;
                        break;
                    case Quest_FieldIndex.SwfFile:
                        this.SwfFile = ex;
                        break;
                    case Quest_FieldIndex.MissionTypeKeyword:
                        this.MissionTypeKeyword = ex;
                        break;
                    case Quest_FieldIndex.MissionBoardDescription:
                        this.MissionBoardDescription = ex;
                        break;
                    case Quest_FieldIndex.MissionBoardInfoPanels:
                        this.MissionBoardInfoPanels = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestMissionBoardPanel.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Quest_FieldIndex.ScriptComment:
                        this.ScriptComment = ex;
                        break;
                    case Quest_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Quest_FieldIndex.DialogBranches:
                        this.DialogBranches = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogBranch.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogTopic.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Scene.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, QuestAdapter.ErrorMask?>?)obj;
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, QuestData.ErrorMask?>?)obj;
                        break;
                    case Quest_FieldIndex.QuestType:
                        this.QuestType = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.QuestFaction:
                        this.QuestFaction = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.QuestTimeLimit:
                        this.QuestTimeLimit = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.SourceQuest:
                        this.SourceQuest = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.QDUPs:
                        this.QDUPs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Quest_FieldIndex.Filter:
                        this.Filter = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Summary:
                        this.Summary = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.UnusedConditions:
                        this.UnusedConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AQuestAlias.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.QuestGroup:
                        this.QuestGroup = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.SwfFile:
                        this.SwfFile = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.MissionTypeKeyword:
                        this.MissionTypeKeyword = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.MissionBoardDescription:
                        this.MissionBoardDescription = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.MissionBoardInfoPanels:
                        this.MissionBoardInfoPanels = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestMissionBoardPanel.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Quest_FieldIndex.ScriptComment:
                        this.ScriptComment = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.DialogBranches:
                        this.DialogBranches = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogBranch.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogTopic.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Scene.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (Components != null) return true;
                if (Data != null) return true;
                if (QuestType != null) return true;
                if (QuestFaction != null) return true;
                if (Event != null) return true;
                if (Location != null) return true;
                if (QuestTimeLimit != null) return true;
                if (SourceQuest != null) return true;
                if (QDUPs != null) return true;
                if (TextDisplayGlobals != null) return true;
                if (Filter != null) return true;
                if (Summary != null) return true;
                if (DialogConditions != null) return true;
                if (UnusedConditions != null) return true;
                if (Stages != null) return true;
                if (Objectives != null) return true;
                if (Aliases != null) return true;
                if (QuestGroup != null) return true;
                if (SwfFile != null) return true;
                if (MissionTypeKeyword != null) return true;
                if (MissionBoardDescription != null) return true;
                if (MissionBoardInfoPanels != null) return true;
                if (Keywords != null) return true;
                if (ScriptComment != null) return true;
                if (Timestamp != null) return true;
                if (Unknown != null) return true;
                if (DialogBranches != null) return true;
                if (DialogTopics != null) return true;
                if (Scenes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Data?.Print(sb);
                {
                    sb.AppendItem(QuestType, "QuestType");
                }
                {
                    sb.AppendItem(QuestFaction, "QuestFaction");
                }
                {
                    sb.AppendItem(Event, "Event");
                }
                {
                    sb.AppendItem(Location, "Location");
                }
                {
                    sb.AppendItem(QuestTimeLimit, "QuestTimeLimit");
                }
                {
                    sb.AppendItem(SourceQuest, "SourceQuest");
                }
                if (QDUPs is {} QDUPsItem)
                {
                    sb.AppendLine("QDUPs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(QDUPsItem.Overall);
                        if (QDUPsItem.Specific != null)
                        {
                            foreach (var subItem in QDUPsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (TextDisplayGlobals is {} TextDisplayGlobalsItem)
                {
                    sb.AppendLine("TextDisplayGlobals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TextDisplayGlobalsItem.Overall);
                        if (TextDisplayGlobalsItem.Specific != null)
                        {
                            foreach (var subItem in TextDisplayGlobalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Filter, "Filter");
                }
                {
                    sb.AppendItem(Summary, "Summary");
                }
                if (DialogConditions is {} DialogConditionsItem)
                {
                    sb.AppendLine("DialogConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DialogConditionsItem.Overall);
                        if (DialogConditionsItem.Specific != null)
                        {
                            foreach (var subItem in DialogConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (UnusedConditions is {} UnusedConditionsItem)
                {
                    sb.AppendLine("UnusedConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnusedConditionsItem.Overall);
                        if (UnusedConditionsItem.Specific != null)
                        {
                            foreach (var subItem in UnusedConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Stages is {} StagesItem)
                {
                    sb.AppendLine("Stages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(StagesItem.Overall);
                        if (StagesItem.Specific != null)
                        {
                            foreach (var subItem in StagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Objectives is {} ObjectivesItem)
                {
                    sb.AppendLine("Objectives =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectivesItem.Overall);
                        if (ObjectivesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectivesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Aliases is {} AliasesItem)
                {
                    sb.AppendLine("Aliases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(QuestGroup, "QuestGroup");
                }
                {
                    sb.AppendItem(SwfFile, "SwfFile");
                }
                {
                    sb.AppendItem(MissionTypeKeyword, "MissionTypeKeyword");
                }
                {
                    sb.AppendItem(MissionBoardDescription, "MissionBoardDescription");
                }
                if (MissionBoardInfoPanels is {} MissionBoardInfoPanelsItem)
                {
                    sb.AppendLine("MissionBoardInfoPanels =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MissionBoardInfoPanelsItem.Overall);
                        if (MissionBoardInfoPanelsItem.Specific != null)
                        {
                            foreach (var subItem in MissionBoardInfoPanelsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ScriptComment, "ScriptComment");
                }
                {
                    sb.AppendItem(Timestamp, "Timestamp");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                if (DialogBranches is {} DialogBranchesItem)
                {
                    sb.AppendLine("DialogBranches =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DialogBranchesItem.Overall);
                        if (DialogBranchesItem.Specific != null)
                        {
                            foreach (var subItem in DialogBranchesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (DialogTopics is {} DialogTopicsItem)
                {
                    sb.AppendLine("DialogTopics =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DialogTopicsItem.Overall);
                        if (DialogTopicsItem.Specific != null)
                        {
                            foreach (var subItem in DialogTopicsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Scenes is {} ScenesItem)
                {
                    sb.AppendLine("Scenes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ScenesItem.Overall);
                        if (ScenesItem.Specific != null)
                        {
                            foreach (var subItem in ScenesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.QuestType = this.QuestType.Combine(rhs.QuestType);
                ret.QuestFaction = this.QuestFaction.Combine(rhs.QuestFaction);
                ret.Event = this.Event.Combine(rhs.Event);
                ret.Location = this.Location.Combine(rhs.Location);
                ret.QuestTimeLimit = this.QuestTimeLimit.Combine(rhs.QuestTimeLimit);
                ret.SourceQuest = this.SourceQuest.Combine(rhs.SourceQuest);
                ret.QDUPs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.QDUPs?.Overall, rhs.QDUPs?.Overall), Noggog.ExceptionExt.Combine(this.QDUPs?.Specific, rhs.QDUPs?.Specific));
                ret.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TextDisplayGlobals?.Overall, rhs.TextDisplayGlobals?.Overall), Noggog.ExceptionExt.Combine(this.TextDisplayGlobals?.Specific, rhs.TextDisplayGlobals?.Specific));
                ret.Filter = this.Filter.Combine(rhs.Filter);
                ret.Summary = this.Summary.Combine(rhs.Summary);
                ret.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.DialogConditions?.Overall, rhs.DialogConditions?.Overall), Noggog.ExceptionExt.Combine(this.DialogConditions?.Specific, rhs.DialogConditions?.Specific));
                ret.UnusedConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.UnusedConditions?.Overall, rhs.UnusedConditions?.Overall), Noggog.ExceptionExt.Combine(this.UnusedConditions?.Specific, rhs.UnusedConditions?.Specific));
                ret.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Stages?.Overall, rhs.Stages?.Overall), Noggog.ExceptionExt.Combine(this.Stages?.Specific, rhs.Stages?.Specific));
                ret.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Objectives?.Overall, rhs.Objectives?.Overall), Noggog.ExceptionExt.Combine(this.Objectives?.Specific, rhs.Objectives?.Specific));
                ret.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AQuestAlias.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), Noggog.ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                ret.QuestGroup = this.QuestGroup.Combine(rhs.QuestGroup);
                ret.SwfFile = this.SwfFile.Combine(rhs.SwfFile);
                ret.MissionTypeKeyword = this.MissionTypeKeyword.Combine(rhs.MissionTypeKeyword);
                ret.MissionBoardDescription = this.MissionBoardDescription.Combine(rhs.MissionBoardDescription);
                ret.MissionBoardInfoPanels = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestMissionBoardPanel.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MissionBoardInfoPanels?.Overall, rhs.MissionBoardInfoPanels?.Overall), Noggog.ExceptionExt.Combine(this.MissionBoardInfoPanels?.Specific, rhs.MissionBoardInfoPanels?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.ScriptComment = this.ScriptComment.Combine(rhs.ScriptComment);
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.DialogBranches = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogBranch.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.DialogBranches?.Overall, rhs.DialogBranches?.Overall), Noggog.ExceptionExt.Combine(this.DialogBranches?.Specific, rhs.DialogBranches?.Specific));
                ret.DialogTopics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogTopic.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.DialogTopics?.Overall, rhs.DialogTopics?.Overall), Noggog.ExceptionExt.Combine(this.DialogTopics?.Specific, rhs.DialogTopics?.Specific));
                ret.Scenes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Scene.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Scenes?.Overall, rhs.Scenes?.Overall), Noggog.ExceptionExt.Combine(this.Scenes?.Specific, rhs.Scenes?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public QuestAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Name;
            public AComponent.TranslationMask? Components;
            public QuestData.TranslationMask? Data;
            public bool QuestType;
            public bool QuestFaction;
            public bool Event;
            public bool Location;
            public bool QuestTimeLimit;
            public bool SourceQuest;
            public bool QDUPs;
            public bool TextDisplayGlobals;
            public bool Filter;
            public bool Summary;
            public Condition.TranslationMask? DialogConditions;
            public Condition.TranslationMask? UnusedConditions;
            public QuestStage.TranslationMask? Stages;
            public QuestObjective.TranslationMask? Objectives;
            public AQuestAlias.TranslationMask? Aliases;
            public bool QuestGroup;
            public bool SwfFile;
            public bool MissionTypeKeyword;
            public bool MissionBoardDescription;
            public QuestMissionBoardPanel.TranslationMask? MissionBoardInfoPanels;
            public bool Keywords;
            public bool ScriptComment;
            public bool Timestamp;
            public bool Unknown;
            public DialogBranch.TranslationMask? DialogBranches;
            public DialogTopic.TranslationMask? DialogTopics;
            public Scene.TranslationMask? Scenes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.QuestType = defaultOn;
                this.QuestFaction = defaultOn;
                this.Event = defaultOn;
                this.Location = defaultOn;
                this.QuestTimeLimit = defaultOn;
                this.SourceQuest = defaultOn;
                this.QDUPs = defaultOn;
                this.TextDisplayGlobals = defaultOn;
                this.Filter = defaultOn;
                this.Summary = defaultOn;
                this.QuestGroup = defaultOn;
                this.SwfFile = defaultOn;
                this.MissionTypeKeyword = defaultOn;
                this.MissionBoardDescription = defaultOn;
                this.Keywords = defaultOn;
                this.ScriptComment = defaultOn;
                this.Timestamp = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((QuestType, null));
                ret.Add((QuestFaction, null));
                ret.Add((Event, null));
                ret.Add((Location, null));
                ret.Add((QuestTimeLimit, null));
                ret.Add((SourceQuest, null));
                ret.Add((QDUPs, null));
                ret.Add((TextDisplayGlobals, null));
                ret.Add((Filter, null));
                ret.Add((Summary, null));
                ret.Add((DialogConditions == null ? DefaultOn : !DialogConditions.GetCrystal().CopyNothing, DialogConditions?.GetCrystal()));
                ret.Add((UnusedConditions == null ? DefaultOn : !UnusedConditions.GetCrystal().CopyNothing, UnusedConditions?.GetCrystal()));
                ret.Add((Stages == null ? DefaultOn : !Stages.GetCrystal().CopyNothing, Stages?.GetCrystal()));
                ret.Add((Objectives == null ? DefaultOn : !Objectives.GetCrystal().CopyNothing, Objectives?.GetCrystal()));
                ret.Add((Aliases == null ? DefaultOn : !Aliases.GetCrystal().CopyNothing, Aliases?.GetCrystal()));
                ret.Add((QuestGroup, null));
                ret.Add((SwfFile, null));
                ret.Add((MissionTypeKeyword, null));
                ret.Add((MissionBoardDescription, null));
                ret.Add((MissionBoardInfoPanels == null ? DefaultOn : !MissionBoardInfoPanels.GetCrystal().CopyNothing, MissionBoardInfoPanels?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((ScriptComment, null));
                ret.Add((Timestamp, null));
                ret.Add((Unknown, null));
                ret.Add((DialogBranches == null ? DefaultOn : !DialogBranches.GetCrystal().CopyNothing, DialogBranches?.GetCrystal()));
                ret.Add((DialogTopics == null ? DefaultOn : !DialogTopics.GetCrystal().CopyNothing, DialogTopics?.GetCrystal()));
                ret.Add((Scenes == null ? DefaultOn : !Scenes.GetCrystal().CopyNothing, Scenes?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Quest_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestSetterCommon.Instance.RemapLinks(this, mapping);
        public Quest(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Quest(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Quest(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Quest(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Quest(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Quest>.ToString(this);
        }

        protected override Type LinkType => typeof(IQuest);

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => QuestCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => QuestSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => QuestSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => QuestSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IQuestGetter rhs) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Quest CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Quest();
            ((QuestSetterCommon)((IQuestGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Quest item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestSetterCommon)((IQuestGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Quest GetNew()
        {
            return new Quest();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuest :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IQuestInternal>,
        IMajorRecordEnumerable,
        INamed,
        INamedRequired,
        IQuestGetter,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new QuestAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new QuestData? Data { get; set; }
        new IFormLinkNullable<IKeywordGetter> QuestType { get; set; }
        new IFormLinkNullable<IKeywordGetter> QuestFaction { get; set; }
        new RecordType? Event { get; set; }
        new IFormLinkNullable<ILocationGetter> Location { get; set; }
        new IFormLinkNullable<IGlobalGetter> QuestTimeLimit { get; set; }
        new IFormLinkNullable<IQuestGetter> SourceQuest { get; set; }
        new ExtendedList<IFormLinkGetter<IDialogResponsesGetter>>? QDUPs { get; set; }
        new ExtendedList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; }
        new String? Filter { get; set; }
        new String? Summary { get; set; }
        new ExtendedList<Condition> DialogConditions { get; }
        new ExtendedList<Condition>? UnusedConditions { get; set; }
        new ExtendedList<QuestStage> Stages { get; }
        new ExtendedList<QuestObjective> Objectives { get; }
        new ExtendedList<AQuestAlias>? Aliases { get; set; }
        new IFormLinkNullable<IKeywordGetter> QuestGroup { get; set; }
        new String? SwfFile { get; set; }
        new IFormLinkNullable<IKeywordGetter> MissionTypeKeyword { get; set; }
        new TranslatedString? MissionBoardDescription { get; set; }
        new ExtendedList<QuestMissionBoardPanel> MissionBoardInfoPanels { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new String? ScriptComment { get; set; }
        new Int32 Timestamp { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<DialogBranch> DialogBranches { get; }
        new ExtendedList<DialogTopic> DialogTopics { get; }
        new ExtendedList<Scene> Scenes { get; }
        #region Mutagen
        new Quest.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IQuestInternal :
        IStarfieldMajorRecordInternal,
        IQuest,
        IQuestGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.QUST)]
    public partial interface IQuestGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IQuestGetter>,
        IMajorRecordGetterEnumerable,
        IMapsToGetter<IQuestGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IQuestAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        IReadOnlyList<IAComponentGetter> Components { get; }
        IQuestDataGetter? Data { get; }
        IFormLinkNullableGetter<IKeywordGetter> QuestType { get; }
        IFormLinkNullableGetter<IKeywordGetter> QuestFaction { get; }
        RecordType? Event { get; }
        IFormLinkNullableGetter<ILocationGetter> Location { get; }
        IFormLinkNullableGetter<IGlobalGetter> QuestTimeLimit { get; }
        IFormLinkNullableGetter<IQuestGetter> SourceQuest { get; }
        IReadOnlyList<IFormLinkGetter<IDialogResponsesGetter>>? QDUPs { get; }
        IReadOnlyList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; }
        String? Filter { get; }
        String? Summary { get; }
        IReadOnlyList<IConditionGetter> DialogConditions { get; }
        IReadOnlyList<IConditionGetter>? UnusedConditions { get; }
        IReadOnlyList<IQuestStageGetter> Stages { get; }
        IReadOnlyList<IQuestObjectiveGetter> Objectives { get; }
        IReadOnlyList<IAQuestAliasGetter>? Aliases { get; }
        IFormLinkNullableGetter<IKeywordGetter> QuestGroup { get; }
        String? SwfFile { get; }
        IFormLinkNullableGetter<IKeywordGetter> MissionTypeKeyword { get; }
        ITranslatedStringGetter? MissionBoardDescription { get; }
        IReadOnlyList<IQuestMissionBoardPanelGetter> MissionBoardInfoPanels { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        String? ScriptComment { get; }
        Int32 Timestamp { get; }
        Int32 Unknown { get; }
        IReadOnlyList<IDialogBranchGetter> DialogBranches { get; }
        IReadOnlyList<IDialogTopicGetter> DialogTopics { get; }
        IReadOnlyList<ISceneGetter> Scenes { get; }

        #region Mutagen
        Quest.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class QuestMixIn
    {
        public static void Clear(this IQuestInternal item)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Quest.Mask<bool> GetEqualsMask(
            this IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestGetter item,
            IQuestGetter rhs,
            Quest.TranslationMask? equalsMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IQuestGetter obj)
        {
            return ((QuestCommon)((IQuestGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IQuestGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((QuestCommon)((IQuestGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IQuestGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((QuestCommon)((IQuestGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IQuestInternal obj)
        {
            return ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IQuestInternal obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IQuestInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            HashSet<FormKey> keys)
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IQuestInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IQuestInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IQuestInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IQuestInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IQuestInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IQuestInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((QuestSetterCommon)((IQuestGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Quest Duplicate(
            this IQuestGetter item,
            FormKey formKey,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Quest Duplicate(
            this IQuestGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Quest_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Name = 8,
        Components = 9,
        Data = 10,
        QuestType = 11,
        QuestFaction = 12,
        Event = 13,
        Location = 14,
        QuestTimeLimit = 15,
        SourceQuest = 16,
        QDUPs = 17,
        TextDisplayGlobals = 18,
        Filter = 19,
        Summary = 20,
        DialogConditions = 21,
        UnusedConditions = 22,
        Stages = 23,
        Objectives = 24,
        Aliases = 25,
        QuestGroup = 26,
        SwfFile = 27,
        MissionTypeKeyword = 28,
        MissionBoardDescription = 29,
        MissionBoardInfoPanels = 30,
        Keywords = 31,
        ScriptComment = 32,
        Timestamp = 33,
        Unknown = 34,
        DialogBranches = 35,
        DialogTopics = 36,
        Scenes = 37,
    }
    #endregion

    #region Registration
    internal partial class Quest_Registration : ILoquiRegistration
    {
        public static readonly Quest_Registration Instance = new Quest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 31;

        public const ushort FieldCount = 38;

        public static readonly Type MaskType = typeof(Quest.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Quest.ErrorMask);

        public static readonly Type ClassType = typeof(Quest);

        public static readonly Type GetterType = typeof(IQuestGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuest);

        public static readonly Type? InternalSetterType = typeof(IQuestInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Quest";

        public const string Name = "Quest";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.QUST;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.QUST);
            var all = RecordCollection.Factory(
                RecordTypes.QUST,
                RecordTypes.ALED,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.FULL,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.DNAM,
                RecordTypes.QTYP,
                RecordTypes.FTYP,
                RecordTypes.ENAM,
                RecordTypes.LNAM,
                RecordTypes.QTLM,
                RecordTypes.QSRC,
                RecordTypes.QDUP,
                RecordTypes.QTGL,
                RecordTypes.FLTR,
                RecordTypes.NAM3,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.NEXT,
                RecordTypes.INDX,
                RecordTypes.QSDT,
                RecordTypes.NAM2,
                RecordTypes.SCFC,
                RecordTypes.CNAM,
                RecordTypes.QSRD,
                RecordTypes.NAM1,
                RecordTypes.QRXP,
                RecordTypes.QRCR,
                RecordTypes.QRRD,
                RecordTypes.QOBJ,
                RecordTypes.FNAM,
                RecordTypes.NNAM,
                RecordTypes.QSTA,
                RecordTypes.ANAM,
                RecordTypes.ALST,
                RecordTypes.ALLS,
                RecordTypes.ALCS,
                RecordTypes.ALMI,
                RecordTypes.GNAM,
                RecordTypes.SNAM,
                RecordTypes.QMTY,
                RecordTypes.QMSU,
                RecordTypes.QMDT,
                RecordTypes.QMDP,
                RecordTypes.QMDS,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.SCCM,
                RecordTypes.DLBR,
                RecordTypes.QNAM,
                RecordTypes.TNAM,
                RecordTypes.DIAL,
                RecordTypes.ACAC,
                RecordTypes.ACYI,
                RecordTypes.AGRE,
                RecordTypes.ALIL,
                RecordTypes.ALKL,
                RecordTypes.ALTC,
                RecordTypes.ALTN,
                RecordTypes.ASKF,
                RecordTypes.ASKG,
                RecordTypes.ASNC,
                RecordTypes.ASSA,
                RecordTypes.ASSI,
                RecordTypes.ATCK,
                RecordTypes.AVTH,
                RecordTypes.BAEX,
                RecordTypes.BASH,
                RecordTypes.BGST,
                RecordTypes.BLED,
                RecordTypes.BLHE,
                RecordTypes.BLOC,
                RecordTypes.BREA,
                RecordTypes.BRIB,
                RecordTypes.COLO,
                RecordTypes.COTN,
                RecordTypes.CRIL,
                RecordTypes.CUST,
                RecordTypes.DEOB,
                RecordTypes.DETH,
                RecordTypes.DFDA,
                RecordTypes.ENBZ,
                RecordTypes.ENKL,
                RecordTypes.ENTE,
                RecordTypes.EXBZ,
                RecordTypes.FEXT,
                RecordTypes.FIWE,
                RecordTypes.FLAT,
                RecordTypes.FLBK,
                RecordTypes.FLEE,
                RecordTypes.FRJT,
                RecordTypes.FVDL,
                RecordTypes.GBYE,
                RecordTypes.GIFF,
                RecordTypes.GREE,
                RecordTypes.GRNT,
                RecordTypes.HEAL,
                RecordTypes.HELO,
                RecordTypes.HIT_,
                RecordTypes.IDAT,
                RecordTypes.IDLE,
                RecordTypes.IMNG,
                RecordTypes.IMNU,
                RecordTypes.IMPT,
                RecordTypes.IMQU,
                RecordTypes.INTI,
                RecordTypes.JUMP,
                RecordTypes.KNOO,
                RecordTypes.LOIL,
                RecordTypes.LOOB,
                RecordTypes.LOTC,
                RecordTypes.LOTN,
                RecordTypes.LWBS,
                RecordTypes.MCO2,
                RecordTypes.MREF,
                RecordTypes.MUNC,
                RecordTypes.MURD,
                RecordTypes.NOTA,
                RecordTypes.NOTC,
                RecordTypes.NOTI,
                RecordTypes.NOTL,
                RecordTypes.OBCO,
                RecordTypes.ORAV,
                RecordTypes.ORFB,
                RecordTypes.ORFL,
                RecordTypes.ORTC,
                RecordTypes.OUTB,
                RecordTypes.PAAC,
                RecordTypes.PACO,
                RecordTypes.PADR,
                RecordTypes.PAFI,
                RecordTypes.PAFU,
                RecordTypes.PATR,
                RecordTypes.PATT,
                RecordTypes.PCPS,
                RecordTypes.PCSH,
                RecordTypes.PCSS,
                RecordTypes.PFGT,
                RecordTypes.PICC,
                RecordTypes.PICN,
                RecordTypes.PICT,
                RecordTypes.PIRA,
                RecordTypes.PIRN,
                RecordTypes.POAT,
                RecordTypes.PRJT,
                RecordTypes.PURS,
                RecordTypes.RANG,
                RecordTypes.RCEX,
                RecordTypes.RECH,
                RecordTypes.REEX,
                RecordTypes.REFU,
                RecordTypes.RELA,
                RecordTypes.RELE,
                RecordTypes.REPA,
                RecordTypes.RQST,
                RecordTypes.RUMO,
                RecordTypes.SCCH,
                RecordTypes.SCDC,
                RecordTypes.SCDI,
                RecordTypes.SCEN,
                RecordTypes.SCGC,
                RecordTypes.SCJC,
                RecordTypes.SCLS,
                RecordTypes.SCRO,
                RecordTypes.SCTI,
                RecordTypes.SCUC,
                RecordTypes.SEED,
                RecordTypes.SEER,
                RecordTypes.SEGD,
                RecordTypes.SEGR,
                RecordTypes.SERU,
                RecordTypes.SESD,
                RecordTypes.SESR,
                RecordTypes.SETD,
                RecordTypes.SETR,
                RecordTypes.SEWD,
                RecordTypes.SEWR,
                RecordTypes.SGNC,
                RecordTypes.SHOK,
                RecordTypes.SHOW,
                RecordTypes.SHRE,
                RecordTypes.SHRP,
                RecordTypes.SMUG,
                RecordTypes.SRTW,
                RecordTypes.SSEC,
                RecordTypes.SSED,
                RecordTypes.SSER,
                RecordTypes.SSGD,
                RecordTypes.SSGR,
                RecordTypes.SSLC,
                RecordTypes.SSSD,
                RecordTypes.SSSZ,
                RecordTypes.SSTD,
                RecordTypes.SSTR,
                RecordTypes.SSWD,
                RecordTypes.SSWR,
                RecordTypes.STAY,
                RecordTypes.STEA,
                RecordTypes.STEB,
                RecordTypes.STFN,
                RecordTypes.STOF,
                RecordTypes.STTB,
                RecordTypes.SWMW,
                RecordTypes.TASF,
                RecordTypes.TAUT,
                RecordTypes.THGR,
                RecordTypes.THRB,
                RecordTypes.TITG,
                RecordTypes.TRAD,
                RecordTypes.TRAI,
                RecordTypes.TRAN,
                RecordTypes.TRAV,
                RecordTypes.TRES,
                RecordTypes.TREX,
                RecordTypes.TRNV,
                RecordTypes.USMG,
                RecordTypes.VPAW,
                RecordTypes.VPEB,
                RecordTypes.VPEL,
                RecordTypes.VPES,
                RecordTypes.VPEV,
                RecordTypes.VPEW,
                RecordTypes.VPHC,
                RecordTypes.VPKC,
                RecordTypes.VPKW,
                RecordTypes.VPLV,
                RecordTypes.VPNM,
                RecordTypes.VPSL,
                RecordTypes.VPSS,
                RecordTypes.VPTM,
                RecordTypes.VPVC,
                RecordTypes.WFPI,
                RecordTypes.WTCR,
                RecordTypes.YIEL,
                RecordTypes.ZKEY,
                RecordTypes.PNAM,
                RecordTypes.BNAM,
                RecordTypes.KNAM,
                RecordTypes.DATA,
                RecordTypes.TIFL,
                RecordTypes.TIFC,
                RecordTypes.INFO,
                RecordTypes.TRDA,
                RecordTypes.TROT,
                RecordTypes.NAM4,
                RecordTypes.NAM9,
                RecordTypes.HNAM,
                RecordTypes.RVSH,
                RecordTypes.RNAM,
                RecordTypes.TSCE,
                RecordTypes.INTV,
                RecordTypes.WED0,
                RecordTypes.TIQS,
                RecordTypes.NAM0,
                RecordTypes.MODQ,
                RecordTypes.INAM,
                RecordTypes.COCT,
                RecordTypes.NAM8,
                RecordTypes.SCSP,
                RecordTypes.PERK,
                RecordTypes.WNAM,
                RecordTypes.SCQS,
                RecordTypes.SPMV,
                RecordTypes.ALID,
                RecordTypes.SNOT,
                RecordTypes.VNAM,
                RecordTypes.BOLV,
                RecordTypes.XNAM,
                RecordTypes.SCPI,
                RecordTypes.JNAM,
                RecordTypes.SCPP,
                RecordTypes.SPMA,
                RecordTypes.SPEX,
                RecordTypes.SPRK,
                RecordTypes.SPRW,
                RecordTypes.SPRP,
                RecordTypes.SPDF,
                RecordTypes.SPPQ,
                RecordTypes.SPKW,
                RecordTypes.SPPK,
                RecordTypes.SPKY,
                RecordTypes.DEVT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static IReadOnlyCollection<int> SubgroupTypes { get; } = new HashSet<int>(){ 10 };
        public static bool IsPartialFormable => true;
        public static readonly Type BinaryWriteTranslation = typeof(QuestBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly QuestSetterCommon Instance = new QuestSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.Components.Clear();
            item.Data = null;
            item.QuestType.Clear();
            item.QuestFaction.Clear();
            item.Event = default;
            item.Location.Clear();
            item.QuestTimeLimit.Clear();
            item.SourceQuest.Clear();
            item.QDUPs = null;
            item.TextDisplayGlobals.Clear();
            item.Filter = default;
            item.Summary = default;
            item.DialogConditions.Clear();
            item.UnusedConditions = null;
            item.Stages.Clear();
            item.Objectives.Clear();
            item.Aliases = null;
            item.QuestGroup.Clear();
            item.SwfFile = default;
            item.MissionTypeKeyword.Clear();
            item.MissionBoardDescription = default;
            item.MissionBoardInfoPanels.Clear();
            item.Keywords = null;
            item.ScriptComment = default;
            item.Timestamp = default(Int32);
            item.Unknown = default(Int32);
            item.DialogBranches.Clear();
            item.DialogTopics.Clear();
            item.Scenes.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuest obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.QuestType.Relink(mapping);
            obj.QuestFaction.Relink(mapping);
            obj.Location.Relink(mapping);
            obj.QuestTimeLimit.Relink(mapping);
            obj.SourceQuest.Relink(mapping);
            obj.QDUPs?.RemapLinks(mapping);
            obj.TextDisplayGlobals.RemapLinks(mapping);
            obj.DialogConditions.RemapLinks(mapping);
            obj.UnusedConditions?.RemapLinks(mapping);
            obj.Stages.RemapLinks(mapping);
            obj.Objectives.RemapLinks(mapping);
            obj.Aliases?.RemapLinks(mapping);
            obj.QuestGroup.Relink(mapping);
            obj.MissionTypeKeyword.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.DialogBranches.RemapLinks(mapping);
            obj.DialogTopics.RemapLinks(mapping);
            obj.Scenes.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IQuestInternal obj)
        {
            return EnumerateMajorRecordsLoopLogic(obj: obj);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecordsLoopLogic(IQuestInternal obj)
        {
            foreach (var item in QuestCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IQuestInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return QuestCommon.Instance.EnumerateMajorRecords(obj);
            return QuestCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IQuestInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            return EnumerateMajorRecordsLoopLogic(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(
            IQuestInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in QuestCommon.Instance.EnumerateMajorRecordsLoopLogic(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IQuestInternal obj,
            HashSet<FormKey> keys)
        {
            obj.DialogBranches.Remove(keys);
            obj.DialogTopics.Remove(keys);
            obj.DialogTopics.ForEach(i => i.Remove(keys));
            obj.Scenes.Remove(keys);
        }
        
        public void Remove(
            IQuestInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    if (!Quest_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                case "AnimationGraphComponent":
                case "IAnimationGraphComponentGetter":
                case "IAnimationGraphComponent":
                case "AttachParentArrayComponent":
                case "IAttachParentArrayComponentGetter":
                case "IAttachParentArrayComponent":
                case "ActivityTrackerComponent":
                case "IActivityTrackerComponentGetter":
                case "IActivityTrackerComponent":
                case "ScannableComponent":
                case "IScannableComponentGetter":
                case "IScannableComponent":
                case "KeywordFormComponent":
                case "IKeywordFormComponentGetter":
                case "IKeywordFormComponent":
                case "ObjectWindowFilterComponent":
                case "IObjectWindowFilterComponentGetter":
                case "IObjectWindowFilterComponent":
                case "ContactShadowComponent":
                case "IContactShadowComponentGetter":
                case "IContactShadowComponent":
                case "FullNameComponent":
                case "IFullNameComponentGetter":
                case "IFullNameComponent":
                case "ModelComponent":
                case "IModelComponentGetter":
                case "IModelComponent":
                case "PlanetModelComponent":
                case "IPlanetModelComponentGetter":
                case "IPlanetModelComponent":
                case "HoudiniDataComponent":
                case "IHoudiniDataComponentGetter":
                case "IHoudiniDataComponent":
                case "SkinFormComponent":
                case "ISkinFormComponentGetter":
                case "ISkinFormComponent":
                case "BodyPartInfoComponent":
                case "IBodyPartInfoComponentGetter":
                case "IBodyPartInfoComponent":
                case "EffectSequenceComponent":
                case "IEffectSequenceComponentGetter":
                case "IEffectSequenceComponent":
                case "LightAttachmentFormComponent":
                case "ILightAttachmentFormComponentGetter":
                case "ILightAttachmentFormComponent":
                case "LightAnimFormComponent":
                case "ILightAnimFormComponentGetter":
                case "ILightAnimFormComponent":
                case "ParticleSystemComponent":
                case "IParticleSystemComponentGetter":
                case "IParticleSystemComponent":
                case "LodOwnerComponent":
                case "ILodOwnerComponentGetter":
                case "ILodOwnerComponent":
                case "SoundTagComponent":
                case "ISoundTagComponentGetter":
                case "ISoundTagComponent":
                case "DisplayCaseComponent":
                case "IDisplayCaseComponentGetter":
                case "IDisplayCaseComponent":
                case "ObjectPaletteDefaultsComponent":
                case "IObjectPaletteDefaultsComponentGetter":
                case "IObjectPaletteDefaultsComponent":
                case "VolumesComponent":
                case "IVolumesComponentGetter":
                case "IVolumesComponent":
                case "PlanetContentManagerContentPropertiesComponent":
                case "IPlanetContentManagerContentPropertiesComponentGetter":
                case "IPlanetContentManagerContentPropertiesComponent":
                case "ShipManagementComponent":
                case "IShipManagementComponentGetter":
                case "IShipManagementComponent":
                case "ExternalDataSourceComponent":
                case "IExternalDataSourceComponentGetter":
                case "IExternalDataSourceComponent":
                case "ForcedLocRefTypeComponent":
                case "IForcedLocRefTypeComponentGetter":
                case "IForcedLocRefTypeComponent":
                case "LinkedVoiceTypeComponent":
                case "ILinkedVoiceTypeComponentGetter":
                case "ILinkedVoiceTypeComponent":
                case "PapyrusScriptsComponent":
                case "IPapyrusScriptsComponentGetter":
                case "IPapyrusScriptsComponent":
                case "PathingDataComponent":
                case "IPathingDataComponentGetter":
                case "IPathingDataComponent":
                case "PropertySheetComponent":
                case "IPropertySheetComponentGetter":
                case "IPropertySheetComponent":
                case "SpaceshipAIActorComponent":
                case "ISpaceshipAIActorComponentGetter":
                case "ISpaceshipAIActorComponent":
                case "SpaceshipEquipmentComponent":
                case "ISpaceshipEquipmentComponentGetter":
                case "ISpaceshipEquipmentComponent":
                case "SpaceshipWeaponBindingsComponent":
                case "ISpaceshipWeaponBindingsComponentGetter":
                case "ISpaceshipWeaponBindingsComponent":
                case "FormLinkDataComponent":
                case "IFormLinkDataComponentGetter":
                case "IFormLinkDataComponent":
                case "BlueprintComponent":
                case "IBlueprintComponentGetter":
                case "IBlueprintComponent":
                case "DestructibleObjectComponent":
                case "IDestructibleObjectComponentGetter":
                case "IDestructibleObjectComponent":
                case "ContainerComponent":
                case "IContainerComponentGetter":
                case "IContainerComponent":
                case "MagicTargetFormComponent":
                case "IMagicTargetFormComponentGetter":
                case "IMagicTargetFormComponent":
                case "StoredTraversalsComponent":
                case "IStoredTraversalsComponentGetter":
                case "IStoredTraversalsComponent":
                case "AddToInventoryOnDestroyComponent":
                case "IAddToInventoryOnDestroyComponentGetter":
                case "IAddToInventoryOnDestroyComponent":
                case "CrowdComponent":
                case "ICrowdComponentGetter":
                case "ICrowdComponent":
                case "SpaceshipHullCodeComponent":
                case "ISpaceshipHullCodeComponentGetter":
                case "ISpaceshipHullCodeComponent":
                case "PrimitiveComponent":
                case "IPrimitiveComponentGetter":
                case "IPrimitiveComponent":
                case "SpawnOnDestroyComponent":
                case "ISpawnOnDestroyComponentGetter":
                case "ISpawnOnDestroyComponent":
                case "WorldSpaceOverlayComponent":
                case "IWorldSpaceOverlayComponentGetter":
                case "IWorldSpaceOverlayComponent":
                case "ReflectionProbesComponent":
                case "IReflectionProbesComponentGetter":
                case "IReflectionProbesComponent":
                case "ImageSpaceModifiableFormComponent":
                case "IImageSpaceModifiableFormComponentGetter":
                case "IImageSpaceModifiableFormComponent":
                case "LensFlareAttachmentFormComponent":
                case "ILensFlareAttachmentFormComponentGetter":
                case "ILensFlareAttachmentFormComponent":
                case "MaterialPropertyComponent":
                case "IMaterialPropertyComponentGetter":
                case "IMaterialPropertyComponent":
                case "WorkshopItemColorComponent":
                case "IWorkshopItemColorComponentGetter":
                case "IWorkshopItemColorComponent":
                case "SpacePhysicsComponent":
                case "ISpacePhysicsComponentGetter":
                case "ISpacePhysicsComponent":
                case "BlockEditorMetaDataComponent":
                case "IBlockEditorMetaDataComponentGetter":
                case "IBlockEditorMetaDataComponent":
                case "BlockCellHeightGridComponent":
                case "IBlockCellHeightGridComponentGetter":
                case "IBlockCellHeightGridComponent":
                case "BlockHeightAdjustmentComponent":
                case "IBlockHeightAdjustmentComponentGetter":
                case "IBlockHeightAdjustmentComponent":
                case "UniqueOverlayListComponent":
                case "IUniqueOverlayListComponentGetter":
                case "IUniqueOverlayListComponent":
                case "UniquePatternPlacementInfoComponent":
                case "IUniquePatternPlacementInfoComponentGetter":
                case "IUniquePatternPlacementInfoComponent":
                case "SurfaceTreePatternSwapInfoComponent":
                case "ISurfaceTreePatternSwapInfoComponentGetter":
                case "ISurfaceTreePatternSwapInfoComponent":
                case "OrbitedDataComponent":
                case "IOrbitedDataComponentGetter":
                case "IOrbitedDataComponent":
                case "StarDataComponent":
                case "IStarDataComponentGetter":
                case "IStarDataComponent":
                case "OrbitalDataComponent":
                case "IOrbitalDataComponentGetter":
                case "IOrbitalDataComponent":
                case "CityMapsUsageComponent":
                case "ICityMapsUsageComponentGetter":
                case "ICityMapsUsageComponent":
                case "VehicleManagementComponent":
                case "IVehicleManagementComponentGetter":
                case "IVehicleManagementComponent":
                case "VehicleConfigComponent":
                case "IVehicleConfigComponentGetter":
                case "IVehicleConfigComponent":
                case "OverlayDesignatedPlacementInfoComponent":
                case "IOverlayDesignatedPlacementInfoComponentGetter":
                case "IOverlayDesignatedPlacementInfoComponent":
                    break;
                case "Condition":
                case "IConditionGetter":
                case "ICondition":
                case "ConditionGlobal":
                case "IConditionGlobalGetter":
                case "IConditionGlobal":
                case "ConditionFloat":
                case "IConditionFloatGetter":
                case "IConditionFloat":
                    break;
                case "QuestStage":
                case "IQuestStageGetter":
                case "IQuestStage":
                    break;
                case "QuestObjective":
                case "IQuestObjectiveGetter":
                case "IQuestObjective":
                    break;
                case "AQuestAlias":
                case "IAQuestAliasGetter":
                case "IAQuestAlias":
                case "QuestReferenceAlias":
                case "IQuestReferenceAliasGetter":
                case "IQuestReferenceAlias":
                case "QuestLocationAlias":
                case "IQuestLocationAliasGetter":
                case "IQuestLocationAlias":
                case "QuestCollectionAlias":
                case "IQuestCollectionAliasGetter":
                case "IQuestCollectionAlias":
                    break;
                case "QuestMissionBoardPanel":
                case "IQuestMissionBoardPanelGetter":
                case "IQuestMissionBoardPanel":
                    break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    obj.DialogBranches.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.DialogTopics.RemoveWhere(i => keys.Contains(i.FormKey));
                    foreach (var subItem in obj.DialogTopics)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    obj.Scenes.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.DialogTopics)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IQuest obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.WhereCastable<IDialogTopicGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IQuest obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.DialogTopics.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IQuestInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestBinaryCreateTranslation.FillBinaryRecordTypes);
            QuestBinaryCreateTranslation.ParseSubgroupsLogic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class QuestCommon : StarfieldMajorRecordCommon
    {
        public new static readonly QuestCommon Instance = new QuestCommon();

        public Quest.Mask<bool> GetEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Quest.Mask<bool>(false);
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            Quest.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.QuestType = item.QuestType.Equals(rhs.QuestType);
            ret.QuestFaction = item.QuestFaction.Equals(rhs.QuestFaction);
            ret.Event = item.Event == rhs.Event;
            ret.Location = item.Location.Equals(rhs.Location);
            ret.QuestTimeLimit = item.QuestTimeLimit.Equals(rhs.QuestTimeLimit);
            ret.SourceQuest = item.SourceQuest.Equals(rhs.SourceQuest);
            ret.QDUPs = item.QDUPs.CollectionEqualsHelper(
                rhs.QDUPs,
                (l, r) => object.Equals(l, r),
                include);
            ret.TextDisplayGlobals = item.TextDisplayGlobals.CollectionEqualsHelper(
                rhs.TextDisplayGlobals,
                (l, r) => object.Equals(l, r),
                include);
            ret.Filter = string.Equals(item.Filter, rhs.Filter);
            ret.Summary = string.Equals(item.Summary, rhs.Summary);
            ret.DialogConditions = item.DialogConditions.CollectionEqualsHelper(
                rhs.DialogConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnusedConditions = item.UnusedConditions.CollectionEqualsHelper(
                rhs.UnusedConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Stages = item.Stages.CollectionEqualsHelper(
                rhs.Stages,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objectives = item.Objectives.CollectionEqualsHelper(
                rhs.Objectives,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.QuestGroup = item.QuestGroup.Equals(rhs.QuestGroup);
            ret.SwfFile = string.Equals(item.SwfFile, rhs.SwfFile);
            ret.MissionTypeKeyword = item.MissionTypeKeyword.Equals(rhs.MissionTypeKeyword);
            ret.MissionBoardDescription = object.Equals(item.MissionBoardDescription, rhs.MissionBoardDescription);
            ret.MissionBoardInfoPanels = item.MissionBoardInfoPanels.CollectionEqualsHelper(
                rhs.MissionBoardInfoPanels,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.ScriptComment = string.Equals(item.ScriptComment, rhs.ScriptComment);
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.DialogBranches = item.DialogBranches.CollectionEqualsHelper(
                rhs.DialogBranches,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DialogTopics = item.DialogTopics.CollectionEqualsHelper(
                rhs.DialogTopics,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Scenes = item.Scenes.CollectionEqualsHelper(
                rhs.Scenes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Quest =>");
            }
            else
            {
                sb.AppendLine($"{name} (Quest) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestGetter item,
            StructuredStringBuilder sb,
            Quest.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if (printMask?.QuestType ?? true)
            {
                sb.AppendItem(item.QuestType.FormKeyNullable, "QuestType");
            }
            if (printMask?.QuestFaction ?? true)
            {
                sb.AppendItem(item.QuestFaction.FormKeyNullable, "QuestFaction");
            }
            if ((printMask?.Event ?? true)
                && item.Event is {} EventItem)
            {
                sb.AppendItem(EventItem, "Event");
            }
            if (printMask?.Location ?? true)
            {
                sb.AppendItem(item.Location.FormKeyNullable, "Location");
            }
            if (printMask?.QuestTimeLimit ?? true)
            {
                sb.AppendItem(item.QuestTimeLimit.FormKeyNullable, "QuestTimeLimit");
            }
            if (printMask?.SourceQuest ?? true)
            {
                sb.AppendItem(item.SourceQuest.FormKeyNullable, "SourceQuest");
            }
            if ((printMask?.QDUPs?.Overall ?? true)
                && item.QDUPs is {} QDUPsItem)
            {
                sb.AppendLine("QDUPs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in QDUPsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.TextDisplayGlobals?.Overall ?? true)
            {
                sb.AppendLine("TextDisplayGlobals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TextDisplayGlobals)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Filter ?? true)
                && item.Filter is {} FilterItem)
            {
                sb.AppendItem(FilterItem, "Filter");
            }
            if ((printMask?.Summary ?? true)
                && item.Summary is {} SummaryItem)
            {
                sb.AppendItem(SummaryItem, "Summary");
            }
            if (printMask?.DialogConditions?.Overall ?? true)
            {
                sb.AppendLine("DialogConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DialogConditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.UnusedConditions?.Overall ?? true)
                && item.UnusedConditions is {} UnusedConditionsItem)
            {
                sb.AppendLine("UnusedConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in UnusedConditionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Stages?.Overall ?? true)
            {
                sb.AppendLine("Stages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Stages)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Objectives?.Overall ?? true)
            {
                sb.AppendLine("Objectives =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Objectives)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Aliases?.Overall ?? true)
                && item.Aliases is {} AliasesItem)
            {
                sb.AppendLine("Aliases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AliasesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.QuestGroup ?? true)
            {
                sb.AppendItem(item.QuestGroup.FormKeyNullable, "QuestGroup");
            }
            if ((printMask?.SwfFile ?? true)
                && item.SwfFile is {} SwfFileItem)
            {
                sb.AppendItem(SwfFileItem, "SwfFile");
            }
            if (printMask?.MissionTypeKeyword ?? true)
            {
                sb.AppendItem(item.MissionTypeKeyword.FormKeyNullable, "MissionTypeKeyword");
            }
            if ((printMask?.MissionBoardDescription ?? true)
                && item.MissionBoardDescription is {} MissionBoardDescriptionItem)
            {
                sb.AppendItem(MissionBoardDescriptionItem, "MissionBoardDescription");
            }
            if (printMask?.MissionBoardInfoPanels?.Overall ?? true)
            {
                sb.AppendLine("MissionBoardInfoPanels =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MissionBoardInfoPanels)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ScriptComment ?? true)
                && item.ScriptComment is {} ScriptCommentItem)
            {
                sb.AppendItem(ScriptCommentItem, "ScriptComment");
            }
            if (printMask?.Timestamp ?? true)
            {
                sb.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.DialogBranches?.Overall ?? true)
            {
                sb.AppendLine("DialogBranches =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DialogBranches)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                sb.AppendLine("DialogTopics =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DialogTopics)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Scenes?.Overall ?? true)
            {
                sb.AppendLine("Scenes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Scenes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Quest_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Quest_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Quest_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestGetter? lhs,
            IQuestGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((QuestAdapterCommon)((IQuestAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((QuestDataCommon)((IQuestDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestType) ?? true))
            {
                if (!lhs.QuestType.Equals(rhs.QuestType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestFaction) ?? true))
            {
                if (!lhs.QuestFaction.Equals(rhs.QuestFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Event) ?? true))
            {
                if (lhs.Event != rhs.Event) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Location) ?? true))
            {
                if (!lhs.Location.Equals(rhs.Location)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestTimeLimit) ?? true))
            {
                if (!lhs.QuestTimeLimit.Equals(rhs.QuestTimeLimit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.SourceQuest) ?? true))
            {
                if (!lhs.SourceQuest.Equals(rhs.SourceQuest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QDUPs) ?? true))
            {
                if (!lhs.QDUPs.SequenceEqualNullable(rhs.QDUPs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.TextDisplayGlobals) ?? true))
            {
                if (!lhs.TextDisplayGlobals.SequenceEqualNullable(rhs.TextDisplayGlobals)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Filter) ?? true))
            {
                if (!string.Equals(lhs.Filter, rhs.Filter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Summary) ?? true))
            {
                if (!string.Equals(lhs.Summary, rhs.Summary)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogConditions) ?? true))
            {
                if (!lhs.DialogConditions.SequenceEqual(rhs.DialogConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.DialogConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.UnusedConditions) ?? true))
            {
                if (!lhs.UnusedConditions.SequenceEqualNullable(rhs.UnusedConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.UnusedConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                if (!lhs.Stages.SequenceEqual(rhs.Stages, (l, r) => ((QuestStageCommon)((IQuestStageGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Stages)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Objectives) ?? true))
            {
                if (!lhs.Objectives.SequenceEqual(rhs.Objectives, (l, r) => ((QuestObjectiveCommon)((IQuestObjectiveGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Objectives)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Aliases) ?? true))
            {
                if (!lhs.Aliases.SequenceEqualNullable(rhs.Aliases, (l, r) => ((AQuestAliasCommon)((IAQuestAliasGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Aliases)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestGroup) ?? true))
            {
                if (!lhs.QuestGroup.Equals(rhs.QuestGroup)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.SwfFile) ?? true))
            {
                if (!string.Equals(lhs.SwfFile, rhs.SwfFile)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionTypeKeyword) ?? true))
            {
                if (!lhs.MissionTypeKeyword.Equals(rhs.MissionTypeKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionBoardDescription) ?? true))
            {
                if (!object.Equals(lhs.MissionBoardDescription, rhs.MissionBoardDescription)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionBoardInfoPanels) ?? true))
            {
                if (!lhs.MissionBoardInfoPanels.SequenceEqual(rhs.MissionBoardInfoPanels, (l, r) => ((QuestMissionBoardPanelCommon)((IQuestMissionBoardPanelGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.MissionBoardInfoPanels)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.ScriptComment) ?? true))
            {
                if (!string.Equals(lhs.ScriptComment, rhs.ScriptComment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Timestamp) ?? true))
            {
                if (lhs.Timestamp != rhs.Timestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogBranches) ?? true))
            {
                if (!lhs.DialogBranches.SequenceEqual(rhs.DialogBranches, (l, r) => ((DialogBranchCommon)((IDialogBranchGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.DialogBranches)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogTopics) ?? true))
            {
                if (!lhs.DialogTopics.SequenceEqual(rhs.DialogTopics, (l, r) => ((DialogTopicCommon)((IDialogTopicGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.DialogTopics)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Scenes) ?? true))
            {
                if (!lhs.Scenes.SequenceEqual(rhs.Scenes, (l, r) => ((SceneCommon)((ISceneGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Scenes)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IQuestGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Components);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(item.QuestType);
            hash.Add(item.QuestFaction);
            if (item.Event is {} Eventitem)
            {
                hash.Add(Eventitem);
            }
            hash.Add(item.Location);
            hash.Add(item.QuestTimeLimit);
            hash.Add(item.SourceQuest);
            hash.Add(item.QDUPs);
            hash.Add(item.TextDisplayGlobals);
            if (item.Filter is {} Filteritem)
            {
                hash.Add(Filteritem);
            }
            if (item.Summary is {} Summaryitem)
            {
                hash.Add(Summaryitem);
            }
            hash.Add(item.DialogConditions);
            hash.Add(item.UnusedConditions);
            hash.Add(item.Stages);
            hash.Add(item.Objectives);
            hash.Add(item.Aliases);
            hash.Add(item.QuestGroup);
            if (item.SwfFile is {} SwfFileitem)
            {
                hash.Add(SwfFileitem);
            }
            hash.Add(item.MissionTypeKeyword);
            if (item.MissionBoardDescription is {} MissionBoardDescriptionitem)
            {
                hash.Add(MissionBoardDescriptionitem);
            }
            hash.Add(item.MissionBoardInfoPanels);
            hash.Add(item.Keywords);
            if (item.ScriptComment is {} ScriptCommentitem)
            {
                hash.Add(ScriptCommentitem);
            }
            hash.Add(item.Timestamp);
            hash.Add(item.Unknown);
            hash.Add(item.DialogBranches);
            hash.Add(item.DialogTopics);
            hash.Add(item.Scenes);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Quest.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.QuestType, out var QuestTypeInfo))
            {
                yield return QuestTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.QuestFaction, out var QuestFactionInfo))
            {
                yield return QuestFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Location, out var LocationInfo))
            {
                yield return LocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.QuestTimeLimit, out var QuestTimeLimitInfo))
            {
                yield return QuestTimeLimitInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SourceQuest, out var SourceQuestInfo))
            {
                yield return SourceQuestInfo;
            }
            if (obj.QDUPs is {} QDUPsItem)
            {
                foreach (var item in QDUPsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.TextDisplayGlobals)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DialogConditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.UnusedConditions is {} UnusedConditionsItem)
            {
                foreach (var item in UnusedConditionsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Stages.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Objectives.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Aliases is {} AliasesItem)
            {
                foreach (var item in AliasesItem.WhereCastable<IAQuestAliasGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.QuestGroup, out var QuestGroupInfo))
            {
                yield return QuestGroupInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MissionTypeKeyword, out var MissionTypeKeywordInfo))
            {
                yield return MissionTypeKeywordInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.DialogBranches.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DialogTopics.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Scenes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IQuestGetter obj)
        {
            return EnumerateMajorRecordsLoopLogic(obj: obj);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(IQuestGetter obj)
        {
            foreach (var subItem in obj.DialogBranches)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.DialogTopics)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Scenes)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IQuestGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return QuestCommon.Instance.EnumerateMajorRecords(obj);
            return QuestCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IQuestGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            return EnumerateMajorRecordsLoopLogic(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(
            IQuestGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!Quest_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordsLoopLogic(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordsLoopLogic(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                    yield break;
                case "Condition":
                case "IConditionGetter":
                case "ICondition":
                    yield break;
                case "QuestStage":
                case "IQuestStageGetter":
                case "IQuestStage":
                    yield break;
                case "QuestObjective":
                case "IQuestObjectiveGetter":
                case "IQuestObjective":
                    yield break;
                case "AQuestAlias":
                case "IAQuestAliasGetter":
                case "IAQuestAlias":
                    yield break;
                case "QuestMissionBoardPanel":
                case "IQuestMissionBoardPanelGetter":
                case "IQuestMissionBoardPanel":
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var subItem in obj.DialogBranches)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var subItem in obj.DialogTopics)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var subItem in obj.Scenes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.DialogTopics)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Starfield, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IQuestGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IStarfieldMod, IQuestGetter, IQuest> getOrAddAsOverride,
            Func<IStarfieldMod, IQuestGetter, string?, FormKey?, IQuest> duplicateInto)
        {
            var curContext = new ModContext<IStarfieldMod, IStarfieldModGetter, IQuest, IQuestGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            foreach (var subItem in obj.DialogBranches)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IDialogBranchInternal, IDialogBranchGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                        var ret = parent.DialogBranches.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (DialogBranch)((IDialogBranchGetter)r).DeepCopy();
                        parent.DialogBranches.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (DialogBranch)((IDialogBranchGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogBranches.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.DialogTopics)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IDialogTopicInternal, IDialogTopicGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                        var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                        parent.DialogTopics.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                        return dup;
                    });
                foreach (var item in ((DialogTopicCommon)((IDialogTopicGetter)subItem).CommonInstance()!).EnumerateMajorRecordContexts(
                    obj: subItem,
                    linkCache: linkCache,
                    modKey: modKey,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                        var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                        parent.DialogTopics.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                        return dup;
                    }))
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Scenes)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, ISceneInternal, ISceneGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                        var ret = parent.Scenes.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (Scene)((ISceneGetter)r).DeepCopy();
                        parent.Scenes.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (Scene)((ISceneGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).Scenes.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IQuestGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IStarfieldMod, IQuestGetter, IQuest> getOrAddAsOverride,
            Func<IStarfieldMod, IQuestGetter, string?, FormKey?, IQuest> duplicateInto)
        {
            var curContext = new ModContext<IStarfieldMod, IStarfieldModGetter, IQuest, IQuestGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!Quest_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                    yield break;
                case "Condition":
                case "IConditionGetter":
                case "ICondition":
                    yield break;
                case "QuestStage":
                case "IQuestStageGetter":
                case "IQuestStage":
                    yield break;
                case "QuestObjective":
                case "IQuestObjectiveGetter":
                case "IQuestObjective":
                    yield break;
                case "AQuestAlias":
                case "IAQuestAliasGetter":
                case "IAQuestAlias":
                    yield break;
                case "QuestMissionBoardPanel":
                case "IQuestMissionBoardPanelGetter":
                case "IQuestMissionBoardPanel":
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var subItem in obj.DialogBranches)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IDialogBranchInternal, IDialogBranchGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                    var ret = parent.DialogBranches.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (DialogBranch)((IDialogBranchGetter)r).DeepCopy();
                                    parent.DialogBranches.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (DialogBranch)((IDialogBranchGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogBranches.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var subItem in obj.DialogTopics)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IDialogTopicInternal, IDialogTopicGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                    var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                                    parent.DialogTopics.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                                    return dup;
                                });
                        }
                        foreach (var item in ((DialogTopicCommon)((IDialogTopicGetter)subItem).CommonInstance()!).EnumerateMajorRecordContexts(
                            obj: subItem,
                            linkCache: linkCache,
                            type: type,
                            modKey: modKey,
                            parent: curContext,
                            throwIfUnknown: false,
                            getOrAddAsOverride: (m, r) =>
                            {
                                var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                                if (ret != null) return ret;
                                ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                                parent.DialogTopics.Add(ret);
                                return ret;
                            },
                            duplicateInto: (m, r, e, f) =>
                            {
                                var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                                return dup;
                            }))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var subItem in obj.Scenes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, ISceneInternal, ISceneGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                    var ret = parent.Scenes.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (Scene)((ISceneGetter)r).DeepCopy();
                                    parent.Scenes.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (Scene)((ISceneGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).Scenes.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.DialogTopics)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IDialogTopicInternal, IDialogTopicGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                    var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                                    parent.DialogTopics.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                                    return dup;
                                });
                        }
                        foreach (var item in ((DialogTopicCommon)((IDialogTopicGetter)subItem).CommonInstance()!).EnumerateMajorRecordContexts(
                            obj: subItem,
                            linkCache: linkCache,
                            type: type,
                            modKey: modKey,
                            parent: curContext,
                            throwIfUnknown: false,
                            getOrAddAsOverride: (m, r) =>
                            {
                                var parent = getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey));
                                var ret = parent.DialogTopics.FirstOrDefault(x => x.FormKey == r.FormKey);
                                if (ret != null) return ret;
                                ret = (DialogTopic)((IDialogTopicGetter)r).DeepCopy();
                                parent.DialogTopics.Add(ret);
                                return ret;
                            },
                            duplicateInto: (m, r, e, f) =>
                            {
                                var dup = (DialogTopic)((IDialogTopicGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                getOrAddAsOverride(m, linkCache.Resolve<IQuestGetter>(obj.FormKey)).DialogTopics.Add(dup);
                                return dup;
                            }))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IQuestGetter, IStarfieldMod, IStarfieldModGetter>(
                        GameCategory.Starfield,
                        obj,
                        type,
                        linkCache,
                        (lk, t, b) => this.EnumerateMajorRecordContexts(obj, lk, t, modKey, parent, b, getOrAddAsOverride, duplicateInto),
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IQuestGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.WhereCastable<IDialogTopicGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Quest Duplicate(
            IQuestGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Quest(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuestGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuestGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class QuestSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly QuestSetterTranslationCommon Instance = new QuestSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestInternal item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Quest_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Quest_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestType) ?? true))
            {
                item.QuestType.SetTo(rhs.QuestType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestFaction) ?? true))
            {
                item.QuestFaction.SetTo(rhs.QuestFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Event) ?? true))
            {
                item.Event = rhs.Event;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Location) ?? true))
            {
                item.Location.SetTo(rhs.Location.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestTimeLimit) ?? true))
            {
                item.QuestTimeLimit.SetTo(rhs.QuestTimeLimit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.SourceQuest) ?? true))
            {
                item.SourceQuest.SetTo(rhs.SourceQuest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QDUPs) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.QDUPs);
                try
                {
                    if ((rhs.QDUPs != null))
                    {
                        item.QDUPs = 
                            rhs.QDUPs
                                .Select(b => (IFormLinkGetter<IDialogResponsesGetter>)new FormLink<IDialogResponsesGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IDialogResponsesGetter>>();
                    }
                    else
                    {
                        item.QDUPs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.TextDisplayGlobals) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.TextDisplayGlobals);
                try
                {
                    item.TextDisplayGlobals.SetTo(
                        rhs.TextDisplayGlobals
                            .Select(b => (IFormLinkGetter<IGlobalGetter>)new FormLink<IGlobalGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Filter) ?? true))
            {
                item.Filter = rhs.Filter;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Summary) ?? true))
            {
                item.Summary = rhs.Summary;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.DialogConditions);
                try
                {
                    item.DialogConditions.SetTo(
                        rhs.DialogConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.UnusedConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.UnusedConditions);
                try
                {
                    if ((rhs.UnusedConditions != null))
                    {
                        item.UnusedConditions = 
                            rhs.UnusedConditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.UnusedConditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                try
                {
                    item.Stages.SetTo(
                        rhs.Stages
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Objectives) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Objectives);
                try
                {
                    item.Objectives.SetTo(
                        rhs.Objectives
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Aliases);
                try
                {
                    if ((rhs.Aliases != null))
                    {
                        item.Aliases = 
                            rhs.Aliases
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<AQuestAlias>();
                    }
                    else
                    {
                        item.Aliases = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestGroup) ?? true))
            {
                item.QuestGroup.SetTo(rhs.QuestGroup.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.SwfFile) ?? true))
            {
                item.SwfFile = rhs.SwfFile;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionTypeKeyword) ?? true))
            {
                item.MissionTypeKeyword.SetTo(rhs.MissionTypeKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionBoardDescription) ?? true))
            {
                item.MissionBoardDescription = rhs.MissionBoardDescription?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.MissionBoardInfoPanels) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.MissionBoardInfoPanels);
                try
                {
                    item.MissionBoardInfoPanels.SetTo(
                        rhs.MissionBoardInfoPanels
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.ScriptComment) ?? true))
            {
                item.ScriptComment = rhs.ScriptComment;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogBranches) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.DialogBranches);
                try
                {
                    item.DialogBranches.SetTo(
                        rhs.DialogBranches
                        .Select(r =>
                        {
                            return (DialogBranch)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.SetTo(
                        rhs.DialogTopics
                        .Select(r =>
                        {
                            return (DialogTopic)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Scenes);
                try
                {
                    item.Scenes.SetTo(
                        rhs.Scenes
                        .Select(r =>
                        {
                            return (Scene)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Quest DeepCopy(
            IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Quest
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly QuestBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IQuestGetter item,
            MutagenWriter writer)
        {
            StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IQuestGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((QuestAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Data is {} DataItem)
            {
                ((QuestDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.QuestType,
                header: translationParams.ConvertToCustom(RecordTypes.QTYP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.QuestFaction,
                header: translationParams.ConvertToCustom(RecordTypes.FTYP));
            RecordTypeBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Event,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Location,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.QuestTimeLimit,
                header: translationParams.ConvertToCustom(RecordTypes.QTLM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SourceQuest,
                header: translationParams.ConvertToCustom(RecordTypes.QSRC));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogResponsesGetter>>.Instance.Write(
                writer: writer,
                items: item.QDUPs,
                recordType: translationParams.ConvertToCustom(RecordTypes.QDUP),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogResponsesGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGlobalGetter>>.Instance.Write(
                writer: writer,
                items: item.TextDisplayGlobals,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGlobalGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.QTGL));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Filter,
                header: translationParams.ConvertToCustom(RecordTypes.FLTR),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Summary,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            QuestBinaryWriteTranslation.WriteBinaryDialogConditions(
                writer: writer,
                item: item);
            QuestBinaryWriteTranslation.WriteBinaryUnusedConditionsLogic(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestStageGetter>.Instance.Write(
                writer: writer,
                items: item.Stages,
                transl: (MutagenWriter subWriter, IQuestStageGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestStageBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestObjectiveGetter>.Instance.Write(
                writer: writer,
                items: item.Objectives,
                transl: (MutagenWriter subWriter, IQuestObjectiveGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestObjectiveBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            QuestBinaryWriteTranslation.WriteBinaryAliasParse(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.QuestGroup,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SwfFile,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MissionTypeKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.QMTY));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MissionBoardDescription,
                header: translationParams.ConvertToCustom(RecordTypes.QMSU),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestMissionBoardPanelGetter>.Instance.Write(
                writer: writer,
                items: item.MissionBoardInfoPanels,
                transl: (MutagenWriter subWriter, IQuestMissionBoardPanelGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestMissionBoardPanelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ScriptComment,
                header: translationParams.ConvertToCustom(RecordTypes.SCCM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public static partial void WriteBinaryDialogConditionsCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryDialogConditions(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryDialogConditionsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryUnusedConditionsLogicCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryUnusedConditionsLogic(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryUnusedConditionsLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryAliasParseCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryAliasParse(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryAliasParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IQuestGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.QUST,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
            WriteSubgroupsLogic(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public static partial void WriteSubgroupsLogic(
            MutagenWriter writer,
            IQuestGetter obj);

    }

    internal partial class QuestBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly QuestBinaryCreateTranslation Instance = new QuestBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.QUST;
        public static void FillBinaryStructs(
            IQuestInternal item,
            MutagenFrame frame)
        {
            StarfieldMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IQuestInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.QuestAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Components;
                }
                case RecordTypeInts.DNAM:
                {
                    item.Data = Mutagen.Bethesda.Starfield.QuestData.CreateFromBinary(frame: frame);
                    return (int)Quest_FieldIndex.Data;
                }
                case RecordTypeInts.QTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.QuestType;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.QuestFaction;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Event = RecordTypeBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Location.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.Location;
                }
                case RecordTypeInts.QTLM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestTimeLimit.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.QuestTimeLimit;
                }
                case RecordTypeInts.QSRC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SourceQuest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.SourceQuest;
                }
                case RecordTypeInts.QDUP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QDUPs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogResponsesGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IDialogResponsesGetter>>();
                    return (int)Quest_FieldIndex.QDUPs;
                }
                case RecordTypeInts.QTGL:
                {
                    item.TextDisplayGlobals.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGlobalGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.QTGL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filter = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Filter;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Summary = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Summary;
                }
                case RecordTypeInts.CTDA:
                {
                    QuestBinaryCreateTranslation.FillBinaryDialogConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    return QuestBinaryCreateTranslation.FillBinaryUnusedConditionsLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.INDX:
                {
                    item.Stages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestStage>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestStage_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestStage.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    item.Objectives.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestObjective>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestObjective_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestObjective.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                case RecordTypeInts.ALCS:
                case RecordTypeInts.ALMI:
                {
                    return QuestBinaryCreateTranslation.FillBinaryAliasParseCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestGroup.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.QuestGroup;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SwfFile = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.SwfFile;
                }
                case RecordTypeInts.QMTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MissionTypeKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Quest_FieldIndex.MissionTypeKeyword;
                }
                case RecordTypeInts.QMSU:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MissionBoardDescription = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.MissionBoardDescription;
                }
                case RecordTypeInts.QMDT:
                case RecordTypeInts.QMDP:
                case RecordTypeInts.QMDS:
                {
                    item.MissionBoardInfoPanels.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestMissionBoardPanel>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestMissionBoardPanel_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestMissionBoardPanel.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.MissionBoardInfoPanels;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Quest_FieldIndex.Keywords;
                }
                case RecordTypeInts.SCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptComment = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.ScriptComment;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void ParseSubgroupsLogic(
            MutagenFrame frame,
            IQuestInternal obj);

        public static partial void FillBinaryDialogConditionsCustom(
            MutagenFrame frame,
            IQuestInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryUnusedConditionsLogicCustom(
            MutagenFrame frame,
            IQuestInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryAliasParseCustom(
            MutagenFrame frame,
            IQuestInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class QuestBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class QuestBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IQuestGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => QuestCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IQuest);

        public Quest.MajorFlag MajorFlags => (Quest.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IQuestAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? QuestAdapterBinaryOverlay.QuestAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        #region Data
        private RangeInt32? _DataLocation;
        public IQuestDataGetter? Data => _DataLocation.HasValue ? QuestDataBinaryOverlay.QuestDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region QuestType
        private int? _QuestTypeLocation;
        public IFormLinkNullableGetter<IKeywordGetter> QuestType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _QuestTypeLocation);
        #endregion
        #region QuestFaction
        private int? _QuestFactionLocation;
        public IFormLinkNullableGetter<IKeywordGetter> QuestFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _QuestFactionLocation);
        #endregion
        #region Event
        private int? _EventLocation;
        public RecordType? Event => _EventLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EventLocation.Value, _package.MetaData.Constants))) : default(RecordType?);
        #endregion
        #region Location
        private int? _LocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> Location => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _LocationLocation);
        #endregion
        #region QuestTimeLimit
        private int? _QuestTimeLimitLocation;
        public IFormLinkNullableGetter<IGlobalGetter> QuestTimeLimit => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _QuestTimeLimitLocation);
        #endregion
        #region SourceQuest
        private int? _SourceQuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> SourceQuest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _SourceQuestLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IDialogResponsesGetter>>? QDUPs { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; private set; } = [];
        #region Filter
        private int? _FilterLocation;
        public String? Filter => _FilterLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilterLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Summary
        private int? _SummaryLocation;
        public String? Summary => _SummaryLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SummaryLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region DialogConditions
        partial void DialogConditionsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region UnusedConditionsLogic
        public partial ParseResult UnusedConditionsLogicCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IQuestStageGetter> Stages { get; private set; } = [];
        public IReadOnlyList<IQuestObjectiveGetter> Objectives { get; private set; } = [];
        #region AliasParse
        public partial ParseResult AliasParseCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region QuestGroup
        private int? _QuestGroupLocation;
        public IFormLinkNullableGetter<IKeywordGetter> QuestGroup => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _QuestGroupLocation);
        #endregion
        #region SwfFile
        private int? _SwfFileLocation;
        public String? SwfFile => _SwfFileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SwfFileLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MissionTypeKeyword
        private int? _MissionTypeKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> MissionTypeKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _MissionTypeKeywordLocation);
        #endregion
        #region MissionBoardDescription
        private int? _MissionBoardDescriptionLocation;
        public ITranslatedStringGetter? MissionBoardDescription => _MissionBoardDescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MissionBoardDescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IQuestMissionBoardPanelGetter> MissionBoardInfoPanels { get; private set; } = [];
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region ScriptComment
        private int? _ScriptCommentLocation;
        public String? ScriptComment => _ScriptCommentLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptCommentLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestGetter QuestFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            var origStream = stream;
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.ParseSubgroupsLogic(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IQuestGetter QuestFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Quest_FieldIndex.Components;
                }
                case RecordTypeInts.DNAM:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Quest_FieldIndex.Data;
                }
                case RecordTypeInts.QTYP:
                {
                    _QuestTypeLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.QuestType;
                }
                case RecordTypeInts.FTYP:
                {
                    _QuestFactionLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.QuestFaction;
                }
                case RecordTypeInts.ENAM:
                {
                    _EventLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.LNAM:
                {
                    _LocationLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Location;
                }
                case RecordTypeInts.QTLM:
                {
                    _QuestTimeLimitLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.QuestTimeLimit;
                }
                case RecordTypeInts.QSRC:
                {
                    _SourceQuestLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.SourceQuest;
                }
                case RecordTypeInts.QDUP:
                {
                    this.QDUPs = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IDialogResponsesGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IDialogResponsesGetter>(p, s));
                    return (int)Quest_FieldIndex.QDUPs;
                }
                case RecordTypeInts.QTGL:
                {
                    this.TextDisplayGlobals = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IGlobalGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IGlobalGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.QTGL,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    _FilterLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Filter;
                }
                case RecordTypeInts.NAM3:
                {
                    _SummaryLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Summary;
                }
                case RecordTypeInts.CTDA:
                {
                    DialogConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    return UnusedConditionsLogicCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.INDX:
                {
                    this.Stages = this.ParseRepeatedTypelessSubrecord<IQuestStageGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestStage_Registration.TriggerSpecs,
                        factory: QuestStageBinaryOverlay.QuestStageFactory);
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    this.Objectives = this.ParseRepeatedTypelessSubrecord<IQuestObjectiveGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestObjective_Registration.TriggerSpecs,
                        factory: QuestObjectiveBinaryOverlay.QuestObjectiveFactory);
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                case RecordTypeInts.ALCS:
                case RecordTypeInts.ALMI:
                {
                    return AliasParseCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.GNAM:
                {
                    _QuestGroupLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.QuestGroup;
                }
                case RecordTypeInts.SNAM:
                {
                    _SwfFileLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.SwfFile;
                }
                case RecordTypeInts.QMTY:
                {
                    _MissionTypeKeywordLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.MissionTypeKeyword;
                }
                case RecordTypeInts.QMSU:
                {
                    _MissionBoardDescriptionLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.MissionBoardDescription;
                }
                case RecordTypeInts.QMDT:
                case RecordTypeInts.QMDP:
                case RecordTypeInts.QMDS:
                {
                    this.MissionBoardInfoPanels = this.ParseRepeatedTypelessSubrecord<IQuestMissionBoardPanelGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestMissionBoardPanel_Registration.TriggerSpecs,
                        factory: QuestMissionBoardPanelBinaryOverlay.QuestMissionBoardPanelFactory);
                    return (int)Quest_FieldIndex.MissionBoardInfoPanels;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Quest_FieldIndex.Keywords;
                }
                case RecordTypeInts.SCCM:
                {
                    _ScriptCommentLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.ScriptComment;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Quest>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IQuestGetter rhs) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        public partial void ParseSubgroupsLogic(
            OverlayStream stream,
            int finalPos,
            int offset);

    }

}
#endregion

#endregion

