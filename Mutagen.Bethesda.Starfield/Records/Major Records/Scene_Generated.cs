/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Scene :
        StarfieldMajorRecord,
        IEquatable<ISceneGetter>,
        ILoquiObjectSetter<Scene>,
        ISceneInternal
    {
        #region Ctor
        protected Scene()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SceneAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public SceneAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISceneAdapterGetter? ISceneGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Flags
        public Scene.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Scene.Flag? ISceneGetter.Flags => this.Flags;
        #endregion
        #region Phases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ScenePhase> _Phases = new ExtendedList<ScenePhase>();
        public ExtendedList<ScenePhase> Phases
        {
            get => this._Phases;
            init => this._Phases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IScenePhaseGetter> ISceneGetter.Phases => _Phases;
        #endregion

        #endregion
        #region Actors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SceneActor> _Actors = new ExtendedList<SceneActor>();
        public ExtendedList<SceneActor> Actors
        {
            get => this._Actors;
            init => this._Actors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISceneActorGetter> ISceneGetter.Actors => _Actors;
        #endregion

        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ASceneAction>? _Actions;
        public ExtendedList<ASceneAction>? Actions
        {
            get => this._Actions;
            set => this._Actions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IASceneActionGetter>? ISceneGetter.Actions => _Actions;
        #endregion

        #endregion
        #region Quest
        private readonly IFormLinkNullable<IQuestGetter> _Quest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> ISceneGetter.Quest => this.Quest;
        #endregion
        #region LastActionIndex
        public UInt32? LastActionIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISceneGetter.LastActionIndex => this.LastActionIndex;
        #endregion
        #region VNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _VNAM;
        public MemorySlice<Byte>? VNAM
        {
            get => this._VNAM;
            set => this._VNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.VNAM => this.VNAM;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ISceneGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region SetParentQuestStage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SceneSetParentQuestStage? _SetParentQuestStage;
        public SceneSetParentQuestStage? SetParentQuestStage
        {
            get => _SetParentQuestStage;
            set => _SetParentQuestStage = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISceneSetParentQuestStageGetter? ISceneGetter.SetParentQuestStage => this.SetParentQuestStage;
        #endregion
        #region Notes
        public String? Notes { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISceneGetter.Notes => this.Notes;
        #endregion
        #region Template
        private readonly IFormLinkNullable<ISceneGetter> _Template = new FormLinkNullable<ISceneGetter>();
        public IFormLinkNullable<ISceneGetter> Template
        {
            get => _Template;
            set => _Template.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISceneGetter> ISceneGetter.Template => this.Template;
        #endregion
        #region BOLV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BOLV;
        public MemorySlice<Byte>? BOLV
        {
            get => this._BOLV;
            set => this._BOLV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.BOLV => this.BOLV;
        #endregion
        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISceneGetter.Index => this.Index;
        #endregion
        #region SCPI
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCPI;
        public MemorySlice<Byte>? SCPI
        {
            get => this._SCPI;
            set => this._SCPI = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.SCPI => this.SCPI;
        #endregion
        #region JNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _JNAM;
        public MemorySlice<Byte>? JNAM
        {
            get => this._JNAM;
            set => this._JNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.JNAM => this.JNAM;
        #endregion
        #region SCPP
        private readonly IFormLinkNullable<ISceneGetter> _SCPP = new FormLinkNullable<ISceneGetter>();
        public IFormLinkNullable<ISceneGetter> SCPP
        {
            get => _SCPP;
            set => _SCPP.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISceneGetter> ISceneGetter.SCPP => this.SCPP;
        #endregion
        #region SCSP
        public Boolean SCSP { get; set; } = default(Boolean);
        #endregion
        #region SPMA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISceneGetter>>? _SPMA;
        public ExtendedList<IFormLinkGetter<ISceneGetter>>? SPMA
        {
            get => this._SPMA;
            set => this._SPMA = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? ISceneGetter.SPMA => _SPMA;
        #endregion

        #endregion
        #region SPEX
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISceneGetter>>? _SPEX;
        public ExtendedList<IFormLinkGetter<ISceneGetter>>? SPEX
        {
            get => this._SPEX;
            set => this._SPEX = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? ISceneGetter.SPEX => _SPEX;
        #endregion

        #endregion
        #region SPRK
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SPRK;
        public MemorySlice<Byte>? SPRK
        {
            get => this._SPRK;
            set => this._SPRK = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.SPRK => this.SPRK;
        #endregion
        #region SPRW
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SPRW;
        public MemorySlice<Byte>? SPRW
        {
            get => this._SPRW;
            set => this._SPRW = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.SPRW => this.SPRW;
        #endregion
        #region SPRP
        public Boolean SPRP { get; set; } = default(Boolean);
        #endregion
        #region SPDF
        public Boolean SPDF { get; set; } = default(Boolean);
        #endregion
        #region SPPQ
        public Boolean SPPQ { get; set; } = default(Boolean);
        #endregion
        #region SPKW
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _SPKW;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? SPKW
        {
            get => this._SPKW;
            set => this._SPKW = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ISceneGetter.SPKW => _SPKW;
        #endregion

        #endregion
        #region SPPK
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPerkGetter>>? _SPPK;
        public ExtendedList<IFormLinkGetter<IPerkGetter>>? SPPK
        {
            get => this._SPPK;
            set => this._SPPK = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPerkGetter>>? ISceneGetter.SPPK => _SPPK;
        #endregion

        #endregion
        #region SPKY
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _SPKY;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? SPKY
        {
            get => this._SPKY;
            set => this._SPKY = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ISceneGetter.SPKY => _SPKY;
        #endregion

        #endregion
        #region DEVT
        public Boolean DEVT { get; set; } = default(Boolean);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, SceneAdapter.Mask<TItem>?>(initialValue, new SceneAdapter.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Phases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>());
                this.Actors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>());
                this.Actions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ASceneAction.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ASceneAction.Mask<TItem>?>>());
                this.Quest = initialValue;
                this.LastActionIndex = initialValue;
                this.VNAM = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.SetParentQuestStage = new MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>(initialValue, new SceneSetParentQuestStage.Mask<TItem>(initialValue));
                this.Notes = initialValue;
                this.Template = initialValue;
                this.BOLV = initialValue;
                this.Index = initialValue;
                this.SCPI = initialValue;
                this.JNAM = initialValue;
                this.SCPP = initialValue;
                this.SCSP = initialValue;
                this.SPMA = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPEX = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPRK = initialValue;
                this.SPRW = initialValue;
                this.SPRP = initialValue;
                this.SPDF = initialValue;
                this.SPPQ = initialValue;
                this.SPKW = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPPK = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPKY = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DEVT = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Flags,
                TItem Phases,
                TItem Actors,
                TItem Actions,
                TItem Quest,
                TItem LastActionIndex,
                TItem VNAM,
                TItem Conditions,
                TItem SetParentQuestStage,
                TItem Notes,
                TItem Template,
                TItem BOLV,
                TItem Index,
                TItem SCPI,
                TItem JNAM,
                TItem SCPP,
                TItem SCSP,
                TItem SPMA,
                TItem SPEX,
                TItem SPRK,
                TItem SPRW,
                TItem SPRP,
                TItem SPDF,
                TItem SPPQ,
                TItem SPKW,
                TItem SPPK,
                TItem SPKY,
                TItem DEVT)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, SceneAdapter.Mask<TItem>?>(VirtualMachineAdapter, new SceneAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Flags = Flags;
                this.Phases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>(Phases, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>());
                this.Actors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>(Actors, Enumerable.Empty<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>());
                this.Actions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ASceneAction.Mask<TItem>?>>?>(Actions, Enumerable.Empty<MaskItemIndexed<TItem, ASceneAction.Mask<TItem>?>>());
                this.Quest = Quest;
                this.LastActionIndex = LastActionIndex;
                this.VNAM = VNAM;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.SetParentQuestStage = new MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>(SetParentQuestStage, new SceneSetParentQuestStage.Mask<TItem>(SetParentQuestStage));
                this.Notes = Notes;
                this.Template = Template;
                this.BOLV = BOLV;
                this.Index = Index;
                this.SCPI = SCPI;
                this.JNAM = JNAM;
                this.SCPP = SCPP;
                this.SCSP = SCSP;
                this.SPMA = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SPMA, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPEX = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SPEX, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPRK = SPRK;
                this.SPRW = SPRW;
                this.SPRP = SPRP;
                this.SPDF = SPDF;
                this.SPPQ = SPPQ;
                this.SPKW = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SPKW, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPPK = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SPPK, Enumerable.Empty<(int Index, TItem Value)>());
                this.SPKY = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SPKY, Enumerable.Empty<(int Index, TItem Value)>());
                this.DEVT = DEVT;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SceneAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>? Phases;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>? Actors;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ASceneAction.Mask<TItem>?>>?>? Actions;
            public TItem Quest;
            public TItem LastActionIndex;
            public TItem VNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>? SetParentQuestStage { get; set; }
            public TItem Notes;
            public TItem Template;
            public TItem BOLV;
            public TItem Index;
            public TItem SCPI;
            public TItem JNAM;
            public TItem SCPP;
            public TItem SCSP;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SPMA;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SPEX;
            public TItem SPRK;
            public TItem SPRW;
            public TItem SPRP;
            public TItem SPDF;
            public TItem SPPQ;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SPKW;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SPPK;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SPKY;
            public TItem DEVT;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Phases, rhs.Phases)) return false;
                if (!object.Equals(this.Actors, rhs.Actors)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.LastActionIndex, rhs.LastActionIndex)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.SetParentQuestStage, rhs.SetParentQuestStage)) return false;
                if (!object.Equals(this.Notes, rhs.Notes)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                if (!object.Equals(this.BOLV, rhs.BOLV)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.SCPI, rhs.SCPI)) return false;
                if (!object.Equals(this.JNAM, rhs.JNAM)) return false;
                if (!object.Equals(this.SCPP, rhs.SCPP)) return false;
                if (!object.Equals(this.SCSP, rhs.SCSP)) return false;
                if (!object.Equals(this.SPMA, rhs.SPMA)) return false;
                if (!object.Equals(this.SPEX, rhs.SPEX)) return false;
                if (!object.Equals(this.SPRK, rhs.SPRK)) return false;
                if (!object.Equals(this.SPRW, rhs.SPRW)) return false;
                if (!object.Equals(this.SPRP, rhs.SPRP)) return false;
                if (!object.Equals(this.SPDF, rhs.SPDF)) return false;
                if (!object.Equals(this.SPPQ, rhs.SPPQ)) return false;
                if (!object.Equals(this.SPKW, rhs.SPKW)) return false;
                if (!object.Equals(this.SPPK, rhs.SPPK)) return false;
                if (!object.Equals(this.SPKY, rhs.SPKY)) return false;
                if (!object.Equals(this.DEVT, rhs.DEVT)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Flags);
                hash.Add(this.Phases);
                hash.Add(this.Actors);
                hash.Add(this.Actions);
                hash.Add(this.Quest);
                hash.Add(this.LastActionIndex);
                hash.Add(this.VNAM);
                hash.Add(this.Conditions);
                hash.Add(this.SetParentQuestStage);
                hash.Add(this.Notes);
                hash.Add(this.Template);
                hash.Add(this.BOLV);
                hash.Add(this.Index);
                hash.Add(this.SCPI);
                hash.Add(this.JNAM);
                hash.Add(this.SCPP);
                hash.Add(this.SCSP);
                hash.Add(this.SPMA);
                hash.Add(this.SPEX);
                hash.Add(this.SPRK);
                hash.Add(this.SPRW);
                hash.Add(this.SPRP);
                hash.Add(this.SPDF);
                hash.Add(this.SPPQ);
                hash.Add(this.SPKW);
                hash.Add(this.SPPK);
                hash.Add(this.SPKY);
                hash.Add(this.DEVT);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (this.Phases != null)
                {
                    if (!eval(this.Phases.Overall)) return false;
                    if (this.Phases.Specific != null)
                    {
                        foreach (var item in this.Phases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actors != null)
                {
                    if (!eval(this.Actors.Overall)) return false;
                    if (this.Actors.Specific != null)
                    {
                        foreach (var item in this.Actors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null)
                    {
                        foreach (var item in this.Actions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Quest)) return false;
                if (!eval(this.LastActionIndex)) return false;
                if (!eval(this.VNAM)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SetParentQuestStage != null)
                {
                    if (!eval(this.SetParentQuestStage.Overall)) return false;
                    if (this.SetParentQuestStage.Specific != null && !this.SetParentQuestStage.Specific.All(eval)) return false;
                }
                if (!eval(this.Notes)) return false;
                if (!eval(this.Template)) return false;
                if (!eval(this.BOLV)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.SCPI)) return false;
                if (!eval(this.JNAM)) return false;
                if (!eval(this.SCPP)) return false;
                if (!eval(this.SCSP)) return false;
                if (this.SPMA != null)
                {
                    if (!eval(this.SPMA.Overall)) return false;
                    if (this.SPMA.Specific != null)
                    {
                        foreach (var item in this.SPMA.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPEX != null)
                {
                    if (!eval(this.SPEX.Overall)) return false;
                    if (this.SPEX.Specific != null)
                    {
                        foreach (var item in this.SPEX.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.SPRK)) return false;
                if (!eval(this.SPRW)) return false;
                if (!eval(this.SPRP)) return false;
                if (!eval(this.SPDF)) return false;
                if (!eval(this.SPPQ)) return false;
                if (this.SPKW != null)
                {
                    if (!eval(this.SPKW.Overall)) return false;
                    if (this.SPKW.Specific != null)
                    {
                        foreach (var item in this.SPKW.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPPK != null)
                {
                    if (!eval(this.SPPK.Overall)) return false;
                    if (this.SPPK.Specific != null)
                    {
                        foreach (var item in this.SPPK.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPKY != null)
                {
                    if (!eval(this.SPKY.Overall)) return false;
                    if (this.SPKY.Specific != null)
                    {
                        foreach (var item in this.SPKY.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DEVT)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (this.Phases != null)
                {
                    if (eval(this.Phases.Overall)) return true;
                    if (this.Phases.Specific != null)
                    {
                        foreach (var item in this.Phases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actors != null)
                {
                    if (eval(this.Actors.Overall)) return true;
                    if (this.Actors.Specific != null)
                    {
                        foreach (var item in this.Actors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null)
                    {
                        foreach (var item in this.Actions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Quest)) return true;
                if (eval(this.LastActionIndex)) return true;
                if (eval(this.VNAM)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SetParentQuestStage != null)
                {
                    if (eval(this.SetParentQuestStage.Overall)) return true;
                    if (this.SetParentQuestStage.Specific != null && this.SetParentQuestStage.Specific.Any(eval)) return true;
                }
                if (eval(this.Notes)) return true;
                if (eval(this.Template)) return true;
                if (eval(this.BOLV)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.SCPI)) return true;
                if (eval(this.JNAM)) return true;
                if (eval(this.SCPP)) return true;
                if (eval(this.SCSP)) return true;
                if (this.SPMA != null)
                {
                    if (eval(this.SPMA.Overall)) return true;
                    if (this.SPMA.Specific != null)
                    {
                        foreach (var item in this.SPMA.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPEX != null)
                {
                    if (eval(this.SPEX.Overall)) return true;
                    if (this.SPEX.Specific != null)
                    {
                        foreach (var item in this.SPEX.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.SPRK)) return true;
                if (eval(this.SPRW)) return true;
                if (eval(this.SPRP)) return true;
                if (eval(this.SPDF)) return true;
                if (eval(this.SPPQ)) return true;
                if (this.SPKW != null)
                {
                    if (eval(this.SPKW.Overall)) return true;
                    if (this.SPKW.Specific != null)
                    {
                        foreach (var item in this.SPKW.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPPK != null)
                {
                    if (eval(this.SPPK.Overall)) return true;
                    if (this.SPPK.Specific != null)
                    {
                        foreach (var item in this.SPPK.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SPKY != null)
                {
                    if (eval(this.SPKY.Overall)) return true;
                    if (this.SPKY.Specific != null)
                    {
                        foreach (var item in this.SPKY.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DEVT)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Scene.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, SceneAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                if (Phases != null)
                {
                    obj.Phases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScenePhase.Mask<R>?>>?>(eval(this.Phases.Overall), Enumerable.Empty<MaskItemIndexed<R, ScenePhase.Mask<R>?>>());
                    if (Phases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ScenePhase.Mask<R>?>>();
                        obj.Phases.Specific = l;
                        foreach (var item in Phases.Specific)
                        {
                            MaskItemIndexed<R, ScenePhase.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ScenePhase.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Actors != null)
                {
                    obj.Actors = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SceneActor.Mask<R>?>>?>(eval(this.Actors.Overall), Enumerable.Empty<MaskItemIndexed<R, SceneActor.Mask<R>?>>());
                    if (Actors.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SceneActor.Mask<R>?>>();
                        obj.Actors.Specific = l;
                        foreach (var item in Actors.Specific)
                        {
                            MaskItemIndexed<R, SceneActor.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SceneActor.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Actions != null)
                {
                    obj.Actions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ASceneAction.Mask<R>?>>?>(eval(this.Actions.Overall), Enumerable.Empty<MaskItemIndexed<R, ASceneAction.Mask<R>?>>());
                    if (Actions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ASceneAction.Mask<R>?>>();
                        obj.Actions.Specific = l;
                        foreach (var item in Actions.Specific)
                        {
                            MaskItemIndexed<R, ASceneAction.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ASceneAction.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Quest = eval(this.Quest);
                obj.LastActionIndex = eval(this.LastActionIndex);
                obj.VNAM = eval(this.VNAM);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SetParentQuestStage = this.SetParentQuestStage == null ? null : new MaskItem<R, SceneSetParentQuestStage.Mask<R>?>(eval(this.SetParentQuestStage.Overall), this.SetParentQuestStage.Specific?.Translate(eval));
                obj.Notes = eval(this.Notes);
                obj.Template = eval(this.Template);
                obj.BOLV = eval(this.BOLV);
                obj.Index = eval(this.Index);
                obj.SCPI = eval(this.SCPI);
                obj.JNAM = eval(this.JNAM);
                obj.SCPP = eval(this.SCPP);
                obj.SCSP = eval(this.SCSP);
                if (SPMA != null)
                {
                    obj.SPMA = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SPMA.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SPMA.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SPMA.Specific = l;
                        foreach (var item in SPMA.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (SPEX != null)
                {
                    obj.SPEX = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SPEX.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SPEX.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SPEX.Specific = l;
                        foreach (var item in SPEX.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.SPRK = eval(this.SPRK);
                obj.SPRW = eval(this.SPRW);
                obj.SPRP = eval(this.SPRP);
                obj.SPDF = eval(this.SPDF);
                obj.SPPQ = eval(this.SPPQ);
                if (SPKW != null)
                {
                    obj.SPKW = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SPKW.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SPKW.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SPKW.Specific = l;
                        foreach (var item in SPKW.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (SPPK != null)
                {
                    obj.SPPK = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SPPK.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SPPK.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SPPK.Specific = l;
                        foreach (var item in SPPK.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (SPKY != null)
                {
                    obj.SPKY = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SPKY.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SPKY.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SPKY.Specific = l;
                        foreach (var item in SPKY.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DEVT = eval(this.DEVT);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Scene.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Scene.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Scene.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Phases?.Overall ?? true)
                        && Phases is {} PhasesItem)
                    {
                        sb.AppendLine("Phases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PhasesItem.Overall);
                            if (PhasesItem.Specific != null)
                            {
                                foreach (var subItem in PhasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Actors?.Overall ?? true)
                        && Actors is {} ActorsItem)
                    {
                        sb.AppendLine("Actors =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorsItem.Overall);
                            if (ActorsItem.Specific != null)
                            {
                                foreach (var subItem in ActorsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Actions?.Overall ?? true)
                        && Actions is {} ActionsItem)
                    {
                        sb.AppendLine("Actions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActionsItem.Overall);
                            if (ActionsItem.Specific != null)
                            {
                                foreach (var subItem in ActionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Quest ?? true)
                    {
                        sb.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.LastActionIndex ?? true)
                    {
                        sb.AppendItem(LastActionIndex, "LastActionIndex");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SetParentQuestStage?.Overall ?? true)
                    {
                        SetParentQuestStage?.Print(sb);
                    }
                    if (printMask?.Notes ?? true)
                    {
                        sb.AppendItem(Notes, "Notes");
                    }
                    if (printMask?.Template ?? true)
                    {
                        sb.AppendItem(Template, "Template");
                    }
                    if (printMask?.BOLV ?? true)
                    {
                        sb.AppendItem(BOLV, "BOLV");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.SCPI ?? true)
                    {
                        sb.AppendItem(SCPI, "SCPI");
                    }
                    if (printMask?.JNAM ?? true)
                    {
                        sb.AppendItem(JNAM, "JNAM");
                    }
                    if (printMask?.SCPP ?? true)
                    {
                        sb.AppendItem(SCPP, "SCPP");
                    }
                    if (printMask?.SCSP ?? true)
                    {
                        sb.AppendItem(SCSP, "SCSP");
                    }
                    if ((printMask?.SPMA?.Overall ?? true)
                        && SPMA is {} SPMAItem)
                    {
                        sb.AppendLine("SPMA =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SPMAItem.Overall);
                            if (SPMAItem.Specific != null)
                            {
                                foreach (var subItem in SPMAItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.SPEX?.Overall ?? true)
                        && SPEX is {} SPEXItem)
                    {
                        sb.AppendLine("SPEX =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SPEXItem.Overall);
                            if (SPEXItem.Specific != null)
                            {
                                foreach (var subItem in SPEXItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SPRK ?? true)
                    {
                        sb.AppendItem(SPRK, "SPRK");
                    }
                    if (printMask?.SPRW ?? true)
                    {
                        sb.AppendItem(SPRW, "SPRW");
                    }
                    if (printMask?.SPRP ?? true)
                    {
                        sb.AppendItem(SPRP, "SPRP");
                    }
                    if (printMask?.SPDF ?? true)
                    {
                        sb.AppendItem(SPDF, "SPDF");
                    }
                    if (printMask?.SPPQ ?? true)
                    {
                        sb.AppendItem(SPPQ, "SPPQ");
                    }
                    if ((printMask?.SPKW?.Overall ?? true)
                        && SPKW is {} SPKWItem)
                    {
                        sb.AppendLine("SPKW =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SPKWItem.Overall);
                            if (SPKWItem.Specific != null)
                            {
                                foreach (var subItem in SPKWItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.SPPK?.Overall ?? true)
                        && SPPK is {} SPPKItem)
                    {
                        sb.AppendLine("SPPK =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SPPKItem.Overall);
                            if (SPPKItem.Specific != null)
                            {
                                foreach (var subItem in SPPKItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.SPKY?.Overall ?? true)
                        && SPKY is {} SPKYItem)
                    {
                        sb.AppendLine("SPKY =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SPKYItem.Overall);
                            if (SPKYItem.Specific != null)
                            {
                                foreach (var subItem in SPKYItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DEVT ?? true)
                    {
                        sb.AppendItem(DEVT, "DEVT");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, SceneAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>? Phases;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>? Actors;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ASceneAction.ErrorMask?>>?>? Actions;
            public Exception? Quest;
            public Exception? LastActionIndex;
            public Exception? VNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>? SetParentQuestStage;
            public Exception? Notes;
            public Exception? Template;
            public Exception? BOLV;
            public Exception? Index;
            public Exception? SCPI;
            public Exception? JNAM;
            public Exception? SCPP;
            public Exception? SCSP;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SPMA;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SPEX;
            public Exception? SPRK;
            public Exception? SPRW;
            public Exception? SPRP;
            public Exception? SPDF;
            public Exception? SPPQ;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SPKW;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SPPK;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SPKY;
            public Exception? DEVT;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Scene_FieldIndex.Flags:
                        return Flags;
                    case Scene_FieldIndex.Phases:
                        return Phases;
                    case Scene_FieldIndex.Actors:
                        return Actors;
                    case Scene_FieldIndex.Actions:
                        return Actions;
                    case Scene_FieldIndex.Quest:
                        return Quest;
                    case Scene_FieldIndex.LastActionIndex:
                        return LastActionIndex;
                    case Scene_FieldIndex.VNAM:
                        return VNAM;
                    case Scene_FieldIndex.Conditions:
                        return Conditions;
                    case Scene_FieldIndex.SetParentQuestStage:
                        return SetParentQuestStage;
                    case Scene_FieldIndex.Notes:
                        return Notes;
                    case Scene_FieldIndex.Template:
                        return Template;
                    case Scene_FieldIndex.BOLV:
                        return BOLV;
                    case Scene_FieldIndex.Index:
                        return Index;
                    case Scene_FieldIndex.SCPI:
                        return SCPI;
                    case Scene_FieldIndex.JNAM:
                        return JNAM;
                    case Scene_FieldIndex.SCPP:
                        return SCPP;
                    case Scene_FieldIndex.SCSP:
                        return SCSP;
                    case Scene_FieldIndex.SPMA:
                        return SPMA;
                    case Scene_FieldIndex.SPEX:
                        return SPEX;
                    case Scene_FieldIndex.SPRK:
                        return SPRK;
                    case Scene_FieldIndex.SPRW:
                        return SPRW;
                    case Scene_FieldIndex.SPRP:
                        return SPRP;
                    case Scene_FieldIndex.SPDF:
                        return SPDF;
                    case Scene_FieldIndex.SPPQ:
                        return SPPQ;
                    case Scene_FieldIndex.SPKW:
                        return SPKW;
                    case Scene_FieldIndex.SPPK:
                        return SPPK;
                    case Scene_FieldIndex.SPKY:
                        return SPKY;
                    case Scene_FieldIndex.DEVT:
                        return DEVT;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, SceneAdapter.ErrorMask?>(ex, null);
                        break;
                    case Scene_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Scene_FieldIndex.Phases:
                        this.Phases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Actors:
                        this.Actors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ASceneAction.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case Scene_FieldIndex.LastActionIndex:
                        this.LastActionIndex = ex;
                        break;
                    case Scene_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case Scene_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.SetParentQuestStage:
                        this.SetParentQuestStage = new MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>(ex, null);
                        break;
                    case Scene_FieldIndex.Notes:
                        this.Notes = ex;
                        break;
                    case Scene_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    case Scene_FieldIndex.BOLV:
                        this.BOLV = ex;
                        break;
                    case Scene_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case Scene_FieldIndex.SCPI:
                        this.SCPI = ex;
                        break;
                    case Scene_FieldIndex.JNAM:
                        this.JNAM = ex;
                        break;
                    case Scene_FieldIndex.SCPP:
                        this.SCPP = ex;
                        break;
                    case Scene_FieldIndex.SCSP:
                        this.SCSP = ex;
                        break;
                    case Scene_FieldIndex.SPMA:
                        this.SPMA = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scene_FieldIndex.SPEX:
                        this.SPEX = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scene_FieldIndex.SPRK:
                        this.SPRK = ex;
                        break;
                    case Scene_FieldIndex.SPRW:
                        this.SPRW = ex;
                        break;
                    case Scene_FieldIndex.SPRP:
                        this.SPRP = ex;
                        break;
                    case Scene_FieldIndex.SPDF:
                        this.SPDF = ex;
                        break;
                    case Scene_FieldIndex.SPPQ:
                        this.SPPQ = ex;
                        break;
                    case Scene_FieldIndex.SPKW:
                        this.SPKW = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scene_FieldIndex.SPPK:
                        this.SPPK = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scene_FieldIndex.SPKY:
                        this.SPKY = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scene_FieldIndex.DEVT:
                        this.DEVT = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, SceneAdapter.ErrorMask?>?)obj;
                        break;
                    case Scene_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Phases:
                        this.Phases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Actors:
                        this.Actors = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ASceneAction.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.LastActionIndex:
                        this.LastActionIndex = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.SetParentQuestStage:
                        this.SetParentQuestStage = (MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>?)obj;
                        break;
                    case Scene_FieldIndex.Notes:
                        this.Notes = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.BOLV:
                        this.BOLV = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SCPI:
                        this.SCPI = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.JNAM:
                        this.JNAM = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SCPP:
                        this.SCPP = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SCSP:
                        this.SCSP = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPMA:
                        this.SPMA = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scene_FieldIndex.SPEX:
                        this.SPEX = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scene_FieldIndex.SPRK:
                        this.SPRK = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPRW:
                        this.SPRW = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPRP:
                        this.SPRP = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPDF:
                        this.SPDF = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPPQ:
                        this.SPPQ = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.SPKW:
                        this.SPKW = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scene_FieldIndex.SPPK:
                        this.SPPK = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scene_FieldIndex.SPKY:
                        this.SPKY = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scene_FieldIndex.DEVT:
                        this.DEVT = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Flags != null) return true;
                if (Phases != null) return true;
                if (Actors != null) return true;
                if (Actions != null) return true;
                if (Quest != null) return true;
                if (LastActionIndex != null) return true;
                if (VNAM != null) return true;
                if (Conditions != null) return true;
                if (SetParentQuestStage != null) return true;
                if (Notes != null) return true;
                if (Template != null) return true;
                if (BOLV != null) return true;
                if (Index != null) return true;
                if (SCPI != null) return true;
                if (JNAM != null) return true;
                if (SCPP != null) return true;
                if (SCSP != null) return true;
                if (SPMA != null) return true;
                if (SPEX != null) return true;
                if (SPRK != null) return true;
                if (SPRW != null) return true;
                if (SPRP != null) return true;
                if (SPDF != null) return true;
                if (SPPQ != null) return true;
                if (SPKW != null) return true;
                if (SPPK != null) return true;
                if (SPKY != null) return true;
                if (DEVT != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                if (Phases is {} PhasesItem)
                {
                    sb.AppendLine("Phases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PhasesItem.Overall);
                        if (PhasesItem.Specific != null)
                        {
                            foreach (var subItem in PhasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Actors is {} ActorsItem)
                {
                    sb.AppendLine("Actors =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorsItem.Overall);
                        if (ActorsItem.Specific != null)
                        {
                            foreach (var subItem in ActorsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Actions is {} ActionsItem)
                {
                    sb.AppendLine("Actions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActionsItem.Overall);
                        if (ActionsItem.Specific != null)
                        {
                            foreach (var subItem in ActionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Quest, "Quest");
                }
                {
                    sb.AppendItem(LastActionIndex, "LastActionIndex");
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                SetParentQuestStage?.Print(sb);
                {
                    sb.AppendItem(Notes, "Notes");
                }
                {
                    sb.AppendItem(Template, "Template");
                }
                {
                    sb.AppendItem(BOLV, "BOLV");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(SCPI, "SCPI");
                }
                {
                    sb.AppendItem(JNAM, "JNAM");
                }
                {
                    sb.AppendItem(SCPP, "SCPP");
                }
                {
                    sb.AppendItem(SCSP, "SCSP");
                }
                if (SPMA is {} SPMAItem)
                {
                    sb.AppendLine("SPMA =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SPMAItem.Overall);
                        if (SPMAItem.Specific != null)
                        {
                            foreach (var subItem in SPMAItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (SPEX is {} SPEXItem)
                {
                    sb.AppendLine("SPEX =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SPEXItem.Overall);
                        if (SPEXItem.Specific != null)
                        {
                            foreach (var subItem in SPEXItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SPRK, "SPRK");
                }
                {
                    sb.AppendItem(SPRW, "SPRW");
                }
                {
                    sb.AppendItem(SPRP, "SPRP");
                }
                {
                    sb.AppendItem(SPDF, "SPDF");
                }
                {
                    sb.AppendItem(SPPQ, "SPPQ");
                }
                if (SPKW is {} SPKWItem)
                {
                    sb.AppendLine("SPKW =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SPKWItem.Overall);
                        if (SPKWItem.Specific != null)
                        {
                            foreach (var subItem in SPKWItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (SPPK is {} SPPKItem)
                {
                    sb.AppendLine("SPPK =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SPPKItem.Overall);
                        if (SPPKItem.Specific != null)
                        {
                            foreach (var subItem in SPPKItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (SPKY is {} SPKYItem)
                {
                    sb.AppendLine("SPKY =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SPKYItem.Overall);
                        if (SPKYItem.Specific != null)
                        {
                            foreach (var subItem in SPKYItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DEVT, "DEVT");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Phases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Phases?.Overall, rhs.Phases?.Overall), Noggog.ExceptionExt.Combine(this.Phases?.Specific, rhs.Phases?.Specific));
                ret.Actors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Actors?.Overall, rhs.Actors?.Overall), Noggog.ExceptionExt.Combine(this.Actors?.Specific, rhs.Actors?.Specific));
                ret.Actions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ASceneAction.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Actions?.Overall, rhs.Actions?.Overall), Noggog.ExceptionExt.Combine(this.Actions?.Specific, rhs.Actions?.Specific));
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.LastActionIndex = this.LastActionIndex.Combine(rhs.LastActionIndex);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.SetParentQuestStage = this.SetParentQuestStage.Combine(rhs.SetParentQuestStage, (l, r) => l.Combine(r));
                ret.Notes = this.Notes.Combine(rhs.Notes);
                ret.Template = this.Template.Combine(rhs.Template);
                ret.BOLV = this.BOLV.Combine(rhs.BOLV);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.SCPI = this.SCPI.Combine(rhs.SCPI);
                ret.JNAM = this.JNAM.Combine(rhs.JNAM);
                ret.SCPP = this.SCPP.Combine(rhs.SCPP);
                ret.SCSP = this.SCSP.Combine(rhs.SCSP);
                ret.SPMA = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SPMA?.Overall, rhs.SPMA?.Overall), Noggog.ExceptionExt.Combine(this.SPMA?.Specific, rhs.SPMA?.Specific));
                ret.SPEX = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SPEX?.Overall, rhs.SPEX?.Overall), Noggog.ExceptionExt.Combine(this.SPEX?.Specific, rhs.SPEX?.Specific));
                ret.SPRK = this.SPRK.Combine(rhs.SPRK);
                ret.SPRW = this.SPRW.Combine(rhs.SPRW);
                ret.SPRP = this.SPRP.Combine(rhs.SPRP);
                ret.SPDF = this.SPDF.Combine(rhs.SPDF);
                ret.SPPQ = this.SPPQ.Combine(rhs.SPPQ);
                ret.SPKW = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SPKW?.Overall, rhs.SPKW?.Overall), Noggog.ExceptionExt.Combine(this.SPKW?.Specific, rhs.SPKW?.Specific));
                ret.SPPK = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SPPK?.Overall, rhs.SPPK?.Overall), Noggog.ExceptionExt.Combine(this.SPPK?.Specific, rhs.SPPK?.Specific));
                ret.SPKY = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SPKY?.Overall, rhs.SPKY?.Overall), Noggog.ExceptionExt.Combine(this.SPKY?.Specific, rhs.SPKY?.Specific));
                ret.DEVT = this.DEVT.Combine(rhs.DEVT);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public SceneAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Flags;
            public ScenePhase.TranslationMask? Phases;
            public SceneActor.TranslationMask? Actors;
            public ASceneAction.TranslationMask? Actions;
            public bool Quest;
            public bool LastActionIndex;
            public bool VNAM;
            public Condition.TranslationMask? Conditions;
            public SceneSetParentQuestStage.TranslationMask? SetParentQuestStage;
            public bool Notes;
            public bool Template;
            public bool BOLV;
            public bool Index;
            public bool SCPI;
            public bool JNAM;
            public bool SCPP;
            public bool SCSP;
            public bool SPMA;
            public bool SPEX;
            public bool SPRK;
            public bool SPRW;
            public bool SPRP;
            public bool SPDF;
            public bool SPPQ;
            public bool SPKW;
            public bool SPPK;
            public bool SPKY;
            public bool DEVT;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.Quest = defaultOn;
                this.LastActionIndex = defaultOn;
                this.VNAM = defaultOn;
                this.Notes = defaultOn;
                this.Template = defaultOn;
                this.BOLV = defaultOn;
                this.Index = defaultOn;
                this.SCPI = defaultOn;
                this.JNAM = defaultOn;
                this.SCPP = defaultOn;
                this.SCSP = defaultOn;
                this.SPMA = defaultOn;
                this.SPEX = defaultOn;
                this.SPRK = defaultOn;
                this.SPRW = defaultOn;
                this.SPRP = defaultOn;
                this.SPDF = defaultOn;
                this.SPPQ = defaultOn;
                this.SPKW = defaultOn;
                this.SPPK = defaultOn;
                this.SPKY = defaultOn;
                this.DEVT = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Phases == null ? DefaultOn : !Phases.GetCrystal().CopyNothing, Phases?.GetCrystal()));
                ret.Add((Actors == null ? DefaultOn : !Actors.GetCrystal().CopyNothing, Actors?.GetCrystal()));
                ret.Add((Actions == null ? DefaultOn : !Actions.GetCrystal().CopyNothing, Actions?.GetCrystal()));
                ret.Add((Quest, null));
                ret.Add((LastActionIndex, null));
                ret.Add((VNAM, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((SetParentQuestStage != null ? SetParentQuestStage.OnOverall : DefaultOn, SetParentQuestStage?.GetCrystal()));
                ret.Add((Notes, null));
                ret.Add((Template, null));
                ret.Add((BOLV, null));
                ret.Add((Index, null));
                ret.Add((SCPI, null));
                ret.Add((JNAM, null));
                ret.Add((SCPP, null));
                ret.Add((SCSP, null));
                ret.Add((SPMA, null));
                ret.Add((SPEX, null));
                ret.Add((SPRK, null));
                ret.Add((SPRW, null));
                ret.Add((SPRP, null));
                ret.Add((SPDF, null));
                ret.Add((SPPQ, null));
                ret.Add((SPKW, null));
                ret.Add((SPPK, null));
                ret.Add((SPKY, null));
                ret.Add((DEVT, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Scene_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SceneCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SceneSetterCommon.Instance.RemapLinks(this, mapping);
        public Scene(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Scene(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Scene(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Scene(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Scene(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Scene>.ToString(this);
        }

        protected override Type LinkType => typeof(IScene);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISceneGetter rhs) return false;
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneGetter? obj)
        {
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneCommon)((ISceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Scene CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Scene();
            ((SceneSetterCommon)((ISceneGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Scene item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SceneSetterCommon)((ISceneGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Scene GetNew()
        {
            return new Scene();
        }

    }
    #endregion

    #region Interface
    public partial interface IScene :
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<ISceneInternal>,
        ISceneGetter,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new SceneAdapter? VirtualMachineAdapter { get; set; }
        new Scene.Flag? Flags { get; set; }
        new ExtendedList<ScenePhase> Phases { get; }
        new ExtendedList<SceneActor> Actors { get; }
        new ExtendedList<ASceneAction>? Actions { get; set; }
        new IFormLinkNullable<IQuestGetter> Quest { get; set; }
        new UInt32? LastActionIndex { get; set; }
        new MemorySlice<Byte>? VNAM { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new SceneSetParentQuestStage? SetParentQuestStage { get; set; }
        new String? Notes { get; set; }
        new IFormLinkNullable<ISceneGetter> Template { get; set; }
        new MemorySlice<Byte>? BOLV { get; set; }
        new UInt32? Index { get; set; }
        new MemorySlice<Byte>? SCPI { get; set; }
        new MemorySlice<Byte>? JNAM { get; set; }
        new IFormLinkNullable<ISceneGetter> SCPP { get; set; }
        new Boolean SCSP { get; set; }
        new ExtendedList<IFormLinkGetter<ISceneGetter>>? SPMA { get; set; }
        new ExtendedList<IFormLinkGetter<ISceneGetter>>? SPEX { get; set; }
        new MemorySlice<Byte>? SPRK { get; set; }
        new MemorySlice<Byte>? SPRW { get; set; }
        new Boolean SPRP { get; set; }
        new Boolean SPDF { get; set; }
        new Boolean SPPQ { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? SPKW { get; set; }
        new ExtendedList<IFormLinkGetter<IPerkGetter>>? SPPK { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? SPKY { get; set; }
        new Boolean DEVT { get; set; }
    }

    public partial interface ISceneInternal :
        IStarfieldMajorRecordInternal,
        IScene,
        ISceneGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SCEN)]
    public partial interface ISceneGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<ISceneGetter>,
        IMapsToGetter<ISceneGetter>
    {
        static new ILoquiRegistration StaticRegistration => Scene_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        ISceneAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        Scene.Flag? Flags { get; }
        IReadOnlyList<IScenePhaseGetter> Phases { get; }
        IReadOnlyList<ISceneActorGetter> Actors { get; }
        IReadOnlyList<IASceneActionGetter>? Actions { get; }
        IFormLinkNullableGetter<IQuestGetter> Quest { get; }
        UInt32? LastActionIndex { get; }
        ReadOnlyMemorySlice<Byte>? VNAM { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        ISceneSetParentQuestStageGetter? SetParentQuestStage { get; }
        String? Notes { get; }
        IFormLinkNullableGetter<ISceneGetter> Template { get; }
        ReadOnlyMemorySlice<Byte>? BOLV { get; }
        UInt32? Index { get; }
        ReadOnlyMemorySlice<Byte>? SCPI { get; }
        ReadOnlyMemorySlice<Byte>? JNAM { get; }
        IFormLinkNullableGetter<ISceneGetter> SCPP { get; }
        Boolean SCSP { get; }
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? SPMA { get; }
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? SPEX { get; }
        ReadOnlyMemorySlice<Byte>? SPRK { get; }
        ReadOnlyMemorySlice<Byte>? SPRW { get; }
        Boolean SPRP { get; }
        Boolean SPDF { get; }
        Boolean SPPQ { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? SPKW { get; }
        IReadOnlyList<IFormLinkGetter<IPerkGetter>>? SPPK { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? SPKY { get; }
        Boolean DEVT { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SceneMixIn
    {
        public static void Clear(this ISceneInternal item)
        {
            ((SceneSetterCommon)((ISceneGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Scene.Mask<bool> GetEqualsMask(
            this ISceneGetter item,
            ISceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISceneGetter item,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISceneGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISceneGetter item,
            ISceneGetter rhs,
            Scene.TranslationMask? equalsMask = null)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISceneInternal lhs,
            ISceneGetter rhs,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SceneSetterTranslationCommon)((ISceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Scene.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISceneInternal lhs,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SceneSetterTranslationCommon)((ISceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Scene Duplicate(
            this ISceneGetter item,
            FormKey formKey,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Scene Duplicate(
            this ISceneGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISceneInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SceneSetterCommon)((ISceneGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Scene_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Flags = 8,
        Phases = 9,
        Actors = 10,
        Actions = 11,
        Quest = 12,
        LastActionIndex = 13,
        VNAM = 14,
        Conditions = 15,
        SetParentQuestStage = 16,
        Notes = 17,
        Template = 18,
        BOLV = 19,
        Index = 20,
        SCPI = 21,
        JNAM = 22,
        SCPP = 23,
        SCSP = 24,
        SPMA = 25,
        SPEX = 26,
        SPRK = 27,
        SPRW = 28,
        SPRP = 29,
        SPDF = 30,
        SPPQ = 31,
        SPKW = 32,
        SPPK = 33,
        SPKY = 34,
        DEVT = 35,
    }
    #endregion

    #region Registration
    internal partial class Scene_Registration : ILoquiRegistration
    {
        public static readonly Scene_Registration Instance = new Scene_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 29;

        public const ushort FieldCount = 36;

        public static readonly Type MaskType = typeof(Scene.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Scene.ErrorMask);

        public static readonly Type ClassType = typeof(Scene);

        public static readonly Type GetterType = typeof(ISceneGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScene);

        public static readonly Type? InternalSetterType = typeof(ISceneInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Scene";

        public const string Name = "Scene";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCEN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SCEN);
            var all = RecordCollection.Factory(
                RecordTypes.SCEN,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.FNAM,
                RecordTypes.HNAM,
                RecordTypes.NAM0,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.NEXT,
                RecordTypes.WNAM,
                RecordTypes.SCQS,
                RecordTypes.SPMV,
                RecordTypes.ALID,
                RecordTypes.LNAM,
                RecordTypes.DNAM,
                RecordTypes.ANAM,
                RecordTypes.SNOT,
                RecordTypes.INAM,
                RecordTypes.SNAM,
                RecordTypes.ENAM,
                RecordTypes.PNAM,
                RecordTypes.VNAM,
                RecordTypes.NNAM,
                RecordTypes.TNAM,
                RecordTypes.BOLV,
                RecordTypes.XNAM,
                RecordTypes.SCPI,
                RecordTypes.JNAM,
                RecordTypes.SCPP,
                RecordTypes.SCSP,
                RecordTypes.SPMA,
                RecordTypes.SPEX,
                RecordTypes.SPRK,
                RecordTypes.SPRW,
                RecordTypes.SPRP,
                RecordTypes.SPDF,
                RecordTypes.SPPQ,
                RecordTypes.SPKW,
                RecordTypes.SPPK,
                RecordTypes.SPKY,
                RecordTypes.DEVT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SceneBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SceneSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SceneSetterCommon Instance = new SceneSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISceneInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Flags = default;
            item.Phases.Clear();
            item.Actors.Clear();
            item.Actions = null;
            item.Quest.Clear();
            item.LastActionIndex = default;
            item.VNAM = default;
            item.Conditions.Clear();
            item.SetParentQuestStage = null;
            item.Notes = default;
            item.Template.Clear();
            item.BOLV = default;
            item.Index = default;
            item.SCPI = default;
            item.JNAM = default;
            item.SCPP.Clear();
            item.SCSP = default(Boolean);
            item.SPMA = null;
            item.SPEX = null;
            item.SPRK = default;
            item.SPRW = default;
            item.SPRP = default(Boolean);
            item.SPDF = default(Boolean);
            item.SPPQ = default(Boolean);
            item.SPKW = null;
            item.SPPK = null;
            item.SPKY = null;
            item.DEVT = default(Boolean);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISceneInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISceneInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScene obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Phases.RemapLinks(mapping);
            obj.Actions?.RemapLinks(mapping);
            obj.Quest.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Template.Relink(mapping);
            obj.SCPP.Relink(mapping);
            obj.SPMA?.RemapLinks(mapping);
            obj.SPEX?.RemapLinks(mapping);
            obj.SPKW?.RemapLinks(mapping);
            obj.SPPK?.RemapLinks(mapping);
            obj.SPKY?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISceneInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISceneInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SceneBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SceneBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Scene)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Scene)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SceneCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SceneCommon Instance = new SceneCommon();

        public Scene.Mask<bool> GetEqualsMask(
            ISceneGetter item,
            ISceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Scene.Mask<bool>(false);
            ((SceneCommon)((ISceneGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISceneGetter item,
            ISceneGetter rhs,
            Scene.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Phases = item.Phases.CollectionEqualsHelper(
                rhs.Phases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Actors = item.Actors.CollectionEqualsHelper(
                rhs.Actors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Actions = item.Actions.CollectionEqualsHelper(
                rhs.Actions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.LastActionIndex = item.LastActionIndex == rhs.LastActionIndex;
            ret.VNAM = MemorySliceExt.SequenceEqual(item.VNAM, rhs.VNAM);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SetParentQuestStage = EqualsMaskHelper.EqualsHelper(
                item.SetParentQuestStage,
                rhs.SetParentQuestStage,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Notes = string.Equals(item.Notes, rhs.Notes);
            ret.Template = item.Template.Equals(rhs.Template);
            ret.BOLV = MemorySliceExt.SequenceEqual(item.BOLV, rhs.BOLV);
            ret.Index = item.Index == rhs.Index;
            ret.SCPI = MemorySliceExt.SequenceEqual(item.SCPI, rhs.SCPI);
            ret.JNAM = MemorySliceExt.SequenceEqual(item.JNAM, rhs.JNAM);
            ret.SCPP = item.SCPP.Equals(rhs.SCPP);
            ret.SCSP = item.SCSP == rhs.SCSP;
            ret.SPMA = item.SPMA.CollectionEqualsHelper(
                rhs.SPMA,
                (l, r) => object.Equals(l, r),
                include);
            ret.SPEX = item.SPEX.CollectionEqualsHelper(
                rhs.SPEX,
                (l, r) => object.Equals(l, r),
                include);
            ret.SPRK = MemorySliceExt.SequenceEqual(item.SPRK, rhs.SPRK);
            ret.SPRW = MemorySliceExt.SequenceEqual(item.SPRW, rhs.SPRW);
            ret.SPRP = item.SPRP == rhs.SPRP;
            ret.SPDF = item.SPDF == rhs.SPDF;
            ret.SPPQ = item.SPPQ == rhs.SPPQ;
            ret.SPKW = item.SPKW.CollectionEqualsHelper(
                rhs.SPKW,
                (l, r) => object.Equals(l, r),
                include);
            ret.SPPK = item.SPPK.CollectionEqualsHelper(
                rhs.SPPK,
                (l, r) => object.Equals(l, r),
                include);
            ret.SPKY = item.SPKY.CollectionEqualsHelper(
                rhs.SPKY,
                (l, r) => object.Equals(l, r),
                include);
            ret.DEVT = item.DEVT == rhs.DEVT;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISceneGetter item,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISceneGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Scene =>");
            }
            else
            {
                sb.AppendLine($"{name} (Scene) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISceneGetter item,
            StructuredStringBuilder sb,
            Scene.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Phases?.Overall ?? true)
            {
                sb.AppendLine("Phases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Phases)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Actors?.Overall ?? true)
            {
                sb.AppendLine("Actors =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Actors)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Actions?.Overall ?? true)
                && item.Actions is {} ActionsItem)
            {
                sb.AppendLine("Actions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Quest ?? true)
            {
                sb.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if ((printMask?.LastActionIndex ?? true)
                && item.LastActionIndex is {} LastActionIndexItem)
            {
                sb.AppendItem(LastActionIndexItem, "LastActionIndex");
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM is {} VNAMItem)
            {
                sb.AppendLine($"VNAM => {SpanExt.ToHexString(VNAMItem)}");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.SetParentQuestStage?.Overall ?? true)
                && item.SetParentQuestStage is {} SetParentQuestStageItem)
            {
                SetParentQuestStageItem?.Print(sb, "SetParentQuestStage");
            }
            if ((printMask?.Notes ?? true)
                && item.Notes is {} NotesItem)
            {
                sb.AppendItem(NotesItem, "Notes");
            }
            if (printMask?.Template ?? true)
            {
                sb.AppendItem(item.Template.FormKeyNullable, "Template");
            }
            if ((printMask?.BOLV ?? true)
                && item.BOLV is {} BOLVItem)
            {
                sb.AppendLine($"BOLV => {SpanExt.ToHexString(BOLVItem)}");
            }
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.SCPI ?? true)
                && item.SCPI is {} SCPIItem)
            {
                sb.AppendLine($"SCPI => {SpanExt.ToHexString(SCPIItem)}");
            }
            if ((printMask?.JNAM ?? true)
                && item.JNAM is {} JNAMItem)
            {
                sb.AppendLine($"JNAM => {SpanExt.ToHexString(JNAMItem)}");
            }
            if (printMask?.SCPP ?? true)
            {
                sb.AppendItem(item.SCPP.FormKeyNullable, "SCPP");
            }
            if (printMask?.SCSP ?? true)
            {
                sb.AppendItem(item.SCSP, "SCSP");
            }
            if ((printMask?.SPMA?.Overall ?? true)
                && item.SPMA is {} SPMAItem)
            {
                sb.AppendLine("SPMA =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SPMAItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.SPEX?.Overall ?? true)
                && item.SPEX is {} SPEXItem)
            {
                sb.AppendLine("SPEX =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SPEXItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.SPRK ?? true)
                && item.SPRK is {} SPRKItem)
            {
                sb.AppendLine($"SPRK => {SpanExt.ToHexString(SPRKItem)}");
            }
            if ((printMask?.SPRW ?? true)
                && item.SPRW is {} SPRWItem)
            {
                sb.AppendLine($"SPRW => {SpanExt.ToHexString(SPRWItem)}");
            }
            if (printMask?.SPRP ?? true)
            {
                sb.AppendItem(item.SPRP, "SPRP");
            }
            if (printMask?.SPDF ?? true)
            {
                sb.AppendItem(item.SPDF, "SPDF");
            }
            if (printMask?.SPPQ ?? true)
            {
                sb.AppendItem(item.SPPQ, "SPPQ");
            }
            if ((printMask?.SPKW?.Overall ?? true)
                && item.SPKW is {} SPKWItem)
            {
                sb.AppendLine("SPKW =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SPKWItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.SPPK?.Overall ?? true)
                && item.SPPK is {} SPPKItem)
            {
                sb.AppendLine("SPPK =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SPPKItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.SPKY?.Overall ?? true)
                && item.SPKY is {} SPKYItem)
            {
                sb.AppendLine("SPKY =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SPKYItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.DEVT ?? true)
            {
                sb.AppendItem(item.DEVT, "DEVT");
            }
        }
        
        public static Scene_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Scene_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Scene_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Scene_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Scene_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISceneGetter? lhs,
            ISceneGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((SceneAdapterCommon)((ISceneAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Phases) ?? true))
            {
                if (!lhs.Phases.SequenceEqual(rhs.Phases, (l, r) => ((ScenePhaseCommon)((IScenePhaseGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.Phases)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Actors) ?? true))
            {
                if (!lhs.Actors.SequenceEqual(rhs.Actors, (l, r) => ((SceneActorCommon)((ISceneActorGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.Actors)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Actions) ?? true))
            {
                if (!lhs.Actions.SequenceEqualNullable(rhs.Actions, (l, r) => ((ASceneActionCommon)((IASceneActionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.Actions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.LastActionIndex) ?? true))
            {
                if (lhs.LastActionIndex != rhs.LastActionIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.VNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.VNAM, rhs.VNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SetParentQuestStage) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SetParentQuestStage, rhs.SetParentQuestStage, out var lhsSetParentQuestStage, out var rhsSetParentQuestStage, out var isSetParentQuestStageEqual))
                {
                    if (!((SceneSetParentQuestStageCommon)((ISceneSetParentQuestStageGetter)lhsSetParentQuestStage).CommonInstance()!).Equals(lhsSetParentQuestStage, rhsSetParentQuestStage, equalsMask?.GetSubCrystal((int)Scene_FieldIndex.SetParentQuestStage))) return false;
                }
                else if (!isSetParentQuestStageEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Notes) ?? true))
            {
                if (!string.Equals(lhs.Notes, rhs.Notes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Template) ?? true))
            {
                if (!lhs.Template.Equals(rhs.Template)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.BOLV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BOLV, rhs.BOLV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SCPI) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SCPI, rhs.SCPI)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.JNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.JNAM, rhs.JNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SCPP) ?? true))
            {
                if (!lhs.SCPP.Equals(rhs.SCPP)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SCSP) ?? true))
            {
                if (lhs.SCSP != rhs.SCSP) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPMA) ?? true))
            {
                if (!lhs.SPMA.SequenceEqualNullable(rhs.SPMA)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPEX) ?? true))
            {
                if (!lhs.SPEX.SequenceEqualNullable(rhs.SPEX)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRK) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SPRK, rhs.SPRK)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRW) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SPRW, rhs.SPRW)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRP) ?? true))
            {
                if (lhs.SPRP != rhs.SPRP) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPDF) ?? true))
            {
                if (lhs.SPDF != rhs.SPDF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPPQ) ?? true))
            {
                if (lhs.SPPQ != rhs.SPPQ) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPKW) ?? true))
            {
                if (!lhs.SPKW.SequenceEqualNullable(rhs.SPKW)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPPK) ?? true))
            {
                if (!lhs.SPPK.SequenceEqualNullable(rhs.SPPK)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.SPKY) ?? true))
            {
                if (!lhs.SPKY.SequenceEqualNullable(rhs.SPKY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Scene_FieldIndex.DEVT) ?? true))
            {
                if (lhs.DEVT != rhs.DEVT) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISceneGetter?)lhs,
                rhs: rhs as ISceneGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISceneGetter?)lhs,
                rhs: rhs as ISceneGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISceneGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Phases);
            hash.Add(item.Actors);
            hash.Add(item.Actions);
            hash.Add(item.Quest);
            if (item.LastActionIndex is {} LastActionIndexitem)
            {
                hash.Add(LastActionIndexitem);
            }
            if (item.VNAM is {} VNAMItem)
            {
                hash.Add(VNAMItem);
            }
            hash.Add(item.Conditions);
            if (item.SetParentQuestStage is {} SetParentQuestStageitem)
            {
                hash.Add(SetParentQuestStageitem);
            }
            if (item.Notes is {} Notesitem)
            {
                hash.Add(Notesitem);
            }
            hash.Add(item.Template);
            if (item.BOLV is {} BOLVItem)
            {
                hash.Add(BOLVItem);
            }
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            if (item.SCPI is {} SCPIItem)
            {
                hash.Add(SCPIItem);
            }
            if (item.JNAM is {} JNAMItem)
            {
                hash.Add(JNAMItem);
            }
            hash.Add(item.SCPP);
            hash.Add(item.SCSP);
            hash.Add(item.SPMA);
            hash.Add(item.SPEX);
            if (item.SPRK is {} SPRKItem)
            {
                hash.Add(SPRKItem);
            }
            if (item.SPRW is {} SPRWItem)
            {
                hash.Add(SPRWItem);
            }
            hash.Add(item.SPRP);
            hash.Add(item.SPDF);
            hash.Add(item.SPPQ);
            hash.Add(item.SPKW);
            hash.Add(item.SPPK);
            hash.Add(item.SPKY);
            hash.Add(item.DEVT);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Scene.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISceneGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Phases.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Actions is {} ActionsItem)
            {
                foreach (var item in ActionsItem.WhereCastable<IASceneActionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Quest, out var QuestInfo))
            {
                yield return QuestInfo;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Template, out var TemplateInfo))
            {
                yield return TemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SCPP, out var SCPPInfo))
            {
                yield return SCPPInfo;
            }
            if (obj.SPMA is {} SPMAItem)
            {
                foreach (var item in SPMAItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SPEX is {} SPEXItem)
            {
                foreach (var item in SPEXItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SPKW is {} SPKWItem)
            {
                foreach (var item in SPKWItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SPPK is {} SPPKItem)
            {
                foreach (var item in SPPKItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SPKY is {} SPKYItem)
            {
                foreach (var item in SPKYItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Scene Duplicate(
            ISceneGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Scene(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISceneGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISceneGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SceneSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SceneSetterTranslationCommon Instance = new SceneSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISceneInternal item,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IScene item,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scene_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Phases) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Phases);
                try
                {
                    item.Phases.SetTo(
                        rhs.Phases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Actors) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Actors);
                try
                {
                    item.Actors.SetTo(
                        rhs.Actors
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Actions);
                try
                {
                    if ((rhs.Actions != null))
                    {
                        item.Actions = 
                            rhs.Actions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ASceneAction>();
                    }
                    else
                    {
                        item.Actions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.LastActionIndex) ?? true))
            {
                item.LastActionIndex = rhs.LastActionIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.VNAM) ?? true))
            {
                if(rhs.VNAM is {} VNAMrhs)
                {
                    item.VNAM = VNAMrhs.ToArray();
                }
                else
                {
                    item.VNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SetParentQuestStage) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SetParentQuestStage);
                try
                {
                    if(rhs.SetParentQuestStage is {} rhsSetParentQuestStage)
                    {
                        item.SetParentQuestStage = rhsSetParentQuestStage.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scene_FieldIndex.SetParentQuestStage));
                    }
                    else
                    {
                        item.SetParentQuestStage = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Notes) ?? true))
            {
                item.Notes = rhs.Notes;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Template) ?? true))
            {
                item.Template.SetTo(rhs.Template.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.BOLV) ?? true))
            {
                if(rhs.BOLV is {} BOLVrhs)
                {
                    item.BOLV = BOLVrhs.ToArray();
                }
                else
                {
                    item.BOLV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SCPI) ?? true))
            {
                if(rhs.SCPI is {} SCPIrhs)
                {
                    item.SCPI = SCPIrhs.ToArray();
                }
                else
                {
                    item.SCPI = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.JNAM) ?? true))
            {
                if(rhs.JNAM is {} JNAMrhs)
                {
                    item.JNAM = JNAMrhs.ToArray();
                }
                else
                {
                    item.JNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SCPP) ?? true))
            {
                item.SCPP.SetTo(rhs.SCPP.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SCSP) ?? true))
            {
                item.SCSP = rhs.SCSP;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPMA) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SPMA);
                try
                {
                    if ((rhs.SPMA != null))
                    {
                        item.SPMA = 
                            rhs.SPMA
                                .Select(b => (IFormLinkGetter<ISceneGetter>)new FormLink<ISceneGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISceneGetter>>();
                    }
                    else
                    {
                        item.SPMA = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPEX) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SPEX);
                try
                {
                    if ((rhs.SPEX != null))
                    {
                        item.SPEX = 
                            rhs.SPEX
                                .Select(b => (IFormLinkGetter<ISceneGetter>)new FormLink<ISceneGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISceneGetter>>();
                    }
                    else
                    {
                        item.SPEX = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRK) ?? true))
            {
                if(rhs.SPRK is {} SPRKrhs)
                {
                    item.SPRK = SPRKrhs.ToArray();
                }
                else
                {
                    item.SPRK = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRW) ?? true))
            {
                if(rhs.SPRW is {} SPRWrhs)
                {
                    item.SPRW = SPRWrhs.ToArray();
                }
                else
                {
                    item.SPRW = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPRP) ?? true))
            {
                item.SPRP = rhs.SPRP;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPDF) ?? true))
            {
                item.SPDF = rhs.SPDF;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPPQ) ?? true))
            {
                item.SPPQ = rhs.SPPQ;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPKW) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SPKW);
                try
                {
                    if ((rhs.SPKW != null))
                    {
                        item.SPKW = 
                            rhs.SPKW
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.SPKW = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPPK) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SPPK);
                try
                {
                    if ((rhs.SPPK != null))
                    {
                        item.SPPK = 
                            rhs.SPPK
                                .Select(b => (IFormLinkGetter<IPerkGetter>)new FormLink<IPerkGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPerkGetter>>();
                    }
                    else
                    {
                        item.SPPK = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.SPKY) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.SPKY);
                try
                {
                    if ((rhs.SPKY != null))
                    {
                        item.SPKY = 
                            rhs.SPKY
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.SPKY = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.DEVT) ?? true))
            {
                item.DEVT = rhs.DEVT;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IScene item,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneInternal)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScene)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneInternal)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScene)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Scene DeepCopy(
            ISceneGetter item,
            Scene.TranslationMask? copyMask = null)
        {
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Scene DeepCopy(
            ISceneGetter item,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Scene.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Scene DeepCopy(
            ISceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Scene
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scene_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Scene_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SceneSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SceneBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SceneBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISceneGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((SceneAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            EnumBinaryTranslation<Scene.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IScenePhaseGetter>.Instance.Write(
                writer: writer,
                items: item.Phases,
                transl: (MutagenWriter subWriter, IScenePhaseGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ScenePhaseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISceneActorGetter>.Instance.Write(
                writer: writer,
                items: item.Actors,
                transl: (MutagenWriter subWriter, ISceneActorGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SceneActorBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            SceneBinaryWriteTranslation.WriteBinaryActions(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LastActionIndex,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.SetParentQuestStage is {} SetParentQuestStageItem)
            {
                ((SceneSetParentQuestStageBinaryWriteTranslation)((IBinaryItem)SetParentQuestStageItem).BinaryWriteTranslator).Write(
                    item: SetParentQuestStageItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Notes,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BOLV,
                header: translationParams.ConvertToCustom(RecordTypes.BOLV));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SCPI,
                header: translationParams.ConvertToCustom(RecordTypes.SCPI));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.JNAM,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SCPP,
                header: translationParams.ConvertToCustom(RecordTypes.SCPP));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SCSP,
                header: translationParams.ConvertToCustom(RecordTypes.SCSP));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Write(
                writer: writer,
                items: item.SPMA,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPMA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISceneGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Write(
                writer: writer,
                items: item.SPEX,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPEX),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISceneGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SPRK,
                header: translationParams.ConvertToCustom(RecordTypes.SPRK));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SPRW,
                header: translationParams.ConvertToCustom(RecordTypes.SPRW));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SPRP,
                header: translationParams.ConvertToCustom(RecordTypes.SPRP));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SPDF,
                header: translationParams.ConvertToCustom(RecordTypes.SPDF));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SPPQ,
                header: translationParams.ConvertToCustom(RecordTypes.SPPQ));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.SPKW,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPKW),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPerkGetter>>.Instance.Write(
                writer: writer,
                items: item.SPPK,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPPK),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPerkGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.SPKY,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPKY),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.DEVT,
                header: translationParams.ConvertToCustom(RecordTypes.DEVT));
        }

        public static partial void WriteBinaryActionsCustom(
            MutagenWriter writer,
            ISceneGetter item);

        public static void WriteBinaryActions(
            MutagenWriter writer,
            ISceneGetter item)
        {
            WriteBinaryActionsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ISceneGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SCEN,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SceneBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SceneBinaryCreateTranslation Instance = new SceneBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SCEN;
        public static ParseResult FillBinaryRecordTypes(
            ISceneInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.SceneAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Scene_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Scene.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Scene_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    item.Phases.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ScenePhase>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: ScenePhase_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ScenePhase.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Phases;
                }
                case RecordTypeInts.ALID:
                {
                    item.Actors.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SceneActor>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SceneActor_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SceneActor.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Actors;
                }
                case RecordTypeInts.ANAM:
                {
                    SceneBinaryCreateTranslation.FillBinaryActionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Scene_FieldIndex.Actions;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Scene_FieldIndex.Quest;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LastActionIndex = frame.ReadUInt32();
                    return (int)Scene_FieldIndex.LastActionIndex;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCQS:
                {
                    item.SetParentQuestStage = Mutagen.Bethesda.Starfield.SceneSetParentQuestStage.CreateFromBinary(frame: frame);
                    return (int)Scene_FieldIndex.SetParentQuestStage;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Notes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Scene_FieldIndex.Notes;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Scene_FieldIndex.Template;
                }
                case RecordTypeInts.BOLV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BOLV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.BOLV;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)Scene_FieldIndex.Index;
                }
                case RecordTypeInts.SCPI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCPI = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.SCPI;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.JNAM;
                }
                case RecordTypeInts.SCPP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCPP.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Scene_FieldIndex.SCPP;
                }
                case RecordTypeInts.SCSP:
                {
                    item.SCSP = true;
                    return (int)Scene_FieldIndex.SCSP;
                }
                case RecordTypeInts.SPMA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPMA = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISceneGetter>>();
                    return (int)Scene_FieldIndex.SPMA;
                }
                case RecordTypeInts.SPEX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPEX = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISceneGetter>>();
                    return (int)Scene_FieldIndex.SPEX;
                }
                case RecordTypeInts.SPRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPRK = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.SPRK;
                }
                case RecordTypeInts.SPRW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPRW = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.SPRW;
                }
                case RecordTypeInts.SPRP:
                {
                    item.SPRP = true;
                    return (int)Scene_FieldIndex.SPRP;
                }
                case RecordTypeInts.SPDF:
                {
                    item.SPDF = true;
                    return (int)Scene_FieldIndex.SPDF;
                }
                case RecordTypeInts.SPPQ:
                {
                    item.SPPQ = true;
                    return (int)Scene_FieldIndex.SPPQ;
                }
                case RecordTypeInts.SPKW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPKW = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Scene_FieldIndex.SPKW;
                }
                case RecordTypeInts.SPPK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPPK = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPerkGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPerkGetter>>();
                    return (int)Scene_FieldIndex.SPPK;
                }
                case RecordTypeInts.SPKY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SPKY = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Scene_FieldIndex.SPKY;
                }
                case RecordTypeInts.DEVT:
                {
                    item.DEVT = true;
                    return (int)Scene_FieldIndex.DEVT;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryActionsCustom(
            MutagenFrame frame,
            ISceneInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SceneBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SceneBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISceneGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scene_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Scene_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SceneCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IScene);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public ISceneAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? SceneAdapterBinaryOverlay.SceneAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Scene.Flag? Flags => EnumBinaryTranslation<Scene.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_FlagsLocation, _recordData, _package, 4);
        #endregion
        public IReadOnlyList<IScenePhaseGetter> Phases { get; private set; } = [];
        public IReadOnlyList<ISceneActorGetter> Actors { get; private set; } = [];
        #region Actions
        partial void ActionsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region Quest
        private int? _QuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> Quest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _QuestLocation);
        #endregion
        #region LastActionIndex
        private int? _LastActionIndexLocation;
        public UInt32? LastActionIndex => _LastActionIndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LastActionIndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public ReadOnlyMemorySlice<Byte>? VNAM => _VNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region SetParentQuestStage
        private RangeInt32? _SetParentQuestStageLocation;
        public ISceneSetParentQuestStageGetter? SetParentQuestStage => _SetParentQuestStageLocation.HasValue ? SceneSetParentQuestStageBinaryOverlay.SceneSetParentQuestStageFactory(_recordData.Slice(_SetParentQuestStageLocation!.Value.Min), _package) : default;
        #endregion
        #region Notes
        private int? _NotesLocation;
        public String? Notes => _NotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Template
        private int? _TemplateLocation;
        public IFormLinkNullableGetter<ISceneGetter> Template => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISceneGetter>(_package, _recordData, _TemplateLocation);
        #endregion
        #region BOLV
        private int? _BOLVLocation;
        public ReadOnlyMemorySlice<Byte>? BOLV => _BOLVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BOLVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region SCPI
        private int? _SCPILocation;
        public ReadOnlyMemorySlice<Byte>? SCPI => _SCPILocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SCPILocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region JNAM
        private int? _JNAMLocation;
        public ReadOnlyMemorySlice<Byte>? JNAM => _JNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _JNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SCPP
        private int? _SCPPLocation;
        public IFormLinkNullableGetter<ISceneGetter> SCPP => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISceneGetter>(_package, _recordData, _SCPPLocation);
        #endregion
        #region SCSP
        private int? _SCSPLocation;
        public Boolean SCSP => _SCSPLocation.HasValue ? true : default(Boolean);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISceneGetter>>? SPMA { get; private set; }
        public IReadOnlyList<IFormLinkGetter<ISceneGetter>>? SPEX { get; private set; }
        #region SPRK
        private int? _SPRKLocation;
        public ReadOnlyMemorySlice<Byte>? SPRK => _SPRKLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SPRKLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SPRW
        private int? _SPRWLocation;
        public ReadOnlyMemorySlice<Byte>? SPRW => _SPRWLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SPRWLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SPRP
        private int? _SPRPLocation;
        public Boolean SPRP => _SPRPLocation.HasValue ? true : default(Boolean);
        #endregion
        #region SPDF
        private int? _SPDFLocation;
        public Boolean SPDF => _SPDFLocation.HasValue ? true : default(Boolean);
        #endregion
        #region SPPQ
        private int? _SPPQLocation;
        public Boolean SPPQ => _SPPQLocation.HasValue ? true : default(Boolean);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? SPKW { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPerkGetter>>? SPPK { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? SPKY { get; private set; }
        #region DEVT
        private int? _DEVTLocation;
        public Boolean DEVT => _DEVTLocation.HasValue ? true : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SceneBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISceneGetter SceneFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SceneBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISceneGetter SceneFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SceneFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Scene_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    this.Phases = this.ParseRepeatedTypelessSubrecord<IScenePhaseGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: ScenePhase_Registration.TriggerSpecs,
                        factory: ScenePhaseBinaryOverlay.ScenePhaseFactory);
                    return (int)Scene_FieldIndex.Phases;
                }
                case RecordTypeInts.ALID:
                {
                    this.Actors = this.ParseRepeatedTypelessSubrecord<ISceneActorGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SceneActor_Registration.TriggerSpecs,
                        factory: SceneActorBinaryOverlay.SceneActorFactory);
                    return (int)Scene_FieldIndex.Actors;
                }
                case RecordTypeInts.ANAM:
                {
                    ActionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Scene_FieldIndex.Actions;
                }
                case RecordTypeInts.PNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Quest;
                }
                case RecordTypeInts.INAM:
                {
                    _LastActionIndexLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.LastActionIndex;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Scene_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCQS:
                {
                    _SetParentQuestStageLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Scene_FieldIndex.SetParentQuestStage;
                }
                case RecordTypeInts.NNAM:
                {
                    _NotesLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Notes;
                }
                case RecordTypeInts.TNAM:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Template;
                }
                case RecordTypeInts.BOLV:
                {
                    _BOLVLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.BOLV;
                }
                case RecordTypeInts.XNAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Index;
                }
                case RecordTypeInts.SCPI:
                {
                    _SCPILocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SCPI;
                }
                case RecordTypeInts.JNAM:
                {
                    _JNAMLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.JNAM;
                }
                case RecordTypeInts.SCPP:
                {
                    _SCPPLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SCPP;
                }
                case RecordTypeInts.SCSP:
                {
                    _SCSPLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SCSP;
                }
                case RecordTypeInts.SPMA:
                {
                    this.SPMA = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ISceneGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISceneGetter>(p, s));
                    return (int)Scene_FieldIndex.SPMA;
                }
                case RecordTypeInts.SPEX:
                {
                    this.SPEX = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ISceneGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISceneGetter>(p, s));
                    return (int)Scene_FieldIndex.SPEX;
                }
                case RecordTypeInts.SPRK:
                {
                    _SPRKLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SPRK;
                }
                case RecordTypeInts.SPRW:
                {
                    _SPRWLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SPRW;
                }
                case RecordTypeInts.SPRP:
                {
                    _SPRPLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SPRP;
                }
                case RecordTypeInts.SPDF:
                {
                    _SPDFLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SPDF;
                }
                case RecordTypeInts.SPPQ:
                {
                    _SPPQLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.SPPQ;
                }
                case RecordTypeInts.SPKW:
                {
                    this.SPKW = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Scene_FieldIndex.SPKW;
                }
                case RecordTypeInts.SPPK:
                {
                    this.SPPK = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPerkGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPerkGetter>(p, s));
                    return (int)Scene_FieldIndex.SPPK;
                }
                case RecordTypeInts.SPKY:
                {
                    this.SPKY = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Scene_FieldIndex.SPKY;
                }
                case RecordTypeInts.DEVT:
                {
                    _DEVTLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.DEVT;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Scene>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISceneGetter rhs) return false;
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneGetter? obj)
        {
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneCommon)((ISceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

