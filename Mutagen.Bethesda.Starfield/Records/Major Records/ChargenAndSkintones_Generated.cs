/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ChargenAndSkintones :
        IChargenAndSkintones,
        IEquatable<IChargenAndSkintonesGetter>,
        ILoquiObjectSetter<ChargenAndSkintones>
    {
        #region Ctor
        public ChargenAndSkintones()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Chargen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Chargen? _Chargen;
        public Chargen? Chargen
        {
            get => _Chargen;
            set => _Chargen = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IChargenGetter? IChargenAndSkintonesGetter.Chargen => this.Chargen;
        #endregion
        #region BodySkinTones
        public String? BodySkinTones { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IChargenAndSkintonesGetter.BodySkinTones => this.BodySkinTones;
        #endregion
        #region HandSkinTones
        public String? HandSkinTones { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IChargenAndSkintonesGetter.HandSkinTones => this.HandSkinTones;
        #endregion
        #region FCTP
        public String? FCTP { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IChargenAndSkintonesGetter.FCTP => this.FCTP;
        #endregion
        #region FaceSkinTones
        public String? FaceSkinTones { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IChargenAndSkintonesGetter.FaceSkinTones => this.FaceSkinTones;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ChargenAndSkintonesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IChargenAndSkintonesGetter rhs) return false;
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IChargenAndSkintonesGetter? obj)
        {
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Chargen = new MaskItem<TItem, Chargen.Mask<TItem>?>(initialValue, new Chargen.Mask<TItem>(initialValue));
                this.BodySkinTones = initialValue;
                this.HandSkinTones = initialValue;
                this.FCTP = initialValue;
                this.FaceSkinTones = initialValue;
            }

            public Mask(
                TItem Chargen,
                TItem BodySkinTones,
                TItem HandSkinTones,
                TItem FCTP,
                TItem FaceSkinTones)
            {
                this.Chargen = new MaskItem<TItem, Chargen.Mask<TItem>?>(Chargen, new Chargen.Mask<TItem>(Chargen));
                this.BodySkinTones = BodySkinTones;
                this.HandSkinTones = HandSkinTones;
                this.FCTP = FCTP;
                this.FaceSkinTones = FaceSkinTones;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Chargen.Mask<TItem>?>? Chargen { get; set; }
            public TItem BodySkinTones;
            public TItem HandSkinTones;
            public TItem FCTP;
            public TItem FaceSkinTones;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Chargen, rhs.Chargen)) return false;
                if (!object.Equals(this.BodySkinTones, rhs.BodySkinTones)) return false;
                if (!object.Equals(this.HandSkinTones, rhs.HandSkinTones)) return false;
                if (!object.Equals(this.FCTP, rhs.FCTP)) return false;
                if (!object.Equals(this.FaceSkinTones, rhs.FaceSkinTones)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Chargen);
                hash.Add(this.BodySkinTones);
                hash.Add(this.HandSkinTones);
                hash.Add(this.FCTP);
                hash.Add(this.FaceSkinTones);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Chargen != null)
                {
                    if (!eval(this.Chargen.Overall)) return false;
                    if (this.Chargen.Specific != null && !this.Chargen.Specific.All(eval)) return false;
                }
                if (!eval(this.BodySkinTones)) return false;
                if (!eval(this.HandSkinTones)) return false;
                if (!eval(this.FCTP)) return false;
                if (!eval(this.FaceSkinTones)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Chargen != null)
                {
                    if (eval(this.Chargen.Overall)) return true;
                    if (this.Chargen.Specific != null && this.Chargen.Specific.Any(eval)) return true;
                }
                if (eval(this.BodySkinTones)) return true;
                if (eval(this.HandSkinTones)) return true;
                if (eval(this.FCTP)) return true;
                if (eval(this.FaceSkinTones)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ChargenAndSkintones.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Chargen = this.Chargen == null ? null : new MaskItem<R, Chargen.Mask<R>?>(eval(this.Chargen.Overall), this.Chargen.Specific?.Translate(eval));
                obj.BodySkinTones = eval(this.BodySkinTones);
                obj.HandSkinTones = eval(this.HandSkinTones);
                obj.FCTP = eval(this.FCTP);
                obj.FaceSkinTones = eval(this.FaceSkinTones);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ChargenAndSkintones.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ChargenAndSkintones.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ChargenAndSkintones.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Chargen?.Overall ?? true)
                    {
                        Chargen?.Print(sb);
                    }
                    if (printMask?.BodySkinTones ?? true)
                    {
                        sb.AppendItem(BodySkinTones, "BodySkinTones");
                    }
                    if (printMask?.HandSkinTones ?? true)
                    {
                        sb.AppendItem(HandSkinTones, "HandSkinTones");
                    }
                    if (printMask?.FCTP ?? true)
                    {
                        sb.AppendItem(FCTP, "FCTP");
                    }
                    if (printMask?.FaceSkinTones ?? true)
                    {
                        sb.AppendItem(FaceSkinTones, "FaceSkinTones");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Chargen.ErrorMask?>? Chargen;
            public Exception? BodySkinTones;
            public Exception? HandSkinTones;
            public Exception? FCTP;
            public Exception? FaceSkinTones;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ChargenAndSkintones_FieldIndex enu = (ChargenAndSkintones_FieldIndex)index;
                switch (enu)
                {
                    case ChargenAndSkintones_FieldIndex.Chargen:
                        return Chargen;
                    case ChargenAndSkintones_FieldIndex.BodySkinTones:
                        return BodySkinTones;
                    case ChargenAndSkintones_FieldIndex.HandSkinTones:
                        return HandSkinTones;
                    case ChargenAndSkintones_FieldIndex.FCTP:
                        return FCTP;
                    case ChargenAndSkintones_FieldIndex.FaceSkinTones:
                        return FaceSkinTones;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ChargenAndSkintones_FieldIndex enu = (ChargenAndSkintones_FieldIndex)index;
                switch (enu)
                {
                    case ChargenAndSkintones_FieldIndex.Chargen:
                        this.Chargen = new MaskItem<Exception?, Chargen.ErrorMask?>(ex, null);
                        break;
                    case ChargenAndSkintones_FieldIndex.BodySkinTones:
                        this.BodySkinTones = ex;
                        break;
                    case ChargenAndSkintones_FieldIndex.HandSkinTones:
                        this.HandSkinTones = ex;
                        break;
                    case ChargenAndSkintones_FieldIndex.FCTP:
                        this.FCTP = ex;
                        break;
                    case ChargenAndSkintones_FieldIndex.FaceSkinTones:
                        this.FaceSkinTones = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ChargenAndSkintones_FieldIndex enu = (ChargenAndSkintones_FieldIndex)index;
                switch (enu)
                {
                    case ChargenAndSkintones_FieldIndex.Chargen:
                        this.Chargen = (MaskItem<Exception?, Chargen.ErrorMask?>?)obj;
                        break;
                    case ChargenAndSkintones_FieldIndex.BodySkinTones:
                        this.BodySkinTones = (Exception?)obj;
                        break;
                    case ChargenAndSkintones_FieldIndex.HandSkinTones:
                        this.HandSkinTones = (Exception?)obj;
                        break;
                    case ChargenAndSkintones_FieldIndex.FCTP:
                        this.FCTP = (Exception?)obj;
                        break;
                    case ChargenAndSkintones_FieldIndex.FaceSkinTones:
                        this.FaceSkinTones = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Chargen != null) return true;
                if (BodySkinTones != null) return true;
                if (HandSkinTones != null) return true;
                if (FCTP != null) return true;
                if (FaceSkinTones != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Chargen?.Print(sb);
                {
                    sb.AppendItem(BodySkinTones, "BodySkinTones");
                }
                {
                    sb.AppendItem(HandSkinTones, "HandSkinTones");
                }
                {
                    sb.AppendItem(FCTP, "FCTP");
                }
                {
                    sb.AppendItem(FaceSkinTones, "FaceSkinTones");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Chargen = this.Chargen.Combine(rhs.Chargen, (l, r) => l.Combine(r));
                ret.BodySkinTones = this.BodySkinTones.Combine(rhs.BodySkinTones);
                ret.HandSkinTones = this.HandSkinTones.Combine(rhs.HandSkinTones);
                ret.FCTP = this.FCTP.Combine(rhs.FCTP);
                ret.FaceSkinTones = this.FaceSkinTones.Combine(rhs.FaceSkinTones);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public Chargen.TranslationMask? Chargen;
            public bool BodySkinTones;
            public bool HandSkinTones;
            public bool FCTP;
            public bool FaceSkinTones;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.BodySkinTones = defaultOn;
                this.HandSkinTones = defaultOn;
                this.FCTP = defaultOn;
                this.FaceSkinTones = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Chargen != null ? Chargen.OnOverall : DefaultOn, Chargen?.GetCrystal()));
                ret.Add((BodySkinTones, null));
                ret.Add((HandSkinTones, null));
                ret.Add((FCTP, null));
                ret.Add((FaceSkinTones, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ChargenAndSkintonesCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ChargenAndSkintonesSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ChargenAndSkintonesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenAndSkintonesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ChargenAndSkintones CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ChargenAndSkintones();
            ((ChargenAndSkintonesSetterCommon)((IChargenAndSkintonesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ChargenAndSkintones item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ChargenAndSkintonesSetterCommon)((IChargenAndSkintonesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ChargenAndSkintones GetNew()
        {
            return new ChargenAndSkintones();
        }

    }
    #endregion

    #region Interface
    public partial interface IChargenAndSkintones :
        IChargenAndSkintonesGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IChargenAndSkintones>
    {
        new Chargen? Chargen { get; set; }
        new String? BodySkinTones { get; set; }
        new String? HandSkinTones { get; set; }
        new String? FCTP { get; set; }
        new String? FaceSkinTones { get; set; }
    }

    public partial interface IChargenAndSkintonesGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IChargenAndSkintonesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ChargenAndSkintones_Registration.Instance;
        IChargenGetter? Chargen { get; }
        String? BodySkinTones { get; }
        String? HandSkinTones { get; }
        String? FCTP { get; }
        String? FaceSkinTones { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ChargenAndSkintonesMixIn
    {
        public static void Clear(this IChargenAndSkintones item)
        {
            ((ChargenAndSkintonesSetterCommon)((IChargenAndSkintonesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ChargenAndSkintones.Mask<bool> GetEqualsMask(
            this IChargenAndSkintonesGetter item,
            IChargenAndSkintonesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IChargenAndSkintonesGetter item,
            string? name = null,
            ChargenAndSkintones.Mask<bool>? printMask = null)
        {
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IChargenAndSkintonesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ChargenAndSkintones.Mask<bool>? printMask = null)
        {
            ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IChargenAndSkintonesGetter item,
            IChargenAndSkintonesGetter rhs,
            ChargenAndSkintones.TranslationMask? equalsMask = null)
        {
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IChargenAndSkintones lhs,
            IChargenAndSkintonesGetter rhs)
        {
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IChargenAndSkintones lhs,
            IChargenAndSkintonesGetter rhs,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IChargenAndSkintones lhs,
            IChargenAndSkintonesGetter rhs,
            out ChargenAndSkintones.ErrorMask errorMask,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ChargenAndSkintones.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IChargenAndSkintones lhs,
            IChargenAndSkintonesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ChargenAndSkintones DeepCopy(
            this IChargenAndSkintonesGetter item,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            return ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ChargenAndSkintones DeepCopy(
            this IChargenAndSkintonesGetter item,
            out ChargenAndSkintones.ErrorMask errorMask,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            return ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ChargenAndSkintones DeepCopy(
            this IChargenAndSkintonesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IChargenAndSkintones item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ChargenAndSkintonesSetterCommon)((IChargenAndSkintonesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ChargenAndSkintones_FieldIndex
    {
        Chargen = 0,
        BodySkinTones = 1,
        HandSkinTones = 2,
        FCTP = 3,
        FaceSkinTones = 4,
    }
    #endregion

    #region Registration
    internal partial class ChargenAndSkintones_Registration : ILoquiRegistration
    {
        public static readonly ChargenAndSkintones_Registration Instance = new ChargenAndSkintones_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ChargenAndSkintones.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ChargenAndSkintones.ErrorMask);

        public static readonly Type ClassType = typeof(ChargenAndSkintones);

        public static readonly Type GetterType = typeof(IChargenAndSkintonesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IChargenAndSkintones);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ChargenAndSkintones";

        public const string Name = "ChargenAndSkintones";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.BSTT,
                RecordTypes.HSTT,
                RecordTypes.FCTP,
                RecordTypes.FSTT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ChargenAndSkintonesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ChargenAndSkintonesSetterCommon
    {
        public static readonly ChargenAndSkintonesSetterCommon Instance = new ChargenAndSkintonesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IChargenAndSkintones item)
        {
            ClearPartial();
            item.Chargen = null;
            item.BodySkinTones = default;
            item.HandSkinTones = default;
            item.FCTP = default;
            item.FaceSkinTones = default;
        }
        
        #region Mutagen
        public void RemapLinks(IChargenAndSkintones obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Chargen?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IChargenAndSkintones item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ChargenAndSkintonesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ChargenAndSkintonesCommon
    {
        public static readonly ChargenAndSkintonesCommon Instance = new ChargenAndSkintonesCommon();

        public ChargenAndSkintones.Mask<bool> GetEqualsMask(
            IChargenAndSkintonesGetter item,
            IChargenAndSkintonesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ChargenAndSkintones.Mask<bool>(false);
            ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IChargenAndSkintonesGetter item,
            IChargenAndSkintonesGetter rhs,
            ChargenAndSkintones.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Chargen = EqualsMaskHelper.EqualsHelper(
                item.Chargen,
                rhs.Chargen,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BodySkinTones = string.Equals(item.BodySkinTones, rhs.BodySkinTones);
            ret.HandSkinTones = string.Equals(item.HandSkinTones, rhs.HandSkinTones);
            ret.FCTP = string.Equals(item.FCTP, rhs.FCTP);
            ret.FaceSkinTones = string.Equals(item.FaceSkinTones, rhs.FaceSkinTones);
        }
        
        public string Print(
            IChargenAndSkintonesGetter item,
            string? name = null,
            ChargenAndSkintones.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IChargenAndSkintonesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ChargenAndSkintones.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ChargenAndSkintones =>");
            }
            else
            {
                sb.AppendLine($"{name} (ChargenAndSkintones) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IChargenAndSkintonesGetter item,
            StructuredStringBuilder sb,
            ChargenAndSkintones.Mask<bool>? printMask = null)
        {
            if ((printMask?.Chargen?.Overall ?? true)
                && item.Chargen is {} ChargenItem)
            {
                ChargenItem?.Print(sb, "Chargen");
            }
            if ((printMask?.BodySkinTones ?? true)
                && item.BodySkinTones is {} BodySkinTonesItem)
            {
                sb.AppendItem(BodySkinTonesItem, "BodySkinTones");
            }
            if ((printMask?.HandSkinTones ?? true)
                && item.HandSkinTones is {} HandSkinTonesItem)
            {
                sb.AppendItem(HandSkinTonesItem, "HandSkinTones");
            }
            if ((printMask?.FCTP ?? true)
                && item.FCTP is {} FCTPItem)
            {
                sb.AppendItem(FCTPItem, "FCTP");
            }
            if ((printMask?.FaceSkinTones ?? true)
                && item.FaceSkinTones is {} FaceSkinTonesItem)
            {
                sb.AppendItem(FaceSkinTonesItem, "FaceSkinTones");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IChargenAndSkintonesGetter? lhs,
            IChargenAndSkintonesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.Chargen) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Chargen, rhs.Chargen, out var lhsChargen, out var rhsChargen, out var isChargenEqual))
                {
                    if (!((ChargenCommon)((IChargenGetter)lhsChargen).CommonInstance()!).Equals(lhsChargen, rhsChargen, equalsMask?.GetSubCrystal((int)ChargenAndSkintones_FieldIndex.Chargen))) return false;
                }
                else if (!isChargenEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.BodySkinTones) ?? true))
            {
                if (!string.Equals(lhs.BodySkinTones, rhs.BodySkinTones)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.HandSkinTones) ?? true))
            {
                if (!string.Equals(lhs.HandSkinTones, rhs.HandSkinTones)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.FCTP) ?? true))
            {
                if (!string.Equals(lhs.FCTP, rhs.FCTP)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.FaceSkinTones) ?? true))
            {
                if (!string.Equals(lhs.FaceSkinTones, rhs.FaceSkinTones)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IChargenAndSkintonesGetter item)
        {
            var hash = new HashCode();
            if (item.Chargen is {} Chargenitem)
            {
                hash.Add(Chargenitem);
            }
            if (item.BodySkinTones is {} BodySkinTonesitem)
            {
                hash.Add(BodySkinTonesitem);
            }
            if (item.HandSkinTones is {} HandSkinTonesitem)
            {
                hash.Add(HandSkinTonesitem);
            }
            if (item.FCTP is {} FCTPitem)
            {
                hash.Add(FCTPitem);
            }
            if (item.FaceSkinTones is {} FaceSkinTonesitem)
            {
                hash.Add(FaceSkinTonesitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ChargenAndSkintones.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IChargenAndSkintonesGetter obj)
        {
            if (obj.Chargen is {} ChargenItems)
            {
                foreach (var item in ChargenItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ChargenAndSkintonesSetterTranslationCommon
    {
        public static readonly ChargenAndSkintonesSetterTranslationCommon Instance = new ChargenAndSkintonesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IChargenAndSkintones item,
            IChargenAndSkintonesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.Chargen) ?? true))
            {
                errorMask?.PushIndex((int)ChargenAndSkintones_FieldIndex.Chargen);
                try
                {
                    if(rhs.Chargen is {} rhsChargen)
                    {
                        item.Chargen = rhsChargen.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ChargenAndSkintones_FieldIndex.Chargen));
                    }
                    else
                    {
                        item.Chargen = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.BodySkinTones) ?? true))
            {
                item.BodySkinTones = rhs.BodySkinTones;
            }
            if ((copyMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.HandSkinTones) ?? true))
            {
                item.HandSkinTones = rhs.HandSkinTones;
            }
            if ((copyMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.FCTP) ?? true))
            {
                item.FCTP = rhs.FCTP;
            }
            if ((copyMask?.GetShouldTranslate((int)ChargenAndSkintones_FieldIndex.FaceSkinTones) ?? true))
            {
                item.FaceSkinTones = rhs.FaceSkinTones;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IChargenAndSkintones item,
            IChargenAndSkintonesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ChargenAndSkintones DeepCopy(
            IChargenAndSkintonesGetter item,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            ChargenAndSkintones ret = (ChargenAndSkintones)((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).GetNew();
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ChargenAndSkintones DeepCopy(
            IChargenAndSkintonesGetter item,
            out ChargenAndSkintones.ErrorMask errorMask,
            ChargenAndSkintones.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ChargenAndSkintones ret = (ChargenAndSkintones)((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).GetNew();
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ChargenAndSkintones.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ChargenAndSkintones DeepCopy(
            IChargenAndSkintonesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ChargenAndSkintones ret = (ChargenAndSkintones)((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)item).CommonInstance()!).GetNew();
            ((ChargenAndSkintonesSetterTranslationCommon)((IChargenAndSkintonesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ChargenAndSkintones
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ChargenAndSkintones_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ChargenAndSkintones_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ChargenAndSkintonesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ChargenAndSkintonesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ChargenAndSkintonesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IChargenAndSkintonesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IChargenAndSkintonesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IChargenAndSkintonesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ChargenAndSkintonesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ChargenAndSkintonesBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IChargenAndSkintonesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.Chargen is {} ChargenItem)
            {
                ((ChargenBinaryWriteTranslation)((IBinaryItem)ChargenItem).BinaryWriteTranslator).Write(
                    item: ChargenItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodySkinTones,
                header: translationParams.ConvertToCustom(RecordTypes.BSTT),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HandSkinTones,
                header: translationParams.ConvertToCustom(RecordTypes.HSTT),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FCTP,
                header: translationParams.ConvertToCustom(RecordTypes.FCTP),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FaceSkinTones,
                header: translationParams.ConvertToCustom(RecordTypes.FSTT),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IChargenAndSkintonesGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IChargenAndSkintonesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ChargenAndSkintonesBinaryCreateTranslation
    {
        public static readonly ChargenAndSkintonesBinaryCreateTranslation Instance = new ChargenAndSkintonesBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IChargenAndSkintones item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.Chargen, translationParams)) return ParseResult.Stop;
                    item.Chargen = Mutagen.Bethesda.Starfield.Chargen.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)ChargenAndSkintones_FieldIndex.Chargen;
                }
                case RecordTypeInts.BSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.BodySkinTones, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BodySkinTones = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ChargenAndSkintones_FieldIndex.BodySkinTones;
                }
                case RecordTypeInts.HSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.HandSkinTones, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HandSkinTones = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ChargenAndSkintones_FieldIndex.HandSkinTones;
                }
                case RecordTypeInts.FCTP:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.FCTP, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FCTP = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ChargenAndSkintones_FieldIndex.FCTP;
                }
                case RecordTypeInts.FSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.FaceSkinTones, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceSkinTones = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ChargenAndSkintones_FieldIndex.FaceSkinTones;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ChargenAndSkintonesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IChargenAndSkintonesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenAndSkintonesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ChargenAndSkintonesBinaryOverlay :
        PluginBinaryOverlay,
        IChargenAndSkintonesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ChargenAndSkintones_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ChargenAndSkintones_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ChargenAndSkintonesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ChargenAndSkintonesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IChargenAndSkintonesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IChargenAndSkintonesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IChargenAndSkintonesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ChargenAndSkintonesCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ChargenAndSkintonesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenAndSkintonesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IChargenGetter? Chargen { get; private set; }
        #region BodySkinTones
        private int? _BodySkinTonesLocation;
        public String? BodySkinTones => _BodySkinTonesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BodySkinTonesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region HandSkinTones
        private int? _HandSkinTonesLocation;
        public String? HandSkinTones => _HandSkinTonesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HandSkinTonesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FCTP
        private int? _FCTPLocation;
        public String? FCTP => _FCTPLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FCTPLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FaceSkinTones
        private int? _FaceSkinTonesLocation;
        public String? FaceSkinTones => _FaceSkinTonesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceSkinTonesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ChargenAndSkintonesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IChargenAndSkintonesGetter ChargenAndSkintonesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ChargenAndSkintonesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IChargenAndSkintonesGetter ChargenAndSkintonesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ChargenAndSkintonesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.Chargen, translationParams)) return ParseResult.Stop;
                    this.Chargen = ChargenBinaryOverlay.ChargenFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)ChargenAndSkintones_FieldIndex.Chargen;
                }
                case RecordTypeInts.BSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.BodySkinTones, translationParams)) return ParseResult.Stop;
                    _BodySkinTonesLocation = (stream.Position - offset);
                    return (int)ChargenAndSkintones_FieldIndex.BodySkinTones;
                }
                case RecordTypeInts.HSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.HandSkinTones, translationParams)) return ParseResult.Stop;
                    _HandSkinTonesLocation = (stream.Position - offset);
                    return (int)ChargenAndSkintones_FieldIndex.HandSkinTones;
                }
                case RecordTypeInts.FCTP:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.FCTP, translationParams)) return ParseResult.Stop;
                    _FCTPLocation = (stream.Position - offset);
                    return (int)ChargenAndSkintones_FieldIndex.FCTP;
                }
                case RecordTypeInts.FSTT:
                {
                    if (lastParsed.ShortCircuit((int)ChargenAndSkintones_FieldIndex.FaceSkinTones, translationParams)) return ParseResult.Stop;
                    _FaceSkinTonesLocation = (stream.Position - offset);
                    return (int)ChargenAndSkintones_FieldIndex.FaceSkinTones;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ChargenAndSkintonesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IChargenAndSkintonesGetter rhs) return false;
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IChargenAndSkintonesGetter? obj)
        {
            return ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ChargenAndSkintonesCommon)((IChargenAndSkintonesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

