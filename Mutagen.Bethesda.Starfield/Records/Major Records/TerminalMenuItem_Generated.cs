/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TerminalMenuItem :
        IEquatable<ITerminalMenuItemGetter>,
        ILoquiObjectSetter<TerminalMenuItem>,
        ITerminalMenuItem
    {
        #region Ctor
        public TerminalMenuItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Text
        public TranslatedString Text { get; set; } = string.Empty;
        ITranslatedStringGetter ITerminalMenuItemGetter.Text => this.Text;
        #endregion
        #region ShortText
        public TranslatedString? ShortText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalMenuItemGetter.ShortText => this.ShortText;
        #endregion
        #region UnusedISET
        public UInt16 UnusedISET { get; set; } = default(UInt16);
        #endregion
        #region Flags
        public TerminalMenuItem.Flag Flags { get; set; } = default(TerminalMenuItem.Flag);
        #endregion
        #region UnusedISET2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _UnusedISET2 = new byte[3];
        public MemorySlice<Byte> UnusedISET2
        {
            get => _UnusedISET2;
            set => this._UnusedISET2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ITerminalMenuItemGetter.UnusedISET2 => this.UnusedISET2;
        #endregion
        #region ID
        public UInt16 ID { get; set; } = default(UInt16);
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LockData? _Lock;
        public LockData? Lock
        {
            get => _Lock;
            set => _Lock = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockDataGetter? ITerminalMenuItemGetter.Lock => this.Lock;
        #endregion
        #region Target
        public ATerminalMenuItemTarget Target { get; set; } = default!;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IATerminalMenuItemTargetGetter ITerminalMenuItemGetter.Target => Target;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ITerminalMenuItemGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMenuItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITerminalMenuItemGetter rhs) return false;
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalMenuItemGetter? obj)
        {
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Text = initialValue;
                this.ShortText = initialValue;
                this.UnusedISET = initialValue;
                this.Flags = initialValue;
                this.UnusedISET2 = initialValue;
                this.ID = initialValue;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(initialValue, new LockData.Mask<TItem>(initialValue));
                this.Target = new MaskItem<TItem, ATerminalMenuItemTarget.Mask<TItem>?>(initialValue, new ATerminalMenuItemTarget.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem Text,
                TItem ShortText,
                TItem UnusedISET,
                TItem Flags,
                TItem UnusedISET2,
                TItem ID,
                TItem Lock,
                TItem Target,
                TItem Conditions)
            {
                this.Text = Text;
                this.ShortText = ShortText;
                this.UnusedISET = UnusedISET;
                this.Flags = Flags;
                this.UnusedISET2 = UnusedISET2;
                this.ID = ID;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(Lock, new LockData.Mask<TItem>(Lock));
                this.Target = new MaskItem<TItem, ATerminalMenuItemTarget.Mask<TItem>?>(Target, new ATerminalMenuItemTarget.Mask<TItem>(Target));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Text;
            public TItem ShortText;
            public TItem UnusedISET;
            public TItem Flags;
            public TItem UnusedISET2;
            public TItem ID;
            public MaskItem<TItem, LockData.Mask<TItem>?>? Lock { get; set; }
            public MaskItem<TItem, ATerminalMenuItemTarget.Mask<TItem>?>? Target { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.ShortText, rhs.ShortText)) return false;
                if (!object.Equals(this.UnusedISET, rhs.UnusedISET)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.UnusedISET2, rhs.UnusedISET2)) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Text);
                hash.Add(this.ShortText);
                hash.Add(this.UnusedISET);
                hash.Add(this.Flags);
                hash.Add(this.UnusedISET2);
                hash.Add(this.ID);
                hash.Add(this.Lock);
                hash.Add(this.Target);
                hash.Add(this.Conditions);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Text)) return false;
                if (!eval(this.ShortText)) return false;
                if (!eval(this.UnusedISET)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.UnusedISET2)) return false;
                if (!eval(this.ID)) return false;
                if (Lock != null)
                {
                    if (!eval(this.Lock.Overall)) return false;
                    if (this.Lock.Specific != null && !this.Lock.Specific.All(eval)) return false;
                }
                if (Target != null)
                {
                    if (!eval(this.Target.Overall)) return false;
                    if (this.Target.Specific != null && !this.Target.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Text)) return true;
                if (eval(this.ShortText)) return true;
                if (eval(this.UnusedISET)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.UnusedISET2)) return true;
                if (eval(this.ID)) return true;
                if (Lock != null)
                {
                    if (eval(this.Lock.Overall)) return true;
                    if (this.Lock.Specific != null && this.Lock.Specific.Any(eval)) return true;
                }
                if (Target != null)
                {
                    if (eval(this.Target.Overall)) return true;
                    if (this.Target.Specific != null && this.Target.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TerminalMenuItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Text = eval(this.Text);
                obj.ShortText = eval(this.ShortText);
                obj.UnusedISET = eval(this.UnusedISET);
                obj.Flags = eval(this.Flags);
                obj.UnusedISET2 = eval(this.UnusedISET2);
                obj.ID = eval(this.ID);
                obj.Lock = this.Lock == null ? null : new MaskItem<R, LockData.Mask<R>?>(eval(this.Lock.Overall), this.Lock.Specific?.Translate(eval));
                obj.Target = this.Target == null ? null : new MaskItem<R, ATerminalMenuItemTarget.Mask<R>?>(eval(this.Target.Overall), this.Target.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TerminalMenuItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TerminalMenuItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TerminalMenuItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Text ?? true)
                    {
                        sb.AppendItem(Text, "Text");
                    }
                    if (printMask?.ShortText ?? true)
                    {
                        sb.AppendItem(ShortText, "ShortText");
                    }
                    if (printMask?.UnusedISET ?? true)
                    {
                        sb.AppendItem(UnusedISET, "UnusedISET");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.UnusedISET2 ?? true)
                    {
                        sb.AppendItem(UnusedISET2, "UnusedISET2");
                    }
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.Lock?.Overall ?? true)
                    {
                        Lock?.Print(sb);
                    }
                    if (printMask?.Target?.Overall ?? true)
                    {
                        Target?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Text;
            public Exception? ShortText;
            public Exception? UnusedISET;
            public Exception? Flags;
            public Exception? UnusedISET2;
            public Exception? ID;
            public MaskItem<Exception?, LockData.ErrorMask?>? Lock;
            public MaskItem<Exception?, ATerminalMenuItemTarget.ErrorMask?>? Target;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TerminalMenuItem_FieldIndex enu = (TerminalMenuItem_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenuItem_FieldIndex.Text:
                        return Text;
                    case TerminalMenuItem_FieldIndex.ShortText:
                        return ShortText;
                    case TerminalMenuItem_FieldIndex.UnusedISET:
                        return UnusedISET;
                    case TerminalMenuItem_FieldIndex.Flags:
                        return Flags;
                    case TerminalMenuItem_FieldIndex.UnusedISET2:
                        return UnusedISET2;
                    case TerminalMenuItem_FieldIndex.ID:
                        return ID;
                    case TerminalMenuItem_FieldIndex.Lock:
                        return Lock;
                    case TerminalMenuItem_FieldIndex.Target:
                        return Target;
                    case TerminalMenuItem_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TerminalMenuItem_FieldIndex enu = (TerminalMenuItem_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenuItem_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.ShortText:
                        this.ShortText = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.UnusedISET:
                        this.UnusedISET = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.UnusedISET2:
                        this.UnusedISET2 = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case TerminalMenuItem_FieldIndex.Lock:
                        this.Lock = new MaskItem<Exception?, LockData.ErrorMask?>(ex, null);
                        break;
                    case TerminalMenuItem_FieldIndex.Target:
                        this.Target = new MaskItem<Exception?, ATerminalMenuItemTarget.ErrorMask?>(ex, null);
                        break;
                    case TerminalMenuItem_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TerminalMenuItem_FieldIndex enu = (TerminalMenuItem_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenuItem_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.ShortText:
                        this.ShortText = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.UnusedISET:
                        this.UnusedISET = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.UnusedISET2:
                        this.UnusedISET2 = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.Lock:
                        this.Lock = (MaskItem<Exception?, LockData.ErrorMask?>?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.Target:
                        this.Target = (MaskItem<Exception?, ATerminalMenuItemTarget.ErrorMask?>?)obj;
                        break;
                    case TerminalMenuItem_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Text != null) return true;
                if (ShortText != null) return true;
                if (UnusedISET != null) return true;
                if (Flags != null) return true;
                if (UnusedISET2 != null) return true;
                if (ID != null) return true;
                if (Lock != null) return true;
                if (Target != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Text, "Text");
                }
                {
                    sb.AppendItem(ShortText, "ShortText");
                }
                {
                    sb.AppendItem(UnusedISET, "UnusedISET");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(UnusedISET2, "UnusedISET2");
                }
                {
                    sb.AppendItem(ID, "ID");
                }
                Lock?.Print(sb);
                Target?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Text = this.Text.Combine(rhs.Text);
                ret.ShortText = this.ShortText.Combine(rhs.ShortText);
                ret.UnusedISET = this.UnusedISET.Combine(rhs.UnusedISET);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.UnusedISET2 = this.UnusedISET2.Combine(rhs.UnusedISET2);
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Lock = this.Lock.Combine(rhs.Lock, (l, r) => l.Combine(r));
                ret.Target = this.Target.Combine(rhs.Target, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Text;
            public bool ShortText;
            public bool UnusedISET;
            public bool Flags;
            public bool UnusedISET2;
            public bool ID;
            public LockData.TranslationMask? Lock;
            public ATerminalMenuItemTarget.TranslationMask? Target;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Text = defaultOn;
                this.ShortText = defaultOn;
                this.UnusedISET = defaultOn;
                this.Flags = defaultOn;
                this.UnusedISET2 = defaultOn;
                this.ID = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Text, null));
                ret.Add((ShortText, null));
                ret.Add((UnusedISET, null));
                ret.Add((Flags, null));
                ret.Add((UnusedISET2, null));
                ret.Add((ID, null));
                ret.Add((Lock != null ? Lock.OnOverall : DefaultOn, Lock?.GetCrystal()));
                ret.Add((Target != null ? Target.OnOverall : DefaultOn, Target?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalMenuItemCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TerminalMenuItemSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TerminalMenuItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalMenuItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TerminalMenuItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TerminalMenuItem();
            ((TerminalMenuItemSetterCommon)((ITerminalMenuItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TerminalMenuItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TerminalMenuItemSetterCommon)((ITerminalMenuItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TerminalMenuItem GetNew()
        {
            return new TerminalMenuItem();
        }

    }
    #endregion

    #region Interface
    public partial interface ITerminalMenuItem :
        IFormLinkContainer,
        ILoquiObjectSetter<ITerminalMenuItem>,
        ITerminalMenuItemGetter
    {
        new TranslatedString Text { get; set; }
        new TranslatedString? ShortText { get; set; }
        new UInt16 UnusedISET { get; set; }
        new TerminalMenuItem.Flag Flags { get; set; }
        new MemorySlice<Byte> UnusedISET2 { get; set; }
        new UInt16 ID { get; set; }
        new LockData? Lock { get; set; }
        new ATerminalMenuItemTarget Target { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface ITerminalMenuItemGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITerminalMenuItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TerminalMenuItem_Registration.Instance;
        ITranslatedStringGetter Text { get; }
        ITranslatedStringGetter? ShortText { get; }
        UInt16 UnusedISET { get; }
        TerminalMenuItem.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> UnusedISET2 { get; }
        UInt16 ID { get; }
        ILockDataGetter? Lock { get; }
        IATerminalMenuItemTargetGetter Target { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TerminalMenuItemMixIn
    {
        public static void Clear(this ITerminalMenuItem item)
        {
            ((TerminalMenuItemSetterCommon)((ITerminalMenuItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TerminalMenuItem.Mask<bool> GetEqualsMask(
            this ITerminalMenuItemGetter item,
            ITerminalMenuItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITerminalMenuItemGetter item,
            string? name = null,
            TerminalMenuItem.Mask<bool>? printMask = null)
        {
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITerminalMenuItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TerminalMenuItem.Mask<bool>? printMask = null)
        {
            ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITerminalMenuItemGetter item,
            ITerminalMenuItemGetter rhs,
            TerminalMenuItem.TranslationMask? equalsMask = null)
        {
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITerminalMenuItem lhs,
            ITerminalMenuItemGetter rhs)
        {
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITerminalMenuItem lhs,
            ITerminalMenuItemGetter rhs,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITerminalMenuItem lhs,
            ITerminalMenuItemGetter rhs,
            out TerminalMenuItem.ErrorMask errorMask,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TerminalMenuItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITerminalMenuItem lhs,
            ITerminalMenuItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TerminalMenuItem DeepCopy(
            this ITerminalMenuItemGetter item,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            return ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TerminalMenuItem DeepCopy(
            this ITerminalMenuItemGetter item,
            out TerminalMenuItem.ErrorMask errorMask,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            return ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TerminalMenuItem DeepCopy(
            this ITerminalMenuItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITerminalMenuItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TerminalMenuItemSetterCommon)((ITerminalMenuItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TerminalMenuItem_FieldIndex
    {
        Text = 0,
        ShortText = 1,
        UnusedISET = 2,
        Flags = 3,
        UnusedISET2 = 4,
        ID = 5,
        Lock = 6,
        Target = 7,
        Conditions = 8,
    }
    #endregion

    #region Registration
    internal partial class TerminalMenuItem_Registration : ILoquiRegistration
    {
        public static readonly TerminalMenuItem_Registration Instance = new TerminalMenuItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(TerminalMenuItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TerminalMenuItem.ErrorMask);

        public static readonly Type ClassType = typeof(TerminalMenuItem);

        public static readonly Type GetterType = typeof(ITerminalMenuItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITerminalMenuItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.TerminalMenuItem";

        public const string Name = "TerminalMenuItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ITXT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ITXT);
            var all = RecordCollection.Factory(
                RecordTypes.ITXT,
                RecordTypes.ISTX,
                RecordTypes.ISET,
                RecordTypes.ITID,
                RecordTypes.XLOC,
                RecordTypes.UNAM,
                RecordTypes.TNAM,
                RecordTypes.BNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TerminalMenuItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TerminalMenuItemSetterCommon
    {
        public static readonly TerminalMenuItemSetterCommon Instance = new TerminalMenuItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITerminalMenuItem item)
        {
            ClearPartial();
            item.Text.Clear();
            item.ShortText = default;
            item.UnusedISET = default(UInt16);
            item.Flags = default(TerminalMenuItem.Flag);
            item.UnusedISET2 = new byte[3];
            item.ID = default(UInt16);
            item.Lock = null;
            item.Target.Clear();
            item.Conditions.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITerminalMenuItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Lock?.RemapLinks(mapping);
            obj.Target.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITerminalMenuItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: TerminalMenuItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class TerminalMenuItemCommon
    {
        public static readonly TerminalMenuItemCommon Instance = new TerminalMenuItemCommon();

        public TerminalMenuItem.Mask<bool> GetEqualsMask(
            ITerminalMenuItemGetter item,
            ITerminalMenuItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TerminalMenuItem.Mask<bool>(false);
            ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITerminalMenuItemGetter item,
            ITerminalMenuItemGetter rhs,
            TerminalMenuItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.ShortText = object.Equals(item.ShortText, rhs.ShortText);
            ret.UnusedISET = item.UnusedISET == rhs.UnusedISET;
            ret.Flags = item.Flags == rhs.Flags;
            ret.UnusedISET2 = MemoryExtensions.SequenceEqual(item.UnusedISET2.Span, rhs.UnusedISET2.Span);
            ret.ID = item.ID == rhs.ID;
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Target = MaskItemExt.Factory(item.Target.GetEqualsMask(rhs.Target, include), include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ITerminalMenuItemGetter item,
            string? name = null,
            TerminalMenuItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITerminalMenuItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TerminalMenuItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TerminalMenuItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (TerminalMenuItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITerminalMenuItemGetter item,
            StructuredStringBuilder sb,
            TerminalMenuItem.Mask<bool>? printMask = null)
        {
            if (printMask?.Text ?? true)
            {
                sb.AppendItem(item.Text, "Text");
            }
            if ((printMask?.ShortText ?? true)
                && item.ShortText is {} ShortTextItem)
            {
                sb.AppendItem(ShortTextItem, "ShortText");
            }
            if (printMask?.UnusedISET ?? true)
            {
                sb.AppendItem(item.UnusedISET, "UnusedISET");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.UnusedISET2 ?? true)
            {
                sb.AppendLine($"UnusedISET2 => {SpanExt.ToHexString(item.UnusedISET2)}");
            }
            if (printMask?.ID ?? true)
            {
                sb.AppendItem(item.ID, "ID");
            }
            if ((printMask?.Lock?.Overall ?? true)
                && item.Lock is {} LockItem)
            {
                LockItem?.Print(sb, "Lock");
            }
            if (printMask?.Target?.Overall ?? true)
            {
                item.Target?.Print(sb, "Target");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITerminalMenuItemGetter? lhs,
            ITerminalMenuItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Text) ?? true))
            {
                if (!object.Equals(lhs.Text, rhs.Text)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.ShortText) ?? true))
            {
                if (!object.Equals(lhs.ShortText, rhs.ShortText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.UnusedISET) ?? true))
            {
                if (lhs.UnusedISET != rhs.UnusedISET) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.UnusedISET2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.UnusedISET2.Span, rhs.UnusedISET2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Lock) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lock, rhs.Lock, out var lhsLock, out var rhsLock, out var isLockEqual))
                {
                    if (!((LockDataCommon)((ILockDataGetter)lhsLock).CommonInstance()!).Equals(lhsLock, rhsLock, equalsMask?.GetSubCrystal((int)TerminalMenuItem_FieldIndex.Lock))) return false;
                }
                else if (!isLockEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Target) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Target, rhs.Target, out var lhsTarget, out var rhsTarget, out var isTargetEqual))
                {
                    if (!((ATerminalMenuItemTargetCommon)((IATerminalMenuItemTargetGetter)lhsTarget).CommonInstance()!).Equals(lhsTarget, rhsTarget, equalsMask?.GetSubCrystal((int)TerminalMenuItem_FieldIndex.Target))) return false;
                }
                else if (!isTargetEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TerminalMenuItem_FieldIndex.Conditions)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITerminalMenuItemGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Text);
            if (item.ShortText is {} ShortTextitem)
            {
                hash.Add(ShortTextitem);
            }
            hash.Add(item.UnusedISET);
            hash.Add(item.Flags);
            hash.Add(item.UnusedISET2);
            hash.Add(item.ID);
            if (item.Lock is {} Lockitem)
            {
                hash.Add(Lockitem);
            }
            hash.Add(item.Target);
            hash.Add(item.Conditions);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TerminalMenuItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITerminalMenuItemGetter obj)
        {
            if (obj.Lock is {} LockItems)
            {
                foreach (var item in LockItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Target is IFormLinkContainerGetter TargetlinkCont)
            {
                foreach (var item in TargetlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TerminalMenuItemSetterTranslationCommon
    {
        public static readonly TerminalMenuItemSetterTranslationCommon Instance = new TerminalMenuItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITerminalMenuItem item,
            ITerminalMenuItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.ShortText) ?? true))
            {
                item.ShortText = rhs.ShortText?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.UnusedISET) ?? true))
            {
                item.UnusedISET = rhs.UnusedISET;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.UnusedISET2) ?? true))
            {
                item.UnusedISET2 = rhs.UnusedISET2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Lock) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenuItem_FieldIndex.Lock);
                try
                {
                    if(rhs.Lock is {} rhsLock)
                    {
                        item.Lock = rhsLock.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TerminalMenuItem_FieldIndex.Lock));
                    }
                    else
                    {
                        item.Lock = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Target) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenuItem_FieldIndex.Target);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Target) ?? true))
                    {
                        item.Target = rhs.Target.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TerminalMenuItem_FieldIndex.Target),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenuItem_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenuItem_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITerminalMenuItem item,
            ITerminalMenuItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public TerminalMenuItem DeepCopy(
            ITerminalMenuItemGetter item,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            TerminalMenuItem ret = (TerminalMenuItem)((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TerminalMenuItem DeepCopy(
            ITerminalMenuItemGetter item,
            out TerminalMenuItem.ErrorMask errorMask,
            TerminalMenuItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TerminalMenuItem ret = (TerminalMenuItem)((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TerminalMenuItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TerminalMenuItem DeepCopy(
            ITerminalMenuItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TerminalMenuItem ret = (TerminalMenuItem)((TerminalMenuItemCommon)((ITerminalMenuItemGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuItemSetterTranslationCommon)((ITerminalMenuItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TerminalMenuItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TerminalMenuItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TerminalMenuItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TerminalMenuItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TerminalMenuItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TerminalMenuItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITerminalMenuItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITerminalMenuItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITerminalMenuItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TerminalMenuItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TerminalMenuItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITerminalMenuItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Text,
                header: translationParams.ConvertToCustom(RecordTypes.ITXT),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ShortText,
                header: translationParams.ConvertToCustom(RecordTypes.ISTX),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ISET)))
            {
                TerminalMenuItemBinaryWriteTranslation.WriteBinaryTypeParse(
                    writer: writer,
                    item: item);
                writer.Write(item.UnusedISET);
                EnumBinaryTranslation<TerminalMenuItem.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnusedISET2);
            }
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ID,
                header: translationParams.ConvertToCustom(RecordTypes.ITID));
            if (item.Lock is {} LockItem)
            {
                ((LockDataBinaryWriteTranslation)((IBinaryItem)LockItem).BinaryWriteTranslator).Write(
                    item: LockItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            TerminalMenuItemBinaryWriteTranslation.WriteBinaryTargetParse(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryTypeParseCustom(
            MutagenWriter writer,
            ITerminalMenuItemGetter item);

        public static void WriteBinaryTypeParse(
            MutagenWriter writer,
            ITerminalMenuItemGetter item)
        {
            WriteBinaryTypeParseCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryTargetParseCustom(
            MutagenWriter writer,
            ITerminalMenuItemGetter item);

        public static void WriteBinaryTargetParse(
            MutagenWriter writer,
            ITerminalMenuItemGetter item)
        {
            WriteBinaryTargetParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ITerminalMenuItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITerminalMenuItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TerminalMenuItemBinaryCreateTranslation
    {
        public static readonly TerminalMenuItemBinaryCreateTranslation Instance = new TerminalMenuItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ITerminalMenuItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ITXT:
                {
                    if (lastParsed.ShortCircuit((int)TerminalMenuItem_FieldIndex.Text, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TerminalMenuItem_FieldIndex.Text;
                }
                case RecordTypeInts.ISTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShortText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TerminalMenuItem_FieldIndex.ShortText;
                }
                case RecordTypeInts.ISET:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    TerminalMenuItemBinaryCreateTranslation.FillBinaryTypeParseCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 2) return null;
                    item.UnusedISET = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<TerminalMenuItem.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    item.UnusedISET2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(3));
                    return (int)TerminalMenuItem_FieldIndex.UnusedISET2;
                }
                case RecordTypeInts.ITID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ID = frame.ReadUInt16();
                    return (int)TerminalMenuItem_FieldIndex.ID;
                }
                case RecordTypeInts.XLOC:
                {
                    item.Lock = Mutagen.Bethesda.Starfield.LockData.CreateFromBinary(frame: frame);
                    return (int)TerminalMenuItem_FieldIndex.Lock;
                }
                case RecordTypeInts.UNAM:
                case RecordTypeInts.TNAM:
                case RecordTypeInts.BNAM:
                {
                    return TerminalMenuItemBinaryCreateTranslation.FillBinaryTargetParseCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)TerminalMenuItem_FieldIndex.Conditions;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial void FillBinaryTypeParseCustom(
            MutagenFrame frame,
            ITerminalMenuItem item);

        public static partial ParseResult FillBinaryTargetParseCustom(
            MutagenFrame frame,
            ITerminalMenuItem item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TerminalMenuItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITerminalMenuItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalMenuItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TerminalMenuItemBinaryOverlay :
        PluginBinaryOverlay,
        ITerminalMenuItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TerminalMenuItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TerminalMenuItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TerminalMenuItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TerminalMenuItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITerminalMenuItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITerminalMenuItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITerminalMenuItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalMenuItemCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TerminalMenuItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalMenuItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        #region ShortText
        private int? _ShortTextLocation;
        public ITranslatedStringGetter? ShortText => _ShortTextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ShortTextLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        private RangeInt32? _ISETLocation;
        #region TypeParse
        private int _TypeParseLocation => _ISETLocation!.Value.Min;
        private bool _TypeParse_IsSet => _ISETLocation.HasValue;
        partial void TypeParseCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region UnusedISET
        private int _UnusedISETLocation => _ISETLocation!.Value.Min + 0x2;
        private bool _UnusedISET_IsSet => _ISETLocation.HasValue;
        public UInt16 UnusedISET => _UnusedISET_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_UnusedISETLocation, 2)) : default(UInt16);
        #endregion
        #region Flags
        private int _FlagsLocation => _ISETLocation!.Value.Min + 0x4;
        private bool _Flags_IsSet => _ISETLocation.HasValue;
        public TerminalMenuItem.Flag Flags => _Flags_IsSet ? (TerminalMenuItem.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region UnusedISET2
        private int _UnusedISET2Location => _ISETLocation!.Value.Min + 0x5;
        private bool _UnusedISET2_IsSet => _ISETLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> UnusedISET2 => _UnusedISET2_IsSet ? _recordData.Span.Slice(_UnusedISET2Location, 3).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region ID
        private int? _IDLocation;
        public UInt16 ID => _IDLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IDLocation.Value, _package.MetaData.Constants)) : default(UInt16);
        #endregion
        #region Lock
        private RangeInt32? _LockLocation;
        public ILockDataGetter? Lock => _LockLocation.HasValue ? LockDataBinaryOverlay.LockDataFactory(_recordData.Slice(_LockLocation!.Value.Min), _package) : default;
        #endregion
        #region TargetParse
        public partial ParseResult TargetParseCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TerminalMenuItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITerminalMenuItemGetter TerminalMenuItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TerminalMenuItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITerminalMenuItemGetter TerminalMenuItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TerminalMenuItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ITXT:
                {
                    if (lastParsed.ShortCircuit((int)TerminalMenuItem_FieldIndex.Text, translationParams)) return ParseResult.Stop;
                    _TextLocation = (stream.Position - offset);
                    return (int)TerminalMenuItem_FieldIndex.Text;
                }
                case RecordTypeInts.ISTX:
                {
                    _ShortTextLocation = (stream.Position - offset);
                    return (int)TerminalMenuItem_FieldIndex.ShortText;
                }
                case RecordTypeInts.ISET:
                {
                    _ISETLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)TerminalMenuItem_FieldIndex.UnusedISET2;
                }
                case RecordTypeInts.ITID:
                {
                    _IDLocation = (stream.Position - offset);
                    return (int)TerminalMenuItem_FieldIndex.ID;
                }
                case RecordTypeInts.XLOC:
                {
                    _LockLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)TerminalMenuItem_FieldIndex.Lock;
                }
                case RecordTypeInts.UNAM:
                case RecordTypeInts.TNAM:
                case RecordTypeInts.BNAM:
                {
                    return TargetParseCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)TerminalMenuItem_FieldIndex.Conditions;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMenuItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITerminalMenuItemGetter rhs) return false;
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalMenuItemGetter? obj)
        {
            return ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

