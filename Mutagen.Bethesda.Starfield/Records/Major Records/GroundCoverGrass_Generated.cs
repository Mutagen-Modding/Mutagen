/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GroundCoverGrass :
        IEquatable<IGroundCoverGrassGetter>,
        IGroundCoverGrass,
        ILoquiObjectSetter<GroundCoverGrass>
    {
        #region Ctor
        public GroundCoverGrass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Grass
        private readonly IFormLinkNullable<IGrassGetter> _Grass = new FormLinkNullable<IGrassGetter>();
        public IFormLinkNullable<IGrassGetter> Grass
        {
            get => _Grass;
            set => _Grass.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGrassGetter> IGroundCoverGrassGetter.Grass => this.Grass;
        #endregion
        #region OverrideDensity
        public Int16? OverrideDensity { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? IGroundCoverGrassGetter.OverrideDensity => this.OverrideDensity;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GroundCoverGrassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGroundCoverGrassGetter rhs) return false;
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGroundCoverGrassGetter? obj)
        {
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Grass = initialValue;
                this.OverrideDensity = initialValue;
            }

            public Mask(
                TItem Grass,
                TItem OverrideDensity)
            {
                this.Grass = Grass;
                this.OverrideDensity = OverrideDensity;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Grass;
            public TItem OverrideDensity;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Grass, rhs.Grass)) return false;
                if (!object.Equals(this.OverrideDensity, rhs.OverrideDensity)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Grass);
                hash.Add(this.OverrideDensity);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Grass)) return false;
                if (!eval(this.OverrideDensity)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Grass)) return true;
                if (eval(this.OverrideDensity)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GroundCoverGrass.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Grass = eval(this.Grass);
                obj.OverrideDensity = eval(this.OverrideDensity);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GroundCoverGrass.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GroundCoverGrass.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GroundCoverGrass.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Grass ?? true)
                    {
                        sb.AppendItem(Grass, "Grass");
                    }
                    if (printMask?.OverrideDensity ?? true)
                    {
                        sb.AppendItem(OverrideDensity, "OverrideDensity");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Grass;
            public Exception? OverrideDensity;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GroundCoverGrass_FieldIndex enu = (GroundCoverGrass_FieldIndex)index;
                switch (enu)
                {
                    case GroundCoverGrass_FieldIndex.Grass:
                        return Grass;
                    case GroundCoverGrass_FieldIndex.OverrideDensity:
                        return OverrideDensity;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                GroundCoverGrass_FieldIndex enu = (GroundCoverGrass_FieldIndex)index;
                switch (enu)
                {
                    case GroundCoverGrass_FieldIndex.Grass:
                        this.Grass = ex;
                        break;
                    case GroundCoverGrass_FieldIndex.OverrideDensity:
                        this.OverrideDensity = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                GroundCoverGrass_FieldIndex enu = (GroundCoverGrass_FieldIndex)index;
                switch (enu)
                {
                    case GroundCoverGrass_FieldIndex.Grass:
                        this.Grass = (Exception?)obj;
                        break;
                    case GroundCoverGrass_FieldIndex.OverrideDensity:
                        this.OverrideDensity = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Grass != null) return true;
                if (OverrideDensity != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Grass, "Grass");
                }
                {
                    sb.AppendItem(OverrideDensity, "OverrideDensity");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Grass = this.Grass.Combine(rhs.Grass);
                ret.OverrideDensity = this.OverrideDensity.Combine(rhs.OverrideDensity);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Grass;
            public bool OverrideDensity;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Grass = defaultOn;
                this.OverrideDensity = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Grass, null));
                ret.Add((OverrideDensity, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GroundCoverGrassCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GroundCoverGrassSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroundCoverGrassBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroundCoverGrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static GroundCoverGrass CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GroundCoverGrass();
            ((GroundCoverGrassSetterCommon)((IGroundCoverGrassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GroundCoverGrass item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GroundCoverGrassSetterCommon)((IGroundCoverGrassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GroundCoverGrass GetNew()
        {
            return new GroundCoverGrass();
        }

    }
    #endregion

    #region Interface
    public partial interface IGroundCoverGrass :
        IFormLinkContainer,
        IGroundCoverGrassGetter,
        ILoquiObjectSetter<IGroundCoverGrass>
    {
        new IFormLinkNullable<IGrassGetter> Grass { get; set; }
        new Int16? OverrideDensity { get; set; }
    }

    public partial interface IGroundCoverGrassGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGroundCoverGrassGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => GroundCoverGrass_Registration.Instance;
        IFormLinkNullableGetter<IGrassGetter> Grass { get; }
        Int16? OverrideDensity { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GroundCoverGrassMixIn
    {
        public static void Clear(this IGroundCoverGrass item)
        {
            ((GroundCoverGrassSetterCommon)((IGroundCoverGrassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GroundCoverGrass.Mask<bool> GetEqualsMask(
            this IGroundCoverGrassGetter item,
            IGroundCoverGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGroundCoverGrassGetter item,
            string? name = null,
            GroundCoverGrass.Mask<bool>? printMask = null)
        {
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGroundCoverGrassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GroundCoverGrass.Mask<bool>? printMask = null)
        {
            ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGroundCoverGrassGetter item,
            IGroundCoverGrassGetter rhs,
            GroundCoverGrass.TranslationMask? equalsMask = null)
        {
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGroundCoverGrass lhs,
            IGroundCoverGrassGetter rhs)
        {
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGroundCoverGrass lhs,
            IGroundCoverGrassGetter rhs,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGroundCoverGrass lhs,
            IGroundCoverGrassGetter rhs,
            out GroundCoverGrass.ErrorMask errorMask,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GroundCoverGrass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGroundCoverGrass lhs,
            IGroundCoverGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GroundCoverGrass DeepCopy(
            this IGroundCoverGrassGetter item,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            return ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GroundCoverGrass DeepCopy(
            this IGroundCoverGrassGetter item,
            out GroundCoverGrass.ErrorMask errorMask,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            return ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GroundCoverGrass DeepCopy(
            this IGroundCoverGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGroundCoverGrass item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GroundCoverGrassSetterCommon)((IGroundCoverGrassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GroundCoverGrass_FieldIndex
    {
        Grass = 0,
        OverrideDensity = 1,
    }
    #endregion

    #region Registration
    internal partial class GroundCoverGrass_Registration : ILoquiRegistration
    {
        public static readonly GroundCoverGrass_Registration Instance = new GroundCoverGrass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(GroundCoverGrass.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GroundCoverGrass.ErrorMask);

        public static readonly Type ClassType = typeof(GroundCoverGrass);

        public static readonly Type GetterType = typeof(IGroundCoverGrassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGroundCoverGrass);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.GroundCoverGrass";

        public const string Name = "GroundCoverGrass";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.GNAM,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GroundCoverGrassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GroundCoverGrassSetterCommon
    {
        public static readonly GroundCoverGrassSetterCommon Instance = new GroundCoverGrassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGroundCoverGrass item)
        {
            ClearPartial();
            item.Grass.Clear();
            item.OverrideDensity = default;
        }
        
        #region Mutagen
        public void RemapLinks(IGroundCoverGrass obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Grass.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGroundCoverGrass item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: GroundCoverGrassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class GroundCoverGrassCommon
    {
        public static readonly GroundCoverGrassCommon Instance = new GroundCoverGrassCommon();

        public GroundCoverGrass.Mask<bool> GetEqualsMask(
            IGroundCoverGrassGetter item,
            IGroundCoverGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GroundCoverGrass.Mask<bool>(false);
            ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGroundCoverGrassGetter item,
            IGroundCoverGrassGetter rhs,
            GroundCoverGrass.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Grass = item.Grass.Equals(rhs.Grass);
            ret.OverrideDensity = item.OverrideDensity == rhs.OverrideDensity;
        }
        
        public string Print(
            IGroundCoverGrassGetter item,
            string? name = null,
            GroundCoverGrass.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGroundCoverGrassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GroundCoverGrass.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GroundCoverGrass =>");
            }
            else
            {
                sb.AppendLine($"{name} (GroundCoverGrass) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGroundCoverGrassGetter item,
            StructuredStringBuilder sb,
            GroundCoverGrass.Mask<bool>? printMask = null)
        {
            if (printMask?.Grass ?? true)
            {
                sb.AppendItem(item.Grass.FormKeyNullable, "Grass");
            }
            if ((printMask?.OverrideDensity ?? true)
                && item.OverrideDensity is {} OverrideDensityItem)
            {
                sb.AppendItem(OverrideDensityItem, "OverrideDensity");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGroundCoverGrassGetter? lhs,
            IGroundCoverGrassGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)GroundCoverGrass_FieldIndex.Grass) ?? true))
            {
                if (!lhs.Grass.Equals(rhs.Grass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GroundCoverGrass_FieldIndex.OverrideDensity) ?? true))
            {
                if (lhs.OverrideDensity != rhs.OverrideDensity) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IGroundCoverGrassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Grass);
            if (item.OverrideDensity is {} OverrideDensityitem)
            {
                hash.Add(OverrideDensityitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return GroundCoverGrass.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGroundCoverGrassGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Grass, out var GrassInfo))
            {
                yield return GrassInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GroundCoverGrassSetterTranslationCommon
    {
        public static readonly GroundCoverGrassSetterTranslationCommon Instance = new GroundCoverGrassSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGroundCoverGrass item,
            IGroundCoverGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)GroundCoverGrass_FieldIndex.Grass) ?? true))
            {
                item.Grass.SetTo(rhs.Grass.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)GroundCoverGrass_FieldIndex.OverrideDensity) ?? true))
            {
                item.OverrideDensity = rhs.OverrideDensity;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGroundCoverGrass item,
            IGroundCoverGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public GroundCoverGrass DeepCopy(
            IGroundCoverGrassGetter item,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            GroundCoverGrass ret = (GroundCoverGrass)((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).GetNew();
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GroundCoverGrass DeepCopy(
            IGroundCoverGrassGetter item,
            out GroundCoverGrass.ErrorMask errorMask,
            GroundCoverGrass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GroundCoverGrass ret = (GroundCoverGrass)((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).GetNew();
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GroundCoverGrass.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GroundCoverGrass DeepCopy(
            IGroundCoverGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GroundCoverGrass ret = (GroundCoverGrass)((GroundCoverGrassCommon)((IGroundCoverGrassGetter)item).CommonInstance()!).GetNew();
            ((GroundCoverGrassSetterTranslationCommon)((IGroundCoverGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GroundCoverGrass
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GroundCoverGrass_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GroundCoverGrass_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroundCoverGrassCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GroundCoverGrassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroundCoverGrassSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroundCoverGrassGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGroundCoverGrassGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGroundCoverGrassGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GroundCoverGrassBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly GroundCoverGrassBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGroundCoverGrassGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Grass,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.OverrideDensity,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
        }

        public void Write(
            MutagenWriter writer,
            IGroundCoverGrassGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGroundCoverGrassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GroundCoverGrassBinaryCreateTranslation
    {
        public static readonly GroundCoverGrassBinaryCreateTranslation Instance = new GroundCoverGrassBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IGroundCoverGrass item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.GNAM:
                {
                    if (lastParsed.ShortCircuit((int)GroundCoverGrass_FieldIndex.Grass, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Grass.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)GroundCoverGrass_FieldIndex.Grass;
                }
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)GroundCoverGrass_FieldIndex.OverrideDensity, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OverrideDensity = frame.ReadInt16();
                    return (int)GroundCoverGrass_FieldIndex.OverrideDensity;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GroundCoverGrassBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGroundCoverGrassGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroundCoverGrassBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GroundCoverGrassBinaryOverlay :
        PluginBinaryOverlay,
        IGroundCoverGrassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GroundCoverGrass_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GroundCoverGrass_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroundCoverGrassCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroundCoverGrassSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroundCoverGrassGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGroundCoverGrassGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGroundCoverGrassGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GroundCoverGrassCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroundCoverGrassBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GroundCoverGrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Grass
        private int? _GrassLocation;
        public IFormLinkNullableGetter<IGrassGetter> Grass => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGrassGetter>(_package, _recordData, _GrassLocation);
        #endregion
        #region OverrideDensity
        private int? _OverrideDensityLocation;
        public Int16? OverrideDensity => _OverrideDensityLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _OverrideDensityLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GroundCoverGrassBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGroundCoverGrassGetter GroundCoverGrassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GroundCoverGrassBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGroundCoverGrassGetter GroundCoverGrassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GroundCoverGrassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.GNAM:
                {
                    if (lastParsed.ShortCircuit((int)GroundCoverGrass_FieldIndex.Grass, translationParams)) return ParseResult.Stop;
                    _GrassLocation = (stream.Position - offset);
                    return (int)GroundCoverGrass_FieldIndex.Grass;
                }
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)GroundCoverGrass_FieldIndex.OverrideDensity, translationParams)) return ParseResult.Stop;
                    _OverrideDensityLocation = (stream.Position - offset);
                    return (int)GroundCoverGrass_FieldIndex.OverrideDensity;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GroundCoverGrassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGroundCoverGrassGetter rhs) return false;
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGroundCoverGrassGetter? obj)
        {
            return ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GroundCoverGrassCommon)((IGroundCoverGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

