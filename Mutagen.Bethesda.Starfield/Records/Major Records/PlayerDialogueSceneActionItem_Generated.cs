/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlayerDialogueSceneActionItem :
        IEquatable<IPlayerDialogueSceneActionItemGetter>,
        ILoquiObjectSetter<PlayerDialogueSceneActionItem>,
        IPlayerDialogueSceneActionItem
    {
        #region Ctor
        public PlayerDialogueSceneActionItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PlayerChoice
        private readonly IFormLinkNullable<IDialogTopicGetter> _PlayerChoice = new FormLinkNullable<IDialogTopicGetter>();
        public IFormLinkNullable<IDialogTopicGetter> PlayerChoice
        {
            get => _PlayerChoice;
            set => _PlayerChoice.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogTopicGetter> IPlayerDialogueSceneActionItemGetter.PlayerChoice => this.PlayerChoice;
        #endregion
        #region PPST
        private readonly IFormLinkNullable<IKeywordGetter> _PPST = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> PPST
        {
            get => _PPST;
            set => _PPST.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IPlayerDialogueSceneActionItemGetter.PPST => this.PPST;
        #endregion
        #region PNST
        private readonly IFormLinkNullable<IKeywordGetter> _PNST = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> PNST
        {
            get => _PNST;
            set => _PNST.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IPlayerDialogueSceneActionItemGetter.PNST => this.PNST;
        #endregion
        #region StartScene
        private readonly IFormLinkNullable<ISceneGetter> _StartScene = new FormLinkNullable<ISceneGetter>();
        public IFormLinkNullable<ISceneGetter> StartScene
        {
            get => _StartScene;
            set => _StartScene.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISceneGetter> IPlayerDialogueSceneActionItemGetter.StartScene => this.StartScene;
        #endregion
        #region PhaseIndex
        public UInt32? PhaseIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlayerDialogueSceneActionItemGetter.PhaseIndex => this.PhaseIndex;
        #endregion
        #region PAPN
        public String? PAPN { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlayerDialogueSceneActionItemGetter.PAPN => this.PAPN;
        #endregion
        #region NpcResponse
        private readonly IFormLink<IDialogTopicGetter> _NpcResponse = new FormLink<IDialogTopicGetter>();
        public IFormLink<IDialogTopicGetter> NpcResponse
        {
            get => _NpcResponse;
            set => _NpcResponse.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDialogTopicGetter> IPlayerDialogueSceneActionItemGetter.NpcResponse => this.NpcResponse;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlayerDialogueSceneActionItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlayerDialogueSceneActionItemGetter rhs) return false;
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlayerDialogueSceneActionItemGetter? obj)
        {
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.PlayerChoice = initialValue;
                this.PPST = initialValue;
                this.PNST = initialValue;
                this.StartScene = initialValue;
                this.PhaseIndex = initialValue;
                this.PAPN = initialValue;
                this.NpcResponse = initialValue;
            }

            public Mask(
                TItem PlayerChoice,
                TItem PPST,
                TItem PNST,
                TItem StartScene,
                TItem PhaseIndex,
                TItem PAPN,
                TItem NpcResponse)
            {
                this.PlayerChoice = PlayerChoice;
                this.PPST = PPST;
                this.PNST = PNST;
                this.StartScene = StartScene;
                this.PhaseIndex = PhaseIndex;
                this.PAPN = PAPN;
                this.NpcResponse = NpcResponse;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem PlayerChoice;
            public TItem PPST;
            public TItem PNST;
            public TItem StartScene;
            public TItem PhaseIndex;
            public TItem PAPN;
            public TItem NpcResponse;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.PlayerChoice, rhs.PlayerChoice)) return false;
                if (!object.Equals(this.PPST, rhs.PPST)) return false;
                if (!object.Equals(this.PNST, rhs.PNST)) return false;
                if (!object.Equals(this.StartScene, rhs.StartScene)) return false;
                if (!object.Equals(this.PhaseIndex, rhs.PhaseIndex)) return false;
                if (!object.Equals(this.PAPN, rhs.PAPN)) return false;
                if (!object.Equals(this.NpcResponse, rhs.NpcResponse)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PlayerChoice);
                hash.Add(this.PPST);
                hash.Add(this.PNST);
                hash.Add(this.StartScene);
                hash.Add(this.PhaseIndex);
                hash.Add(this.PAPN);
                hash.Add(this.NpcResponse);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.PlayerChoice)) return false;
                if (!eval(this.PPST)) return false;
                if (!eval(this.PNST)) return false;
                if (!eval(this.StartScene)) return false;
                if (!eval(this.PhaseIndex)) return false;
                if (!eval(this.PAPN)) return false;
                if (!eval(this.NpcResponse)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.PlayerChoice)) return true;
                if (eval(this.PPST)) return true;
                if (eval(this.PNST)) return true;
                if (eval(this.StartScene)) return true;
                if (eval(this.PhaseIndex)) return true;
                if (eval(this.PAPN)) return true;
                if (eval(this.NpcResponse)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlayerDialogueSceneActionItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.PlayerChoice = eval(this.PlayerChoice);
                obj.PPST = eval(this.PPST);
                obj.PNST = eval(this.PNST);
                obj.StartScene = eval(this.StartScene);
                obj.PhaseIndex = eval(this.PhaseIndex);
                obj.PAPN = eval(this.PAPN);
                obj.NpcResponse = eval(this.NpcResponse);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlayerDialogueSceneActionItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.PlayerChoice ?? true)
                    {
                        sb.AppendItem(PlayerChoice, "PlayerChoice");
                    }
                    if (printMask?.PPST ?? true)
                    {
                        sb.AppendItem(PPST, "PPST");
                    }
                    if (printMask?.PNST ?? true)
                    {
                        sb.AppendItem(PNST, "PNST");
                    }
                    if (printMask?.StartScene ?? true)
                    {
                        sb.AppendItem(StartScene, "StartScene");
                    }
                    if (printMask?.PhaseIndex ?? true)
                    {
                        sb.AppendItem(PhaseIndex, "PhaseIndex");
                    }
                    if (printMask?.PAPN ?? true)
                    {
                        sb.AppendItem(PAPN, "PAPN");
                    }
                    if (printMask?.NpcResponse ?? true)
                    {
                        sb.AppendItem(NpcResponse, "NpcResponse");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? PlayerChoice;
            public Exception? PPST;
            public Exception? PNST;
            public Exception? StartScene;
            public Exception? PhaseIndex;
            public Exception? PAPN;
            public Exception? NpcResponse;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlayerDialogueSceneActionItem_FieldIndex enu = (PlayerDialogueSceneActionItem_FieldIndex)index;
                switch (enu)
                {
                    case PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice:
                        return PlayerChoice;
                    case PlayerDialogueSceneActionItem_FieldIndex.PPST:
                        return PPST;
                    case PlayerDialogueSceneActionItem_FieldIndex.PNST:
                        return PNST;
                    case PlayerDialogueSceneActionItem_FieldIndex.StartScene:
                        return StartScene;
                    case PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex:
                        return PhaseIndex;
                    case PlayerDialogueSceneActionItem_FieldIndex.PAPN:
                        return PAPN;
                    case PlayerDialogueSceneActionItem_FieldIndex.NpcResponse:
                        return NpcResponse;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlayerDialogueSceneActionItem_FieldIndex enu = (PlayerDialogueSceneActionItem_FieldIndex)index;
                switch (enu)
                {
                    case PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice:
                        this.PlayerChoice = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PPST:
                        this.PPST = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PNST:
                        this.PNST = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.StartScene:
                        this.StartScene = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex:
                        this.PhaseIndex = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PAPN:
                        this.PAPN = ex;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.NpcResponse:
                        this.NpcResponse = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlayerDialogueSceneActionItem_FieldIndex enu = (PlayerDialogueSceneActionItem_FieldIndex)index;
                switch (enu)
                {
                    case PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice:
                        this.PlayerChoice = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PPST:
                        this.PPST = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PNST:
                        this.PNST = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.StartScene:
                        this.StartScene = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex:
                        this.PhaseIndex = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.PAPN:
                        this.PAPN = (Exception?)obj;
                        break;
                    case PlayerDialogueSceneActionItem_FieldIndex.NpcResponse:
                        this.NpcResponse = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (PlayerChoice != null) return true;
                if (PPST != null) return true;
                if (PNST != null) return true;
                if (StartScene != null) return true;
                if (PhaseIndex != null) return true;
                if (PAPN != null) return true;
                if (NpcResponse != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(PlayerChoice, "PlayerChoice");
                }
                {
                    sb.AppendItem(PPST, "PPST");
                }
                {
                    sb.AppendItem(PNST, "PNST");
                }
                {
                    sb.AppendItem(StartScene, "StartScene");
                }
                {
                    sb.AppendItem(PhaseIndex, "PhaseIndex");
                }
                {
                    sb.AppendItem(PAPN, "PAPN");
                }
                {
                    sb.AppendItem(NpcResponse, "NpcResponse");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PlayerChoice = this.PlayerChoice.Combine(rhs.PlayerChoice);
                ret.PPST = this.PPST.Combine(rhs.PPST);
                ret.PNST = this.PNST.Combine(rhs.PNST);
                ret.StartScene = this.StartScene.Combine(rhs.StartScene);
                ret.PhaseIndex = this.PhaseIndex.Combine(rhs.PhaseIndex);
                ret.PAPN = this.PAPN.Combine(rhs.PAPN);
                ret.NpcResponse = this.NpcResponse.Combine(rhs.NpcResponse);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool PlayerChoice;
            public bool PPST;
            public bool PNST;
            public bool StartScene;
            public bool PhaseIndex;
            public bool PAPN;
            public bool NpcResponse;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.PlayerChoice = defaultOn;
                this.PPST = defaultOn;
                this.PNST = defaultOn;
                this.StartScene = defaultOn;
                this.PhaseIndex = defaultOn;
                this.PAPN = defaultOn;
                this.NpcResponse = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((PlayerChoice, null));
                ret.Add((PPST, null));
                ret.Add((PNST, null));
                ret.Add((StartScene, null));
                ret.Add((PhaseIndex, null));
                ret.Add((PAPN, null));
                ret.Add((NpcResponse, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlayerDialogueSceneActionItemCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlayerDialogueSceneActionItemSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlayerDialogueSceneActionItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlayerDialogueSceneActionItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlayerDialogueSceneActionItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlayerDialogueSceneActionItem();
            ((PlayerDialogueSceneActionItemSetterCommon)((IPlayerDialogueSceneActionItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlayerDialogueSceneActionItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlayerDialogueSceneActionItemSetterCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlayerDialogueSceneActionItem GetNew()
        {
            return new PlayerDialogueSceneActionItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlayerDialogueSceneActionItem :
        IFormLinkContainer,
        ILoquiObjectSetter<IPlayerDialogueSceneActionItem>,
        IPlayerDialogueSceneActionItemGetter
    {
        new IFormLinkNullable<IDialogTopicGetter> PlayerChoice { get; set; }
        new IFormLinkNullable<IKeywordGetter> PPST { get; set; }
        new IFormLinkNullable<IKeywordGetter> PNST { get; set; }
        new IFormLinkNullable<ISceneGetter> StartScene { get; set; }
        new UInt32? PhaseIndex { get; set; }
        new String? PAPN { get; set; }
        new IFormLink<IDialogTopicGetter> NpcResponse { get; set; }
    }

    public partial interface IPlayerDialogueSceneActionItemGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlayerDialogueSceneActionItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlayerDialogueSceneActionItem_Registration.Instance;
        IFormLinkNullableGetter<IDialogTopicGetter> PlayerChoice { get; }
        IFormLinkNullableGetter<IKeywordGetter> PPST { get; }
        IFormLinkNullableGetter<IKeywordGetter> PNST { get; }
        IFormLinkNullableGetter<ISceneGetter> StartScene { get; }
        UInt32? PhaseIndex { get; }
        String? PAPN { get; }
        IFormLinkGetter<IDialogTopicGetter> NpcResponse { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlayerDialogueSceneActionItemMixIn
    {
        public static void Clear(this IPlayerDialogueSceneActionItem item)
        {
            ((PlayerDialogueSceneActionItemSetterCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlayerDialogueSceneActionItem.Mask<bool> GetEqualsMask(
            this IPlayerDialogueSceneActionItemGetter item,
            IPlayerDialogueSceneActionItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlayerDialogueSceneActionItemGetter item,
            string? name = null,
            PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
        {
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlayerDialogueSceneActionItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
        {
            ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlayerDialogueSceneActionItemGetter item,
            IPlayerDialogueSceneActionItemGetter rhs,
            PlayerDialogueSceneActionItem.TranslationMask? equalsMask = null)
        {
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlayerDialogueSceneActionItem lhs,
            IPlayerDialogueSceneActionItemGetter rhs)
        {
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlayerDialogueSceneActionItem lhs,
            IPlayerDialogueSceneActionItemGetter rhs,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlayerDialogueSceneActionItem lhs,
            IPlayerDialogueSceneActionItemGetter rhs,
            out PlayerDialogueSceneActionItem.ErrorMask errorMask,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlayerDialogueSceneActionItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlayerDialogueSceneActionItem lhs,
            IPlayerDialogueSceneActionItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlayerDialogueSceneActionItem DeepCopy(
            this IPlayerDialogueSceneActionItemGetter item,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            return ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlayerDialogueSceneActionItem DeepCopy(
            this IPlayerDialogueSceneActionItemGetter item,
            out PlayerDialogueSceneActionItem.ErrorMask errorMask,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            return ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlayerDialogueSceneActionItem DeepCopy(
            this IPlayerDialogueSceneActionItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlayerDialogueSceneActionItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlayerDialogueSceneActionItemSetterCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlayerDialogueSceneActionItem_FieldIndex
    {
        PlayerChoice = 0,
        PPST = 1,
        PNST = 2,
        StartScene = 3,
        PhaseIndex = 4,
        PAPN = 5,
        NpcResponse = 6,
    }
    #endregion

    #region Registration
    internal partial class PlayerDialogueSceneActionItem_Registration : ILoquiRegistration
    {
        public static readonly PlayerDialogueSceneActionItem_Registration Instance = new PlayerDialogueSceneActionItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(PlayerDialogueSceneActionItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlayerDialogueSceneActionItem.ErrorMask);

        public static readonly Type ClassType = typeof(PlayerDialogueSceneActionItem);

        public static readonly Type GetterType = typeof(IPlayerDialogueSceneActionItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlayerDialogueSceneActionItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlayerDialogueSceneActionItem";

        public const string Name = "PlayerDialogueSceneActionItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.ESCE,
                RecordTypes.PPST,
                RecordTypes.PNST,
                RecordTypes.PASP,
                RecordTypes.PAPI,
                RecordTypes.PAPN,
                RecordTypes.ESCS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlayerDialogueSceneActionItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlayerDialogueSceneActionItemSetterCommon
    {
        public static readonly PlayerDialogueSceneActionItemSetterCommon Instance = new PlayerDialogueSceneActionItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlayerDialogueSceneActionItem item)
        {
            ClearPartial();
            item.PlayerChoice.Clear();
            item.PPST.Clear();
            item.PNST.Clear();
            item.StartScene.Clear();
            item.PhaseIndex = default;
            item.PAPN = default;
            item.NpcResponse.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPlayerDialogueSceneActionItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.PlayerChoice.Relink(mapping);
            obj.PPST.Relink(mapping);
            obj.PNST.Relink(mapping);
            obj.StartScene.Relink(mapping);
            obj.NpcResponse.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlayerDialogueSceneActionItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PlayerDialogueSceneActionItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class PlayerDialogueSceneActionItemCommon
    {
        public static readonly PlayerDialogueSceneActionItemCommon Instance = new PlayerDialogueSceneActionItemCommon();

        public PlayerDialogueSceneActionItem.Mask<bool> GetEqualsMask(
            IPlayerDialogueSceneActionItemGetter item,
            IPlayerDialogueSceneActionItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlayerDialogueSceneActionItem.Mask<bool>(false);
            ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlayerDialogueSceneActionItemGetter item,
            IPlayerDialogueSceneActionItemGetter rhs,
            PlayerDialogueSceneActionItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.PlayerChoice = item.PlayerChoice.Equals(rhs.PlayerChoice);
            ret.PPST = item.PPST.Equals(rhs.PPST);
            ret.PNST = item.PNST.Equals(rhs.PNST);
            ret.StartScene = item.StartScene.Equals(rhs.StartScene);
            ret.PhaseIndex = item.PhaseIndex == rhs.PhaseIndex;
            ret.PAPN = string.Equals(item.PAPN, rhs.PAPN);
            ret.NpcResponse = item.NpcResponse.Equals(rhs.NpcResponse);
        }
        
        public string Print(
            IPlayerDialogueSceneActionItemGetter item,
            string? name = null,
            PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlayerDialogueSceneActionItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlayerDialogueSceneActionItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlayerDialogueSceneActionItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlayerDialogueSceneActionItemGetter item,
            StructuredStringBuilder sb,
            PlayerDialogueSceneActionItem.Mask<bool>? printMask = null)
        {
            if (printMask?.PlayerChoice ?? true)
            {
                sb.AppendItem(item.PlayerChoice.FormKeyNullable, "PlayerChoice");
            }
            if (printMask?.PPST ?? true)
            {
                sb.AppendItem(item.PPST.FormKeyNullable, "PPST");
            }
            if (printMask?.PNST ?? true)
            {
                sb.AppendItem(item.PNST.FormKeyNullable, "PNST");
            }
            if (printMask?.StartScene ?? true)
            {
                sb.AppendItem(item.StartScene.FormKeyNullable, "StartScene");
            }
            if ((printMask?.PhaseIndex ?? true)
                && item.PhaseIndex is {} PhaseIndexItem)
            {
                sb.AppendItem(PhaseIndexItem, "PhaseIndex");
            }
            if ((printMask?.PAPN ?? true)
                && item.PAPN is {} PAPNItem)
            {
                sb.AppendItem(PAPNItem, "PAPN");
            }
            if (printMask?.NpcResponse ?? true)
            {
                sb.AppendItem(item.NpcResponse.FormKey, "NpcResponse");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlayerDialogueSceneActionItemGetter? lhs,
            IPlayerDialogueSceneActionItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice) ?? true))
            {
                if (!lhs.PlayerChoice.Equals(rhs.PlayerChoice)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PPST) ?? true))
            {
                if (!lhs.PPST.Equals(rhs.PPST)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PNST) ?? true))
            {
                if (!lhs.PNST.Equals(rhs.PNST)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.StartScene) ?? true))
            {
                if (!lhs.StartScene.Equals(rhs.StartScene)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex) ?? true))
            {
                if (lhs.PhaseIndex != rhs.PhaseIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PAPN) ?? true))
            {
                if (!string.Equals(lhs.PAPN, rhs.PAPN)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse) ?? true))
            {
                if (!lhs.NpcResponse.Equals(rhs.NpcResponse)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlayerDialogueSceneActionItemGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PlayerChoice);
            hash.Add(item.PPST);
            hash.Add(item.PNST);
            hash.Add(item.StartScene);
            if (item.PhaseIndex is {} PhaseIndexitem)
            {
                hash.Add(PhaseIndexitem);
            }
            if (item.PAPN is {} PAPNitem)
            {
                hash.Add(PAPNitem);
            }
            hash.Add(item.NpcResponse);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlayerDialogueSceneActionItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlayerDialogueSceneActionItemGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.PlayerChoice, out var PlayerChoiceInfo))
            {
                yield return PlayerChoiceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PPST, out var PPSTInfo))
            {
                yield return PPSTInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PNST, out var PNSTInfo))
            {
                yield return PNSTInfo;
            }
            if (FormLinkInformation.TryFactory(obj.StartScene, out var StartSceneInfo))
            {
                yield return StartSceneInfo;
            }
            yield return FormLinkInformation.Factory(obj.NpcResponse);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlayerDialogueSceneActionItemSetterTranslationCommon
    {
        public static readonly PlayerDialogueSceneActionItemSetterTranslationCommon Instance = new PlayerDialogueSceneActionItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlayerDialogueSceneActionItem item,
            IPlayerDialogueSceneActionItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice) ?? true))
            {
                item.PlayerChoice.SetTo(rhs.PlayerChoice.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PPST) ?? true))
            {
                item.PPST.SetTo(rhs.PPST.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PNST) ?? true))
            {
                item.PNST.SetTo(rhs.PNST.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.StartScene) ?? true))
            {
                item.StartScene.SetTo(rhs.StartScene.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex) ?? true))
            {
                item.PhaseIndex = rhs.PhaseIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.PAPN) ?? true))
            {
                item.PAPN = rhs.PAPN;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse) ?? true))
            {
                item.NpcResponse.SetTo(rhs.NpcResponse.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlayerDialogueSceneActionItem item,
            IPlayerDialogueSceneActionItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlayerDialogueSceneActionItem DeepCopy(
            IPlayerDialogueSceneActionItemGetter item,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            PlayerDialogueSceneActionItem ret = (PlayerDialogueSceneActionItem)((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).GetNew();
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlayerDialogueSceneActionItem DeepCopy(
            IPlayerDialogueSceneActionItemGetter item,
            out PlayerDialogueSceneActionItem.ErrorMask errorMask,
            PlayerDialogueSceneActionItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlayerDialogueSceneActionItem ret = (PlayerDialogueSceneActionItem)((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).GetNew();
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlayerDialogueSceneActionItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlayerDialogueSceneActionItem DeepCopy(
            IPlayerDialogueSceneActionItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlayerDialogueSceneActionItem ret = (PlayerDialogueSceneActionItem)((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)item).CommonInstance()!).GetNew();
            ((PlayerDialogueSceneActionItemSetterTranslationCommon)((IPlayerDialogueSceneActionItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlayerDialogueSceneActionItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlayerDialogueSceneActionItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlayerDialogueSceneActionItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlayerDialogueSceneActionItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlayerDialogueSceneActionItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlayerDialogueSceneActionItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlayerDialogueSceneActionItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlayerDialogueSceneActionItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlayerDialogueSceneActionItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlayerDialogueSceneActionItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlayerDialogueSceneActionItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlayerDialogueSceneActionItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PlayerChoice,
                header: translationParams.ConvertToCustom(RecordTypes.ESCE));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PPST,
                header: translationParams.ConvertToCustom(RecordTypes.PPST));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PNST,
                header: translationParams.ConvertToCustom(RecordTypes.PNST));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StartScene,
                header: translationParams.ConvertToCustom(RecordTypes.PASP));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PhaseIndex,
                header: translationParams.ConvertToCustom(RecordTypes.PAPI));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PAPN,
                header: translationParams.ConvertToCustom(RecordTypes.PAPN),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NpcResponse,
                header: translationParams.ConvertToCustom(RecordTypes.ESCS));
        }

        public void Write(
            MutagenWriter writer,
            IPlayerDialogueSceneActionItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlayerDialogueSceneActionItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlayerDialogueSceneActionItemBinaryCreateTranslation
    {
        public static readonly PlayerDialogueSceneActionItemBinaryCreateTranslation Instance = new PlayerDialogueSceneActionItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPlayerDialogueSceneActionItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ESCE:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PlayerChoice.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice;
                }
                case RecordTypeInts.PPST:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PPST, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PPST.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PPST;
                }
                case RecordTypeInts.PNST:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PNST, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNST.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PNST;
                }
                case RecordTypeInts.PASP:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.StartScene, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StartScene.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.StartScene;
                }
                case RecordTypeInts.PAPI:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PhaseIndex = frame.ReadUInt32();
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex;
                }
                case RecordTypeInts.PAPN:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PAPN, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PAPN = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PAPN;
                }
                case RecordTypeInts.ESCS:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NpcResponse.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlayerDialogueSceneActionItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlayerDialogueSceneActionItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlayerDialogueSceneActionItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlayerDialogueSceneActionItemBinaryOverlay :
        PluginBinaryOverlay,
        IPlayerDialogueSceneActionItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlayerDialogueSceneActionItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlayerDialogueSceneActionItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlayerDialogueSceneActionItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlayerDialogueSceneActionItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlayerDialogueSceneActionItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlayerDialogueSceneActionItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlayerDialogueSceneActionItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlayerDialogueSceneActionItemCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlayerDialogueSceneActionItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlayerDialogueSceneActionItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region PlayerChoice
        private int? _PlayerChoiceLocation;
        public IFormLinkNullableGetter<IDialogTopicGetter> PlayerChoice => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _PlayerChoiceLocation);
        #endregion
        #region PPST
        private int? _PPSTLocation;
        public IFormLinkNullableGetter<IKeywordGetter> PPST => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _PPSTLocation);
        #endregion
        #region PNST
        private int? _PNSTLocation;
        public IFormLinkNullableGetter<IKeywordGetter> PNST => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _PNSTLocation);
        #endregion
        #region StartScene
        private int? _StartSceneLocation;
        public IFormLinkNullableGetter<ISceneGetter> StartScene => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISceneGetter>(_package, _recordData, _StartSceneLocation);
        #endregion
        #region PhaseIndex
        private int? _PhaseIndexLocation;
        public UInt32? PhaseIndex => _PhaseIndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PhaseIndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region PAPN
        private int? _PAPNLocation;
        public String? PAPN => _PAPNLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PAPNLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NpcResponse
        private int? _NpcResponseLocation;
        public IFormLinkGetter<IDialogTopicGetter> NpcResponse => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _NpcResponseLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlayerDialogueSceneActionItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlayerDialogueSceneActionItemGetter PlayerDialogueSceneActionItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlayerDialogueSceneActionItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlayerDialogueSceneActionItemGetter PlayerDialogueSceneActionItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlayerDialogueSceneActionItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ESCE:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice, translationParams)) return ParseResult.Stop;
                    _PlayerChoiceLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PlayerChoice;
                }
                case RecordTypeInts.PPST:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PPST, translationParams)) return ParseResult.Stop;
                    _PPSTLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PPST;
                }
                case RecordTypeInts.PNST:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PNST, translationParams)) return ParseResult.Stop;
                    _PNSTLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PNST;
                }
                case RecordTypeInts.PASP:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.StartScene, translationParams)) return ParseResult.Stop;
                    _StartSceneLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.StartScene;
                }
                case RecordTypeInts.PAPI:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex, translationParams)) return ParseResult.Stop;
                    _PhaseIndexLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PhaseIndex;
                }
                case RecordTypeInts.PAPN:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.PAPN, translationParams)) return ParseResult.Stop;
                    _PAPNLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.PAPN;
                }
                case RecordTypeInts.ESCS:
                {
                    if (lastParsed.ShortCircuit((int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse, translationParams)) return ParseResult.Stop;
                    _NpcResponseLocation = (stream.Position - offset);
                    return (int)PlayerDialogueSceneActionItem_FieldIndex.NpcResponse;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlayerDialogueSceneActionItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlayerDialogueSceneActionItemGetter rhs) return false;
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlayerDialogueSceneActionItemGetter? obj)
        {
            return ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlayerDialogueSceneActionItemCommon)((IPlayerDialogueSceneActionItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

