/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class LegendaryItem :
        StarfieldMajorRecord,
        IEquatable<ILegendaryItemGetter>,
        ILegendaryItemInternal,
        ILoquiObjectSetter<LegendaryItem>
    {
        #region Ctor
        protected LegendaryItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds? _ObjectBounds;
        /// <summary>
        /// Aspects: IObjectBoundedOptional
        /// </summary>
        public ObjectBounds? ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? ILegendaryItemGetter.ObjectBounds => this.ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPaletteDefaults? _ObjectPaletteDefaults;
        public ObjectPaletteDefaults? ObjectPaletteDefaults
        {
            get => _ObjectPaletteDefaults;
            set => _ObjectPaletteDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPaletteDefaultsGetter? ILegendaryItemGetter.ObjectPaletteDefaults => this.ObjectPaletteDefaults;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? ILegendaryItemGetter.Transforms => this.Transforms;
        #endregion
        #region XALG
        public UInt64? XALG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? ILegendaryItemGetter.XALG => this.XALG;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ILegendaryItemGetter.Components => _Components;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ILegendaryItemGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region BaseObjectList
        private readonly IFormLinkNullable<ILeveledItemGetter> _BaseObjectList = new FormLinkNullable<ILeveledItemGetter>();
        public IFormLinkNullable<ILeveledItemGetter> BaseObjectList
        {
            get => _BaseObjectList;
            set => _BaseObjectList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILeveledItemGetter> ILegendaryItemGetter.BaseObjectList => this.BaseObjectList;
        #endregion
        #region RankTemplate
        private readonly IFormLinkNullable<ILegendaryItemGetter> _RankTemplate = new FormLinkNullable<ILegendaryItemGetter>();
        public IFormLinkNullable<ILegendaryItemGetter> RankTemplate
        {
            get => _RankTemplate;
            set => _RankTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILegendaryItemGetter> ILegendaryItemGetter.RankTemplate => this.RankTemplate;
        #endregion
        #region LegendaryMods
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LegendaryMod>? _LegendaryMods;
        public ExtendedList<LegendaryMod>? LegendaryMods
        {
            get => this._LegendaryMods;
            set => this._LegendaryMods = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILegendaryModGetter>? ILegendaryItemGetter.LegendaryMods => _LegendaryMods;
        #endregion

        #endregion
        #region IncludeFilters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LegendaryFilter>? _IncludeFilters;
        public ExtendedList<LegendaryFilter>? IncludeFilters
        {
            get => this._IncludeFilters;
            set => this._IncludeFilters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILegendaryFilterGetter>? ILegendaryItemGetter.IncludeFilters => _IncludeFilters;
        #endregion

        #endregion
        #region ExcludeFilters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LegendaryFilter>? _ExcludeFilters;
        public ExtendedList<LegendaryFilter>? ExcludeFilters
        {
            get => this._ExcludeFilters;
            set => this._ExcludeFilters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILegendaryFilterGetter>? ILegendaryItemGetter.ExcludeFilters => _ExcludeFilters;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LegendaryItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(initialValue, new ObjectPaletteDefaults.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.XALG = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.BaseObjectList = initialValue;
                this.RankTemplate = initialValue;
                this.LegendaryMods = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryMod.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryMod.Mask<TItem>?>>());
                this.IncludeFilters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>());
                this.ExcludeFilters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem ObjectPaletteDefaults,
                TItem Transforms,
                TItem XALG,
                TItem Components,
                TItem Model,
                TItem BaseObjectList,
                TItem RankTemplate,
                TItem LegendaryMods,
                TItem IncludeFilters,
                TItem ExcludeFilters)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(ObjectPaletteDefaults, new ObjectPaletteDefaults.Mask<TItem>(ObjectPaletteDefaults));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.XALG = XALG;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.BaseObjectList = BaseObjectList;
                this.RankTemplate = RankTemplate;
                this.LegendaryMods = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryMod.Mask<TItem>?>>?>(LegendaryMods, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryMod.Mask<TItem>?>>());
                this.IncludeFilters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>(IncludeFilters, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>());
                this.ExcludeFilters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>(ExcludeFilters, Enumerable.Empty<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>? ObjectPaletteDefaults { get; set; }
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public TItem XALG;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem BaseObjectList;
            public TItem RankTemplate;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryMod.Mask<TItem>?>>?>? LegendaryMods;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>? IncludeFilters;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LegendaryFilter.Mask<TItem>?>>?>? ExcludeFilters;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.BaseObjectList, rhs.BaseObjectList)) return false;
                if (!object.Equals(this.RankTemplate, rhs.RankTemplate)) return false;
                if (!object.Equals(this.LegendaryMods, rhs.LegendaryMods)) return false;
                if (!object.Equals(this.IncludeFilters, rhs.IncludeFilters)) return false;
                if (!object.Equals(this.ExcludeFilters, rhs.ExcludeFilters)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.ObjectPaletteDefaults);
                hash.Add(this.Transforms);
                hash.Add(this.XALG);
                hash.Add(this.Components);
                hash.Add(this.Model);
                hash.Add(this.BaseObjectList);
                hash.Add(this.RankTemplate);
                hash.Add(this.LegendaryMods);
                hash.Add(this.IncludeFilters);
                hash.Add(this.ExcludeFilters);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (ObjectPaletteDefaults != null)
                {
                    if (!eval(this.ObjectPaletteDefaults.Overall)) return false;
                    if (this.ObjectPaletteDefaults.Specific != null && !this.ObjectPaletteDefaults.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (!eval(this.XALG)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.BaseObjectList)) return false;
                if (!eval(this.RankTemplate)) return false;
                if (this.LegendaryMods != null)
                {
                    if (!eval(this.LegendaryMods.Overall)) return false;
                    if (this.LegendaryMods.Specific != null)
                    {
                        foreach (var item in this.LegendaryMods.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.IncludeFilters != null)
                {
                    if (!eval(this.IncludeFilters.Overall)) return false;
                    if (this.IncludeFilters.Specific != null)
                    {
                        foreach (var item in this.IncludeFilters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ExcludeFilters != null)
                {
                    if (!eval(this.ExcludeFilters.Overall)) return false;
                    if (this.ExcludeFilters.Specific != null)
                    {
                        foreach (var item in this.ExcludeFilters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (ObjectPaletteDefaults != null)
                {
                    if (eval(this.ObjectPaletteDefaults.Overall)) return true;
                    if (this.ObjectPaletteDefaults.Specific != null && this.ObjectPaletteDefaults.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (eval(this.XALG)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.BaseObjectList)) return true;
                if (eval(this.RankTemplate)) return true;
                if (this.LegendaryMods != null)
                {
                    if (eval(this.LegendaryMods.Overall)) return true;
                    if (this.LegendaryMods.Specific != null)
                    {
                        foreach (var item in this.LegendaryMods.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.IncludeFilters != null)
                {
                    if (eval(this.IncludeFilters.Overall)) return true;
                    if (this.IncludeFilters.Specific != null)
                    {
                        foreach (var item in this.IncludeFilters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ExcludeFilters != null)
                {
                    if (eval(this.ExcludeFilters.Overall)) return true;
                    if (this.ExcludeFilters.Specific != null)
                    {
                        foreach (var item in this.ExcludeFilters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LegendaryItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.ObjectPaletteDefaults = this.ObjectPaletteDefaults == null ? null : new MaskItem<R, ObjectPaletteDefaults.Mask<R>?>(eval(this.ObjectPaletteDefaults.Overall), this.ObjectPaletteDefaults.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.XALG = eval(this.XALG);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.BaseObjectList = eval(this.BaseObjectList);
                obj.RankTemplate = eval(this.RankTemplate);
                if (LegendaryMods != null)
                {
                    obj.LegendaryMods = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LegendaryMod.Mask<R>?>>?>(eval(this.LegendaryMods.Overall), Enumerable.Empty<MaskItemIndexed<R, LegendaryMod.Mask<R>?>>());
                    if (LegendaryMods.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LegendaryMod.Mask<R>?>>();
                        obj.LegendaryMods.Specific = l;
                        foreach (var item in LegendaryMods.Specific)
                        {
                            MaskItemIndexed<R, LegendaryMod.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LegendaryMod.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (IncludeFilters != null)
                {
                    obj.IncludeFilters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>?>(eval(this.IncludeFilters.Overall), Enumerable.Empty<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>());
                    if (IncludeFilters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>();
                        obj.IncludeFilters.Specific = l;
                        foreach (var item in IncludeFilters.Specific)
                        {
                            MaskItemIndexed<R, LegendaryFilter.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LegendaryFilter.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ExcludeFilters != null)
                {
                    obj.ExcludeFilters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>?>(eval(this.ExcludeFilters.Overall), Enumerable.Empty<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>());
                    if (ExcludeFilters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LegendaryFilter.Mask<R>?>>();
                        obj.ExcludeFilters.Specific = l;
                        foreach (var item in ExcludeFilters.Specific)
                        {
                            MaskItemIndexed<R, LegendaryFilter.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LegendaryFilter.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LegendaryItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LegendaryItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LegendaryItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.ObjectPaletteDefaults?.Overall ?? true)
                    {
                        ObjectPaletteDefaults?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.BaseObjectList ?? true)
                    {
                        sb.AppendItem(BaseObjectList, "BaseObjectList");
                    }
                    if (printMask?.RankTemplate ?? true)
                    {
                        sb.AppendItem(RankTemplate, "RankTemplate");
                    }
                    if ((printMask?.LegendaryMods?.Overall ?? true)
                        && LegendaryMods is {} LegendaryModsItem)
                    {
                        sb.AppendLine("LegendaryMods =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LegendaryModsItem.Overall);
                            if (LegendaryModsItem.Specific != null)
                            {
                                foreach (var subItem in LegendaryModsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.IncludeFilters?.Overall ?? true)
                        && IncludeFilters is {} IncludeFiltersItem)
                    {
                        sb.AppendLine("IncludeFilters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(IncludeFiltersItem.Overall);
                            if (IncludeFiltersItem.Specific != null)
                            {
                                foreach (var subItem in IncludeFiltersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ExcludeFilters?.Overall ?? true)
                        && ExcludeFilters is {} ExcludeFiltersItem)
                    {
                        sb.AppendLine("ExcludeFilters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ExcludeFiltersItem.Overall);
                            if (ExcludeFiltersItem.Specific != null)
                            {
                                foreach (var subItem in ExcludeFiltersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>? ObjectPaletteDefaults;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public Exception? XALG;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? BaseObjectList;
            public Exception? RankTemplate;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryMod.ErrorMask?>>?>? LegendaryMods;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>? IncludeFilters;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>? ExcludeFilters;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LegendaryItem_FieldIndex enu = (LegendaryItem_FieldIndex)index;
                switch (enu)
                {
                    case LegendaryItem_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case LegendaryItem_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case LegendaryItem_FieldIndex.ObjectPaletteDefaults:
                        return ObjectPaletteDefaults;
                    case LegendaryItem_FieldIndex.Transforms:
                        return Transforms;
                    case LegendaryItem_FieldIndex.XALG:
                        return XALG;
                    case LegendaryItem_FieldIndex.Components:
                        return Components;
                    case LegendaryItem_FieldIndex.Model:
                        return Model;
                    case LegendaryItem_FieldIndex.BaseObjectList:
                        return BaseObjectList;
                    case LegendaryItem_FieldIndex.RankTemplate:
                        return RankTemplate;
                    case LegendaryItem_FieldIndex.LegendaryMods:
                        return LegendaryMods;
                    case LegendaryItem_FieldIndex.IncludeFilters:
                        return IncludeFilters;
                    case LegendaryItem_FieldIndex.ExcludeFilters:
                        return ExcludeFilters;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LegendaryItem_FieldIndex enu = (LegendaryItem_FieldIndex)index;
                switch (enu)
                {
                    case LegendaryItem_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case LegendaryItem_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = new MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case LegendaryItem_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.BaseObjectList:
                        this.BaseObjectList = ex;
                        break;
                    case LegendaryItem_FieldIndex.RankTemplate:
                        this.RankTemplate = ex;
                        break;
                    case LegendaryItem_FieldIndex.LegendaryMods:
                        this.LegendaryMods = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryMod.ErrorMask?>>?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.IncludeFilters:
                        this.IncludeFilters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>(ex, null);
                        break;
                    case LegendaryItem_FieldIndex.ExcludeFilters:
                        this.ExcludeFilters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LegendaryItem_FieldIndex enu = (LegendaryItem_FieldIndex)index;
                switch (enu)
                {
                    case LegendaryItem_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case LegendaryItem_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case LegendaryItem_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = (MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>?)obj;
                        break;
                    case LegendaryItem_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case LegendaryItem_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case LegendaryItem_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case LegendaryItem_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case LegendaryItem_FieldIndex.BaseObjectList:
                        this.BaseObjectList = (Exception?)obj;
                        break;
                    case LegendaryItem_FieldIndex.RankTemplate:
                        this.RankTemplate = (Exception?)obj;
                        break;
                    case LegendaryItem_FieldIndex.LegendaryMods:
                        this.LegendaryMods = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryMod.ErrorMask?>>?>)obj;
                        break;
                    case LegendaryItem_FieldIndex.IncludeFilters:
                        this.IncludeFilters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>)obj;
                        break;
                    case LegendaryItem_FieldIndex.ExcludeFilters:
                        this.ExcludeFilters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (ObjectPaletteDefaults != null) return true;
                if (Transforms != null) return true;
                if (XALG != null) return true;
                if (Components != null) return true;
                if (Model != null) return true;
                if (BaseObjectList != null) return true;
                if (RankTemplate != null) return true;
                if (LegendaryMods != null) return true;
                if (IncludeFilters != null) return true;
                if (ExcludeFilters != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                ObjectPaletteDefaults?.Print(sb);
                Transforms?.Print(sb);
                {
                    sb.AppendItem(XALG, "XALG");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(BaseObjectList, "BaseObjectList");
                }
                {
                    sb.AppendItem(RankTemplate, "RankTemplate");
                }
                if (LegendaryMods is {} LegendaryModsItem)
                {
                    sb.AppendLine("LegendaryMods =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LegendaryModsItem.Overall);
                        if (LegendaryModsItem.Specific != null)
                        {
                            foreach (var subItem in LegendaryModsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (IncludeFilters is {} IncludeFiltersItem)
                {
                    sb.AppendLine("IncludeFilters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(IncludeFiltersItem.Overall);
                        if (IncludeFiltersItem.Specific != null)
                        {
                            foreach (var subItem in IncludeFiltersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ExcludeFilters is {} ExcludeFiltersItem)
                {
                    sb.AppendLine("ExcludeFilters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ExcludeFiltersItem.Overall);
                        if (ExcludeFiltersItem.Specific != null)
                        {
                            foreach (var subItem in ExcludeFiltersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.ObjectPaletteDefaults = this.ObjectPaletteDefaults.Combine(rhs.ObjectPaletteDefaults, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.BaseObjectList = this.BaseObjectList.Combine(rhs.BaseObjectList);
                ret.RankTemplate = this.RankTemplate.Combine(rhs.RankTemplate);
                ret.LegendaryMods = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryMod.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LegendaryMods?.Overall, rhs.LegendaryMods?.Overall), Noggog.ExceptionExt.Combine(this.LegendaryMods?.Specific, rhs.LegendaryMods?.Specific));
                ret.IncludeFilters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.IncludeFilters?.Overall, rhs.IncludeFilters?.Overall), Noggog.ExceptionExt.Combine(this.IncludeFilters?.Specific, rhs.IncludeFilters?.Specific));
                ret.ExcludeFilters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LegendaryFilter.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ExcludeFilters?.Overall, rhs.ExcludeFilters?.Overall), Noggog.ExceptionExt.Combine(this.ExcludeFilters?.Specific, rhs.ExcludeFilters?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public ObjectPaletteDefaults.TranslationMask? ObjectPaletteDefaults;
            public Transforms.TranslationMask? Transforms;
            public bool XALG;
            public AComponent.TranslationMask? Components;
            public Model.TranslationMask? Model;
            public bool BaseObjectList;
            public bool RankTemplate;
            public LegendaryMod.TranslationMask? LegendaryMods;
            public LegendaryFilter.TranslationMask? IncludeFilters;
            public LegendaryFilter.TranslationMask? ExcludeFilters;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.XALG = defaultOn;
                this.BaseObjectList = defaultOn;
                this.RankTemplate = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((ObjectPaletteDefaults != null ? ObjectPaletteDefaults.OnOverall : DefaultOn, ObjectPaletteDefaults?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((XALG, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((BaseObjectList, null));
                ret.Add((RankTemplate, null));
                ret.Add((LegendaryMods == null ? DefaultOn : !LegendaryMods.GetCrystal().CopyNothing, LegendaryMods?.GetCrystal()));
                ret.Add((IncludeFilters == null ? DefaultOn : !IncludeFilters.GetCrystal().CopyNothing, IncludeFilters?.GetCrystal()));
                ret.Add((ExcludeFilters == null ? DefaultOn : !ExcludeFilters.GetCrystal().CopyNothing, ExcludeFilters?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LegendaryItem_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LegendaryItemCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LegendaryItemSetterCommon.Instance.RemapLinks(this, mapping);
        public LegendaryItem(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private LegendaryItem(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal LegendaryItem(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LegendaryItem(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public LegendaryItem(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<LegendaryItem>.ToString(this);
        }

        protected override Type LinkType => typeof(ILegendaryItem);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LegendaryItemCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => LegendaryItemSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => LegendaryItemSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => LegendaryItemSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILegendaryItemGetter rhs) return false;
            return ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILegendaryItemGetter? obj)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LegendaryItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LegendaryItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static LegendaryItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LegendaryItem();
            ((LegendaryItemSetterCommon)((ILegendaryItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LegendaryItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LegendaryItemSetterCommon)((ILegendaryItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LegendaryItem GetNew()
        {
            return new LegendaryItem();
        }

    }
    #endregion

    #region Interface
    public partial interface ILegendaryItem :
        IAssetLinkContainer,
        IBaseObject,
        IFormLinkContainer,
        IItem,
        ILegendaryItemGetter,
        ILoquiObjectSetter<ILegendaryItemInternal>,
        IModeled,
        IObjectBoundedOptional,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBoundedOptional
        /// </summary>
        new ObjectBounds? ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new ObjectPaletteDefaults? ObjectPaletteDefaults { get; set; }
        new Transforms? Transforms { get; set; }
        new UInt64? XALG { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new IFormLinkNullable<ILeveledItemGetter> BaseObjectList { get; set; }
        new IFormLinkNullable<ILegendaryItemGetter> RankTemplate { get; set; }
        new ExtendedList<LegendaryMod>? LegendaryMods { get; set; }
        new ExtendedList<LegendaryFilter>? IncludeFilters { get; set; }
        new ExtendedList<LegendaryFilter>? ExcludeFilters { get; set; }
    }

    public partial interface ILegendaryItemInternal :
        IStarfieldMajorRecordInternal,
        ILegendaryItem,
        ILegendaryItemGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.LGDI)]
    public partial interface ILegendaryItemGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IItemGetter,
        ILoquiObject<ILegendaryItemGetter>,
        IMapsToGetter<ILegendaryItemGetter>,
        IModeledGetter,
        IObjectBoundedOptionalGetter
    {
        static new ILoquiRegistration StaticRegistration => LegendaryItem_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedOptionalGetter
        /// </summary>
        IObjectBoundsGetter? ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        IObjectPaletteDefaultsGetter? ObjectPaletteDefaults { get; }
        ITransformsGetter? Transforms { get; }
        UInt64? XALG { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IFormLinkNullableGetter<ILeveledItemGetter> BaseObjectList { get; }
        IFormLinkNullableGetter<ILegendaryItemGetter> RankTemplate { get; }
        IReadOnlyList<ILegendaryModGetter>? LegendaryMods { get; }
        IReadOnlyList<ILegendaryFilterGetter>? IncludeFilters { get; }
        IReadOnlyList<ILegendaryFilterGetter>? ExcludeFilters { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LegendaryItemMixIn
    {
        public static void Clear(this ILegendaryItemInternal item)
        {
            ((LegendaryItemSetterCommon)((ILegendaryItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LegendaryItem.Mask<bool> GetEqualsMask(
            this ILegendaryItemGetter item,
            ILegendaryItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILegendaryItemGetter item,
            string? name = null,
            LegendaryItem.Mask<bool>? printMask = null)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILegendaryItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LegendaryItem.Mask<bool>? printMask = null)
        {
            ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILegendaryItemGetter item,
            ILegendaryItemGetter rhs,
            LegendaryItem.TranslationMask? equalsMask = null)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILegendaryItemInternal lhs,
            ILegendaryItemGetter rhs,
            out LegendaryItem.ErrorMask errorMask,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LegendaryItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILegendaryItemInternal lhs,
            ILegendaryItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LegendaryItem DeepCopy(
            this ILegendaryItemGetter item,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            return ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LegendaryItem DeepCopy(
            this ILegendaryItemGetter item,
            out LegendaryItem.ErrorMask errorMask,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            return ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LegendaryItem DeepCopy(
            this ILegendaryItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LegendaryItem Duplicate(
            this ILegendaryItemGetter item,
            FormKey formKey,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static LegendaryItem Duplicate(
            this ILegendaryItemGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILegendaryItemInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LegendaryItemSetterCommon)((ILegendaryItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum LegendaryItem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        DirtinessScale = 8,
        ObjectPaletteDefaults = 9,
        Transforms = 10,
        XALG = 11,
        Components = 12,
        Model = 13,
        BaseObjectList = 14,
        RankTemplate = 15,
        LegendaryMods = 16,
        IncludeFilters = 17,
        ExcludeFilters = 18,
    }
    #endregion

    #region Registration
    internal partial class LegendaryItem_Registration : ILoquiRegistration
    {
        public static readonly LegendaryItem_Registration Instance = new LegendaryItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(LegendaryItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LegendaryItem.ErrorMask);

        public static readonly Type ClassType = typeof(LegendaryItem);

        public static readonly Type GetterType = typeof(ILegendaryItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILegendaryItem);

        public static readonly Type? InternalSetterType = typeof(ILegendaryItemInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.LegendaryItem";

        public const string Name = "LegendaryItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LGDI;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LGDI);
            var all = RecordCollection.Factory(
                RecordTypes.LGDI,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.OPDS,
                RecordTypes.PTT2,
                RecordTypes.XALG,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.DATA,
                RecordTypes.ANAM,
                RecordTypes.ENAM,
                RecordTypes.BNAM,
                RecordTypes.CNAM,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LegendaryItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LegendaryItemSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly LegendaryItemSetterCommon Instance = new LegendaryItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILegendaryItemInternal item)
        {
            ClearPartial();
            item.ObjectBounds = null;
            item.DirtinessScale = default(Percent);
            item.ObjectPaletteDefaults = null;
            item.Transforms = null;
            item.XALG = default;
            item.Components.Clear();
            item.Model = null;
            item.BaseObjectList.Clear();
            item.RankTemplate.Clear();
            item.LegendaryMods = null;
            item.IncludeFilters = null;
            item.ExcludeFilters = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ILegendaryItemInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILegendaryItemInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILegendaryItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.BaseObjectList.Relink(mapping);
            obj.RankTemplate.Relink(mapping);
            obj.LegendaryMods?.RemapLinks(mapping);
            obj.IncludeFilters?.RemapLinks(mapping);
            obj.ExcludeFilters?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ILegendaryItem obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ILegendaryItem obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILegendaryItemInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILegendaryItemInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LegendaryItemBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LegendaryItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LegendaryItem)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LegendaryItem)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LegendaryItemCommon : StarfieldMajorRecordCommon
    {
        public new static readonly LegendaryItemCommon Instance = new LegendaryItemCommon();

        public LegendaryItem.Mask<bool> GetEqualsMask(
            ILegendaryItemGetter item,
            ILegendaryItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LegendaryItem.Mask<bool>(false);
            ((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILegendaryItemGetter item,
            ILegendaryItemGetter rhs,
            LegendaryItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = EqualsMaskHelper.EqualsHelper(
                item.ObjectBounds,
                rhs.ObjectBounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.ObjectPaletteDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPaletteDefaults,
                rhs.ObjectPaletteDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XALG = item.XALG == rhs.XALG;
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BaseObjectList = item.BaseObjectList.Equals(rhs.BaseObjectList);
            ret.RankTemplate = item.RankTemplate.Equals(rhs.RankTemplate);
            ret.LegendaryMods = item.LegendaryMods.CollectionEqualsHelper(
                rhs.LegendaryMods,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.IncludeFilters = item.IncludeFilters.CollectionEqualsHelper(
                rhs.IncludeFilters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ExcludeFilters = item.ExcludeFilters.CollectionEqualsHelper(
                rhs.ExcludeFilters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILegendaryItemGetter item,
            string? name = null,
            LegendaryItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILegendaryItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LegendaryItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LegendaryItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (LegendaryItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILegendaryItemGetter item,
            StructuredStringBuilder sb,
            LegendaryItem.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ObjectBounds?.Overall ?? true)
                && item.ObjectBounds is {} ObjectBoundsItem)
            {
                ObjectBoundsItem?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.ObjectPaletteDefaults?.Overall ?? true)
                && item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ObjectPaletteDefaultsItem?.Print(sb, "ObjectPaletteDefaults");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendItem(XALGItem, "XALG");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.BaseObjectList ?? true)
            {
                sb.AppendItem(item.BaseObjectList.FormKeyNullable, "BaseObjectList");
            }
            if (printMask?.RankTemplate ?? true)
            {
                sb.AppendItem(item.RankTemplate.FormKeyNullable, "RankTemplate");
            }
            if ((printMask?.LegendaryMods?.Overall ?? true)
                && item.LegendaryMods is {} LegendaryModsItem)
            {
                sb.AppendLine("LegendaryMods =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LegendaryModsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.IncludeFilters?.Overall ?? true)
                && item.IncludeFilters is {} IncludeFiltersItem)
            {
                sb.AppendLine("IncludeFilters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in IncludeFiltersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ExcludeFilters?.Overall ?? true)
                && item.ExcludeFilters is {} ExcludeFiltersItem)
            {
                sb.AppendLine("ExcludeFilters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ExcludeFiltersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static LegendaryItem_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (LegendaryItem_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (LegendaryItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new LegendaryItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LegendaryItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LegendaryItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LegendaryItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LegendaryItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILegendaryItemGetter? lhs,
            ILegendaryItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults, out var lhsObjectPaletteDefaults, out var rhsObjectPaletteDefaults, out var isObjectPaletteDefaultsEqual))
                {
                    if (!((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)lhsObjectPaletteDefaults).CommonInstance()!).Equals(lhsObjectPaletteDefaults, rhsObjectPaletteDefaults, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.ObjectPaletteDefaults))) return false;
                }
                else if (!isObjectPaletteDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.XALG) ?? true))
            {
                if (lhs.XALG != rhs.XALG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.BaseObjectList) ?? true))
            {
                if (!lhs.BaseObjectList.Equals(rhs.BaseObjectList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.RankTemplate) ?? true))
            {
                if (!lhs.RankTemplate.Equals(rhs.RankTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.LegendaryMods) ?? true))
            {
                if (!lhs.LegendaryMods.SequenceEqualNullable(rhs.LegendaryMods, (l, r) => ((LegendaryModCommon)((ILegendaryModGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.LegendaryMods)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.IncludeFilters) ?? true))
            {
                if (!lhs.IncludeFilters.SequenceEqualNullable(rhs.IncludeFilters, (l, r) => ((LegendaryFilterCommon)((ILegendaryFilterGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.IncludeFilters)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ExcludeFilters) ?? true))
            {
                if (!lhs.ExcludeFilters.SequenceEqualNullable(rhs.ExcludeFilters, (l, r) => ((LegendaryFilterCommon)((ILegendaryFilterGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.ExcludeFilters)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILegendaryItemGetter?)lhs,
                rhs: rhs as ILegendaryItemGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILegendaryItemGetter?)lhs,
                rhs: rhs as ILegendaryItemGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILegendaryItemGetter item)
        {
            var hash = new HashCode();
            if (item.ObjectBounds is {} ObjectBoundsitem)
            {
                hash.Add(ObjectBoundsitem);
            }
            hash.Add(item.DirtinessScale);
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsitem)
            {
                hash.Add(ObjectPaletteDefaultsitem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            if (item.XALG is {} XALGitem)
            {
                hash.Add(XALGitem);
            }
            hash.Add(item.Components);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.BaseObjectList);
            hash.Add(item.RankTemplate);
            hash.Add(item.LegendaryMods);
            hash.Add(item.IncludeFilters);
            hash.Add(item.ExcludeFilters);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ILegendaryItemGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILegendaryItemGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LegendaryItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILegendaryItemGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.BaseObjectList, out var BaseObjectListInfo))
            {
                yield return BaseObjectListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.RankTemplate, out var RankTemplateInfo))
            {
                yield return RankTemplateInfo;
            }
            if (obj.LegendaryMods is {} LegendaryModsItem)
            {
                foreach (var item in LegendaryModsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.IncludeFilters is {} IncludeFiltersItem)
            {
                foreach (var item in IncludeFiltersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ExcludeFilters is {} ExcludeFiltersItem)
            {
                foreach (var item in ExcludeFiltersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ILegendaryItemGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public LegendaryItem Duplicate(
            ILegendaryItemGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LegendaryItem(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILegendaryItemGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILegendaryItemGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LegendaryItemSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly LegendaryItemSetterTranslationCommon Instance = new LegendaryItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILegendaryItemInternal item,
            ILegendaryItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILegendaryItem item,
            ILegendaryItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.ObjectBounds);
                try
                {
                    if(rhs.ObjectBounds is {} rhsObjectBounds)
                    {
                        item.ObjectBounds = rhsObjectBounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.ObjectBounds));
                    }
                    else
                    {
                        item.ObjectBounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.ObjectPaletteDefaults);
                try
                {
                    if(rhs.ObjectPaletteDefaults is {} rhsObjectPaletteDefaults)
                    {
                        item.ObjectPaletteDefaults = rhsObjectPaletteDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.ObjectPaletteDefaults));
                    }
                    else
                    {
                        item.ObjectPaletteDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.XALG) ?? true))
            {
                item.XALG = rhs.XALG;
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LegendaryItem_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.BaseObjectList) ?? true))
            {
                item.BaseObjectList.SetTo(rhs.BaseObjectList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.RankTemplate) ?? true))
            {
                item.RankTemplate.SetTo(rhs.RankTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.LegendaryMods) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.LegendaryMods);
                try
                {
                    if ((rhs.LegendaryMods != null))
                    {
                        item.LegendaryMods = 
                            rhs.LegendaryMods
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LegendaryMod>();
                    }
                    else
                    {
                        item.LegendaryMods = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.IncludeFilters) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.IncludeFilters);
                try
                {
                    if ((rhs.IncludeFilters != null))
                    {
                        item.IncludeFilters = 
                            rhs.IncludeFilters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LegendaryFilter>();
                    }
                    else
                    {
                        item.IncludeFilters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LegendaryItem_FieldIndex.ExcludeFilters) ?? true))
            {
                errorMask?.PushIndex((int)LegendaryItem_FieldIndex.ExcludeFilters);
                try
                {
                    if ((rhs.ExcludeFilters != null))
                    {
                        item.ExcludeFilters = 
                            rhs.ExcludeFilters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LegendaryFilter>();
                    }
                    else
                    {
                        item.ExcludeFilters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILegendaryItem item,
            ILegendaryItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILegendaryItemInternal)item,
                rhs: (ILegendaryItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILegendaryItem)item,
                rhs: (ILegendaryItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILegendaryItemInternal)item,
                rhs: (ILegendaryItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILegendaryItem)item,
                rhs: (ILegendaryItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LegendaryItem DeepCopy(
            ILegendaryItemGetter item,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            LegendaryItem ret = (LegendaryItem)((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).GetNew();
            ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LegendaryItem DeepCopy(
            ILegendaryItemGetter item,
            out LegendaryItem.ErrorMask errorMask,
            LegendaryItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LegendaryItem ret = (LegendaryItem)((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).GetNew();
            ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LegendaryItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LegendaryItem DeepCopy(
            ILegendaryItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LegendaryItem ret = (LegendaryItem)((LegendaryItemCommon)((ILegendaryItemGetter)item).CommonInstance()!).GetNew();
            ((LegendaryItemSetterTranslationCommon)((ILegendaryItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class LegendaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LegendaryItem_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LegendaryItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LegendaryItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LegendaryItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LegendaryItemSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LegendaryItemBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LegendaryItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILegendaryItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.ObjectBounds is {} ObjectBoundsItem)
            {
                ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ((ObjectPaletteDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPaletteDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPaletteDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, RecordTypes.DATA)) { }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseObjectList,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RankTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILegendaryModGetter>.Instance.Write(
                writer: writer,
                items: item.LegendaryMods,
                recordType: translationParams.ConvertToCustom(RecordTypes.BNAM),
                transl: (MutagenWriter subWriter, ILegendaryModGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LegendaryModBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILegendaryFilterGetter>.Instance.Write(
                writer: writer,
                items: item.IncludeFilters,
                recordType: translationParams.ConvertToCustom(RecordTypes.CNAM),
                transl: (MutagenWriter subWriter, ILegendaryFilterGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LegendaryFilterBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILegendaryFilterGetter>.Instance.Write(
                writer: writer,
                items: item.ExcludeFilters,
                recordType: translationParams.ConvertToCustom(RecordTypes.DNAM),
                transl: (MutagenWriter subWriter, ILegendaryFilterGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LegendaryFilterBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILegendaryItemGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LGDI,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILegendaryItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILegendaryItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILegendaryItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LegendaryItemBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly LegendaryItemBinaryCreateTranslation Instance = new LegendaryItemBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LGDI;
        public static ParseResult FillBinaryRecordTypes(
            ILegendaryItemInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)LegendaryItem_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)LegendaryItem_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPaletteDefaults = Mutagen.Bethesda.Starfield.ObjectPaletteDefaults.CreateFromBinary(frame: frame);
                    return (int)LegendaryItem_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)LegendaryItem_FieldIndex.Transforms;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = frame.ReadUInt64();
                    return (int)LegendaryItem_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)LegendaryItem_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LegendaryItem_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseObjectList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)LegendaryItem_FieldIndex.BaseObjectList;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RankTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)LegendaryItem_FieldIndex.RankTemplate;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LegendaryMods = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LegendaryMod>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LegendaryMod.TryCreateFromBinary)
                        .CastExtendedList<LegendaryMod>();
                    return (int)LegendaryItem_FieldIndex.LegendaryMods;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IncludeFilters = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LegendaryFilter>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LegendaryFilter.TryCreateFromBinary)
                        .CastExtendedList<LegendaryFilter>();
                    return (int)LegendaryItem_FieldIndex.IncludeFilters;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ExcludeFilters = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LegendaryFilter>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LegendaryFilter.TryCreateFromBinary)
                        .CastExtendedList<LegendaryFilter>();
                    return (int)LegendaryItem_FieldIndex.ExcludeFilters;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LegendaryItemBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LegendaryItemBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ILegendaryItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LegendaryItem_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LegendaryItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LegendaryItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LegendaryItemSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LegendaryItemCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LegendaryItemCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LegendaryItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LegendaryItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILegendaryItem);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        public IObjectBoundsGetter? ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        private RangeInt32? _ObjectPaletteDefaultsLocation;
        public IObjectPaletteDefaultsGetter? ObjectPaletteDefaults => _ObjectPaletteDefaultsLocation.HasValue ? ObjectPaletteDefaultsBinaryOverlay.ObjectPaletteDefaultsFactory(_recordData.Slice(_ObjectPaletteDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        #region XALG
        private int? _XALGLocation;
        public UInt64? XALG => _XALGLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        public IModelGetter? Model { get; private set; }
        #region BaseObjectList
        private int? _BaseObjectListLocation;
        public IFormLinkNullableGetter<ILeveledItemGetter> BaseObjectList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILeveledItemGetter>(_package, _recordData, _BaseObjectListLocation);
        #endregion
        #region RankTemplate
        private int? _RankTemplateLocation;
        public IFormLinkNullableGetter<ILegendaryItemGetter> RankTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILegendaryItemGetter>(_package, _recordData, _RankTemplateLocation);
        #endregion
        public IReadOnlyList<ILegendaryModGetter>? LegendaryMods { get; private set; }
        public IReadOnlyList<ILegendaryFilterGetter>? IncludeFilters { get; private set; }
        public IReadOnlyList<ILegendaryFilterGetter>? ExcludeFilters { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LegendaryItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILegendaryItemGetter LegendaryItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LegendaryItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILegendaryItemGetter LegendaryItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LegendaryItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LegendaryItem_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)LegendaryItem_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPaletteDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LegendaryItem_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LegendaryItem_FieldIndex.Transforms;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)LegendaryItem_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)LegendaryItem_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LegendaryItem_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.ANAM:
                {
                    _BaseObjectListLocation = (stream.Position - offset);
                    return (int)LegendaryItem_FieldIndex.BaseObjectList;
                }
                case RecordTypeInts.ENAM:
                {
                    _RankTemplateLocation = (stream.Position - offset);
                    return (int)LegendaryItem_FieldIndex.RankTemplate;
                }
                case RecordTypeInts.BNAM:
                {
                    this.LegendaryMods = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILegendaryModGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => LegendaryModBinaryOverlay.LegendaryModFactory(s, p));
                    return (int)LegendaryItem_FieldIndex.LegendaryMods;
                }
                case RecordTypeInts.CNAM:
                {
                    this.IncludeFilters = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILegendaryFilterGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LegendaryFilterBinaryOverlay.LegendaryFilterFactory(s, p));
                    return (int)LegendaryItem_FieldIndex.IncludeFilters;
                }
                case RecordTypeInts.DNAM:
                {
                    this.ExcludeFilters = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILegendaryFilterGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LegendaryFilterBinaryOverlay.LegendaryFilterFactory(s, p));
                    return (int)LegendaryItem_FieldIndex.ExcludeFilters;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LegendaryItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<LegendaryItem>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILegendaryItemGetter rhs) return false;
            return ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILegendaryItemGetter? obj)
        {
            return ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LegendaryItemCommon)((ILegendaryItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

