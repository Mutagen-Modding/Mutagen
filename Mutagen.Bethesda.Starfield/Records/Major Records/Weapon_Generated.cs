/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Weapon :
        StarfieldMajorRecord,
        IEquatable<IWeaponGetter>,
        ILoquiObjectSetter<Weapon>,
        IWeaponInternal
    {
        #region Ctor
        protected Weapon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IWeaponGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IWeaponGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPaletteDefaults? _ObjectPaletteDefaults;
        public ObjectPaletteDefaults? ObjectPaletteDefaults
        {
            get => _ObjectPaletteDefaults;
            set => _ObjectPaletteDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPaletteDefaultsGetter? IWeaponGetter.ObjectPaletteDefaults => this.ObjectPaletteDefaults;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? IWeaponGetter.Transforms => this.Transforms;
        #endregion
        #region XALG
        public UInt64? XALG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? IWeaponGetter.XALG => this.XALG;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IWeaponGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWeaponGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeaponGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region ObjectEffect
        private readonly IFormLinkNullable<IObjectEffectGetter> _ObjectEffect = new FormLinkNullable<IObjectEffectGetter>();
        public IFormLinkNullable<IObjectEffectGetter> ObjectEffect
        {
            get => _ObjectEffect;
            set => _ObjectEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IObjectEffectGetter> IWeaponGetter.ObjectEffect => this.ObjectEffect;
        #endregion
        #region EnchantmentAmount
        public UInt16? EnchantmentAmount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IWeaponGetter.EnchantmentAmount => this.EnchantmentAmount;
        #endregion
        #region EquipmentType
        private readonly IFormLinkNullable<IEquipTypeGetter> _EquipmentType = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> EquipmentType
        {
            get => _EquipmentType;
            set => _EquipmentType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IWeaponGetter.EquipmentType => this.EquipmentType;
        #endregion
        #region BlockBashImpactDataSet
        private readonly IFormLinkNullable<IImpactDataSetGetter> _BlockBashImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>();
        public IFormLinkNullable<IImpactDataSetGetter> BlockBashImpactDataSet
        {
            get => _BlockBashImpactDataSet;
            set => _BlockBashImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IWeaponGetter.BlockBashImpactDataSet => this.BlockBashImpactDataSet;
        #endregion
        #region AlternateBlockMaterial
        private readonly IFormLinkNullable<IMaterialTypeGetter> _AlternateBlockMaterial = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial
        {
            get => _AlternateBlockMaterial;
            set => _AlternateBlockMaterial.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IWeaponGetter.AlternateBlockMaterial => this.AlternateBlockMaterial;
        #endregion
        #region PickupSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _PickupSound;
        public SoundReference? PickupSound
        {
            get => _PickupSound;
            set => _PickupSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IWeaponGetter.PickupSound => this.PickupSound;
        #endregion
        #region DropdownSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _DropdownSound;
        public SoundReference? DropdownSound
        {
            get => _DropdownSound;
            set => _DropdownSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IWeaponGetter.DropdownSound => this.DropdownSound;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IWeaponGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWeaponGetter.Description => this.Description;
        #endregion
        #region InstanceNaming
        private readonly IFormLinkNullable<IInstanceNamingRulesGetter> _InstanceNaming = new FormLinkNullable<IInstanceNamingRulesGetter>();
        public IFormLinkNullable<IInstanceNamingRulesGetter> InstanceNaming
        {
            get => _InstanceNaming;
            set => _InstanceNaming.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IInstanceNamingRulesGetter> IWeaponGetter.InstanceNaming => this.InstanceNaming;
        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IWeaponGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region ObjectTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplate<Weapon.Property>>? _ObjectTemplates;
        public ExtendedList<ObjectTemplate<Weapon.Property>>? ObjectTemplates
        {
            get => this._ObjectTemplates;
            set => this._ObjectTemplates = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateGetter<Weapon.Property>>? IWeaponGetter.ObjectTemplates => _ObjectTemplates;
        #endregion

        #endregion
        #region EmbeddedWeaponMod
        private readonly IFormLinkNullable<IAObjectModificationGetter> _EmbeddedWeaponMod = new FormLinkNullable<IAObjectModificationGetter>();
        public IFormLinkNullable<IAObjectModificationGetter> EmbeddedWeaponMod
        {
            get => _EmbeddedWeaponMod;
            set => _EmbeddedWeaponMod.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAObjectModificationGetter> IWeaponGetter.EmbeddedWeaponMod => this.EmbeddedWeaponMod;
        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BNAM;
        public MemorySlice<Byte>? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeaponGetter.BNAM => this.BNAM;
        #endregion
        #region SightedTransitionSeconds
        public Single SightedTransitionSeconds { get; set; } = default(Single);
        #endregion
        #region AimDownSightTemplate
        private readonly IFormLink<IZoomGetter> _AimDownSightTemplate = new FormLink<IZoomGetter>();
        public IFormLink<IZoomGetter> AimDownSightTemplate
        {
            get => _AimDownSightTemplate;
            set => _AimDownSightTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IZoomGetter> IWeaponGetter.AimDownSightTemplate => this.AimDownSightTemplate;
        #endregion
        #region AimModel
        private readonly IFormLink<IAimModelGetter> _AimModel = new FormLink<IAimModelGetter>();
        public IFormLink<IAimModelGetter> AimModel
        {
            get => _AimModel;
            set => _AimModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IAimModelGetter> IWeaponGetter.AimModel => this.AimModel;
        #endregion
        #region AccuracyBonus
        public Byte AccuracyBonus { get; set; } = default(Byte);
        #endregion
        #region HasScope
        public Boolean HasScope { get; set; } = default(Boolean);
        #endregion
        #region AimAssistTemplate
        private readonly IFormLink<IAimAssistModelGetter> _AimAssistTemplate = new FormLink<IAimAssistModelGetter>();
        public IFormLink<IAimAssistModelGetter> AimAssistTemplate
        {
            get => _AimAssistTemplate;
            set => _AimAssistTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IAimAssistModelGetter> IWeaponGetter.AimAssistTemplate => this.AimAssistTemplate;
        #endregion
        #region AimOpticalSightModel
        private readonly IFormLink<IAimOpticalSightMarkerGetter> _AimOpticalSightModel = new FormLink<IAimOpticalSightMarkerGetter>();
        public IFormLink<IAimOpticalSightMarkerGetter> AimOpticalSightModel
        {
            get => _AimOpticalSightModel;
            set => _AimOpticalSightModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IAimOpticalSightMarkerGetter> IWeaponGetter.AimOpticalSightModel => this.AimOpticalSightModel;
        #endregion
        #region MeleeAimAssistModel
        private readonly IFormLink<IMeleeAimAssistModelGetter> _MeleeAimAssistModel = new FormLink<IMeleeAimAssistModelGetter>();
        public IFormLink<IMeleeAimAssistModelGetter> MeleeAimAssistModel
        {
            get => _MeleeAimAssistModel;
            set => _MeleeAimAssistModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IMeleeAimAssistModelGetter> IWeaponGetter.MeleeAimAssistModel => this.MeleeAimAssistModel;
        #endregion
        #region WAIMUnknown1
        public Byte WAIMUnknown1 { get; set; } = default(Byte);
        #endregion
        #region WAIMUnknown2
        public Byte WAIMUnknown2 { get; set; } = default(Byte);
        #endregion
        #region EnableMarkingTargets
        public Boolean EnableMarkingTargets { get; set; } = default(Boolean);
        #endregion
        #region ReticleType
        public UInt32 ReticleType { get; set; } = default(UInt32);
        #endregion
        #region WAIMUnknown3
        public Byte WAIMUnknown3 { get; set; } = default(Byte);
        #endregion
        #region WAIMUnknown4
        public Byte WAIMUnknown4 { get; set; } = default(Byte);
        #endregion
        #region AmmoType
        private readonly IFormLink<IAmmunitionGetter> _AmmoType = new FormLink<IAmmunitionGetter>();
        public IFormLink<IAmmunitionGetter> AmmoType
        {
            get => _AmmoType;
            set => _AmmoType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IAmmunitionGetter> IWeaponGetter.AmmoType => this.AmmoType;
        #endregion
        #region AmmoCapacity
        public UInt32 AmmoCapacity { get; set; } = default(UInt32);
        #endregion
        #region AmmoList
        private readonly IFormLink<ILeveledItemGetter> _AmmoList = new FormLink<ILeveledItemGetter>();
        public IFormLink<ILeveledItemGetter> AmmoList
        {
            get => _AmmoList;
            set => _AmmoList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILeveledItemGetter> IWeaponGetter.AmmoList => this.AmmoList;
        #endregion
        #region OverrideProjectile
        private readonly IFormLink<IProjectileGetter> _OverrideProjectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> OverrideProjectile
        {
            get => _OverrideProjectile;
            set => _OverrideProjectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IWeaponGetter.OverrideProjectile => this.OverrideProjectile;
        #endregion
        #region OverrideShellCasing
        private readonly IFormLink<IArtObjectGetter> _OverrideShellCasing = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> OverrideShellCasing
        {
            get => _OverrideShellCasing;
            set => _OverrideShellCasing.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IWeaponGetter.OverrideShellCasing => this.OverrideShellCasing;
        #endregion
        #region ProjectilesCount
        public Byte ProjectilesCount { get; set; } = default(Byte);
        #endregion
        #region NpcsUseAmmo
        public Boolean NpcsUseAmmo { get; set; } = default(Boolean);
        #endregion
        #region WAM2Unknown1
        public Byte WAM2Unknown1 { get; set; } = default(Byte);
        #endregion
        #region WAMM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WAMM;
        public MemorySlice<Byte>? WAMM
        {
            get => this._WAMM;
            set => this._WAMM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeaponGetter.WAMM => this.WAMM;
        #endregion
        #region MeleeOrCreature
        public SoundReference MeleeOrCreature { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.MeleeOrCreature => MeleeOrCreature;
        #endregion
        #region PrimedExplosive
        public SoundReference PrimedExplosive { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.PrimedExplosive => PrimedExplosive;
        #endregion
        #region DryFire
        public SoundReference DryFire { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.DryFire => DryFire;
        #endregion
        #region Idle
        public SoundReference Idle { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.Idle => Idle;
        #endregion
        #region Equip
        public SoundReference Equip { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.Equip => Equip;
        #endregion
        #region Unequip
        public SoundReference Unequip { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.Unequip => Unequip;
        #endregion
        #region FastEquip
        public SoundReference FastEquip { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IWeaponGetter.FastEquip => FastEquip;
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default(SoundLevel);
        #endregion
        #region WAUDUnknown2
        public Int32 WAUDUnknown2 { get; set; } = default(Int32);
        #endregion
        #region WTUR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WTUR;
        public MemorySlice<Byte>? WTUR
        {
            get => this._WTUR;
            set => this._WTUR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeaponGetter.WTUR => this.WTUR;
        #endregion
        #region ChargeFullPowerSeconds
        public Single ChargeFullPowerSeconds { get; set; } = default(Single);
        #endregion
        #region ChargeMinPowerPerShot
        public Single ChargeMinPowerPerShot { get; set; } = default(Single);
        #endregion
        #region ChargeCritBonus
        public Single ChargeCritBonus { get; set; } = default(Single);
        #endregion
        #region ChargeHoldInput
        public Boolean ChargeHoldInput { get; set; } = default(Boolean);
        #endregion
        #region ChargingAttack
        public Boolean ChargingAttack { get; set; } = default(Boolean);
        #endregion
        #region AttackDamage
        public Single AttackDamage { get; set; } = default(Single);
        #endregion
        #region MinRange
        public Single MinRange { get; set; } = default(Single);
        #endregion
        #region MaxRange
        public Single MaxRange { get; set; } = default(Single);
        #endregion
        #region OutOfRangeDamageMult
        public Single OutOfRangeDamageMult { get; set; } = default(Single);
        #endregion
        #region CritDamageMult
        public Single CritDamageMult { get; set; } = default(Single);
        #endregion
        #region CriticalHitSpell
        private readonly IFormLink<ISpellGetter> _CriticalHitSpell = new FormLink<ISpellGetter>();
        public IFormLink<ISpellGetter> CriticalHitSpell
        {
            get => _CriticalHitSpell;
            set => _CriticalHitSpell.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISpellGetter> IWeaponGetter.CriticalHitSpell => this.CriticalHitSpell;
        #endregion
        #region CritEffectOnDeathOnly
        public Boolean CritEffectOnDeathOnly { get; set; } = default(Boolean);
        #endregion
        #region HitBehavior
        public HitBehavior HitBehavior { get; set; } = default(HitBehavior);
        #endregion
        #region Resistance
        private readonly IFormLink<IActorValueInformationGetter> _Resistance = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> Resistance
        {
            get => _Resistance;
            set => _Resistance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IWeaponGetter.Resistance => this.Resistance;
        #endregion
        #region Skill
        private readonly IFormLink<IActorValueInformationGetter> _Skill = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> Skill
        {
            get => _Skill;
            set => _Skill.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IWeaponGetter.Skill => this.Skill;
        #endregion
        #region WDMGUnknown4
        public Single WDMGUnknown4 { get; set; } = default(Single);
        #endregion
        #region WDMGUnknown5
        public Single WDMGUnknown5 { get; set; } = default(Single);
        #endregion
        #region WDMGUnknown6
        public Single WDMGUnknown6 { get; set; } = default(Single);
        #endregion
        #region WDMGUnknown7
        public Single WDMGUnknown7 { get; set; } = default(Single);
        #endregion
        #region WDMGUnknown8
        public Single WDMGUnknown8 { get; set; } = default(Single);
        #endregion
        #region WDMGUnknown9
        public Single WDMGUnknown9 { get; set; } = default(Single);
        #endregion
        #region CritChanceIncMult
        public Single CritChanceIncMult { get; set; } = default(Single);
        #endregion
        #region DamageTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeaponDamageType>? _DamageTypes;
        public ExtendedList<WeaponDamageType>? DamageTypes
        {
            get => this._DamageTypes;
            set => this._DamageTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeaponDamageTypeGetter>? IWeaponGetter.DamageTypes => _DamageTypes;
        #endregion

        #endregion
        #region FiringType
        public Weapon.FiringTypeEnum FiringType { get; set; } = default(Weapon.FiringTypeEnum);
        #endregion
        #region BurstCount
        public Byte BurstCount { get; set; } = default(Byte);
        #endregion
        #region RepeatableFire
        public Boolean RepeatableFire { get; set; } = default(Boolean);
        #endregion
        #region AttackSeconds
        public Single AttackSeconds { get; set; } = default(Single);
        #endregion
        #region FireSeconds
        public Single FireSeconds { get; set; } = default(Single);
        #endregion
        #region AttackDelaySeconds
        public Single AttackDelaySeconds { get; set; } = default(Single);
        #endregion
        #region BoltChargeSeconds
        public Single BoltChargeSeconds { get; set; } = default(Single);
        #endregion
        #region BoltAction
        public Boolean BoltAction { get; set; } = default(Boolean);
        #endregion
        #region DisableShellCaseEject
        public Boolean DisableShellCaseEject { get; set; } = default(Boolean);
        #endregion
        #region ShotsPerSecond
        public Single ShotsPerSecond { get; set; } = default(Single);
        #endregion
        #region WFIRUnknown7
        public Single WFIRUnknown7 { get; set; } = default(Single);
        #endregion
        #region OverrideRateOfFire
        public Boolean OverrideRateOfFire { get; set; } = default(Boolean);
        #endregion
        #region TriggerThresholdPrimaryTrigger
        public Single TriggerThresholdPrimaryTrigger { get; set; } = default(Single);
        #endregion
        #region WFIRUnknown10
        public Byte WFIRUnknown10 { get; set; } = default(Byte);
        #endregion
        #region TriggerThresholdSecondStage
        public Single TriggerThresholdSecondStage { get; set; } = default(Single);
        #endregion
        #region HasStagedTrigger
        public Boolean HasStagedTrigger { get; set; } = default(Boolean);
        #endregion
        #region HasDualTrigger
        public Boolean HasDualTrigger { get; set; } = default(Boolean);
        #endregion
        #region BurstDelaySeconds
        public Single BurstDelaySeconds { get; set; } = default(Single);
        #endregion
        #region NonPlayable
        public Boolean NonPlayable { get; set; } = default(Boolean);
        #endregion
        #region PlayerOnly
        public Boolean PlayerOnly { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown1
        public Boolean WFLGUnknown1 { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown2
        public Boolean WFLGUnknown2 { get; set; } = default(Boolean);
        #endregion
        #region CannotDrop
        public Boolean CannotDrop { get; set; } = default(Boolean);
        #endregion
        #region MinorCrime
        public Boolean MinorCrime { get; set; } = default(Boolean);
        #endregion
        #region NonHostile
        public Boolean NonHostile { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown3
        public Boolean WFLGUnknown3 { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown4
        public Boolean WFLGUnknown4 { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown5
        public Boolean WFLGUnknown5 { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown6
        public Boolean WFLGUnknown6 { get; set; } = default(Boolean);
        #endregion
        #region WFLGUnknown7
        public Boolean WFLGUnknown7 { get; set; } = default(Boolean);
        #endregion
        #region WGENUnknown1
        public UInt32 WGENUnknown1 { get; set; } = default(UInt32);
        #endregion
        #region BaseWeight
        public Single BaseWeight { get; set; } = default(Single);
        #endregion
        #region BaseValue
        public UInt32 BaseValue { get; set; } = default(UInt32);
        #endregion
        #region BaseSpeed
        public Single BaseSpeed { get; set; } = default(Single);
        #endregion
        #region AttackOxygenCost
        public Single AttackOxygenCost { get; set; } = default(Single);
        #endregion
        #region WeaponBarrel
        private readonly IFormLink<IWeaponBarrelModelGetter> _WeaponBarrel = new FormLink<IWeaponBarrelModelGetter>();
        public IFormLink<IWeaponBarrelModelGetter> WeaponBarrel
        {
            get => _WeaponBarrel;
            set => _WeaponBarrel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IWeaponBarrelModelGetter> IWeaponGetter.WeaponBarrel => this.WeaponBarrel;
        #endregion
        #region General
        public TranslatedString? General { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWeaponGetter.General => this.General;
        #endregion
        #region WMELUnknown1
        public Byte WMELUnknown1 { get; set; } = default(Byte);
        #endregion
        #region MeleeBashDamage
        public Single MeleeBashDamage { get; set; } = default(Single);
        #endregion
        #region MeleeReach
        public Single MeleeReach { get; set; } = default(Single);
        #endregion
        #region MeleeStagger
        public Stagger MeleeStagger { get; set; } = default(Stagger);
        #endregion
        #region Power
        private readonly IFormLink<IActorValueInformationGetter> _Power = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> Power
        {
            get => _Power;
            set => _Power.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IWeaponGetter.Power => this.Power;
        #endregion
        #region PowerRechargeTime
        public Single PowerRechargeTime { get; set; } = default(Single);
        #endregion
        #region PowerRechargeDelay
        public Single PowerRechargeDelay { get; set; } = default(Single);
        #endregion
        #region ConsumeAmmo
        public Boolean ConsumeAmmo { get; set; } = default(Boolean);
        #endregion
        #region PowerBonus
        private readonly IFormLink<IActorValueInformationGetter> _PowerBonus = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> PowerBonus
        {
            get => _PowerBonus;
            set => _PowerBonus.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IWeaponGetter.PowerBonus => this.PowerBonus;
        #endregion
        #region UsePower
        public Boolean UsePower { get; set; } = default(Boolean);
        #endregion
        #region QNAMUnknown1
        public Byte QNAMUnknown1 { get; set; } = default(Byte);
        #endregion
        #region QNAMUnknown2
        public Single QNAMUnknown2 { get; set; } = default(Single);
        #endregion
        #region QNAMUnknown3
        public Byte QNAMUnknown3 { get; set; } = default(Byte);
        #endregion
        #region QNAMUnknown4
        private readonly IFormLink<ICurveTableGetter> _QNAMUnknown4 = new FormLink<ICurveTableGetter>();
        public IFormLink<ICurveTableGetter> QNAMUnknown4
        {
            get => _QNAMUnknown4;
            set => _QNAMUnknown4.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICurveTableGetter> IWeaponGetter.QNAMUnknown4 => this.QNAMUnknown4;
        #endregion
        #region QNAMUnknown5
        public Single QNAMUnknown5 { get; set; } = default(Single);
        #endregion
        #region PowerConsumption
        private readonly IFormLink<ICurveTableGetter> _PowerConsumption = new FormLink<ICurveTableGetter>();
        public IFormLink<ICurveTableGetter> PowerConsumption
        {
            get => _PowerConsumption;
            set => _PowerConsumption.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICurveTableGetter> IWeaponGetter.PowerConsumption => this.PowerConsumption;
        #endregion
        #region WRLOUnknown1
        public Single WRLOUnknown1 { get; set; } = default(Single);
        #endregion
        #region ReloadSpeed
        public Single ReloadSpeed { get; set; } = default(Single);
        #endregion
        #region ReloadCharging
        public Boolean ReloadCharging { get; set; } = default(Boolean);
        #endregion
        #region ReloadSingle
        public Boolean ReloadSingle { get; set; } = default(Boolean);
        #endregion
        #region WRUM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WRUM;
        public MemorySlice<Byte>? WRUM
        {
            get => this._WRUM;
            set => this._WRUM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeaponGetter.WRUM => this.WRUM;
        #endregion
        #region ApertureValueMin
        public Single ApertureValueMin { get; set; } = default(Single);
        #endregion
        #region ApertureValueMax
        public Single ApertureValueMax { get; set; } = default(Single);
        #endregion
        #region ApertureInputMin
        public Single ApertureInputMin { get; set; } = default(Single);
        #endregion
        #region ApertureInputMax
        public Single ApertureInputMax { get; set; } = default(Single);
        #endregion
        #region ApertureAcceleration
        public Single ApertureAcceleration { get; set; } = default(Single);
        #endregion
        #region ApertureDeceleration
        public Single ApertureDeceleration { get; set; } = default(Single);
        #endregion
        #region DistanceValueMin
        public Single DistanceValueMin { get; set; } = default(Single);
        #endregion
        #region DistanceValueMax
        public Single DistanceValueMax { get; set; } = default(Single);
        #endregion
        #region DistanceInputMin
        public Single DistanceInputMin { get; set; } = default(Single);
        #endregion
        #region DistanceInputMax
        public Single DistanceInputMax { get; set; } = default(Single);
        #endregion
        #region DistanceAcceleration
        public Single DistanceAcceleration { get; set; } = default(Single);
        #endregion
        #region DistanceDeceleration
        public Single DistanceDeceleration { get; set; } = default(Single);
        #endregion
        #region UseVariableRange
        public Boolean UseVariableRange { get; set; } = default(Boolean);
        #endregion
        #region FirstPersonModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FirstPersonModel? _FirstPersonModel;
        public FirstPersonModel? FirstPersonModel
        {
            get => _FirstPersonModel;
            set => _FirstPersonModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFirstPersonModelGetter? IWeaponGetter.FirstPersonModel => this.FirstPersonModel;
        #endregion
        #region WVISUnknown1
        public UInt32 WVISUnknown1 { get; set; } = default(UInt32);
        #endregion
        #region WVISUnknown2
        public UInt32 WVISUnknown2 { get; set; } = default(UInt32);
        #endregion
        #region WVISUnknown3
        public UInt32 WVISUnknown3 { get; set; } = default(UInt32);
        #endregion
        #region ImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IWeaponGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region ColorRemappingIndex
        public Single ColorRemappingIndex { get; set; } = default(Single);
        #endregion
        #region ImageSpaceAdapter
        private readonly IFormLink<IImageSpaceAdapterGetter> _ImageSpaceAdapter = new FormLink<IImageSpaceAdapterGetter>();
        public IFormLink<IImageSpaceAdapterGetter> ImageSpaceAdapter
        {
            get => _ImageSpaceAdapter;
            set => _ImageSpaceAdapter.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImageSpaceAdapterGetter> IWeaponGetter.ImageSpaceAdapter => this.ImageSpaceAdapter;
        #endregion
        #region WTRMUnknown1
        public Single WTRMUnknown1 { get; set; } = default(Single);
        #endregion
        #region WTRMUnknown2
        public Byte WTRMUnknown2 { get; set; } = default(Byte);
        #endregion
        #region WTRMUnknown3
        public Single WTRMUnknown3 { get; set; } = default(Single);
        #endregion
        #region WTRMUnknown4
        public Single WTRMUnknown4 { get; set; } = default(Single);
        #endregion
        #region WTRMUnknown5
        public Single WTRMUnknown5 { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(initialValue, new ObjectPaletteDefaults.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.XALG = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.ObjectEffect = initialValue;
                this.EnchantmentAmount = initialValue;
                this.EquipmentType = initialValue;
                this.BlockBashImpactDataSet = initialValue;
                this.AlternateBlockMaterial = initialValue;
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = initialValue;
                this.InstanceNaming = initialValue;
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.EmbeddedWeaponMod = initialValue;
                this.BNAM = initialValue;
                this.SightedTransitionSeconds = initialValue;
                this.AimDownSightTemplate = initialValue;
                this.AimModel = initialValue;
                this.AccuracyBonus = initialValue;
                this.HasScope = initialValue;
                this.AimAssistTemplate = initialValue;
                this.AimOpticalSightModel = initialValue;
                this.MeleeAimAssistModel = initialValue;
                this.WAIMUnknown1 = initialValue;
                this.WAIMUnknown2 = initialValue;
                this.EnableMarkingTargets = initialValue;
                this.ReticleType = initialValue;
                this.WAIMUnknown3 = initialValue;
                this.WAIMUnknown4 = initialValue;
                this.AmmoType = initialValue;
                this.AmmoCapacity = initialValue;
                this.AmmoList = initialValue;
                this.OverrideProjectile = initialValue;
                this.OverrideShellCasing = initialValue;
                this.ProjectilesCount = initialValue;
                this.NpcsUseAmmo = initialValue;
                this.WAM2Unknown1 = initialValue;
                this.WAMM = initialValue;
                this.MeleeOrCreature = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.PrimedExplosive = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DryFire = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Idle = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Equip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Unequip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.FastEquip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.SoundLevel = initialValue;
                this.WAUDUnknown2 = initialValue;
                this.WTUR = initialValue;
                this.ChargeFullPowerSeconds = initialValue;
                this.ChargeMinPowerPerShot = initialValue;
                this.ChargeCritBonus = initialValue;
                this.ChargeHoldInput = initialValue;
                this.ChargingAttack = initialValue;
                this.AttackDamage = initialValue;
                this.MinRange = initialValue;
                this.MaxRange = initialValue;
                this.OutOfRangeDamageMult = initialValue;
                this.CritDamageMult = initialValue;
                this.CriticalHitSpell = initialValue;
                this.CritEffectOnDeathOnly = initialValue;
                this.HitBehavior = initialValue;
                this.Resistance = initialValue;
                this.Skill = initialValue;
                this.WDMGUnknown4 = initialValue;
                this.WDMGUnknown5 = initialValue;
                this.WDMGUnknown6 = initialValue;
                this.WDMGUnknown7 = initialValue;
                this.WDMGUnknown8 = initialValue;
                this.WDMGUnknown9 = initialValue;
                this.CritChanceIncMult = initialValue;
                this.DamageTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeaponDamageType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeaponDamageType.Mask<TItem>?>>());
                this.FiringType = initialValue;
                this.BurstCount = initialValue;
                this.RepeatableFire = initialValue;
                this.AttackSeconds = initialValue;
                this.FireSeconds = initialValue;
                this.AttackDelaySeconds = initialValue;
                this.BoltChargeSeconds = initialValue;
                this.BoltAction = initialValue;
                this.DisableShellCaseEject = initialValue;
                this.ShotsPerSecond = initialValue;
                this.WFIRUnknown7 = initialValue;
                this.OverrideRateOfFire = initialValue;
                this.TriggerThresholdPrimaryTrigger = initialValue;
                this.WFIRUnknown10 = initialValue;
                this.TriggerThresholdSecondStage = initialValue;
                this.HasStagedTrigger = initialValue;
                this.HasDualTrigger = initialValue;
                this.BurstDelaySeconds = initialValue;
                this.NonPlayable = initialValue;
                this.PlayerOnly = initialValue;
                this.WFLGUnknown1 = initialValue;
                this.WFLGUnknown2 = initialValue;
                this.CannotDrop = initialValue;
                this.MinorCrime = initialValue;
                this.NonHostile = initialValue;
                this.WFLGUnknown3 = initialValue;
                this.WFLGUnknown4 = initialValue;
                this.WFLGUnknown5 = initialValue;
                this.WFLGUnknown6 = initialValue;
                this.WFLGUnknown7 = initialValue;
                this.WGENUnknown1 = initialValue;
                this.BaseWeight = initialValue;
                this.BaseValue = initialValue;
                this.BaseSpeed = initialValue;
                this.AttackOxygenCost = initialValue;
                this.WeaponBarrel = initialValue;
                this.General = initialValue;
                this.WMELUnknown1 = initialValue;
                this.MeleeBashDamage = initialValue;
                this.MeleeReach = initialValue;
                this.MeleeStagger = initialValue;
                this.Power = initialValue;
                this.PowerRechargeTime = initialValue;
                this.PowerRechargeDelay = initialValue;
                this.ConsumeAmmo = initialValue;
                this.PowerBonus = initialValue;
                this.UsePower = initialValue;
                this.QNAMUnknown1 = initialValue;
                this.QNAMUnknown2 = initialValue;
                this.QNAMUnknown3 = initialValue;
                this.QNAMUnknown4 = initialValue;
                this.QNAMUnknown5 = initialValue;
                this.PowerConsumption = initialValue;
                this.WRLOUnknown1 = initialValue;
                this.ReloadSpeed = initialValue;
                this.ReloadCharging = initialValue;
                this.ReloadSingle = initialValue;
                this.WRUM = initialValue;
                this.ApertureValueMin = initialValue;
                this.ApertureValueMax = initialValue;
                this.ApertureInputMin = initialValue;
                this.ApertureInputMax = initialValue;
                this.ApertureAcceleration = initialValue;
                this.ApertureDeceleration = initialValue;
                this.DistanceValueMin = initialValue;
                this.DistanceValueMax = initialValue;
                this.DistanceInputMin = initialValue;
                this.DistanceInputMax = initialValue;
                this.DistanceAcceleration = initialValue;
                this.DistanceDeceleration = initialValue;
                this.UseVariableRange = initialValue;
                this.FirstPersonModel = new MaskItem<TItem, FirstPersonModel.Mask<TItem>?>(initialValue, new FirstPersonModel.Mask<TItem>(initialValue));
                this.WVISUnknown1 = initialValue;
                this.WVISUnknown2 = initialValue;
                this.WVISUnknown3 = initialValue;
                this.ImpactDataSet = initialValue;
                this.ColorRemappingIndex = initialValue;
                this.ImageSpaceAdapter = initialValue;
                this.WTRMUnknown1 = initialValue;
                this.WTRMUnknown2 = initialValue;
                this.WTRMUnknown3 = initialValue;
                this.WTRMUnknown4 = initialValue;
                this.WTRMUnknown5 = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem ObjectPaletteDefaults,
                TItem Transforms,
                TItem XALG,
                TItem Components,
                TItem Name,
                TItem Model,
                TItem ObjectEffect,
                TItem EnchantmentAmount,
                TItem EquipmentType,
                TItem BlockBashImpactDataSet,
                TItem AlternateBlockMaterial,
                TItem PickupSound,
                TItem DropdownSound,
                TItem Keywords,
                TItem Description,
                TItem InstanceNaming,
                TItem AttachParentSlots,
                TItem ObjectTemplates,
                TItem EmbeddedWeaponMod,
                TItem BNAM,
                TItem SightedTransitionSeconds,
                TItem AimDownSightTemplate,
                TItem AimModel,
                TItem AccuracyBonus,
                TItem HasScope,
                TItem AimAssistTemplate,
                TItem AimOpticalSightModel,
                TItem MeleeAimAssistModel,
                TItem WAIMUnknown1,
                TItem WAIMUnknown2,
                TItem EnableMarkingTargets,
                TItem ReticleType,
                TItem WAIMUnknown3,
                TItem WAIMUnknown4,
                TItem AmmoType,
                TItem AmmoCapacity,
                TItem AmmoList,
                TItem OverrideProjectile,
                TItem OverrideShellCasing,
                TItem ProjectilesCount,
                TItem NpcsUseAmmo,
                TItem WAM2Unknown1,
                TItem WAMM,
                TItem MeleeOrCreature,
                TItem PrimedExplosive,
                TItem DryFire,
                TItem Idle,
                TItem Equip,
                TItem Unequip,
                TItem FastEquip,
                TItem SoundLevel,
                TItem WAUDUnknown2,
                TItem WTUR,
                TItem ChargeFullPowerSeconds,
                TItem ChargeMinPowerPerShot,
                TItem ChargeCritBonus,
                TItem ChargeHoldInput,
                TItem ChargingAttack,
                TItem AttackDamage,
                TItem MinRange,
                TItem MaxRange,
                TItem OutOfRangeDamageMult,
                TItem CritDamageMult,
                TItem CriticalHitSpell,
                TItem CritEffectOnDeathOnly,
                TItem HitBehavior,
                TItem Resistance,
                TItem Skill,
                TItem WDMGUnknown4,
                TItem WDMGUnknown5,
                TItem WDMGUnknown6,
                TItem WDMGUnknown7,
                TItem WDMGUnknown8,
                TItem WDMGUnknown9,
                TItem CritChanceIncMult,
                TItem DamageTypes,
                TItem FiringType,
                TItem BurstCount,
                TItem RepeatableFire,
                TItem AttackSeconds,
                TItem FireSeconds,
                TItem AttackDelaySeconds,
                TItem BoltChargeSeconds,
                TItem BoltAction,
                TItem DisableShellCaseEject,
                TItem ShotsPerSecond,
                TItem WFIRUnknown7,
                TItem OverrideRateOfFire,
                TItem TriggerThresholdPrimaryTrigger,
                TItem WFIRUnknown10,
                TItem TriggerThresholdSecondStage,
                TItem HasStagedTrigger,
                TItem HasDualTrigger,
                TItem BurstDelaySeconds,
                TItem NonPlayable,
                TItem PlayerOnly,
                TItem WFLGUnknown1,
                TItem WFLGUnknown2,
                TItem CannotDrop,
                TItem MinorCrime,
                TItem NonHostile,
                TItem WFLGUnknown3,
                TItem WFLGUnknown4,
                TItem WFLGUnknown5,
                TItem WFLGUnknown6,
                TItem WFLGUnknown7,
                TItem WGENUnknown1,
                TItem BaseWeight,
                TItem BaseValue,
                TItem BaseSpeed,
                TItem AttackOxygenCost,
                TItem WeaponBarrel,
                TItem General,
                TItem WMELUnknown1,
                TItem MeleeBashDamage,
                TItem MeleeReach,
                TItem MeleeStagger,
                TItem Power,
                TItem PowerRechargeTime,
                TItem PowerRechargeDelay,
                TItem ConsumeAmmo,
                TItem PowerBonus,
                TItem UsePower,
                TItem QNAMUnknown1,
                TItem QNAMUnknown2,
                TItem QNAMUnknown3,
                TItem QNAMUnknown4,
                TItem QNAMUnknown5,
                TItem PowerConsumption,
                TItem WRLOUnknown1,
                TItem ReloadSpeed,
                TItem ReloadCharging,
                TItem ReloadSingle,
                TItem WRUM,
                TItem ApertureValueMin,
                TItem ApertureValueMax,
                TItem ApertureInputMin,
                TItem ApertureInputMax,
                TItem ApertureAcceleration,
                TItem ApertureDeceleration,
                TItem DistanceValueMin,
                TItem DistanceValueMax,
                TItem DistanceInputMin,
                TItem DistanceInputMax,
                TItem DistanceAcceleration,
                TItem DistanceDeceleration,
                TItem UseVariableRange,
                TItem FirstPersonModel,
                TItem WVISUnknown1,
                TItem WVISUnknown2,
                TItem WVISUnknown3,
                TItem ImpactDataSet,
                TItem ColorRemappingIndex,
                TItem ImageSpaceAdapter,
                TItem WTRMUnknown1,
                TItem WTRMUnknown2,
                TItem WTRMUnknown3,
                TItem WTRMUnknown4,
                TItem WTRMUnknown5)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(ObjectPaletteDefaults, new ObjectPaletteDefaults.Mask<TItem>(ObjectPaletteDefaults));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.XALG = XALG;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.ObjectEffect = ObjectEffect;
                this.EnchantmentAmount = EnchantmentAmount;
                this.EquipmentType = EquipmentType;
                this.BlockBashImpactDataSet = BlockBashImpactDataSet;
                this.AlternateBlockMaterial = AlternateBlockMaterial;
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(PickupSound, new SoundReference.Mask<TItem>(PickupSound));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(DropdownSound, new SoundReference.Mask<TItem>(DropdownSound));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = Description;
                this.InstanceNaming = InstanceNaming;
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(ObjectTemplates, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.EmbeddedWeaponMod = EmbeddedWeaponMod;
                this.BNAM = BNAM;
                this.SightedTransitionSeconds = SightedTransitionSeconds;
                this.AimDownSightTemplate = AimDownSightTemplate;
                this.AimModel = AimModel;
                this.AccuracyBonus = AccuracyBonus;
                this.HasScope = HasScope;
                this.AimAssistTemplate = AimAssistTemplate;
                this.AimOpticalSightModel = AimOpticalSightModel;
                this.MeleeAimAssistModel = MeleeAimAssistModel;
                this.WAIMUnknown1 = WAIMUnknown1;
                this.WAIMUnknown2 = WAIMUnknown2;
                this.EnableMarkingTargets = EnableMarkingTargets;
                this.ReticleType = ReticleType;
                this.WAIMUnknown3 = WAIMUnknown3;
                this.WAIMUnknown4 = WAIMUnknown4;
                this.AmmoType = AmmoType;
                this.AmmoCapacity = AmmoCapacity;
                this.AmmoList = AmmoList;
                this.OverrideProjectile = OverrideProjectile;
                this.OverrideShellCasing = OverrideShellCasing;
                this.ProjectilesCount = ProjectilesCount;
                this.NpcsUseAmmo = NpcsUseAmmo;
                this.WAM2Unknown1 = WAM2Unknown1;
                this.WAMM = WAMM;
                this.MeleeOrCreature = new MaskItem<TItem, SoundReference.Mask<TItem>?>(MeleeOrCreature, new SoundReference.Mask<TItem>(MeleeOrCreature));
                this.PrimedExplosive = new MaskItem<TItem, SoundReference.Mask<TItem>?>(PrimedExplosive, new SoundReference.Mask<TItem>(PrimedExplosive));
                this.DryFire = new MaskItem<TItem, SoundReference.Mask<TItem>?>(DryFire, new SoundReference.Mask<TItem>(DryFire));
                this.Idle = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Idle, new SoundReference.Mask<TItem>(Idle));
                this.Equip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Equip, new SoundReference.Mask<TItem>(Equip));
                this.Unequip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Unequip, new SoundReference.Mask<TItem>(Unequip));
                this.FastEquip = new MaskItem<TItem, SoundReference.Mask<TItem>?>(FastEquip, new SoundReference.Mask<TItem>(FastEquip));
                this.SoundLevel = SoundLevel;
                this.WAUDUnknown2 = WAUDUnknown2;
                this.WTUR = WTUR;
                this.ChargeFullPowerSeconds = ChargeFullPowerSeconds;
                this.ChargeMinPowerPerShot = ChargeMinPowerPerShot;
                this.ChargeCritBonus = ChargeCritBonus;
                this.ChargeHoldInput = ChargeHoldInput;
                this.ChargingAttack = ChargingAttack;
                this.AttackDamage = AttackDamage;
                this.MinRange = MinRange;
                this.MaxRange = MaxRange;
                this.OutOfRangeDamageMult = OutOfRangeDamageMult;
                this.CritDamageMult = CritDamageMult;
                this.CriticalHitSpell = CriticalHitSpell;
                this.CritEffectOnDeathOnly = CritEffectOnDeathOnly;
                this.HitBehavior = HitBehavior;
                this.Resistance = Resistance;
                this.Skill = Skill;
                this.WDMGUnknown4 = WDMGUnknown4;
                this.WDMGUnknown5 = WDMGUnknown5;
                this.WDMGUnknown6 = WDMGUnknown6;
                this.WDMGUnknown7 = WDMGUnknown7;
                this.WDMGUnknown8 = WDMGUnknown8;
                this.WDMGUnknown9 = WDMGUnknown9;
                this.CritChanceIncMult = CritChanceIncMult;
                this.DamageTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeaponDamageType.Mask<TItem>?>>?>(DamageTypes, Enumerable.Empty<MaskItemIndexed<TItem, WeaponDamageType.Mask<TItem>?>>());
                this.FiringType = FiringType;
                this.BurstCount = BurstCount;
                this.RepeatableFire = RepeatableFire;
                this.AttackSeconds = AttackSeconds;
                this.FireSeconds = FireSeconds;
                this.AttackDelaySeconds = AttackDelaySeconds;
                this.BoltChargeSeconds = BoltChargeSeconds;
                this.BoltAction = BoltAction;
                this.DisableShellCaseEject = DisableShellCaseEject;
                this.ShotsPerSecond = ShotsPerSecond;
                this.WFIRUnknown7 = WFIRUnknown7;
                this.OverrideRateOfFire = OverrideRateOfFire;
                this.TriggerThresholdPrimaryTrigger = TriggerThresholdPrimaryTrigger;
                this.WFIRUnknown10 = WFIRUnknown10;
                this.TriggerThresholdSecondStage = TriggerThresholdSecondStage;
                this.HasStagedTrigger = HasStagedTrigger;
                this.HasDualTrigger = HasDualTrigger;
                this.BurstDelaySeconds = BurstDelaySeconds;
                this.NonPlayable = NonPlayable;
                this.PlayerOnly = PlayerOnly;
                this.WFLGUnknown1 = WFLGUnknown1;
                this.WFLGUnknown2 = WFLGUnknown2;
                this.CannotDrop = CannotDrop;
                this.MinorCrime = MinorCrime;
                this.NonHostile = NonHostile;
                this.WFLGUnknown3 = WFLGUnknown3;
                this.WFLGUnknown4 = WFLGUnknown4;
                this.WFLGUnknown5 = WFLGUnknown5;
                this.WFLGUnknown6 = WFLGUnknown6;
                this.WFLGUnknown7 = WFLGUnknown7;
                this.WGENUnknown1 = WGENUnknown1;
                this.BaseWeight = BaseWeight;
                this.BaseValue = BaseValue;
                this.BaseSpeed = BaseSpeed;
                this.AttackOxygenCost = AttackOxygenCost;
                this.WeaponBarrel = WeaponBarrel;
                this.General = General;
                this.WMELUnknown1 = WMELUnknown1;
                this.MeleeBashDamage = MeleeBashDamage;
                this.MeleeReach = MeleeReach;
                this.MeleeStagger = MeleeStagger;
                this.Power = Power;
                this.PowerRechargeTime = PowerRechargeTime;
                this.PowerRechargeDelay = PowerRechargeDelay;
                this.ConsumeAmmo = ConsumeAmmo;
                this.PowerBonus = PowerBonus;
                this.UsePower = UsePower;
                this.QNAMUnknown1 = QNAMUnknown1;
                this.QNAMUnknown2 = QNAMUnknown2;
                this.QNAMUnknown3 = QNAMUnknown3;
                this.QNAMUnknown4 = QNAMUnknown4;
                this.QNAMUnknown5 = QNAMUnknown5;
                this.PowerConsumption = PowerConsumption;
                this.WRLOUnknown1 = WRLOUnknown1;
                this.ReloadSpeed = ReloadSpeed;
                this.ReloadCharging = ReloadCharging;
                this.ReloadSingle = ReloadSingle;
                this.WRUM = WRUM;
                this.ApertureValueMin = ApertureValueMin;
                this.ApertureValueMax = ApertureValueMax;
                this.ApertureInputMin = ApertureInputMin;
                this.ApertureInputMax = ApertureInputMax;
                this.ApertureAcceleration = ApertureAcceleration;
                this.ApertureDeceleration = ApertureDeceleration;
                this.DistanceValueMin = DistanceValueMin;
                this.DistanceValueMax = DistanceValueMax;
                this.DistanceInputMin = DistanceInputMin;
                this.DistanceInputMax = DistanceInputMax;
                this.DistanceAcceleration = DistanceAcceleration;
                this.DistanceDeceleration = DistanceDeceleration;
                this.UseVariableRange = UseVariableRange;
                this.FirstPersonModel = new MaskItem<TItem, FirstPersonModel.Mask<TItem>?>(FirstPersonModel, new FirstPersonModel.Mask<TItem>(FirstPersonModel));
                this.WVISUnknown1 = WVISUnknown1;
                this.WVISUnknown2 = WVISUnknown2;
                this.WVISUnknown3 = WVISUnknown3;
                this.ImpactDataSet = ImpactDataSet;
                this.ColorRemappingIndex = ColorRemappingIndex;
                this.ImageSpaceAdapter = ImageSpaceAdapter;
                this.WTRMUnknown1 = WTRMUnknown1;
                this.WTRMUnknown2 = WTRMUnknown2;
                this.WTRMUnknown3 = WTRMUnknown3;
                this.WTRMUnknown4 = WTRMUnknown4;
                this.WTRMUnknown5 = WTRMUnknown5;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>? ObjectPaletteDefaults { get; set; }
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public TItem XALG;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem ObjectEffect;
            public TItem EnchantmentAmount;
            public TItem EquipmentType;
            public TItem BlockBashImpactDataSet;
            public TItem AlternateBlockMaterial;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? PickupSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? DropdownSound { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Description;
            public TItem InstanceNaming;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>? ObjectTemplates;
            public TItem EmbeddedWeaponMod;
            public TItem BNAM;
            public TItem SightedTransitionSeconds;
            public TItem AimDownSightTemplate;
            public TItem AimModel;
            public TItem AccuracyBonus;
            public TItem HasScope;
            public TItem AimAssistTemplate;
            public TItem AimOpticalSightModel;
            public TItem MeleeAimAssistModel;
            public TItem WAIMUnknown1;
            public TItem WAIMUnknown2;
            public TItem EnableMarkingTargets;
            public TItem ReticleType;
            public TItem WAIMUnknown3;
            public TItem WAIMUnknown4;
            public TItem AmmoType;
            public TItem AmmoCapacity;
            public TItem AmmoList;
            public TItem OverrideProjectile;
            public TItem OverrideShellCasing;
            public TItem ProjectilesCount;
            public TItem NpcsUseAmmo;
            public TItem WAM2Unknown1;
            public TItem WAMM;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? MeleeOrCreature { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? PrimedExplosive { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? DryFire { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Idle { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Equip { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Unequip { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? FastEquip { get; set; }
            public TItem SoundLevel;
            public TItem WAUDUnknown2;
            public TItem WTUR;
            public TItem ChargeFullPowerSeconds;
            public TItem ChargeMinPowerPerShot;
            public TItem ChargeCritBonus;
            public TItem ChargeHoldInput;
            public TItem ChargingAttack;
            public TItem AttackDamage;
            public TItem MinRange;
            public TItem MaxRange;
            public TItem OutOfRangeDamageMult;
            public TItem CritDamageMult;
            public TItem CriticalHitSpell;
            public TItem CritEffectOnDeathOnly;
            public TItem HitBehavior;
            public TItem Resistance;
            public TItem Skill;
            public TItem WDMGUnknown4;
            public TItem WDMGUnknown5;
            public TItem WDMGUnknown6;
            public TItem WDMGUnknown7;
            public TItem WDMGUnknown8;
            public TItem WDMGUnknown9;
            public TItem CritChanceIncMult;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeaponDamageType.Mask<TItem>?>>?>? DamageTypes;
            public TItem FiringType;
            public TItem BurstCount;
            public TItem RepeatableFire;
            public TItem AttackSeconds;
            public TItem FireSeconds;
            public TItem AttackDelaySeconds;
            public TItem BoltChargeSeconds;
            public TItem BoltAction;
            public TItem DisableShellCaseEject;
            public TItem ShotsPerSecond;
            public TItem WFIRUnknown7;
            public TItem OverrideRateOfFire;
            public TItem TriggerThresholdPrimaryTrigger;
            public TItem WFIRUnknown10;
            public TItem TriggerThresholdSecondStage;
            public TItem HasStagedTrigger;
            public TItem HasDualTrigger;
            public TItem BurstDelaySeconds;
            public TItem NonPlayable;
            public TItem PlayerOnly;
            public TItem WFLGUnknown1;
            public TItem WFLGUnknown2;
            public TItem CannotDrop;
            public TItem MinorCrime;
            public TItem NonHostile;
            public TItem WFLGUnknown3;
            public TItem WFLGUnknown4;
            public TItem WFLGUnknown5;
            public TItem WFLGUnknown6;
            public TItem WFLGUnknown7;
            public TItem WGENUnknown1;
            public TItem BaseWeight;
            public TItem BaseValue;
            public TItem BaseSpeed;
            public TItem AttackOxygenCost;
            public TItem WeaponBarrel;
            public TItem General;
            public TItem WMELUnknown1;
            public TItem MeleeBashDamage;
            public TItem MeleeReach;
            public TItem MeleeStagger;
            public TItem Power;
            public TItem PowerRechargeTime;
            public TItem PowerRechargeDelay;
            public TItem ConsumeAmmo;
            public TItem PowerBonus;
            public TItem UsePower;
            public TItem QNAMUnknown1;
            public TItem QNAMUnknown2;
            public TItem QNAMUnknown3;
            public TItem QNAMUnknown4;
            public TItem QNAMUnknown5;
            public TItem PowerConsumption;
            public TItem WRLOUnknown1;
            public TItem ReloadSpeed;
            public TItem ReloadCharging;
            public TItem ReloadSingle;
            public TItem WRUM;
            public TItem ApertureValueMin;
            public TItem ApertureValueMax;
            public TItem ApertureInputMin;
            public TItem ApertureInputMax;
            public TItem ApertureAcceleration;
            public TItem ApertureDeceleration;
            public TItem DistanceValueMin;
            public TItem DistanceValueMax;
            public TItem DistanceInputMin;
            public TItem DistanceInputMax;
            public TItem DistanceAcceleration;
            public TItem DistanceDeceleration;
            public TItem UseVariableRange;
            public MaskItem<TItem, FirstPersonModel.Mask<TItem>?>? FirstPersonModel { get; set; }
            public TItem WVISUnknown1;
            public TItem WVISUnknown2;
            public TItem WVISUnknown3;
            public TItem ImpactDataSet;
            public TItem ColorRemappingIndex;
            public TItem ImageSpaceAdapter;
            public TItem WTRMUnknown1;
            public TItem WTRMUnknown2;
            public TItem WTRMUnknown3;
            public TItem WTRMUnknown4;
            public TItem WTRMUnknown5;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.ObjectEffect, rhs.ObjectEffect)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.BlockBashImpactDataSet, rhs.BlockBashImpactDataSet)) return false;
                if (!object.Equals(this.AlternateBlockMaterial, rhs.AlternateBlockMaterial)) return false;
                if (!object.Equals(this.PickupSound, rhs.PickupSound)) return false;
                if (!object.Equals(this.DropdownSound, rhs.DropdownSound)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.InstanceNaming, rhs.InstanceNaming)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.ObjectTemplates, rhs.ObjectTemplates)) return false;
                if (!object.Equals(this.EmbeddedWeaponMod, rhs.EmbeddedWeaponMod)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.SightedTransitionSeconds, rhs.SightedTransitionSeconds)) return false;
                if (!object.Equals(this.AimDownSightTemplate, rhs.AimDownSightTemplate)) return false;
                if (!object.Equals(this.AimModel, rhs.AimModel)) return false;
                if (!object.Equals(this.AccuracyBonus, rhs.AccuracyBonus)) return false;
                if (!object.Equals(this.HasScope, rhs.HasScope)) return false;
                if (!object.Equals(this.AimAssistTemplate, rhs.AimAssistTemplate)) return false;
                if (!object.Equals(this.AimOpticalSightModel, rhs.AimOpticalSightModel)) return false;
                if (!object.Equals(this.MeleeAimAssistModel, rhs.MeleeAimAssistModel)) return false;
                if (!object.Equals(this.WAIMUnknown1, rhs.WAIMUnknown1)) return false;
                if (!object.Equals(this.WAIMUnknown2, rhs.WAIMUnknown2)) return false;
                if (!object.Equals(this.EnableMarkingTargets, rhs.EnableMarkingTargets)) return false;
                if (!object.Equals(this.ReticleType, rhs.ReticleType)) return false;
                if (!object.Equals(this.WAIMUnknown3, rhs.WAIMUnknown3)) return false;
                if (!object.Equals(this.WAIMUnknown4, rhs.WAIMUnknown4)) return false;
                if (!object.Equals(this.AmmoType, rhs.AmmoType)) return false;
                if (!object.Equals(this.AmmoCapacity, rhs.AmmoCapacity)) return false;
                if (!object.Equals(this.AmmoList, rhs.AmmoList)) return false;
                if (!object.Equals(this.OverrideProjectile, rhs.OverrideProjectile)) return false;
                if (!object.Equals(this.OverrideShellCasing, rhs.OverrideShellCasing)) return false;
                if (!object.Equals(this.ProjectilesCount, rhs.ProjectilesCount)) return false;
                if (!object.Equals(this.NpcsUseAmmo, rhs.NpcsUseAmmo)) return false;
                if (!object.Equals(this.WAM2Unknown1, rhs.WAM2Unknown1)) return false;
                if (!object.Equals(this.WAMM, rhs.WAMM)) return false;
                if (!object.Equals(this.MeleeOrCreature, rhs.MeleeOrCreature)) return false;
                if (!object.Equals(this.PrimedExplosive, rhs.PrimedExplosive)) return false;
                if (!object.Equals(this.DryFire, rhs.DryFire)) return false;
                if (!object.Equals(this.Idle, rhs.Idle)) return false;
                if (!object.Equals(this.Equip, rhs.Equip)) return false;
                if (!object.Equals(this.Unequip, rhs.Unequip)) return false;
                if (!object.Equals(this.FastEquip, rhs.FastEquip)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.WAUDUnknown2, rhs.WAUDUnknown2)) return false;
                if (!object.Equals(this.WTUR, rhs.WTUR)) return false;
                if (!object.Equals(this.ChargeFullPowerSeconds, rhs.ChargeFullPowerSeconds)) return false;
                if (!object.Equals(this.ChargeMinPowerPerShot, rhs.ChargeMinPowerPerShot)) return false;
                if (!object.Equals(this.ChargeCritBonus, rhs.ChargeCritBonus)) return false;
                if (!object.Equals(this.ChargeHoldInput, rhs.ChargeHoldInput)) return false;
                if (!object.Equals(this.ChargingAttack, rhs.ChargingAttack)) return false;
                if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
                if (!object.Equals(this.MinRange, rhs.MinRange)) return false;
                if (!object.Equals(this.MaxRange, rhs.MaxRange)) return false;
                if (!object.Equals(this.OutOfRangeDamageMult, rhs.OutOfRangeDamageMult)) return false;
                if (!object.Equals(this.CritDamageMult, rhs.CritDamageMult)) return false;
                if (!object.Equals(this.CriticalHitSpell, rhs.CriticalHitSpell)) return false;
                if (!object.Equals(this.CritEffectOnDeathOnly, rhs.CritEffectOnDeathOnly)) return false;
                if (!object.Equals(this.HitBehavior, rhs.HitBehavior)) return false;
                if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
                if (!object.Equals(this.Skill, rhs.Skill)) return false;
                if (!object.Equals(this.WDMGUnknown4, rhs.WDMGUnknown4)) return false;
                if (!object.Equals(this.WDMGUnknown5, rhs.WDMGUnknown5)) return false;
                if (!object.Equals(this.WDMGUnknown6, rhs.WDMGUnknown6)) return false;
                if (!object.Equals(this.WDMGUnknown7, rhs.WDMGUnknown7)) return false;
                if (!object.Equals(this.WDMGUnknown8, rhs.WDMGUnknown8)) return false;
                if (!object.Equals(this.WDMGUnknown9, rhs.WDMGUnknown9)) return false;
                if (!object.Equals(this.CritChanceIncMult, rhs.CritChanceIncMult)) return false;
                if (!object.Equals(this.DamageTypes, rhs.DamageTypes)) return false;
                if (!object.Equals(this.FiringType, rhs.FiringType)) return false;
                if (!object.Equals(this.BurstCount, rhs.BurstCount)) return false;
                if (!object.Equals(this.RepeatableFire, rhs.RepeatableFire)) return false;
                if (!object.Equals(this.AttackSeconds, rhs.AttackSeconds)) return false;
                if (!object.Equals(this.FireSeconds, rhs.FireSeconds)) return false;
                if (!object.Equals(this.AttackDelaySeconds, rhs.AttackDelaySeconds)) return false;
                if (!object.Equals(this.BoltChargeSeconds, rhs.BoltChargeSeconds)) return false;
                if (!object.Equals(this.BoltAction, rhs.BoltAction)) return false;
                if (!object.Equals(this.DisableShellCaseEject, rhs.DisableShellCaseEject)) return false;
                if (!object.Equals(this.ShotsPerSecond, rhs.ShotsPerSecond)) return false;
                if (!object.Equals(this.WFIRUnknown7, rhs.WFIRUnknown7)) return false;
                if (!object.Equals(this.OverrideRateOfFire, rhs.OverrideRateOfFire)) return false;
                if (!object.Equals(this.TriggerThresholdPrimaryTrigger, rhs.TriggerThresholdPrimaryTrigger)) return false;
                if (!object.Equals(this.WFIRUnknown10, rhs.WFIRUnknown10)) return false;
                if (!object.Equals(this.TriggerThresholdSecondStage, rhs.TriggerThresholdSecondStage)) return false;
                if (!object.Equals(this.HasStagedTrigger, rhs.HasStagedTrigger)) return false;
                if (!object.Equals(this.HasDualTrigger, rhs.HasDualTrigger)) return false;
                if (!object.Equals(this.BurstDelaySeconds, rhs.BurstDelaySeconds)) return false;
                if (!object.Equals(this.NonPlayable, rhs.NonPlayable)) return false;
                if (!object.Equals(this.PlayerOnly, rhs.PlayerOnly)) return false;
                if (!object.Equals(this.WFLGUnknown1, rhs.WFLGUnknown1)) return false;
                if (!object.Equals(this.WFLGUnknown2, rhs.WFLGUnknown2)) return false;
                if (!object.Equals(this.CannotDrop, rhs.CannotDrop)) return false;
                if (!object.Equals(this.MinorCrime, rhs.MinorCrime)) return false;
                if (!object.Equals(this.NonHostile, rhs.NonHostile)) return false;
                if (!object.Equals(this.WFLGUnknown3, rhs.WFLGUnknown3)) return false;
                if (!object.Equals(this.WFLGUnknown4, rhs.WFLGUnknown4)) return false;
                if (!object.Equals(this.WFLGUnknown5, rhs.WFLGUnknown5)) return false;
                if (!object.Equals(this.WFLGUnknown6, rhs.WFLGUnknown6)) return false;
                if (!object.Equals(this.WFLGUnknown7, rhs.WFLGUnknown7)) return false;
                if (!object.Equals(this.WGENUnknown1, rhs.WGENUnknown1)) return false;
                if (!object.Equals(this.BaseWeight, rhs.BaseWeight)) return false;
                if (!object.Equals(this.BaseValue, rhs.BaseValue)) return false;
                if (!object.Equals(this.BaseSpeed, rhs.BaseSpeed)) return false;
                if (!object.Equals(this.AttackOxygenCost, rhs.AttackOxygenCost)) return false;
                if (!object.Equals(this.WeaponBarrel, rhs.WeaponBarrel)) return false;
                if (!object.Equals(this.General, rhs.General)) return false;
                if (!object.Equals(this.WMELUnknown1, rhs.WMELUnknown1)) return false;
                if (!object.Equals(this.MeleeBashDamage, rhs.MeleeBashDamage)) return false;
                if (!object.Equals(this.MeleeReach, rhs.MeleeReach)) return false;
                if (!object.Equals(this.MeleeStagger, rhs.MeleeStagger)) return false;
                if (!object.Equals(this.Power, rhs.Power)) return false;
                if (!object.Equals(this.PowerRechargeTime, rhs.PowerRechargeTime)) return false;
                if (!object.Equals(this.PowerRechargeDelay, rhs.PowerRechargeDelay)) return false;
                if (!object.Equals(this.ConsumeAmmo, rhs.ConsumeAmmo)) return false;
                if (!object.Equals(this.PowerBonus, rhs.PowerBonus)) return false;
                if (!object.Equals(this.UsePower, rhs.UsePower)) return false;
                if (!object.Equals(this.QNAMUnknown1, rhs.QNAMUnknown1)) return false;
                if (!object.Equals(this.QNAMUnknown2, rhs.QNAMUnknown2)) return false;
                if (!object.Equals(this.QNAMUnknown3, rhs.QNAMUnknown3)) return false;
                if (!object.Equals(this.QNAMUnknown4, rhs.QNAMUnknown4)) return false;
                if (!object.Equals(this.QNAMUnknown5, rhs.QNAMUnknown5)) return false;
                if (!object.Equals(this.PowerConsumption, rhs.PowerConsumption)) return false;
                if (!object.Equals(this.WRLOUnknown1, rhs.WRLOUnknown1)) return false;
                if (!object.Equals(this.ReloadSpeed, rhs.ReloadSpeed)) return false;
                if (!object.Equals(this.ReloadCharging, rhs.ReloadCharging)) return false;
                if (!object.Equals(this.ReloadSingle, rhs.ReloadSingle)) return false;
                if (!object.Equals(this.WRUM, rhs.WRUM)) return false;
                if (!object.Equals(this.ApertureValueMin, rhs.ApertureValueMin)) return false;
                if (!object.Equals(this.ApertureValueMax, rhs.ApertureValueMax)) return false;
                if (!object.Equals(this.ApertureInputMin, rhs.ApertureInputMin)) return false;
                if (!object.Equals(this.ApertureInputMax, rhs.ApertureInputMax)) return false;
                if (!object.Equals(this.ApertureAcceleration, rhs.ApertureAcceleration)) return false;
                if (!object.Equals(this.ApertureDeceleration, rhs.ApertureDeceleration)) return false;
                if (!object.Equals(this.DistanceValueMin, rhs.DistanceValueMin)) return false;
                if (!object.Equals(this.DistanceValueMax, rhs.DistanceValueMax)) return false;
                if (!object.Equals(this.DistanceInputMin, rhs.DistanceInputMin)) return false;
                if (!object.Equals(this.DistanceInputMax, rhs.DistanceInputMax)) return false;
                if (!object.Equals(this.DistanceAcceleration, rhs.DistanceAcceleration)) return false;
                if (!object.Equals(this.DistanceDeceleration, rhs.DistanceDeceleration)) return false;
                if (!object.Equals(this.UseVariableRange, rhs.UseVariableRange)) return false;
                if (!object.Equals(this.FirstPersonModel, rhs.FirstPersonModel)) return false;
                if (!object.Equals(this.WVISUnknown1, rhs.WVISUnknown1)) return false;
                if (!object.Equals(this.WVISUnknown2, rhs.WVISUnknown2)) return false;
                if (!object.Equals(this.WVISUnknown3, rhs.WVISUnknown3)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.ColorRemappingIndex, rhs.ColorRemappingIndex)) return false;
                if (!object.Equals(this.ImageSpaceAdapter, rhs.ImageSpaceAdapter)) return false;
                if (!object.Equals(this.WTRMUnknown1, rhs.WTRMUnknown1)) return false;
                if (!object.Equals(this.WTRMUnknown2, rhs.WTRMUnknown2)) return false;
                if (!object.Equals(this.WTRMUnknown3, rhs.WTRMUnknown3)) return false;
                if (!object.Equals(this.WTRMUnknown4, rhs.WTRMUnknown4)) return false;
                if (!object.Equals(this.WTRMUnknown5, rhs.WTRMUnknown5)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.ObjectPaletteDefaults);
                hash.Add(this.Transforms);
                hash.Add(this.XALG);
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.ObjectEffect);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.EquipmentType);
                hash.Add(this.BlockBashImpactDataSet);
                hash.Add(this.AlternateBlockMaterial);
                hash.Add(this.PickupSound);
                hash.Add(this.DropdownSound);
                hash.Add(this.Keywords);
                hash.Add(this.Description);
                hash.Add(this.InstanceNaming);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.ObjectTemplates);
                hash.Add(this.EmbeddedWeaponMod);
                hash.Add(this.BNAM);
                hash.Add(this.SightedTransitionSeconds);
                hash.Add(this.AimDownSightTemplate);
                hash.Add(this.AimModel);
                hash.Add(this.AccuracyBonus);
                hash.Add(this.HasScope);
                hash.Add(this.AimAssistTemplate);
                hash.Add(this.AimOpticalSightModel);
                hash.Add(this.MeleeAimAssistModel);
                hash.Add(this.WAIMUnknown1);
                hash.Add(this.WAIMUnknown2);
                hash.Add(this.EnableMarkingTargets);
                hash.Add(this.ReticleType);
                hash.Add(this.WAIMUnknown3);
                hash.Add(this.WAIMUnknown4);
                hash.Add(this.AmmoType);
                hash.Add(this.AmmoCapacity);
                hash.Add(this.AmmoList);
                hash.Add(this.OverrideProjectile);
                hash.Add(this.OverrideShellCasing);
                hash.Add(this.ProjectilesCount);
                hash.Add(this.NpcsUseAmmo);
                hash.Add(this.WAM2Unknown1);
                hash.Add(this.WAMM);
                hash.Add(this.MeleeOrCreature);
                hash.Add(this.PrimedExplosive);
                hash.Add(this.DryFire);
                hash.Add(this.Idle);
                hash.Add(this.Equip);
                hash.Add(this.Unequip);
                hash.Add(this.FastEquip);
                hash.Add(this.SoundLevel);
                hash.Add(this.WAUDUnknown2);
                hash.Add(this.WTUR);
                hash.Add(this.ChargeFullPowerSeconds);
                hash.Add(this.ChargeMinPowerPerShot);
                hash.Add(this.ChargeCritBonus);
                hash.Add(this.ChargeHoldInput);
                hash.Add(this.ChargingAttack);
                hash.Add(this.AttackDamage);
                hash.Add(this.MinRange);
                hash.Add(this.MaxRange);
                hash.Add(this.OutOfRangeDamageMult);
                hash.Add(this.CritDamageMult);
                hash.Add(this.CriticalHitSpell);
                hash.Add(this.CritEffectOnDeathOnly);
                hash.Add(this.HitBehavior);
                hash.Add(this.Resistance);
                hash.Add(this.Skill);
                hash.Add(this.WDMGUnknown4);
                hash.Add(this.WDMGUnknown5);
                hash.Add(this.WDMGUnknown6);
                hash.Add(this.WDMGUnknown7);
                hash.Add(this.WDMGUnknown8);
                hash.Add(this.WDMGUnknown9);
                hash.Add(this.CritChanceIncMult);
                hash.Add(this.DamageTypes);
                hash.Add(this.FiringType);
                hash.Add(this.BurstCount);
                hash.Add(this.RepeatableFire);
                hash.Add(this.AttackSeconds);
                hash.Add(this.FireSeconds);
                hash.Add(this.AttackDelaySeconds);
                hash.Add(this.BoltChargeSeconds);
                hash.Add(this.BoltAction);
                hash.Add(this.DisableShellCaseEject);
                hash.Add(this.ShotsPerSecond);
                hash.Add(this.WFIRUnknown7);
                hash.Add(this.OverrideRateOfFire);
                hash.Add(this.TriggerThresholdPrimaryTrigger);
                hash.Add(this.WFIRUnknown10);
                hash.Add(this.TriggerThresholdSecondStage);
                hash.Add(this.HasStagedTrigger);
                hash.Add(this.HasDualTrigger);
                hash.Add(this.BurstDelaySeconds);
                hash.Add(this.NonPlayable);
                hash.Add(this.PlayerOnly);
                hash.Add(this.WFLGUnknown1);
                hash.Add(this.WFLGUnknown2);
                hash.Add(this.CannotDrop);
                hash.Add(this.MinorCrime);
                hash.Add(this.NonHostile);
                hash.Add(this.WFLGUnknown3);
                hash.Add(this.WFLGUnknown4);
                hash.Add(this.WFLGUnknown5);
                hash.Add(this.WFLGUnknown6);
                hash.Add(this.WFLGUnknown7);
                hash.Add(this.WGENUnknown1);
                hash.Add(this.BaseWeight);
                hash.Add(this.BaseValue);
                hash.Add(this.BaseSpeed);
                hash.Add(this.AttackOxygenCost);
                hash.Add(this.WeaponBarrel);
                hash.Add(this.General);
                hash.Add(this.WMELUnknown1);
                hash.Add(this.MeleeBashDamage);
                hash.Add(this.MeleeReach);
                hash.Add(this.MeleeStagger);
                hash.Add(this.Power);
                hash.Add(this.PowerRechargeTime);
                hash.Add(this.PowerRechargeDelay);
                hash.Add(this.ConsumeAmmo);
                hash.Add(this.PowerBonus);
                hash.Add(this.UsePower);
                hash.Add(this.QNAMUnknown1);
                hash.Add(this.QNAMUnknown2);
                hash.Add(this.QNAMUnknown3);
                hash.Add(this.QNAMUnknown4);
                hash.Add(this.QNAMUnknown5);
                hash.Add(this.PowerConsumption);
                hash.Add(this.WRLOUnknown1);
                hash.Add(this.ReloadSpeed);
                hash.Add(this.ReloadCharging);
                hash.Add(this.ReloadSingle);
                hash.Add(this.WRUM);
                hash.Add(this.ApertureValueMin);
                hash.Add(this.ApertureValueMax);
                hash.Add(this.ApertureInputMin);
                hash.Add(this.ApertureInputMax);
                hash.Add(this.ApertureAcceleration);
                hash.Add(this.ApertureDeceleration);
                hash.Add(this.DistanceValueMin);
                hash.Add(this.DistanceValueMax);
                hash.Add(this.DistanceInputMin);
                hash.Add(this.DistanceInputMax);
                hash.Add(this.DistanceAcceleration);
                hash.Add(this.DistanceDeceleration);
                hash.Add(this.UseVariableRange);
                hash.Add(this.FirstPersonModel);
                hash.Add(this.WVISUnknown1);
                hash.Add(this.WVISUnknown2);
                hash.Add(this.WVISUnknown3);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.ColorRemappingIndex);
                hash.Add(this.ImageSpaceAdapter);
                hash.Add(this.WTRMUnknown1);
                hash.Add(this.WTRMUnknown2);
                hash.Add(this.WTRMUnknown3);
                hash.Add(this.WTRMUnknown4);
                hash.Add(this.WTRMUnknown5);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (ObjectPaletteDefaults != null)
                {
                    if (!eval(this.ObjectPaletteDefaults.Overall)) return false;
                    if (this.ObjectPaletteDefaults.Specific != null && !this.ObjectPaletteDefaults.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (!eval(this.XALG)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.ObjectEffect)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.BlockBashImpactDataSet)) return false;
                if (!eval(this.AlternateBlockMaterial)) return false;
                if (PickupSound != null)
                {
                    if (!eval(this.PickupSound.Overall)) return false;
                    if (this.PickupSound.Specific != null && !this.PickupSound.Specific.All(eval)) return false;
                }
                if (DropdownSound != null)
                {
                    if (!eval(this.DropdownSound.Overall)) return false;
                    if (this.DropdownSound.Specific != null && !this.DropdownSound.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (!eval(this.InstanceNaming)) return false;
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (!eval(this.ObjectTemplates.Overall)) return false;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EmbeddedWeaponMod)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.SightedTransitionSeconds)) return false;
                if (!eval(this.AimDownSightTemplate)) return false;
                if (!eval(this.AimModel)) return false;
                if (!eval(this.AccuracyBonus)) return false;
                if (!eval(this.HasScope)) return false;
                if (!eval(this.AimAssistTemplate)) return false;
                if (!eval(this.AimOpticalSightModel)) return false;
                if (!eval(this.MeleeAimAssistModel)) return false;
                if (!eval(this.WAIMUnknown1)) return false;
                if (!eval(this.WAIMUnknown2)) return false;
                if (!eval(this.EnableMarkingTargets)) return false;
                if (!eval(this.ReticleType)) return false;
                if (!eval(this.WAIMUnknown3)) return false;
                if (!eval(this.WAIMUnknown4)) return false;
                if (!eval(this.AmmoType)) return false;
                if (!eval(this.AmmoCapacity)) return false;
                if (!eval(this.AmmoList)) return false;
                if (!eval(this.OverrideProjectile)) return false;
                if (!eval(this.OverrideShellCasing)) return false;
                if (!eval(this.ProjectilesCount)) return false;
                if (!eval(this.NpcsUseAmmo)) return false;
                if (!eval(this.WAM2Unknown1)) return false;
                if (!eval(this.WAMM)) return false;
                if (MeleeOrCreature != null)
                {
                    if (!eval(this.MeleeOrCreature.Overall)) return false;
                    if (this.MeleeOrCreature.Specific != null && !this.MeleeOrCreature.Specific.All(eval)) return false;
                }
                if (PrimedExplosive != null)
                {
                    if (!eval(this.PrimedExplosive.Overall)) return false;
                    if (this.PrimedExplosive.Specific != null && !this.PrimedExplosive.Specific.All(eval)) return false;
                }
                if (DryFire != null)
                {
                    if (!eval(this.DryFire.Overall)) return false;
                    if (this.DryFire.Specific != null && !this.DryFire.Specific.All(eval)) return false;
                }
                if (Idle != null)
                {
                    if (!eval(this.Idle.Overall)) return false;
                    if (this.Idle.Specific != null && !this.Idle.Specific.All(eval)) return false;
                }
                if (Equip != null)
                {
                    if (!eval(this.Equip.Overall)) return false;
                    if (this.Equip.Specific != null && !this.Equip.Specific.All(eval)) return false;
                }
                if (Unequip != null)
                {
                    if (!eval(this.Unequip.Overall)) return false;
                    if (this.Unequip.Specific != null && !this.Unequip.Specific.All(eval)) return false;
                }
                if (FastEquip != null)
                {
                    if (!eval(this.FastEquip.Overall)) return false;
                    if (this.FastEquip.Specific != null && !this.FastEquip.Specific.All(eval)) return false;
                }
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.WAUDUnknown2)) return false;
                if (!eval(this.WTUR)) return false;
                if (!eval(this.ChargeFullPowerSeconds)) return false;
                if (!eval(this.ChargeMinPowerPerShot)) return false;
                if (!eval(this.ChargeCritBonus)) return false;
                if (!eval(this.ChargeHoldInput)) return false;
                if (!eval(this.ChargingAttack)) return false;
                if (!eval(this.AttackDamage)) return false;
                if (!eval(this.MinRange)) return false;
                if (!eval(this.MaxRange)) return false;
                if (!eval(this.OutOfRangeDamageMult)) return false;
                if (!eval(this.CritDamageMult)) return false;
                if (!eval(this.CriticalHitSpell)) return false;
                if (!eval(this.CritEffectOnDeathOnly)) return false;
                if (!eval(this.HitBehavior)) return false;
                if (!eval(this.Resistance)) return false;
                if (!eval(this.Skill)) return false;
                if (!eval(this.WDMGUnknown4)) return false;
                if (!eval(this.WDMGUnknown5)) return false;
                if (!eval(this.WDMGUnknown6)) return false;
                if (!eval(this.WDMGUnknown7)) return false;
                if (!eval(this.WDMGUnknown8)) return false;
                if (!eval(this.WDMGUnknown9)) return false;
                if (!eval(this.CritChanceIncMult)) return false;
                if (this.DamageTypes != null)
                {
                    if (!eval(this.DamageTypes.Overall)) return false;
                    if (this.DamageTypes.Specific != null)
                    {
                        foreach (var item in this.DamageTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.FiringType)) return false;
                if (!eval(this.BurstCount)) return false;
                if (!eval(this.RepeatableFire)) return false;
                if (!eval(this.AttackSeconds)) return false;
                if (!eval(this.FireSeconds)) return false;
                if (!eval(this.AttackDelaySeconds)) return false;
                if (!eval(this.BoltChargeSeconds)) return false;
                if (!eval(this.BoltAction)) return false;
                if (!eval(this.DisableShellCaseEject)) return false;
                if (!eval(this.ShotsPerSecond)) return false;
                if (!eval(this.WFIRUnknown7)) return false;
                if (!eval(this.OverrideRateOfFire)) return false;
                if (!eval(this.TriggerThresholdPrimaryTrigger)) return false;
                if (!eval(this.WFIRUnknown10)) return false;
                if (!eval(this.TriggerThresholdSecondStage)) return false;
                if (!eval(this.HasStagedTrigger)) return false;
                if (!eval(this.HasDualTrigger)) return false;
                if (!eval(this.BurstDelaySeconds)) return false;
                if (!eval(this.NonPlayable)) return false;
                if (!eval(this.PlayerOnly)) return false;
                if (!eval(this.WFLGUnknown1)) return false;
                if (!eval(this.WFLGUnknown2)) return false;
                if (!eval(this.CannotDrop)) return false;
                if (!eval(this.MinorCrime)) return false;
                if (!eval(this.NonHostile)) return false;
                if (!eval(this.WFLGUnknown3)) return false;
                if (!eval(this.WFLGUnknown4)) return false;
                if (!eval(this.WFLGUnknown5)) return false;
                if (!eval(this.WFLGUnknown6)) return false;
                if (!eval(this.WFLGUnknown7)) return false;
                if (!eval(this.WGENUnknown1)) return false;
                if (!eval(this.BaseWeight)) return false;
                if (!eval(this.BaseValue)) return false;
                if (!eval(this.BaseSpeed)) return false;
                if (!eval(this.AttackOxygenCost)) return false;
                if (!eval(this.WeaponBarrel)) return false;
                if (!eval(this.General)) return false;
                if (!eval(this.WMELUnknown1)) return false;
                if (!eval(this.MeleeBashDamage)) return false;
                if (!eval(this.MeleeReach)) return false;
                if (!eval(this.MeleeStagger)) return false;
                if (!eval(this.Power)) return false;
                if (!eval(this.PowerRechargeTime)) return false;
                if (!eval(this.PowerRechargeDelay)) return false;
                if (!eval(this.ConsumeAmmo)) return false;
                if (!eval(this.PowerBonus)) return false;
                if (!eval(this.UsePower)) return false;
                if (!eval(this.QNAMUnknown1)) return false;
                if (!eval(this.QNAMUnknown2)) return false;
                if (!eval(this.QNAMUnknown3)) return false;
                if (!eval(this.QNAMUnknown4)) return false;
                if (!eval(this.QNAMUnknown5)) return false;
                if (!eval(this.PowerConsumption)) return false;
                if (!eval(this.WRLOUnknown1)) return false;
                if (!eval(this.ReloadSpeed)) return false;
                if (!eval(this.ReloadCharging)) return false;
                if (!eval(this.ReloadSingle)) return false;
                if (!eval(this.WRUM)) return false;
                if (!eval(this.ApertureValueMin)) return false;
                if (!eval(this.ApertureValueMax)) return false;
                if (!eval(this.ApertureInputMin)) return false;
                if (!eval(this.ApertureInputMax)) return false;
                if (!eval(this.ApertureAcceleration)) return false;
                if (!eval(this.ApertureDeceleration)) return false;
                if (!eval(this.DistanceValueMin)) return false;
                if (!eval(this.DistanceValueMax)) return false;
                if (!eval(this.DistanceInputMin)) return false;
                if (!eval(this.DistanceInputMax)) return false;
                if (!eval(this.DistanceAcceleration)) return false;
                if (!eval(this.DistanceDeceleration)) return false;
                if (!eval(this.UseVariableRange)) return false;
                if (FirstPersonModel != null)
                {
                    if (!eval(this.FirstPersonModel.Overall)) return false;
                    if (this.FirstPersonModel.Specific != null && !this.FirstPersonModel.Specific.All(eval)) return false;
                }
                if (!eval(this.WVISUnknown1)) return false;
                if (!eval(this.WVISUnknown2)) return false;
                if (!eval(this.WVISUnknown3)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.ColorRemappingIndex)) return false;
                if (!eval(this.ImageSpaceAdapter)) return false;
                if (!eval(this.WTRMUnknown1)) return false;
                if (!eval(this.WTRMUnknown2)) return false;
                if (!eval(this.WTRMUnknown3)) return false;
                if (!eval(this.WTRMUnknown4)) return false;
                if (!eval(this.WTRMUnknown5)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (ObjectPaletteDefaults != null)
                {
                    if (eval(this.ObjectPaletteDefaults.Overall)) return true;
                    if (this.ObjectPaletteDefaults.Specific != null && this.ObjectPaletteDefaults.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (eval(this.XALG)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.ObjectEffect)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.BlockBashImpactDataSet)) return true;
                if (eval(this.AlternateBlockMaterial)) return true;
                if (PickupSound != null)
                {
                    if (eval(this.PickupSound.Overall)) return true;
                    if (this.PickupSound.Specific != null && this.PickupSound.Specific.Any(eval)) return true;
                }
                if (DropdownSound != null)
                {
                    if (eval(this.DropdownSound.Overall)) return true;
                    if (this.DropdownSound.Specific != null && this.DropdownSound.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (eval(this.InstanceNaming)) return true;
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (eval(this.ObjectTemplates.Overall)) return true;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EmbeddedWeaponMod)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.SightedTransitionSeconds)) return true;
                if (eval(this.AimDownSightTemplate)) return true;
                if (eval(this.AimModel)) return true;
                if (eval(this.AccuracyBonus)) return true;
                if (eval(this.HasScope)) return true;
                if (eval(this.AimAssistTemplate)) return true;
                if (eval(this.AimOpticalSightModel)) return true;
                if (eval(this.MeleeAimAssistModel)) return true;
                if (eval(this.WAIMUnknown1)) return true;
                if (eval(this.WAIMUnknown2)) return true;
                if (eval(this.EnableMarkingTargets)) return true;
                if (eval(this.ReticleType)) return true;
                if (eval(this.WAIMUnknown3)) return true;
                if (eval(this.WAIMUnknown4)) return true;
                if (eval(this.AmmoType)) return true;
                if (eval(this.AmmoCapacity)) return true;
                if (eval(this.AmmoList)) return true;
                if (eval(this.OverrideProjectile)) return true;
                if (eval(this.OverrideShellCasing)) return true;
                if (eval(this.ProjectilesCount)) return true;
                if (eval(this.NpcsUseAmmo)) return true;
                if (eval(this.WAM2Unknown1)) return true;
                if (eval(this.WAMM)) return true;
                if (MeleeOrCreature != null)
                {
                    if (eval(this.MeleeOrCreature.Overall)) return true;
                    if (this.MeleeOrCreature.Specific != null && this.MeleeOrCreature.Specific.Any(eval)) return true;
                }
                if (PrimedExplosive != null)
                {
                    if (eval(this.PrimedExplosive.Overall)) return true;
                    if (this.PrimedExplosive.Specific != null && this.PrimedExplosive.Specific.Any(eval)) return true;
                }
                if (DryFire != null)
                {
                    if (eval(this.DryFire.Overall)) return true;
                    if (this.DryFire.Specific != null && this.DryFire.Specific.Any(eval)) return true;
                }
                if (Idle != null)
                {
                    if (eval(this.Idle.Overall)) return true;
                    if (this.Idle.Specific != null && this.Idle.Specific.Any(eval)) return true;
                }
                if (Equip != null)
                {
                    if (eval(this.Equip.Overall)) return true;
                    if (this.Equip.Specific != null && this.Equip.Specific.Any(eval)) return true;
                }
                if (Unequip != null)
                {
                    if (eval(this.Unequip.Overall)) return true;
                    if (this.Unequip.Specific != null && this.Unequip.Specific.Any(eval)) return true;
                }
                if (FastEquip != null)
                {
                    if (eval(this.FastEquip.Overall)) return true;
                    if (this.FastEquip.Specific != null && this.FastEquip.Specific.Any(eval)) return true;
                }
                if (eval(this.SoundLevel)) return true;
                if (eval(this.WAUDUnknown2)) return true;
                if (eval(this.WTUR)) return true;
                if (eval(this.ChargeFullPowerSeconds)) return true;
                if (eval(this.ChargeMinPowerPerShot)) return true;
                if (eval(this.ChargeCritBonus)) return true;
                if (eval(this.ChargeHoldInput)) return true;
                if (eval(this.ChargingAttack)) return true;
                if (eval(this.AttackDamage)) return true;
                if (eval(this.MinRange)) return true;
                if (eval(this.MaxRange)) return true;
                if (eval(this.OutOfRangeDamageMult)) return true;
                if (eval(this.CritDamageMult)) return true;
                if (eval(this.CriticalHitSpell)) return true;
                if (eval(this.CritEffectOnDeathOnly)) return true;
                if (eval(this.HitBehavior)) return true;
                if (eval(this.Resistance)) return true;
                if (eval(this.Skill)) return true;
                if (eval(this.WDMGUnknown4)) return true;
                if (eval(this.WDMGUnknown5)) return true;
                if (eval(this.WDMGUnknown6)) return true;
                if (eval(this.WDMGUnknown7)) return true;
                if (eval(this.WDMGUnknown8)) return true;
                if (eval(this.WDMGUnknown9)) return true;
                if (eval(this.CritChanceIncMult)) return true;
                if (this.DamageTypes != null)
                {
                    if (eval(this.DamageTypes.Overall)) return true;
                    if (this.DamageTypes.Specific != null)
                    {
                        foreach (var item in this.DamageTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.FiringType)) return true;
                if (eval(this.BurstCount)) return true;
                if (eval(this.RepeatableFire)) return true;
                if (eval(this.AttackSeconds)) return true;
                if (eval(this.FireSeconds)) return true;
                if (eval(this.AttackDelaySeconds)) return true;
                if (eval(this.BoltChargeSeconds)) return true;
                if (eval(this.BoltAction)) return true;
                if (eval(this.DisableShellCaseEject)) return true;
                if (eval(this.ShotsPerSecond)) return true;
                if (eval(this.WFIRUnknown7)) return true;
                if (eval(this.OverrideRateOfFire)) return true;
                if (eval(this.TriggerThresholdPrimaryTrigger)) return true;
                if (eval(this.WFIRUnknown10)) return true;
                if (eval(this.TriggerThresholdSecondStage)) return true;
                if (eval(this.HasStagedTrigger)) return true;
                if (eval(this.HasDualTrigger)) return true;
                if (eval(this.BurstDelaySeconds)) return true;
                if (eval(this.NonPlayable)) return true;
                if (eval(this.PlayerOnly)) return true;
                if (eval(this.WFLGUnknown1)) return true;
                if (eval(this.WFLGUnknown2)) return true;
                if (eval(this.CannotDrop)) return true;
                if (eval(this.MinorCrime)) return true;
                if (eval(this.NonHostile)) return true;
                if (eval(this.WFLGUnknown3)) return true;
                if (eval(this.WFLGUnknown4)) return true;
                if (eval(this.WFLGUnknown5)) return true;
                if (eval(this.WFLGUnknown6)) return true;
                if (eval(this.WFLGUnknown7)) return true;
                if (eval(this.WGENUnknown1)) return true;
                if (eval(this.BaseWeight)) return true;
                if (eval(this.BaseValue)) return true;
                if (eval(this.BaseSpeed)) return true;
                if (eval(this.AttackOxygenCost)) return true;
                if (eval(this.WeaponBarrel)) return true;
                if (eval(this.General)) return true;
                if (eval(this.WMELUnknown1)) return true;
                if (eval(this.MeleeBashDamage)) return true;
                if (eval(this.MeleeReach)) return true;
                if (eval(this.MeleeStagger)) return true;
                if (eval(this.Power)) return true;
                if (eval(this.PowerRechargeTime)) return true;
                if (eval(this.PowerRechargeDelay)) return true;
                if (eval(this.ConsumeAmmo)) return true;
                if (eval(this.PowerBonus)) return true;
                if (eval(this.UsePower)) return true;
                if (eval(this.QNAMUnknown1)) return true;
                if (eval(this.QNAMUnknown2)) return true;
                if (eval(this.QNAMUnknown3)) return true;
                if (eval(this.QNAMUnknown4)) return true;
                if (eval(this.QNAMUnknown5)) return true;
                if (eval(this.PowerConsumption)) return true;
                if (eval(this.WRLOUnknown1)) return true;
                if (eval(this.ReloadSpeed)) return true;
                if (eval(this.ReloadCharging)) return true;
                if (eval(this.ReloadSingle)) return true;
                if (eval(this.WRUM)) return true;
                if (eval(this.ApertureValueMin)) return true;
                if (eval(this.ApertureValueMax)) return true;
                if (eval(this.ApertureInputMin)) return true;
                if (eval(this.ApertureInputMax)) return true;
                if (eval(this.ApertureAcceleration)) return true;
                if (eval(this.ApertureDeceleration)) return true;
                if (eval(this.DistanceValueMin)) return true;
                if (eval(this.DistanceValueMax)) return true;
                if (eval(this.DistanceInputMin)) return true;
                if (eval(this.DistanceInputMax)) return true;
                if (eval(this.DistanceAcceleration)) return true;
                if (eval(this.DistanceDeceleration)) return true;
                if (eval(this.UseVariableRange)) return true;
                if (FirstPersonModel != null)
                {
                    if (eval(this.FirstPersonModel.Overall)) return true;
                    if (this.FirstPersonModel.Specific != null && this.FirstPersonModel.Specific.Any(eval)) return true;
                }
                if (eval(this.WVISUnknown1)) return true;
                if (eval(this.WVISUnknown2)) return true;
                if (eval(this.WVISUnknown3)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.ColorRemappingIndex)) return true;
                if (eval(this.ImageSpaceAdapter)) return true;
                if (eval(this.WTRMUnknown1)) return true;
                if (eval(this.WTRMUnknown2)) return true;
                if (eval(this.WTRMUnknown3)) return true;
                if (eval(this.WTRMUnknown4)) return true;
                if (eval(this.WTRMUnknown5)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Weapon.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.ObjectPaletteDefaults = this.ObjectPaletteDefaults == null ? null : new MaskItem<R, ObjectPaletteDefaults.Mask<R>?>(eval(this.ObjectPaletteDefaults.Overall), this.ObjectPaletteDefaults.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.XALG = eval(this.XALG);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.ObjectEffect = eval(this.ObjectEffect);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.BlockBashImpactDataSet = eval(this.BlockBashImpactDataSet);
                obj.AlternateBlockMaterial = eval(this.AlternateBlockMaterial);
                obj.PickupSound = this.PickupSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.PickupSound.Overall), this.PickupSound.Specific?.Translate(eval));
                obj.DropdownSound = this.DropdownSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.DropdownSound.Overall), this.DropdownSound.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Description = eval(this.Description);
                obj.InstanceNaming = eval(this.InstanceNaming);
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ObjectTemplates != null)
                {
                    obj.ObjectTemplates = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>?>(eval(this.ObjectTemplates.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>());
                    if (ObjectTemplates.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>();
                        obj.ObjectTemplates.Specific = l;
                        foreach (var item in ObjectTemplates.Specific)
                        {
                            MaskItemIndexed<R, ObjectTemplate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectTemplate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EmbeddedWeaponMod = eval(this.EmbeddedWeaponMod);
                obj.BNAM = eval(this.BNAM);
                obj.SightedTransitionSeconds = eval(this.SightedTransitionSeconds);
                obj.AimDownSightTemplate = eval(this.AimDownSightTemplate);
                obj.AimModel = eval(this.AimModel);
                obj.AccuracyBonus = eval(this.AccuracyBonus);
                obj.HasScope = eval(this.HasScope);
                obj.AimAssistTemplate = eval(this.AimAssistTemplate);
                obj.AimOpticalSightModel = eval(this.AimOpticalSightModel);
                obj.MeleeAimAssistModel = eval(this.MeleeAimAssistModel);
                obj.WAIMUnknown1 = eval(this.WAIMUnknown1);
                obj.WAIMUnknown2 = eval(this.WAIMUnknown2);
                obj.EnableMarkingTargets = eval(this.EnableMarkingTargets);
                obj.ReticleType = eval(this.ReticleType);
                obj.WAIMUnknown3 = eval(this.WAIMUnknown3);
                obj.WAIMUnknown4 = eval(this.WAIMUnknown4);
                obj.AmmoType = eval(this.AmmoType);
                obj.AmmoCapacity = eval(this.AmmoCapacity);
                obj.AmmoList = eval(this.AmmoList);
                obj.OverrideProjectile = eval(this.OverrideProjectile);
                obj.OverrideShellCasing = eval(this.OverrideShellCasing);
                obj.ProjectilesCount = eval(this.ProjectilesCount);
                obj.NpcsUseAmmo = eval(this.NpcsUseAmmo);
                obj.WAM2Unknown1 = eval(this.WAM2Unknown1);
                obj.WAMM = eval(this.WAMM);
                obj.MeleeOrCreature = this.MeleeOrCreature == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.MeleeOrCreature.Overall), this.MeleeOrCreature.Specific?.Translate(eval));
                obj.PrimedExplosive = this.PrimedExplosive == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.PrimedExplosive.Overall), this.PrimedExplosive.Specific?.Translate(eval));
                obj.DryFire = this.DryFire == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.DryFire.Overall), this.DryFire.Specific?.Translate(eval));
                obj.Idle = this.Idle == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Idle.Overall), this.Idle.Specific?.Translate(eval));
                obj.Equip = this.Equip == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Equip.Overall), this.Equip.Specific?.Translate(eval));
                obj.Unequip = this.Unequip == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Unequip.Overall), this.Unequip.Specific?.Translate(eval));
                obj.FastEquip = this.FastEquip == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.FastEquip.Overall), this.FastEquip.Specific?.Translate(eval));
                obj.SoundLevel = eval(this.SoundLevel);
                obj.WAUDUnknown2 = eval(this.WAUDUnknown2);
                obj.WTUR = eval(this.WTUR);
                obj.ChargeFullPowerSeconds = eval(this.ChargeFullPowerSeconds);
                obj.ChargeMinPowerPerShot = eval(this.ChargeMinPowerPerShot);
                obj.ChargeCritBonus = eval(this.ChargeCritBonus);
                obj.ChargeHoldInput = eval(this.ChargeHoldInput);
                obj.ChargingAttack = eval(this.ChargingAttack);
                obj.AttackDamage = eval(this.AttackDamage);
                obj.MinRange = eval(this.MinRange);
                obj.MaxRange = eval(this.MaxRange);
                obj.OutOfRangeDamageMult = eval(this.OutOfRangeDamageMult);
                obj.CritDamageMult = eval(this.CritDamageMult);
                obj.CriticalHitSpell = eval(this.CriticalHitSpell);
                obj.CritEffectOnDeathOnly = eval(this.CritEffectOnDeathOnly);
                obj.HitBehavior = eval(this.HitBehavior);
                obj.Resistance = eval(this.Resistance);
                obj.Skill = eval(this.Skill);
                obj.WDMGUnknown4 = eval(this.WDMGUnknown4);
                obj.WDMGUnknown5 = eval(this.WDMGUnknown5);
                obj.WDMGUnknown6 = eval(this.WDMGUnknown6);
                obj.WDMGUnknown7 = eval(this.WDMGUnknown7);
                obj.WDMGUnknown8 = eval(this.WDMGUnknown8);
                obj.WDMGUnknown9 = eval(this.WDMGUnknown9);
                obj.CritChanceIncMult = eval(this.CritChanceIncMult);
                if (DamageTypes != null)
                {
                    obj.DamageTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeaponDamageType.Mask<R>?>>?>(eval(this.DamageTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, WeaponDamageType.Mask<R>?>>());
                    if (DamageTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeaponDamageType.Mask<R>?>>();
                        obj.DamageTypes.Specific = l;
                        foreach (var item in DamageTypes.Specific)
                        {
                            MaskItemIndexed<R, WeaponDamageType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WeaponDamageType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.FiringType = eval(this.FiringType);
                obj.BurstCount = eval(this.BurstCount);
                obj.RepeatableFire = eval(this.RepeatableFire);
                obj.AttackSeconds = eval(this.AttackSeconds);
                obj.FireSeconds = eval(this.FireSeconds);
                obj.AttackDelaySeconds = eval(this.AttackDelaySeconds);
                obj.BoltChargeSeconds = eval(this.BoltChargeSeconds);
                obj.BoltAction = eval(this.BoltAction);
                obj.DisableShellCaseEject = eval(this.DisableShellCaseEject);
                obj.ShotsPerSecond = eval(this.ShotsPerSecond);
                obj.WFIRUnknown7 = eval(this.WFIRUnknown7);
                obj.OverrideRateOfFire = eval(this.OverrideRateOfFire);
                obj.TriggerThresholdPrimaryTrigger = eval(this.TriggerThresholdPrimaryTrigger);
                obj.WFIRUnknown10 = eval(this.WFIRUnknown10);
                obj.TriggerThresholdSecondStage = eval(this.TriggerThresholdSecondStage);
                obj.HasStagedTrigger = eval(this.HasStagedTrigger);
                obj.HasDualTrigger = eval(this.HasDualTrigger);
                obj.BurstDelaySeconds = eval(this.BurstDelaySeconds);
                obj.NonPlayable = eval(this.NonPlayable);
                obj.PlayerOnly = eval(this.PlayerOnly);
                obj.WFLGUnknown1 = eval(this.WFLGUnknown1);
                obj.WFLGUnknown2 = eval(this.WFLGUnknown2);
                obj.CannotDrop = eval(this.CannotDrop);
                obj.MinorCrime = eval(this.MinorCrime);
                obj.NonHostile = eval(this.NonHostile);
                obj.WFLGUnknown3 = eval(this.WFLGUnknown3);
                obj.WFLGUnknown4 = eval(this.WFLGUnknown4);
                obj.WFLGUnknown5 = eval(this.WFLGUnknown5);
                obj.WFLGUnknown6 = eval(this.WFLGUnknown6);
                obj.WFLGUnknown7 = eval(this.WFLGUnknown7);
                obj.WGENUnknown1 = eval(this.WGENUnknown1);
                obj.BaseWeight = eval(this.BaseWeight);
                obj.BaseValue = eval(this.BaseValue);
                obj.BaseSpeed = eval(this.BaseSpeed);
                obj.AttackOxygenCost = eval(this.AttackOxygenCost);
                obj.WeaponBarrel = eval(this.WeaponBarrel);
                obj.General = eval(this.General);
                obj.WMELUnknown1 = eval(this.WMELUnknown1);
                obj.MeleeBashDamage = eval(this.MeleeBashDamage);
                obj.MeleeReach = eval(this.MeleeReach);
                obj.MeleeStagger = eval(this.MeleeStagger);
                obj.Power = eval(this.Power);
                obj.PowerRechargeTime = eval(this.PowerRechargeTime);
                obj.PowerRechargeDelay = eval(this.PowerRechargeDelay);
                obj.ConsumeAmmo = eval(this.ConsumeAmmo);
                obj.PowerBonus = eval(this.PowerBonus);
                obj.UsePower = eval(this.UsePower);
                obj.QNAMUnknown1 = eval(this.QNAMUnknown1);
                obj.QNAMUnknown2 = eval(this.QNAMUnknown2);
                obj.QNAMUnknown3 = eval(this.QNAMUnknown3);
                obj.QNAMUnknown4 = eval(this.QNAMUnknown4);
                obj.QNAMUnknown5 = eval(this.QNAMUnknown5);
                obj.PowerConsumption = eval(this.PowerConsumption);
                obj.WRLOUnknown1 = eval(this.WRLOUnknown1);
                obj.ReloadSpeed = eval(this.ReloadSpeed);
                obj.ReloadCharging = eval(this.ReloadCharging);
                obj.ReloadSingle = eval(this.ReloadSingle);
                obj.WRUM = eval(this.WRUM);
                obj.ApertureValueMin = eval(this.ApertureValueMin);
                obj.ApertureValueMax = eval(this.ApertureValueMax);
                obj.ApertureInputMin = eval(this.ApertureInputMin);
                obj.ApertureInputMax = eval(this.ApertureInputMax);
                obj.ApertureAcceleration = eval(this.ApertureAcceleration);
                obj.ApertureDeceleration = eval(this.ApertureDeceleration);
                obj.DistanceValueMin = eval(this.DistanceValueMin);
                obj.DistanceValueMax = eval(this.DistanceValueMax);
                obj.DistanceInputMin = eval(this.DistanceInputMin);
                obj.DistanceInputMax = eval(this.DistanceInputMax);
                obj.DistanceAcceleration = eval(this.DistanceAcceleration);
                obj.DistanceDeceleration = eval(this.DistanceDeceleration);
                obj.UseVariableRange = eval(this.UseVariableRange);
                obj.FirstPersonModel = this.FirstPersonModel == null ? null : new MaskItem<R, FirstPersonModel.Mask<R>?>(eval(this.FirstPersonModel.Overall), this.FirstPersonModel.Specific?.Translate(eval));
                obj.WVISUnknown1 = eval(this.WVISUnknown1);
                obj.WVISUnknown2 = eval(this.WVISUnknown2);
                obj.WVISUnknown3 = eval(this.WVISUnknown3);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.ColorRemappingIndex = eval(this.ColorRemappingIndex);
                obj.ImageSpaceAdapter = eval(this.ImageSpaceAdapter);
                obj.WTRMUnknown1 = eval(this.WTRMUnknown1);
                obj.WTRMUnknown2 = eval(this.WTRMUnknown2);
                obj.WTRMUnknown3 = eval(this.WTRMUnknown3);
                obj.WTRMUnknown4 = eval(this.WTRMUnknown4);
                obj.WTRMUnknown5 = eval(this.WTRMUnknown5);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Weapon.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Weapon.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Weapon.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.ObjectPaletteDefaults?.Overall ?? true)
                    {
                        ObjectPaletteDefaults?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.ObjectEffect ?? true)
                    {
                        sb.AppendItem(ObjectEffect, "ObjectEffect");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        sb.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.BlockBashImpactDataSet ?? true)
                    {
                        sb.AppendItem(BlockBashImpactDataSet, "BlockBashImpactDataSet");
                    }
                    if (printMask?.AlternateBlockMaterial ?? true)
                    {
                        sb.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                    }
                    if (printMask?.PickupSound?.Overall ?? true)
                    {
                        PickupSound?.Print(sb);
                    }
                    if (printMask?.DropdownSound?.Overall ?? true)
                    {
                        DropdownSound?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.InstanceNaming ?? true)
                    {
                        sb.AppendItem(InstanceNaming, "InstanceNaming");
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        sb.AppendLine("AttachParentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ObjectTemplates?.Overall ?? true)
                        && ObjectTemplates is {} ObjectTemplatesItem)
                    {
                        sb.AppendLine("ObjectTemplates =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectTemplatesItem.Overall);
                            if (ObjectTemplatesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectTemplatesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EmbeddedWeaponMod ?? true)
                    {
                        sb.AppendItem(EmbeddedWeaponMod, "EmbeddedWeaponMod");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.SightedTransitionSeconds ?? true)
                    {
                        sb.AppendItem(SightedTransitionSeconds, "SightedTransitionSeconds");
                    }
                    if (printMask?.AimDownSightTemplate ?? true)
                    {
                        sb.AppendItem(AimDownSightTemplate, "AimDownSightTemplate");
                    }
                    if (printMask?.AimModel ?? true)
                    {
                        sb.AppendItem(AimModel, "AimModel");
                    }
                    if (printMask?.AccuracyBonus ?? true)
                    {
                        sb.AppendItem(AccuracyBonus, "AccuracyBonus");
                    }
                    if (printMask?.HasScope ?? true)
                    {
                        sb.AppendItem(HasScope, "HasScope");
                    }
                    if (printMask?.AimAssistTemplate ?? true)
                    {
                        sb.AppendItem(AimAssistTemplate, "AimAssistTemplate");
                    }
                    if (printMask?.AimOpticalSightModel ?? true)
                    {
                        sb.AppendItem(AimOpticalSightModel, "AimOpticalSightModel");
                    }
                    if (printMask?.MeleeAimAssistModel ?? true)
                    {
                        sb.AppendItem(MeleeAimAssistModel, "MeleeAimAssistModel");
                    }
                    if (printMask?.WAIMUnknown1 ?? true)
                    {
                        sb.AppendItem(WAIMUnknown1, "WAIMUnknown1");
                    }
                    if (printMask?.WAIMUnknown2 ?? true)
                    {
                        sb.AppendItem(WAIMUnknown2, "WAIMUnknown2");
                    }
                    if (printMask?.EnableMarkingTargets ?? true)
                    {
                        sb.AppendItem(EnableMarkingTargets, "EnableMarkingTargets");
                    }
                    if (printMask?.ReticleType ?? true)
                    {
                        sb.AppendItem(ReticleType, "ReticleType");
                    }
                    if (printMask?.WAIMUnknown3 ?? true)
                    {
                        sb.AppendItem(WAIMUnknown3, "WAIMUnknown3");
                    }
                    if (printMask?.WAIMUnknown4 ?? true)
                    {
                        sb.AppendItem(WAIMUnknown4, "WAIMUnknown4");
                    }
                    if (printMask?.AmmoType ?? true)
                    {
                        sb.AppendItem(AmmoType, "AmmoType");
                    }
                    if (printMask?.AmmoCapacity ?? true)
                    {
                        sb.AppendItem(AmmoCapacity, "AmmoCapacity");
                    }
                    if (printMask?.AmmoList ?? true)
                    {
                        sb.AppendItem(AmmoList, "AmmoList");
                    }
                    if (printMask?.OverrideProjectile ?? true)
                    {
                        sb.AppendItem(OverrideProjectile, "OverrideProjectile");
                    }
                    if (printMask?.OverrideShellCasing ?? true)
                    {
                        sb.AppendItem(OverrideShellCasing, "OverrideShellCasing");
                    }
                    if (printMask?.ProjectilesCount ?? true)
                    {
                        sb.AppendItem(ProjectilesCount, "ProjectilesCount");
                    }
                    if (printMask?.NpcsUseAmmo ?? true)
                    {
                        sb.AppendItem(NpcsUseAmmo, "NpcsUseAmmo");
                    }
                    if (printMask?.WAM2Unknown1 ?? true)
                    {
                        sb.AppendItem(WAM2Unknown1, "WAM2Unknown1");
                    }
                    if (printMask?.WAMM ?? true)
                    {
                        sb.AppendItem(WAMM, "WAMM");
                    }
                    if (printMask?.MeleeOrCreature?.Overall ?? true)
                    {
                        MeleeOrCreature?.Print(sb);
                    }
                    if (printMask?.PrimedExplosive?.Overall ?? true)
                    {
                        PrimedExplosive?.Print(sb);
                    }
                    if (printMask?.DryFire?.Overall ?? true)
                    {
                        DryFire?.Print(sb);
                    }
                    if (printMask?.Idle?.Overall ?? true)
                    {
                        Idle?.Print(sb);
                    }
                    if (printMask?.Equip?.Overall ?? true)
                    {
                        Equip?.Print(sb);
                    }
                    if (printMask?.Unequip?.Overall ?? true)
                    {
                        Unequip?.Print(sb);
                    }
                    if (printMask?.FastEquip?.Overall ?? true)
                    {
                        FastEquip?.Print(sb);
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        sb.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.WAUDUnknown2 ?? true)
                    {
                        sb.AppendItem(WAUDUnknown2, "WAUDUnknown2");
                    }
                    if (printMask?.WTUR ?? true)
                    {
                        sb.AppendItem(WTUR, "WTUR");
                    }
                    if (printMask?.ChargeFullPowerSeconds ?? true)
                    {
                        sb.AppendItem(ChargeFullPowerSeconds, "ChargeFullPowerSeconds");
                    }
                    if (printMask?.ChargeMinPowerPerShot ?? true)
                    {
                        sb.AppendItem(ChargeMinPowerPerShot, "ChargeMinPowerPerShot");
                    }
                    if (printMask?.ChargeCritBonus ?? true)
                    {
                        sb.AppendItem(ChargeCritBonus, "ChargeCritBonus");
                    }
                    if (printMask?.ChargeHoldInput ?? true)
                    {
                        sb.AppendItem(ChargeHoldInput, "ChargeHoldInput");
                    }
                    if (printMask?.ChargingAttack ?? true)
                    {
                        sb.AppendItem(ChargingAttack, "ChargingAttack");
                    }
                    if (printMask?.AttackDamage ?? true)
                    {
                        sb.AppendItem(AttackDamage, "AttackDamage");
                    }
                    if (printMask?.MinRange ?? true)
                    {
                        sb.AppendItem(MinRange, "MinRange");
                    }
                    if (printMask?.MaxRange ?? true)
                    {
                        sb.AppendItem(MaxRange, "MaxRange");
                    }
                    if (printMask?.OutOfRangeDamageMult ?? true)
                    {
                        sb.AppendItem(OutOfRangeDamageMult, "OutOfRangeDamageMult");
                    }
                    if (printMask?.CritDamageMult ?? true)
                    {
                        sb.AppendItem(CritDamageMult, "CritDamageMult");
                    }
                    if (printMask?.CriticalHitSpell ?? true)
                    {
                        sb.AppendItem(CriticalHitSpell, "CriticalHitSpell");
                    }
                    if (printMask?.CritEffectOnDeathOnly ?? true)
                    {
                        sb.AppendItem(CritEffectOnDeathOnly, "CritEffectOnDeathOnly");
                    }
                    if (printMask?.HitBehavior ?? true)
                    {
                        sb.AppendItem(HitBehavior, "HitBehavior");
                    }
                    if (printMask?.Resistance ?? true)
                    {
                        sb.AppendItem(Resistance, "Resistance");
                    }
                    if (printMask?.Skill ?? true)
                    {
                        sb.AppendItem(Skill, "Skill");
                    }
                    if (printMask?.WDMGUnknown4 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown4, "WDMGUnknown4");
                    }
                    if (printMask?.WDMGUnknown5 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown5, "WDMGUnknown5");
                    }
                    if (printMask?.WDMGUnknown6 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown6, "WDMGUnknown6");
                    }
                    if (printMask?.WDMGUnknown7 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown7, "WDMGUnknown7");
                    }
                    if (printMask?.WDMGUnknown8 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown8, "WDMGUnknown8");
                    }
                    if (printMask?.WDMGUnknown9 ?? true)
                    {
                        sb.AppendItem(WDMGUnknown9, "WDMGUnknown9");
                    }
                    if (printMask?.CritChanceIncMult ?? true)
                    {
                        sb.AppendItem(CritChanceIncMult, "CritChanceIncMult");
                    }
                    if ((printMask?.DamageTypes?.Overall ?? true)
                        && DamageTypes is {} DamageTypesItem)
                    {
                        sb.AppendLine("DamageTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DamageTypesItem.Overall);
                            if (DamageTypesItem.Specific != null)
                            {
                                foreach (var subItem in DamageTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FiringType ?? true)
                    {
                        sb.AppendItem(FiringType, "FiringType");
                    }
                    if (printMask?.BurstCount ?? true)
                    {
                        sb.AppendItem(BurstCount, "BurstCount");
                    }
                    if (printMask?.RepeatableFire ?? true)
                    {
                        sb.AppendItem(RepeatableFire, "RepeatableFire");
                    }
                    if (printMask?.AttackSeconds ?? true)
                    {
                        sb.AppendItem(AttackSeconds, "AttackSeconds");
                    }
                    if (printMask?.FireSeconds ?? true)
                    {
                        sb.AppendItem(FireSeconds, "FireSeconds");
                    }
                    if (printMask?.AttackDelaySeconds ?? true)
                    {
                        sb.AppendItem(AttackDelaySeconds, "AttackDelaySeconds");
                    }
                    if (printMask?.BoltChargeSeconds ?? true)
                    {
                        sb.AppendItem(BoltChargeSeconds, "BoltChargeSeconds");
                    }
                    if (printMask?.BoltAction ?? true)
                    {
                        sb.AppendItem(BoltAction, "BoltAction");
                    }
                    if (printMask?.DisableShellCaseEject ?? true)
                    {
                        sb.AppendItem(DisableShellCaseEject, "DisableShellCaseEject");
                    }
                    if (printMask?.ShotsPerSecond ?? true)
                    {
                        sb.AppendItem(ShotsPerSecond, "ShotsPerSecond");
                    }
                    if (printMask?.WFIRUnknown7 ?? true)
                    {
                        sb.AppendItem(WFIRUnknown7, "WFIRUnknown7");
                    }
                    if (printMask?.OverrideRateOfFire ?? true)
                    {
                        sb.AppendItem(OverrideRateOfFire, "OverrideRateOfFire");
                    }
                    if (printMask?.TriggerThresholdPrimaryTrigger ?? true)
                    {
                        sb.AppendItem(TriggerThresholdPrimaryTrigger, "TriggerThresholdPrimaryTrigger");
                    }
                    if (printMask?.WFIRUnknown10 ?? true)
                    {
                        sb.AppendItem(WFIRUnknown10, "WFIRUnknown10");
                    }
                    if (printMask?.TriggerThresholdSecondStage ?? true)
                    {
                        sb.AppendItem(TriggerThresholdSecondStage, "TriggerThresholdSecondStage");
                    }
                    if (printMask?.HasStagedTrigger ?? true)
                    {
                        sb.AppendItem(HasStagedTrigger, "HasStagedTrigger");
                    }
                    if (printMask?.HasDualTrigger ?? true)
                    {
                        sb.AppendItem(HasDualTrigger, "HasDualTrigger");
                    }
                    if (printMask?.BurstDelaySeconds ?? true)
                    {
                        sb.AppendItem(BurstDelaySeconds, "BurstDelaySeconds");
                    }
                    if (printMask?.NonPlayable ?? true)
                    {
                        sb.AppendItem(NonPlayable, "NonPlayable");
                    }
                    if (printMask?.PlayerOnly ?? true)
                    {
                        sb.AppendItem(PlayerOnly, "PlayerOnly");
                    }
                    if (printMask?.WFLGUnknown1 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown1, "WFLGUnknown1");
                    }
                    if (printMask?.WFLGUnknown2 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown2, "WFLGUnknown2");
                    }
                    if (printMask?.CannotDrop ?? true)
                    {
                        sb.AppendItem(CannotDrop, "CannotDrop");
                    }
                    if (printMask?.MinorCrime ?? true)
                    {
                        sb.AppendItem(MinorCrime, "MinorCrime");
                    }
                    if (printMask?.NonHostile ?? true)
                    {
                        sb.AppendItem(NonHostile, "NonHostile");
                    }
                    if (printMask?.WFLGUnknown3 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown3, "WFLGUnknown3");
                    }
                    if (printMask?.WFLGUnknown4 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown4, "WFLGUnknown4");
                    }
                    if (printMask?.WFLGUnknown5 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown5, "WFLGUnknown5");
                    }
                    if (printMask?.WFLGUnknown6 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown6, "WFLGUnknown6");
                    }
                    if (printMask?.WFLGUnknown7 ?? true)
                    {
                        sb.AppendItem(WFLGUnknown7, "WFLGUnknown7");
                    }
                    if (printMask?.WGENUnknown1 ?? true)
                    {
                        sb.AppendItem(WGENUnknown1, "WGENUnknown1");
                    }
                    if (printMask?.BaseWeight ?? true)
                    {
                        sb.AppendItem(BaseWeight, "BaseWeight");
                    }
                    if (printMask?.BaseValue ?? true)
                    {
                        sb.AppendItem(BaseValue, "BaseValue");
                    }
                    if (printMask?.BaseSpeed ?? true)
                    {
                        sb.AppendItem(BaseSpeed, "BaseSpeed");
                    }
                    if (printMask?.AttackOxygenCost ?? true)
                    {
                        sb.AppendItem(AttackOxygenCost, "AttackOxygenCost");
                    }
                    if (printMask?.WeaponBarrel ?? true)
                    {
                        sb.AppendItem(WeaponBarrel, "WeaponBarrel");
                    }
                    if (printMask?.General ?? true)
                    {
                        sb.AppendItem(General, "General");
                    }
                    if (printMask?.WMELUnknown1 ?? true)
                    {
                        sb.AppendItem(WMELUnknown1, "WMELUnknown1");
                    }
                    if (printMask?.MeleeBashDamage ?? true)
                    {
                        sb.AppendItem(MeleeBashDamage, "MeleeBashDamage");
                    }
                    if (printMask?.MeleeReach ?? true)
                    {
                        sb.AppendItem(MeleeReach, "MeleeReach");
                    }
                    if (printMask?.MeleeStagger ?? true)
                    {
                        sb.AppendItem(MeleeStagger, "MeleeStagger");
                    }
                    if (printMask?.Power ?? true)
                    {
                        sb.AppendItem(Power, "Power");
                    }
                    if (printMask?.PowerRechargeTime ?? true)
                    {
                        sb.AppendItem(PowerRechargeTime, "PowerRechargeTime");
                    }
                    if (printMask?.PowerRechargeDelay ?? true)
                    {
                        sb.AppendItem(PowerRechargeDelay, "PowerRechargeDelay");
                    }
                    if (printMask?.ConsumeAmmo ?? true)
                    {
                        sb.AppendItem(ConsumeAmmo, "ConsumeAmmo");
                    }
                    if (printMask?.PowerBonus ?? true)
                    {
                        sb.AppendItem(PowerBonus, "PowerBonus");
                    }
                    if (printMask?.UsePower ?? true)
                    {
                        sb.AppendItem(UsePower, "UsePower");
                    }
                    if (printMask?.QNAMUnknown1 ?? true)
                    {
                        sb.AppendItem(QNAMUnknown1, "QNAMUnknown1");
                    }
                    if (printMask?.QNAMUnknown2 ?? true)
                    {
                        sb.AppendItem(QNAMUnknown2, "QNAMUnknown2");
                    }
                    if (printMask?.QNAMUnknown3 ?? true)
                    {
                        sb.AppendItem(QNAMUnknown3, "QNAMUnknown3");
                    }
                    if (printMask?.QNAMUnknown4 ?? true)
                    {
                        sb.AppendItem(QNAMUnknown4, "QNAMUnknown4");
                    }
                    if (printMask?.QNAMUnknown5 ?? true)
                    {
                        sb.AppendItem(QNAMUnknown5, "QNAMUnknown5");
                    }
                    if (printMask?.PowerConsumption ?? true)
                    {
                        sb.AppendItem(PowerConsumption, "PowerConsumption");
                    }
                    if (printMask?.WRLOUnknown1 ?? true)
                    {
                        sb.AppendItem(WRLOUnknown1, "WRLOUnknown1");
                    }
                    if (printMask?.ReloadSpeed ?? true)
                    {
                        sb.AppendItem(ReloadSpeed, "ReloadSpeed");
                    }
                    if (printMask?.ReloadCharging ?? true)
                    {
                        sb.AppendItem(ReloadCharging, "ReloadCharging");
                    }
                    if (printMask?.ReloadSingle ?? true)
                    {
                        sb.AppendItem(ReloadSingle, "ReloadSingle");
                    }
                    if (printMask?.WRUM ?? true)
                    {
                        sb.AppendItem(WRUM, "WRUM");
                    }
                    if (printMask?.ApertureValueMin ?? true)
                    {
                        sb.AppendItem(ApertureValueMin, "ApertureValueMin");
                    }
                    if (printMask?.ApertureValueMax ?? true)
                    {
                        sb.AppendItem(ApertureValueMax, "ApertureValueMax");
                    }
                    if (printMask?.ApertureInputMin ?? true)
                    {
                        sb.AppendItem(ApertureInputMin, "ApertureInputMin");
                    }
                    if (printMask?.ApertureInputMax ?? true)
                    {
                        sb.AppendItem(ApertureInputMax, "ApertureInputMax");
                    }
                    if (printMask?.ApertureAcceleration ?? true)
                    {
                        sb.AppendItem(ApertureAcceleration, "ApertureAcceleration");
                    }
                    if (printMask?.ApertureDeceleration ?? true)
                    {
                        sb.AppendItem(ApertureDeceleration, "ApertureDeceleration");
                    }
                    if (printMask?.DistanceValueMin ?? true)
                    {
                        sb.AppendItem(DistanceValueMin, "DistanceValueMin");
                    }
                    if (printMask?.DistanceValueMax ?? true)
                    {
                        sb.AppendItem(DistanceValueMax, "DistanceValueMax");
                    }
                    if (printMask?.DistanceInputMin ?? true)
                    {
                        sb.AppendItem(DistanceInputMin, "DistanceInputMin");
                    }
                    if (printMask?.DistanceInputMax ?? true)
                    {
                        sb.AppendItem(DistanceInputMax, "DistanceInputMax");
                    }
                    if (printMask?.DistanceAcceleration ?? true)
                    {
                        sb.AppendItem(DistanceAcceleration, "DistanceAcceleration");
                    }
                    if (printMask?.DistanceDeceleration ?? true)
                    {
                        sb.AppendItem(DistanceDeceleration, "DistanceDeceleration");
                    }
                    if (printMask?.UseVariableRange ?? true)
                    {
                        sb.AppendItem(UseVariableRange, "UseVariableRange");
                    }
                    if (printMask?.FirstPersonModel?.Overall ?? true)
                    {
                        FirstPersonModel?.Print(sb);
                    }
                    if (printMask?.WVISUnknown1 ?? true)
                    {
                        sb.AppendItem(WVISUnknown1, "WVISUnknown1");
                    }
                    if (printMask?.WVISUnknown2 ?? true)
                    {
                        sb.AppendItem(WVISUnknown2, "WVISUnknown2");
                    }
                    if (printMask?.WVISUnknown3 ?? true)
                    {
                        sb.AppendItem(WVISUnknown3, "WVISUnknown3");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.ColorRemappingIndex ?? true)
                    {
                        sb.AppendItem(ColorRemappingIndex, "ColorRemappingIndex");
                    }
                    if (printMask?.ImageSpaceAdapter ?? true)
                    {
                        sb.AppendItem(ImageSpaceAdapter, "ImageSpaceAdapter");
                    }
                    if (printMask?.WTRMUnknown1 ?? true)
                    {
                        sb.AppendItem(WTRMUnknown1, "WTRMUnknown1");
                    }
                    if (printMask?.WTRMUnknown2 ?? true)
                    {
                        sb.AppendItem(WTRMUnknown2, "WTRMUnknown2");
                    }
                    if (printMask?.WTRMUnknown3 ?? true)
                    {
                        sb.AppendItem(WTRMUnknown3, "WTRMUnknown3");
                    }
                    if (printMask?.WTRMUnknown4 ?? true)
                    {
                        sb.AppendItem(WTRMUnknown4, "WTRMUnknown4");
                    }
                    if (printMask?.WTRMUnknown5 ?? true)
                    {
                        sb.AppendItem(WTRMUnknown5, "WTRMUnknown5");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>? ObjectPaletteDefaults;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public Exception? XALG;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? ObjectEffect;
            public Exception? EnchantmentAmount;
            public Exception? EquipmentType;
            public Exception? BlockBashImpactDataSet;
            public Exception? AlternateBlockMaterial;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? PickupSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? DropdownSound;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Description;
            public Exception? InstanceNaming;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>? ObjectTemplates;
            public Exception? EmbeddedWeaponMod;
            public Exception? BNAM;
            public Exception? SightedTransitionSeconds;
            public Exception? AimDownSightTemplate;
            public Exception? AimModel;
            public Exception? AccuracyBonus;
            public Exception? HasScope;
            public Exception? AimAssistTemplate;
            public Exception? AimOpticalSightModel;
            public Exception? MeleeAimAssistModel;
            public Exception? WAIMUnknown1;
            public Exception? WAIMUnknown2;
            public Exception? EnableMarkingTargets;
            public Exception? ReticleType;
            public Exception? WAIMUnknown3;
            public Exception? WAIMUnknown4;
            public Exception? AmmoType;
            public Exception? AmmoCapacity;
            public Exception? AmmoList;
            public Exception? OverrideProjectile;
            public Exception? OverrideShellCasing;
            public Exception? ProjectilesCount;
            public Exception? NpcsUseAmmo;
            public Exception? WAM2Unknown1;
            public Exception? WAMM;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? MeleeOrCreature;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? PrimedExplosive;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? DryFire;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Idle;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Equip;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Unequip;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? FastEquip;
            public Exception? SoundLevel;
            public Exception? WAUDUnknown2;
            public Exception? WTUR;
            public Exception? ChargeFullPowerSeconds;
            public Exception? ChargeMinPowerPerShot;
            public Exception? ChargeCritBonus;
            public Exception? ChargeHoldInput;
            public Exception? ChargingAttack;
            public Exception? AttackDamage;
            public Exception? MinRange;
            public Exception? MaxRange;
            public Exception? OutOfRangeDamageMult;
            public Exception? CritDamageMult;
            public Exception? CriticalHitSpell;
            public Exception? CritEffectOnDeathOnly;
            public Exception? HitBehavior;
            public Exception? Resistance;
            public Exception? Skill;
            public Exception? WDMGUnknown4;
            public Exception? WDMGUnknown5;
            public Exception? WDMGUnknown6;
            public Exception? WDMGUnknown7;
            public Exception? WDMGUnknown8;
            public Exception? WDMGUnknown9;
            public Exception? CritChanceIncMult;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeaponDamageType.ErrorMask?>>?>? DamageTypes;
            public Exception? FiringType;
            public Exception? BurstCount;
            public Exception? RepeatableFire;
            public Exception? AttackSeconds;
            public Exception? FireSeconds;
            public Exception? AttackDelaySeconds;
            public Exception? BoltChargeSeconds;
            public Exception? BoltAction;
            public Exception? DisableShellCaseEject;
            public Exception? ShotsPerSecond;
            public Exception? WFIRUnknown7;
            public Exception? OverrideRateOfFire;
            public Exception? TriggerThresholdPrimaryTrigger;
            public Exception? WFIRUnknown10;
            public Exception? TriggerThresholdSecondStage;
            public Exception? HasStagedTrigger;
            public Exception? HasDualTrigger;
            public Exception? BurstDelaySeconds;
            public Exception? NonPlayable;
            public Exception? PlayerOnly;
            public Exception? WFLGUnknown1;
            public Exception? WFLGUnknown2;
            public Exception? CannotDrop;
            public Exception? MinorCrime;
            public Exception? NonHostile;
            public Exception? WFLGUnknown3;
            public Exception? WFLGUnknown4;
            public Exception? WFLGUnknown5;
            public Exception? WFLGUnknown6;
            public Exception? WFLGUnknown7;
            public Exception? WGENUnknown1;
            public Exception? BaseWeight;
            public Exception? BaseValue;
            public Exception? BaseSpeed;
            public Exception? AttackOxygenCost;
            public Exception? WeaponBarrel;
            public Exception? General;
            public Exception? WMELUnknown1;
            public Exception? MeleeBashDamage;
            public Exception? MeleeReach;
            public Exception? MeleeStagger;
            public Exception? Power;
            public Exception? PowerRechargeTime;
            public Exception? PowerRechargeDelay;
            public Exception? ConsumeAmmo;
            public Exception? PowerBonus;
            public Exception? UsePower;
            public Exception? QNAMUnknown1;
            public Exception? QNAMUnknown2;
            public Exception? QNAMUnknown3;
            public Exception? QNAMUnknown4;
            public Exception? QNAMUnknown5;
            public Exception? PowerConsumption;
            public Exception? WRLOUnknown1;
            public Exception? ReloadSpeed;
            public Exception? ReloadCharging;
            public Exception? ReloadSingle;
            public Exception? WRUM;
            public Exception? ApertureValueMin;
            public Exception? ApertureValueMax;
            public Exception? ApertureInputMin;
            public Exception? ApertureInputMax;
            public Exception? ApertureAcceleration;
            public Exception? ApertureDeceleration;
            public Exception? DistanceValueMin;
            public Exception? DistanceValueMax;
            public Exception? DistanceInputMin;
            public Exception? DistanceInputMax;
            public Exception? DistanceAcceleration;
            public Exception? DistanceDeceleration;
            public Exception? UseVariableRange;
            public MaskItem<Exception?, FirstPersonModel.ErrorMask?>? FirstPersonModel;
            public Exception? WVISUnknown1;
            public Exception? WVISUnknown2;
            public Exception? WVISUnknown3;
            public Exception? ImpactDataSet;
            public Exception? ColorRemappingIndex;
            public Exception? ImageSpaceAdapter;
            public Exception? WTRMUnknown1;
            public Exception? WTRMUnknown2;
            public Exception? WTRMUnknown3;
            public Exception? WTRMUnknown4;
            public Exception? WTRMUnknown5;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Weapon_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Weapon_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case Weapon_FieldIndex.ObjectPaletteDefaults:
                        return ObjectPaletteDefaults;
                    case Weapon_FieldIndex.Transforms:
                        return Transforms;
                    case Weapon_FieldIndex.XALG:
                        return XALG;
                    case Weapon_FieldIndex.Components:
                        return Components;
                    case Weapon_FieldIndex.Name:
                        return Name;
                    case Weapon_FieldIndex.Model:
                        return Model;
                    case Weapon_FieldIndex.ObjectEffect:
                        return ObjectEffect;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case Weapon_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Weapon_FieldIndex.BlockBashImpactDataSet:
                        return BlockBashImpactDataSet;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        return AlternateBlockMaterial;
                    case Weapon_FieldIndex.PickupSound:
                        return PickupSound;
                    case Weapon_FieldIndex.DropdownSound:
                        return DropdownSound;
                    case Weapon_FieldIndex.Keywords:
                        return Keywords;
                    case Weapon_FieldIndex.Description:
                        return Description;
                    case Weapon_FieldIndex.InstanceNaming:
                        return InstanceNaming;
                    case Weapon_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Weapon_FieldIndex.ObjectTemplates:
                        return ObjectTemplates;
                    case Weapon_FieldIndex.EmbeddedWeaponMod:
                        return EmbeddedWeaponMod;
                    case Weapon_FieldIndex.BNAM:
                        return BNAM;
                    case Weapon_FieldIndex.SightedTransitionSeconds:
                        return SightedTransitionSeconds;
                    case Weapon_FieldIndex.AimDownSightTemplate:
                        return AimDownSightTemplate;
                    case Weapon_FieldIndex.AimModel:
                        return AimModel;
                    case Weapon_FieldIndex.AccuracyBonus:
                        return AccuracyBonus;
                    case Weapon_FieldIndex.HasScope:
                        return HasScope;
                    case Weapon_FieldIndex.AimAssistTemplate:
                        return AimAssistTemplate;
                    case Weapon_FieldIndex.AimOpticalSightModel:
                        return AimOpticalSightModel;
                    case Weapon_FieldIndex.MeleeAimAssistModel:
                        return MeleeAimAssistModel;
                    case Weapon_FieldIndex.WAIMUnknown1:
                        return WAIMUnknown1;
                    case Weapon_FieldIndex.WAIMUnknown2:
                        return WAIMUnknown2;
                    case Weapon_FieldIndex.EnableMarkingTargets:
                        return EnableMarkingTargets;
                    case Weapon_FieldIndex.ReticleType:
                        return ReticleType;
                    case Weapon_FieldIndex.WAIMUnknown3:
                        return WAIMUnknown3;
                    case Weapon_FieldIndex.WAIMUnknown4:
                        return WAIMUnknown4;
                    case Weapon_FieldIndex.AmmoType:
                        return AmmoType;
                    case Weapon_FieldIndex.AmmoCapacity:
                        return AmmoCapacity;
                    case Weapon_FieldIndex.AmmoList:
                        return AmmoList;
                    case Weapon_FieldIndex.OverrideProjectile:
                        return OverrideProjectile;
                    case Weapon_FieldIndex.OverrideShellCasing:
                        return OverrideShellCasing;
                    case Weapon_FieldIndex.ProjectilesCount:
                        return ProjectilesCount;
                    case Weapon_FieldIndex.NpcsUseAmmo:
                        return NpcsUseAmmo;
                    case Weapon_FieldIndex.WAM2Unknown1:
                        return WAM2Unknown1;
                    case Weapon_FieldIndex.WAMM:
                        return WAMM;
                    case Weapon_FieldIndex.MeleeOrCreature:
                        return MeleeOrCreature;
                    case Weapon_FieldIndex.PrimedExplosive:
                        return PrimedExplosive;
                    case Weapon_FieldIndex.DryFire:
                        return DryFire;
                    case Weapon_FieldIndex.Idle:
                        return Idle;
                    case Weapon_FieldIndex.Equip:
                        return Equip;
                    case Weapon_FieldIndex.Unequip:
                        return Unequip;
                    case Weapon_FieldIndex.FastEquip:
                        return FastEquip;
                    case Weapon_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Weapon_FieldIndex.WAUDUnknown2:
                        return WAUDUnknown2;
                    case Weapon_FieldIndex.WTUR:
                        return WTUR;
                    case Weapon_FieldIndex.ChargeFullPowerSeconds:
                        return ChargeFullPowerSeconds;
                    case Weapon_FieldIndex.ChargeMinPowerPerShot:
                        return ChargeMinPowerPerShot;
                    case Weapon_FieldIndex.ChargeCritBonus:
                        return ChargeCritBonus;
                    case Weapon_FieldIndex.ChargeHoldInput:
                        return ChargeHoldInput;
                    case Weapon_FieldIndex.ChargingAttack:
                        return ChargingAttack;
                    case Weapon_FieldIndex.AttackDamage:
                        return AttackDamage;
                    case Weapon_FieldIndex.MinRange:
                        return MinRange;
                    case Weapon_FieldIndex.MaxRange:
                        return MaxRange;
                    case Weapon_FieldIndex.OutOfRangeDamageMult:
                        return OutOfRangeDamageMult;
                    case Weapon_FieldIndex.CritDamageMult:
                        return CritDamageMult;
                    case Weapon_FieldIndex.CriticalHitSpell:
                        return CriticalHitSpell;
                    case Weapon_FieldIndex.CritEffectOnDeathOnly:
                        return CritEffectOnDeathOnly;
                    case Weapon_FieldIndex.HitBehavior:
                        return HitBehavior;
                    case Weapon_FieldIndex.Resistance:
                        return Resistance;
                    case Weapon_FieldIndex.Skill:
                        return Skill;
                    case Weapon_FieldIndex.WDMGUnknown4:
                        return WDMGUnknown4;
                    case Weapon_FieldIndex.WDMGUnknown5:
                        return WDMGUnknown5;
                    case Weapon_FieldIndex.WDMGUnknown6:
                        return WDMGUnknown6;
                    case Weapon_FieldIndex.WDMGUnknown7:
                        return WDMGUnknown7;
                    case Weapon_FieldIndex.WDMGUnknown8:
                        return WDMGUnknown8;
                    case Weapon_FieldIndex.WDMGUnknown9:
                        return WDMGUnknown9;
                    case Weapon_FieldIndex.CritChanceIncMult:
                        return CritChanceIncMult;
                    case Weapon_FieldIndex.DamageTypes:
                        return DamageTypes;
                    case Weapon_FieldIndex.FiringType:
                        return FiringType;
                    case Weapon_FieldIndex.BurstCount:
                        return BurstCount;
                    case Weapon_FieldIndex.RepeatableFire:
                        return RepeatableFire;
                    case Weapon_FieldIndex.AttackSeconds:
                        return AttackSeconds;
                    case Weapon_FieldIndex.FireSeconds:
                        return FireSeconds;
                    case Weapon_FieldIndex.AttackDelaySeconds:
                        return AttackDelaySeconds;
                    case Weapon_FieldIndex.BoltChargeSeconds:
                        return BoltChargeSeconds;
                    case Weapon_FieldIndex.BoltAction:
                        return BoltAction;
                    case Weapon_FieldIndex.DisableShellCaseEject:
                        return DisableShellCaseEject;
                    case Weapon_FieldIndex.ShotsPerSecond:
                        return ShotsPerSecond;
                    case Weapon_FieldIndex.WFIRUnknown7:
                        return WFIRUnknown7;
                    case Weapon_FieldIndex.OverrideRateOfFire:
                        return OverrideRateOfFire;
                    case Weapon_FieldIndex.TriggerThresholdPrimaryTrigger:
                        return TriggerThresholdPrimaryTrigger;
                    case Weapon_FieldIndex.WFIRUnknown10:
                        return WFIRUnknown10;
                    case Weapon_FieldIndex.TriggerThresholdSecondStage:
                        return TriggerThresholdSecondStage;
                    case Weapon_FieldIndex.HasStagedTrigger:
                        return HasStagedTrigger;
                    case Weapon_FieldIndex.HasDualTrigger:
                        return HasDualTrigger;
                    case Weapon_FieldIndex.BurstDelaySeconds:
                        return BurstDelaySeconds;
                    case Weapon_FieldIndex.NonPlayable:
                        return NonPlayable;
                    case Weapon_FieldIndex.PlayerOnly:
                        return PlayerOnly;
                    case Weapon_FieldIndex.WFLGUnknown1:
                        return WFLGUnknown1;
                    case Weapon_FieldIndex.WFLGUnknown2:
                        return WFLGUnknown2;
                    case Weapon_FieldIndex.CannotDrop:
                        return CannotDrop;
                    case Weapon_FieldIndex.MinorCrime:
                        return MinorCrime;
                    case Weapon_FieldIndex.NonHostile:
                        return NonHostile;
                    case Weapon_FieldIndex.WFLGUnknown3:
                        return WFLGUnknown3;
                    case Weapon_FieldIndex.WFLGUnknown4:
                        return WFLGUnknown4;
                    case Weapon_FieldIndex.WFLGUnknown5:
                        return WFLGUnknown5;
                    case Weapon_FieldIndex.WFLGUnknown6:
                        return WFLGUnknown6;
                    case Weapon_FieldIndex.WFLGUnknown7:
                        return WFLGUnknown7;
                    case Weapon_FieldIndex.WGENUnknown1:
                        return WGENUnknown1;
                    case Weapon_FieldIndex.BaseWeight:
                        return BaseWeight;
                    case Weapon_FieldIndex.BaseValue:
                        return BaseValue;
                    case Weapon_FieldIndex.BaseSpeed:
                        return BaseSpeed;
                    case Weapon_FieldIndex.AttackOxygenCost:
                        return AttackOxygenCost;
                    case Weapon_FieldIndex.WeaponBarrel:
                        return WeaponBarrel;
                    case Weapon_FieldIndex.General:
                        return General;
                    case Weapon_FieldIndex.WMELUnknown1:
                        return WMELUnknown1;
                    case Weapon_FieldIndex.MeleeBashDamage:
                        return MeleeBashDamage;
                    case Weapon_FieldIndex.MeleeReach:
                        return MeleeReach;
                    case Weapon_FieldIndex.MeleeStagger:
                        return MeleeStagger;
                    case Weapon_FieldIndex.Power:
                        return Power;
                    case Weapon_FieldIndex.PowerRechargeTime:
                        return PowerRechargeTime;
                    case Weapon_FieldIndex.PowerRechargeDelay:
                        return PowerRechargeDelay;
                    case Weapon_FieldIndex.ConsumeAmmo:
                        return ConsumeAmmo;
                    case Weapon_FieldIndex.PowerBonus:
                        return PowerBonus;
                    case Weapon_FieldIndex.UsePower:
                        return UsePower;
                    case Weapon_FieldIndex.QNAMUnknown1:
                        return QNAMUnknown1;
                    case Weapon_FieldIndex.QNAMUnknown2:
                        return QNAMUnknown2;
                    case Weapon_FieldIndex.QNAMUnknown3:
                        return QNAMUnknown3;
                    case Weapon_FieldIndex.QNAMUnknown4:
                        return QNAMUnknown4;
                    case Weapon_FieldIndex.QNAMUnknown5:
                        return QNAMUnknown5;
                    case Weapon_FieldIndex.PowerConsumption:
                        return PowerConsumption;
                    case Weapon_FieldIndex.WRLOUnknown1:
                        return WRLOUnknown1;
                    case Weapon_FieldIndex.ReloadSpeed:
                        return ReloadSpeed;
                    case Weapon_FieldIndex.ReloadCharging:
                        return ReloadCharging;
                    case Weapon_FieldIndex.ReloadSingle:
                        return ReloadSingle;
                    case Weapon_FieldIndex.WRUM:
                        return WRUM;
                    case Weapon_FieldIndex.ApertureValueMin:
                        return ApertureValueMin;
                    case Weapon_FieldIndex.ApertureValueMax:
                        return ApertureValueMax;
                    case Weapon_FieldIndex.ApertureInputMin:
                        return ApertureInputMin;
                    case Weapon_FieldIndex.ApertureInputMax:
                        return ApertureInputMax;
                    case Weapon_FieldIndex.ApertureAcceleration:
                        return ApertureAcceleration;
                    case Weapon_FieldIndex.ApertureDeceleration:
                        return ApertureDeceleration;
                    case Weapon_FieldIndex.DistanceValueMin:
                        return DistanceValueMin;
                    case Weapon_FieldIndex.DistanceValueMax:
                        return DistanceValueMax;
                    case Weapon_FieldIndex.DistanceInputMin:
                        return DistanceInputMin;
                    case Weapon_FieldIndex.DistanceInputMax:
                        return DistanceInputMax;
                    case Weapon_FieldIndex.DistanceAcceleration:
                        return DistanceAcceleration;
                    case Weapon_FieldIndex.DistanceDeceleration:
                        return DistanceDeceleration;
                    case Weapon_FieldIndex.UseVariableRange:
                        return UseVariableRange;
                    case Weapon_FieldIndex.FirstPersonModel:
                        return FirstPersonModel;
                    case Weapon_FieldIndex.WVISUnknown1:
                        return WVISUnknown1;
                    case Weapon_FieldIndex.WVISUnknown2:
                        return WVISUnknown2;
                    case Weapon_FieldIndex.WVISUnknown3:
                        return WVISUnknown3;
                    case Weapon_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Weapon_FieldIndex.ColorRemappingIndex:
                        return ColorRemappingIndex;
                    case Weapon_FieldIndex.ImageSpaceAdapter:
                        return ImageSpaceAdapter;
                    case Weapon_FieldIndex.WTRMUnknown1:
                        return WTRMUnknown1;
                    case Weapon_FieldIndex.WTRMUnknown2:
                        return WTRMUnknown2;
                    case Weapon_FieldIndex.WTRMUnknown3:
                        return WTRMUnknown3;
                    case Weapon_FieldIndex.WTRMUnknown4:
                        return WTRMUnknown4;
                    case Weapon_FieldIndex.WTRMUnknown5:
                        return WTRMUnknown5;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case Weapon_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = new MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case Weapon_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Weapon_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.ObjectEffect:
                        this.ObjectEffect = ex;
                        break;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case Weapon_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Weapon_FieldIndex.BlockBashImpactDataSet:
                        this.BlockBashImpactDataSet = ex;
                        break;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = ex;
                        break;
                    case Weapon_FieldIndex.PickupSound:
                        this.PickupSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.DropdownSound:
                        this.DropdownSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Weapon_FieldIndex.InstanceNaming:
                        this.InstanceNaming = ex;
                        break;
                    case Weapon_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.EmbeddedWeaponMod:
                        this.EmbeddedWeaponMod = ex;
                        break;
                    case Weapon_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case Weapon_FieldIndex.SightedTransitionSeconds:
                        this.SightedTransitionSeconds = ex;
                        break;
                    case Weapon_FieldIndex.AimDownSightTemplate:
                        this.AimDownSightTemplate = ex;
                        break;
                    case Weapon_FieldIndex.AimModel:
                        this.AimModel = ex;
                        break;
                    case Weapon_FieldIndex.AccuracyBonus:
                        this.AccuracyBonus = ex;
                        break;
                    case Weapon_FieldIndex.HasScope:
                        this.HasScope = ex;
                        break;
                    case Weapon_FieldIndex.AimAssistTemplate:
                        this.AimAssistTemplate = ex;
                        break;
                    case Weapon_FieldIndex.AimOpticalSightModel:
                        this.AimOpticalSightModel = ex;
                        break;
                    case Weapon_FieldIndex.MeleeAimAssistModel:
                        this.MeleeAimAssistModel = ex;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown1:
                        this.WAIMUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown2:
                        this.WAIMUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.EnableMarkingTargets:
                        this.EnableMarkingTargets = ex;
                        break;
                    case Weapon_FieldIndex.ReticleType:
                        this.ReticleType = ex;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown3:
                        this.WAIMUnknown3 = ex;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown4:
                        this.WAIMUnknown4 = ex;
                        break;
                    case Weapon_FieldIndex.AmmoType:
                        this.AmmoType = ex;
                        break;
                    case Weapon_FieldIndex.AmmoCapacity:
                        this.AmmoCapacity = ex;
                        break;
                    case Weapon_FieldIndex.AmmoList:
                        this.AmmoList = ex;
                        break;
                    case Weapon_FieldIndex.OverrideProjectile:
                        this.OverrideProjectile = ex;
                        break;
                    case Weapon_FieldIndex.OverrideShellCasing:
                        this.OverrideShellCasing = ex;
                        break;
                    case Weapon_FieldIndex.ProjectilesCount:
                        this.ProjectilesCount = ex;
                        break;
                    case Weapon_FieldIndex.NpcsUseAmmo:
                        this.NpcsUseAmmo = ex;
                        break;
                    case Weapon_FieldIndex.WAM2Unknown1:
                        this.WAM2Unknown1 = ex;
                        break;
                    case Weapon_FieldIndex.WAMM:
                        this.WAMM = ex;
                        break;
                    case Weapon_FieldIndex.MeleeOrCreature:
                        this.MeleeOrCreature = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.PrimedExplosive:
                        this.PrimedExplosive = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.DryFire:
                        this.DryFire = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Idle:
                        this.Idle = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Equip:
                        this.Equip = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Unequip:
                        this.Unequip = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.FastEquip:
                        this.FastEquip = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Weapon_FieldIndex.WAUDUnknown2:
                        this.WAUDUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.WTUR:
                        this.WTUR = ex;
                        break;
                    case Weapon_FieldIndex.ChargeFullPowerSeconds:
                        this.ChargeFullPowerSeconds = ex;
                        break;
                    case Weapon_FieldIndex.ChargeMinPowerPerShot:
                        this.ChargeMinPowerPerShot = ex;
                        break;
                    case Weapon_FieldIndex.ChargeCritBonus:
                        this.ChargeCritBonus = ex;
                        break;
                    case Weapon_FieldIndex.ChargeHoldInput:
                        this.ChargeHoldInput = ex;
                        break;
                    case Weapon_FieldIndex.ChargingAttack:
                        this.ChargingAttack = ex;
                        break;
                    case Weapon_FieldIndex.AttackDamage:
                        this.AttackDamage = ex;
                        break;
                    case Weapon_FieldIndex.MinRange:
                        this.MinRange = ex;
                        break;
                    case Weapon_FieldIndex.MaxRange:
                        this.MaxRange = ex;
                        break;
                    case Weapon_FieldIndex.OutOfRangeDamageMult:
                        this.OutOfRangeDamageMult = ex;
                        break;
                    case Weapon_FieldIndex.CritDamageMult:
                        this.CritDamageMult = ex;
                        break;
                    case Weapon_FieldIndex.CriticalHitSpell:
                        this.CriticalHitSpell = ex;
                        break;
                    case Weapon_FieldIndex.CritEffectOnDeathOnly:
                        this.CritEffectOnDeathOnly = ex;
                        break;
                    case Weapon_FieldIndex.HitBehavior:
                        this.HitBehavior = ex;
                        break;
                    case Weapon_FieldIndex.Resistance:
                        this.Resistance = ex;
                        break;
                    case Weapon_FieldIndex.Skill:
                        this.Skill = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown4:
                        this.WDMGUnknown4 = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown5:
                        this.WDMGUnknown5 = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown6:
                        this.WDMGUnknown6 = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown7:
                        this.WDMGUnknown7 = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown8:
                        this.WDMGUnknown8 = ex;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown9:
                        this.WDMGUnknown9 = ex;
                        break;
                    case Weapon_FieldIndex.CritChanceIncMult:
                        this.CritChanceIncMult = ex;
                        break;
                    case Weapon_FieldIndex.DamageTypes:
                        this.DamageTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeaponDamageType.ErrorMask?>>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.FiringType:
                        this.FiringType = ex;
                        break;
                    case Weapon_FieldIndex.BurstCount:
                        this.BurstCount = ex;
                        break;
                    case Weapon_FieldIndex.RepeatableFire:
                        this.RepeatableFire = ex;
                        break;
                    case Weapon_FieldIndex.AttackSeconds:
                        this.AttackSeconds = ex;
                        break;
                    case Weapon_FieldIndex.FireSeconds:
                        this.FireSeconds = ex;
                        break;
                    case Weapon_FieldIndex.AttackDelaySeconds:
                        this.AttackDelaySeconds = ex;
                        break;
                    case Weapon_FieldIndex.BoltChargeSeconds:
                        this.BoltChargeSeconds = ex;
                        break;
                    case Weapon_FieldIndex.BoltAction:
                        this.BoltAction = ex;
                        break;
                    case Weapon_FieldIndex.DisableShellCaseEject:
                        this.DisableShellCaseEject = ex;
                        break;
                    case Weapon_FieldIndex.ShotsPerSecond:
                        this.ShotsPerSecond = ex;
                        break;
                    case Weapon_FieldIndex.WFIRUnknown7:
                        this.WFIRUnknown7 = ex;
                        break;
                    case Weapon_FieldIndex.OverrideRateOfFire:
                        this.OverrideRateOfFire = ex;
                        break;
                    case Weapon_FieldIndex.TriggerThresholdPrimaryTrigger:
                        this.TriggerThresholdPrimaryTrigger = ex;
                        break;
                    case Weapon_FieldIndex.WFIRUnknown10:
                        this.WFIRUnknown10 = ex;
                        break;
                    case Weapon_FieldIndex.TriggerThresholdSecondStage:
                        this.TriggerThresholdSecondStage = ex;
                        break;
                    case Weapon_FieldIndex.HasStagedTrigger:
                        this.HasStagedTrigger = ex;
                        break;
                    case Weapon_FieldIndex.HasDualTrigger:
                        this.HasDualTrigger = ex;
                        break;
                    case Weapon_FieldIndex.BurstDelaySeconds:
                        this.BurstDelaySeconds = ex;
                        break;
                    case Weapon_FieldIndex.NonPlayable:
                        this.NonPlayable = ex;
                        break;
                    case Weapon_FieldIndex.PlayerOnly:
                        this.PlayerOnly = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown1:
                        this.WFLGUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown2:
                        this.WFLGUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.CannotDrop:
                        this.CannotDrop = ex;
                        break;
                    case Weapon_FieldIndex.MinorCrime:
                        this.MinorCrime = ex;
                        break;
                    case Weapon_FieldIndex.NonHostile:
                        this.NonHostile = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown3:
                        this.WFLGUnknown3 = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown4:
                        this.WFLGUnknown4 = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown5:
                        this.WFLGUnknown5 = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown6:
                        this.WFLGUnknown6 = ex;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown7:
                        this.WFLGUnknown7 = ex;
                        break;
                    case Weapon_FieldIndex.WGENUnknown1:
                        this.WGENUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.BaseWeight:
                        this.BaseWeight = ex;
                        break;
                    case Weapon_FieldIndex.BaseValue:
                        this.BaseValue = ex;
                        break;
                    case Weapon_FieldIndex.BaseSpeed:
                        this.BaseSpeed = ex;
                        break;
                    case Weapon_FieldIndex.AttackOxygenCost:
                        this.AttackOxygenCost = ex;
                        break;
                    case Weapon_FieldIndex.WeaponBarrel:
                        this.WeaponBarrel = ex;
                        break;
                    case Weapon_FieldIndex.General:
                        this.General = ex;
                        break;
                    case Weapon_FieldIndex.WMELUnknown1:
                        this.WMELUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.MeleeBashDamage:
                        this.MeleeBashDamage = ex;
                        break;
                    case Weapon_FieldIndex.MeleeReach:
                        this.MeleeReach = ex;
                        break;
                    case Weapon_FieldIndex.MeleeStagger:
                        this.MeleeStagger = ex;
                        break;
                    case Weapon_FieldIndex.Power:
                        this.Power = ex;
                        break;
                    case Weapon_FieldIndex.PowerRechargeTime:
                        this.PowerRechargeTime = ex;
                        break;
                    case Weapon_FieldIndex.PowerRechargeDelay:
                        this.PowerRechargeDelay = ex;
                        break;
                    case Weapon_FieldIndex.ConsumeAmmo:
                        this.ConsumeAmmo = ex;
                        break;
                    case Weapon_FieldIndex.PowerBonus:
                        this.PowerBonus = ex;
                        break;
                    case Weapon_FieldIndex.UsePower:
                        this.UsePower = ex;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown1:
                        this.QNAMUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown2:
                        this.QNAMUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown3:
                        this.QNAMUnknown3 = ex;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown4:
                        this.QNAMUnknown4 = ex;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown5:
                        this.QNAMUnknown5 = ex;
                        break;
                    case Weapon_FieldIndex.PowerConsumption:
                        this.PowerConsumption = ex;
                        break;
                    case Weapon_FieldIndex.WRLOUnknown1:
                        this.WRLOUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.ReloadSpeed:
                        this.ReloadSpeed = ex;
                        break;
                    case Weapon_FieldIndex.ReloadCharging:
                        this.ReloadCharging = ex;
                        break;
                    case Weapon_FieldIndex.ReloadSingle:
                        this.ReloadSingle = ex;
                        break;
                    case Weapon_FieldIndex.WRUM:
                        this.WRUM = ex;
                        break;
                    case Weapon_FieldIndex.ApertureValueMin:
                        this.ApertureValueMin = ex;
                        break;
                    case Weapon_FieldIndex.ApertureValueMax:
                        this.ApertureValueMax = ex;
                        break;
                    case Weapon_FieldIndex.ApertureInputMin:
                        this.ApertureInputMin = ex;
                        break;
                    case Weapon_FieldIndex.ApertureInputMax:
                        this.ApertureInputMax = ex;
                        break;
                    case Weapon_FieldIndex.ApertureAcceleration:
                        this.ApertureAcceleration = ex;
                        break;
                    case Weapon_FieldIndex.ApertureDeceleration:
                        this.ApertureDeceleration = ex;
                        break;
                    case Weapon_FieldIndex.DistanceValueMin:
                        this.DistanceValueMin = ex;
                        break;
                    case Weapon_FieldIndex.DistanceValueMax:
                        this.DistanceValueMax = ex;
                        break;
                    case Weapon_FieldIndex.DistanceInputMin:
                        this.DistanceInputMin = ex;
                        break;
                    case Weapon_FieldIndex.DistanceInputMax:
                        this.DistanceInputMax = ex;
                        break;
                    case Weapon_FieldIndex.DistanceAcceleration:
                        this.DistanceAcceleration = ex;
                        break;
                    case Weapon_FieldIndex.DistanceDeceleration:
                        this.DistanceDeceleration = ex;
                        break;
                    case Weapon_FieldIndex.UseVariableRange:
                        this.UseVariableRange = ex;
                        break;
                    case Weapon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = new MaskItem<Exception?, FirstPersonModel.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.WVISUnknown1:
                        this.WVISUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.WVISUnknown2:
                        this.WVISUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.WVISUnknown3:
                        this.WVISUnknown3 = ex;
                        break;
                    case Weapon_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Weapon_FieldIndex.ColorRemappingIndex:
                        this.ColorRemappingIndex = ex;
                        break;
                    case Weapon_FieldIndex.ImageSpaceAdapter:
                        this.ImageSpaceAdapter = ex;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown1:
                        this.WTRMUnknown1 = ex;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown2:
                        this.WTRMUnknown2 = ex;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown3:
                        this.WTRMUnknown3 = ex;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown4:
                        this.WTRMUnknown4 = ex;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown5:
                        this.WTRMUnknown5 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = (MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Weapon_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.ObjectEffect:
                        this.ObjectEffect = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BlockBashImpactDataSet:
                        this.BlockBashImpactDataSet = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PickupSound:
                        this.PickupSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.DropdownSound:
                        this.DropdownSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weapon_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.InstanceNaming:
                        this.InstanceNaming = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weapon_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>)obj;
                        break;
                    case Weapon_FieldIndex.EmbeddedWeaponMod:
                        this.EmbeddedWeaponMod = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.SightedTransitionSeconds:
                        this.SightedTransitionSeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AimDownSightTemplate:
                        this.AimDownSightTemplate = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AimModel:
                        this.AimModel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AccuracyBonus:
                        this.AccuracyBonus = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.HasScope:
                        this.HasScope = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AimAssistTemplate:
                        this.AimAssistTemplate = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AimOpticalSightModel:
                        this.AimOpticalSightModel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MeleeAimAssistModel:
                        this.MeleeAimAssistModel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown1:
                        this.WAIMUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown2:
                        this.WAIMUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.EnableMarkingTargets:
                        this.EnableMarkingTargets = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ReticleType:
                        this.ReticleType = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown3:
                        this.WAIMUnknown3 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAIMUnknown4:
                        this.WAIMUnknown4 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AmmoType:
                        this.AmmoType = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AmmoCapacity:
                        this.AmmoCapacity = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AmmoList:
                        this.AmmoList = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.OverrideProjectile:
                        this.OverrideProjectile = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.OverrideShellCasing:
                        this.OverrideShellCasing = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ProjectilesCount:
                        this.ProjectilesCount = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.NpcsUseAmmo:
                        this.NpcsUseAmmo = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAM2Unknown1:
                        this.WAM2Unknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAMM:
                        this.WAMM = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MeleeOrCreature:
                        this.MeleeOrCreature = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.PrimedExplosive:
                        this.PrimedExplosive = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.DryFire:
                        this.DryFire = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Idle:
                        this.Idle = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Equip:
                        this.Equip = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Unequip:
                        this.Unequip = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.FastEquip:
                        this.FastEquip = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WAUDUnknown2:
                        this.WAUDUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTUR:
                        this.WTUR = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ChargeFullPowerSeconds:
                        this.ChargeFullPowerSeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ChargeMinPowerPerShot:
                        this.ChargeMinPowerPerShot = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ChargeCritBonus:
                        this.ChargeCritBonus = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ChargeHoldInput:
                        this.ChargeHoldInput = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ChargingAttack:
                        this.ChargingAttack = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackDamage:
                        this.AttackDamage = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MinRange:
                        this.MinRange = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MaxRange:
                        this.MaxRange = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.OutOfRangeDamageMult:
                        this.OutOfRangeDamageMult = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.CritDamageMult:
                        this.CritDamageMult = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.CriticalHitSpell:
                        this.CriticalHitSpell = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.CritEffectOnDeathOnly:
                        this.CritEffectOnDeathOnly = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.HitBehavior:
                        this.HitBehavior = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Resistance:
                        this.Resistance = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Skill:
                        this.Skill = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown4:
                        this.WDMGUnknown4 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown5:
                        this.WDMGUnknown5 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown6:
                        this.WDMGUnknown6 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown7:
                        this.WDMGUnknown7 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown8:
                        this.WDMGUnknown8 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WDMGUnknown9:
                        this.WDMGUnknown9 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.CritChanceIncMult:
                        this.CritChanceIncMult = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DamageTypes:
                        this.DamageTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeaponDamageType.ErrorMask?>>?>)obj;
                        break;
                    case Weapon_FieldIndex.FiringType:
                        this.FiringType = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BurstCount:
                        this.BurstCount = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.RepeatableFire:
                        this.RepeatableFire = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackSeconds:
                        this.AttackSeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.FireSeconds:
                        this.FireSeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackDelaySeconds:
                        this.AttackDelaySeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BoltChargeSeconds:
                        this.BoltChargeSeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BoltAction:
                        this.BoltAction = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DisableShellCaseEject:
                        this.DisableShellCaseEject = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ShotsPerSecond:
                        this.ShotsPerSecond = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFIRUnknown7:
                        this.WFIRUnknown7 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.OverrideRateOfFire:
                        this.OverrideRateOfFire = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.TriggerThresholdPrimaryTrigger:
                        this.TriggerThresholdPrimaryTrigger = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFIRUnknown10:
                        this.WFIRUnknown10 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.TriggerThresholdSecondStage:
                        this.TriggerThresholdSecondStage = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.HasStagedTrigger:
                        this.HasStagedTrigger = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.HasDualTrigger:
                        this.HasDualTrigger = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BurstDelaySeconds:
                        this.BurstDelaySeconds = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.NonPlayable:
                        this.NonPlayable = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PlayerOnly:
                        this.PlayerOnly = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown1:
                        this.WFLGUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown2:
                        this.WFLGUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.CannotDrop:
                        this.CannotDrop = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MinorCrime:
                        this.MinorCrime = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.NonHostile:
                        this.NonHostile = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown3:
                        this.WFLGUnknown3 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown4:
                        this.WFLGUnknown4 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown5:
                        this.WFLGUnknown5 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown6:
                        this.WFLGUnknown6 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WFLGUnknown7:
                        this.WFLGUnknown7 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WGENUnknown1:
                        this.WGENUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BaseWeight:
                        this.BaseWeight = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BaseValue:
                        this.BaseValue = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BaseSpeed:
                        this.BaseSpeed = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackOxygenCost:
                        this.AttackOxygenCost = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WeaponBarrel:
                        this.WeaponBarrel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.General:
                        this.General = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WMELUnknown1:
                        this.WMELUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MeleeBashDamage:
                        this.MeleeBashDamage = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MeleeReach:
                        this.MeleeReach = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.MeleeStagger:
                        this.MeleeStagger = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Power:
                        this.Power = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PowerRechargeTime:
                        this.PowerRechargeTime = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PowerRechargeDelay:
                        this.PowerRechargeDelay = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ConsumeAmmo:
                        this.ConsumeAmmo = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PowerBonus:
                        this.PowerBonus = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.UsePower:
                        this.UsePower = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown1:
                        this.QNAMUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown2:
                        this.QNAMUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown3:
                        this.QNAMUnknown3 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown4:
                        this.QNAMUnknown4 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.QNAMUnknown5:
                        this.QNAMUnknown5 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PowerConsumption:
                        this.PowerConsumption = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WRLOUnknown1:
                        this.WRLOUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ReloadSpeed:
                        this.ReloadSpeed = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ReloadCharging:
                        this.ReloadCharging = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ReloadSingle:
                        this.ReloadSingle = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WRUM:
                        this.WRUM = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureValueMin:
                        this.ApertureValueMin = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureValueMax:
                        this.ApertureValueMax = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureInputMin:
                        this.ApertureInputMin = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureInputMax:
                        this.ApertureInputMax = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureAcceleration:
                        this.ApertureAcceleration = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ApertureDeceleration:
                        this.ApertureDeceleration = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceValueMin:
                        this.DistanceValueMin = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceValueMax:
                        this.DistanceValueMax = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceInputMin:
                        this.DistanceInputMin = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceInputMax:
                        this.DistanceInputMax = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceAcceleration:
                        this.DistanceAcceleration = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.DistanceDeceleration:
                        this.DistanceDeceleration = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.UseVariableRange:
                        this.UseVariableRange = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = (MaskItem<Exception?, FirstPersonModel.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.WVISUnknown1:
                        this.WVISUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WVISUnknown2:
                        this.WVISUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WVISUnknown3:
                        this.WVISUnknown3 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ColorRemappingIndex:
                        this.ColorRemappingIndex = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ImageSpaceAdapter:
                        this.ImageSpaceAdapter = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown1:
                        this.WTRMUnknown1 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown2:
                        this.WTRMUnknown2 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown3:
                        this.WTRMUnknown3 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown4:
                        this.WTRMUnknown4 = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.WTRMUnknown5:
                        this.WTRMUnknown5 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (ObjectPaletteDefaults != null) return true;
                if (Transforms != null) return true;
                if (XALG != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (ObjectEffect != null) return true;
                if (EnchantmentAmount != null) return true;
                if (EquipmentType != null) return true;
                if (BlockBashImpactDataSet != null) return true;
                if (AlternateBlockMaterial != null) return true;
                if (PickupSound != null) return true;
                if (DropdownSound != null) return true;
                if (Keywords != null) return true;
                if (Description != null) return true;
                if (InstanceNaming != null) return true;
                if (AttachParentSlots != null) return true;
                if (ObjectTemplates != null) return true;
                if (EmbeddedWeaponMod != null) return true;
                if (BNAM != null) return true;
                if (SightedTransitionSeconds != null) return true;
                if (AimDownSightTemplate != null) return true;
                if (AimModel != null) return true;
                if (AccuracyBonus != null) return true;
                if (HasScope != null) return true;
                if (AimAssistTemplate != null) return true;
                if (AimOpticalSightModel != null) return true;
                if (MeleeAimAssistModel != null) return true;
                if (WAIMUnknown1 != null) return true;
                if (WAIMUnknown2 != null) return true;
                if (EnableMarkingTargets != null) return true;
                if (ReticleType != null) return true;
                if (WAIMUnknown3 != null) return true;
                if (WAIMUnknown4 != null) return true;
                if (AmmoType != null) return true;
                if (AmmoCapacity != null) return true;
                if (AmmoList != null) return true;
                if (OverrideProjectile != null) return true;
                if (OverrideShellCasing != null) return true;
                if (ProjectilesCount != null) return true;
                if (NpcsUseAmmo != null) return true;
                if (WAM2Unknown1 != null) return true;
                if (WAMM != null) return true;
                if (MeleeOrCreature != null) return true;
                if (PrimedExplosive != null) return true;
                if (DryFire != null) return true;
                if (Idle != null) return true;
                if (Equip != null) return true;
                if (Unequip != null) return true;
                if (FastEquip != null) return true;
                if (SoundLevel != null) return true;
                if (WAUDUnknown2 != null) return true;
                if (WTUR != null) return true;
                if (ChargeFullPowerSeconds != null) return true;
                if (ChargeMinPowerPerShot != null) return true;
                if (ChargeCritBonus != null) return true;
                if (ChargeHoldInput != null) return true;
                if (ChargingAttack != null) return true;
                if (AttackDamage != null) return true;
                if (MinRange != null) return true;
                if (MaxRange != null) return true;
                if (OutOfRangeDamageMult != null) return true;
                if (CritDamageMult != null) return true;
                if (CriticalHitSpell != null) return true;
                if (CritEffectOnDeathOnly != null) return true;
                if (HitBehavior != null) return true;
                if (Resistance != null) return true;
                if (Skill != null) return true;
                if (WDMGUnknown4 != null) return true;
                if (WDMGUnknown5 != null) return true;
                if (WDMGUnknown6 != null) return true;
                if (WDMGUnknown7 != null) return true;
                if (WDMGUnknown8 != null) return true;
                if (WDMGUnknown9 != null) return true;
                if (CritChanceIncMult != null) return true;
                if (DamageTypes != null) return true;
                if (FiringType != null) return true;
                if (BurstCount != null) return true;
                if (RepeatableFire != null) return true;
                if (AttackSeconds != null) return true;
                if (FireSeconds != null) return true;
                if (AttackDelaySeconds != null) return true;
                if (BoltChargeSeconds != null) return true;
                if (BoltAction != null) return true;
                if (DisableShellCaseEject != null) return true;
                if (ShotsPerSecond != null) return true;
                if (WFIRUnknown7 != null) return true;
                if (OverrideRateOfFire != null) return true;
                if (TriggerThresholdPrimaryTrigger != null) return true;
                if (WFIRUnknown10 != null) return true;
                if (TriggerThresholdSecondStage != null) return true;
                if (HasStagedTrigger != null) return true;
                if (HasDualTrigger != null) return true;
                if (BurstDelaySeconds != null) return true;
                if (NonPlayable != null) return true;
                if (PlayerOnly != null) return true;
                if (WFLGUnknown1 != null) return true;
                if (WFLGUnknown2 != null) return true;
                if (CannotDrop != null) return true;
                if (MinorCrime != null) return true;
                if (NonHostile != null) return true;
                if (WFLGUnknown3 != null) return true;
                if (WFLGUnknown4 != null) return true;
                if (WFLGUnknown5 != null) return true;
                if (WFLGUnknown6 != null) return true;
                if (WFLGUnknown7 != null) return true;
                if (WGENUnknown1 != null) return true;
                if (BaseWeight != null) return true;
                if (BaseValue != null) return true;
                if (BaseSpeed != null) return true;
                if (AttackOxygenCost != null) return true;
                if (WeaponBarrel != null) return true;
                if (General != null) return true;
                if (WMELUnknown1 != null) return true;
                if (MeleeBashDamage != null) return true;
                if (MeleeReach != null) return true;
                if (MeleeStagger != null) return true;
                if (Power != null) return true;
                if (PowerRechargeTime != null) return true;
                if (PowerRechargeDelay != null) return true;
                if (ConsumeAmmo != null) return true;
                if (PowerBonus != null) return true;
                if (UsePower != null) return true;
                if (QNAMUnknown1 != null) return true;
                if (QNAMUnknown2 != null) return true;
                if (QNAMUnknown3 != null) return true;
                if (QNAMUnknown4 != null) return true;
                if (QNAMUnknown5 != null) return true;
                if (PowerConsumption != null) return true;
                if (WRLOUnknown1 != null) return true;
                if (ReloadSpeed != null) return true;
                if (ReloadCharging != null) return true;
                if (ReloadSingle != null) return true;
                if (WRUM != null) return true;
                if (ApertureValueMin != null) return true;
                if (ApertureValueMax != null) return true;
                if (ApertureInputMin != null) return true;
                if (ApertureInputMax != null) return true;
                if (ApertureAcceleration != null) return true;
                if (ApertureDeceleration != null) return true;
                if (DistanceValueMin != null) return true;
                if (DistanceValueMax != null) return true;
                if (DistanceInputMin != null) return true;
                if (DistanceInputMax != null) return true;
                if (DistanceAcceleration != null) return true;
                if (DistanceDeceleration != null) return true;
                if (UseVariableRange != null) return true;
                if (FirstPersonModel != null) return true;
                if (WVISUnknown1 != null) return true;
                if (WVISUnknown2 != null) return true;
                if (WVISUnknown3 != null) return true;
                if (ImpactDataSet != null) return true;
                if (ColorRemappingIndex != null) return true;
                if (ImageSpaceAdapter != null) return true;
                if (WTRMUnknown1 != null) return true;
                if (WTRMUnknown2 != null) return true;
                if (WTRMUnknown3 != null) return true;
                if (WTRMUnknown4 != null) return true;
                if (WTRMUnknown5 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                ObjectPaletteDefaults?.Print(sb);
                Transforms?.Print(sb);
                {
                    sb.AppendItem(XALG, "XALG");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(ObjectEffect, "ObjectEffect");
                }
                {
                    sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                }
                {
                    sb.AppendItem(EquipmentType, "EquipmentType");
                }
                {
                    sb.AppendItem(BlockBashImpactDataSet, "BlockBashImpactDataSet");
                }
                {
                    sb.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                }
                PickupSound?.Print(sb);
                DropdownSound?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(InstanceNaming, "InstanceNaming");
                }
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    sb.AppendLine("AttachParentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ObjectTemplates is {} ObjectTemplatesItem)
                {
                    sb.AppendLine("ObjectTemplates =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectTemplatesItem.Overall);
                        if (ObjectTemplatesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectTemplatesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EmbeddedWeaponMod, "EmbeddedWeaponMod");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(SightedTransitionSeconds, "SightedTransitionSeconds");
                }
                {
                    sb.AppendItem(AimDownSightTemplate, "AimDownSightTemplate");
                }
                {
                    sb.AppendItem(AimModel, "AimModel");
                }
                {
                    sb.AppendItem(AccuracyBonus, "AccuracyBonus");
                }
                {
                    sb.AppendItem(HasScope, "HasScope");
                }
                {
                    sb.AppendItem(AimAssistTemplate, "AimAssistTemplate");
                }
                {
                    sb.AppendItem(AimOpticalSightModel, "AimOpticalSightModel");
                }
                {
                    sb.AppendItem(MeleeAimAssistModel, "MeleeAimAssistModel");
                }
                {
                    sb.AppendItem(WAIMUnknown1, "WAIMUnknown1");
                }
                {
                    sb.AppendItem(WAIMUnknown2, "WAIMUnknown2");
                }
                {
                    sb.AppendItem(EnableMarkingTargets, "EnableMarkingTargets");
                }
                {
                    sb.AppendItem(ReticleType, "ReticleType");
                }
                {
                    sb.AppendItem(WAIMUnknown3, "WAIMUnknown3");
                }
                {
                    sb.AppendItem(WAIMUnknown4, "WAIMUnknown4");
                }
                {
                    sb.AppendItem(AmmoType, "AmmoType");
                }
                {
                    sb.AppendItem(AmmoCapacity, "AmmoCapacity");
                }
                {
                    sb.AppendItem(AmmoList, "AmmoList");
                }
                {
                    sb.AppendItem(OverrideProjectile, "OverrideProjectile");
                }
                {
                    sb.AppendItem(OverrideShellCasing, "OverrideShellCasing");
                }
                {
                    sb.AppendItem(ProjectilesCount, "ProjectilesCount");
                }
                {
                    sb.AppendItem(NpcsUseAmmo, "NpcsUseAmmo");
                }
                {
                    sb.AppendItem(WAM2Unknown1, "WAM2Unknown1");
                }
                {
                    sb.AppendItem(WAMM, "WAMM");
                }
                MeleeOrCreature?.Print(sb);
                PrimedExplosive?.Print(sb);
                DryFire?.Print(sb);
                Idle?.Print(sb);
                Equip?.Print(sb);
                Unequip?.Print(sb);
                FastEquip?.Print(sb);
                {
                    sb.AppendItem(SoundLevel, "SoundLevel");
                }
                {
                    sb.AppendItem(WAUDUnknown2, "WAUDUnknown2");
                }
                {
                    sb.AppendItem(WTUR, "WTUR");
                }
                {
                    sb.AppendItem(ChargeFullPowerSeconds, "ChargeFullPowerSeconds");
                }
                {
                    sb.AppendItem(ChargeMinPowerPerShot, "ChargeMinPowerPerShot");
                }
                {
                    sb.AppendItem(ChargeCritBonus, "ChargeCritBonus");
                }
                {
                    sb.AppendItem(ChargeHoldInput, "ChargeHoldInput");
                }
                {
                    sb.AppendItem(ChargingAttack, "ChargingAttack");
                }
                {
                    sb.AppendItem(AttackDamage, "AttackDamage");
                }
                {
                    sb.AppendItem(MinRange, "MinRange");
                }
                {
                    sb.AppendItem(MaxRange, "MaxRange");
                }
                {
                    sb.AppendItem(OutOfRangeDamageMult, "OutOfRangeDamageMult");
                }
                {
                    sb.AppendItem(CritDamageMult, "CritDamageMult");
                }
                {
                    sb.AppendItem(CriticalHitSpell, "CriticalHitSpell");
                }
                {
                    sb.AppendItem(CritEffectOnDeathOnly, "CritEffectOnDeathOnly");
                }
                {
                    sb.AppendItem(HitBehavior, "HitBehavior");
                }
                {
                    sb.AppendItem(Resistance, "Resistance");
                }
                {
                    sb.AppendItem(Skill, "Skill");
                }
                {
                    sb.AppendItem(WDMGUnknown4, "WDMGUnknown4");
                }
                {
                    sb.AppendItem(WDMGUnknown5, "WDMGUnknown5");
                }
                {
                    sb.AppendItem(WDMGUnknown6, "WDMGUnknown6");
                }
                {
                    sb.AppendItem(WDMGUnknown7, "WDMGUnknown7");
                }
                {
                    sb.AppendItem(WDMGUnknown8, "WDMGUnknown8");
                }
                {
                    sb.AppendItem(WDMGUnknown9, "WDMGUnknown9");
                }
                {
                    sb.AppendItem(CritChanceIncMult, "CritChanceIncMult");
                }
                if (DamageTypes is {} DamageTypesItem)
                {
                    sb.AppendLine("DamageTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DamageTypesItem.Overall);
                        if (DamageTypesItem.Specific != null)
                        {
                            foreach (var subItem in DamageTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FiringType, "FiringType");
                }
                {
                    sb.AppendItem(BurstCount, "BurstCount");
                }
                {
                    sb.AppendItem(RepeatableFire, "RepeatableFire");
                }
                {
                    sb.AppendItem(AttackSeconds, "AttackSeconds");
                }
                {
                    sb.AppendItem(FireSeconds, "FireSeconds");
                }
                {
                    sb.AppendItem(AttackDelaySeconds, "AttackDelaySeconds");
                }
                {
                    sb.AppendItem(BoltChargeSeconds, "BoltChargeSeconds");
                }
                {
                    sb.AppendItem(BoltAction, "BoltAction");
                }
                {
                    sb.AppendItem(DisableShellCaseEject, "DisableShellCaseEject");
                }
                {
                    sb.AppendItem(ShotsPerSecond, "ShotsPerSecond");
                }
                {
                    sb.AppendItem(WFIRUnknown7, "WFIRUnknown7");
                }
                {
                    sb.AppendItem(OverrideRateOfFire, "OverrideRateOfFire");
                }
                {
                    sb.AppendItem(TriggerThresholdPrimaryTrigger, "TriggerThresholdPrimaryTrigger");
                }
                {
                    sb.AppendItem(WFIRUnknown10, "WFIRUnknown10");
                }
                {
                    sb.AppendItem(TriggerThresholdSecondStage, "TriggerThresholdSecondStage");
                }
                {
                    sb.AppendItem(HasStagedTrigger, "HasStagedTrigger");
                }
                {
                    sb.AppendItem(HasDualTrigger, "HasDualTrigger");
                }
                {
                    sb.AppendItem(BurstDelaySeconds, "BurstDelaySeconds");
                }
                {
                    sb.AppendItem(NonPlayable, "NonPlayable");
                }
                {
                    sb.AppendItem(PlayerOnly, "PlayerOnly");
                }
                {
                    sb.AppendItem(WFLGUnknown1, "WFLGUnknown1");
                }
                {
                    sb.AppendItem(WFLGUnknown2, "WFLGUnknown2");
                }
                {
                    sb.AppendItem(CannotDrop, "CannotDrop");
                }
                {
                    sb.AppendItem(MinorCrime, "MinorCrime");
                }
                {
                    sb.AppendItem(NonHostile, "NonHostile");
                }
                {
                    sb.AppendItem(WFLGUnknown3, "WFLGUnknown3");
                }
                {
                    sb.AppendItem(WFLGUnknown4, "WFLGUnknown4");
                }
                {
                    sb.AppendItem(WFLGUnknown5, "WFLGUnknown5");
                }
                {
                    sb.AppendItem(WFLGUnknown6, "WFLGUnknown6");
                }
                {
                    sb.AppendItem(WFLGUnknown7, "WFLGUnknown7");
                }
                {
                    sb.AppendItem(WGENUnknown1, "WGENUnknown1");
                }
                {
                    sb.AppendItem(BaseWeight, "BaseWeight");
                }
                {
                    sb.AppendItem(BaseValue, "BaseValue");
                }
                {
                    sb.AppendItem(BaseSpeed, "BaseSpeed");
                }
                {
                    sb.AppendItem(AttackOxygenCost, "AttackOxygenCost");
                }
                {
                    sb.AppendItem(WeaponBarrel, "WeaponBarrel");
                }
                {
                    sb.AppendItem(General, "General");
                }
                {
                    sb.AppendItem(WMELUnknown1, "WMELUnknown1");
                }
                {
                    sb.AppendItem(MeleeBashDamage, "MeleeBashDamage");
                }
                {
                    sb.AppendItem(MeleeReach, "MeleeReach");
                }
                {
                    sb.AppendItem(MeleeStagger, "MeleeStagger");
                }
                {
                    sb.AppendItem(Power, "Power");
                }
                {
                    sb.AppendItem(PowerRechargeTime, "PowerRechargeTime");
                }
                {
                    sb.AppendItem(PowerRechargeDelay, "PowerRechargeDelay");
                }
                {
                    sb.AppendItem(ConsumeAmmo, "ConsumeAmmo");
                }
                {
                    sb.AppendItem(PowerBonus, "PowerBonus");
                }
                {
                    sb.AppendItem(UsePower, "UsePower");
                }
                {
                    sb.AppendItem(QNAMUnknown1, "QNAMUnknown1");
                }
                {
                    sb.AppendItem(QNAMUnknown2, "QNAMUnknown2");
                }
                {
                    sb.AppendItem(QNAMUnknown3, "QNAMUnknown3");
                }
                {
                    sb.AppendItem(QNAMUnknown4, "QNAMUnknown4");
                }
                {
                    sb.AppendItem(QNAMUnknown5, "QNAMUnknown5");
                }
                {
                    sb.AppendItem(PowerConsumption, "PowerConsumption");
                }
                {
                    sb.AppendItem(WRLOUnknown1, "WRLOUnknown1");
                }
                {
                    sb.AppendItem(ReloadSpeed, "ReloadSpeed");
                }
                {
                    sb.AppendItem(ReloadCharging, "ReloadCharging");
                }
                {
                    sb.AppendItem(ReloadSingle, "ReloadSingle");
                }
                {
                    sb.AppendItem(WRUM, "WRUM");
                }
                {
                    sb.AppendItem(ApertureValueMin, "ApertureValueMin");
                }
                {
                    sb.AppendItem(ApertureValueMax, "ApertureValueMax");
                }
                {
                    sb.AppendItem(ApertureInputMin, "ApertureInputMin");
                }
                {
                    sb.AppendItem(ApertureInputMax, "ApertureInputMax");
                }
                {
                    sb.AppendItem(ApertureAcceleration, "ApertureAcceleration");
                }
                {
                    sb.AppendItem(ApertureDeceleration, "ApertureDeceleration");
                }
                {
                    sb.AppendItem(DistanceValueMin, "DistanceValueMin");
                }
                {
                    sb.AppendItem(DistanceValueMax, "DistanceValueMax");
                }
                {
                    sb.AppendItem(DistanceInputMin, "DistanceInputMin");
                }
                {
                    sb.AppendItem(DistanceInputMax, "DistanceInputMax");
                }
                {
                    sb.AppendItem(DistanceAcceleration, "DistanceAcceleration");
                }
                {
                    sb.AppendItem(DistanceDeceleration, "DistanceDeceleration");
                }
                {
                    sb.AppendItem(UseVariableRange, "UseVariableRange");
                }
                FirstPersonModel?.Print(sb);
                {
                    sb.AppendItem(WVISUnknown1, "WVISUnknown1");
                }
                {
                    sb.AppendItem(WVISUnknown2, "WVISUnknown2");
                }
                {
                    sb.AppendItem(WVISUnknown3, "WVISUnknown3");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(ColorRemappingIndex, "ColorRemappingIndex");
                }
                {
                    sb.AppendItem(ImageSpaceAdapter, "ImageSpaceAdapter");
                }
                {
                    sb.AppendItem(WTRMUnknown1, "WTRMUnknown1");
                }
                {
                    sb.AppendItem(WTRMUnknown2, "WTRMUnknown2");
                }
                {
                    sb.AppendItem(WTRMUnknown3, "WTRMUnknown3");
                }
                {
                    sb.AppendItem(WTRMUnknown4, "WTRMUnknown4");
                }
                {
                    sb.AppendItem(WTRMUnknown5, "WTRMUnknown5");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.ObjectPaletteDefaults = this.ObjectPaletteDefaults.Combine(rhs.ObjectPaletteDefaults, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.ObjectEffect = this.ObjectEffect.Combine(rhs.ObjectEffect);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.BlockBashImpactDataSet = this.BlockBashImpactDataSet.Combine(rhs.BlockBashImpactDataSet);
                ret.AlternateBlockMaterial = this.AlternateBlockMaterial.Combine(rhs.AlternateBlockMaterial);
                ret.PickupSound = this.PickupSound.Combine(rhs.PickupSound, (l, r) => l.Combine(r));
                ret.DropdownSound = this.DropdownSound.Combine(rhs.DropdownSound, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.InstanceNaming = this.InstanceNaming.Combine(rhs.InstanceNaming);
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Overall, rhs.ObjectTemplates?.Overall), Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Specific, rhs.ObjectTemplates?.Specific));
                ret.EmbeddedWeaponMod = this.EmbeddedWeaponMod.Combine(rhs.EmbeddedWeaponMod);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.SightedTransitionSeconds = this.SightedTransitionSeconds.Combine(rhs.SightedTransitionSeconds);
                ret.AimDownSightTemplate = this.AimDownSightTemplate.Combine(rhs.AimDownSightTemplate);
                ret.AimModel = this.AimModel.Combine(rhs.AimModel);
                ret.AccuracyBonus = this.AccuracyBonus.Combine(rhs.AccuracyBonus);
                ret.HasScope = this.HasScope.Combine(rhs.HasScope);
                ret.AimAssistTemplate = this.AimAssistTemplate.Combine(rhs.AimAssistTemplate);
                ret.AimOpticalSightModel = this.AimOpticalSightModel.Combine(rhs.AimOpticalSightModel);
                ret.MeleeAimAssistModel = this.MeleeAimAssistModel.Combine(rhs.MeleeAimAssistModel);
                ret.WAIMUnknown1 = this.WAIMUnknown1.Combine(rhs.WAIMUnknown1);
                ret.WAIMUnknown2 = this.WAIMUnknown2.Combine(rhs.WAIMUnknown2);
                ret.EnableMarkingTargets = this.EnableMarkingTargets.Combine(rhs.EnableMarkingTargets);
                ret.ReticleType = this.ReticleType.Combine(rhs.ReticleType);
                ret.WAIMUnknown3 = this.WAIMUnknown3.Combine(rhs.WAIMUnknown3);
                ret.WAIMUnknown4 = this.WAIMUnknown4.Combine(rhs.WAIMUnknown4);
                ret.AmmoType = this.AmmoType.Combine(rhs.AmmoType);
                ret.AmmoCapacity = this.AmmoCapacity.Combine(rhs.AmmoCapacity);
                ret.AmmoList = this.AmmoList.Combine(rhs.AmmoList);
                ret.OverrideProjectile = this.OverrideProjectile.Combine(rhs.OverrideProjectile);
                ret.OverrideShellCasing = this.OverrideShellCasing.Combine(rhs.OverrideShellCasing);
                ret.ProjectilesCount = this.ProjectilesCount.Combine(rhs.ProjectilesCount);
                ret.NpcsUseAmmo = this.NpcsUseAmmo.Combine(rhs.NpcsUseAmmo);
                ret.WAM2Unknown1 = this.WAM2Unknown1.Combine(rhs.WAM2Unknown1);
                ret.WAMM = this.WAMM.Combine(rhs.WAMM);
                ret.MeleeOrCreature = this.MeleeOrCreature.Combine(rhs.MeleeOrCreature, (l, r) => l.Combine(r));
                ret.PrimedExplosive = this.PrimedExplosive.Combine(rhs.PrimedExplosive, (l, r) => l.Combine(r));
                ret.DryFire = this.DryFire.Combine(rhs.DryFire, (l, r) => l.Combine(r));
                ret.Idle = this.Idle.Combine(rhs.Idle, (l, r) => l.Combine(r));
                ret.Equip = this.Equip.Combine(rhs.Equip, (l, r) => l.Combine(r));
                ret.Unequip = this.Unequip.Combine(rhs.Unequip, (l, r) => l.Combine(r));
                ret.FastEquip = this.FastEquip.Combine(rhs.FastEquip, (l, r) => l.Combine(r));
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.WAUDUnknown2 = this.WAUDUnknown2.Combine(rhs.WAUDUnknown2);
                ret.WTUR = this.WTUR.Combine(rhs.WTUR);
                ret.ChargeFullPowerSeconds = this.ChargeFullPowerSeconds.Combine(rhs.ChargeFullPowerSeconds);
                ret.ChargeMinPowerPerShot = this.ChargeMinPowerPerShot.Combine(rhs.ChargeMinPowerPerShot);
                ret.ChargeCritBonus = this.ChargeCritBonus.Combine(rhs.ChargeCritBonus);
                ret.ChargeHoldInput = this.ChargeHoldInput.Combine(rhs.ChargeHoldInput);
                ret.ChargingAttack = this.ChargingAttack.Combine(rhs.ChargingAttack);
                ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
                ret.MinRange = this.MinRange.Combine(rhs.MinRange);
                ret.MaxRange = this.MaxRange.Combine(rhs.MaxRange);
                ret.OutOfRangeDamageMult = this.OutOfRangeDamageMult.Combine(rhs.OutOfRangeDamageMult);
                ret.CritDamageMult = this.CritDamageMult.Combine(rhs.CritDamageMult);
                ret.CriticalHitSpell = this.CriticalHitSpell.Combine(rhs.CriticalHitSpell);
                ret.CritEffectOnDeathOnly = this.CritEffectOnDeathOnly.Combine(rhs.CritEffectOnDeathOnly);
                ret.HitBehavior = this.HitBehavior.Combine(rhs.HitBehavior);
                ret.Resistance = this.Resistance.Combine(rhs.Resistance);
                ret.Skill = this.Skill.Combine(rhs.Skill);
                ret.WDMGUnknown4 = this.WDMGUnknown4.Combine(rhs.WDMGUnknown4);
                ret.WDMGUnknown5 = this.WDMGUnknown5.Combine(rhs.WDMGUnknown5);
                ret.WDMGUnknown6 = this.WDMGUnknown6.Combine(rhs.WDMGUnknown6);
                ret.WDMGUnknown7 = this.WDMGUnknown7.Combine(rhs.WDMGUnknown7);
                ret.WDMGUnknown8 = this.WDMGUnknown8.Combine(rhs.WDMGUnknown8);
                ret.WDMGUnknown9 = this.WDMGUnknown9.Combine(rhs.WDMGUnknown9);
                ret.CritChanceIncMult = this.CritChanceIncMult.Combine(rhs.CritChanceIncMult);
                ret.DamageTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeaponDamageType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.DamageTypes?.Overall, rhs.DamageTypes?.Overall), Noggog.ExceptionExt.Combine(this.DamageTypes?.Specific, rhs.DamageTypes?.Specific));
                ret.FiringType = this.FiringType.Combine(rhs.FiringType);
                ret.BurstCount = this.BurstCount.Combine(rhs.BurstCount);
                ret.RepeatableFire = this.RepeatableFire.Combine(rhs.RepeatableFire);
                ret.AttackSeconds = this.AttackSeconds.Combine(rhs.AttackSeconds);
                ret.FireSeconds = this.FireSeconds.Combine(rhs.FireSeconds);
                ret.AttackDelaySeconds = this.AttackDelaySeconds.Combine(rhs.AttackDelaySeconds);
                ret.BoltChargeSeconds = this.BoltChargeSeconds.Combine(rhs.BoltChargeSeconds);
                ret.BoltAction = this.BoltAction.Combine(rhs.BoltAction);
                ret.DisableShellCaseEject = this.DisableShellCaseEject.Combine(rhs.DisableShellCaseEject);
                ret.ShotsPerSecond = this.ShotsPerSecond.Combine(rhs.ShotsPerSecond);
                ret.WFIRUnknown7 = this.WFIRUnknown7.Combine(rhs.WFIRUnknown7);
                ret.OverrideRateOfFire = this.OverrideRateOfFire.Combine(rhs.OverrideRateOfFire);
                ret.TriggerThresholdPrimaryTrigger = this.TriggerThresholdPrimaryTrigger.Combine(rhs.TriggerThresholdPrimaryTrigger);
                ret.WFIRUnknown10 = this.WFIRUnknown10.Combine(rhs.WFIRUnknown10);
                ret.TriggerThresholdSecondStage = this.TriggerThresholdSecondStage.Combine(rhs.TriggerThresholdSecondStage);
                ret.HasStagedTrigger = this.HasStagedTrigger.Combine(rhs.HasStagedTrigger);
                ret.HasDualTrigger = this.HasDualTrigger.Combine(rhs.HasDualTrigger);
                ret.BurstDelaySeconds = this.BurstDelaySeconds.Combine(rhs.BurstDelaySeconds);
                ret.NonPlayable = this.NonPlayable.Combine(rhs.NonPlayable);
                ret.PlayerOnly = this.PlayerOnly.Combine(rhs.PlayerOnly);
                ret.WFLGUnknown1 = this.WFLGUnknown1.Combine(rhs.WFLGUnknown1);
                ret.WFLGUnknown2 = this.WFLGUnknown2.Combine(rhs.WFLGUnknown2);
                ret.CannotDrop = this.CannotDrop.Combine(rhs.CannotDrop);
                ret.MinorCrime = this.MinorCrime.Combine(rhs.MinorCrime);
                ret.NonHostile = this.NonHostile.Combine(rhs.NonHostile);
                ret.WFLGUnknown3 = this.WFLGUnknown3.Combine(rhs.WFLGUnknown3);
                ret.WFLGUnknown4 = this.WFLGUnknown4.Combine(rhs.WFLGUnknown4);
                ret.WFLGUnknown5 = this.WFLGUnknown5.Combine(rhs.WFLGUnknown5);
                ret.WFLGUnknown6 = this.WFLGUnknown6.Combine(rhs.WFLGUnknown6);
                ret.WFLGUnknown7 = this.WFLGUnknown7.Combine(rhs.WFLGUnknown7);
                ret.WGENUnknown1 = this.WGENUnknown1.Combine(rhs.WGENUnknown1);
                ret.BaseWeight = this.BaseWeight.Combine(rhs.BaseWeight);
                ret.BaseValue = this.BaseValue.Combine(rhs.BaseValue);
                ret.BaseSpeed = this.BaseSpeed.Combine(rhs.BaseSpeed);
                ret.AttackOxygenCost = this.AttackOxygenCost.Combine(rhs.AttackOxygenCost);
                ret.WeaponBarrel = this.WeaponBarrel.Combine(rhs.WeaponBarrel);
                ret.General = this.General.Combine(rhs.General);
                ret.WMELUnknown1 = this.WMELUnknown1.Combine(rhs.WMELUnknown1);
                ret.MeleeBashDamage = this.MeleeBashDamage.Combine(rhs.MeleeBashDamage);
                ret.MeleeReach = this.MeleeReach.Combine(rhs.MeleeReach);
                ret.MeleeStagger = this.MeleeStagger.Combine(rhs.MeleeStagger);
                ret.Power = this.Power.Combine(rhs.Power);
                ret.PowerRechargeTime = this.PowerRechargeTime.Combine(rhs.PowerRechargeTime);
                ret.PowerRechargeDelay = this.PowerRechargeDelay.Combine(rhs.PowerRechargeDelay);
                ret.ConsumeAmmo = this.ConsumeAmmo.Combine(rhs.ConsumeAmmo);
                ret.PowerBonus = this.PowerBonus.Combine(rhs.PowerBonus);
                ret.UsePower = this.UsePower.Combine(rhs.UsePower);
                ret.QNAMUnknown1 = this.QNAMUnknown1.Combine(rhs.QNAMUnknown1);
                ret.QNAMUnknown2 = this.QNAMUnknown2.Combine(rhs.QNAMUnknown2);
                ret.QNAMUnknown3 = this.QNAMUnknown3.Combine(rhs.QNAMUnknown3);
                ret.QNAMUnknown4 = this.QNAMUnknown4.Combine(rhs.QNAMUnknown4);
                ret.QNAMUnknown5 = this.QNAMUnknown5.Combine(rhs.QNAMUnknown5);
                ret.PowerConsumption = this.PowerConsumption.Combine(rhs.PowerConsumption);
                ret.WRLOUnknown1 = this.WRLOUnknown1.Combine(rhs.WRLOUnknown1);
                ret.ReloadSpeed = this.ReloadSpeed.Combine(rhs.ReloadSpeed);
                ret.ReloadCharging = this.ReloadCharging.Combine(rhs.ReloadCharging);
                ret.ReloadSingle = this.ReloadSingle.Combine(rhs.ReloadSingle);
                ret.WRUM = this.WRUM.Combine(rhs.WRUM);
                ret.ApertureValueMin = this.ApertureValueMin.Combine(rhs.ApertureValueMin);
                ret.ApertureValueMax = this.ApertureValueMax.Combine(rhs.ApertureValueMax);
                ret.ApertureInputMin = this.ApertureInputMin.Combine(rhs.ApertureInputMin);
                ret.ApertureInputMax = this.ApertureInputMax.Combine(rhs.ApertureInputMax);
                ret.ApertureAcceleration = this.ApertureAcceleration.Combine(rhs.ApertureAcceleration);
                ret.ApertureDeceleration = this.ApertureDeceleration.Combine(rhs.ApertureDeceleration);
                ret.DistanceValueMin = this.DistanceValueMin.Combine(rhs.DistanceValueMin);
                ret.DistanceValueMax = this.DistanceValueMax.Combine(rhs.DistanceValueMax);
                ret.DistanceInputMin = this.DistanceInputMin.Combine(rhs.DistanceInputMin);
                ret.DistanceInputMax = this.DistanceInputMax.Combine(rhs.DistanceInputMax);
                ret.DistanceAcceleration = this.DistanceAcceleration.Combine(rhs.DistanceAcceleration);
                ret.DistanceDeceleration = this.DistanceDeceleration.Combine(rhs.DistanceDeceleration);
                ret.UseVariableRange = this.UseVariableRange.Combine(rhs.UseVariableRange);
                ret.FirstPersonModel = this.FirstPersonModel.Combine(rhs.FirstPersonModel, (l, r) => l.Combine(r));
                ret.WVISUnknown1 = this.WVISUnknown1.Combine(rhs.WVISUnknown1);
                ret.WVISUnknown2 = this.WVISUnknown2.Combine(rhs.WVISUnknown2);
                ret.WVISUnknown3 = this.WVISUnknown3.Combine(rhs.WVISUnknown3);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.ColorRemappingIndex = this.ColorRemappingIndex.Combine(rhs.ColorRemappingIndex);
                ret.ImageSpaceAdapter = this.ImageSpaceAdapter.Combine(rhs.ImageSpaceAdapter);
                ret.WTRMUnknown1 = this.WTRMUnknown1.Combine(rhs.WTRMUnknown1);
                ret.WTRMUnknown2 = this.WTRMUnknown2.Combine(rhs.WTRMUnknown2);
                ret.WTRMUnknown3 = this.WTRMUnknown3.Combine(rhs.WTRMUnknown3);
                ret.WTRMUnknown4 = this.WTRMUnknown4.Combine(rhs.WTRMUnknown4);
                ret.WTRMUnknown5 = this.WTRMUnknown5.Combine(rhs.WTRMUnknown5);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public ObjectPaletteDefaults.TranslationMask? ObjectPaletteDefaults;
            public Transforms.TranslationMask? Transforms;
            public bool XALG;
            public AComponent.TranslationMask? Components;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool ObjectEffect;
            public bool EnchantmentAmount;
            public bool EquipmentType;
            public bool BlockBashImpactDataSet;
            public bool AlternateBlockMaterial;
            public SoundReference.TranslationMask? PickupSound;
            public SoundReference.TranslationMask? DropdownSound;
            public bool Keywords;
            public bool Description;
            public bool InstanceNaming;
            public bool AttachParentSlots;
            public ObjectTemplate.TranslationMask? ObjectTemplates;
            public bool EmbeddedWeaponMod;
            public bool BNAM;
            public bool SightedTransitionSeconds;
            public bool AimDownSightTemplate;
            public bool AimModel;
            public bool AccuracyBonus;
            public bool HasScope;
            public bool AimAssistTemplate;
            public bool AimOpticalSightModel;
            public bool MeleeAimAssistModel;
            public bool WAIMUnknown1;
            public bool WAIMUnknown2;
            public bool EnableMarkingTargets;
            public bool ReticleType;
            public bool WAIMUnknown3;
            public bool WAIMUnknown4;
            public bool AmmoType;
            public bool AmmoCapacity;
            public bool AmmoList;
            public bool OverrideProjectile;
            public bool OverrideShellCasing;
            public bool ProjectilesCount;
            public bool NpcsUseAmmo;
            public bool WAM2Unknown1;
            public bool WAMM;
            public SoundReference.TranslationMask? MeleeOrCreature;
            public SoundReference.TranslationMask? PrimedExplosive;
            public SoundReference.TranslationMask? DryFire;
            public SoundReference.TranslationMask? Idle;
            public SoundReference.TranslationMask? Equip;
            public SoundReference.TranslationMask? Unequip;
            public SoundReference.TranslationMask? FastEquip;
            public bool SoundLevel;
            public bool WAUDUnknown2;
            public bool WTUR;
            public bool ChargeFullPowerSeconds;
            public bool ChargeMinPowerPerShot;
            public bool ChargeCritBonus;
            public bool ChargeHoldInput;
            public bool ChargingAttack;
            public bool AttackDamage;
            public bool MinRange;
            public bool MaxRange;
            public bool OutOfRangeDamageMult;
            public bool CritDamageMult;
            public bool CriticalHitSpell;
            public bool CritEffectOnDeathOnly;
            public bool HitBehavior;
            public bool Resistance;
            public bool Skill;
            public bool WDMGUnknown4;
            public bool WDMGUnknown5;
            public bool WDMGUnknown6;
            public bool WDMGUnknown7;
            public bool WDMGUnknown8;
            public bool WDMGUnknown9;
            public bool CritChanceIncMult;
            public WeaponDamageType.TranslationMask? DamageTypes;
            public bool FiringType;
            public bool BurstCount;
            public bool RepeatableFire;
            public bool AttackSeconds;
            public bool FireSeconds;
            public bool AttackDelaySeconds;
            public bool BoltChargeSeconds;
            public bool BoltAction;
            public bool DisableShellCaseEject;
            public bool ShotsPerSecond;
            public bool WFIRUnknown7;
            public bool OverrideRateOfFire;
            public bool TriggerThresholdPrimaryTrigger;
            public bool WFIRUnknown10;
            public bool TriggerThresholdSecondStage;
            public bool HasStagedTrigger;
            public bool HasDualTrigger;
            public bool BurstDelaySeconds;
            public bool NonPlayable;
            public bool PlayerOnly;
            public bool WFLGUnknown1;
            public bool WFLGUnknown2;
            public bool CannotDrop;
            public bool MinorCrime;
            public bool NonHostile;
            public bool WFLGUnknown3;
            public bool WFLGUnknown4;
            public bool WFLGUnknown5;
            public bool WFLGUnknown6;
            public bool WFLGUnknown7;
            public bool WGENUnknown1;
            public bool BaseWeight;
            public bool BaseValue;
            public bool BaseSpeed;
            public bool AttackOxygenCost;
            public bool WeaponBarrel;
            public bool General;
            public bool WMELUnknown1;
            public bool MeleeBashDamage;
            public bool MeleeReach;
            public bool MeleeStagger;
            public bool Power;
            public bool PowerRechargeTime;
            public bool PowerRechargeDelay;
            public bool ConsumeAmmo;
            public bool PowerBonus;
            public bool UsePower;
            public bool QNAMUnknown1;
            public bool QNAMUnknown2;
            public bool QNAMUnknown3;
            public bool QNAMUnknown4;
            public bool QNAMUnknown5;
            public bool PowerConsumption;
            public bool WRLOUnknown1;
            public bool ReloadSpeed;
            public bool ReloadCharging;
            public bool ReloadSingle;
            public bool WRUM;
            public bool ApertureValueMin;
            public bool ApertureValueMax;
            public bool ApertureInputMin;
            public bool ApertureInputMax;
            public bool ApertureAcceleration;
            public bool ApertureDeceleration;
            public bool DistanceValueMin;
            public bool DistanceValueMax;
            public bool DistanceInputMin;
            public bool DistanceInputMax;
            public bool DistanceAcceleration;
            public bool DistanceDeceleration;
            public bool UseVariableRange;
            public FirstPersonModel.TranslationMask? FirstPersonModel;
            public bool WVISUnknown1;
            public bool WVISUnknown2;
            public bool WVISUnknown3;
            public bool ImpactDataSet;
            public bool ColorRemappingIndex;
            public bool ImageSpaceAdapter;
            public bool WTRMUnknown1;
            public bool WTRMUnknown2;
            public bool WTRMUnknown3;
            public bool WTRMUnknown4;
            public bool WTRMUnknown5;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.XALG = defaultOn;
                this.Name = defaultOn;
                this.ObjectEffect = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.EquipmentType = defaultOn;
                this.BlockBashImpactDataSet = defaultOn;
                this.AlternateBlockMaterial = defaultOn;
                this.Keywords = defaultOn;
                this.Description = defaultOn;
                this.InstanceNaming = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.EmbeddedWeaponMod = defaultOn;
                this.BNAM = defaultOn;
                this.SightedTransitionSeconds = defaultOn;
                this.AimDownSightTemplate = defaultOn;
                this.AimModel = defaultOn;
                this.AccuracyBonus = defaultOn;
                this.HasScope = defaultOn;
                this.AimAssistTemplate = defaultOn;
                this.AimOpticalSightModel = defaultOn;
                this.MeleeAimAssistModel = defaultOn;
                this.WAIMUnknown1 = defaultOn;
                this.WAIMUnknown2 = defaultOn;
                this.EnableMarkingTargets = defaultOn;
                this.ReticleType = defaultOn;
                this.WAIMUnknown3 = defaultOn;
                this.WAIMUnknown4 = defaultOn;
                this.AmmoType = defaultOn;
                this.AmmoCapacity = defaultOn;
                this.AmmoList = defaultOn;
                this.OverrideProjectile = defaultOn;
                this.OverrideShellCasing = defaultOn;
                this.ProjectilesCount = defaultOn;
                this.NpcsUseAmmo = defaultOn;
                this.WAM2Unknown1 = defaultOn;
                this.WAMM = defaultOn;
                this.SoundLevel = defaultOn;
                this.WAUDUnknown2 = defaultOn;
                this.WTUR = defaultOn;
                this.ChargeFullPowerSeconds = defaultOn;
                this.ChargeMinPowerPerShot = defaultOn;
                this.ChargeCritBonus = defaultOn;
                this.ChargeHoldInput = defaultOn;
                this.ChargingAttack = defaultOn;
                this.AttackDamage = defaultOn;
                this.MinRange = defaultOn;
                this.MaxRange = defaultOn;
                this.OutOfRangeDamageMult = defaultOn;
                this.CritDamageMult = defaultOn;
                this.CriticalHitSpell = defaultOn;
                this.CritEffectOnDeathOnly = defaultOn;
                this.HitBehavior = defaultOn;
                this.Resistance = defaultOn;
                this.Skill = defaultOn;
                this.WDMGUnknown4 = defaultOn;
                this.WDMGUnknown5 = defaultOn;
                this.WDMGUnknown6 = defaultOn;
                this.WDMGUnknown7 = defaultOn;
                this.WDMGUnknown8 = defaultOn;
                this.WDMGUnknown9 = defaultOn;
                this.CritChanceIncMult = defaultOn;
                this.FiringType = defaultOn;
                this.BurstCount = defaultOn;
                this.RepeatableFire = defaultOn;
                this.AttackSeconds = defaultOn;
                this.FireSeconds = defaultOn;
                this.AttackDelaySeconds = defaultOn;
                this.BoltChargeSeconds = defaultOn;
                this.BoltAction = defaultOn;
                this.DisableShellCaseEject = defaultOn;
                this.ShotsPerSecond = defaultOn;
                this.WFIRUnknown7 = defaultOn;
                this.OverrideRateOfFire = defaultOn;
                this.TriggerThresholdPrimaryTrigger = defaultOn;
                this.WFIRUnknown10 = defaultOn;
                this.TriggerThresholdSecondStage = defaultOn;
                this.HasStagedTrigger = defaultOn;
                this.HasDualTrigger = defaultOn;
                this.BurstDelaySeconds = defaultOn;
                this.NonPlayable = defaultOn;
                this.PlayerOnly = defaultOn;
                this.WFLGUnknown1 = defaultOn;
                this.WFLGUnknown2 = defaultOn;
                this.CannotDrop = defaultOn;
                this.MinorCrime = defaultOn;
                this.NonHostile = defaultOn;
                this.WFLGUnknown3 = defaultOn;
                this.WFLGUnknown4 = defaultOn;
                this.WFLGUnknown5 = defaultOn;
                this.WFLGUnknown6 = defaultOn;
                this.WFLGUnknown7 = defaultOn;
                this.WGENUnknown1 = defaultOn;
                this.BaseWeight = defaultOn;
                this.BaseValue = defaultOn;
                this.BaseSpeed = defaultOn;
                this.AttackOxygenCost = defaultOn;
                this.WeaponBarrel = defaultOn;
                this.General = defaultOn;
                this.WMELUnknown1 = defaultOn;
                this.MeleeBashDamage = defaultOn;
                this.MeleeReach = defaultOn;
                this.MeleeStagger = defaultOn;
                this.Power = defaultOn;
                this.PowerRechargeTime = defaultOn;
                this.PowerRechargeDelay = defaultOn;
                this.ConsumeAmmo = defaultOn;
                this.PowerBonus = defaultOn;
                this.UsePower = defaultOn;
                this.QNAMUnknown1 = defaultOn;
                this.QNAMUnknown2 = defaultOn;
                this.QNAMUnknown3 = defaultOn;
                this.QNAMUnknown4 = defaultOn;
                this.QNAMUnknown5 = defaultOn;
                this.PowerConsumption = defaultOn;
                this.WRLOUnknown1 = defaultOn;
                this.ReloadSpeed = defaultOn;
                this.ReloadCharging = defaultOn;
                this.ReloadSingle = defaultOn;
                this.WRUM = defaultOn;
                this.ApertureValueMin = defaultOn;
                this.ApertureValueMax = defaultOn;
                this.ApertureInputMin = defaultOn;
                this.ApertureInputMax = defaultOn;
                this.ApertureAcceleration = defaultOn;
                this.ApertureDeceleration = defaultOn;
                this.DistanceValueMin = defaultOn;
                this.DistanceValueMax = defaultOn;
                this.DistanceInputMin = defaultOn;
                this.DistanceInputMax = defaultOn;
                this.DistanceAcceleration = defaultOn;
                this.DistanceDeceleration = defaultOn;
                this.UseVariableRange = defaultOn;
                this.WVISUnknown1 = defaultOn;
                this.WVISUnknown2 = defaultOn;
                this.WVISUnknown3 = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.ColorRemappingIndex = defaultOn;
                this.ImageSpaceAdapter = defaultOn;
                this.WTRMUnknown1 = defaultOn;
                this.WTRMUnknown2 = defaultOn;
                this.WTRMUnknown3 = defaultOn;
                this.WTRMUnknown4 = defaultOn;
                this.WTRMUnknown5 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((ObjectPaletteDefaults != null ? ObjectPaletteDefaults.OnOverall : DefaultOn, ObjectPaletteDefaults?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((XALG, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((ObjectEffect, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((EquipmentType, null));
                ret.Add((BlockBashImpactDataSet, null));
                ret.Add((AlternateBlockMaterial, null));
                ret.Add((PickupSound != null ? PickupSound.OnOverall : DefaultOn, PickupSound?.GetCrystal()));
                ret.Add((DropdownSound != null ? DropdownSound.OnOverall : DefaultOn, DropdownSound?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Description, null));
                ret.Add((InstanceNaming, null));
                ret.Add((AttachParentSlots, null));
                ret.Add((ObjectTemplates == null ? DefaultOn : !ObjectTemplates.GetCrystal().CopyNothing, ObjectTemplates?.GetCrystal()));
                ret.Add((EmbeddedWeaponMod, null));
                ret.Add((BNAM, null));
                ret.Add((SightedTransitionSeconds, null));
                ret.Add((AimDownSightTemplate, null));
                ret.Add((AimModel, null));
                ret.Add((AccuracyBonus, null));
                ret.Add((HasScope, null));
                ret.Add((AimAssistTemplate, null));
                ret.Add((AimOpticalSightModel, null));
                ret.Add((MeleeAimAssistModel, null));
                ret.Add((WAIMUnknown1, null));
                ret.Add((WAIMUnknown2, null));
                ret.Add((EnableMarkingTargets, null));
                ret.Add((ReticleType, null));
                ret.Add((WAIMUnknown3, null));
                ret.Add((WAIMUnknown4, null));
                ret.Add((AmmoType, null));
                ret.Add((AmmoCapacity, null));
                ret.Add((AmmoList, null));
                ret.Add((OverrideProjectile, null));
                ret.Add((OverrideShellCasing, null));
                ret.Add((ProjectilesCount, null));
                ret.Add((NpcsUseAmmo, null));
                ret.Add((WAM2Unknown1, null));
                ret.Add((WAMM, null));
                ret.Add((MeleeOrCreature != null ? MeleeOrCreature.OnOverall : DefaultOn, MeleeOrCreature?.GetCrystal()));
                ret.Add((PrimedExplosive != null ? PrimedExplosive.OnOverall : DefaultOn, PrimedExplosive?.GetCrystal()));
                ret.Add((DryFire != null ? DryFire.OnOverall : DefaultOn, DryFire?.GetCrystal()));
                ret.Add((Idle != null ? Idle.OnOverall : DefaultOn, Idle?.GetCrystal()));
                ret.Add((Equip != null ? Equip.OnOverall : DefaultOn, Equip?.GetCrystal()));
                ret.Add((Unequip != null ? Unequip.OnOverall : DefaultOn, Unequip?.GetCrystal()));
                ret.Add((FastEquip != null ? FastEquip.OnOverall : DefaultOn, FastEquip?.GetCrystal()));
                ret.Add((SoundLevel, null));
                ret.Add((WAUDUnknown2, null));
                ret.Add((WTUR, null));
                ret.Add((ChargeFullPowerSeconds, null));
                ret.Add((ChargeMinPowerPerShot, null));
                ret.Add((ChargeCritBonus, null));
                ret.Add((ChargeHoldInput, null));
                ret.Add((ChargingAttack, null));
                ret.Add((AttackDamage, null));
                ret.Add((MinRange, null));
                ret.Add((MaxRange, null));
                ret.Add((OutOfRangeDamageMult, null));
                ret.Add((CritDamageMult, null));
                ret.Add((CriticalHitSpell, null));
                ret.Add((CritEffectOnDeathOnly, null));
                ret.Add((HitBehavior, null));
                ret.Add((Resistance, null));
                ret.Add((Skill, null));
                ret.Add((WDMGUnknown4, null));
                ret.Add((WDMGUnknown5, null));
                ret.Add((WDMGUnknown6, null));
                ret.Add((WDMGUnknown7, null));
                ret.Add((WDMGUnknown8, null));
                ret.Add((WDMGUnknown9, null));
                ret.Add((CritChanceIncMult, null));
                ret.Add((DamageTypes == null ? DefaultOn : !DamageTypes.GetCrystal().CopyNothing, DamageTypes?.GetCrystal()));
                ret.Add((FiringType, null));
                ret.Add((BurstCount, null));
                ret.Add((RepeatableFire, null));
                ret.Add((AttackSeconds, null));
                ret.Add((FireSeconds, null));
                ret.Add((AttackDelaySeconds, null));
                ret.Add((BoltChargeSeconds, null));
                ret.Add((BoltAction, null));
                ret.Add((DisableShellCaseEject, null));
                ret.Add((ShotsPerSecond, null));
                ret.Add((WFIRUnknown7, null));
                ret.Add((OverrideRateOfFire, null));
                ret.Add((TriggerThresholdPrimaryTrigger, null));
                ret.Add((WFIRUnknown10, null));
                ret.Add((TriggerThresholdSecondStage, null));
                ret.Add((HasStagedTrigger, null));
                ret.Add((HasDualTrigger, null));
                ret.Add((BurstDelaySeconds, null));
                ret.Add((NonPlayable, null));
                ret.Add((PlayerOnly, null));
                ret.Add((WFLGUnknown1, null));
                ret.Add((WFLGUnknown2, null));
                ret.Add((CannotDrop, null));
                ret.Add((MinorCrime, null));
                ret.Add((NonHostile, null));
                ret.Add((WFLGUnknown3, null));
                ret.Add((WFLGUnknown4, null));
                ret.Add((WFLGUnknown5, null));
                ret.Add((WFLGUnknown6, null));
                ret.Add((WFLGUnknown7, null));
                ret.Add((WGENUnknown1, null));
                ret.Add((BaseWeight, null));
                ret.Add((BaseValue, null));
                ret.Add((BaseSpeed, null));
                ret.Add((AttackOxygenCost, null));
                ret.Add((WeaponBarrel, null));
                ret.Add((General, null));
                ret.Add((WMELUnknown1, null));
                ret.Add((MeleeBashDamage, null));
                ret.Add((MeleeReach, null));
                ret.Add((MeleeStagger, null));
                ret.Add((Power, null));
                ret.Add((PowerRechargeTime, null));
                ret.Add((PowerRechargeDelay, null));
                ret.Add((ConsumeAmmo, null));
                ret.Add((PowerBonus, null));
                ret.Add((UsePower, null));
                ret.Add((QNAMUnknown1, null));
                ret.Add((QNAMUnknown2, null));
                ret.Add((QNAMUnknown3, null));
                ret.Add((QNAMUnknown4, null));
                ret.Add((QNAMUnknown5, null));
                ret.Add((PowerConsumption, null));
                ret.Add((WRLOUnknown1, null));
                ret.Add((ReloadSpeed, null));
                ret.Add((ReloadCharging, null));
                ret.Add((ReloadSingle, null));
                ret.Add((WRUM, null));
                ret.Add((ApertureValueMin, null));
                ret.Add((ApertureValueMax, null));
                ret.Add((ApertureInputMin, null));
                ret.Add((ApertureInputMax, null));
                ret.Add((ApertureAcceleration, null));
                ret.Add((ApertureDeceleration, null));
                ret.Add((DistanceValueMin, null));
                ret.Add((DistanceValueMax, null));
                ret.Add((DistanceInputMin, null));
                ret.Add((DistanceInputMax, null));
                ret.Add((DistanceAcceleration, null));
                ret.Add((DistanceDeceleration, null));
                ret.Add((UseVariableRange, null));
                ret.Add((FirstPersonModel != null ? FirstPersonModel.OnOverall : DefaultOn, FirstPersonModel?.GetCrystal()));
                ret.Add((WVISUnknown1, null));
                ret.Add((WVISUnknown2, null));
                ret.Add((WVISUnknown3, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((ColorRemappingIndex, null));
                ret.Add((ImageSpaceAdapter, null));
                ret.Add((WTRMUnknown1, null));
                ret.Add((WTRMUnknown2, null));
                ret.Add((WTRMUnknown3, null));
                ret.Add((WTRMUnknown4, null));
                ret.Add((WTRMUnknown5, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Weapon_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeaponSetterCommon.Instance.RemapLinks(this, mapping);
        public Weapon(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Weapon(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Weapon(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Weapon(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Weapon(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Weapon>.ToString(this);
        }

        protected override Type LinkType => typeof(IWeapon);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => WeaponCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => WeaponSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => WeaponSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => WeaponSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeaponGetter rhs) return false;
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponGetter? obj)
        {
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Weapon CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Weapon();
            ((WeaponSetterCommon)((IWeaponGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Weapon item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WeaponSetterCommon)((IWeaponGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weapon GetNew()
        {
            return new Weapon();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeapon :
        IAssetLinkContainer,
        IBaseObject,
        IBindableEquipment,
        IConstructibleObjectTarget,
        IEnchantable,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IItem,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IWeaponInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IResearchResourceTarget,
        IScripted,
        IStarfieldMajorRecordInternal,
        IStaticTarget,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeaponGetter
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new ObjectPaletteDefaults? ObjectPaletteDefaults { get; set; }
        new Transforms? Transforms { get; set; }
        new UInt64? XALG { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new IFormLinkNullable<IObjectEffectGetter> ObjectEffect { get; set; }
        new UInt16? EnchantmentAmount { get; set; }
        new IFormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new IFormLinkNullable<IImpactDataSetGetter> BlockBashImpactDataSet { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; }
        new SoundReference? PickupSound { get; set; }
        new SoundReference? DropdownSound { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new TranslatedString? Description { get; set; }
        new IFormLinkNullable<IInstanceNamingRulesGetter> InstanceNaming { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new ExtendedList<ObjectTemplate<Weapon.Property>>? ObjectTemplates { get; set; }
        new IFormLinkNullable<IAObjectModificationGetter> EmbeddedWeaponMod { get; set; }
        new MemorySlice<Byte>? BNAM { get; set; }
        new Single SightedTransitionSeconds { get; set; }
        new IFormLink<IZoomGetter> AimDownSightTemplate { get; set; }
        new IFormLink<IAimModelGetter> AimModel { get; set; }
        new Byte AccuracyBonus { get; set; }
        new Boolean HasScope { get; set; }
        new IFormLink<IAimAssistModelGetter> AimAssistTemplate { get; set; }
        new IFormLink<IAimOpticalSightMarkerGetter> AimOpticalSightModel { get; set; }
        new IFormLink<IMeleeAimAssistModelGetter> MeleeAimAssistModel { get; set; }
        new Byte WAIMUnknown1 { get; set; }
        new Byte WAIMUnknown2 { get; set; }
        new Boolean EnableMarkingTargets { get; set; }
        new UInt32 ReticleType { get; set; }
        new Byte WAIMUnknown3 { get; set; }
        new Byte WAIMUnknown4 { get; set; }
        new IFormLink<IAmmunitionGetter> AmmoType { get; set; }
        new UInt32 AmmoCapacity { get; set; }
        new IFormLink<ILeveledItemGetter> AmmoList { get; set; }
        new IFormLink<IProjectileGetter> OverrideProjectile { get; set; }
        new IFormLink<IArtObjectGetter> OverrideShellCasing { get; set; }
        new Byte ProjectilesCount { get; set; }
        new Boolean NpcsUseAmmo { get; set; }
        new Byte WAM2Unknown1 { get; set; }
        new MemorySlice<Byte>? WAMM { get; set; }
        new SoundReference MeleeOrCreature { get; set; }
        new SoundReference PrimedExplosive { get; set; }
        new SoundReference DryFire { get; set; }
        new SoundReference Idle { get; set; }
        new SoundReference Equip { get; set; }
        new SoundReference Unequip { get; set; }
        new SoundReference FastEquip { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new Int32 WAUDUnknown2 { get; set; }
        new MemorySlice<Byte>? WTUR { get; set; }
        new Single ChargeFullPowerSeconds { get; set; }
        new Single ChargeMinPowerPerShot { get; set; }
        new Single ChargeCritBonus { get; set; }
        new Boolean ChargeHoldInput { get; set; }
        new Boolean ChargingAttack { get; set; }
        new Single AttackDamage { get; set; }
        new Single MinRange { get; set; }
        new Single MaxRange { get; set; }
        new Single OutOfRangeDamageMult { get; set; }
        new Single CritDamageMult { get; set; }
        new IFormLink<ISpellGetter> CriticalHitSpell { get; set; }
        new Boolean CritEffectOnDeathOnly { get; set; }
        new HitBehavior HitBehavior { get; set; }
        new IFormLink<IActorValueInformationGetter> Resistance { get; set; }
        new IFormLink<IActorValueInformationGetter> Skill { get; set; }
        new Single WDMGUnknown4 { get; set; }
        new Single WDMGUnknown5 { get; set; }
        new Single WDMGUnknown6 { get; set; }
        new Single WDMGUnknown7 { get; set; }
        new Single WDMGUnknown8 { get; set; }
        new Single WDMGUnknown9 { get; set; }
        new Single CritChanceIncMult { get; set; }
        new ExtendedList<WeaponDamageType>? DamageTypes { get; set; }
        new Weapon.FiringTypeEnum FiringType { get; set; }
        new Byte BurstCount { get; set; }
        new Boolean RepeatableFire { get; set; }
        new Single AttackSeconds { get; set; }
        new Single FireSeconds { get; set; }
        new Single AttackDelaySeconds { get; set; }
        new Single BoltChargeSeconds { get; set; }
        new Boolean BoltAction { get; set; }
        new Boolean DisableShellCaseEject { get; set; }
        new Single ShotsPerSecond { get; set; }
        new Single WFIRUnknown7 { get; set; }
        new Boolean OverrideRateOfFire { get; set; }
        new Single TriggerThresholdPrimaryTrigger { get; set; }
        new Byte WFIRUnknown10 { get; set; }
        new Single TriggerThresholdSecondStage { get; set; }
        new Boolean HasStagedTrigger { get; set; }
        new Boolean HasDualTrigger { get; set; }
        new Single BurstDelaySeconds { get; set; }
        new Boolean NonPlayable { get; set; }
        new Boolean PlayerOnly { get; set; }
        new Boolean WFLGUnknown1 { get; set; }
        new Boolean WFLGUnknown2 { get; set; }
        new Boolean CannotDrop { get; set; }
        new Boolean MinorCrime { get; set; }
        new Boolean NonHostile { get; set; }
        new Boolean WFLGUnknown3 { get; set; }
        new Boolean WFLGUnknown4 { get; set; }
        new Boolean WFLGUnknown5 { get; set; }
        new Boolean WFLGUnknown6 { get; set; }
        new Boolean WFLGUnknown7 { get; set; }
        new UInt32 WGENUnknown1 { get; set; }
        new Single BaseWeight { get; set; }
        new UInt32 BaseValue { get; set; }
        new Single BaseSpeed { get; set; }
        new Single AttackOxygenCost { get; set; }
        new IFormLink<IWeaponBarrelModelGetter> WeaponBarrel { get; set; }
        new TranslatedString? General { get; set; }
        new Byte WMELUnknown1 { get; set; }
        new Single MeleeBashDamage { get; set; }
        new Single MeleeReach { get; set; }
        new Stagger MeleeStagger { get; set; }
        new IFormLink<IActorValueInformationGetter> Power { get; set; }
        new Single PowerRechargeTime { get; set; }
        new Single PowerRechargeDelay { get; set; }
        new Boolean ConsumeAmmo { get; set; }
        new IFormLink<IActorValueInformationGetter> PowerBonus { get; set; }
        new Boolean UsePower { get; set; }
        new Byte QNAMUnknown1 { get; set; }
        new Single QNAMUnknown2 { get; set; }
        new Byte QNAMUnknown3 { get; set; }
        new IFormLink<ICurveTableGetter> QNAMUnknown4 { get; set; }
        new Single QNAMUnknown5 { get; set; }
        new IFormLink<ICurveTableGetter> PowerConsumption { get; set; }
        new Single WRLOUnknown1 { get; set; }
        new Single ReloadSpeed { get; set; }
        new Boolean ReloadCharging { get; set; }
        new Boolean ReloadSingle { get; set; }
        new MemorySlice<Byte>? WRUM { get; set; }
        new Single ApertureValueMin { get; set; }
        new Single ApertureValueMax { get; set; }
        new Single ApertureInputMin { get; set; }
        new Single ApertureInputMax { get; set; }
        new Single ApertureAcceleration { get; set; }
        new Single ApertureDeceleration { get; set; }
        new Single DistanceValueMin { get; set; }
        new Single DistanceValueMax { get; set; }
        new Single DistanceInputMin { get; set; }
        new Single DistanceInputMax { get; set; }
        new Single DistanceAcceleration { get; set; }
        new Single DistanceDeceleration { get; set; }
        new Boolean UseVariableRange { get; set; }
        new FirstPersonModel? FirstPersonModel { get; set; }
        new UInt32 WVISUnknown1 { get; set; }
        new UInt32 WVISUnknown2 { get; set; }
        new UInt32 WVISUnknown3 { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new Single ColorRemappingIndex { get; set; }
        new IFormLink<IImageSpaceAdapterGetter> ImageSpaceAdapter { get; set; }
        new Single WTRMUnknown1 { get; set; }
        new Byte WTRMUnknown2 { get; set; }
        new Single WTRMUnknown3 { get; set; }
        new Single WTRMUnknown4 { get; set; }
        new Single WTRMUnknown5 { get; set; }
        #region Mutagen
        new Weapon.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IWeaponInternal :
        IStarfieldMajorRecordInternal,
        IWeapon,
        IWeaponGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.WEAP)]
    public partial interface IWeaponGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IBindableEquipmentGetter,
        IConstructibleObjectTargetGetter,
        IEnchantableGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IItemGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IWeaponGetter>,
        IMapsToGetter<IWeaponGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IResearchResourceTargetGetter,
        IScriptedGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Weapon_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        IObjectPaletteDefaultsGetter? ObjectPaletteDefaults { get; }
        ITransformsGetter? Transforms { get; }
        UInt64? XALG { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IFormLinkNullableGetter<IObjectEffectGetter> ObjectEffect { get; }
        UInt16? EnchantmentAmount { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> BlockBashImpactDataSet { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> AlternateBlockMaterial { get; }
        ISoundReferenceGetter? PickupSound { get; }
        ISoundReferenceGetter? DropdownSound { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        ITranslatedStringGetter? Description { get; }
        IFormLinkNullableGetter<IInstanceNamingRulesGetter> InstanceNaming { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        IReadOnlyList<IObjectTemplateGetter<Weapon.Property>>? ObjectTemplates { get; }
        IFormLinkNullableGetter<IAObjectModificationGetter> EmbeddedWeaponMod { get; }
        ReadOnlyMemorySlice<Byte>? BNAM { get; }
        Single SightedTransitionSeconds { get; }
        IFormLinkGetter<IZoomGetter> AimDownSightTemplate { get; }
        IFormLinkGetter<IAimModelGetter> AimModel { get; }
        Byte AccuracyBonus { get; }
        Boolean HasScope { get; }
        IFormLinkGetter<IAimAssistModelGetter> AimAssistTemplate { get; }
        IFormLinkGetter<IAimOpticalSightMarkerGetter> AimOpticalSightModel { get; }
        IFormLinkGetter<IMeleeAimAssistModelGetter> MeleeAimAssistModel { get; }
        Byte WAIMUnknown1 { get; }
        Byte WAIMUnknown2 { get; }
        Boolean EnableMarkingTargets { get; }
        UInt32 ReticleType { get; }
        Byte WAIMUnknown3 { get; }
        Byte WAIMUnknown4 { get; }
        IFormLinkGetter<IAmmunitionGetter> AmmoType { get; }
        UInt32 AmmoCapacity { get; }
        IFormLinkGetter<ILeveledItemGetter> AmmoList { get; }
        IFormLinkGetter<IProjectileGetter> OverrideProjectile { get; }
        IFormLinkGetter<IArtObjectGetter> OverrideShellCasing { get; }
        Byte ProjectilesCount { get; }
        Boolean NpcsUseAmmo { get; }
        Byte WAM2Unknown1 { get; }
        ReadOnlyMemorySlice<Byte>? WAMM { get; }
        ISoundReferenceGetter MeleeOrCreature { get; }
        ISoundReferenceGetter PrimedExplosive { get; }
        ISoundReferenceGetter DryFire { get; }
        ISoundReferenceGetter Idle { get; }
        ISoundReferenceGetter Equip { get; }
        ISoundReferenceGetter Unequip { get; }
        ISoundReferenceGetter FastEquip { get; }
        SoundLevel SoundLevel { get; }
        Int32 WAUDUnknown2 { get; }
        ReadOnlyMemorySlice<Byte>? WTUR { get; }
        Single ChargeFullPowerSeconds { get; }
        Single ChargeMinPowerPerShot { get; }
        Single ChargeCritBonus { get; }
        Boolean ChargeHoldInput { get; }
        Boolean ChargingAttack { get; }
        Single AttackDamage { get; }
        Single MinRange { get; }
        Single MaxRange { get; }
        Single OutOfRangeDamageMult { get; }
        Single CritDamageMult { get; }
        IFormLinkGetter<ISpellGetter> CriticalHitSpell { get; }
        Boolean CritEffectOnDeathOnly { get; }
        HitBehavior HitBehavior { get; }
        IFormLinkGetter<IActorValueInformationGetter> Resistance { get; }
        IFormLinkGetter<IActorValueInformationGetter> Skill { get; }
        Single WDMGUnknown4 { get; }
        Single WDMGUnknown5 { get; }
        Single WDMGUnknown6 { get; }
        Single WDMGUnknown7 { get; }
        Single WDMGUnknown8 { get; }
        Single WDMGUnknown9 { get; }
        Single CritChanceIncMult { get; }
        IReadOnlyList<IWeaponDamageTypeGetter>? DamageTypes { get; }
        Weapon.FiringTypeEnum FiringType { get; }
        Byte BurstCount { get; }
        Boolean RepeatableFire { get; }
        Single AttackSeconds { get; }
        Single FireSeconds { get; }
        Single AttackDelaySeconds { get; }
        Single BoltChargeSeconds { get; }
        Boolean BoltAction { get; }
        Boolean DisableShellCaseEject { get; }
        Single ShotsPerSecond { get; }
        Single WFIRUnknown7 { get; }
        Boolean OverrideRateOfFire { get; }
        Single TriggerThresholdPrimaryTrigger { get; }
        Byte WFIRUnknown10 { get; }
        Single TriggerThresholdSecondStage { get; }
        Boolean HasStagedTrigger { get; }
        Boolean HasDualTrigger { get; }
        Single BurstDelaySeconds { get; }
        Boolean NonPlayable { get; }
        Boolean PlayerOnly { get; }
        Boolean WFLGUnknown1 { get; }
        Boolean WFLGUnknown2 { get; }
        Boolean CannotDrop { get; }
        Boolean MinorCrime { get; }
        Boolean NonHostile { get; }
        Boolean WFLGUnknown3 { get; }
        Boolean WFLGUnknown4 { get; }
        Boolean WFLGUnknown5 { get; }
        Boolean WFLGUnknown6 { get; }
        Boolean WFLGUnknown7 { get; }
        UInt32 WGENUnknown1 { get; }
        Single BaseWeight { get; }
        UInt32 BaseValue { get; }
        Single BaseSpeed { get; }
        Single AttackOxygenCost { get; }
        IFormLinkGetter<IWeaponBarrelModelGetter> WeaponBarrel { get; }
        ITranslatedStringGetter? General { get; }
        Byte WMELUnknown1 { get; }
        Single MeleeBashDamage { get; }
        Single MeleeReach { get; }
        Stagger MeleeStagger { get; }
        IFormLinkGetter<IActorValueInformationGetter> Power { get; }
        Single PowerRechargeTime { get; }
        Single PowerRechargeDelay { get; }
        Boolean ConsumeAmmo { get; }
        IFormLinkGetter<IActorValueInformationGetter> PowerBonus { get; }
        Boolean UsePower { get; }
        Byte QNAMUnknown1 { get; }
        Single QNAMUnknown2 { get; }
        Byte QNAMUnknown3 { get; }
        IFormLinkGetter<ICurveTableGetter> QNAMUnknown4 { get; }
        Single QNAMUnknown5 { get; }
        IFormLinkGetter<ICurveTableGetter> PowerConsumption { get; }
        Single WRLOUnknown1 { get; }
        Single ReloadSpeed { get; }
        Boolean ReloadCharging { get; }
        Boolean ReloadSingle { get; }
        ReadOnlyMemorySlice<Byte>? WRUM { get; }
        Single ApertureValueMin { get; }
        Single ApertureValueMax { get; }
        Single ApertureInputMin { get; }
        Single ApertureInputMax { get; }
        Single ApertureAcceleration { get; }
        Single ApertureDeceleration { get; }
        Single DistanceValueMin { get; }
        Single DistanceValueMax { get; }
        Single DistanceInputMin { get; }
        Single DistanceInputMax { get; }
        Single DistanceAcceleration { get; }
        Single DistanceDeceleration { get; }
        Boolean UseVariableRange { get; }
        IFirstPersonModelGetter? FirstPersonModel { get; }
        UInt32 WVISUnknown1 { get; }
        UInt32 WVISUnknown2 { get; }
        UInt32 WVISUnknown3 { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        Single ColorRemappingIndex { get; }
        IFormLinkGetter<IImageSpaceAdapterGetter> ImageSpaceAdapter { get; }
        Single WTRMUnknown1 { get; }
        Byte WTRMUnknown2 { get; }
        Single WTRMUnknown3 { get; }
        Single WTRMUnknown4 { get; }
        Single WTRMUnknown5 { get; }

        #region Mutagen
        Weapon.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class WeaponMixIn
    {
        public static void Clear(this IWeaponInternal item)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weapon.Mask<bool> GetEqualsMask(
            this IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWeaponGetter item,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWeaponGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeaponGetter item,
            IWeaponGetter rhs,
            Weapon.TranslationMask? equalsMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Weapon.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Weapon Duplicate(
            this IWeaponGetter item,
            FormKey formKey,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Weapon Duplicate(
            this IWeaponGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeaponInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Weapon_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        DirtinessScale = 9,
        ObjectPaletteDefaults = 10,
        Transforms = 11,
        XALG = 12,
        Components = 13,
        Name = 14,
        Model = 15,
        ObjectEffect = 16,
        EnchantmentAmount = 17,
        EquipmentType = 18,
        BlockBashImpactDataSet = 19,
        AlternateBlockMaterial = 20,
        PickupSound = 21,
        DropdownSound = 22,
        Keywords = 23,
        Description = 24,
        InstanceNaming = 25,
        AttachParentSlots = 26,
        ObjectTemplates = 27,
        EmbeddedWeaponMod = 28,
        BNAM = 29,
        SightedTransitionSeconds = 30,
        AimDownSightTemplate = 31,
        AimModel = 32,
        AccuracyBonus = 33,
        HasScope = 34,
        AimAssistTemplate = 35,
        AimOpticalSightModel = 36,
        MeleeAimAssistModel = 37,
        WAIMUnknown1 = 38,
        WAIMUnknown2 = 39,
        EnableMarkingTargets = 40,
        ReticleType = 41,
        WAIMUnknown3 = 42,
        WAIMUnknown4 = 43,
        AmmoType = 44,
        AmmoCapacity = 45,
        AmmoList = 46,
        OverrideProjectile = 47,
        OverrideShellCasing = 48,
        ProjectilesCount = 49,
        NpcsUseAmmo = 50,
        WAM2Unknown1 = 51,
        WAMM = 52,
        MeleeOrCreature = 53,
        PrimedExplosive = 54,
        DryFire = 55,
        Idle = 56,
        Equip = 57,
        Unequip = 58,
        FastEquip = 59,
        SoundLevel = 60,
        WAUDUnknown2 = 61,
        WTUR = 62,
        ChargeFullPowerSeconds = 63,
        ChargeMinPowerPerShot = 64,
        ChargeCritBonus = 65,
        ChargeHoldInput = 66,
        ChargingAttack = 67,
        AttackDamage = 68,
        MinRange = 69,
        MaxRange = 70,
        OutOfRangeDamageMult = 71,
        CritDamageMult = 72,
        CriticalHitSpell = 73,
        CritEffectOnDeathOnly = 74,
        HitBehavior = 75,
        Resistance = 76,
        Skill = 77,
        WDMGUnknown4 = 78,
        WDMGUnknown5 = 79,
        WDMGUnknown6 = 80,
        WDMGUnknown7 = 81,
        WDMGUnknown8 = 82,
        WDMGUnknown9 = 83,
        CritChanceIncMult = 84,
        DamageTypes = 85,
        FiringType = 86,
        BurstCount = 87,
        RepeatableFire = 88,
        AttackSeconds = 89,
        FireSeconds = 90,
        AttackDelaySeconds = 91,
        BoltChargeSeconds = 92,
        BoltAction = 93,
        DisableShellCaseEject = 94,
        ShotsPerSecond = 95,
        WFIRUnknown7 = 96,
        OverrideRateOfFire = 97,
        TriggerThresholdPrimaryTrigger = 98,
        WFIRUnknown10 = 99,
        TriggerThresholdSecondStage = 100,
        HasStagedTrigger = 101,
        HasDualTrigger = 102,
        BurstDelaySeconds = 103,
        NonPlayable = 104,
        PlayerOnly = 105,
        WFLGUnknown1 = 106,
        WFLGUnknown2 = 107,
        CannotDrop = 108,
        MinorCrime = 109,
        NonHostile = 110,
        WFLGUnknown3 = 111,
        WFLGUnknown4 = 112,
        WFLGUnknown5 = 113,
        WFLGUnknown6 = 114,
        WFLGUnknown7 = 115,
        WGENUnknown1 = 116,
        BaseWeight = 117,
        BaseValue = 118,
        BaseSpeed = 119,
        AttackOxygenCost = 120,
        WeaponBarrel = 121,
        General = 122,
        WMELUnknown1 = 123,
        MeleeBashDamage = 124,
        MeleeReach = 125,
        MeleeStagger = 126,
        Power = 127,
        PowerRechargeTime = 128,
        PowerRechargeDelay = 129,
        ConsumeAmmo = 130,
        PowerBonus = 131,
        UsePower = 132,
        QNAMUnknown1 = 133,
        QNAMUnknown2 = 134,
        QNAMUnknown3 = 135,
        QNAMUnknown4 = 136,
        QNAMUnknown5 = 137,
        PowerConsumption = 138,
        WRLOUnknown1 = 139,
        ReloadSpeed = 140,
        ReloadCharging = 141,
        ReloadSingle = 142,
        WRUM = 143,
        ApertureValueMin = 144,
        ApertureValueMax = 145,
        ApertureInputMin = 146,
        ApertureInputMax = 147,
        ApertureAcceleration = 148,
        ApertureDeceleration = 149,
        DistanceValueMin = 150,
        DistanceValueMax = 151,
        DistanceInputMin = 152,
        DistanceInputMax = 153,
        DistanceAcceleration = 154,
        DistanceDeceleration = 155,
        UseVariableRange = 156,
        FirstPersonModel = 157,
        WVISUnknown1 = 158,
        WVISUnknown2 = 159,
        WVISUnknown3 = 160,
        ImpactDataSet = 161,
        ColorRemappingIndex = 162,
        ImageSpaceAdapter = 163,
        WTRMUnknown1 = 164,
        WTRMUnknown2 = 165,
        WTRMUnknown3 = 166,
        WTRMUnknown4 = 167,
        WTRMUnknown5 = 168,
    }
    #endregion

    #region Registration
    internal partial class Weapon_Registration : ILoquiRegistration
    {
        public static readonly Weapon_Registration Instance = new Weapon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 162;

        public const ushort FieldCount = 169;

        public static readonly Type MaskType = typeof(Weapon.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weapon.ErrorMask);

        public static readonly Type ClassType = typeof(Weapon);

        public static readonly Type GetterType = typeof(IWeaponGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeapon);

        public static readonly Type? InternalSetterType = typeof(IWeaponInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Weapon";

        public const string Name = "Weapon";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WEAP;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WEAP);
            var all = RecordCollection.Factory(
                RecordTypes.WEAP,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.OPDS,
                RecordTypes.PTT2,
                RecordTypes.XALG,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.EITM,
                RecordTypes.EAMT,
                RecordTypes.ETYP,
                RecordTypes.BIDS,
                RecordTypes.BAMT,
                RecordTypes.PUSH,
                RecordTypes.PDSH,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DESC,
                RecordTypes.INRD,
                RecordTypes.APPR,
                RecordTypes.OBTE,
                RecordTypes.OBTF,
                RecordTypes.OBTS,
                RecordTypes.STOP,
                RecordTypes.NNAM,
                RecordTypes.BNAM,
                RecordTypes.WAIM,
                RecordTypes.WAM2,
                RecordTypes.WAMM,
                RecordTypes.WAUD,
                RecordTypes.WTUR,
                RecordTypes.WCHG,
                RecordTypes.WDMG,
                RecordTypes.DAMA,
                RecordTypes.WFIR,
                RecordTypes.WFLG,
                RecordTypes.WGEN,
                RecordTypes.WABB,
                RecordTypes.WMEL,
                RecordTypes.QNAM,
                RecordTypes.WRLO,
                RecordTypes.WRUM,
                RecordTypes.WVAR,
                RecordTypes.MOD4,
                RecordTypes.MO4S,
                RecordTypes.MO4C,
                RecordTypes.WVIS,
                RecordTypes.WTRM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeaponBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeaponSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly WeaponSetterCommon Instance = new WeaponSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.ObjectPaletteDefaults = null;
            item.Transforms = null;
            item.XALG = default;
            item.Components.Clear();
            item.Name = default;
            item.Model = null;
            item.ObjectEffect.Clear();
            item.EnchantmentAmount = default;
            item.EquipmentType.Clear();
            item.BlockBashImpactDataSet.Clear();
            item.AlternateBlockMaterial.Clear();
            item.PickupSound = null;
            item.DropdownSound = null;
            item.Keywords = null;
            item.Description = default;
            item.InstanceNaming.Clear();
            item.AttachParentSlots = null;
            item.ObjectTemplates = null;
            item.EmbeddedWeaponMod.Clear();
            item.BNAM = default;
            item.SightedTransitionSeconds = default(Single);
            item.AimDownSightTemplate.Clear();
            item.AimModel.Clear();
            item.AccuracyBonus = default(Byte);
            item.HasScope = default(Boolean);
            item.AimAssistTemplate.Clear();
            item.AimOpticalSightModel.Clear();
            item.MeleeAimAssistModel.Clear();
            item.WAIMUnknown1 = default(Byte);
            item.WAIMUnknown2 = default(Byte);
            item.EnableMarkingTargets = default(Boolean);
            item.ReticleType = default(UInt32);
            item.WAIMUnknown3 = default(Byte);
            item.WAIMUnknown4 = default(Byte);
            item.AmmoType.Clear();
            item.AmmoCapacity = default(UInt32);
            item.AmmoList.Clear();
            item.OverrideProjectile.Clear();
            item.OverrideShellCasing.Clear();
            item.ProjectilesCount = default(Byte);
            item.NpcsUseAmmo = default(Boolean);
            item.WAM2Unknown1 = default(Byte);
            item.WAMM = default;
            item.MeleeOrCreature.Clear();
            item.PrimedExplosive.Clear();
            item.DryFire.Clear();
            item.Idle.Clear();
            item.Equip.Clear();
            item.Unequip.Clear();
            item.FastEquip.Clear();
            item.SoundLevel = default(SoundLevel);
            item.WAUDUnknown2 = default(Int32);
            item.WTUR = default;
            item.ChargeFullPowerSeconds = default(Single);
            item.ChargeMinPowerPerShot = default(Single);
            item.ChargeCritBonus = default(Single);
            item.ChargeHoldInput = default(Boolean);
            item.ChargingAttack = default(Boolean);
            item.AttackDamage = default(Single);
            item.MinRange = default(Single);
            item.MaxRange = default(Single);
            item.OutOfRangeDamageMult = default(Single);
            item.CritDamageMult = default(Single);
            item.CriticalHitSpell.Clear();
            item.CritEffectOnDeathOnly = default(Boolean);
            item.HitBehavior = default(HitBehavior);
            item.Resistance.Clear();
            item.Skill.Clear();
            item.WDMGUnknown4 = default(Single);
            item.WDMGUnknown5 = default(Single);
            item.WDMGUnknown6 = default(Single);
            item.WDMGUnknown7 = default(Single);
            item.WDMGUnknown8 = default(Single);
            item.WDMGUnknown9 = default(Single);
            item.CritChanceIncMult = default(Single);
            item.DamageTypes = null;
            item.FiringType = default(Weapon.FiringTypeEnum);
            item.BurstCount = default(Byte);
            item.RepeatableFire = default(Boolean);
            item.AttackSeconds = default(Single);
            item.FireSeconds = default(Single);
            item.AttackDelaySeconds = default(Single);
            item.BoltChargeSeconds = default(Single);
            item.BoltAction = default(Boolean);
            item.DisableShellCaseEject = default(Boolean);
            item.ShotsPerSecond = default(Single);
            item.WFIRUnknown7 = default(Single);
            item.OverrideRateOfFire = default(Boolean);
            item.TriggerThresholdPrimaryTrigger = default(Single);
            item.WFIRUnknown10 = default(Byte);
            item.TriggerThresholdSecondStage = default(Single);
            item.HasStagedTrigger = default(Boolean);
            item.HasDualTrigger = default(Boolean);
            item.BurstDelaySeconds = default(Single);
            item.NonPlayable = default(Boolean);
            item.PlayerOnly = default(Boolean);
            item.WFLGUnknown1 = default(Boolean);
            item.WFLGUnknown2 = default(Boolean);
            item.CannotDrop = default(Boolean);
            item.MinorCrime = default(Boolean);
            item.NonHostile = default(Boolean);
            item.WFLGUnknown3 = default(Boolean);
            item.WFLGUnknown4 = default(Boolean);
            item.WFLGUnknown5 = default(Boolean);
            item.WFLGUnknown6 = default(Boolean);
            item.WFLGUnknown7 = default(Boolean);
            item.WGENUnknown1 = default(UInt32);
            item.BaseWeight = default(Single);
            item.BaseValue = default(UInt32);
            item.BaseSpeed = default(Single);
            item.AttackOxygenCost = default(Single);
            item.WeaponBarrel.Clear();
            item.General = default;
            item.WMELUnknown1 = default(Byte);
            item.MeleeBashDamage = default(Single);
            item.MeleeReach = default(Single);
            item.MeleeStagger = default(Stagger);
            item.Power.Clear();
            item.PowerRechargeTime = default(Single);
            item.PowerRechargeDelay = default(Single);
            item.ConsumeAmmo = default(Boolean);
            item.PowerBonus.Clear();
            item.UsePower = default(Boolean);
            item.QNAMUnknown1 = default(Byte);
            item.QNAMUnknown2 = default(Single);
            item.QNAMUnknown3 = default(Byte);
            item.QNAMUnknown4.Clear();
            item.QNAMUnknown5 = default(Single);
            item.PowerConsumption.Clear();
            item.WRLOUnknown1 = default(Single);
            item.ReloadSpeed = default(Single);
            item.ReloadCharging = default(Boolean);
            item.ReloadSingle = default(Boolean);
            item.WRUM = default;
            item.ApertureValueMin = default(Single);
            item.ApertureValueMax = default(Single);
            item.ApertureInputMin = default(Single);
            item.ApertureInputMax = default(Single);
            item.ApertureAcceleration = default(Single);
            item.ApertureDeceleration = default(Single);
            item.DistanceValueMin = default(Single);
            item.DistanceValueMax = default(Single);
            item.DistanceInputMin = default(Single);
            item.DistanceInputMax = default(Single);
            item.DistanceAcceleration = default(Single);
            item.DistanceDeceleration = default(Single);
            item.UseVariableRange = default(Boolean);
            item.FirstPersonModel = null;
            item.WVISUnknown1 = default(UInt32);
            item.WVISUnknown2 = default(UInt32);
            item.WVISUnknown3 = default(UInt32);
            item.ImpactDataSet.Clear();
            item.ColorRemappingIndex = default(Single);
            item.ImageSpaceAdapter.Clear();
            item.WTRMUnknown1 = default(Single);
            item.WTRMUnknown2 = default(Byte);
            item.WTRMUnknown3 = default(Single);
            item.WTRMUnknown4 = default(Single);
            item.WTRMUnknown5 = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWeapon obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ObjectEffect.Relink(mapping);
            obj.EquipmentType.Relink(mapping);
            obj.BlockBashImpactDataSet.Relink(mapping);
            obj.AlternateBlockMaterial.Relink(mapping);
            obj.PickupSound?.RemapLinks(mapping);
            obj.DropdownSound?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.InstanceNaming.Relink(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.ObjectTemplates?.RemapLinks(mapping);
            obj.EmbeddedWeaponMod.Relink(mapping);
            obj.AimDownSightTemplate.Relink(mapping);
            obj.AimModel.Relink(mapping);
            obj.AimAssistTemplate.Relink(mapping);
            obj.AimOpticalSightModel.Relink(mapping);
            obj.MeleeAimAssistModel.Relink(mapping);
            obj.AmmoType.Relink(mapping);
            obj.AmmoList.Relink(mapping);
            obj.OverrideProjectile.Relink(mapping);
            obj.OverrideShellCasing.Relink(mapping);
            obj.MeleeOrCreature.RemapLinks(mapping);
            obj.PrimedExplosive.RemapLinks(mapping);
            obj.DryFire.RemapLinks(mapping);
            obj.Idle.RemapLinks(mapping);
            obj.Equip.RemapLinks(mapping);
            obj.Unequip.RemapLinks(mapping);
            obj.FastEquip.RemapLinks(mapping);
            obj.CriticalHitSpell.Relink(mapping);
            obj.Resistance.Relink(mapping);
            obj.Skill.Relink(mapping);
            obj.DamageTypes?.RemapLinks(mapping);
            obj.WeaponBarrel.Relink(mapping);
            obj.Power.Relink(mapping);
            obj.PowerBonus.Relink(mapping);
            obj.QNAMUnknown4.Relink(mapping);
            obj.PowerConsumption.Relink(mapping);
            obj.FirstPersonModel?.RemapLinks(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.ImageSpaceAdapter.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IWeapon obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.FirstPersonModel is {} FirstPersonModelItems)
            {
                foreach (var item in FirstPersonModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IWeapon obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.FirstPersonModel?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeaponInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWeaponInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeaponBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeaponBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Weapon)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Weapon)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WeaponCommon : StarfieldMajorRecordCommon
    {
        public new static readonly WeaponCommon Instance = new WeaponCommon();

        public Weapon.Mask<bool> GetEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weapon.Mask<bool>(false);
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            Weapon.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.ObjectPaletteDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPaletteDefaults,
                rhs.ObjectPaletteDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XALG = item.XALG == rhs.XALG;
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectEffect = item.ObjectEffect.Equals(rhs.ObjectEffect);
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.BlockBashImpactDataSet = item.BlockBashImpactDataSet.Equals(rhs.BlockBashImpactDataSet);
            ret.AlternateBlockMaterial = item.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial);
            ret.PickupSound = EqualsMaskHelper.EqualsHelper(
                item.PickupSound,
                rhs.PickupSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DropdownSound = EqualsMaskHelper.EqualsHelper(
                item.DropdownSound,
                rhs.DropdownSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.InstanceNaming = item.InstanceNaming.Equals(rhs.InstanceNaming);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.ObjectTemplates = item.ObjectTemplates.CollectionEqualsHelper(
                rhs.ObjectTemplates,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EmbeddedWeaponMod = item.EmbeddedWeaponMod.Equals(rhs.EmbeddedWeaponMod);
            ret.BNAM = MemorySliceExt.SequenceEqual(item.BNAM, rhs.BNAM);
            ret.SightedTransitionSeconds = item.SightedTransitionSeconds.EqualsWithin(rhs.SightedTransitionSeconds);
            ret.AimDownSightTemplate = item.AimDownSightTemplate.Equals(rhs.AimDownSightTemplate);
            ret.AimModel = item.AimModel.Equals(rhs.AimModel);
            ret.AccuracyBonus = item.AccuracyBonus == rhs.AccuracyBonus;
            ret.HasScope = item.HasScope == rhs.HasScope;
            ret.AimAssistTemplate = item.AimAssistTemplate.Equals(rhs.AimAssistTemplate);
            ret.AimOpticalSightModel = item.AimOpticalSightModel.Equals(rhs.AimOpticalSightModel);
            ret.MeleeAimAssistModel = item.MeleeAimAssistModel.Equals(rhs.MeleeAimAssistModel);
            ret.WAIMUnknown1 = item.WAIMUnknown1 == rhs.WAIMUnknown1;
            ret.WAIMUnknown2 = item.WAIMUnknown2 == rhs.WAIMUnknown2;
            ret.EnableMarkingTargets = item.EnableMarkingTargets == rhs.EnableMarkingTargets;
            ret.ReticleType = item.ReticleType == rhs.ReticleType;
            ret.WAIMUnknown3 = item.WAIMUnknown3 == rhs.WAIMUnknown3;
            ret.WAIMUnknown4 = item.WAIMUnknown4 == rhs.WAIMUnknown4;
            ret.AmmoType = item.AmmoType.Equals(rhs.AmmoType);
            ret.AmmoCapacity = item.AmmoCapacity == rhs.AmmoCapacity;
            ret.AmmoList = item.AmmoList.Equals(rhs.AmmoList);
            ret.OverrideProjectile = item.OverrideProjectile.Equals(rhs.OverrideProjectile);
            ret.OverrideShellCasing = item.OverrideShellCasing.Equals(rhs.OverrideShellCasing);
            ret.ProjectilesCount = item.ProjectilesCount == rhs.ProjectilesCount;
            ret.NpcsUseAmmo = item.NpcsUseAmmo == rhs.NpcsUseAmmo;
            ret.WAM2Unknown1 = item.WAM2Unknown1 == rhs.WAM2Unknown1;
            ret.WAMM = MemorySliceExt.SequenceEqual(item.WAMM, rhs.WAMM);
            ret.MeleeOrCreature = MaskItemExt.Factory(item.MeleeOrCreature.GetEqualsMask(rhs.MeleeOrCreature, include), include);
            ret.PrimedExplosive = MaskItemExt.Factory(item.PrimedExplosive.GetEqualsMask(rhs.PrimedExplosive, include), include);
            ret.DryFire = MaskItemExt.Factory(item.DryFire.GetEqualsMask(rhs.DryFire, include), include);
            ret.Idle = MaskItemExt.Factory(item.Idle.GetEqualsMask(rhs.Idle, include), include);
            ret.Equip = MaskItemExt.Factory(item.Equip.GetEqualsMask(rhs.Equip, include), include);
            ret.Unequip = MaskItemExt.Factory(item.Unequip.GetEqualsMask(rhs.Unequip, include), include);
            ret.FastEquip = MaskItemExt.Factory(item.FastEquip.GetEqualsMask(rhs.FastEquip, include), include);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.WAUDUnknown2 = item.WAUDUnknown2 == rhs.WAUDUnknown2;
            ret.WTUR = MemorySliceExt.SequenceEqual(item.WTUR, rhs.WTUR);
            ret.ChargeFullPowerSeconds = item.ChargeFullPowerSeconds.EqualsWithin(rhs.ChargeFullPowerSeconds);
            ret.ChargeMinPowerPerShot = item.ChargeMinPowerPerShot.EqualsWithin(rhs.ChargeMinPowerPerShot);
            ret.ChargeCritBonus = item.ChargeCritBonus.EqualsWithin(rhs.ChargeCritBonus);
            ret.ChargeHoldInput = item.ChargeHoldInput == rhs.ChargeHoldInput;
            ret.ChargingAttack = item.ChargingAttack == rhs.ChargingAttack;
            ret.AttackDamage = item.AttackDamage.EqualsWithin(rhs.AttackDamage);
            ret.MinRange = item.MinRange.EqualsWithin(rhs.MinRange);
            ret.MaxRange = item.MaxRange.EqualsWithin(rhs.MaxRange);
            ret.OutOfRangeDamageMult = item.OutOfRangeDamageMult.EqualsWithin(rhs.OutOfRangeDamageMult);
            ret.CritDamageMult = item.CritDamageMult.EqualsWithin(rhs.CritDamageMult);
            ret.CriticalHitSpell = item.CriticalHitSpell.Equals(rhs.CriticalHitSpell);
            ret.CritEffectOnDeathOnly = item.CritEffectOnDeathOnly == rhs.CritEffectOnDeathOnly;
            ret.HitBehavior = item.HitBehavior == rhs.HitBehavior;
            ret.Resistance = item.Resistance.Equals(rhs.Resistance);
            ret.Skill = item.Skill.Equals(rhs.Skill);
            ret.WDMGUnknown4 = item.WDMGUnknown4.EqualsWithin(rhs.WDMGUnknown4);
            ret.WDMGUnknown5 = item.WDMGUnknown5.EqualsWithin(rhs.WDMGUnknown5);
            ret.WDMGUnknown6 = item.WDMGUnknown6.EqualsWithin(rhs.WDMGUnknown6);
            ret.WDMGUnknown7 = item.WDMGUnknown7.EqualsWithin(rhs.WDMGUnknown7);
            ret.WDMGUnknown8 = item.WDMGUnknown8.EqualsWithin(rhs.WDMGUnknown8);
            ret.WDMGUnknown9 = item.WDMGUnknown9.EqualsWithin(rhs.WDMGUnknown9);
            ret.CritChanceIncMult = item.CritChanceIncMult.EqualsWithin(rhs.CritChanceIncMult);
            ret.DamageTypes = item.DamageTypes.CollectionEqualsHelper(
                rhs.DamageTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FiringType = item.FiringType == rhs.FiringType;
            ret.BurstCount = item.BurstCount == rhs.BurstCount;
            ret.RepeatableFire = item.RepeatableFire == rhs.RepeatableFire;
            ret.AttackSeconds = item.AttackSeconds.EqualsWithin(rhs.AttackSeconds);
            ret.FireSeconds = item.FireSeconds.EqualsWithin(rhs.FireSeconds);
            ret.AttackDelaySeconds = item.AttackDelaySeconds.EqualsWithin(rhs.AttackDelaySeconds);
            ret.BoltChargeSeconds = item.BoltChargeSeconds.EqualsWithin(rhs.BoltChargeSeconds);
            ret.BoltAction = item.BoltAction == rhs.BoltAction;
            ret.DisableShellCaseEject = item.DisableShellCaseEject == rhs.DisableShellCaseEject;
            ret.ShotsPerSecond = item.ShotsPerSecond.EqualsWithin(rhs.ShotsPerSecond);
            ret.WFIRUnknown7 = item.WFIRUnknown7.EqualsWithin(rhs.WFIRUnknown7);
            ret.OverrideRateOfFire = item.OverrideRateOfFire == rhs.OverrideRateOfFire;
            ret.TriggerThresholdPrimaryTrigger = item.TriggerThresholdPrimaryTrigger.EqualsWithin(rhs.TriggerThresholdPrimaryTrigger);
            ret.WFIRUnknown10 = item.WFIRUnknown10 == rhs.WFIRUnknown10;
            ret.TriggerThresholdSecondStage = item.TriggerThresholdSecondStage.EqualsWithin(rhs.TriggerThresholdSecondStage);
            ret.HasStagedTrigger = item.HasStagedTrigger == rhs.HasStagedTrigger;
            ret.HasDualTrigger = item.HasDualTrigger == rhs.HasDualTrigger;
            ret.BurstDelaySeconds = item.BurstDelaySeconds.EqualsWithin(rhs.BurstDelaySeconds);
            ret.NonPlayable = item.NonPlayable == rhs.NonPlayable;
            ret.PlayerOnly = item.PlayerOnly == rhs.PlayerOnly;
            ret.WFLGUnknown1 = item.WFLGUnknown1 == rhs.WFLGUnknown1;
            ret.WFLGUnknown2 = item.WFLGUnknown2 == rhs.WFLGUnknown2;
            ret.CannotDrop = item.CannotDrop == rhs.CannotDrop;
            ret.MinorCrime = item.MinorCrime == rhs.MinorCrime;
            ret.NonHostile = item.NonHostile == rhs.NonHostile;
            ret.WFLGUnknown3 = item.WFLGUnknown3 == rhs.WFLGUnknown3;
            ret.WFLGUnknown4 = item.WFLGUnknown4 == rhs.WFLGUnknown4;
            ret.WFLGUnknown5 = item.WFLGUnknown5 == rhs.WFLGUnknown5;
            ret.WFLGUnknown6 = item.WFLGUnknown6 == rhs.WFLGUnknown6;
            ret.WFLGUnknown7 = item.WFLGUnknown7 == rhs.WFLGUnknown7;
            ret.WGENUnknown1 = item.WGENUnknown1 == rhs.WGENUnknown1;
            ret.BaseWeight = item.BaseWeight.EqualsWithin(rhs.BaseWeight);
            ret.BaseValue = item.BaseValue == rhs.BaseValue;
            ret.BaseSpeed = item.BaseSpeed.EqualsWithin(rhs.BaseSpeed);
            ret.AttackOxygenCost = item.AttackOxygenCost.EqualsWithin(rhs.AttackOxygenCost);
            ret.WeaponBarrel = item.WeaponBarrel.Equals(rhs.WeaponBarrel);
            ret.General = object.Equals(item.General, rhs.General);
            ret.WMELUnknown1 = item.WMELUnknown1 == rhs.WMELUnknown1;
            ret.MeleeBashDamage = item.MeleeBashDamage.EqualsWithin(rhs.MeleeBashDamage);
            ret.MeleeReach = item.MeleeReach.EqualsWithin(rhs.MeleeReach);
            ret.MeleeStagger = item.MeleeStagger == rhs.MeleeStagger;
            ret.Power = item.Power.Equals(rhs.Power);
            ret.PowerRechargeTime = item.PowerRechargeTime.EqualsWithin(rhs.PowerRechargeTime);
            ret.PowerRechargeDelay = item.PowerRechargeDelay.EqualsWithin(rhs.PowerRechargeDelay);
            ret.ConsumeAmmo = item.ConsumeAmmo == rhs.ConsumeAmmo;
            ret.PowerBonus = item.PowerBonus.Equals(rhs.PowerBonus);
            ret.UsePower = item.UsePower == rhs.UsePower;
            ret.QNAMUnknown1 = item.QNAMUnknown1 == rhs.QNAMUnknown1;
            ret.QNAMUnknown2 = item.QNAMUnknown2.EqualsWithin(rhs.QNAMUnknown2);
            ret.QNAMUnknown3 = item.QNAMUnknown3 == rhs.QNAMUnknown3;
            ret.QNAMUnknown4 = item.QNAMUnknown4.Equals(rhs.QNAMUnknown4);
            ret.QNAMUnknown5 = item.QNAMUnknown5.EqualsWithin(rhs.QNAMUnknown5);
            ret.PowerConsumption = item.PowerConsumption.Equals(rhs.PowerConsumption);
            ret.WRLOUnknown1 = item.WRLOUnknown1.EqualsWithin(rhs.WRLOUnknown1);
            ret.ReloadSpeed = item.ReloadSpeed.EqualsWithin(rhs.ReloadSpeed);
            ret.ReloadCharging = item.ReloadCharging == rhs.ReloadCharging;
            ret.ReloadSingle = item.ReloadSingle == rhs.ReloadSingle;
            ret.WRUM = MemorySliceExt.SequenceEqual(item.WRUM, rhs.WRUM);
            ret.ApertureValueMin = item.ApertureValueMin.EqualsWithin(rhs.ApertureValueMin);
            ret.ApertureValueMax = item.ApertureValueMax.EqualsWithin(rhs.ApertureValueMax);
            ret.ApertureInputMin = item.ApertureInputMin.EqualsWithin(rhs.ApertureInputMin);
            ret.ApertureInputMax = item.ApertureInputMax.EqualsWithin(rhs.ApertureInputMax);
            ret.ApertureAcceleration = item.ApertureAcceleration.EqualsWithin(rhs.ApertureAcceleration);
            ret.ApertureDeceleration = item.ApertureDeceleration.EqualsWithin(rhs.ApertureDeceleration);
            ret.DistanceValueMin = item.DistanceValueMin.EqualsWithin(rhs.DistanceValueMin);
            ret.DistanceValueMax = item.DistanceValueMax.EqualsWithin(rhs.DistanceValueMax);
            ret.DistanceInputMin = item.DistanceInputMin.EqualsWithin(rhs.DistanceInputMin);
            ret.DistanceInputMax = item.DistanceInputMax.EqualsWithin(rhs.DistanceInputMax);
            ret.DistanceAcceleration = item.DistanceAcceleration.EqualsWithin(rhs.DistanceAcceleration);
            ret.DistanceDeceleration = item.DistanceDeceleration.EqualsWithin(rhs.DistanceDeceleration);
            ret.UseVariableRange = item.UseVariableRange == rhs.UseVariableRange;
            ret.FirstPersonModel = EqualsMaskHelper.EqualsHelper(
                item.FirstPersonModel,
                rhs.FirstPersonModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WVISUnknown1 = item.WVISUnknown1 == rhs.WVISUnknown1;
            ret.WVISUnknown2 = item.WVISUnknown2 == rhs.WVISUnknown2;
            ret.WVISUnknown3 = item.WVISUnknown3 == rhs.WVISUnknown3;
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.ColorRemappingIndex = item.ColorRemappingIndex.EqualsWithin(rhs.ColorRemappingIndex);
            ret.ImageSpaceAdapter = item.ImageSpaceAdapter.Equals(rhs.ImageSpaceAdapter);
            ret.WTRMUnknown1 = item.WTRMUnknown1.EqualsWithin(rhs.WTRMUnknown1);
            ret.WTRMUnknown2 = item.WTRMUnknown2 == rhs.WTRMUnknown2;
            ret.WTRMUnknown3 = item.WTRMUnknown3.EqualsWithin(rhs.WTRMUnknown3);
            ret.WTRMUnknown4 = item.WTRMUnknown4.EqualsWithin(rhs.WTRMUnknown4);
            ret.WTRMUnknown5 = item.WTRMUnknown5.EqualsWithin(rhs.WTRMUnknown5);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWeaponGetter item,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWeaponGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Weapon =>");
            }
            else
            {
                sb.AppendLine($"{name} (Weapon) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWeaponGetter item,
            StructuredStringBuilder sb,
            Weapon.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.ObjectPaletteDefaults?.Overall ?? true)
                && item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ObjectPaletteDefaultsItem?.Print(sb, "ObjectPaletteDefaults");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendItem(XALGItem, "XALG");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.ObjectEffect ?? true)
            {
                sb.AppendItem(item.ObjectEffect.FormKeyNullable, "ObjectEffect");
            }
            if ((printMask?.EnchantmentAmount ?? true)
                && item.EnchantmentAmount is {} EnchantmentAmountItem)
            {
                sb.AppendItem(EnchantmentAmountItem, "EnchantmentAmount");
            }
            if (printMask?.EquipmentType ?? true)
            {
                sb.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if (printMask?.BlockBashImpactDataSet ?? true)
            {
                sb.AppendItem(item.BlockBashImpactDataSet.FormKeyNullable, "BlockBashImpactDataSet");
            }
            if (printMask?.AlternateBlockMaterial ?? true)
            {
                sb.AppendItem(item.AlternateBlockMaterial.FormKeyNullable, "AlternateBlockMaterial");
            }
            if ((printMask?.PickupSound?.Overall ?? true)
                && item.PickupSound is {} PickupSoundItem)
            {
                PickupSoundItem?.Print(sb, "PickupSound");
            }
            if ((printMask?.DropdownSound?.Overall ?? true)
                && item.DropdownSound is {} DropdownSoundItem)
            {
                DropdownSoundItem?.Print(sb, "DropdownSound");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.InstanceNaming ?? true)
            {
                sb.AppendItem(item.InstanceNaming.FormKeyNullable, "InstanceNaming");
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                sb.AppendLine("AttachParentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ObjectTemplates?.Overall ?? true)
                && item.ObjectTemplates is {} ObjectTemplatesItem)
            {
                sb.AppendLine("ObjectTemplates =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ObjectTemplatesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.EmbeddedWeaponMod ?? true)
            {
                sb.AppendItem(item.EmbeddedWeaponMod.FormKeyNullable, "EmbeddedWeaponMod");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendLine($"BNAM => {SpanExt.ToHexString(BNAMItem)}");
            }
            if (printMask?.SightedTransitionSeconds ?? true)
            {
                sb.AppendItem(item.SightedTransitionSeconds, "SightedTransitionSeconds");
            }
            if (printMask?.AimDownSightTemplate ?? true)
            {
                sb.AppendItem(item.AimDownSightTemplate.FormKey, "AimDownSightTemplate");
            }
            if (printMask?.AimModel ?? true)
            {
                sb.AppendItem(item.AimModel.FormKey, "AimModel");
            }
            if (printMask?.AccuracyBonus ?? true)
            {
                sb.AppendItem(item.AccuracyBonus, "AccuracyBonus");
            }
            if (printMask?.HasScope ?? true)
            {
                sb.AppendItem(item.HasScope, "HasScope");
            }
            if (printMask?.AimAssistTemplate ?? true)
            {
                sb.AppendItem(item.AimAssistTemplate.FormKey, "AimAssistTemplate");
            }
            if (printMask?.AimOpticalSightModel ?? true)
            {
                sb.AppendItem(item.AimOpticalSightModel.FormKey, "AimOpticalSightModel");
            }
            if (printMask?.MeleeAimAssistModel ?? true)
            {
                sb.AppendItem(item.MeleeAimAssistModel.FormKey, "MeleeAimAssistModel");
            }
            if (printMask?.WAIMUnknown1 ?? true)
            {
                sb.AppendItem(item.WAIMUnknown1, "WAIMUnknown1");
            }
            if (printMask?.WAIMUnknown2 ?? true)
            {
                sb.AppendItem(item.WAIMUnknown2, "WAIMUnknown2");
            }
            if (printMask?.EnableMarkingTargets ?? true)
            {
                sb.AppendItem(item.EnableMarkingTargets, "EnableMarkingTargets");
            }
            if (printMask?.ReticleType ?? true)
            {
                sb.AppendItem(item.ReticleType, "ReticleType");
            }
            if (printMask?.WAIMUnknown3 ?? true)
            {
                sb.AppendItem(item.WAIMUnknown3, "WAIMUnknown3");
            }
            if (printMask?.WAIMUnknown4 ?? true)
            {
                sb.AppendItem(item.WAIMUnknown4, "WAIMUnknown4");
            }
            if (printMask?.AmmoType ?? true)
            {
                sb.AppendItem(item.AmmoType.FormKey, "AmmoType");
            }
            if (printMask?.AmmoCapacity ?? true)
            {
                sb.AppendItem(item.AmmoCapacity, "AmmoCapacity");
            }
            if (printMask?.AmmoList ?? true)
            {
                sb.AppendItem(item.AmmoList.FormKey, "AmmoList");
            }
            if (printMask?.OverrideProjectile ?? true)
            {
                sb.AppendItem(item.OverrideProjectile.FormKey, "OverrideProjectile");
            }
            if (printMask?.OverrideShellCasing ?? true)
            {
                sb.AppendItem(item.OverrideShellCasing.FormKey, "OverrideShellCasing");
            }
            if (printMask?.ProjectilesCount ?? true)
            {
                sb.AppendItem(item.ProjectilesCount, "ProjectilesCount");
            }
            if (printMask?.NpcsUseAmmo ?? true)
            {
                sb.AppendItem(item.NpcsUseAmmo, "NpcsUseAmmo");
            }
            if (printMask?.WAM2Unknown1 ?? true)
            {
                sb.AppendItem(item.WAM2Unknown1, "WAM2Unknown1");
            }
            if ((printMask?.WAMM ?? true)
                && item.WAMM is {} WAMMItem)
            {
                sb.AppendLine($"WAMM => {SpanExt.ToHexString(WAMMItem)}");
            }
            if (printMask?.MeleeOrCreature?.Overall ?? true)
            {
                item.MeleeOrCreature?.Print(sb, "MeleeOrCreature");
            }
            if (printMask?.PrimedExplosive?.Overall ?? true)
            {
                item.PrimedExplosive?.Print(sb, "PrimedExplosive");
            }
            if (printMask?.DryFire?.Overall ?? true)
            {
                item.DryFire?.Print(sb, "DryFire");
            }
            if (printMask?.Idle?.Overall ?? true)
            {
                item.Idle?.Print(sb, "Idle");
            }
            if (printMask?.Equip?.Overall ?? true)
            {
                item.Equip?.Print(sb, "Equip");
            }
            if (printMask?.Unequip?.Overall ?? true)
            {
                item.Unequip?.Print(sb, "Unequip");
            }
            if (printMask?.FastEquip?.Overall ?? true)
            {
                item.FastEquip?.Print(sb, "FastEquip");
            }
            if (printMask?.SoundLevel ?? true)
            {
                sb.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.WAUDUnknown2 ?? true)
            {
                sb.AppendItem(item.WAUDUnknown2, "WAUDUnknown2");
            }
            if ((printMask?.WTUR ?? true)
                && item.WTUR is {} WTURItem)
            {
                sb.AppendLine($"WTUR => {SpanExt.ToHexString(WTURItem)}");
            }
            if (printMask?.ChargeFullPowerSeconds ?? true)
            {
                sb.AppendItem(item.ChargeFullPowerSeconds, "ChargeFullPowerSeconds");
            }
            if (printMask?.ChargeMinPowerPerShot ?? true)
            {
                sb.AppendItem(item.ChargeMinPowerPerShot, "ChargeMinPowerPerShot");
            }
            if (printMask?.ChargeCritBonus ?? true)
            {
                sb.AppendItem(item.ChargeCritBonus, "ChargeCritBonus");
            }
            if (printMask?.ChargeHoldInput ?? true)
            {
                sb.AppendItem(item.ChargeHoldInput, "ChargeHoldInput");
            }
            if (printMask?.ChargingAttack ?? true)
            {
                sb.AppendItem(item.ChargingAttack, "ChargingAttack");
            }
            if (printMask?.AttackDamage ?? true)
            {
                sb.AppendItem(item.AttackDamage, "AttackDamage");
            }
            if (printMask?.MinRange ?? true)
            {
                sb.AppendItem(item.MinRange, "MinRange");
            }
            if (printMask?.MaxRange ?? true)
            {
                sb.AppendItem(item.MaxRange, "MaxRange");
            }
            if (printMask?.OutOfRangeDamageMult ?? true)
            {
                sb.AppendItem(item.OutOfRangeDamageMult, "OutOfRangeDamageMult");
            }
            if (printMask?.CritDamageMult ?? true)
            {
                sb.AppendItem(item.CritDamageMult, "CritDamageMult");
            }
            if (printMask?.CriticalHitSpell ?? true)
            {
                sb.AppendItem(item.CriticalHitSpell.FormKey, "CriticalHitSpell");
            }
            if (printMask?.CritEffectOnDeathOnly ?? true)
            {
                sb.AppendItem(item.CritEffectOnDeathOnly, "CritEffectOnDeathOnly");
            }
            if (printMask?.HitBehavior ?? true)
            {
                sb.AppendItem(item.HitBehavior, "HitBehavior");
            }
            if (printMask?.Resistance ?? true)
            {
                sb.AppendItem(item.Resistance.FormKey, "Resistance");
            }
            if (printMask?.Skill ?? true)
            {
                sb.AppendItem(item.Skill.FormKey, "Skill");
            }
            if (printMask?.WDMGUnknown4 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown4, "WDMGUnknown4");
            }
            if (printMask?.WDMGUnknown5 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown5, "WDMGUnknown5");
            }
            if (printMask?.WDMGUnknown6 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown6, "WDMGUnknown6");
            }
            if (printMask?.WDMGUnknown7 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown7, "WDMGUnknown7");
            }
            if (printMask?.WDMGUnknown8 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown8, "WDMGUnknown8");
            }
            if (printMask?.WDMGUnknown9 ?? true)
            {
                sb.AppendItem(item.WDMGUnknown9, "WDMGUnknown9");
            }
            if (printMask?.CritChanceIncMult ?? true)
            {
                sb.AppendItem(item.CritChanceIncMult, "CritChanceIncMult");
            }
            if ((printMask?.DamageTypes?.Overall ?? true)
                && item.DamageTypes is {} DamageTypesItem)
            {
                sb.AppendLine("DamageTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in DamageTypesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FiringType ?? true)
            {
                sb.AppendItem(item.FiringType, "FiringType");
            }
            if (printMask?.BurstCount ?? true)
            {
                sb.AppendItem(item.BurstCount, "BurstCount");
            }
            if (printMask?.RepeatableFire ?? true)
            {
                sb.AppendItem(item.RepeatableFire, "RepeatableFire");
            }
            if (printMask?.AttackSeconds ?? true)
            {
                sb.AppendItem(item.AttackSeconds, "AttackSeconds");
            }
            if (printMask?.FireSeconds ?? true)
            {
                sb.AppendItem(item.FireSeconds, "FireSeconds");
            }
            if (printMask?.AttackDelaySeconds ?? true)
            {
                sb.AppendItem(item.AttackDelaySeconds, "AttackDelaySeconds");
            }
            if (printMask?.BoltChargeSeconds ?? true)
            {
                sb.AppendItem(item.BoltChargeSeconds, "BoltChargeSeconds");
            }
            if (printMask?.BoltAction ?? true)
            {
                sb.AppendItem(item.BoltAction, "BoltAction");
            }
            if (printMask?.DisableShellCaseEject ?? true)
            {
                sb.AppendItem(item.DisableShellCaseEject, "DisableShellCaseEject");
            }
            if (printMask?.ShotsPerSecond ?? true)
            {
                sb.AppendItem(item.ShotsPerSecond, "ShotsPerSecond");
            }
            if (printMask?.WFIRUnknown7 ?? true)
            {
                sb.AppendItem(item.WFIRUnknown7, "WFIRUnknown7");
            }
            if (printMask?.OverrideRateOfFire ?? true)
            {
                sb.AppendItem(item.OverrideRateOfFire, "OverrideRateOfFire");
            }
            if (printMask?.TriggerThresholdPrimaryTrigger ?? true)
            {
                sb.AppendItem(item.TriggerThresholdPrimaryTrigger, "TriggerThresholdPrimaryTrigger");
            }
            if (printMask?.WFIRUnknown10 ?? true)
            {
                sb.AppendItem(item.WFIRUnknown10, "WFIRUnknown10");
            }
            if (printMask?.TriggerThresholdSecondStage ?? true)
            {
                sb.AppendItem(item.TriggerThresholdSecondStage, "TriggerThresholdSecondStage");
            }
            if (printMask?.HasStagedTrigger ?? true)
            {
                sb.AppendItem(item.HasStagedTrigger, "HasStagedTrigger");
            }
            if (printMask?.HasDualTrigger ?? true)
            {
                sb.AppendItem(item.HasDualTrigger, "HasDualTrigger");
            }
            if (printMask?.BurstDelaySeconds ?? true)
            {
                sb.AppendItem(item.BurstDelaySeconds, "BurstDelaySeconds");
            }
            if (printMask?.NonPlayable ?? true)
            {
                sb.AppendItem(item.NonPlayable, "NonPlayable");
            }
            if (printMask?.PlayerOnly ?? true)
            {
                sb.AppendItem(item.PlayerOnly, "PlayerOnly");
            }
            if (printMask?.WFLGUnknown1 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown1, "WFLGUnknown1");
            }
            if (printMask?.WFLGUnknown2 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown2, "WFLGUnknown2");
            }
            if (printMask?.CannotDrop ?? true)
            {
                sb.AppendItem(item.CannotDrop, "CannotDrop");
            }
            if (printMask?.MinorCrime ?? true)
            {
                sb.AppendItem(item.MinorCrime, "MinorCrime");
            }
            if (printMask?.NonHostile ?? true)
            {
                sb.AppendItem(item.NonHostile, "NonHostile");
            }
            if (printMask?.WFLGUnknown3 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown3, "WFLGUnknown3");
            }
            if (printMask?.WFLGUnknown4 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown4, "WFLGUnknown4");
            }
            if (printMask?.WFLGUnknown5 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown5, "WFLGUnknown5");
            }
            if (printMask?.WFLGUnknown6 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown6, "WFLGUnknown6");
            }
            if (printMask?.WFLGUnknown7 ?? true)
            {
                sb.AppendItem(item.WFLGUnknown7, "WFLGUnknown7");
            }
            if (printMask?.WGENUnknown1 ?? true)
            {
                sb.AppendItem(item.WGENUnknown1, "WGENUnknown1");
            }
            if (printMask?.BaseWeight ?? true)
            {
                sb.AppendItem(item.BaseWeight, "BaseWeight");
            }
            if (printMask?.BaseValue ?? true)
            {
                sb.AppendItem(item.BaseValue, "BaseValue");
            }
            if (printMask?.BaseSpeed ?? true)
            {
                sb.AppendItem(item.BaseSpeed, "BaseSpeed");
            }
            if (printMask?.AttackOxygenCost ?? true)
            {
                sb.AppendItem(item.AttackOxygenCost, "AttackOxygenCost");
            }
            if (printMask?.WeaponBarrel ?? true)
            {
                sb.AppendItem(item.WeaponBarrel.FormKey, "WeaponBarrel");
            }
            if ((printMask?.General ?? true)
                && item.General is {} GeneralItem)
            {
                sb.AppendItem(GeneralItem, "General");
            }
            if (printMask?.WMELUnknown1 ?? true)
            {
                sb.AppendItem(item.WMELUnknown1, "WMELUnknown1");
            }
            if (printMask?.MeleeBashDamage ?? true)
            {
                sb.AppendItem(item.MeleeBashDamage, "MeleeBashDamage");
            }
            if (printMask?.MeleeReach ?? true)
            {
                sb.AppendItem(item.MeleeReach, "MeleeReach");
            }
            if (printMask?.MeleeStagger ?? true)
            {
                sb.AppendItem(item.MeleeStagger, "MeleeStagger");
            }
            if (printMask?.Power ?? true)
            {
                sb.AppendItem(item.Power.FormKey, "Power");
            }
            if (printMask?.PowerRechargeTime ?? true)
            {
                sb.AppendItem(item.PowerRechargeTime, "PowerRechargeTime");
            }
            if (printMask?.PowerRechargeDelay ?? true)
            {
                sb.AppendItem(item.PowerRechargeDelay, "PowerRechargeDelay");
            }
            if (printMask?.ConsumeAmmo ?? true)
            {
                sb.AppendItem(item.ConsumeAmmo, "ConsumeAmmo");
            }
            if (printMask?.PowerBonus ?? true)
            {
                sb.AppendItem(item.PowerBonus.FormKey, "PowerBonus");
            }
            if (printMask?.UsePower ?? true)
            {
                sb.AppendItem(item.UsePower, "UsePower");
            }
            if (printMask?.QNAMUnknown1 ?? true)
            {
                sb.AppendItem(item.QNAMUnknown1, "QNAMUnknown1");
            }
            if (printMask?.QNAMUnknown2 ?? true)
            {
                sb.AppendItem(item.QNAMUnknown2, "QNAMUnknown2");
            }
            if (printMask?.QNAMUnknown3 ?? true)
            {
                sb.AppendItem(item.QNAMUnknown3, "QNAMUnknown3");
            }
            if (printMask?.QNAMUnknown4 ?? true)
            {
                sb.AppendItem(item.QNAMUnknown4.FormKey, "QNAMUnknown4");
            }
            if (printMask?.QNAMUnknown5 ?? true)
            {
                sb.AppendItem(item.QNAMUnknown5, "QNAMUnknown5");
            }
            if (printMask?.PowerConsumption ?? true)
            {
                sb.AppendItem(item.PowerConsumption.FormKey, "PowerConsumption");
            }
            if (printMask?.WRLOUnknown1 ?? true)
            {
                sb.AppendItem(item.WRLOUnknown1, "WRLOUnknown1");
            }
            if (printMask?.ReloadSpeed ?? true)
            {
                sb.AppendItem(item.ReloadSpeed, "ReloadSpeed");
            }
            if (printMask?.ReloadCharging ?? true)
            {
                sb.AppendItem(item.ReloadCharging, "ReloadCharging");
            }
            if (printMask?.ReloadSingle ?? true)
            {
                sb.AppendItem(item.ReloadSingle, "ReloadSingle");
            }
            if ((printMask?.WRUM ?? true)
                && item.WRUM is {} WRUMItem)
            {
                sb.AppendLine($"WRUM => {SpanExt.ToHexString(WRUMItem)}");
            }
            if (printMask?.ApertureValueMin ?? true)
            {
                sb.AppendItem(item.ApertureValueMin, "ApertureValueMin");
            }
            if (printMask?.ApertureValueMax ?? true)
            {
                sb.AppendItem(item.ApertureValueMax, "ApertureValueMax");
            }
            if (printMask?.ApertureInputMin ?? true)
            {
                sb.AppendItem(item.ApertureInputMin, "ApertureInputMin");
            }
            if (printMask?.ApertureInputMax ?? true)
            {
                sb.AppendItem(item.ApertureInputMax, "ApertureInputMax");
            }
            if (printMask?.ApertureAcceleration ?? true)
            {
                sb.AppendItem(item.ApertureAcceleration, "ApertureAcceleration");
            }
            if (printMask?.ApertureDeceleration ?? true)
            {
                sb.AppendItem(item.ApertureDeceleration, "ApertureDeceleration");
            }
            if (printMask?.DistanceValueMin ?? true)
            {
                sb.AppendItem(item.DistanceValueMin, "DistanceValueMin");
            }
            if (printMask?.DistanceValueMax ?? true)
            {
                sb.AppendItem(item.DistanceValueMax, "DistanceValueMax");
            }
            if (printMask?.DistanceInputMin ?? true)
            {
                sb.AppendItem(item.DistanceInputMin, "DistanceInputMin");
            }
            if (printMask?.DistanceInputMax ?? true)
            {
                sb.AppendItem(item.DistanceInputMax, "DistanceInputMax");
            }
            if (printMask?.DistanceAcceleration ?? true)
            {
                sb.AppendItem(item.DistanceAcceleration, "DistanceAcceleration");
            }
            if (printMask?.DistanceDeceleration ?? true)
            {
                sb.AppendItem(item.DistanceDeceleration, "DistanceDeceleration");
            }
            if (printMask?.UseVariableRange ?? true)
            {
                sb.AppendItem(item.UseVariableRange, "UseVariableRange");
            }
            if ((printMask?.FirstPersonModel?.Overall ?? true)
                && item.FirstPersonModel is {} FirstPersonModelItem)
            {
                FirstPersonModelItem?.Print(sb, "FirstPersonModel");
            }
            if (printMask?.WVISUnknown1 ?? true)
            {
                sb.AppendItem(item.WVISUnknown1, "WVISUnknown1");
            }
            if (printMask?.WVISUnknown2 ?? true)
            {
                sb.AppendItem(item.WVISUnknown2, "WVISUnknown2");
            }
            if (printMask?.WVISUnknown3 ?? true)
            {
                sb.AppendItem(item.WVISUnknown3, "WVISUnknown3");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.ColorRemappingIndex ?? true)
            {
                sb.AppendItem(item.ColorRemappingIndex, "ColorRemappingIndex");
            }
            if (printMask?.ImageSpaceAdapter ?? true)
            {
                sb.AppendItem(item.ImageSpaceAdapter.FormKey, "ImageSpaceAdapter");
            }
            if (printMask?.WTRMUnknown1 ?? true)
            {
                sb.AppendItem(item.WTRMUnknown1, "WTRMUnknown1");
            }
            if (printMask?.WTRMUnknown2 ?? true)
            {
                sb.AppendItem(item.WTRMUnknown2, "WTRMUnknown2");
            }
            if (printMask?.WTRMUnknown3 ?? true)
            {
                sb.AppendItem(item.WTRMUnknown3, "WTRMUnknown3");
            }
            if (printMask?.WTRMUnknown4 ?? true)
            {
                sb.AppendItem(item.WTRMUnknown4, "WTRMUnknown4");
            }
            if (printMask?.WTRMUnknown5 ?? true)
            {
                sb.AppendItem(item.WTRMUnknown5, "WTRMUnknown5");
            }
        }
        
        public static Weapon_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Weapon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Weapon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponGetter? lhs,
            IWeaponGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults, out var lhsObjectPaletteDefaults, out var rhsObjectPaletteDefaults, out var isObjectPaletteDefaultsEqual))
                {
                    if (!((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)lhsObjectPaletteDefaults).CommonInstance()!).Equals(lhsObjectPaletteDefaults, rhsObjectPaletteDefaults, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectPaletteDefaults))) return false;
                }
                else if (!isObjectPaletteDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.XALG) ?? true))
            {
                if (lhs.XALG != rhs.XALG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectEffect) ?? true))
            {
                if (!lhs.ObjectEffect.Equals(rhs.ObjectEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnchantmentAmount) ?? true))
            {
                if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.EquipmentType) ?? true))
            {
                if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BlockBashImpactDataSet) ?? true))
            {
                if (!lhs.BlockBashImpactDataSet.Equals(rhs.BlockBashImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                if (!lhs.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PickupSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PickupSound, rhs.PickupSound, out var lhsPickupSound, out var rhsPickupSound, out var isPickupSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsPickupSound).CommonInstance()!).Equals(lhsPickupSound, rhsPickupSound, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.PickupSound))) return false;
                }
                else if (!isPickupSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DropdownSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DropdownSound, rhs.DropdownSound, out var lhsDropdownSound, out var rhsDropdownSound, out var isDropdownSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsDropdownSound).CommonInstance()!).Equals(lhsDropdownSound, rhsDropdownSound, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.DropdownSound))) return false;
                }
                else if (!isDropdownSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.InstanceNaming) ?? true))
            {
                if (!lhs.InstanceNaming.Equals(rhs.InstanceNaming)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectTemplates) ?? true))
            {
                if (!lhs.ObjectTemplates.SequenceEqualNullable(rhs.ObjectTemplates, (l, r) => ((ObjectTemplateCommon<Weapon.Property>)((IObjectTemplateGetter<Weapon.Property>)l).CommonInstance(typeof(Weapon.Property))!).Equals(l, r, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectTemplates)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.EmbeddedWeaponMod) ?? true))
            {
                if (!lhs.EmbeddedWeaponMod.Equals(rhs.EmbeddedWeaponMod)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BNAM, rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.SightedTransitionSeconds) ?? true))
            {
                if (!lhs.SightedTransitionSeconds.EqualsWithin(rhs.SightedTransitionSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimDownSightTemplate) ?? true))
            {
                if (!lhs.AimDownSightTemplate.Equals(rhs.AimDownSightTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimModel) ?? true))
            {
                if (!lhs.AimModel.Equals(rhs.AimModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AccuracyBonus) ?? true))
            {
                if (lhs.AccuracyBonus != rhs.AccuracyBonus) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasScope) ?? true))
            {
                if (lhs.HasScope != rhs.HasScope) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimAssistTemplate) ?? true))
            {
                if (!lhs.AimAssistTemplate.Equals(rhs.AimAssistTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimOpticalSightModel) ?? true))
            {
                if (!lhs.AimOpticalSightModel.Equals(rhs.AimOpticalSightModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeAimAssistModel) ?? true))
            {
                if (!lhs.MeleeAimAssistModel.Equals(rhs.MeleeAimAssistModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown1) ?? true))
            {
                if (lhs.WAIMUnknown1 != rhs.WAIMUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown2) ?? true))
            {
                if (lhs.WAIMUnknown2 != rhs.WAIMUnknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnableMarkingTargets) ?? true))
            {
                if (lhs.EnableMarkingTargets != rhs.EnableMarkingTargets) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReticleType) ?? true))
            {
                if (lhs.ReticleType != rhs.ReticleType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown3) ?? true))
            {
                if (lhs.WAIMUnknown3 != rhs.WAIMUnknown3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown4) ?? true))
            {
                if (lhs.WAIMUnknown4 != rhs.WAIMUnknown4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoType) ?? true))
            {
                if (!lhs.AmmoType.Equals(rhs.AmmoType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoCapacity) ?? true))
            {
                if (lhs.AmmoCapacity != rhs.AmmoCapacity) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoList) ?? true))
            {
                if (!lhs.AmmoList.Equals(rhs.AmmoList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideProjectile) ?? true))
            {
                if (!lhs.OverrideProjectile.Equals(rhs.OverrideProjectile)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideShellCasing) ?? true))
            {
                if (!lhs.OverrideShellCasing.Equals(rhs.OverrideShellCasing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ProjectilesCount) ?? true))
            {
                if (lhs.ProjectilesCount != rhs.ProjectilesCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.NpcsUseAmmo) ?? true))
            {
                if (lhs.NpcsUseAmmo != rhs.NpcsUseAmmo) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAM2Unknown1) ?? true))
            {
                if (lhs.WAM2Unknown1 != rhs.WAM2Unknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAMM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WAMM, rhs.WAMM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeOrCreature) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MeleeOrCreature, rhs.MeleeOrCreature, out var lhsMeleeOrCreature, out var rhsMeleeOrCreature, out var isMeleeOrCreatureEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsMeleeOrCreature).CommonInstance()!).Equals(lhsMeleeOrCreature, rhsMeleeOrCreature, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.MeleeOrCreature))) return false;
                }
                else if (!isMeleeOrCreatureEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PrimedExplosive) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PrimedExplosive, rhs.PrimedExplosive, out var lhsPrimedExplosive, out var rhsPrimedExplosive, out var isPrimedExplosiveEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsPrimedExplosive).CommonInstance()!).Equals(lhsPrimedExplosive, rhsPrimedExplosive, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.PrimedExplosive))) return false;
                }
                else if (!isPrimedExplosiveEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DryFire) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DryFire, rhs.DryFire, out var lhsDryFire, out var rhsDryFire, out var isDryFireEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsDryFire).CommonInstance()!).Equals(lhsDryFire, rhsDryFire, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.DryFire))) return false;
                }
                else if (!isDryFireEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Idle) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Idle, rhs.Idle, out var lhsIdle, out var rhsIdle, out var isIdleEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsIdle).CommonInstance()!).Equals(lhsIdle, rhsIdle, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Idle))) return false;
                }
                else if (!isIdleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Equip) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Equip, rhs.Equip, out var lhsEquip, out var rhsEquip, out var isEquipEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsEquip).CommonInstance()!).Equals(lhsEquip, rhsEquip, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Equip))) return false;
                }
                else if (!isEquipEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Unequip) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Unequip, rhs.Unequip, out var lhsUnequip, out var rhsUnequip, out var isUnequipEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsUnequip).CommonInstance()!).Equals(lhsUnequip, rhsUnequip, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.Unequip))) return false;
                }
                else if (!isUnequipEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.FastEquip) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FastEquip, rhs.FastEquip, out var lhsFastEquip, out var rhsFastEquip, out var isFastEquipEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsFastEquip).CommonInstance()!).Equals(lhsFastEquip, rhsFastEquip, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.FastEquip))) return false;
                }
                else if (!isFastEquipEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.SoundLevel) ?? true))
            {
                if (lhs.SoundLevel != rhs.SoundLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAUDUnknown2) ?? true))
            {
                if (lhs.WAUDUnknown2 != rhs.WAUDUnknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTUR) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WTUR, rhs.WTUR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeFullPowerSeconds) ?? true))
            {
                if (!lhs.ChargeFullPowerSeconds.EqualsWithin(rhs.ChargeFullPowerSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeMinPowerPerShot) ?? true))
            {
                if (!lhs.ChargeMinPowerPerShot.EqualsWithin(rhs.ChargeMinPowerPerShot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeCritBonus) ?? true))
            {
                if (!lhs.ChargeCritBonus.EqualsWithin(rhs.ChargeCritBonus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeHoldInput) ?? true))
            {
                if (lhs.ChargeHoldInput != rhs.ChargeHoldInput) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargingAttack) ?? true))
            {
                if (lhs.ChargingAttack != rhs.ChargingAttack) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackDamage) ?? true))
            {
                if (!lhs.AttackDamage.EqualsWithin(rhs.AttackDamage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MinRange) ?? true))
            {
                if (!lhs.MinRange.EqualsWithin(rhs.MinRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MaxRange) ?? true))
            {
                if (!lhs.MaxRange.EqualsWithin(rhs.MaxRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.OutOfRangeDamageMult) ?? true))
            {
                if (!lhs.OutOfRangeDamageMult.EqualsWithin(rhs.OutOfRangeDamageMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritDamageMult) ?? true))
            {
                if (!lhs.CritDamageMult.EqualsWithin(rhs.CritDamageMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.CriticalHitSpell) ?? true))
            {
                if (!lhs.CriticalHitSpell.Equals(rhs.CriticalHitSpell)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritEffectOnDeathOnly) ?? true))
            {
                if (lhs.CritEffectOnDeathOnly != rhs.CritEffectOnDeathOnly) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.HitBehavior) ?? true))
            {
                if (lhs.HitBehavior != rhs.HitBehavior) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Resistance) ?? true))
            {
                if (!lhs.Resistance.Equals(rhs.Resistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Skill) ?? true))
            {
                if (!lhs.Skill.Equals(rhs.Skill)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown4) ?? true))
            {
                if (!lhs.WDMGUnknown4.EqualsWithin(rhs.WDMGUnknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown5) ?? true))
            {
                if (!lhs.WDMGUnknown5.EqualsWithin(rhs.WDMGUnknown5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown6) ?? true))
            {
                if (!lhs.WDMGUnknown6.EqualsWithin(rhs.WDMGUnknown6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown7) ?? true))
            {
                if (!lhs.WDMGUnknown7.EqualsWithin(rhs.WDMGUnknown7)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown8) ?? true))
            {
                if (!lhs.WDMGUnknown8.EqualsWithin(rhs.WDMGUnknown8)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown9) ?? true))
            {
                if (!lhs.WDMGUnknown9.EqualsWithin(rhs.WDMGUnknown9)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritChanceIncMult) ?? true))
            {
                if (!lhs.CritChanceIncMult.EqualsWithin(rhs.CritChanceIncMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DamageTypes) ?? true))
            {
                if (!lhs.DamageTypes.SequenceEqualNullable(rhs.DamageTypes, (l, r) => ((WeaponDamageTypeCommon)((IWeaponDamageTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.DamageTypes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.FiringType) ?? true))
            {
                if (lhs.FiringType != rhs.FiringType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BurstCount) ?? true))
            {
                if (lhs.BurstCount != rhs.BurstCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.RepeatableFire) ?? true))
            {
                if (lhs.RepeatableFire != rhs.RepeatableFire) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackSeconds) ?? true))
            {
                if (!lhs.AttackSeconds.EqualsWithin(rhs.AttackSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.FireSeconds) ?? true))
            {
                if (!lhs.FireSeconds.EqualsWithin(rhs.FireSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackDelaySeconds) ?? true))
            {
                if (!lhs.AttackDelaySeconds.EqualsWithin(rhs.AttackDelaySeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BoltChargeSeconds) ?? true))
            {
                if (!lhs.BoltChargeSeconds.EqualsWithin(rhs.BoltChargeSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BoltAction) ?? true))
            {
                if (lhs.BoltAction != rhs.BoltAction) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DisableShellCaseEject) ?? true))
            {
                if (lhs.DisableShellCaseEject != rhs.DisableShellCaseEject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ShotsPerSecond) ?? true))
            {
                if (!lhs.ShotsPerSecond.EqualsWithin(rhs.ShotsPerSecond)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFIRUnknown7) ?? true))
            {
                if (!lhs.WFIRUnknown7.EqualsWithin(rhs.WFIRUnknown7)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideRateOfFire) ?? true))
            {
                if (lhs.OverrideRateOfFire != rhs.OverrideRateOfFire) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.TriggerThresholdPrimaryTrigger) ?? true))
            {
                if (!lhs.TriggerThresholdPrimaryTrigger.EqualsWithin(rhs.TriggerThresholdPrimaryTrigger)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFIRUnknown10) ?? true))
            {
                if (lhs.WFIRUnknown10 != rhs.WFIRUnknown10) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.TriggerThresholdSecondStage) ?? true))
            {
                if (!lhs.TriggerThresholdSecondStage.EqualsWithin(rhs.TriggerThresholdSecondStage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasStagedTrigger) ?? true))
            {
                if (lhs.HasStagedTrigger != rhs.HasStagedTrigger) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasDualTrigger) ?? true))
            {
                if (lhs.HasDualTrigger != rhs.HasDualTrigger) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BurstDelaySeconds) ?? true))
            {
                if (!lhs.BurstDelaySeconds.EqualsWithin(rhs.BurstDelaySeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.NonPlayable) ?? true))
            {
                if (lhs.NonPlayable != rhs.NonPlayable) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PlayerOnly) ?? true))
            {
                if (lhs.PlayerOnly != rhs.PlayerOnly) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown1) ?? true))
            {
                if (lhs.WFLGUnknown1 != rhs.WFLGUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown2) ?? true))
            {
                if (lhs.WFLGUnknown2 != rhs.WFLGUnknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.CannotDrop) ?? true))
            {
                if (lhs.CannotDrop != rhs.CannotDrop) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MinorCrime) ?? true))
            {
                if (lhs.MinorCrime != rhs.MinorCrime) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.NonHostile) ?? true))
            {
                if (lhs.NonHostile != rhs.NonHostile) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown3) ?? true))
            {
                if (lhs.WFLGUnknown3 != rhs.WFLGUnknown3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown4) ?? true))
            {
                if (lhs.WFLGUnknown4 != rhs.WFLGUnknown4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown5) ?? true))
            {
                if (lhs.WFLGUnknown5 != rhs.WFLGUnknown5) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown6) ?? true))
            {
                if (lhs.WFLGUnknown6 != rhs.WFLGUnknown6) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown7) ?? true))
            {
                if (lhs.WFLGUnknown7 != rhs.WFLGUnknown7) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WGENUnknown1) ?? true))
            {
                if (lhs.WGENUnknown1 != rhs.WGENUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseWeight) ?? true))
            {
                if (!lhs.BaseWeight.EqualsWithin(rhs.BaseWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseValue) ?? true))
            {
                if (lhs.BaseValue != rhs.BaseValue) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseSpeed) ?? true))
            {
                if (!lhs.BaseSpeed.EqualsWithin(rhs.BaseSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackOxygenCost) ?? true))
            {
                if (!lhs.AttackOxygenCost.EqualsWithin(rhs.AttackOxygenCost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WeaponBarrel) ?? true))
            {
                if (!lhs.WeaponBarrel.Equals(rhs.WeaponBarrel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.General) ?? true))
            {
                if (!object.Equals(lhs.General, rhs.General)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WMELUnknown1) ?? true))
            {
                if (lhs.WMELUnknown1 != rhs.WMELUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeBashDamage) ?? true))
            {
                if (!lhs.MeleeBashDamage.EqualsWithin(rhs.MeleeBashDamage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeReach) ?? true))
            {
                if (!lhs.MeleeReach.EqualsWithin(rhs.MeleeReach)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeStagger) ?? true))
            {
                if (lhs.MeleeStagger != rhs.MeleeStagger) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.Power) ?? true))
            {
                if (!lhs.Power.Equals(rhs.Power)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerRechargeTime) ?? true))
            {
                if (!lhs.PowerRechargeTime.EqualsWithin(rhs.PowerRechargeTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerRechargeDelay) ?? true))
            {
                if (!lhs.PowerRechargeDelay.EqualsWithin(rhs.PowerRechargeDelay)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ConsumeAmmo) ?? true))
            {
                if (lhs.ConsumeAmmo != rhs.ConsumeAmmo) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerBonus) ?? true))
            {
                if (!lhs.PowerBonus.Equals(rhs.PowerBonus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.UsePower) ?? true))
            {
                if (lhs.UsePower != rhs.UsePower) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown1) ?? true))
            {
                if (lhs.QNAMUnknown1 != rhs.QNAMUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown2) ?? true))
            {
                if (!lhs.QNAMUnknown2.EqualsWithin(rhs.QNAMUnknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown3) ?? true))
            {
                if (lhs.QNAMUnknown3 != rhs.QNAMUnknown3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown4) ?? true))
            {
                if (!lhs.QNAMUnknown4.Equals(rhs.QNAMUnknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown5) ?? true))
            {
                if (!lhs.QNAMUnknown5.EqualsWithin(rhs.QNAMUnknown5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerConsumption) ?? true))
            {
                if (!lhs.PowerConsumption.Equals(rhs.PowerConsumption)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WRLOUnknown1) ?? true))
            {
                if (!lhs.WRLOUnknown1.EqualsWithin(rhs.WRLOUnknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadSpeed) ?? true))
            {
                if (!lhs.ReloadSpeed.EqualsWithin(rhs.ReloadSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadCharging) ?? true))
            {
                if (lhs.ReloadCharging != rhs.ReloadCharging) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadSingle) ?? true))
            {
                if (lhs.ReloadSingle != rhs.ReloadSingle) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WRUM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WRUM, rhs.WRUM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureValueMin) ?? true))
            {
                if (!lhs.ApertureValueMin.EqualsWithin(rhs.ApertureValueMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureValueMax) ?? true))
            {
                if (!lhs.ApertureValueMax.EqualsWithin(rhs.ApertureValueMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureInputMin) ?? true))
            {
                if (!lhs.ApertureInputMin.EqualsWithin(rhs.ApertureInputMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureInputMax) ?? true))
            {
                if (!lhs.ApertureInputMax.EqualsWithin(rhs.ApertureInputMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureAcceleration) ?? true))
            {
                if (!lhs.ApertureAcceleration.EqualsWithin(rhs.ApertureAcceleration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureDeceleration) ?? true))
            {
                if (!lhs.ApertureDeceleration.EqualsWithin(rhs.ApertureDeceleration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceValueMin) ?? true))
            {
                if (!lhs.DistanceValueMin.EqualsWithin(rhs.DistanceValueMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceValueMax) ?? true))
            {
                if (!lhs.DistanceValueMax.EqualsWithin(rhs.DistanceValueMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceInputMin) ?? true))
            {
                if (!lhs.DistanceInputMin.EqualsWithin(rhs.DistanceInputMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceInputMax) ?? true))
            {
                if (!lhs.DistanceInputMax.EqualsWithin(rhs.DistanceInputMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceAcceleration) ?? true))
            {
                if (!lhs.DistanceAcceleration.EqualsWithin(rhs.DistanceAcceleration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceDeceleration) ?? true))
            {
                if (!lhs.DistanceDeceleration.EqualsWithin(rhs.DistanceDeceleration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.UseVariableRange) ?? true))
            {
                if (lhs.UseVariableRange != rhs.UseVariableRange) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.FirstPersonModel) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FirstPersonModel, rhs.FirstPersonModel, out var lhsFirstPersonModel, out var rhsFirstPersonModel, out var isFirstPersonModelEqual))
                {
                    if (!((FirstPersonModelCommon)((IFirstPersonModelGetter)lhsFirstPersonModel).CommonInstance()!).Equals(lhsFirstPersonModel, rhsFirstPersonModel, equalsMask?.GetSubCrystal((int)Weapon_FieldIndex.FirstPersonModel))) return false;
                }
                else if (!isFirstPersonModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown1) ?? true))
            {
                if (lhs.WVISUnknown1 != rhs.WVISUnknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown2) ?? true))
            {
                if (lhs.WVISUnknown2 != rhs.WVISUnknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown3) ?? true))
            {
                if (lhs.WVISUnknown3 != rhs.WVISUnknown3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ColorRemappingIndex) ?? true))
            {
                if (!lhs.ColorRemappingIndex.EqualsWithin(rhs.ColorRemappingIndex)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.ImageSpaceAdapter) ?? true))
            {
                if (!lhs.ImageSpaceAdapter.Equals(rhs.ImageSpaceAdapter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown1) ?? true))
            {
                if (!lhs.WTRMUnknown1.EqualsWithin(rhs.WTRMUnknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown2) ?? true))
            {
                if (lhs.WTRMUnknown2 != rhs.WTRMUnknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown3) ?? true))
            {
                if (!lhs.WTRMUnknown3.EqualsWithin(rhs.WTRMUnknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown4) ?? true))
            {
                if (!lhs.WTRMUnknown4.EqualsWithin(rhs.WTRMUnknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown5) ?? true))
            {
                if (!lhs.WTRMUnknown5.EqualsWithin(rhs.WTRMUnknown5)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWeaponGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsitem)
            {
                hash.Add(ObjectPaletteDefaultsitem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            if (item.XALG is {} XALGitem)
            {
                hash.Add(XALGitem);
            }
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.ObjectEffect);
            if (item.EnchantmentAmount is {} EnchantmentAmountitem)
            {
                hash.Add(EnchantmentAmountitem);
            }
            hash.Add(item.EquipmentType);
            hash.Add(item.BlockBashImpactDataSet);
            hash.Add(item.AlternateBlockMaterial);
            if (item.PickupSound is {} PickupSounditem)
            {
                hash.Add(PickupSounditem);
            }
            if (item.DropdownSound is {} DropdownSounditem)
            {
                hash.Add(DropdownSounditem);
            }
            hash.Add(item.Keywords);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.InstanceNaming);
            hash.Add(item.AttachParentSlots);
            hash.Add(item.ObjectTemplates);
            hash.Add(item.EmbeddedWeaponMod);
            if (item.BNAM is {} BNAMItem)
            {
                hash.Add(BNAMItem);
            }
            hash.Add(item.SightedTransitionSeconds);
            hash.Add(item.AimDownSightTemplate);
            hash.Add(item.AimModel);
            hash.Add(item.AccuracyBonus);
            hash.Add(item.HasScope);
            hash.Add(item.AimAssistTemplate);
            hash.Add(item.AimOpticalSightModel);
            hash.Add(item.MeleeAimAssistModel);
            hash.Add(item.WAIMUnknown1);
            hash.Add(item.WAIMUnknown2);
            hash.Add(item.EnableMarkingTargets);
            hash.Add(item.ReticleType);
            hash.Add(item.WAIMUnknown3);
            hash.Add(item.WAIMUnknown4);
            hash.Add(item.AmmoType);
            hash.Add(item.AmmoCapacity);
            hash.Add(item.AmmoList);
            hash.Add(item.OverrideProjectile);
            hash.Add(item.OverrideShellCasing);
            hash.Add(item.ProjectilesCount);
            hash.Add(item.NpcsUseAmmo);
            hash.Add(item.WAM2Unknown1);
            if (item.WAMM is {} WAMMItem)
            {
                hash.Add(WAMMItem);
            }
            hash.Add(item.MeleeOrCreature);
            hash.Add(item.PrimedExplosive);
            hash.Add(item.DryFire);
            hash.Add(item.Idle);
            hash.Add(item.Equip);
            hash.Add(item.Unequip);
            hash.Add(item.FastEquip);
            hash.Add(item.SoundLevel);
            hash.Add(item.WAUDUnknown2);
            if (item.WTUR is {} WTURItem)
            {
                hash.Add(WTURItem);
            }
            hash.Add(item.ChargeFullPowerSeconds);
            hash.Add(item.ChargeMinPowerPerShot);
            hash.Add(item.ChargeCritBonus);
            hash.Add(item.ChargeHoldInput);
            hash.Add(item.ChargingAttack);
            hash.Add(item.AttackDamage);
            hash.Add(item.MinRange);
            hash.Add(item.MaxRange);
            hash.Add(item.OutOfRangeDamageMult);
            hash.Add(item.CritDamageMult);
            hash.Add(item.CriticalHitSpell);
            hash.Add(item.CritEffectOnDeathOnly);
            hash.Add(item.HitBehavior);
            hash.Add(item.Resistance);
            hash.Add(item.Skill);
            hash.Add(item.WDMGUnknown4);
            hash.Add(item.WDMGUnknown5);
            hash.Add(item.WDMGUnknown6);
            hash.Add(item.WDMGUnknown7);
            hash.Add(item.WDMGUnknown8);
            hash.Add(item.WDMGUnknown9);
            hash.Add(item.CritChanceIncMult);
            hash.Add(item.DamageTypes);
            hash.Add(item.FiringType);
            hash.Add(item.BurstCount);
            hash.Add(item.RepeatableFire);
            hash.Add(item.AttackSeconds);
            hash.Add(item.FireSeconds);
            hash.Add(item.AttackDelaySeconds);
            hash.Add(item.BoltChargeSeconds);
            hash.Add(item.BoltAction);
            hash.Add(item.DisableShellCaseEject);
            hash.Add(item.ShotsPerSecond);
            hash.Add(item.WFIRUnknown7);
            hash.Add(item.OverrideRateOfFire);
            hash.Add(item.TriggerThresholdPrimaryTrigger);
            hash.Add(item.WFIRUnknown10);
            hash.Add(item.TriggerThresholdSecondStage);
            hash.Add(item.HasStagedTrigger);
            hash.Add(item.HasDualTrigger);
            hash.Add(item.BurstDelaySeconds);
            hash.Add(item.NonPlayable);
            hash.Add(item.PlayerOnly);
            hash.Add(item.WFLGUnknown1);
            hash.Add(item.WFLGUnknown2);
            hash.Add(item.CannotDrop);
            hash.Add(item.MinorCrime);
            hash.Add(item.NonHostile);
            hash.Add(item.WFLGUnknown3);
            hash.Add(item.WFLGUnknown4);
            hash.Add(item.WFLGUnknown5);
            hash.Add(item.WFLGUnknown6);
            hash.Add(item.WFLGUnknown7);
            hash.Add(item.WGENUnknown1);
            hash.Add(item.BaseWeight);
            hash.Add(item.BaseValue);
            hash.Add(item.BaseSpeed);
            hash.Add(item.AttackOxygenCost);
            hash.Add(item.WeaponBarrel);
            if (item.General is {} Generalitem)
            {
                hash.Add(Generalitem);
            }
            hash.Add(item.WMELUnknown1);
            hash.Add(item.MeleeBashDamage);
            hash.Add(item.MeleeReach);
            hash.Add(item.MeleeStagger);
            hash.Add(item.Power);
            hash.Add(item.PowerRechargeTime);
            hash.Add(item.PowerRechargeDelay);
            hash.Add(item.ConsumeAmmo);
            hash.Add(item.PowerBonus);
            hash.Add(item.UsePower);
            hash.Add(item.QNAMUnknown1);
            hash.Add(item.QNAMUnknown2);
            hash.Add(item.QNAMUnknown3);
            hash.Add(item.QNAMUnknown4);
            hash.Add(item.QNAMUnknown5);
            hash.Add(item.PowerConsumption);
            hash.Add(item.WRLOUnknown1);
            hash.Add(item.ReloadSpeed);
            hash.Add(item.ReloadCharging);
            hash.Add(item.ReloadSingle);
            if (item.WRUM is {} WRUMItem)
            {
                hash.Add(WRUMItem);
            }
            hash.Add(item.ApertureValueMin);
            hash.Add(item.ApertureValueMax);
            hash.Add(item.ApertureInputMin);
            hash.Add(item.ApertureInputMax);
            hash.Add(item.ApertureAcceleration);
            hash.Add(item.ApertureDeceleration);
            hash.Add(item.DistanceValueMin);
            hash.Add(item.DistanceValueMax);
            hash.Add(item.DistanceInputMin);
            hash.Add(item.DistanceInputMax);
            hash.Add(item.DistanceAcceleration);
            hash.Add(item.DistanceDeceleration);
            hash.Add(item.UseVariableRange);
            if (item.FirstPersonModel is {} FirstPersonModelitem)
            {
                hash.Add(FirstPersonModelitem);
            }
            hash.Add(item.WVISUnknown1);
            hash.Add(item.WVISUnknown2);
            hash.Add(item.WVISUnknown3);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.ColorRemappingIndex);
            hash.Add(item.ImageSpaceAdapter);
            hash.Add(item.WTRMUnknown1);
            hash.Add(item.WTRMUnknown2);
            hash.Add(item.WTRMUnknown3);
            hash.Add(item.WTRMUnknown4);
            hash.Add(item.WTRMUnknown5);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weapon.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWeaponGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ObjectEffect, out var ObjectEffectInfo))
            {
                yield return ObjectEffectInfo;
            }
            if (FormLinkInformation.TryFactory(obj.EquipmentType, out var EquipmentTypeInfo))
            {
                yield return EquipmentTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BlockBashImpactDataSet, out var BlockBashImpactDataSetInfo))
            {
                yield return BlockBashImpactDataSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AlternateBlockMaterial, out var AlternateBlockMaterialInfo))
            {
                yield return AlternateBlockMaterialInfo;
            }
            if (obj.PickupSound is {} PickupSoundItems)
            {
                foreach (var item in PickupSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.DropdownSound is {} DropdownSoundItems)
            {
                foreach (var item in DropdownSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.InstanceNaming, out var InstanceNamingInfo))
            {
                yield return InstanceNamingInfo;
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ObjectTemplates is {} ObjectTemplatesItem)
            {
                foreach (var item in ObjectTemplatesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.EmbeddedWeaponMod, out var EmbeddedWeaponModInfo))
            {
                yield return EmbeddedWeaponModInfo;
            }
            yield return FormLinkInformation.Factory(obj.AimDownSightTemplate);
            yield return FormLinkInformation.Factory(obj.AimModel);
            yield return FormLinkInformation.Factory(obj.AimAssistTemplate);
            yield return FormLinkInformation.Factory(obj.AimOpticalSightModel);
            yield return FormLinkInformation.Factory(obj.MeleeAimAssistModel);
            yield return FormLinkInformation.Factory(obj.AmmoType);
            yield return FormLinkInformation.Factory(obj.AmmoList);
            yield return FormLinkInformation.Factory(obj.OverrideProjectile);
            yield return FormLinkInformation.Factory(obj.OverrideShellCasing);
            foreach (var item in obj.MeleeOrCreature.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PrimedExplosive.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DryFire.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Idle.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Equip.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Unequip.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FastEquip.EnumerateFormLinks())
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.CriticalHitSpell);
            yield return FormLinkInformation.Factory(obj.Resistance);
            yield return FormLinkInformation.Factory(obj.Skill);
            if (obj.DamageTypes is {} DamageTypesItem)
            {
                foreach (var item in DamageTypesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.WeaponBarrel);
            yield return FormLinkInformation.Factory(obj.Power);
            yield return FormLinkInformation.Factory(obj.PowerBonus);
            yield return FormLinkInformation.Factory(obj.QNAMUnknown4);
            yield return FormLinkInformation.Factory(obj.PowerConsumption);
            if (obj.FirstPersonModel is {} FirstPersonModelItems)
            {
                foreach (var item in FirstPersonModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield return FormLinkInformation.Factory(obj.ImageSpaceAdapter);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IWeaponGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.FirstPersonModel is {} FirstPersonModelItems)
            {
                foreach (var item in FirstPersonModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Weapon Duplicate(
            IWeaponGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Weapon(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeaponGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeaponGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WeaponSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly WeaponSetterTranslationCommon Instance = new WeaponSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeaponInternal item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWeapon item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.ObjectPaletteDefaults);
                try
                {
                    if(rhs.ObjectPaletteDefaults is {} rhsObjectPaletteDefaults)
                    {
                        item.ObjectPaletteDefaults = rhsObjectPaletteDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectPaletteDefaults));
                    }
                    else
                    {
                        item.ObjectPaletteDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.XALG) ?? true))
            {
                item.XALG = rhs.XALG;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectEffect) ?? true))
            {
                item.ObjectEffect.SetTo(rhs.ObjectEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType.SetTo(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BlockBashImpactDataSet) ?? true))
            {
                item.BlockBashImpactDataSet.SetTo(rhs.BlockBashImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                item.AlternateBlockMaterial.SetTo(rhs.AlternateBlockMaterial.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PickupSound) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.PickupSound);
                try
                {
                    if(rhs.PickupSound is {} rhsPickupSound)
                    {
                        item.PickupSound = rhsPickupSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.PickupSound));
                    }
                    else
                    {
                        item.PickupSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DropdownSound) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.DropdownSound);
                try
                {
                    if(rhs.DropdownSound is {} rhsDropdownSound)
                    {
                        item.DropdownSound = rhsDropdownSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.DropdownSound));
                    }
                    else
                    {
                        item.DropdownSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.InstanceNaming) ?? true))
            {
                item.InstanceNaming.SetTo(rhs.InstanceNaming.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectTemplates) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.ObjectTemplates);
                try
                {
                    if ((rhs.ObjectTemplates != null))
                    {
                        item.ObjectTemplates = 
                            rhs.ObjectTemplates
                            .Select(r =>
                            {
                                return r.DeepCopy<Weapon.Property>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectTemplate<Weapon.Property>>();
                    }
                    else
                    {
                        item.ObjectTemplates = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EmbeddedWeaponMod) ?? true))
            {
                item.EmbeddedWeaponMod.SetTo(rhs.EmbeddedWeaponMod.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BNAM) ?? true))
            {
                if(rhs.BNAM is {} BNAMrhs)
                {
                    item.BNAM = BNAMrhs.ToArray();
                }
                else
                {
                    item.BNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.SightedTransitionSeconds) ?? true))
            {
                item.SightedTransitionSeconds = rhs.SightedTransitionSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimDownSightTemplate) ?? true))
            {
                item.AimDownSightTemplate.SetTo(rhs.AimDownSightTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimModel) ?? true))
            {
                item.AimModel.SetTo(rhs.AimModel.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AccuracyBonus) ?? true))
            {
                item.AccuracyBonus = rhs.AccuracyBonus;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasScope) ?? true))
            {
                item.HasScope = rhs.HasScope;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimAssistTemplate) ?? true))
            {
                item.AimAssistTemplate.SetTo(rhs.AimAssistTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AimOpticalSightModel) ?? true))
            {
                item.AimOpticalSightModel.SetTo(rhs.AimOpticalSightModel.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeAimAssistModel) ?? true))
            {
                item.MeleeAimAssistModel.SetTo(rhs.MeleeAimAssistModel.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown1) ?? true))
            {
                item.WAIMUnknown1 = rhs.WAIMUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown2) ?? true))
            {
                item.WAIMUnknown2 = rhs.WAIMUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnableMarkingTargets) ?? true))
            {
                item.EnableMarkingTargets = rhs.EnableMarkingTargets;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReticleType) ?? true))
            {
                item.ReticleType = rhs.ReticleType;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown3) ?? true))
            {
                item.WAIMUnknown3 = rhs.WAIMUnknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAIMUnknown4) ?? true))
            {
                item.WAIMUnknown4 = rhs.WAIMUnknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoType) ?? true))
            {
                item.AmmoType.SetTo(rhs.AmmoType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoCapacity) ?? true))
            {
                item.AmmoCapacity = rhs.AmmoCapacity;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AmmoList) ?? true))
            {
                item.AmmoList.SetTo(rhs.AmmoList.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideProjectile) ?? true))
            {
                item.OverrideProjectile.SetTo(rhs.OverrideProjectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideShellCasing) ?? true))
            {
                item.OverrideShellCasing.SetTo(rhs.OverrideShellCasing.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ProjectilesCount) ?? true))
            {
                item.ProjectilesCount = rhs.ProjectilesCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.NpcsUseAmmo) ?? true))
            {
                item.NpcsUseAmmo = rhs.NpcsUseAmmo;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAM2Unknown1) ?? true))
            {
                item.WAM2Unknown1 = rhs.WAM2Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAMM) ?? true))
            {
                if(rhs.WAMM is {} WAMMrhs)
                {
                    item.WAMM = WAMMrhs.ToArray();
                }
                else
                {
                    item.WAMM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeOrCreature) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.MeleeOrCreature);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeOrCreature) ?? true))
                    {
                        item.MeleeOrCreature = rhs.MeleeOrCreature.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.MeleeOrCreature),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PrimedExplosive) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.PrimedExplosive);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PrimedExplosive) ?? true))
                    {
                        item.PrimedExplosive = rhs.PrimedExplosive.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.PrimedExplosive),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DryFire) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.DryFire);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DryFire) ?? true))
                    {
                        item.DryFire = rhs.DryFire.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.DryFire),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Idle) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Idle);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Idle) ?? true))
                    {
                        item.Idle = rhs.Idle.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Idle),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Equip) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Equip);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Equip) ?? true))
                    {
                        item.Equip = rhs.Equip.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Equip),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Unequip) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Unequip);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Unequip) ?? true))
                    {
                        item.Unequip = rhs.Unequip.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Unequip),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FastEquip) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.FastEquip);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FastEquip) ?? true))
                    {
                        item.FastEquip = rhs.FastEquip.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.FastEquip),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WAUDUnknown2) ?? true))
            {
                item.WAUDUnknown2 = rhs.WAUDUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTUR) ?? true))
            {
                if(rhs.WTUR is {} WTURrhs)
                {
                    item.WTUR = WTURrhs.ToArray();
                }
                else
                {
                    item.WTUR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeFullPowerSeconds) ?? true))
            {
                item.ChargeFullPowerSeconds = rhs.ChargeFullPowerSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeMinPowerPerShot) ?? true))
            {
                item.ChargeMinPowerPerShot = rhs.ChargeMinPowerPerShot;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeCritBonus) ?? true))
            {
                item.ChargeCritBonus = rhs.ChargeCritBonus;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargeHoldInput) ?? true))
            {
                item.ChargeHoldInput = rhs.ChargeHoldInput;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ChargingAttack) ?? true))
            {
                item.ChargingAttack = rhs.ChargingAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackDamage) ?? true))
            {
                item.AttackDamage = rhs.AttackDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MinRange) ?? true))
            {
                item.MinRange = rhs.MinRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MaxRange) ?? true))
            {
                item.MaxRange = rhs.MaxRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.OutOfRangeDamageMult) ?? true))
            {
                item.OutOfRangeDamageMult = rhs.OutOfRangeDamageMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritDamageMult) ?? true))
            {
                item.CritDamageMult = rhs.CritDamageMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.CriticalHitSpell) ?? true))
            {
                item.CriticalHitSpell.SetTo(rhs.CriticalHitSpell.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritEffectOnDeathOnly) ?? true))
            {
                item.CritEffectOnDeathOnly = rhs.CritEffectOnDeathOnly;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.HitBehavior) ?? true))
            {
                item.HitBehavior = rhs.HitBehavior;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Resistance) ?? true))
            {
                item.Resistance.SetTo(rhs.Resistance.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Skill) ?? true))
            {
                item.Skill.SetTo(rhs.Skill.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown4) ?? true))
            {
                item.WDMGUnknown4 = rhs.WDMGUnknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown5) ?? true))
            {
                item.WDMGUnknown5 = rhs.WDMGUnknown5;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown6) ?? true))
            {
                item.WDMGUnknown6 = rhs.WDMGUnknown6;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown7) ?? true))
            {
                item.WDMGUnknown7 = rhs.WDMGUnknown7;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown8) ?? true))
            {
                item.WDMGUnknown8 = rhs.WDMGUnknown8;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WDMGUnknown9) ?? true))
            {
                item.WDMGUnknown9 = rhs.WDMGUnknown9;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.CritChanceIncMult) ?? true))
            {
                item.CritChanceIncMult = rhs.CritChanceIncMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DamageTypes) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.DamageTypes);
                try
                {
                    if ((rhs.DamageTypes != null))
                    {
                        item.DamageTypes = 
                            rhs.DamageTypes
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeaponDamageType>();
                    }
                    else
                    {
                        item.DamageTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FiringType) ?? true))
            {
                item.FiringType = rhs.FiringType;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BurstCount) ?? true))
            {
                item.BurstCount = rhs.BurstCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.RepeatableFire) ?? true))
            {
                item.RepeatableFire = rhs.RepeatableFire;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackSeconds) ?? true))
            {
                item.AttackSeconds = rhs.AttackSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FireSeconds) ?? true))
            {
                item.FireSeconds = rhs.FireSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackDelaySeconds) ?? true))
            {
                item.AttackDelaySeconds = rhs.AttackDelaySeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BoltChargeSeconds) ?? true))
            {
                item.BoltChargeSeconds = rhs.BoltChargeSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BoltAction) ?? true))
            {
                item.BoltAction = rhs.BoltAction;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DisableShellCaseEject) ?? true))
            {
                item.DisableShellCaseEject = rhs.DisableShellCaseEject;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ShotsPerSecond) ?? true))
            {
                item.ShotsPerSecond = rhs.ShotsPerSecond;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFIRUnknown7) ?? true))
            {
                item.WFIRUnknown7 = rhs.WFIRUnknown7;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.OverrideRateOfFire) ?? true))
            {
                item.OverrideRateOfFire = rhs.OverrideRateOfFire;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.TriggerThresholdPrimaryTrigger) ?? true))
            {
                item.TriggerThresholdPrimaryTrigger = rhs.TriggerThresholdPrimaryTrigger;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFIRUnknown10) ?? true))
            {
                item.WFIRUnknown10 = rhs.WFIRUnknown10;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.TriggerThresholdSecondStage) ?? true))
            {
                item.TriggerThresholdSecondStage = rhs.TriggerThresholdSecondStage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasStagedTrigger) ?? true))
            {
                item.HasStagedTrigger = rhs.HasStagedTrigger;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.HasDualTrigger) ?? true))
            {
                item.HasDualTrigger = rhs.HasDualTrigger;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BurstDelaySeconds) ?? true))
            {
                item.BurstDelaySeconds = rhs.BurstDelaySeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.NonPlayable) ?? true))
            {
                item.NonPlayable = rhs.NonPlayable;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PlayerOnly) ?? true))
            {
                item.PlayerOnly = rhs.PlayerOnly;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown1) ?? true))
            {
                item.WFLGUnknown1 = rhs.WFLGUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown2) ?? true))
            {
                item.WFLGUnknown2 = rhs.WFLGUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.CannotDrop) ?? true))
            {
                item.CannotDrop = rhs.CannotDrop;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MinorCrime) ?? true))
            {
                item.MinorCrime = rhs.MinorCrime;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.NonHostile) ?? true))
            {
                item.NonHostile = rhs.NonHostile;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown3) ?? true))
            {
                item.WFLGUnknown3 = rhs.WFLGUnknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown4) ?? true))
            {
                item.WFLGUnknown4 = rhs.WFLGUnknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown5) ?? true))
            {
                item.WFLGUnknown5 = rhs.WFLGUnknown5;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown6) ?? true))
            {
                item.WFLGUnknown6 = rhs.WFLGUnknown6;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WFLGUnknown7) ?? true))
            {
                item.WFLGUnknown7 = rhs.WFLGUnknown7;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WGENUnknown1) ?? true))
            {
                item.WGENUnknown1 = rhs.WGENUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseWeight) ?? true))
            {
                item.BaseWeight = rhs.BaseWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseValue) ?? true))
            {
                item.BaseValue = rhs.BaseValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BaseSpeed) ?? true))
            {
                item.BaseSpeed = rhs.BaseSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackOxygenCost) ?? true))
            {
                item.AttackOxygenCost = rhs.AttackOxygenCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WeaponBarrel) ?? true))
            {
                item.WeaponBarrel.SetTo(rhs.WeaponBarrel.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.General) ?? true))
            {
                item.General = rhs.General?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WMELUnknown1) ?? true))
            {
                item.WMELUnknown1 = rhs.WMELUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeBashDamage) ?? true))
            {
                item.MeleeBashDamage = rhs.MeleeBashDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeReach) ?? true))
            {
                item.MeleeReach = rhs.MeleeReach;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.MeleeStagger) ?? true))
            {
                item.MeleeStagger = rhs.MeleeStagger;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Power) ?? true))
            {
                item.Power.SetTo(rhs.Power.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerRechargeTime) ?? true))
            {
                item.PowerRechargeTime = rhs.PowerRechargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerRechargeDelay) ?? true))
            {
                item.PowerRechargeDelay = rhs.PowerRechargeDelay;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ConsumeAmmo) ?? true))
            {
                item.ConsumeAmmo = rhs.ConsumeAmmo;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerBonus) ?? true))
            {
                item.PowerBonus.SetTo(rhs.PowerBonus.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.UsePower) ?? true))
            {
                item.UsePower = rhs.UsePower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown1) ?? true))
            {
                item.QNAMUnknown1 = rhs.QNAMUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown2) ?? true))
            {
                item.QNAMUnknown2 = rhs.QNAMUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown3) ?? true))
            {
                item.QNAMUnknown3 = rhs.QNAMUnknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown4) ?? true))
            {
                item.QNAMUnknown4.SetTo(rhs.QNAMUnknown4.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.QNAMUnknown5) ?? true))
            {
                item.QNAMUnknown5 = rhs.QNAMUnknown5;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PowerConsumption) ?? true))
            {
                item.PowerConsumption.SetTo(rhs.PowerConsumption.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WRLOUnknown1) ?? true))
            {
                item.WRLOUnknown1 = rhs.WRLOUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadSpeed) ?? true))
            {
                item.ReloadSpeed = rhs.ReloadSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadCharging) ?? true))
            {
                item.ReloadCharging = rhs.ReloadCharging;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ReloadSingle) ?? true))
            {
                item.ReloadSingle = rhs.ReloadSingle;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WRUM) ?? true))
            {
                if(rhs.WRUM is {} WRUMrhs)
                {
                    item.WRUM = WRUMrhs.ToArray();
                }
                else
                {
                    item.WRUM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureValueMin) ?? true))
            {
                item.ApertureValueMin = rhs.ApertureValueMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureValueMax) ?? true))
            {
                item.ApertureValueMax = rhs.ApertureValueMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureInputMin) ?? true))
            {
                item.ApertureInputMin = rhs.ApertureInputMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureInputMax) ?? true))
            {
                item.ApertureInputMax = rhs.ApertureInputMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureAcceleration) ?? true))
            {
                item.ApertureAcceleration = rhs.ApertureAcceleration;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ApertureDeceleration) ?? true))
            {
                item.ApertureDeceleration = rhs.ApertureDeceleration;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceValueMin) ?? true))
            {
                item.DistanceValueMin = rhs.DistanceValueMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceValueMax) ?? true))
            {
                item.DistanceValueMax = rhs.DistanceValueMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceInputMin) ?? true))
            {
                item.DistanceInputMin = rhs.DistanceInputMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceInputMax) ?? true))
            {
                item.DistanceInputMax = rhs.DistanceInputMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceAcceleration) ?? true))
            {
                item.DistanceAcceleration = rhs.DistanceAcceleration;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DistanceDeceleration) ?? true))
            {
                item.DistanceDeceleration = rhs.DistanceDeceleration;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.UseVariableRange) ?? true))
            {
                item.UseVariableRange = rhs.UseVariableRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FirstPersonModel) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.FirstPersonModel);
                try
                {
                    if(rhs.FirstPersonModel is {} rhsFirstPersonModel)
                    {
                        item.FirstPersonModel = rhsFirstPersonModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.FirstPersonModel));
                    }
                    else
                    {
                        item.FirstPersonModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown1) ?? true))
            {
                item.WVISUnknown1 = rhs.WVISUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown2) ?? true))
            {
                item.WVISUnknown2 = rhs.WVISUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WVISUnknown3) ?? true))
            {
                item.WVISUnknown3 = rhs.WVISUnknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ColorRemappingIndex) ?? true))
            {
                item.ColorRemappingIndex = rhs.ColorRemappingIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ImageSpaceAdapter) ?? true))
            {
                item.ImageSpaceAdapter.SetTo(rhs.ImageSpaceAdapter.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown1) ?? true))
            {
                item.WTRMUnknown1 = rhs.WTRMUnknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown2) ?? true))
            {
                item.WTRMUnknown2 = rhs.WTRMUnknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown3) ?? true))
            {
                item.WTRMUnknown3 = rhs.WTRMUnknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown4) ?? true))
            {
                item.WTRMUnknown4 = rhs.WTRMUnknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.WTRMUnknown5) ?? true))
            {
                item.WTRMUnknown5 = rhs.WTRMUnknown5;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWeapon item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            Weapon.TranslationMask? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Weapon.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Weapon
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeaponSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class WeaponBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WeaponBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IWeaponGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ((ObjectPaletteDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPaletteDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPaletteDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectEffect,
                header: translationParams.ConvertToCustom(RecordTypes.EITM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentAmount,
                header: translationParams.ConvertToCustom(RecordTypes.EAMT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: translationParams.ConvertToCustom(RecordTypes.ETYP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BlockBashImpactDataSet,
                header: translationParams.ConvertToCustom(RecordTypes.BIDS));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateBlockMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.BAMT));
            if (item.PickupSound is {} PickupSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)PickupSoundItem).BinaryWriteTranslator).Write(
                        item: PickupSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.DropdownSound is {} DropdownSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PDSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)DropdownSoundItem).BinaryWriteTranslator).Write(
                        item: DropdownSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InstanceNaming,
                header: translationParams.ConvertToCustom(RecordTypes.INRD));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectTemplateGetter<Weapon.Property>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ObjectTemplates,
                counterType: RecordTypes.OBTE,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IObjectTemplateGetter<Weapon.Property> subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectTemplateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<Weapon.Property>(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            using (HeaderExport.Subrecord(writer, RecordTypes.STOP)) { }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EmbeddedWeaponMod,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WAIM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SightedTransitionSeconds);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AimDownSightTemplate);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AimModel);
                writer.Write(item.AccuracyBonus);
                writer.Write(item.HasScope);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AimAssistTemplate);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AimOpticalSightModel);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MeleeAimAssistModel);
                writer.Write(item.WAIMUnknown1);
                writer.Write(item.WAIMUnknown2);
                writer.Write(item.EnableMarkingTargets);
                writer.Write(item.ReticleType);
                writer.Write(item.WAIMUnknown3);
                writer.Write(item.WAIMUnknown4);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WAM2)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmmoType);
                writer.Write(item.AmmoCapacity);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmmoList);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OverrideProjectile);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OverrideShellCasing);
                writer.Write(item.ProjectilesCount);
                writer.Write(item.NpcsUseAmmo);
                writer.Write(item.WAM2Unknown1);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WAMM,
                header: translationParams.ConvertToCustom(RecordTypes.WAMM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WAUD)))
            {
                var MeleeOrCreatureItem = item.MeleeOrCreature;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)MeleeOrCreatureItem).BinaryWriteTranslator).Write(
                    item: MeleeOrCreatureItem,
                    writer: writer,
                    translationParams: translationParams);
                var PrimedExplosiveItem = item.PrimedExplosive;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)PrimedExplosiveItem).BinaryWriteTranslator).Write(
                    item: PrimedExplosiveItem,
                    writer: writer,
                    translationParams: translationParams);
                var DryFireItem = item.DryFire;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)DryFireItem).BinaryWriteTranslator).Write(
                    item: DryFireItem,
                    writer: writer,
                    translationParams: translationParams);
                var IdleItem = item.Idle;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)IdleItem).BinaryWriteTranslator).Write(
                    item: IdleItem,
                    writer: writer,
                    translationParams: translationParams);
                var EquipItem = item.Equip;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)EquipItem).BinaryWriteTranslator).Write(
                    item: EquipItem,
                    writer: writer,
                    translationParams: translationParams);
                var UnequipItem = item.Unequip;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)UnequipItem).BinaryWriteTranslator).Write(
                    item: UnequipItem,
                    writer: writer,
                    translationParams: translationParams);
                var FastEquipItem = item.FastEquip;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)FastEquipItem).BinaryWriteTranslator).Write(
                    item: FastEquipItem,
                    writer: writer,
                    translationParams: translationParams);
                EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.SoundLevel,
                    length: 4);
                writer.Write(item.WAUDUnknown2);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WTUR,
                header: translationParams.ConvertToCustom(RecordTypes.WTUR));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WCHG)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ChargeFullPowerSeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ChargeMinPowerPerShot);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ChargeCritBonus);
                writer.Write(item.ChargeHoldInput);
                writer.Write(item.ChargingAttack);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WDMG)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AttackDamage);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MinRange);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MaxRange);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OutOfRangeDamageMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CritDamageMult);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CriticalHitSpell);
                writer.Write(item.CritEffectOnDeathOnly);
                EnumBinaryTranslation<HitBehavior, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.HitBehavior,
                    length: 1);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Resistance);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Skill);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown5);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown6);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown7);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown8);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WDMGUnknown9);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CritChanceIncMult);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWeaponDamageTypeGetter>.Instance.Write(
                writer: writer,
                items: item.DamageTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.DAMA),
                transl: (MutagenWriter subWriter, IWeaponDamageTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WeaponDamageTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WFIR)))
            {
                EnumBinaryTranslation<Weapon.FiringTypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.FiringType,
                    length: 1);
                writer.Write(item.BurstCount);
                writer.Write(item.RepeatableFire);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AttackSeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FireSeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AttackDelaySeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BoltChargeSeconds);
                writer.Write(item.BoltAction);
                writer.Write(item.DisableShellCaseEject);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ShotsPerSecond);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WFIRUnknown7);
                writer.Write(item.OverrideRateOfFire);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TriggerThresholdPrimaryTrigger);
                writer.Write(item.WFIRUnknown10);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TriggerThresholdSecondStage);
                writer.Write(item.HasStagedTrigger);
                writer.Write(item.HasDualTrigger);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BurstDelaySeconds);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WFLG)))
            {
                writer.Write(item.NonPlayable);
                writer.Write(item.PlayerOnly);
                writer.Write(item.WFLGUnknown1);
                writer.Write(item.WFLGUnknown2);
                writer.Write(item.CannotDrop);
                writer.Write(item.MinorCrime);
                writer.Write(item.NonHostile);
                writer.Write(item.WFLGUnknown3);
                writer.Write(item.WFLGUnknown4);
                writer.Write(item.WFLGUnknown5);
                writer.Write(item.WFLGUnknown6);
                writer.Write(item.WFLGUnknown7);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WGEN)))
            {
                writer.Write(item.WGENUnknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BaseWeight);
                writer.Write(item.BaseValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BaseSpeed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AttackOxygenCost);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WeaponBarrel);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.General,
                header: translationParams.ConvertToCustom(RecordTypes.WABB),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WMEL)))
            {
                writer.Write(item.WMELUnknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashDamage);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeReach);
                EnumBinaryTranslation<Stagger, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MeleeStagger,
                    length: 4);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.QNAM)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Power);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PowerRechargeTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PowerRechargeDelay);
                writer.Write(item.ConsumeAmmo);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PowerBonus);
                writer.Write(item.UsePower);
                writer.Write(item.QNAMUnknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.QNAMUnknown2);
                writer.Write(item.QNAMUnknown3);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.QNAMUnknown4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.QNAMUnknown5);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PowerConsumption);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WRLO)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WRLOUnknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ReloadSpeed);
                writer.Write(item.ReloadCharging);
                writer.Write(item.ReloadSingle);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WRUM,
                header: translationParams.ConvertToCustom(RecordTypes.WRUM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WVAR)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureValueMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureValueMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureInputMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureInputMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureAcceleration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ApertureDeceleration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceValueMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceValueMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceInputMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceInputMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceAcceleration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DistanceDeceleration);
                writer.Write(item.UseVariableRange);
            }
            if (item.FirstPersonModel is {} FirstPersonModelItem)
            {
                ((FirstPersonModelBinaryWriteTranslation)((IBinaryItem)FirstPersonModelItem).BinaryWriteTranslator).Write(
                    item: FirstPersonModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WVIS)))
            {
                writer.Write(item.WVISUnknown1);
                writer.Write(item.WVISUnknown2);
                writer.Write(item.WVISUnknown3);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorRemappingIndex);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImageSpaceAdapter);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WTRM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WTRMUnknown1);
                writer.Write(item.WTRMUnknown2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WTRMUnknown3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WTRMUnknown4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WTRMUnknown5);
            }
        }

        public void Write(
            MutagenWriter writer,
            IWeaponGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WEAP,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeaponBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly WeaponBinaryCreateTranslation Instance = new WeaponBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WEAP;
        public static ParseResult FillBinaryRecordTypes(
            IWeaponInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Weapon_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)Weapon_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPaletteDefaults = Mutagen.Bethesda.Starfield.ObjectPaletteDefaults.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.Transforms;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = frame.ReadUInt64();
                    return (int)Weapon_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Weapon_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Weapon_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                case RecordTypeInts.FLLD:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Weapon_FieldIndex.Name)
                    {
                        item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                            frame: frame,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)Weapon_FieldIndex.Model, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Weapon_FieldIndex.UseVariableRange)
                    {
                        item.FirstPersonModel = Mutagen.Bethesda.Starfield.FirstPersonModel.CreateFromBinary(
                            frame: frame,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)Weapon_FieldIndex.FirstPersonModel, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                                    frame: frame,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)Weapon_FieldIndex.Model, nextRecordType);
                            case 1:
                                item.FirstPersonModel = Mutagen.Bethesda.Starfield.FirstPersonModel.CreateFromBinary(
                                    frame: frame,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)Weapon_FieldIndex.FirstPersonModel, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.EITM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectEffect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentAmount = frame.ReadUInt16();
                    return (int)Weapon_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BlockBashImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.BlockBashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateBlockMaterial.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.PUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.PickupSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DropdownSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Weapon_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Weapon_FieldIndex.Description;
                }
                case RecordTypeInts.INRD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InstanceNaming.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.InstanceNaming;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Weapon_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    item.ObjectTemplates = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<Weapon.Property>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.OBTE,
                            triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ObjectTemplate<Weapon.Property>.TryCreateFromBinary)
                        .CastExtendedList<ObjectTemplate<Weapon.Property>>();
                    return (int)Weapon_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.STOP:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EmbeddedWeaponMod.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.EmbeddedWeaponMod;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.BNAM;
                }
                case RecordTypeInts.WAIM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.SightedTransitionSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AimDownSightTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.AimModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.AccuracyBonus = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.HasScope = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.AimAssistTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.AimOpticalSightModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeAimAssistModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.WAIMUnknown1 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.WAIMUnknown2 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.EnableMarkingTargets = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.ReticleType = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 1) return null;
                    item.WAIMUnknown3 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.WAIMUnknown4 = dataFrame.ReadUInt8();
                    return (int)Weapon_FieldIndex.WAIMUnknown4;
                }
                case RecordTypeInts.WAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.AmmoType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.AmmoCapacity = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.AmmoList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OverrideProjectile.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OverrideShellCasing.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.ProjectilesCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.NpcsUseAmmo = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WAM2Unknown1 = dataFrame.ReadUInt8();
                    return (int)Weapon_FieldIndex.WAM2Unknown1;
                }
                case RecordTypeInts.WAMM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WAMM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.WAMM;
                }
                case RecordTypeInts.WAUD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Complete) return null;
                    item.MeleeOrCreature = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.PrimedExplosive = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.DryFire = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.Idle = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.Equip = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.Unequip = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.FastEquip = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.WAUDUnknown2 = dataFrame.ReadInt32();
                    return (int)Weapon_FieldIndex.WAUDUnknown2;
                }
                case RecordTypeInts.WTUR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WTUR = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.WTUR;
                }
                case RecordTypeInts.WCHG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.ChargeFullPowerSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ChargeMinPowerPerShot = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ChargeCritBonus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.ChargeHoldInput = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.ChargingAttack = dataFrame.ReadBoolean();
                    return (int)Weapon_FieldIndex.ChargingAttack;
                }
                case RecordTypeInts.WDMG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.AttackDamage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MinRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MaxRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OutOfRangeDamageMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CritDamageMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CriticalHitSpell.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.CritEffectOnDeathOnly = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.HitBehavior = EnumBinaryTranslation<HitBehavior, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.Resistance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Skill.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown7 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown8 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WDMGUnknown9 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CritChanceIncMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Weapon_FieldIndex.CritChanceIncMult;
                }
                case RecordTypeInts.DAMA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DamageTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WeaponDamageType>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: WeaponDamageType.TryCreateFromBinary)
                        .CastExtendedList<WeaponDamageType>();
                    return (int)Weapon_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.WFIR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.FiringType = EnumBinaryTranslation<Weapon.FiringTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.BurstCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.RepeatableFire = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.AttackSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FireSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AttackDelaySeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BoltChargeSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.BoltAction = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.DisableShellCaseEject = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.ShotsPerSecond = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WFIRUnknown7 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.OverrideRateOfFire = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.TriggerThresholdPrimaryTrigger = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.WFIRUnknown10 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.TriggerThresholdSecondStage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.HasStagedTrigger = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.HasDualTrigger = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.BurstDelaySeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Weapon_FieldIndex.BurstDelaySeconds;
                }
                case RecordTypeInts.WFLG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.NonPlayable = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.PlayerOnly = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown1 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown2 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.CannotDrop = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.MinorCrime = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.NonHostile = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown3 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown4 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown5 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown6 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.WFLGUnknown7 = dataFrame.ReadBoolean();
                    return (int)Weapon_FieldIndex.WFLGUnknown7;
                }
                case RecordTypeInts.WGEN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.WGENUnknown1 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseValue = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AttackOxygenCost = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WeaponBarrel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.WeaponBarrel;
                }
                case RecordTypeInts.WABB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.General = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Weapon_FieldIndex.General;
                }
                case RecordTypeInts.WMEL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.WMELUnknown1 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashDamage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeReach = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeStagger = EnumBinaryTranslation<Stagger, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    return (int)Weapon_FieldIndex.MeleeStagger;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Power.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.PowerRechargeTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PowerRechargeDelay = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.ConsumeAmmo = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.PowerBonus.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.UsePower = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.QNAMUnknown1 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.QNAMUnknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.QNAMUnknown3 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.QNAMUnknown4.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.QNAMUnknown5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PowerConsumption.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.PowerConsumption;
                }
                case RecordTypeInts.WRLO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.WRLOUnknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ReloadSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.ReloadCharging = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.ReloadSingle = dataFrame.ReadBoolean();
                    return (int)Weapon_FieldIndex.ReloadSingle;
                }
                case RecordTypeInts.WRUM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WRUM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.WRUM;
                }
                case RecordTypeInts.WVAR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureValueMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureValueMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureInputMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureInputMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureAcceleration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ApertureDeceleration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceValueMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceValueMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceInputMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceInputMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceAcceleration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DistanceDeceleration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.UseVariableRange = dataFrame.ReadBoolean();
                    return (int)Weapon_FieldIndex.UseVariableRange;
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MO4S:
                case RecordTypeInts.MO4C:
                {
                    item.FirstPersonModel = Mutagen.Bethesda.Starfield.FirstPersonModel.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weapon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.WVIS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.WVISUnknown1 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.WVISUnknown2 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.WVISUnknown3 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorRemappingIndex = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ImageSpaceAdapter.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weapon_FieldIndex.ImageSpaceAdapter;
                }
                case RecordTypeInts.WTRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.WTRMUnknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.WTRMUnknown2 = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.WTRMUnknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WTRMUnknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.WTRMUnknown5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Weapon_FieldIndex.WTRMUnknown5;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class WeaponBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class WeaponBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IWeaponGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => WeaponCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWeapon);

        public Weapon.MajorFlag MajorFlags => (Weapon.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        private RangeInt32? _ObjectPaletteDefaultsLocation;
        public IObjectPaletteDefaultsGetter? ObjectPaletteDefaults => _ObjectPaletteDefaultsLocation.HasValue ? ObjectPaletteDefaultsBinaryOverlay.ObjectPaletteDefaultsFactory(_recordData.Slice(_ObjectPaletteDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        #region XALG
        private int? _XALGLocation;
        public UInt64? XALG => _XALGLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region ObjectEffect
        private int? _ObjectEffectLocation;
        public IFormLinkNullableGetter<IObjectEffectGetter> ObjectEffect => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IObjectEffectGetter>(_package, _recordData, _ObjectEffectLocation);
        #endregion
        #region EnchantmentAmount
        private int? _EnchantmentAmountLocation;
        public UInt16? EnchantmentAmount => _EnchantmentAmountLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnchantmentAmountLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _EquipmentTypeLocation);
        #endregion
        #region BlockBashImpactDataSet
        private int? _BlockBashImpactDataSetLocation;
        public IFormLinkNullableGetter<IImpactDataSetGetter> BlockBashImpactDataSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImpactDataSetGetter>(_package, _recordData, _BlockBashImpactDataSetLocation);
        #endregion
        #region AlternateBlockMaterial
        private int? _AlternateBlockMaterialLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> AlternateBlockMaterial => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _AlternateBlockMaterialLocation);
        #endregion
        public ISoundReferenceGetter? PickupSound { get; private set; }
        public ISoundReferenceGetter? DropdownSound { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region InstanceNaming
        private int? _InstanceNamingLocation;
        public IFormLinkNullableGetter<IInstanceNamingRulesGetter> InstanceNaming => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IInstanceNamingRulesGetter>(_package, _recordData, _InstanceNamingLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        public IReadOnlyList<IObjectTemplateGetter<Weapon.Property>>? ObjectTemplates { get; private set; }
        #region EmbeddedWeaponMod
        private int? _EmbeddedWeaponModLocation;
        public IFormLinkNullableGetter<IAObjectModificationGetter> EmbeddedWeaponMod => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAObjectModificationGetter>(_package, _recordData, _EmbeddedWeaponModLocation);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Byte>? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _WAIMLocation;
        #region SightedTransitionSeconds
        private int _SightedTransitionSecondsLocation => _WAIMLocation!.Value.Min;
        private bool _SightedTransitionSeconds_IsSet => _WAIMLocation.HasValue;
        public Single SightedTransitionSeconds => _SightedTransitionSeconds_IsSet ? _recordData.Slice(_SightedTransitionSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region AimDownSightTemplate
        private int _AimDownSightTemplateLocation => _WAIMLocation!.Value.Min + 0x4;
        private bool _AimDownSightTemplate_IsSet => _WAIMLocation.HasValue;
        public IFormLinkGetter<IZoomGetter> AimDownSightTemplate => _AimDownSightTemplate_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IZoomGetter>(_package, _recordData.Span.Slice(_AimDownSightTemplateLocation, 0x4), isSet: _AimDownSightTemplate_IsSet) : FormLink<IZoomGetter>.Null;
        #endregion
        #region AimModel
        private int _AimModelLocation => _WAIMLocation!.Value.Min + 0x8;
        private bool _AimModel_IsSet => _WAIMLocation.HasValue;
        public IFormLinkGetter<IAimModelGetter> AimModel => _AimModel_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IAimModelGetter>(_package, _recordData.Span.Slice(_AimModelLocation, 0x4), isSet: _AimModel_IsSet) : FormLink<IAimModelGetter>.Null;
        #endregion
        #region AccuracyBonus
        private int _AccuracyBonusLocation => _WAIMLocation!.Value.Min + 0xC;
        private bool _AccuracyBonus_IsSet => _WAIMLocation.HasValue;
        public Byte AccuracyBonus => _AccuracyBonus_IsSet ? _recordData.Span[_AccuracyBonusLocation] : default;
        #endregion
        #region HasScope
        private int _HasScopeLocation => _WAIMLocation!.Value.Min + 0xD;
        private bool _HasScope_IsSet => _WAIMLocation.HasValue;
        public Boolean HasScope => _HasScope_IsSet ? _recordData.Slice(_HasScopeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region AimAssistTemplate
        private int _AimAssistTemplateLocation => _WAIMLocation!.Value.Min + 0xE;
        private bool _AimAssistTemplate_IsSet => _WAIMLocation.HasValue;
        public IFormLinkGetter<IAimAssistModelGetter> AimAssistTemplate => _AimAssistTemplate_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IAimAssistModelGetter>(_package, _recordData.Span.Slice(_AimAssistTemplateLocation, 0x4), isSet: _AimAssistTemplate_IsSet) : FormLink<IAimAssistModelGetter>.Null;
        #endregion
        #region AimOpticalSightModel
        private int _AimOpticalSightModelLocation => _WAIMLocation!.Value.Min + 0x12;
        private bool _AimOpticalSightModel_IsSet => _WAIMLocation.HasValue;
        public IFormLinkGetter<IAimOpticalSightMarkerGetter> AimOpticalSightModel => _AimOpticalSightModel_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IAimOpticalSightMarkerGetter>(_package, _recordData.Span.Slice(_AimOpticalSightModelLocation, 0x4), isSet: _AimOpticalSightModel_IsSet) : FormLink<IAimOpticalSightMarkerGetter>.Null;
        #endregion
        #region MeleeAimAssistModel
        private int _MeleeAimAssistModelLocation => _WAIMLocation!.Value.Min + 0x16;
        private bool _MeleeAimAssistModel_IsSet => _WAIMLocation.HasValue;
        public IFormLinkGetter<IMeleeAimAssistModelGetter> MeleeAimAssistModel => _MeleeAimAssistModel_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IMeleeAimAssistModelGetter>(_package, _recordData.Span.Slice(_MeleeAimAssistModelLocation, 0x4), isSet: _MeleeAimAssistModel_IsSet) : FormLink<IMeleeAimAssistModelGetter>.Null;
        #endregion
        #region WAIMUnknown1
        private int _WAIMUnknown1Location => _WAIMLocation!.Value.Min + 0x1A;
        private bool _WAIMUnknown1_IsSet => _WAIMLocation.HasValue;
        public Byte WAIMUnknown1 => _WAIMUnknown1_IsSet ? _recordData.Span[_WAIMUnknown1Location] : default;
        #endregion
        #region WAIMUnknown2
        private int _WAIMUnknown2Location => _WAIMLocation!.Value.Min + 0x1B;
        private bool _WAIMUnknown2_IsSet => _WAIMLocation.HasValue;
        public Byte WAIMUnknown2 => _WAIMUnknown2_IsSet ? _recordData.Span[_WAIMUnknown2Location] : default;
        #endregion
        #region EnableMarkingTargets
        private int _EnableMarkingTargetsLocation => _WAIMLocation!.Value.Min + 0x1C;
        private bool _EnableMarkingTargets_IsSet => _WAIMLocation.HasValue;
        public Boolean EnableMarkingTargets => _EnableMarkingTargets_IsSet ? _recordData.Slice(_EnableMarkingTargetsLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ReticleType
        private int _ReticleTypeLocation => _WAIMLocation!.Value.Min + 0x1D;
        private bool _ReticleType_IsSet => _WAIMLocation.HasValue;
        public UInt32 ReticleType => _ReticleType_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ReticleTypeLocation, 4)) : default(UInt32);
        #endregion
        #region WAIMUnknown3
        private int _WAIMUnknown3Location => _WAIMLocation!.Value.Min + 0x21;
        private bool _WAIMUnknown3_IsSet => _WAIMLocation.HasValue;
        public Byte WAIMUnknown3 => _WAIMUnknown3_IsSet ? _recordData.Span[_WAIMUnknown3Location] : default;
        #endregion
        #region WAIMUnknown4
        private int _WAIMUnknown4Location => _WAIMLocation!.Value.Min + 0x22;
        private bool _WAIMUnknown4_IsSet => _WAIMLocation.HasValue;
        public Byte WAIMUnknown4 => _WAIMUnknown4_IsSet ? _recordData.Span[_WAIMUnknown4Location] : default;
        #endregion
        private RangeInt32? _WAM2Location;
        #region AmmoType
        private int _AmmoTypeLocation => _WAM2Location!.Value.Min;
        private bool _AmmoType_IsSet => _WAM2Location.HasValue;
        public IFormLinkGetter<IAmmunitionGetter> AmmoType => _AmmoType_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IAmmunitionGetter>(_package, _recordData.Span.Slice(_AmmoTypeLocation, 0x4), isSet: _AmmoType_IsSet) : FormLink<IAmmunitionGetter>.Null;
        #endregion
        #region AmmoCapacity
        private int _AmmoCapacityLocation => _WAM2Location!.Value.Min + 0x4;
        private bool _AmmoCapacity_IsSet => _WAM2Location.HasValue;
        public UInt32 AmmoCapacity => _AmmoCapacity_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_AmmoCapacityLocation, 4)) : default(UInt32);
        #endregion
        #region AmmoList
        private int _AmmoListLocation => _WAM2Location!.Value.Min + 0x8;
        private bool _AmmoList_IsSet => _WAM2Location.HasValue;
        public IFormLinkGetter<ILeveledItemGetter> AmmoList => _AmmoList_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILeveledItemGetter>(_package, _recordData.Span.Slice(_AmmoListLocation, 0x4), isSet: _AmmoList_IsSet) : FormLink<ILeveledItemGetter>.Null;
        #endregion
        #region OverrideProjectile
        private int _OverrideProjectileLocation => _WAM2Location!.Value.Min + 0xC;
        private bool _OverrideProjectile_IsSet => _WAM2Location.HasValue;
        public IFormLinkGetter<IProjectileGetter> OverrideProjectile => _OverrideProjectile_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IProjectileGetter>(_package, _recordData.Span.Slice(_OverrideProjectileLocation, 0x4), isSet: _OverrideProjectile_IsSet) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region OverrideShellCasing
        private int _OverrideShellCasingLocation => _WAM2Location!.Value.Min + 0x10;
        private bool _OverrideShellCasing_IsSet => _WAM2Location.HasValue;
        public IFormLinkGetter<IArtObjectGetter> OverrideShellCasing => _OverrideShellCasing_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_OverrideShellCasingLocation, 0x4), isSet: _OverrideShellCasing_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region ProjectilesCount
        private int _ProjectilesCountLocation => _WAM2Location!.Value.Min + 0x14;
        private bool _ProjectilesCount_IsSet => _WAM2Location.HasValue;
        public Byte ProjectilesCount => _ProjectilesCount_IsSet ? _recordData.Span[_ProjectilesCountLocation] : default;
        #endregion
        #region NpcsUseAmmo
        private int _NpcsUseAmmoLocation => _WAM2Location!.Value.Min + 0x15;
        private bool _NpcsUseAmmo_IsSet => _WAM2Location.HasValue;
        public Boolean NpcsUseAmmo => _NpcsUseAmmo_IsSet ? _recordData.Slice(_NpcsUseAmmoLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WAM2Unknown1
        private int _WAM2Unknown1Location => _WAM2Location!.Value.Min + 0x16;
        private bool _WAM2Unknown1_IsSet => _WAM2Location.HasValue;
        public Byte WAM2Unknown1 => _WAM2Unknown1_IsSet ? _recordData.Span[_WAM2Unknown1Location] : default;
        #endregion
        #region WAMM
        private int? _WAMMLocation;
        public ReadOnlyMemorySlice<Byte>? WAMM => _WAMMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WAMMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _WAUDLocation;
        #region MeleeOrCreature
        private int _MeleeOrCreatureLocation => _WAUDLocation!.Value.Min;
        private bool _MeleeOrCreature_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _MeleeOrCreature => _MeleeOrCreature_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_MeleeOrCreatureLocation), _package) : default;
        public ISoundReferenceGetter MeleeOrCreature => _MeleeOrCreature ?? new SoundReference();
        #endregion
        #region PrimedExplosive
        private int _PrimedExplosiveLocation => _WAUDLocation!.Value.Min + 0x28;
        private bool _PrimedExplosive_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _PrimedExplosive => _PrimedExplosive_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_PrimedExplosiveLocation), _package) : default;
        public ISoundReferenceGetter PrimedExplosive => _PrimedExplosive ?? new SoundReference();
        #endregion
        #region DryFire
        private int _DryFireLocation => _WAUDLocation!.Value.Min + 0x50;
        private bool _DryFire_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _DryFire => _DryFire_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_DryFireLocation), _package) : default;
        public ISoundReferenceGetter DryFire => _DryFire ?? new SoundReference();
        #endregion
        #region Idle
        private int _IdleLocation => _WAUDLocation!.Value.Min + 0x78;
        private bool _Idle_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _Idle => _Idle_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_IdleLocation), _package) : default;
        public ISoundReferenceGetter Idle => _Idle ?? new SoundReference();
        #endregion
        #region Equip
        private int _EquipLocation => _WAUDLocation!.Value.Min + 0xA0;
        private bool _Equip_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _Equip => _Equip_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_EquipLocation), _package) : default;
        public ISoundReferenceGetter Equip => _Equip ?? new SoundReference();
        #endregion
        #region Unequip
        private int _UnequipLocation => _WAUDLocation!.Value.Min + 0xC8;
        private bool _Unequip_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _Unequip => _Unequip_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_UnequipLocation), _package) : default;
        public ISoundReferenceGetter Unequip => _Unequip ?? new SoundReference();
        #endregion
        #region FastEquip
        private int _FastEquipLocation => _WAUDLocation!.Value.Min + 0xF0;
        private bool _FastEquip_IsSet => _WAUDLocation.HasValue;
        private ISoundReferenceGetter? _FastEquip => _FastEquip_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_FastEquipLocation), _package) : default;
        public ISoundReferenceGetter FastEquip => _FastEquip ?? new SoundReference();
        #endregion
        #region SoundLevel
        private int _SoundLevelLocation => _WAUDLocation!.Value.Min + 0x118;
        private bool _SoundLevel_IsSet => _WAUDLocation.HasValue;
        public SoundLevel SoundLevel => _SoundLevel_IsSet ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_SoundLevelLocation, 0x4)) : default;
        #endregion
        #region WAUDUnknown2
        private int _WAUDUnknown2Location => _WAUDLocation!.Value.Min + 0x11C;
        private bool _WAUDUnknown2_IsSet => _WAUDLocation.HasValue;
        public Int32 WAUDUnknown2 => _WAUDUnknown2_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_WAUDUnknown2Location, 4)) : default(Int32);
        #endregion
        #region WTUR
        private int? _WTURLocation;
        public ReadOnlyMemorySlice<Byte>? WTUR => _WTURLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WTURLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _WCHGLocation;
        #region ChargeFullPowerSeconds
        private int _ChargeFullPowerSecondsLocation => _WCHGLocation!.Value.Min;
        private bool _ChargeFullPowerSeconds_IsSet => _WCHGLocation.HasValue;
        public Single ChargeFullPowerSeconds => _ChargeFullPowerSeconds_IsSet ? _recordData.Slice(_ChargeFullPowerSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region ChargeMinPowerPerShot
        private int _ChargeMinPowerPerShotLocation => _WCHGLocation!.Value.Min + 0x4;
        private bool _ChargeMinPowerPerShot_IsSet => _WCHGLocation.HasValue;
        public Single ChargeMinPowerPerShot => _ChargeMinPowerPerShot_IsSet ? _recordData.Slice(_ChargeMinPowerPerShotLocation, 4).Float() : default(Single);
        #endregion
        #region ChargeCritBonus
        private int _ChargeCritBonusLocation => _WCHGLocation!.Value.Min + 0x8;
        private bool _ChargeCritBonus_IsSet => _WCHGLocation.HasValue;
        public Single ChargeCritBonus => _ChargeCritBonus_IsSet ? _recordData.Slice(_ChargeCritBonusLocation, 4).Float() : default(Single);
        #endregion
        #region ChargeHoldInput
        private int _ChargeHoldInputLocation => _WCHGLocation!.Value.Min + 0xC;
        private bool _ChargeHoldInput_IsSet => _WCHGLocation.HasValue;
        public Boolean ChargeHoldInput => _ChargeHoldInput_IsSet ? _recordData.Slice(_ChargeHoldInputLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ChargingAttack
        private int _ChargingAttackLocation => _WCHGLocation!.Value.Min + 0xD;
        private bool _ChargingAttack_IsSet => _WCHGLocation.HasValue;
        public Boolean ChargingAttack => _ChargingAttack_IsSet ? _recordData.Slice(_ChargingAttackLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        private RangeInt32? _WDMGLocation;
        #region AttackDamage
        private int _AttackDamageLocation => _WDMGLocation!.Value.Min;
        private bool _AttackDamage_IsSet => _WDMGLocation.HasValue;
        public Single AttackDamage => _AttackDamage_IsSet ? _recordData.Slice(_AttackDamageLocation, 4).Float() : default(Single);
        #endregion
        #region MinRange
        private int _MinRangeLocation => _WDMGLocation!.Value.Min + 0x4;
        private bool _MinRange_IsSet => _WDMGLocation.HasValue;
        public Single MinRange => _MinRange_IsSet ? _recordData.Slice(_MinRangeLocation, 4).Float() : default(Single);
        #endregion
        #region MaxRange
        private int _MaxRangeLocation => _WDMGLocation!.Value.Min + 0x8;
        private bool _MaxRange_IsSet => _WDMGLocation.HasValue;
        public Single MaxRange => _MaxRange_IsSet ? _recordData.Slice(_MaxRangeLocation, 4).Float() : default(Single);
        #endregion
        #region OutOfRangeDamageMult
        private int _OutOfRangeDamageMultLocation => _WDMGLocation!.Value.Min + 0xC;
        private bool _OutOfRangeDamageMult_IsSet => _WDMGLocation.HasValue;
        public Single OutOfRangeDamageMult => _OutOfRangeDamageMult_IsSet ? _recordData.Slice(_OutOfRangeDamageMultLocation, 4).Float() : default(Single);
        #endregion
        #region CritDamageMult
        private int _CritDamageMultLocation => _WDMGLocation!.Value.Min + 0x10;
        private bool _CritDamageMult_IsSet => _WDMGLocation.HasValue;
        public Single CritDamageMult => _CritDamageMult_IsSet ? _recordData.Slice(_CritDamageMultLocation, 4).Float() : default(Single);
        #endregion
        #region CriticalHitSpell
        private int _CriticalHitSpellLocation => _WDMGLocation!.Value.Min + 0x14;
        private bool _CriticalHitSpell_IsSet => _WDMGLocation.HasValue;
        public IFormLinkGetter<ISpellGetter> CriticalHitSpell => _CriticalHitSpell_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(_package, _recordData.Span.Slice(_CriticalHitSpellLocation, 0x4), isSet: _CriticalHitSpell_IsSet) : FormLink<ISpellGetter>.Null;
        #endregion
        #region CritEffectOnDeathOnly
        private int _CritEffectOnDeathOnlyLocation => _WDMGLocation!.Value.Min + 0x18;
        private bool _CritEffectOnDeathOnly_IsSet => _WDMGLocation.HasValue;
        public Boolean CritEffectOnDeathOnly => _CritEffectOnDeathOnly_IsSet ? _recordData.Slice(_CritEffectOnDeathOnlyLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region HitBehavior
        private int _HitBehaviorLocation => _WDMGLocation!.Value.Min + 0x19;
        private bool _HitBehavior_IsSet => _WDMGLocation.HasValue;
        public HitBehavior HitBehavior => _HitBehavior_IsSet ? (HitBehavior)_recordData.Span.Slice(_HitBehaviorLocation, 0x1)[0] : default;
        #endregion
        #region Resistance
        private int _ResistanceLocation => _WDMGLocation!.Value.Min + 0x1A;
        private bool _Resistance_IsSet => _WDMGLocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> Resistance => _Resistance_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ResistanceLocation, 0x4), isSet: _Resistance_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region Skill
        private int _SkillLocation => _WDMGLocation!.Value.Min + 0x1E;
        private bool _Skill_IsSet => _WDMGLocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> Skill => _Skill_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_SkillLocation, 0x4), isSet: _Skill_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region WDMGUnknown4
        private int _WDMGUnknown4Location => _WDMGLocation!.Value.Min + 0x22;
        private bool _WDMGUnknown4_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown4 => _WDMGUnknown4_IsSet ? _recordData.Slice(_WDMGUnknown4Location, 4).Float() : default(Single);
        #endregion
        #region WDMGUnknown5
        private int _WDMGUnknown5Location => _WDMGLocation!.Value.Min + 0x26;
        private bool _WDMGUnknown5_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown5 => _WDMGUnknown5_IsSet ? _recordData.Slice(_WDMGUnknown5Location, 4).Float() : default(Single);
        #endregion
        #region WDMGUnknown6
        private int _WDMGUnknown6Location => _WDMGLocation!.Value.Min + 0x2A;
        private bool _WDMGUnknown6_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown6 => _WDMGUnknown6_IsSet ? _recordData.Slice(_WDMGUnknown6Location, 4).Float() : default(Single);
        #endregion
        #region WDMGUnknown7
        private int _WDMGUnknown7Location => _WDMGLocation!.Value.Min + 0x2E;
        private bool _WDMGUnknown7_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown7 => _WDMGUnknown7_IsSet ? _recordData.Slice(_WDMGUnknown7Location, 4).Float() : default(Single);
        #endregion
        #region WDMGUnknown8
        private int _WDMGUnknown8Location => _WDMGLocation!.Value.Min + 0x32;
        private bool _WDMGUnknown8_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown8 => _WDMGUnknown8_IsSet ? _recordData.Slice(_WDMGUnknown8Location, 4).Float() : default(Single);
        #endregion
        #region WDMGUnknown9
        private int _WDMGUnknown9Location => _WDMGLocation!.Value.Min + 0x36;
        private bool _WDMGUnknown9_IsSet => _WDMGLocation.HasValue;
        public Single WDMGUnknown9 => _WDMGUnknown9_IsSet ? _recordData.Slice(_WDMGUnknown9Location, 4).Float() : default(Single);
        #endregion
        #region CritChanceIncMult
        private int _CritChanceIncMultLocation => _WDMGLocation!.Value.Min + 0x3A;
        private bool _CritChanceIncMult_IsSet => _WDMGLocation.HasValue;
        public Single CritChanceIncMult => _CritChanceIncMult_IsSet ? _recordData.Slice(_CritChanceIncMultLocation, 4).Float() : default(Single);
        #endregion
        public IReadOnlyList<IWeaponDamageTypeGetter>? DamageTypes { get; private set; }
        private RangeInt32? _WFIRLocation;
        #region FiringType
        private int _FiringTypeLocation => _WFIRLocation!.Value.Min;
        private bool _FiringType_IsSet => _WFIRLocation.HasValue;
        public Weapon.FiringTypeEnum FiringType => _FiringType_IsSet ? (Weapon.FiringTypeEnum)_recordData.Span.Slice(_FiringTypeLocation, 0x1)[0] : default;
        #endregion
        #region BurstCount
        private int _BurstCountLocation => _WFIRLocation!.Value.Min + 0x1;
        private bool _BurstCount_IsSet => _WFIRLocation.HasValue;
        public Byte BurstCount => _BurstCount_IsSet ? _recordData.Span[_BurstCountLocation] : default;
        #endregion
        #region RepeatableFire
        private int _RepeatableFireLocation => _WFIRLocation!.Value.Min + 0x2;
        private bool _RepeatableFire_IsSet => _WFIRLocation.HasValue;
        public Boolean RepeatableFire => _RepeatableFire_IsSet ? _recordData.Slice(_RepeatableFireLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region AttackSeconds
        private int _AttackSecondsLocation => _WFIRLocation!.Value.Min + 0x3;
        private bool _AttackSeconds_IsSet => _WFIRLocation.HasValue;
        public Single AttackSeconds => _AttackSeconds_IsSet ? _recordData.Slice(_AttackSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region FireSeconds
        private int _FireSecondsLocation => _WFIRLocation!.Value.Min + 0x7;
        private bool _FireSeconds_IsSet => _WFIRLocation.HasValue;
        public Single FireSeconds => _FireSeconds_IsSet ? _recordData.Slice(_FireSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region AttackDelaySeconds
        private int _AttackDelaySecondsLocation => _WFIRLocation!.Value.Min + 0xB;
        private bool _AttackDelaySeconds_IsSet => _WFIRLocation.HasValue;
        public Single AttackDelaySeconds => _AttackDelaySeconds_IsSet ? _recordData.Slice(_AttackDelaySecondsLocation, 4).Float() : default(Single);
        #endregion
        #region BoltChargeSeconds
        private int _BoltChargeSecondsLocation => _WFIRLocation!.Value.Min + 0xF;
        private bool _BoltChargeSeconds_IsSet => _WFIRLocation.HasValue;
        public Single BoltChargeSeconds => _BoltChargeSeconds_IsSet ? _recordData.Slice(_BoltChargeSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region BoltAction
        private int _BoltActionLocation => _WFIRLocation!.Value.Min + 0x13;
        private bool _BoltAction_IsSet => _WFIRLocation.HasValue;
        public Boolean BoltAction => _BoltAction_IsSet ? _recordData.Slice(_BoltActionLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region DisableShellCaseEject
        private int _DisableShellCaseEjectLocation => _WFIRLocation!.Value.Min + 0x14;
        private bool _DisableShellCaseEject_IsSet => _WFIRLocation.HasValue;
        public Boolean DisableShellCaseEject => _DisableShellCaseEject_IsSet ? _recordData.Slice(_DisableShellCaseEjectLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ShotsPerSecond
        private int _ShotsPerSecondLocation => _WFIRLocation!.Value.Min + 0x15;
        private bool _ShotsPerSecond_IsSet => _WFIRLocation.HasValue;
        public Single ShotsPerSecond => _ShotsPerSecond_IsSet ? _recordData.Slice(_ShotsPerSecondLocation, 4).Float() : default(Single);
        #endregion
        #region WFIRUnknown7
        private int _WFIRUnknown7Location => _WFIRLocation!.Value.Min + 0x19;
        private bool _WFIRUnknown7_IsSet => _WFIRLocation.HasValue;
        public Single WFIRUnknown7 => _WFIRUnknown7_IsSet ? _recordData.Slice(_WFIRUnknown7Location, 4).Float() : default(Single);
        #endregion
        #region OverrideRateOfFire
        private int _OverrideRateOfFireLocation => _WFIRLocation!.Value.Min + 0x1D;
        private bool _OverrideRateOfFire_IsSet => _WFIRLocation.HasValue;
        public Boolean OverrideRateOfFire => _OverrideRateOfFire_IsSet ? _recordData.Slice(_OverrideRateOfFireLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region TriggerThresholdPrimaryTrigger
        private int _TriggerThresholdPrimaryTriggerLocation => _WFIRLocation!.Value.Min + 0x1E;
        private bool _TriggerThresholdPrimaryTrigger_IsSet => _WFIRLocation.HasValue;
        public Single TriggerThresholdPrimaryTrigger => _TriggerThresholdPrimaryTrigger_IsSet ? _recordData.Slice(_TriggerThresholdPrimaryTriggerLocation, 4).Float() : default(Single);
        #endregion
        #region WFIRUnknown10
        private int _WFIRUnknown10Location => _WFIRLocation!.Value.Min + 0x22;
        private bool _WFIRUnknown10_IsSet => _WFIRLocation.HasValue;
        public Byte WFIRUnknown10 => _WFIRUnknown10_IsSet ? _recordData.Span[_WFIRUnknown10Location] : default;
        #endregion
        #region TriggerThresholdSecondStage
        private int _TriggerThresholdSecondStageLocation => _WFIRLocation!.Value.Min + 0x23;
        private bool _TriggerThresholdSecondStage_IsSet => _WFIRLocation.HasValue;
        public Single TriggerThresholdSecondStage => _TriggerThresholdSecondStage_IsSet ? _recordData.Slice(_TriggerThresholdSecondStageLocation, 4).Float() : default(Single);
        #endregion
        #region HasStagedTrigger
        private int _HasStagedTriggerLocation => _WFIRLocation!.Value.Min + 0x27;
        private bool _HasStagedTrigger_IsSet => _WFIRLocation.HasValue;
        public Boolean HasStagedTrigger => _HasStagedTrigger_IsSet ? _recordData.Slice(_HasStagedTriggerLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region HasDualTrigger
        private int _HasDualTriggerLocation => _WFIRLocation!.Value.Min + 0x28;
        private bool _HasDualTrigger_IsSet => _WFIRLocation.HasValue;
        public Boolean HasDualTrigger => _HasDualTrigger_IsSet ? _recordData.Slice(_HasDualTriggerLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region BurstDelaySeconds
        private int _BurstDelaySecondsLocation => _WFIRLocation!.Value.Min + 0x29;
        private bool _BurstDelaySeconds_IsSet => _WFIRLocation.HasValue;
        public Single BurstDelaySeconds => _BurstDelaySeconds_IsSet ? _recordData.Slice(_BurstDelaySecondsLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _WFLGLocation;
        #region NonPlayable
        private int _NonPlayableLocation => _WFLGLocation!.Value.Min;
        private bool _NonPlayable_IsSet => _WFLGLocation.HasValue;
        public Boolean NonPlayable => _NonPlayable_IsSet ? _recordData.Slice(_NonPlayableLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region PlayerOnly
        private int _PlayerOnlyLocation => _WFLGLocation!.Value.Min + 0x1;
        private bool _PlayerOnly_IsSet => _WFLGLocation.HasValue;
        public Boolean PlayerOnly => _PlayerOnly_IsSet ? _recordData.Slice(_PlayerOnlyLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown1
        private int _WFLGUnknown1Location => _WFLGLocation!.Value.Min + 0x2;
        private bool _WFLGUnknown1_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown1 => _WFLGUnknown1_IsSet ? _recordData.Slice(_WFLGUnknown1Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown2
        private int _WFLGUnknown2Location => _WFLGLocation!.Value.Min + 0x3;
        private bool _WFLGUnknown2_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown2 => _WFLGUnknown2_IsSet ? _recordData.Slice(_WFLGUnknown2Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region CannotDrop
        private int _CannotDropLocation => _WFLGLocation!.Value.Min + 0x4;
        private bool _CannotDrop_IsSet => _WFLGLocation.HasValue;
        public Boolean CannotDrop => _CannotDrop_IsSet ? _recordData.Slice(_CannotDropLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region MinorCrime
        private int _MinorCrimeLocation => _WFLGLocation!.Value.Min + 0x5;
        private bool _MinorCrime_IsSet => _WFLGLocation.HasValue;
        public Boolean MinorCrime => _MinorCrime_IsSet ? _recordData.Slice(_MinorCrimeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region NonHostile
        private int _NonHostileLocation => _WFLGLocation!.Value.Min + 0x6;
        private bool _NonHostile_IsSet => _WFLGLocation.HasValue;
        public Boolean NonHostile => _NonHostile_IsSet ? _recordData.Slice(_NonHostileLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown3
        private int _WFLGUnknown3Location => _WFLGLocation!.Value.Min + 0x7;
        private bool _WFLGUnknown3_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown3 => _WFLGUnknown3_IsSet ? _recordData.Slice(_WFLGUnknown3Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown4
        private int _WFLGUnknown4Location => _WFLGLocation!.Value.Min + 0x8;
        private bool _WFLGUnknown4_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown4 => _WFLGUnknown4_IsSet ? _recordData.Slice(_WFLGUnknown4Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown5
        private int _WFLGUnknown5Location => _WFLGLocation!.Value.Min + 0x9;
        private bool _WFLGUnknown5_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown5 => _WFLGUnknown5_IsSet ? _recordData.Slice(_WFLGUnknown5Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown6
        private int _WFLGUnknown6Location => _WFLGLocation!.Value.Min + 0xA;
        private bool _WFLGUnknown6_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown6 => _WFLGUnknown6_IsSet ? _recordData.Slice(_WFLGUnknown6Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WFLGUnknown7
        private int _WFLGUnknown7Location => _WFLGLocation!.Value.Min + 0xB;
        private bool _WFLGUnknown7_IsSet => _WFLGLocation.HasValue;
        public Boolean WFLGUnknown7 => _WFLGUnknown7_IsSet ? _recordData.Slice(_WFLGUnknown7Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        private RangeInt32? _WGENLocation;
        #region WGENUnknown1
        private int _WGENUnknown1Location => _WGENLocation!.Value.Min;
        private bool _WGENUnknown1_IsSet => _WGENLocation.HasValue;
        public UInt32 WGENUnknown1 => _WGENUnknown1_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WGENUnknown1Location, 4)) : default(UInt32);
        #endregion
        #region BaseWeight
        private int _BaseWeightLocation => _WGENLocation!.Value.Min + 0x4;
        private bool _BaseWeight_IsSet => _WGENLocation.HasValue;
        public Single BaseWeight => _BaseWeight_IsSet ? _recordData.Slice(_BaseWeightLocation, 4).Float() : default(Single);
        #endregion
        #region BaseValue
        private int _BaseValueLocation => _WGENLocation!.Value.Min + 0x8;
        private bool _BaseValue_IsSet => _WGENLocation.HasValue;
        public UInt32 BaseValue => _BaseValue_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_BaseValueLocation, 4)) : default(UInt32);
        #endregion
        #region BaseSpeed
        private int _BaseSpeedLocation => _WGENLocation!.Value.Min + 0xC;
        private bool _BaseSpeed_IsSet => _WGENLocation.HasValue;
        public Single BaseSpeed => _BaseSpeed_IsSet ? _recordData.Slice(_BaseSpeedLocation, 4).Float() : default(Single);
        #endregion
        #region AttackOxygenCost
        private int _AttackOxygenCostLocation => _WGENLocation!.Value.Min + 0x10;
        private bool _AttackOxygenCost_IsSet => _WGENLocation.HasValue;
        public Single AttackOxygenCost => _AttackOxygenCost_IsSet ? _recordData.Slice(_AttackOxygenCostLocation, 4).Float() : default(Single);
        #endregion
        #region WeaponBarrel
        private int _WeaponBarrelLocation => _WGENLocation!.Value.Min + 0x14;
        private bool _WeaponBarrel_IsSet => _WGENLocation.HasValue;
        public IFormLinkGetter<IWeaponBarrelModelGetter> WeaponBarrel => _WeaponBarrel_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IWeaponBarrelModelGetter>(_package, _recordData.Span.Slice(_WeaponBarrelLocation, 0x4), isSet: _WeaponBarrel_IsSet) : FormLink<IWeaponBarrelModelGetter>.Null;
        #endregion
        #region General
        private int? _GeneralLocation;
        public ITranslatedStringGetter? General => _GeneralLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GeneralLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        private RangeInt32? _WMELLocation;
        #region WMELUnknown1
        private int _WMELUnknown1Location => _WMELLocation!.Value.Min;
        private bool _WMELUnknown1_IsSet => _WMELLocation.HasValue;
        public Byte WMELUnknown1 => _WMELUnknown1_IsSet ? _recordData.Span[_WMELUnknown1Location] : default;
        #endregion
        #region MeleeBashDamage
        private int _MeleeBashDamageLocation => _WMELLocation!.Value.Min + 0x1;
        private bool _MeleeBashDamage_IsSet => _WMELLocation.HasValue;
        public Single MeleeBashDamage => _MeleeBashDamage_IsSet ? _recordData.Slice(_MeleeBashDamageLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeReach
        private int _MeleeReachLocation => _WMELLocation!.Value.Min + 0x5;
        private bool _MeleeReach_IsSet => _WMELLocation.HasValue;
        public Single MeleeReach => _MeleeReach_IsSet ? _recordData.Slice(_MeleeReachLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeStagger
        private int _MeleeStaggerLocation => _WMELLocation!.Value.Min + 0x9;
        private bool _MeleeStagger_IsSet => _WMELLocation.HasValue;
        public Stagger MeleeStagger => _MeleeStagger_IsSet ? (Stagger)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MeleeStaggerLocation, 0x4)) : default;
        #endregion
        private RangeInt32? _QNAMLocation;
        #region Power
        private int _PowerLocation => _QNAMLocation!.Value.Min;
        private bool _Power_IsSet => _QNAMLocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> Power => _Power_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_PowerLocation, 0x4), isSet: _Power_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region PowerRechargeTime
        private int _PowerRechargeTimeLocation => _QNAMLocation!.Value.Min + 0x4;
        private bool _PowerRechargeTime_IsSet => _QNAMLocation.HasValue;
        public Single PowerRechargeTime => _PowerRechargeTime_IsSet ? _recordData.Slice(_PowerRechargeTimeLocation, 4).Float() : default(Single);
        #endregion
        #region PowerRechargeDelay
        private int _PowerRechargeDelayLocation => _QNAMLocation!.Value.Min + 0x8;
        private bool _PowerRechargeDelay_IsSet => _QNAMLocation.HasValue;
        public Single PowerRechargeDelay => _PowerRechargeDelay_IsSet ? _recordData.Slice(_PowerRechargeDelayLocation, 4).Float() : default(Single);
        #endregion
        #region ConsumeAmmo
        private int _ConsumeAmmoLocation => _QNAMLocation!.Value.Min + 0xC;
        private bool _ConsumeAmmo_IsSet => _QNAMLocation.HasValue;
        public Boolean ConsumeAmmo => _ConsumeAmmo_IsSet ? _recordData.Slice(_ConsumeAmmoLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region PowerBonus
        private int _PowerBonusLocation => _QNAMLocation!.Value.Min + 0xD;
        private bool _PowerBonus_IsSet => _QNAMLocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> PowerBonus => _PowerBonus_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_PowerBonusLocation, 0x4), isSet: _PowerBonus_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region UsePower
        private int _UsePowerLocation => _QNAMLocation!.Value.Min + 0x11;
        private bool _UsePower_IsSet => _QNAMLocation.HasValue;
        public Boolean UsePower => _UsePower_IsSet ? _recordData.Slice(_UsePowerLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region QNAMUnknown1
        private int _QNAMUnknown1Location => _QNAMLocation!.Value.Min + 0x12;
        private bool _QNAMUnknown1_IsSet => _QNAMLocation.HasValue;
        public Byte QNAMUnknown1 => _QNAMUnknown1_IsSet ? _recordData.Span[_QNAMUnknown1Location] : default;
        #endregion
        #region QNAMUnknown2
        private int _QNAMUnknown2Location => _QNAMLocation!.Value.Min + 0x13;
        private bool _QNAMUnknown2_IsSet => _QNAMLocation.HasValue;
        public Single QNAMUnknown2 => _QNAMUnknown2_IsSet ? _recordData.Slice(_QNAMUnknown2Location, 4).Float() : default(Single);
        #endregion
        #region QNAMUnknown3
        private int _QNAMUnknown3Location => _QNAMLocation!.Value.Min + 0x17;
        private bool _QNAMUnknown3_IsSet => _QNAMLocation.HasValue;
        public Byte QNAMUnknown3 => _QNAMUnknown3_IsSet ? _recordData.Span[_QNAMUnknown3Location] : default;
        #endregion
        #region QNAMUnknown4
        private int _QNAMUnknown4Location => _QNAMLocation!.Value.Min + 0x18;
        private bool _QNAMUnknown4_IsSet => _QNAMLocation.HasValue;
        public IFormLinkGetter<ICurveTableGetter> QNAMUnknown4 => _QNAMUnknown4_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ICurveTableGetter>(_package, _recordData.Span.Slice(_QNAMUnknown4Location, 0x4), isSet: _QNAMUnknown4_IsSet) : FormLink<ICurveTableGetter>.Null;
        #endregion
        #region QNAMUnknown5
        private int _QNAMUnknown5Location => _QNAMLocation!.Value.Min + 0x1C;
        private bool _QNAMUnknown5_IsSet => _QNAMLocation.HasValue;
        public Single QNAMUnknown5 => _QNAMUnknown5_IsSet ? _recordData.Slice(_QNAMUnknown5Location, 4).Float() : default(Single);
        #endregion
        #region PowerConsumption
        private int _PowerConsumptionLocation => _QNAMLocation!.Value.Min + 0x20;
        private bool _PowerConsumption_IsSet => _QNAMLocation.HasValue;
        public IFormLinkGetter<ICurveTableGetter> PowerConsumption => _PowerConsumption_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ICurveTableGetter>(_package, _recordData.Span.Slice(_PowerConsumptionLocation, 0x4), isSet: _PowerConsumption_IsSet) : FormLink<ICurveTableGetter>.Null;
        #endregion
        private RangeInt32? _WRLOLocation;
        #region WRLOUnknown1
        private int _WRLOUnknown1Location => _WRLOLocation!.Value.Min;
        private bool _WRLOUnknown1_IsSet => _WRLOLocation.HasValue;
        public Single WRLOUnknown1 => _WRLOUnknown1_IsSet ? _recordData.Slice(_WRLOUnknown1Location, 4).Float() : default(Single);
        #endregion
        #region ReloadSpeed
        private int _ReloadSpeedLocation => _WRLOLocation!.Value.Min + 0x4;
        private bool _ReloadSpeed_IsSet => _WRLOLocation.HasValue;
        public Single ReloadSpeed => _ReloadSpeed_IsSet ? _recordData.Slice(_ReloadSpeedLocation, 4).Float() : default(Single);
        #endregion
        #region ReloadCharging
        private int _ReloadChargingLocation => _WRLOLocation!.Value.Min + 0x8;
        private bool _ReloadCharging_IsSet => _WRLOLocation.HasValue;
        public Boolean ReloadCharging => _ReloadCharging_IsSet ? _recordData.Slice(_ReloadChargingLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ReloadSingle
        private int _ReloadSingleLocation => _WRLOLocation!.Value.Min + 0x9;
        private bool _ReloadSingle_IsSet => _WRLOLocation.HasValue;
        public Boolean ReloadSingle => _ReloadSingle_IsSet ? _recordData.Slice(_ReloadSingleLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region WRUM
        private int? _WRUMLocation;
        public ReadOnlyMemorySlice<Byte>? WRUM => _WRUMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WRUMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _WVARLocation;
        #region ApertureValueMin
        private int _ApertureValueMinLocation => _WVARLocation!.Value.Min;
        private bool _ApertureValueMin_IsSet => _WVARLocation.HasValue;
        public Single ApertureValueMin => _ApertureValueMin_IsSet ? _recordData.Slice(_ApertureValueMinLocation, 4).Float() : default(Single);
        #endregion
        #region ApertureValueMax
        private int _ApertureValueMaxLocation => _WVARLocation!.Value.Min + 0x4;
        private bool _ApertureValueMax_IsSet => _WVARLocation.HasValue;
        public Single ApertureValueMax => _ApertureValueMax_IsSet ? _recordData.Slice(_ApertureValueMaxLocation, 4).Float() : default(Single);
        #endregion
        #region ApertureInputMin
        private int _ApertureInputMinLocation => _WVARLocation!.Value.Min + 0x8;
        private bool _ApertureInputMin_IsSet => _WVARLocation.HasValue;
        public Single ApertureInputMin => _ApertureInputMin_IsSet ? _recordData.Slice(_ApertureInputMinLocation, 4).Float() : default(Single);
        #endregion
        #region ApertureInputMax
        private int _ApertureInputMaxLocation => _WVARLocation!.Value.Min + 0xC;
        private bool _ApertureInputMax_IsSet => _WVARLocation.HasValue;
        public Single ApertureInputMax => _ApertureInputMax_IsSet ? _recordData.Slice(_ApertureInputMaxLocation, 4).Float() : default(Single);
        #endregion
        #region ApertureAcceleration
        private int _ApertureAccelerationLocation => _WVARLocation!.Value.Min + 0x10;
        private bool _ApertureAcceleration_IsSet => _WVARLocation.HasValue;
        public Single ApertureAcceleration => _ApertureAcceleration_IsSet ? _recordData.Slice(_ApertureAccelerationLocation, 4).Float() : default(Single);
        #endregion
        #region ApertureDeceleration
        private int _ApertureDecelerationLocation => _WVARLocation!.Value.Min + 0x14;
        private bool _ApertureDeceleration_IsSet => _WVARLocation.HasValue;
        public Single ApertureDeceleration => _ApertureDeceleration_IsSet ? _recordData.Slice(_ApertureDecelerationLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceValueMin
        private int _DistanceValueMinLocation => _WVARLocation!.Value.Min + 0x18;
        private bool _DistanceValueMin_IsSet => _WVARLocation.HasValue;
        public Single DistanceValueMin => _DistanceValueMin_IsSet ? _recordData.Slice(_DistanceValueMinLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceValueMax
        private int _DistanceValueMaxLocation => _WVARLocation!.Value.Min + 0x1C;
        private bool _DistanceValueMax_IsSet => _WVARLocation.HasValue;
        public Single DistanceValueMax => _DistanceValueMax_IsSet ? _recordData.Slice(_DistanceValueMaxLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceInputMin
        private int _DistanceInputMinLocation => _WVARLocation!.Value.Min + 0x20;
        private bool _DistanceInputMin_IsSet => _WVARLocation.HasValue;
        public Single DistanceInputMin => _DistanceInputMin_IsSet ? _recordData.Slice(_DistanceInputMinLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceInputMax
        private int _DistanceInputMaxLocation => _WVARLocation!.Value.Min + 0x24;
        private bool _DistanceInputMax_IsSet => _WVARLocation.HasValue;
        public Single DistanceInputMax => _DistanceInputMax_IsSet ? _recordData.Slice(_DistanceInputMaxLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceAcceleration
        private int _DistanceAccelerationLocation => _WVARLocation!.Value.Min + 0x28;
        private bool _DistanceAcceleration_IsSet => _WVARLocation.HasValue;
        public Single DistanceAcceleration => _DistanceAcceleration_IsSet ? _recordData.Slice(_DistanceAccelerationLocation, 4).Float() : default(Single);
        #endregion
        #region DistanceDeceleration
        private int _DistanceDecelerationLocation => _WVARLocation!.Value.Min + 0x2C;
        private bool _DistanceDeceleration_IsSet => _WVARLocation.HasValue;
        public Single DistanceDeceleration => _DistanceDeceleration_IsSet ? _recordData.Slice(_DistanceDecelerationLocation, 4).Float() : default(Single);
        #endregion
        #region UseVariableRange
        private int _UseVariableRangeLocation => _WVARLocation!.Value.Min + 0x30;
        private bool _UseVariableRange_IsSet => _WVARLocation.HasValue;
        public Boolean UseVariableRange => _UseVariableRange_IsSet ? _recordData.Slice(_UseVariableRangeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        public IFirstPersonModelGetter? FirstPersonModel { get; private set; }
        private RangeInt32? _WVISLocation;
        #region WVISUnknown1
        private int _WVISUnknown1Location => _WVISLocation!.Value.Min;
        private bool _WVISUnknown1_IsSet => _WVISLocation.HasValue;
        public UInt32 WVISUnknown1 => _WVISUnknown1_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WVISUnknown1Location, 4)) : default(UInt32);
        #endregion
        #region WVISUnknown2
        private int _WVISUnknown2Location => _WVISLocation!.Value.Min + 0x4;
        private bool _WVISUnknown2_IsSet => _WVISLocation.HasValue;
        public UInt32 WVISUnknown2 => _WVISUnknown2_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WVISUnknown2Location, 4)) : default(UInt32);
        #endregion
        #region WVISUnknown3
        private int _WVISUnknown3Location => _WVISLocation!.Value.Min + 0x8;
        private bool _WVISUnknown3_IsSet => _WVISLocation.HasValue;
        public UInt32 WVISUnknown3 => _WVISUnknown3_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WVISUnknown3Location, 4)) : default(UInt32);
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _WVISLocation!.Value.Min + 0xC;
        private bool _ImpactDataSet_IsSet => _WVISLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ImpactDataSetLocation, 0x4), isSet: _ImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ColorRemappingIndex
        private int _ColorRemappingIndexLocation => _WVISLocation!.Value.Min + 0x10;
        private bool _ColorRemappingIndex_IsSet => _WVISLocation.HasValue;
        public Single ColorRemappingIndex => _ColorRemappingIndex_IsSet ? _recordData.Slice(_ColorRemappingIndexLocation, 4).Float() : default(Single);
        #endregion
        #region ImageSpaceAdapter
        private int _ImageSpaceAdapterLocation => _WVISLocation!.Value.Min + 0x14;
        private bool _ImageSpaceAdapter_IsSet => _WVISLocation.HasValue;
        public IFormLinkGetter<IImageSpaceAdapterGetter> ImageSpaceAdapter => _ImageSpaceAdapter_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImageSpaceAdapterGetter>(_package, _recordData.Span.Slice(_ImageSpaceAdapterLocation, 0x4), isSet: _ImageSpaceAdapter_IsSet) : FormLink<IImageSpaceAdapterGetter>.Null;
        #endregion
        private RangeInt32? _WTRMLocation;
        #region WTRMUnknown1
        private int _WTRMUnknown1Location => _WTRMLocation!.Value.Min;
        private bool _WTRMUnknown1_IsSet => _WTRMLocation.HasValue;
        public Single WTRMUnknown1 => _WTRMUnknown1_IsSet ? _recordData.Slice(_WTRMUnknown1Location, 4).Float() : default(Single);
        #endregion
        #region WTRMUnknown2
        private int _WTRMUnknown2Location => _WTRMLocation!.Value.Min + 0x4;
        private bool _WTRMUnknown2_IsSet => _WTRMLocation.HasValue;
        public Byte WTRMUnknown2 => _WTRMUnknown2_IsSet ? _recordData.Span[_WTRMUnknown2Location] : default;
        #endregion
        #region WTRMUnknown3
        private int _WTRMUnknown3Location => _WTRMLocation!.Value.Min + 0x5;
        private bool _WTRMUnknown3_IsSet => _WTRMLocation.HasValue;
        public Single WTRMUnknown3 => _WTRMUnknown3_IsSet ? _recordData.Slice(_WTRMUnknown3Location, 4).Float() : default(Single);
        #endregion
        #region WTRMUnknown4
        private int _WTRMUnknown4Location => _WTRMLocation!.Value.Min + 0x9;
        private bool _WTRMUnknown4_IsSet => _WTRMLocation.HasValue;
        public Single WTRMUnknown4 => _WTRMUnknown4_IsSet ? _recordData.Slice(_WTRMUnknown4Location, 4).Float() : default(Single);
        #endregion
        #region WTRMUnknown5
        private int _WTRMUnknown5Location => _WTRMLocation!.Value.Min + 0xD;
        private bool _WTRMUnknown5_IsSet => _WTRMLocation.HasValue;
        public Single WTRMUnknown5 => _WTRMUnknown5_IsSet ? _recordData.Slice(_WTRMUnknown5Location, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeaponBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWeaponGetter WeaponFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WeaponBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWeaponGetter WeaponFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WeaponFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Weapon_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Weapon_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPaletteDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Weapon_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Weapon_FieldIndex.Transforms;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Weapon_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                case RecordTypeInts.FLLD:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Weapon_FieldIndex.Name)
                    {
                        this.Model = ModelBinaryOverlay.ModelFactory(
                            stream: stream,
                            package: _package,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)Weapon_FieldIndex.Model, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Weapon_FieldIndex.UseVariableRange)
                    {
                        this.FirstPersonModel = FirstPersonModelBinaryOverlay.FirstPersonModelFactory(
                            stream: stream,
                            package: _package,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)Weapon_FieldIndex.FirstPersonModel, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.Model = ModelBinaryOverlay.ModelFactory(
                                    stream: stream,
                                    package: _package,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)Weapon_FieldIndex.Model, type);
                            }
                            case 1:
                            {
                                this.FirstPersonModel = FirstPersonModelBinaryOverlay.FirstPersonModelFactory(
                                    stream: stream,
                                    package: _package,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)Weapon_FieldIndex.FirstPersonModel, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.EITM:
                {
                    _ObjectEffectLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    _EnchantmentAmountLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    _BlockBashImpactDataSetLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.BlockBashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    _AlternateBlockMaterialLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.PUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.PickupSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weapon_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.DropdownSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weapon_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Weapon_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Description;
                }
                case RecordTypeInts.INRD:
                {
                    _InstanceNamingLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.InstanceNaming;
                }
                case RecordTypeInts.APPR:
                {
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Weapon_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<IObjectTemplateGetter<Weapon.Property>>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ObjectTemplate_Registration.TriggerSpecs,
                        countType: RecordTypes.OBTE,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<Weapon.Property>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Weapon_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.STOP:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.NNAM:
                {
                    _EmbeddedWeaponModLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EmbeddedWeaponMod;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.BNAM;
                }
                case RecordTypeInts.WAIM:
                {
                    _WAIMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WAIMUnknown4;
                }
                case RecordTypeInts.WAM2:
                {
                    _WAM2Location = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WAM2Unknown1;
                }
                case RecordTypeInts.WAMM:
                {
                    _WAMMLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.WAMM;
                }
                case RecordTypeInts.WAUD:
                {
                    _WAUDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WAUDUnknown2;
                }
                case RecordTypeInts.WTUR:
                {
                    _WTURLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.WTUR;
                }
                case RecordTypeInts.WCHG:
                {
                    _WCHGLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.ChargingAttack;
                }
                case RecordTypeInts.WDMG:
                {
                    _WDMGLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.CritChanceIncMult;
                }
                case RecordTypeInts.DAMA:
                {
                    this.DamageTypes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IWeaponDamageTypeGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => WeaponDamageTypeBinaryOverlay.WeaponDamageTypeFactory(s, p));
                    return (int)Weapon_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.WFIR:
                {
                    _WFIRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.BurstDelaySeconds;
                }
                case RecordTypeInts.WFLG:
                {
                    _WFLGLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WFLGUnknown7;
                }
                case RecordTypeInts.WGEN:
                {
                    _WGENLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WeaponBarrel;
                }
                case RecordTypeInts.WABB:
                {
                    _GeneralLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.General;
                }
                case RecordTypeInts.WMEL:
                {
                    _WMELLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.MeleeStagger;
                }
                case RecordTypeInts.QNAM:
                {
                    _QNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.PowerConsumption;
                }
                case RecordTypeInts.WRLO:
                {
                    _WRLOLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.ReloadSingle;
                }
                case RecordTypeInts.WRUM:
                {
                    _WRUMLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.WRUM;
                }
                case RecordTypeInts.WVAR:
                {
                    _WVARLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.UseVariableRange;
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MO4S:
                case RecordTypeInts.MO4C:
                {
                    this.FirstPersonModel = FirstPersonModelBinaryOverlay.FirstPersonModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weapon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.WVIS:
                {
                    _WVISLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.ImageSpaceAdapter;
                }
                case RecordTypeInts.WTRM:
                {
                    _WTRMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weapon_FieldIndex.WTRMUnknown5;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Weapon>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeaponGetter rhs) return false;
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponGetter? obj)
        {
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

