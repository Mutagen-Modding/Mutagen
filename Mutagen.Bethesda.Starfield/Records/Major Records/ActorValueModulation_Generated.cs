/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ActorValueModulation :
        StarfieldMajorRecord,
        IActorValueModulationInternal,
        IEquatable<IActorValueModulationGetter>,
        ILoquiObjectSetter<ActorValueModulation>
    {
        #region Ctor
        protected ActorValueModulation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IActorValueModulationGetter.Components => _Components;
        #endregion

        #endregion
        #region Type
        public ActorValueModulation.TypeEnum Type { get; set; } = default(ActorValueModulation.TypeEnum);
        #endregion
        #region YNAM
        public String? YNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IActorValueModulationGetter.YNAM => this.YNAM;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        public String Name { get; set; } = string.Empty;
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ActorValueModulationEntry>? _Entries;
        public ExtendedList<ActorValueModulationEntry>? Entries
        {
            get => this._Entries;
            set => this._Entries = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IActorValueModulationEntryGetter>? IActorValueModulationGetter.Entries => _Entries;
        #endregion

        #endregion
        #region TextureType
        public ActorValueModulation.TextureTypeEnum? TextureType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ActorValueModulation.TextureTypeEnum? IActorValueModulationGetter.TextureType => this.TextureType;
        #endregion
        #region Parent
        private readonly IFormLinkNullable<IActorValueModulationGetter> _Parent = new FormLinkNullable<IActorValueModulationGetter>();
        public IFormLinkNullable<IActorValueModulationGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IActorValueModulationGetter> IActorValueModulationGetter.Parent => this.Parent;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActorValueModulationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Type = initialValue;
                this.YNAM = initialValue;
                this.Name = initialValue;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValueModulationEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ActorValueModulationEntry.Mask<TItem>?>>());
                this.TextureType = initialValue;
                this.Parent = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Type,
                TItem YNAM,
                TItem Name,
                TItem Entries,
                TItem TextureType,
                TItem Parent)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Type = Type;
                this.YNAM = YNAM;
                this.Name = Name;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValueModulationEntry.Mask<TItem>?>>?>(Entries, Enumerable.Empty<MaskItemIndexed<TItem, ActorValueModulationEntry.Mask<TItem>?>>());
                this.TextureType = TextureType;
                this.Parent = Parent;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Type;
            public TItem YNAM;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValueModulationEntry.Mask<TItem>?>>?>? Entries;
            public TItem TextureType;
            public TItem Parent;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.YNAM, rhs.YNAM)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Entries, rhs.Entries)) return false;
                if (!object.Equals(this.TextureType, rhs.TextureType)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Type);
                hash.Add(this.YNAM);
                hash.Add(this.Name);
                hash.Add(this.Entries);
                hash.Add(this.TextureType);
                hash.Add(this.Parent);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Type)) return false;
                if (!eval(this.YNAM)) return false;
                if (!eval(this.Name)) return false;
                if (this.Entries != null)
                {
                    if (!eval(this.Entries.Overall)) return false;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.TextureType)) return false;
                if (!eval(this.Parent)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Type)) return true;
                if (eval(this.YNAM)) return true;
                if (eval(this.Name)) return true;
                if (this.Entries != null)
                {
                    if (eval(this.Entries.Overall)) return true;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.TextureType)) return true;
                if (eval(this.Parent)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ActorValueModulation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Type = eval(this.Type);
                obj.YNAM = eval(this.YNAM);
                obj.Name = eval(this.Name);
                if (Entries != null)
                {
                    obj.Entries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ActorValueModulationEntry.Mask<R>?>>?>(eval(this.Entries.Overall), Enumerable.Empty<MaskItemIndexed<R, ActorValueModulationEntry.Mask<R>?>>());
                    if (Entries.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ActorValueModulationEntry.Mask<R>?>>();
                        obj.Entries.Specific = l;
                        foreach (var item in Entries.Specific)
                        {
                            MaskItemIndexed<R, ActorValueModulationEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ActorValueModulationEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TextureType = eval(this.TextureType);
                obj.Parent = eval(this.Parent);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ActorValueModulation.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ActorValueModulation.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ActorValueModulation.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.YNAM ?? true)
                    {
                        sb.AppendItem(YNAM, "YNAM");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Entries?.Overall ?? true)
                        && Entries is {} EntriesItem)
                    {
                        sb.AppendLine("Entries =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EntriesItem.Overall);
                            if (EntriesItem.Specific != null)
                            {
                                foreach (var subItem in EntriesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.TextureType ?? true)
                    {
                        sb.AppendItem(TextureType, "TextureType");
                    }
                    if (printMask?.Parent ?? true)
                    {
                        sb.AppendItem(Parent, "Parent");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Type;
            public Exception? YNAM;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValueModulationEntry.ErrorMask?>>?>? Entries;
            public Exception? TextureType;
            public Exception? Parent;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ActorValueModulation_FieldIndex enu = (ActorValueModulation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueModulation_FieldIndex.Components:
                        return Components;
                    case ActorValueModulation_FieldIndex.Type:
                        return Type;
                    case ActorValueModulation_FieldIndex.YNAM:
                        return YNAM;
                    case ActorValueModulation_FieldIndex.Name:
                        return Name;
                    case ActorValueModulation_FieldIndex.Entries:
                        return Entries;
                    case ActorValueModulation_FieldIndex.TextureType:
                        return TextureType;
                    case ActorValueModulation_FieldIndex.Parent:
                        return Parent;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ActorValueModulation_FieldIndex enu = (ActorValueModulation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueModulation_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ActorValueModulation_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case ActorValueModulation_FieldIndex.YNAM:
                        this.YNAM = ex;
                        break;
                    case ActorValueModulation_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ActorValueModulation_FieldIndex.Entries:
                        this.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValueModulationEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case ActorValueModulation_FieldIndex.TextureType:
                        this.TextureType = ex;
                        break;
                    case ActorValueModulation_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ActorValueModulation_FieldIndex enu = (ActorValueModulation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueModulation_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case ActorValueModulation_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case ActorValueModulation_FieldIndex.YNAM:
                        this.YNAM = (Exception?)obj;
                        break;
                    case ActorValueModulation_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ActorValueModulation_FieldIndex.Entries:
                        this.Entries = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValueModulationEntry.ErrorMask?>>?>)obj;
                        break;
                    case ActorValueModulation_FieldIndex.TextureType:
                        this.TextureType = (Exception?)obj;
                        break;
                    case ActorValueModulation_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Type != null) return true;
                if (YNAM != null) return true;
                if (Name != null) return true;
                if (Entries != null) return true;
                if (TextureType != null) return true;
                if (Parent != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(YNAM, "YNAM");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Entries is {} EntriesItem)
                {
                    sb.AppendLine("Entries =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EntriesItem.Overall);
                        if (EntriesItem.Specific != null)
                        {
                            foreach (var subItem in EntriesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(TextureType, "TextureType");
                }
                {
                    sb.AppendItem(Parent, "Parent");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Type = this.Type.Combine(rhs.Type);
                ret.YNAM = this.YNAM.Combine(rhs.YNAM);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValueModulationEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Entries?.Overall, rhs.Entries?.Overall), Noggog.ExceptionExt.Combine(this.Entries?.Specific, rhs.Entries?.Specific));
                ret.TextureType = this.TextureType.Combine(rhs.TextureType);
                ret.Parent = this.Parent.Combine(rhs.Parent);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Type;
            public bool YNAM;
            public bool Name;
            public ActorValueModulationEntry.TranslationMask? Entries;
            public bool TextureType;
            public bool Parent;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Type = defaultOn;
                this.YNAM = defaultOn;
                this.Name = defaultOn;
                this.TextureType = defaultOn;
                this.Parent = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Type, null));
                ret.Add((YNAM, null));
                ret.Add((Name, null));
                ret.Add((Entries == null ? DefaultOn : !Entries.GetCrystal().CopyNothing, Entries?.GetCrystal()));
                ret.Add((TextureType, null));
                ret.Add((Parent, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ActorValueModulation_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ActorValueModulationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ActorValueModulationSetterCommon.Instance.RemapLinks(this, mapping);
        public ActorValueModulation(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ActorValueModulation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ActorValueModulation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ActorValueModulation(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ActorValueModulation(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ActorValueModulation>.ToString(this);
        }

        protected override Type LinkType => typeof(IActorValueModulation);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ActorValueModulationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ActorValueModulationSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ActorValueModulationSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ActorValueModulationSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActorValueModulationGetter rhs) return false;
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActorValueModulationGetter? obj)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueModulationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActorValueModulationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ActorValueModulation CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ActorValueModulation();
            ((ActorValueModulationSetterCommon)((IActorValueModulationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ActorValueModulation item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ActorValueModulationSetterCommon)((IActorValueModulationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ActorValueModulation GetNew()
        {
            return new ActorValueModulation();
        }

    }
    #endregion

    #region Interface
    public partial interface IActorValueModulation :
        IActorValueModulationGetter,
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IActorValueModulationInternal>,
        INamedRequired,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new ActorValueModulation.TypeEnum Type { get; set; }
        new String? YNAM { get; set; }
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        new String Name { get; set; }
        new ExtendedList<ActorValueModulationEntry>? Entries { get; set; }
        new ActorValueModulation.TextureTypeEnum? TextureType { get; set; }
        new IFormLinkNullable<IActorValueModulationGetter> Parent { get; set; }
    }

    public partial interface IActorValueModulationInternal :
        IStarfieldMajorRecordInternal,
        IActorValueModulation,
        IActorValueModulationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AVMD)]
    public partial interface IActorValueModulationGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IActorValueModulationGetter>,
        IMapsToGetter<IActorValueModulationGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ActorValueModulation_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        ActorValueModulation.TypeEnum Type { get; }
        String? YNAM { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter
        /// </summary>
        String Name { get; }
        #endregion
        IReadOnlyList<IActorValueModulationEntryGetter>? Entries { get; }
        ActorValueModulation.TextureTypeEnum? TextureType { get; }
        IFormLinkNullableGetter<IActorValueModulationGetter> Parent { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ActorValueModulationMixIn
    {
        public static void Clear(this IActorValueModulationInternal item)
        {
            ((ActorValueModulationSetterCommon)((IActorValueModulationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ActorValueModulation.Mask<bool> GetEqualsMask(
            this IActorValueModulationGetter item,
            IActorValueModulationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IActorValueModulationGetter item,
            string? name = null,
            ActorValueModulation.Mask<bool>? printMask = null)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IActorValueModulationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ActorValueModulation.Mask<bool>? printMask = null)
        {
            ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActorValueModulationGetter item,
            IActorValueModulationGetter rhs,
            ActorValueModulation.TranslationMask? equalsMask = null)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IActorValueModulationInternal lhs,
            IActorValueModulationGetter rhs,
            out ActorValueModulation.ErrorMask errorMask,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ActorValueModulation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActorValueModulationInternal lhs,
            IActorValueModulationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ActorValueModulation DeepCopy(
            this IActorValueModulationGetter item,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            return ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ActorValueModulation DeepCopy(
            this IActorValueModulationGetter item,
            out ActorValueModulation.ErrorMask errorMask,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            return ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ActorValueModulation DeepCopy(
            this IActorValueModulationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ActorValueModulation Duplicate(
            this IActorValueModulationGetter item,
            FormKey formKey,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ActorValueModulation Duplicate(
            this IActorValueModulationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActorValueModulationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ActorValueModulationSetterCommon)((IActorValueModulationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ActorValueModulation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Type = 8,
        YNAM = 9,
        Name = 10,
        Entries = 11,
        TextureType = 12,
        Parent = 13,
    }
    #endregion

    #region Registration
    internal partial class ActorValueModulation_Registration : ILoquiRegistration
    {
        public static readonly ActorValueModulation_Registration Instance = new ActorValueModulation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(ActorValueModulation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ActorValueModulation.ErrorMask);

        public static readonly Type ClassType = typeof(ActorValueModulation);

        public static readonly Type GetterType = typeof(IActorValueModulationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActorValueModulation);

        public static readonly Type? InternalSetterType = typeof(IActorValueModulationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ActorValueModulation";

        public const string Name = "ActorValueModulation";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AVMD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AVMD);
            var all = RecordCollection.Factory(
                RecordTypes.AVMD,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.MNAM,
                RecordTypes.YNAM,
                RecordTypes.TNAM,
                RecordTypes.LNAM,
                RecordTypes.ITMC,
                RecordTypes.VNAM,
                RecordTypes.NNAM,
                RecordTypes.MODT,
                RecordTypes.AVMP);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ActorValueModulationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ActorValueModulationSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ActorValueModulationSetterCommon Instance = new ActorValueModulationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActorValueModulationInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Type = default(ActorValueModulation.TypeEnum);
            item.YNAM = default;
            item.Name = string.Empty;
            item.Entries = null;
            item.TextureType = default;
            item.Parent.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IActorValueModulationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IActorValueModulationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IActorValueModulation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Parent.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IActorValueModulation obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IActorValueModulation obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActorValueModulationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IActorValueModulationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ActorValueModulationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ActorValueModulationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ActorValueModulation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ActorValueModulation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ActorValueModulationCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ActorValueModulationCommon Instance = new ActorValueModulationCommon();

        public ActorValueModulation.Mask<bool> GetEqualsMask(
            IActorValueModulationGetter item,
            IActorValueModulationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ActorValueModulation.Mask<bool>(false);
            ((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActorValueModulationGetter item,
            IActorValueModulationGetter rhs,
            ActorValueModulation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Type = item.Type == rhs.Type;
            ret.YNAM = string.Equals(item.YNAM, rhs.YNAM);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Entries = item.Entries.CollectionEqualsHelper(
                rhs.Entries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TextureType = item.TextureType == rhs.TextureType;
            ret.Parent = item.Parent.Equals(rhs.Parent);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IActorValueModulationGetter item,
            string? name = null,
            ActorValueModulation.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IActorValueModulationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ActorValueModulation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ActorValueModulation =>");
            }
            else
            {
                sb.AppendLine($"{name} (ActorValueModulation) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IActorValueModulationGetter item,
            StructuredStringBuilder sb,
            ActorValueModulation.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if ((printMask?.YNAM ?? true)
                && item.YNAM is {} YNAMItem)
            {
                sb.AppendItem(YNAMItem, "YNAM");
            }
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.Entries?.Overall ?? true)
                && item.Entries is {} EntriesItem)
            {
                sb.AppendLine("Entries =>");
                using (sb.Brace())
                {
                    foreach (var subItem in EntriesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.TextureType ?? true)
                && item.TextureType is {} TextureTypeItem)
            {
                sb.AppendItem(TextureTypeItem, "TextureType");
            }
            if (printMask?.Parent ?? true)
            {
                sb.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
        }
        
        public static ActorValueModulation_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ActorValueModulation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ActorValueModulation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ActorValueModulation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ActorValueModulation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActorValueModulationGetter? lhs,
            IActorValueModulationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ActorValueModulation_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.YNAM) ?? true))
            {
                if (!string.Equals(lhs.YNAM, rhs.YNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Entries) ?? true))
            {
                if (!lhs.Entries.SequenceEqualNullable(rhs.Entries, (l, r) => ((ActorValueModulationEntryCommon)((IActorValueModulationEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ActorValueModulation_FieldIndex.Entries)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.TextureType) ?? true))
            {
                if (lhs.TextureType != rhs.TextureType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IActorValueModulationGetter?)lhs,
                rhs: rhs as IActorValueModulationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IActorValueModulationGetter?)lhs,
                rhs: rhs as IActorValueModulationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IActorValueModulationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.Type);
            if (item.YNAM is {} YNAMitem)
            {
                hash.Add(YNAMitem);
            }
            hash.Add(item.Name);
            hash.Add(item.Entries);
            if (item.TextureType is {} TextureTypeitem)
            {
                hash.Add(TextureTypeitem);
            }
            hash.Add(item.Parent);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueModulationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueModulationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ActorValueModulation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IActorValueModulationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Parent, out var ParentInfo))
            {
                yield return ParentInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IActorValueModulationGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ActorValueModulation Duplicate(
            IActorValueModulationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ActorValueModulation(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueModulationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueModulationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ActorValueModulationSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ActorValueModulationSetterTranslationCommon Instance = new ActorValueModulationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActorValueModulationInternal item,
            IActorValueModulationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IActorValueModulation item,
            IActorValueModulationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)ActorValueModulation_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.YNAM) ?? true))
            {
                item.YNAM = rhs.YNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Entries) ?? true))
            {
                errorMask?.PushIndex((int)ActorValueModulation_FieldIndex.Entries);
                try
                {
                    if ((rhs.Entries != null))
                    {
                        item.Entries = 
                            rhs.Entries
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ActorValueModulationEntry>();
                    }
                    else
                    {
                        item.Entries = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.TextureType) ?? true))
            {
                item.TextureType = rhs.TextureType;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueModulation_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IActorValueModulation item,
            IActorValueModulationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueModulationInternal)item,
                rhs: (IActorValueModulationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueModulation)item,
                rhs: (IActorValueModulationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueModulationInternal)item,
                rhs: (IActorValueModulationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueModulation)item,
                rhs: (IActorValueModulationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ActorValueModulation DeepCopy(
            IActorValueModulationGetter item,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            ActorValueModulation ret = (ActorValueModulation)((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ActorValueModulation DeepCopy(
            IActorValueModulationGetter item,
            out ActorValueModulation.ErrorMask errorMask,
            ActorValueModulation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ActorValueModulation ret = (ActorValueModulation)((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ActorValueModulation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ActorValueModulation DeepCopy(
            IActorValueModulationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ActorValueModulation ret = (ActorValueModulation)((ActorValueModulationCommon)((IActorValueModulationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueModulationSetterTranslationCommon)((IActorValueModulationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ActorValueModulation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueModulation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ActorValueModulation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueModulationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ActorValueModulationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueModulationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ActorValueModulationBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ActorValueModulationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IActorValueModulationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<ActorValueModulation.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.YNAM,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IActorValueModulationEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Entries,
                counterType: RecordTypes.ITMC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IActorValueModulationEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ActorValueModulationEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<ActorValueModulation.TextureTypeEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.TextureType,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MODT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.AVMP));
        }

        public void Write(
            MutagenWriter writer,
            IActorValueModulationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AVMD,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IActorValueModulationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IActorValueModulationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IActorValueModulationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ActorValueModulationBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ActorValueModulationBinaryCreateTranslation Instance = new ActorValueModulationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AVMD;
        public static ParseResult FillBinaryRecordTypes(
            IActorValueModulationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)ActorValueModulation_FieldIndex.Components;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<ActorValueModulation.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ActorValueModulation_FieldIndex.Type;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.YNAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ActorValueModulation_FieldIndex.YNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ActorValueModulation_FieldIndex.Name;
                }
                case RecordTypeInts.LNAM:
                case RecordTypeInts.ITMC:
                {
                    item.Entries = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValueModulationEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.ITMC,
                            triggeringRecord: ActorValueModulationEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ActorValueModulationEntry.TryCreateFromBinary)
                        .CastExtendedList<ActorValueModulationEntry>();
                    return (int)ActorValueModulation_FieldIndex.Entries;
                }
                case RecordTypeInts.MODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureType = EnumBinaryTranslation<ActorValueModulation.TextureTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ActorValueModulation_FieldIndex.TextureType;
                }
                case RecordTypeInts.AVMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ActorValueModulation_FieldIndex.Parent;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ActorValueModulationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ActorValueModulationBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IActorValueModulationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueModulation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ActorValueModulation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueModulationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueModulationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ActorValueModulationCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ActorValueModulationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueModulationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActorValueModulationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IActorValueModulation);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Type
        private int? _TypeLocation;
        public ActorValueModulation.TypeEnum Type => _TypeLocation.HasValue ? (ActorValueModulation.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeLocation!.Value, _package.MetaData.Constants)) : default(ActorValueModulation.TypeEnum);
        #endregion
        #region YNAM
        private int? _YNAMLocation;
        public String? YNAM => _YNAMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _YNAMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        public IReadOnlyList<IActorValueModulationEntryGetter>? Entries { get; private set; }
        #region TextureType
        private int? _TextureTypeLocation;
        public ActorValueModulation.TextureTypeEnum? TextureType => _TextureTypeLocation.HasValue ? (ActorValueModulation.TextureTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureTypeLocation!.Value, _package.MetaData.Constants)) : default(ActorValueModulation.TextureTypeEnum?);
        #endregion
        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<IActorValueModulationGetter> Parent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IActorValueModulationGetter>(_package, _recordData, _ParentLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActorValueModulationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IActorValueModulationGetter ActorValueModulationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ActorValueModulationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IActorValueModulationGetter ActorValueModulationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ActorValueModulationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)ActorValueModulation_FieldIndex.Components;
                }
                case RecordTypeInts.MNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)ActorValueModulation_FieldIndex.Type;
                }
                case RecordTypeInts.YNAM:
                {
                    _YNAMLocation = (stream.Position - offset);
                    return (int)ActorValueModulation_FieldIndex.YNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ActorValueModulation_FieldIndex.Name;
                }
                case RecordTypeInts.LNAM:
                case RecordTypeInts.ITMC:
                {
                    this.Entries = BinaryOverlayList.FactoryByCountPerItem<IActorValueModulationEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ActorValueModulationEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.ITMC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ActorValueModulationEntryBinaryOverlay.ActorValueModulationEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)ActorValueModulation_FieldIndex.Entries;
                }
                case RecordTypeInts.MODT:
                {
                    _TextureTypeLocation = (stream.Position - offset);
                    return (int)ActorValueModulation_FieldIndex.TextureType;
                }
                case RecordTypeInts.AVMP:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)ActorValueModulation_FieldIndex.Parent;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActorValueModulationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ActorValueModulation>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActorValueModulationGetter rhs) return false;
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActorValueModulationGetter? obj)
        {
            return ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActorValueModulationCommon)((IActorValueModulationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

