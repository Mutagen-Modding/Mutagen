/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NpcTint :
        IEquatable<INpcTintGetter>,
        ILoquiObjectSetter<NpcTint>,
        INpcTint
    {
        #region Ctor
        public NpcTint()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TintType
        public TintType TintType { get; set; } = default(TintType);
        #endregion
        #region TintGroup
        public String TintGroup { get; set; } = string.Empty;
        #endregion
        #region TintName
        public String TintName { get; set; } = string.Empty;
        #endregion
        #region TintTexture
        public String TintTexture { get; set; } = string.Empty;
        #endregion
        #region TintColor
        public Color TintColor { get; set; } = default(Color);
        #endregion
        #region TintIntensity
        public UInt32 TintIntensity { get; set; } = default(UInt32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcTintMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcTintGetter rhs) return false;
            return ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcTintGetter? obj)
        {
            return ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TintType = initialValue;
                this.TintGroup = initialValue;
                this.TintName = initialValue;
                this.TintTexture = initialValue;
                this.TintColor = initialValue;
                this.TintIntensity = initialValue;
            }

            public Mask(
                TItem TintType,
                TItem TintGroup,
                TItem TintName,
                TItem TintTexture,
                TItem TintColor,
                TItem TintIntensity)
            {
                this.TintType = TintType;
                this.TintGroup = TintGroup;
                this.TintName = TintName;
                this.TintTexture = TintTexture;
                this.TintColor = TintColor;
                this.TintIntensity = TintIntensity;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TintType;
            public TItem TintGroup;
            public TItem TintName;
            public TItem TintTexture;
            public TItem TintColor;
            public TItem TintIntensity;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TintType, rhs.TintType)) return false;
                if (!object.Equals(this.TintGroup, rhs.TintGroup)) return false;
                if (!object.Equals(this.TintName, rhs.TintName)) return false;
                if (!object.Equals(this.TintTexture, rhs.TintTexture)) return false;
                if (!object.Equals(this.TintColor, rhs.TintColor)) return false;
                if (!object.Equals(this.TintIntensity, rhs.TintIntensity)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TintType);
                hash.Add(this.TintGroup);
                hash.Add(this.TintName);
                hash.Add(this.TintTexture);
                hash.Add(this.TintColor);
                hash.Add(this.TintIntensity);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TintType)) return false;
                if (!eval(this.TintGroup)) return false;
                if (!eval(this.TintName)) return false;
                if (!eval(this.TintTexture)) return false;
                if (!eval(this.TintColor)) return false;
                if (!eval(this.TintIntensity)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TintType)) return true;
                if (eval(this.TintGroup)) return true;
                if (eval(this.TintName)) return true;
                if (eval(this.TintTexture)) return true;
                if (eval(this.TintColor)) return true;
                if (eval(this.TintIntensity)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcTint.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TintType = eval(this.TintType);
                obj.TintGroup = eval(this.TintGroup);
                obj.TintName = eval(this.TintName);
                obj.TintTexture = eval(this.TintTexture);
                obj.TintColor = eval(this.TintColor);
                obj.TintIntensity = eval(this.TintIntensity);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NpcTint.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NpcTint.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NpcTint.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.TintType ?? true)
                    {
                        sb.AppendItem(TintType, "TintType");
                    }
                    if (printMask?.TintGroup ?? true)
                    {
                        sb.AppendItem(TintGroup, "TintGroup");
                    }
                    if (printMask?.TintName ?? true)
                    {
                        sb.AppendItem(TintName, "TintName");
                    }
                    if (printMask?.TintTexture ?? true)
                    {
                        sb.AppendItem(TintTexture, "TintTexture");
                    }
                    if (printMask?.TintColor ?? true)
                    {
                        sb.AppendItem(TintColor, "TintColor");
                    }
                    if (printMask?.TintIntensity ?? true)
                    {
                        sb.AppendItem(TintIntensity, "TintIntensity");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TintType;
            public Exception? TintGroup;
            public Exception? TintName;
            public Exception? TintTexture;
            public Exception? TintColor;
            public Exception? TintIntensity;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcTint_FieldIndex enu = (NpcTint_FieldIndex)index;
                switch (enu)
                {
                    case NpcTint_FieldIndex.TintType:
                        return TintType;
                    case NpcTint_FieldIndex.TintGroup:
                        return TintGroup;
                    case NpcTint_FieldIndex.TintName:
                        return TintName;
                    case NpcTint_FieldIndex.TintTexture:
                        return TintTexture;
                    case NpcTint_FieldIndex.TintColor:
                        return TintColor;
                    case NpcTint_FieldIndex.TintIntensity:
                        return TintIntensity;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcTint_FieldIndex enu = (NpcTint_FieldIndex)index;
                switch (enu)
                {
                    case NpcTint_FieldIndex.TintType:
                        this.TintType = ex;
                        break;
                    case NpcTint_FieldIndex.TintGroup:
                        this.TintGroup = ex;
                        break;
                    case NpcTint_FieldIndex.TintName:
                        this.TintName = ex;
                        break;
                    case NpcTint_FieldIndex.TintTexture:
                        this.TintTexture = ex;
                        break;
                    case NpcTint_FieldIndex.TintColor:
                        this.TintColor = ex;
                        break;
                    case NpcTint_FieldIndex.TintIntensity:
                        this.TintIntensity = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcTint_FieldIndex enu = (NpcTint_FieldIndex)index;
                switch (enu)
                {
                    case NpcTint_FieldIndex.TintType:
                        this.TintType = (Exception?)obj;
                        break;
                    case NpcTint_FieldIndex.TintGroup:
                        this.TintGroup = (Exception?)obj;
                        break;
                    case NpcTint_FieldIndex.TintName:
                        this.TintName = (Exception?)obj;
                        break;
                    case NpcTint_FieldIndex.TintTexture:
                        this.TintTexture = (Exception?)obj;
                        break;
                    case NpcTint_FieldIndex.TintColor:
                        this.TintColor = (Exception?)obj;
                        break;
                    case NpcTint_FieldIndex.TintIntensity:
                        this.TintIntensity = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TintType != null) return true;
                if (TintGroup != null) return true;
                if (TintName != null) return true;
                if (TintTexture != null) return true;
                if (TintColor != null) return true;
                if (TintIntensity != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(TintType, "TintType");
                }
                {
                    sb.AppendItem(TintGroup, "TintGroup");
                }
                {
                    sb.AppendItem(TintName, "TintName");
                }
                {
                    sb.AppendItem(TintTexture, "TintTexture");
                }
                {
                    sb.AppendItem(TintColor, "TintColor");
                }
                {
                    sb.AppendItem(TintIntensity, "TintIntensity");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TintType = this.TintType.Combine(rhs.TintType);
                ret.TintGroup = this.TintGroup.Combine(rhs.TintGroup);
                ret.TintName = this.TintName.Combine(rhs.TintName);
                ret.TintTexture = this.TintTexture.Combine(rhs.TintTexture);
                ret.TintColor = this.TintColor.Combine(rhs.TintColor);
                ret.TintIntensity = this.TintIntensity.Combine(rhs.TintIntensity);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool TintType;
            public bool TintGroup;
            public bool TintName;
            public bool TintTexture;
            public bool TintColor;
            public bool TintIntensity;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.TintType = defaultOn;
                this.TintGroup = defaultOn;
                this.TintName = defaultOn;
                this.TintTexture = defaultOn;
                this.TintColor = defaultOn;
                this.TintIntensity = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TintType, null));
                ret.Add((TintGroup, null));
                ret.Add((TintName, null));
                ret.Add((TintTexture, null));
                ret.Add((TintColor, null));
                ret.Add((TintIntensity, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcTintBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcTintBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NpcTint CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NpcTint();
            ((NpcTintSetterCommon)((INpcTintGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcTint item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcTintSetterCommon)((INpcTintGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcTint GetNew()
        {
            return new NpcTint();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcTint :
        ILoquiObjectSetter<INpcTint>,
        INpcTintGetter
    {
        new TintType TintType { get; set; }
        new String TintGroup { get; set; }
        new String TintName { get; set; }
        new String TintTexture { get; set; }
        new Color TintColor { get; set; }
        new UInt32 TintIntensity { get; set; }
    }

    public partial interface INpcTintGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INpcTintGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NpcTint_Registration.Instance;
        TintType TintType { get; }
        String TintGroup { get; }
        String TintName { get; }
        String TintTexture { get; }
        Color TintColor { get; }
        UInt32 TintIntensity { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcTintMixIn
    {
        public static void Clear(this INpcTint item)
        {
            ((NpcTintSetterCommon)((INpcTintGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcTint.Mask<bool> GetEqualsMask(
            this INpcTintGetter item,
            INpcTintGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcTintGetter item,
            string? name = null,
            NpcTint.Mask<bool>? printMask = null)
        {
            return ((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcTintGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcTint.Mask<bool>? printMask = null)
        {
            ((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcTintGetter item,
            INpcTintGetter rhs,
            NpcTint.TranslationMask? equalsMask = null)
        {
            return ((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcTint lhs,
            INpcTintGetter rhs)
        {
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcTint lhs,
            INpcTintGetter rhs,
            NpcTint.TranslationMask? copyMask = null)
        {
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcTint lhs,
            INpcTintGetter rhs,
            out NpcTint.ErrorMask errorMask,
            NpcTint.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcTint.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcTint lhs,
            INpcTintGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcTint DeepCopy(
            this INpcTintGetter item,
            NpcTint.TranslationMask? copyMask = null)
        {
            return ((NpcTintSetterTranslationCommon)((INpcTintGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcTint DeepCopy(
            this INpcTintGetter item,
            out NpcTint.ErrorMask errorMask,
            NpcTint.TranslationMask? copyMask = null)
        {
            return ((NpcTintSetterTranslationCommon)((INpcTintGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcTint DeepCopy(
            this INpcTintGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcTintSetterTranslationCommon)((INpcTintGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcTint item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcTintSetterCommon)((INpcTintGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NpcTint_FieldIndex
    {
        TintType = 0,
        TintGroup = 1,
        TintName = 2,
        TintTexture = 3,
        TintColor = 4,
        TintIntensity = 5,
    }
    #endregion

    #region Registration
    internal partial class NpcTint_Registration : ILoquiRegistration
    {
        public static readonly NpcTint_Registration Instance = new NpcTint_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(NpcTint.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcTint.ErrorMask);

        public static readonly Type ClassType = typeof(NpcTint);

        public static readonly Type GetterType = typeof(INpcTintGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcTint);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.NpcTint";

        public const string Name = "NpcTint";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MNAM);
            var all = RecordCollection.Factory(
                RecordTypes.MNAM,
                RecordTypes.TNAM,
                RecordTypes.QNAM,
                RecordTypes.VNAM,
                RecordTypes.NNAM,
                RecordTypes.INTV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcTintBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcTintSetterCommon
    {
        public static readonly NpcTintSetterCommon Instance = new NpcTintSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcTint item)
        {
            ClearPartial();
            item.TintType = default(TintType);
            item.TintGroup = string.Empty;
            item.TintName = string.Empty;
            item.TintTexture = string.Empty;
            item.TintColor = default(Color);
            item.TintIntensity = default(UInt32);
        }
        
        #region Mutagen
        public void RemapLinks(INpcTint obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcTint item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: NpcTintBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class NpcTintCommon
    {
        public static readonly NpcTintCommon Instance = new NpcTintCommon();

        public NpcTint.Mask<bool> GetEqualsMask(
            INpcTintGetter item,
            INpcTintGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcTint.Mask<bool>(false);
            ((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcTintGetter item,
            INpcTintGetter rhs,
            NpcTint.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.TintType = item.TintType == rhs.TintType;
            ret.TintGroup = string.Equals(item.TintGroup, rhs.TintGroup);
            ret.TintName = string.Equals(item.TintName, rhs.TintName);
            ret.TintTexture = string.Equals(item.TintTexture, rhs.TintTexture);
            ret.TintColor = item.TintColor.ColorOnlyEquals(rhs.TintColor);
            ret.TintIntensity = item.TintIntensity == rhs.TintIntensity;
        }
        
        public string Print(
            INpcTintGetter item,
            string? name = null,
            NpcTint.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcTintGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NpcTint.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NpcTint =>");
            }
            else
            {
                sb.AppendLine($"{name} (NpcTint) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcTintGetter item,
            StructuredStringBuilder sb,
            NpcTint.Mask<bool>? printMask = null)
        {
            if (printMask?.TintType ?? true)
            {
                sb.AppendItem(item.TintType, "TintType");
            }
            if (printMask?.TintGroup ?? true)
            {
                sb.AppendItem(item.TintGroup, "TintGroup");
            }
            if (printMask?.TintName ?? true)
            {
                sb.AppendItem(item.TintName, "TintName");
            }
            if (printMask?.TintTexture ?? true)
            {
                sb.AppendItem(item.TintTexture, "TintTexture");
            }
            if (printMask?.TintColor ?? true)
            {
                sb.AppendItem(item.TintColor, "TintColor");
            }
            if (printMask?.TintIntensity ?? true)
            {
                sb.AppendItem(item.TintIntensity, "TintIntensity");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcTintGetter? lhs,
            INpcTintGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintType) ?? true))
            {
                if (lhs.TintType != rhs.TintType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintGroup) ?? true))
            {
                if (!string.Equals(lhs.TintGroup, rhs.TintGroup)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintName) ?? true))
            {
                if (!string.Equals(lhs.TintName, rhs.TintName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintTexture) ?? true))
            {
                if (!string.Equals(lhs.TintTexture, rhs.TintTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintColor) ?? true))
            {
                if (!lhs.TintColor.ColorOnlyEquals(rhs.TintColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintIntensity) ?? true))
            {
                if (lhs.TintIntensity != rhs.TintIntensity) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INpcTintGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TintType);
            hash.Add(item.TintGroup);
            hash.Add(item.TintName);
            hash.Add(item.TintTexture);
            hash.Add(item.TintColor);
            hash.Add(item.TintIntensity);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcTint.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcTintGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NpcTintSetterTranslationCommon
    {
        public static readonly NpcTintSetterTranslationCommon Instance = new NpcTintSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcTint item,
            INpcTintGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintType) ?? true))
            {
                item.TintType = rhs.TintType;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintGroup) ?? true))
            {
                item.TintGroup = rhs.TintGroup;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintName) ?? true))
            {
                item.TintName = rhs.TintName;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintTexture) ?? true))
            {
                item.TintTexture = rhs.TintTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintColor) ?? true))
            {
                item.TintColor = rhs.TintColor;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcTint_FieldIndex.TintIntensity) ?? true))
            {
                item.TintIntensity = rhs.TintIntensity;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpcTint item,
            INpcTintGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public NpcTint DeepCopy(
            INpcTintGetter item,
            NpcTint.TranslationMask? copyMask = null)
        {
            NpcTint ret = (NpcTint)((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).GetNew();
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcTint DeepCopy(
            INpcTintGetter item,
            out NpcTint.ErrorMask errorMask,
            NpcTint.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcTint ret = (NpcTint)((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).GetNew();
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcTint.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcTint DeepCopy(
            INpcTintGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcTint ret = (NpcTint)((NpcTintCommon)((INpcTintGetter)item).CommonInstance()!).GetNew();
            ((NpcTintSetterTranslationCommon)((INpcTintGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcTint
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcTint_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcTint_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcTintCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcTintSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcTintSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcTintGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcTintGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcTintGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NpcTintBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NpcTintBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INpcTintGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            EnumBinaryTranslation<TintType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.TintType,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TintGroup,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TintName,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TintTexture,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM),
                binaryType: StringBinaryType.NullTerminate);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TintColor,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TintIntensity,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
        }

        public void Write(
            MutagenWriter writer,
            INpcTintGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcTintGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcTintBinaryCreateTranslation
    {
        public static readonly NpcTintBinaryCreateTranslation Instance = new NpcTintBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            INpcTint item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)NpcTint_FieldIndex.TintType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintType = EnumBinaryTranslation<TintType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)NpcTint_FieldIndex.TintType;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintGroup = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)NpcTint_FieldIndex.TintGroup;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)NpcTint_FieldIndex.TintName;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)NpcTint_FieldIndex.TintTexture;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)NpcTint_FieldIndex.TintColor;
                }
                case RecordTypeInts.INTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintIntensity = frame.ReadUInt32();
                    return (int)NpcTint_FieldIndex.TintIntensity;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NpcTintBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcTintGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcTintBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NpcTintBinaryOverlay :
        PluginBinaryOverlay,
        INpcTintGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcTint_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NpcTint_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcTintCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcTintSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcTintGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcTintGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcTintGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcTintBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcTintBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region TintType
        private int? _TintTypeLocation;
        public TintType TintType => EnumBinaryTranslation<TintType, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_TintTypeLocation, _recordData, _package, 4);
        #endregion
        #region TintGroup
        private int? _TintGroupLocation;
        public String TintGroup => _TintGroupLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintGroupLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TintName
        private int? _TintNameLocation;
        public String TintName => _TintNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TintTexture
        private int? _TintTextureLocation;
        public String TintTexture => _TintTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TintColor
        private int? _TintColorLocation;
        public Color TintColor => _TintColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region TintIntensity
        private int? _TintIntensityLocation;
        public UInt32 TintIntensity => _TintIntensityLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintIntensityLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcTintBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcTintGetter NpcTintFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcTintBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcTintGetter NpcTintFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcTintFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)NpcTint_FieldIndex.TintType, translationParams)) return ParseResult.Stop;
                    _TintTypeLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintType;
                }
                case RecordTypeInts.TNAM:
                {
                    _TintGroupLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintGroup;
                }
                case RecordTypeInts.QNAM:
                {
                    _TintNameLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintName;
                }
                case RecordTypeInts.VNAM:
                {
                    _TintTextureLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintTexture;
                }
                case RecordTypeInts.NNAM:
                {
                    _TintColorLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintColor;
                }
                case RecordTypeInts.INTV:
                {
                    _TintIntensityLocation = (stream.Position - offset);
                    return (int)NpcTint_FieldIndex.TintIntensity;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcTintMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INpcTintGetter rhs) return false;
            return ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcTintGetter? obj)
        {
            return ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcTintCommon)((INpcTintGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

