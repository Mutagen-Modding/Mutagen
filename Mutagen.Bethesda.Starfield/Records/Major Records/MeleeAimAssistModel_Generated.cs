/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MeleeAimAssistModel :
        StarfieldMajorRecord,
        IEquatable<IMeleeAimAssistModelGetter>,
        ILoquiObjectSetter<MeleeAimAssistModel>,
        IMeleeAimAssistModelInternal
    {
        #region Ctor
        protected MeleeAimAssistModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OuterConeAngleDegrees
        public Single OuterConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region InnerConeAngleDegrees
        public Single InnerConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region SteeringDegreesPerSec
        public Single SteeringDegreesPerSec { get; set; } = default(Single);
        #endregion
        #region SnapSteeringMultiplierOuterRing
        public Single SnapSteeringMultiplierOuterRing { get; set; } = default(Single);
        #endregion
        #region SnapSteeringMultiplierInnerRing
        public Single SnapSteeringMultiplierInnerRing { get; set; } = default(Single);
        #endregion
        #region MaxAimAssistDistance
        public Single MaxAimAssistDistance { get; set; } = default(Single);
        #endregion
        #region MeleeAimAssistEnabled
        public Boolean MeleeAimAssistEnabled { get; set; } = default(Boolean);
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MeleeAimAssistModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.OuterConeAngleDegrees = initialValue;
                this.InnerConeAngleDegrees = initialValue;
                this.SteeringDegreesPerSec = initialValue;
                this.SnapSteeringMultiplierOuterRing = initialValue;
                this.SnapSteeringMultiplierInnerRing = initialValue;
                this.MaxAimAssistDistance = initialValue;
                this.MeleeAimAssistEnabled = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem OuterConeAngleDegrees,
                TItem InnerConeAngleDegrees,
                TItem SteeringDegreesPerSec,
                TItem SnapSteeringMultiplierOuterRing,
                TItem SnapSteeringMultiplierInnerRing,
                TItem MaxAimAssistDistance,
                TItem MeleeAimAssistEnabled,
                TItem Unknown)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.OuterConeAngleDegrees = OuterConeAngleDegrees;
                this.InnerConeAngleDegrees = InnerConeAngleDegrees;
                this.SteeringDegreesPerSec = SteeringDegreesPerSec;
                this.SnapSteeringMultiplierOuterRing = SnapSteeringMultiplierOuterRing;
                this.SnapSteeringMultiplierInnerRing = SnapSteeringMultiplierInnerRing;
                this.MaxAimAssistDistance = MaxAimAssistDistance;
                this.MeleeAimAssistEnabled = MeleeAimAssistEnabled;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem OuterConeAngleDegrees;
            public TItem InnerConeAngleDegrees;
            public TItem SteeringDegreesPerSec;
            public TItem SnapSteeringMultiplierOuterRing;
            public TItem SnapSteeringMultiplierInnerRing;
            public TItem MaxAimAssistDistance;
            public TItem MeleeAimAssistEnabled;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.OuterConeAngleDegrees, rhs.OuterConeAngleDegrees)) return false;
                if (!object.Equals(this.InnerConeAngleDegrees, rhs.InnerConeAngleDegrees)) return false;
                if (!object.Equals(this.SteeringDegreesPerSec, rhs.SteeringDegreesPerSec)) return false;
                if (!object.Equals(this.SnapSteeringMultiplierOuterRing, rhs.SnapSteeringMultiplierOuterRing)) return false;
                if (!object.Equals(this.SnapSteeringMultiplierInnerRing, rhs.SnapSteeringMultiplierInnerRing)) return false;
                if (!object.Equals(this.MaxAimAssistDistance, rhs.MaxAimAssistDistance)) return false;
                if (!object.Equals(this.MeleeAimAssistEnabled, rhs.MeleeAimAssistEnabled)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.OuterConeAngleDegrees);
                hash.Add(this.InnerConeAngleDegrees);
                hash.Add(this.SteeringDegreesPerSec);
                hash.Add(this.SnapSteeringMultiplierOuterRing);
                hash.Add(this.SnapSteeringMultiplierInnerRing);
                hash.Add(this.MaxAimAssistDistance);
                hash.Add(this.MeleeAimAssistEnabled);
                hash.Add(this.Unknown);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.OuterConeAngleDegrees)) return false;
                if (!eval(this.InnerConeAngleDegrees)) return false;
                if (!eval(this.SteeringDegreesPerSec)) return false;
                if (!eval(this.SnapSteeringMultiplierOuterRing)) return false;
                if (!eval(this.SnapSteeringMultiplierInnerRing)) return false;
                if (!eval(this.MaxAimAssistDistance)) return false;
                if (!eval(this.MeleeAimAssistEnabled)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.OuterConeAngleDegrees)) return true;
                if (eval(this.InnerConeAngleDegrees)) return true;
                if (eval(this.SteeringDegreesPerSec)) return true;
                if (eval(this.SnapSteeringMultiplierOuterRing)) return true;
                if (eval(this.SnapSteeringMultiplierInnerRing)) return true;
                if (eval(this.MaxAimAssistDistance)) return true;
                if (eval(this.MeleeAimAssistEnabled)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MeleeAimAssistModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.OuterConeAngleDegrees = eval(this.OuterConeAngleDegrees);
                obj.InnerConeAngleDegrees = eval(this.InnerConeAngleDegrees);
                obj.SteeringDegreesPerSec = eval(this.SteeringDegreesPerSec);
                obj.SnapSteeringMultiplierOuterRing = eval(this.SnapSteeringMultiplierOuterRing);
                obj.SnapSteeringMultiplierInnerRing = eval(this.SnapSteeringMultiplierInnerRing);
                obj.MaxAimAssistDistance = eval(this.MaxAimAssistDistance);
                obj.MeleeAimAssistEnabled = eval(this.MeleeAimAssistEnabled);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MeleeAimAssistModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MeleeAimAssistModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MeleeAimAssistModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.OuterConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(OuterConeAngleDegrees, "OuterConeAngleDegrees");
                    }
                    if (printMask?.InnerConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(InnerConeAngleDegrees, "InnerConeAngleDegrees");
                    }
                    if (printMask?.SteeringDegreesPerSec ?? true)
                    {
                        sb.AppendItem(SteeringDegreesPerSec, "SteeringDegreesPerSec");
                    }
                    if (printMask?.SnapSteeringMultiplierOuterRing ?? true)
                    {
                        sb.AppendItem(SnapSteeringMultiplierOuterRing, "SnapSteeringMultiplierOuterRing");
                    }
                    if (printMask?.SnapSteeringMultiplierInnerRing ?? true)
                    {
                        sb.AppendItem(SnapSteeringMultiplierInnerRing, "SnapSteeringMultiplierInnerRing");
                    }
                    if (printMask?.MaxAimAssistDistance ?? true)
                    {
                        sb.AppendItem(MaxAimAssistDistance, "MaxAimAssistDistance");
                    }
                    if (printMask?.MeleeAimAssistEnabled ?? true)
                    {
                        sb.AppendItem(MeleeAimAssistEnabled, "MeleeAimAssistEnabled");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? OuterConeAngleDegrees;
            public Exception? InnerConeAngleDegrees;
            public Exception? SteeringDegreesPerSec;
            public Exception? SnapSteeringMultiplierOuterRing;
            public Exception? SnapSteeringMultiplierInnerRing;
            public Exception? MaxAimAssistDistance;
            public Exception? MeleeAimAssistEnabled;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MeleeAimAssistModel_FieldIndex enu = (MeleeAimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case MeleeAimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        return OuterConeAngleDegrees;
                    case MeleeAimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        return InnerConeAngleDegrees;
                    case MeleeAimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        return SteeringDegreesPerSec;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierOuterRing:
                        return SnapSteeringMultiplierOuterRing;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierInnerRing:
                        return SnapSteeringMultiplierInnerRing;
                    case MeleeAimAssistModel_FieldIndex.MaxAimAssistDistance:
                        return MaxAimAssistDistance;
                    case MeleeAimAssistModel_FieldIndex.MeleeAimAssistEnabled:
                        return MeleeAimAssistEnabled;
                    case MeleeAimAssistModel_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MeleeAimAssistModel_FieldIndex enu = (MeleeAimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case MeleeAimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        this.OuterConeAngleDegrees = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        this.InnerConeAngleDegrees = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        this.SteeringDegreesPerSec = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierOuterRing:
                        this.SnapSteeringMultiplierOuterRing = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierInnerRing:
                        this.SnapSteeringMultiplierInnerRing = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.MaxAimAssistDistance:
                        this.MaxAimAssistDistance = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.MeleeAimAssistEnabled:
                        this.MeleeAimAssistEnabled = ex;
                        break;
                    case MeleeAimAssistModel_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MeleeAimAssistModel_FieldIndex enu = (MeleeAimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case MeleeAimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        this.OuterConeAngleDegrees = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        this.InnerConeAngleDegrees = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        this.SteeringDegreesPerSec = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierOuterRing:
                        this.SnapSteeringMultiplierOuterRing = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierInnerRing:
                        this.SnapSteeringMultiplierInnerRing = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.MaxAimAssistDistance:
                        this.MaxAimAssistDistance = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.MeleeAimAssistEnabled:
                        this.MeleeAimAssistEnabled = (Exception?)obj;
                        break;
                    case MeleeAimAssistModel_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (OuterConeAngleDegrees != null) return true;
                if (InnerConeAngleDegrees != null) return true;
                if (SteeringDegreesPerSec != null) return true;
                if (SnapSteeringMultiplierOuterRing != null) return true;
                if (SnapSteeringMultiplierInnerRing != null) return true;
                if (MaxAimAssistDistance != null) return true;
                if (MeleeAimAssistEnabled != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(OuterConeAngleDegrees, "OuterConeAngleDegrees");
                }
                {
                    sb.AppendItem(InnerConeAngleDegrees, "InnerConeAngleDegrees");
                }
                {
                    sb.AppendItem(SteeringDegreesPerSec, "SteeringDegreesPerSec");
                }
                {
                    sb.AppendItem(SnapSteeringMultiplierOuterRing, "SnapSteeringMultiplierOuterRing");
                }
                {
                    sb.AppendItem(SnapSteeringMultiplierInnerRing, "SnapSteeringMultiplierInnerRing");
                }
                {
                    sb.AppendItem(MaxAimAssistDistance, "MaxAimAssistDistance");
                }
                {
                    sb.AppendItem(MeleeAimAssistEnabled, "MeleeAimAssistEnabled");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.OuterConeAngleDegrees = this.OuterConeAngleDegrees.Combine(rhs.OuterConeAngleDegrees);
                ret.InnerConeAngleDegrees = this.InnerConeAngleDegrees.Combine(rhs.InnerConeAngleDegrees);
                ret.SteeringDegreesPerSec = this.SteeringDegreesPerSec.Combine(rhs.SteeringDegreesPerSec);
                ret.SnapSteeringMultiplierOuterRing = this.SnapSteeringMultiplierOuterRing.Combine(rhs.SnapSteeringMultiplierOuterRing);
                ret.SnapSteeringMultiplierInnerRing = this.SnapSteeringMultiplierInnerRing.Combine(rhs.SnapSteeringMultiplierInnerRing);
                ret.MaxAimAssistDistance = this.MaxAimAssistDistance.Combine(rhs.MaxAimAssistDistance);
                ret.MeleeAimAssistEnabled = this.MeleeAimAssistEnabled.Combine(rhs.MeleeAimAssistEnabled);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool OuterConeAngleDegrees;
            public bool InnerConeAngleDegrees;
            public bool SteeringDegreesPerSec;
            public bool SnapSteeringMultiplierOuterRing;
            public bool SnapSteeringMultiplierInnerRing;
            public bool MaxAimAssistDistance;
            public bool MeleeAimAssistEnabled;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.OuterConeAngleDegrees = defaultOn;
                this.InnerConeAngleDegrees = defaultOn;
                this.SteeringDegreesPerSec = defaultOn;
                this.SnapSteeringMultiplierOuterRing = defaultOn;
                this.SnapSteeringMultiplierInnerRing = defaultOn;
                this.MaxAimAssistDistance = defaultOn;
                this.MeleeAimAssistEnabled = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((OuterConeAngleDegrees, null));
                ret.Add((InnerConeAngleDegrees, null));
                ret.Add((SteeringDegreesPerSec, null));
                ret.Add((SnapSteeringMultiplierOuterRing, null));
                ret.Add((SnapSteeringMultiplierInnerRing, null));
                ret.Add((MaxAimAssistDistance, null));
                ret.Add((MeleeAimAssistEnabled, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MeleeAimAssistModel_Registration.TriggeringRecordType;
        public MeleeAimAssistModel(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MeleeAimAssistModel(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal MeleeAimAssistModel(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MeleeAimAssistModel(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public MeleeAimAssistModel(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MeleeAimAssistModel>.ToString(this);
        }

        protected override Type LinkType => typeof(IMeleeAimAssistModel);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMeleeAimAssistModelGetter rhs) return false;
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMeleeAimAssistModelGetter? obj)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MeleeAimAssistModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MeleeAimAssistModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MeleeAimAssistModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MeleeAimAssistModel();
            ((MeleeAimAssistModelSetterCommon)((IMeleeAimAssistModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MeleeAimAssistModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MeleeAimAssistModelSetterCommon)((IMeleeAimAssistModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MeleeAimAssistModel GetNew()
        {
            return new MeleeAimAssistModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IMeleeAimAssistModel :
        ILoquiObjectSetter<IMeleeAimAssistModelInternal>,
        IMeleeAimAssistModelGetter,
        IStarfieldMajorRecordInternal
    {
        new Single OuterConeAngleDegrees { get; set; }
        new Single InnerConeAngleDegrees { get; set; }
        new Single SteeringDegreesPerSec { get; set; }
        new Single SnapSteeringMultiplierOuterRing { get; set; }
        new Single SnapSteeringMultiplierInnerRing { get; set; }
        new Single MaxAimAssistDistance { get; set; }
        new Boolean MeleeAimAssistEnabled { get; set; }
        new Single Unknown { get; set; }
    }

    public partial interface IMeleeAimAssistModelInternal :
        IStarfieldMajorRecordInternal,
        IMeleeAimAssistModel,
        IMeleeAimAssistModelGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.MAAM)]
    public partial interface IMeleeAimAssistModelGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IMeleeAimAssistModelGetter>,
        IMapsToGetter<IMeleeAimAssistModelGetter>
    {
        static new ILoquiRegistration StaticRegistration => MeleeAimAssistModel_Registration.Instance;
        Single OuterConeAngleDegrees { get; }
        Single InnerConeAngleDegrees { get; }
        Single SteeringDegreesPerSec { get; }
        Single SnapSteeringMultiplierOuterRing { get; }
        Single SnapSteeringMultiplierInnerRing { get; }
        Single MaxAimAssistDistance { get; }
        Boolean MeleeAimAssistEnabled { get; }
        Single Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MeleeAimAssistModelMixIn
    {
        public static void Clear(this IMeleeAimAssistModelInternal item)
        {
            ((MeleeAimAssistModelSetterCommon)((IMeleeAimAssistModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MeleeAimAssistModel.Mask<bool> GetEqualsMask(
            this IMeleeAimAssistModelGetter item,
            IMeleeAimAssistModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMeleeAimAssistModelGetter item,
            string? name = null,
            MeleeAimAssistModel.Mask<bool>? printMask = null)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMeleeAimAssistModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MeleeAimAssistModel.Mask<bool>? printMask = null)
        {
            ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMeleeAimAssistModelGetter item,
            IMeleeAimAssistModelGetter rhs,
            MeleeAimAssistModel.TranslationMask? equalsMask = null)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMeleeAimAssistModelInternal lhs,
            IMeleeAimAssistModelGetter rhs,
            out MeleeAimAssistModel.ErrorMask errorMask,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MeleeAimAssistModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMeleeAimAssistModelInternal lhs,
            IMeleeAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MeleeAimAssistModel DeepCopy(
            this IMeleeAimAssistModelGetter item,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            return ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MeleeAimAssistModel DeepCopy(
            this IMeleeAimAssistModelGetter item,
            out MeleeAimAssistModel.ErrorMask errorMask,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            return ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MeleeAimAssistModel DeepCopy(
            this IMeleeAimAssistModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MeleeAimAssistModel Duplicate(
            this IMeleeAimAssistModelGetter item,
            FormKey formKey,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MeleeAimAssistModel Duplicate(
            this IMeleeAimAssistModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMeleeAimAssistModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MeleeAimAssistModelSetterCommon)((IMeleeAimAssistModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MeleeAimAssistModel_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        OuterConeAngleDegrees = 7,
        InnerConeAngleDegrees = 8,
        SteeringDegreesPerSec = 9,
        SnapSteeringMultiplierOuterRing = 10,
        SnapSteeringMultiplierInnerRing = 11,
        MaxAimAssistDistance = 12,
        MeleeAimAssistEnabled = 13,
        Unknown = 14,
    }
    #endregion

    #region Registration
    internal partial class MeleeAimAssistModel_Registration : ILoquiRegistration
    {
        public static readonly MeleeAimAssistModel_Registration Instance = new MeleeAimAssistModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(MeleeAimAssistModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MeleeAimAssistModel.ErrorMask);

        public static readonly Type ClassType = typeof(MeleeAimAssistModel);

        public static readonly Type GetterType = typeof(IMeleeAimAssistModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMeleeAimAssistModel);

        public static readonly Type? InternalSetterType = typeof(IMeleeAimAssistModelInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.MeleeAimAssistModel";

        public const string Name = "MeleeAimAssistModel";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MAAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MAAM);
            var all = RecordCollection.Factory(
                RecordTypes.MAAM,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MeleeAimAssistModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MeleeAimAssistModelSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly MeleeAimAssistModelSetterCommon Instance = new MeleeAimAssistModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMeleeAimAssistModelInternal item)
        {
            ClearPartial();
            item.OuterConeAngleDegrees = default(Single);
            item.InnerConeAngleDegrees = default(Single);
            item.SteeringDegreesPerSec = default(Single);
            item.SnapSteeringMultiplierOuterRing = default(Single);
            item.SnapSteeringMultiplierInnerRing = default(Single);
            item.MaxAimAssistDistance = default(Single);
            item.MeleeAimAssistEnabled = default(Boolean);
            item.Unknown = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IMeleeAimAssistModelInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMeleeAimAssistModelInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMeleeAimAssistModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMeleeAimAssistModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMeleeAimAssistModelInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MeleeAimAssistModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MeleeAimAssistModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MeleeAimAssistModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MeleeAimAssistModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MeleeAimAssistModelCommon : StarfieldMajorRecordCommon
    {
        public new static readonly MeleeAimAssistModelCommon Instance = new MeleeAimAssistModelCommon();

        public MeleeAimAssistModel.Mask<bool> GetEqualsMask(
            IMeleeAimAssistModelGetter item,
            IMeleeAimAssistModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MeleeAimAssistModel.Mask<bool>(false);
            ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMeleeAimAssistModelGetter item,
            IMeleeAimAssistModelGetter rhs,
            MeleeAimAssistModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.OuterConeAngleDegrees = item.OuterConeAngleDegrees.EqualsWithin(rhs.OuterConeAngleDegrees);
            ret.InnerConeAngleDegrees = item.InnerConeAngleDegrees.EqualsWithin(rhs.InnerConeAngleDegrees);
            ret.SteeringDegreesPerSec = item.SteeringDegreesPerSec.EqualsWithin(rhs.SteeringDegreesPerSec);
            ret.SnapSteeringMultiplierOuterRing = item.SnapSteeringMultiplierOuterRing.EqualsWithin(rhs.SnapSteeringMultiplierOuterRing);
            ret.SnapSteeringMultiplierInnerRing = item.SnapSteeringMultiplierInnerRing.EqualsWithin(rhs.SnapSteeringMultiplierInnerRing);
            ret.MaxAimAssistDistance = item.MaxAimAssistDistance.EqualsWithin(rhs.MaxAimAssistDistance);
            ret.MeleeAimAssistEnabled = item.MeleeAimAssistEnabled == rhs.MeleeAimAssistEnabled;
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMeleeAimAssistModelGetter item,
            string? name = null,
            MeleeAimAssistModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMeleeAimAssistModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MeleeAimAssistModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MeleeAimAssistModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (MeleeAimAssistModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMeleeAimAssistModelGetter item,
            StructuredStringBuilder sb,
            MeleeAimAssistModel.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.OuterConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.OuterConeAngleDegrees, "OuterConeAngleDegrees");
            }
            if (printMask?.InnerConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.InnerConeAngleDegrees, "InnerConeAngleDegrees");
            }
            if (printMask?.SteeringDegreesPerSec ?? true)
            {
                sb.AppendItem(item.SteeringDegreesPerSec, "SteeringDegreesPerSec");
            }
            if (printMask?.SnapSteeringMultiplierOuterRing ?? true)
            {
                sb.AppendItem(item.SnapSteeringMultiplierOuterRing, "SnapSteeringMultiplierOuterRing");
            }
            if (printMask?.SnapSteeringMultiplierInnerRing ?? true)
            {
                sb.AppendItem(item.SnapSteeringMultiplierInnerRing, "SnapSteeringMultiplierInnerRing");
            }
            if (printMask?.MaxAimAssistDistance ?? true)
            {
                sb.AppendItem(item.MaxAimAssistDistance, "MaxAimAssistDistance");
            }
            if (printMask?.MeleeAimAssistEnabled ?? true)
            {
                sb.AppendItem(item.MeleeAimAssistEnabled, "MeleeAimAssistEnabled");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        public static MeleeAimAssistModel_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new MeleeAimAssistModel_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MeleeAimAssistModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMeleeAimAssistModelGetter? lhs,
            IMeleeAimAssistModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.OuterConeAngleDegrees) ?? true))
            {
                if (!lhs.OuterConeAngleDegrees.EqualsWithin(rhs.OuterConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.InnerConeAngleDegrees) ?? true))
            {
                if (!lhs.InnerConeAngleDegrees.EqualsWithin(rhs.InnerConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SteeringDegreesPerSec) ?? true))
            {
                if (!lhs.SteeringDegreesPerSec.EqualsWithin(rhs.SteeringDegreesPerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierOuterRing) ?? true))
            {
                if (!lhs.SnapSteeringMultiplierOuterRing.EqualsWithin(rhs.SnapSteeringMultiplierOuterRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierInnerRing) ?? true))
            {
                if (!lhs.SnapSteeringMultiplierInnerRing.EqualsWithin(rhs.SnapSteeringMultiplierInnerRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.MaxAimAssistDistance) ?? true))
            {
                if (!lhs.MaxAimAssistDistance.EqualsWithin(rhs.MaxAimAssistDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.MeleeAimAssistEnabled) ?? true))
            {
                if (lhs.MeleeAimAssistEnabled != rhs.MeleeAimAssistEnabled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMeleeAimAssistModelGetter?)lhs,
                rhs: rhs as IMeleeAimAssistModelGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMeleeAimAssistModelGetter?)lhs,
                rhs: rhs as IMeleeAimAssistModelGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMeleeAimAssistModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.OuterConeAngleDegrees);
            hash.Add(item.InnerConeAngleDegrees);
            hash.Add(item.SteeringDegreesPerSec);
            hash.Add(item.SnapSteeringMultiplierOuterRing);
            hash.Add(item.SnapSteeringMultiplierInnerRing);
            hash.Add(item.MaxAimAssistDistance);
            hash.Add(item.MeleeAimAssistEnabled);
            hash.Add(item.Unknown);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IMeleeAimAssistModelGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMeleeAimAssistModelGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MeleeAimAssistModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMeleeAimAssistModelGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public MeleeAimAssistModel Duplicate(
            IMeleeAimAssistModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MeleeAimAssistModel(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMeleeAimAssistModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMeleeAimAssistModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MeleeAimAssistModelSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly MeleeAimAssistModelSetterTranslationCommon Instance = new MeleeAimAssistModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMeleeAimAssistModelInternal item,
            IMeleeAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMeleeAimAssistModel item,
            IMeleeAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.OuterConeAngleDegrees) ?? true))
            {
                item.OuterConeAngleDegrees = rhs.OuterConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.InnerConeAngleDegrees) ?? true))
            {
                item.InnerConeAngleDegrees = rhs.InnerConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SteeringDegreesPerSec) ?? true))
            {
                item.SteeringDegreesPerSec = rhs.SteeringDegreesPerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierOuterRing) ?? true))
            {
                item.SnapSteeringMultiplierOuterRing = rhs.SnapSteeringMultiplierOuterRing;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.SnapSteeringMultiplierInnerRing) ?? true))
            {
                item.SnapSteeringMultiplierInnerRing = rhs.SnapSteeringMultiplierInnerRing;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.MaxAimAssistDistance) ?? true))
            {
                item.MaxAimAssistDistance = rhs.MaxAimAssistDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.MeleeAimAssistEnabled) ?? true))
            {
                item.MeleeAimAssistEnabled = rhs.MeleeAimAssistEnabled;
            }
            if ((copyMask?.GetShouldTranslate((int)MeleeAimAssistModel_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMeleeAimAssistModel item,
            IMeleeAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMeleeAimAssistModelInternal)item,
                rhs: (IMeleeAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMeleeAimAssistModel)item,
                rhs: (IMeleeAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMeleeAimAssistModelInternal)item,
                rhs: (IMeleeAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMeleeAimAssistModel)item,
                rhs: (IMeleeAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MeleeAimAssistModel DeepCopy(
            IMeleeAimAssistModelGetter item,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            MeleeAimAssistModel ret = (MeleeAimAssistModel)((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MeleeAimAssistModel DeepCopy(
            IMeleeAimAssistModelGetter item,
            out MeleeAimAssistModel.ErrorMask errorMask,
            MeleeAimAssistModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MeleeAimAssistModel ret = (MeleeAimAssistModel)((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MeleeAimAssistModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MeleeAimAssistModel DeepCopy(
            IMeleeAimAssistModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MeleeAimAssistModel ret = (MeleeAimAssistModel)((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((MeleeAimAssistModelSetterTranslationCommon)((IMeleeAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MeleeAimAssistModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MeleeAimAssistModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MeleeAimAssistModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MeleeAimAssistModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MeleeAimAssistModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MeleeAimAssistModelSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MeleeAimAssistModelBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MeleeAimAssistModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMeleeAimAssistModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.SNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OuterConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InnerConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SteeringDegreesPerSec);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SnapSteeringMultiplierOuterRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SnapSteeringMultiplierInnerRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MaxAimAssistDistance);
                writer.Write(item.MeleeAimAssistEnabled);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
            }
        }

        public void Write(
            MutagenWriter writer,
            IMeleeAimAssistModelGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.MAAM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMeleeAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMeleeAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMeleeAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MeleeAimAssistModelBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly MeleeAimAssistModelBinaryCreateTranslation Instance = new MeleeAimAssistModelBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MAAM;
        public static ParseResult FillBinaryRecordTypes(
            IMeleeAimAssistModelInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.OuterConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.InnerConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SteeringDegreesPerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SnapSteeringMultiplierOuterRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SnapSteeringMultiplierInnerRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MaxAimAssistDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.MeleeAimAssistEnabled = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)MeleeAimAssistModel_FieldIndex.Unknown;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MeleeAimAssistModelBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MeleeAimAssistModelBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IMeleeAimAssistModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MeleeAimAssistModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MeleeAimAssistModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MeleeAimAssistModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MeleeAimAssistModelSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MeleeAimAssistModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MeleeAimAssistModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMeleeAimAssistModel);


        private RangeInt32? _SNAMLocation;
        #region OuterConeAngleDegrees
        private int _OuterConeAngleDegreesLocation => _SNAMLocation!.Value.Min;
        private bool _OuterConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single OuterConeAngleDegrees => _OuterConeAngleDegrees_IsSet ? _recordData.Slice(_OuterConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region InnerConeAngleDegrees
        private int _InnerConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x4;
        private bool _InnerConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single InnerConeAngleDegrees => _InnerConeAngleDegrees_IsSet ? _recordData.Slice(_InnerConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region SteeringDegreesPerSec
        private int _SteeringDegreesPerSecLocation => _SNAMLocation!.Value.Min + 0x8;
        private bool _SteeringDegreesPerSec_IsSet => _SNAMLocation.HasValue;
        public Single SteeringDegreesPerSec => _SteeringDegreesPerSec_IsSet ? _recordData.Slice(_SteeringDegreesPerSecLocation, 4).Float() : default(Single);
        #endregion
        #region SnapSteeringMultiplierOuterRing
        private int _SnapSteeringMultiplierOuterRingLocation => _SNAMLocation!.Value.Min + 0xC;
        private bool _SnapSteeringMultiplierOuterRing_IsSet => _SNAMLocation.HasValue;
        public Single SnapSteeringMultiplierOuterRing => _SnapSteeringMultiplierOuterRing_IsSet ? _recordData.Slice(_SnapSteeringMultiplierOuterRingLocation, 4).Float() : default(Single);
        #endregion
        #region SnapSteeringMultiplierInnerRing
        private int _SnapSteeringMultiplierInnerRingLocation => _SNAMLocation!.Value.Min + 0x10;
        private bool _SnapSteeringMultiplierInnerRing_IsSet => _SNAMLocation.HasValue;
        public Single SnapSteeringMultiplierInnerRing => _SnapSteeringMultiplierInnerRing_IsSet ? _recordData.Slice(_SnapSteeringMultiplierInnerRingLocation, 4).Float() : default(Single);
        #endregion
        #region MaxAimAssistDistance
        private int _MaxAimAssistDistanceLocation => _SNAMLocation!.Value.Min + 0x14;
        private bool _MaxAimAssistDistance_IsSet => _SNAMLocation.HasValue;
        public Single MaxAimAssistDistance => _MaxAimAssistDistance_IsSet ? _recordData.Slice(_MaxAimAssistDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeAimAssistEnabled
        private int _MeleeAimAssistEnabledLocation => _SNAMLocation!.Value.Min + 0x18;
        private bool _MeleeAimAssistEnabled_IsSet => _SNAMLocation.HasValue;
        public Boolean MeleeAimAssistEnabled => _MeleeAimAssistEnabled_IsSet ? _recordData.Slice(_MeleeAimAssistEnabledLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region Unknown
        private int _UnknownLocation => _SNAMLocation!.Value.Min + 0x19;
        private bool _Unknown_IsSet => _SNAMLocation.HasValue;
        public Single Unknown => _Unknown_IsSet ? _recordData.Slice(_UnknownLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MeleeAimAssistModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMeleeAimAssistModelGetter MeleeAimAssistModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MeleeAimAssistModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMeleeAimAssistModelGetter MeleeAimAssistModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MeleeAimAssistModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    _SNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)MeleeAimAssistModel_FieldIndex.Unknown;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MeleeAimAssistModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MeleeAimAssistModel>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMeleeAimAssistModelGetter rhs) return false;
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMeleeAimAssistModelGetter? obj)
        {
            return ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MeleeAimAssistModelCommon)((IMeleeAimAssistModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

