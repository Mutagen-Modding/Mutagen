/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CollisionLayer :
        StarfieldMajorRecord,
        ICollisionLayerInternal,
        IEquatable<ICollisionLayerGetter>,
        ILoquiObjectSetter<CollisionLayer>
    {
        #region Ctor
        protected CollisionLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICollisionLayerGetter.Description => this.Description;
        #endregion
        #region Context
        public String? Context { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICollisionLayerGetter.Context => this.Context;
        #endregion
        #region Index
        public UInt32 Index { get; set; } = default(UInt32);
        #endregion
        #region DebugColor
        public Color? DebugColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? ICollisionLayerGetter.DebugColor => this.DebugColor;
        #endregion
        #region Flags
        public CollisionLayer.Flag Flags { get; set; } = default(CollisionLayer.Flag);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        public String Name { get; set; } = string.Empty;
        #endregion
        #region CollidesWith
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ICollisionLayerGetter>>? _CollidesWith;
        public ExtendedList<IFormLinkGetter<ICollisionLayerGetter>>? CollidesWith
        {
            get => this._CollidesWith;
            set => this._CollidesWith = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ICollisionLayerGetter>>? ICollisionLayerGetter.CollidesWith => _CollidesWith;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CollisionLayerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Description = initialValue;
                this.Context = initialValue;
                this.Index = initialValue;
                this.DebugColor = initialValue;
                this.Flags = initialValue;
                this.Name = initialValue;
                this.CollidesWith = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Description,
                TItem Context,
                TItem Index,
                TItem DebugColor,
                TItem Flags,
                TItem Name,
                TItem CollidesWith)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Description = Description;
                this.Context = Context;
                this.Index = Index;
                this.DebugColor = DebugColor;
                this.Flags = Flags;
                this.Name = Name;
                this.CollidesWith = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CollidesWith, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Description;
            public TItem Context;
            public TItem Index;
            public TItem DebugColor;
            public TItem Flags;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CollidesWith;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Context, rhs.Context)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.DebugColor, rhs.DebugColor)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.CollidesWith, rhs.CollidesWith)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Description);
                hash.Add(this.Context);
                hash.Add(this.Index);
                hash.Add(this.DebugColor);
                hash.Add(this.Flags);
                hash.Add(this.Name);
                hash.Add(this.CollidesWith);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Context)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.DebugColor)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Name)) return false;
                if (this.CollidesWith != null)
                {
                    if (!eval(this.CollidesWith.Overall)) return false;
                    if (this.CollidesWith.Specific != null)
                    {
                        foreach (var item in this.CollidesWith.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Context)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.DebugColor)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Name)) return true;
                if (this.CollidesWith != null)
                {
                    if (eval(this.CollidesWith.Overall)) return true;
                    if (this.CollidesWith.Specific != null)
                    {
                        foreach (var item in this.CollidesWith.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CollisionLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Description = eval(this.Description);
                obj.Context = eval(this.Context);
                obj.Index = eval(this.Index);
                obj.DebugColor = eval(this.DebugColor);
                obj.Flags = eval(this.Flags);
                obj.Name = eval(this.Name);
                if (CollidesWith != null)
                {
                    obj.CollidesWith = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CollidesWith.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CollidesWith.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CollidesWith.Specific = l;
                        foreach (var item in CollidesWith.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CollisionLayer.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CollisionLayer.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CollisionLayer.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.Context ?? true)
                    {
                        sb.AppendItem(Context, "Context");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.DebugColor ?? true)
                    {
                        sb.AppendItem(DebugColor, "DebugColor");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.CollidesWith?.Overall ?? true)
                        && CollidesWith is {} CollidesWithItem)
                    {
                        sb.AppendLine("CollidesWith =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CollidesWithItem.Overall);
                            if (CollidesWithItem.Specific != null)
                            {
                                foreach (var subItem in CollidesWithItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Description;
            public Exception? Context;
            public Exception? Index;
            public Exception? DebugColor;
            public Exception? Flags;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CollidesWith;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        return Description;
                    case CollisionLayer_FieldIndex.Context:
                        return Context;
                    case CollisionLayer_FieldIndex.Index:
                        return Index;
                    case CollisionLayer_FieldIndex.DebugColor:
                        return DebugColor;
                    case CollisionLayer_FieldIndex.Flags:
                        return Flags;
                    case CollisionLayer_FieldIndex.Name:
                        return Name;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        return CollidesWith;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case CollisionLayer_FieldIndex.Context:
                        this.Context = ex;
                        break;
                    case CollisionLayer_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case CollisionLayer_FieldIndex.DebugColor:
                        this.DebugColor = ex;
                        break;
                    case CollisionLayer_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CollisionLayer_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        this.CollidesWith = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CollisionLayer_FieldIndex enu = (CollisionLayer_FieldIndex)index;
                switch (enu)
                {
                    case CollisionLayer_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Context:
                        this.Context = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.DebugColor:
                        this.DebugColor = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case CollisionLayer_FieldIndex.CollidesWith:
                        this.CollidesWith = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Description != null) return true;
                if (Context != null) return true;
                if (Index != null) return true;
                if (DebugColor != null) return true;
                if (Flags != null) return true;
                if (Name != null) return true;
                if (CollidesWith != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(Context, "Context");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(DebugColor, "DebugColor");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (CollidesWith is {} CollidesWithItem)
                {
                    sb.AppendLine("CollidesWith =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CollidesWithItem.Overall);
                        if (CollidesWithItem.Specific != null)
                        {
                            foreach (var subItem in CollidesWithItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Context = this.Context.Combine(rhs.Context);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.DebugColor = this.DebugColor.Combine(rhs.DebugColor);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.CollidesWith = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.CollidesWith?.Overall, rhs.CollidesWith?.Overall), Noggog.ExceptionExt.Combine(this.CollidesWith?.Specific, rhs.CollidesWith?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Description;
            public bool Context;
            public bool Index;
            public bool DebugColor;
            public bool Flags;
            public bool Name;
            public bool CollidesWith;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Description = defaultOn;
                this.Context = defaultOn;
                this.Index = defaultOn;
                this.DebugColor = defaultOn;
                this.Flags = defaultOn;
                this.Name = defaultOn;
                this.CollidesWith = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Description, null));
                ret.Add((Context, null));
                ret.Add((Index, null));
                ret.Add((DebugColor, null));
                ret.Add((Flags, null));
                ret.Add((Name, null));
                ret.Add((CollidesWith, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CollisionLayer_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CollisionLayerCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CollisionLayerSetterCommon.Instance.RemapLinks(this, mapping);
        public CollisionLayer(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private CollisionLayer(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal CollisionLayer(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CollisionLayer(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public CollisionLayer(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<CollisionLayer>.ToString(this);
        }

        protected override Type LinkType => typeof(ICollisionLayer);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICollisionLayerGetter rhs) return false;
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICollisionLayerGetter? obj)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CollisionLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CollisionLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static CollisionLayer CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CollisionLayer();
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CollisionLayer item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CollisionLayer GetNew()
        {
            return new CollisionLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface ICollisionLayer :
        ICollisionLayerGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICollisionLayerInternal>,
        INamedRequired,
        IStarfieldMajorRecordInternal
    {
        new String? Description { get; set; }
        new String? Context { get; set; }
        new UInt32 Index { get; set; }
        new Color? DebugColor { get; set; }
        new CollisionLayer.Flag Flags { get; set; }
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        new String Name { get; set; }
        new ExtendedList<IFormLinkGetter<ICollisionLayerGetter>>? CollidesWith { get; set; }
    }

    public partial interface ICollisionLayerInternal :
        IStarfieldMajorRecordInternal,
        ICollisionLayer,
        ICollisionLayerGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.COLL)]
    public partial interface ICollisionLayerGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICollisionLayerGetter>,
        IMapsToGetter<ICollisionLayerGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => CollisionLayer_Registration.Instance;
        String? Description { get; }
        String? Context { get; }
        UInt32 Index { get; }
        Color? DebugColor { get; }
        CollisionLayer.Flag Flags { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter
        /// </summary>
        String Name { get; }
        #endregion
        IReadOnlyList<IFormLinkGetter<ICollisionLayerGetter>>? CollidesWith { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CollisionLayerMixIn
    {
        public static void Clear(this ICollisionLayerInternal item)
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CollisionLayer.Mask<bool> GetEqualsMask(
            this ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICollisionLayerGetter item,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICollisionLayerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            CollisionLayer.TranslationMask? equalsMask = null)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICollisionLayerInternal lhs,
            ICollisionLayerGetter rhs,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICollisionLayerInternal lhs,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CollisionLayer DeepCopy(
            this ICollisionLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CollisionLayer Duplicate(
            this ICollisionLayerGetter item,
            FormKey formKey,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static CollisionLayer Duplicate(
            this ICollisionLayerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICollisionLayerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CollisionLayerSetterCommon)((ICollisionLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CollisionLayer_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Description = 7,
        Context = 8,
        Index = 9,
        DebugColor = 10,
        Flags = 11,
        Name = 12,
        CollidesWith = 13,
    }
    #endregion

    #region Registration
    internal partial class CollisionLayer_Registration : ILoquiRegistration
    {
        public static readonly CollisionLayer_Registration Instance = new CollisionLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(CollisionLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CollisionLayer.ErrorMask);

        public static readonly Type ClassType = typeof(CollisionLayer);

        public static readonly Type GetterType = typeof(ICollisionLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICollisionLayer);

        public static readonly Type? InternalSetterType = typeof(ICollisionLayerInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.CollisionLayer";

        public const string Name = "CollisionLayer";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.COLL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.COLL);
            var all = RecordCollection.Factory(
                RecordTypes.COLL,
                RecordTypes.DESC,
                RecordTypes.NLDT,
                RecordTypes.BNAM,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.MNAM,
                RecordTypes.CNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CollisionLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CollisionLayerSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly CollisionLayerSetterCommon Instance = new CollisionLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICollisionLayerInternal item)
        {
            ClearPartial();
            item.Description = default;
            item.Context = default;
            item.Index = default(UInt32);
            item.DebugColor = default;
            item.Flags = default(CollisionLayer.Flag);
            item.Name = string.Empty;
            item.CollidesWith = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ICollisionLayerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICollisionLayerInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICollisionLayer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.CollidesWith?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICollisionLayerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICollisionLayerInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CollisionLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CollisionLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CollisionLayer)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CollisionLayer)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CollisionLayerCommon : StarfieldMajorRecordCommon
    {
        public new static readonly CollisionLayerCommon Instance = new CollisionLayerCommon();

        public CollisionLayer.Mask<bool> GetEqualsMask(
            ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CollisionLayer.Mask<bool>(false);
            ((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICollisionLayerGetter item,
            ICollisionLayerGetter rhs,
            CollisionLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Context = string.Equals(item.Context, rhs.Context);
            ret.Index = item.Index == rhs.Index;
            ret.DebugColor = item.DebugColor.ColorOnlyEquals(rhs.DebugColor);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.CollidesWith = item.CollidesWith.CollectionEqualsHelper(
                rhs.CollidesWith,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICollisionLayerGetter item,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICollisionLayerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CollisionLayer =>");
            }
            else
            {
                sb.AppendLine($"{name} (CollisionLayer) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICollisionLayerGetter item,
            StructuredStringBuilder sb,
            CollisionLayer.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Context ?? true)
                && item.Context is {} ContextItem)
            {
                sb.AppendItem(ContextItem, "Context");
            }
            if (printMask?.Index ?? true)
            {
                sb.AppendItem(item.Index, "Index");
            }
            if ((printMask?.DebugColor ?? true)
                && item.DebugColor is {} DebugColorItem)
            {
                sb.AppendItem(DebugColorItem, "DebugColor");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.CollidesWith?.Overall ?? true)
                && item.CollidesWith is {} CollidesWithItem)
            {
                sb.AppendLine("CollidesWith =>");
                using (sb.Brace())
                {
                    foreach (var subItem in CollidesWithItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static CollisionLayer_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (CollisionLayer_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (CollisionLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new CollisionLayer_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CollisionLayer_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CollisionLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICollisionLayerGetter? lhs,
            ICollisionLayerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Context) ?? true))
            {
                if (!string.Equals(lhs.Context, rhs.Context)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.DebugColor) ?? true))
            {
                if (!lhs.DebugColor.ColorOnlyEquals(rhs.DebugColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.CollidesWith) ?? true))
            {
                if (!lhs.CollidesWith.SequenceEqualNullable(rhs.CollidesWith)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICollisionLayerGetter?)lhs,
                rhs: rhs as ICollisionLayerGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICollisionLayerGetter?)lhs,
                rhs: rhs as ICollisionLayerGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICollisionLayerGetter item)
        {
            var hash = new HashCode();
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            if (item.Context is {} Contextitem)
            {
                hash.Add(Contextitem);
            }
            hash.Add(item.Index);
            if (item.DebugColor is {} DebugColoritem)
            {
                hash.Add(DebugColoritem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Name);
            hash.Add(item.CollidesWith);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ICollisionLayerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICollisionLayerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CollisionLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICollisionLayerGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.CollidesWith is {} CollidesWithItem)
            {
                foreach (var item in CollidesWithItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public CollisionLayer Duplicate(
            ICollisionLayerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CollisionLayer(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICollisionLayerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICollisionLayerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CollisionLayerSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly CollisionLayerSetterTranslationCommon Instance = new CollisionLayerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICollisionLayerInternal item,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICollisionLayer item,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Context) ?? true))
            {
                item.Context = rhs.Context;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.DebugColor) ?? true))
            {
                item.DebugColor = rhs.DebugColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)CollisionLayer_FieldIndex.CollidesWith) ?? true))
            {
                errorMask?.PushIndex((int)CollisionLayer_FieldIndex.CollidesWith);
                try
                {
                    if ((rhs.CollidesWith != null))
                    {
                        item.CollidesWith = 
                            rhs.CollidesWith
                                .Select(b => (IFormLinkGetter<ICollisionLayerGetter>)new FormLink<ICollisionLayerGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ICollisionLayerGetter>>();
                    }
                    else
                    {
                        item.CollidesWith = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICollisionLayer item,
            ICollisionLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICollisionLayerInternal)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICollisionLayer)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICollisionLayerInternal)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICollisionLayer)item,
                rhs: (ICollisionLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            out CollisionLayer.ErrorMask errorMask,
            CollisionLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CollisionLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CollisionLayer DeepCopy(
            ICollisionLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CollisionLayer ret = (CollisionLayer)((CollisionLayerCommon)((ICollisionLayerGetter)item).CommonInstance()!).GetNew();
            ((CollisionLayerSetterTranslationCommon)((ICollisionLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CollisionLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollisionLayer_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CollisionLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CollisionLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CollisionLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CollisionLayerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CollisionLayerBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CollisionLayerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICollisionLayerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Context,
                header: translationParams.ConvertToCustom(RecordTypes.NLDT),
                binaryType: StringBinaryType.NullTerminate);
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DebugColor,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            EnumBinaryTranslation<CollisionLayer.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ICollisionLayerGetter>>.Instance.Write(
                writer: writer,
                items: item.CollidesWith,
                recordType: translationParams.ConvertToCustom(RecordTypes.CNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ICollisionLayerGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICollisionLayerGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.COLL,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICollisionLayerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CollisionLayerBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly CollisionLayerBinaryCreateTranslation Instance = new CollisionLayerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.COLL;
        public static ParseResult FillBinaryRecordTypes(
            ICollisionLayerInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)CollisionLayer_FieldIndex.Description;
                }
                case RecordTypeInts.NLDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Context = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)CollisionLayer_FieldIndex.Context;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)CollisionLayer_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DebugColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)CollisionLayer_FieldIndex.DebugColor;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<CollisionLayer.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)CollisionLayer_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)CollisionLayer_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CollidesWith = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ICollisionLayerGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ICollisionLayerGetter>>();
                    return (int)CollisionLayer_FieldIndex.CollidesWith;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CollisionLayerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CollisionLayerBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ICollisionLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CollisionLayer_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CollisionLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CollisionLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CollisionLayerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CollisionLayerCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CollisionLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CollisionLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICollisionLayer);


        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Context
        private int? _ContextLocation;
        public String? Context => _ContextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ContextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt32 Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        #region DebugColor
        private int? _DebugColorLocation;
        public Color? DebugColor => _DebugColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DebugColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public CollisionLayer.Flag Flags => _FlagsLocation.HasValue ? (CollisionLayer.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(CollisionLayer.Flag);
        #endregion
        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ICollisionLayerGetter>>? CollidesWith { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CollisionLayerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICollisionLayerGetter CollisionLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CollisionLayerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICollisionLayerGetter CollisionLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CollisionLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Description;
                }
                case RecordTypeInts.NLDT:
                {
                    _ContextLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Context;
                }
                case RecordTypeInts.BNAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    _DebugColorLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.DebugColor;
                }
                case RecordTypeInts.GNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)CollisionLayer_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    this.CollidesWith = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ICollisionLayerGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ICollisionLayerGetter>(p, s));
                    return (int)CollisionLayer_FieldIndex.CollidesWith;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CollisionLayerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<CollisionLayer>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICollisionLayerGetter rhs) return false;
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICollisionLayerGetter? obj)
        {
            return ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CollisionLayerCommon)((ICollisionLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

