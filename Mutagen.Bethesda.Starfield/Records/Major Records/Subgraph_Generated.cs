/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Subgraph :
        IEquatable<ISubgraphGetter>,
        ILoquiObjectSetter<Subgraph>,
        ISubgraph
    {
        #region Ctor
        public Subgraph()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Race
        private readonly IFormLinkNullable<IRaceGetter> _Race = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> ISubgraphGetter.Race => this.Race;
        #endregion
        #region ActorKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _ActorKeywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> ActorKeywords
        {
            get => this._ActorKeywords;
            init => this._ActorKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> ISubgraphGetter.ActorKeywords => _ActorKeywords;
        #endregion

        #endregion
        #region BehaviorGraph
        public String? BehaviorGraph { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISubgraphGetter.BehaviorGraph => this.BehaviorGraph;
        #endregion
        #region AnimationPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _AnimationPaths = new ExtendedList<String>();
        public ExtendedList<String> AnimationPaths
        {
            get => this._AnimationPaths;
            init => this._AnimationPaths = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> ISubgraphGetter.AnimationPaths => _AnimationPaths;
        #endregion

        #endregion
        #region TargetKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _TargetKeywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> TargetKeywords
        {
            get => this._TargetKeywords;
            init => this._TargetKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> ISubgraphGetter.TargetKeywords => _TargetKeywords;
        #endregion

        #endregion
        #region Role
        public Subgraph.SubgraphRole Role { get; set; } = default(Subgraph.SubgraphRole);
        #endregion
        #region Perspective
        public Perspective Perspective { get; set; } = default(Perspective);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SubgraphMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISubgraphGetter rhs) return false;
            return ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISubgraphGetter? obj)
        {
            return ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Race = initialValue;
                this.ActorKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.BehaviorGraph = initialValue;
                this.AnimationPaths = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.TargetKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Role = initialValue;
                this.Perspective = initialValue;
            }

            public Mask(
                TItem Race,
                TItem ActorKeywords,
                TItem BehaviorGraph,
                TItem AnimationPaths,
                TItem TargetKeywords,
                TItem Role,
                TItem Perspective)
            {
                this.Race = Race;
                this.ActorKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorKeywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.BehaviorGraph = BehaviorGraph;
                this.AnimationPaths = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AnimationPaths, Enumerable.Empty<(int Index, TItem Value)>());
                this.TargetKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TargetKeywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Role = Role;
                this.Perspective = Perspective;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorKeywords;
            public TItem BehaviorGraph;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AnimationPaths;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TargetKeywords;
            public TItem Role;
            public TItem Perspective;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.ActorKeywords, rhs.ActorKeywords)) return false;
                if (!object.Equals(this.BehaviorGraph, rhs.BehaviorGraph)) return false;
                if (!object.Equals(this.AnimationPaths, rhs.AnimationPaths)) return false;
                if (!object.Equals(this.TargetKeywords, rhs.TargetKeywords)) return false;
                if (!object.Equals(this.Role, rhs.Role)) return false;
                if (!object.Equals(this.Perspective, rhs.Perspective)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Race);
                hash.Add(this.ActorKeywords);
                hash.Add(this.BehaviorGraph);
                hash.Add(this.AnimationPaths);
                hash.Add(this.TargetKeywords);
                hash.Add(this.Role);
                hash.Add(this.Perspective);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Race)) return false;
                if (this.ActorKeywords != null)
                {
                    if (!eval(this.ActorKeywords.Overall)) return false;
                    if (this.ActorKeywords.Specific != null)
                    {
                        foreach (var item in this.ActorKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BehaviorGraph)) return false;
                if (this.AnimationPaths != null)
                {
                    if (!eval(this.AnimationPaths.Overall)) return false;
                    if (this.AnimationPaths.Specific != null)
                    {
                        foreach (var item in this.AnimationPaths.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TargetKeywords != null)
                {
                    if (!eval(this.TargetKeywords.Overall)) return false;
                    if (this.TargetKeywords.Specific != null)
                    {
                        foreach (var item in this.TargetKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Role)) return false;
                if (!eval(this.Perspective)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Race)) return true;
                if (this.ActorKeywords != null)
                {
                    if (eval(this.ActorKeywords.Overall)) return true;
                    if (this.ActorKeywords.Specific != null)
                    {
                        foreach (var item in this.ActorKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.BehaviorGraph)) return true;
                if (this.AnimationPaths != null)
                {
                    if (eval(this.AnimationPaths.Overall)) return true;
                    if (this.AnimationPaths.Specific != null)
                    {
                        foreach (var item in this.AnimationPaths.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TargetKeywords != null)
                {
                    if (eval(this.TargetKeywords.Overall)) return true;
                    if (this.TargetKeywords.Specific != null)
                    {
                        foreach (var item in this.TargetKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Role)) return true;
                if (eval(this.Perspective)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Subgraph.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Race = eval(this.Race);
                if (ActorKeywords != null)
                {
                    obj.ActorKeywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorKeywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorKeywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorKeywords.Specific = l;
                        foreach (var item in ActorKeywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BehaviorGraph = eval(this.BehaviorGraph);
                if (AnimationPaths != null)
                {
                    obj.AnimationPaths = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AnimationPaths.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AnimationPaths.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AnimationPaths.Specific = l;
                        foreach (var item in AnimationPaths.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (TargetKeywords != null)
                {
                    obj.TargetKeywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TargetKeywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TargetKeywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TargetKeywords.Specific = l;
                        foreach (var item in TargetKeywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Role = eval(this.Role);
                obj.Perspective = eval(this.Perspective);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Subgraph.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Subgraph.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Subgraph.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if ((printMask?.ActorKeywords?.Overall ?? true)
                        && ActorKeywords is {} ActorKeywordsItem)
                    {
                        sb.AppendLine("ActorKeywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorKeywordsItem.Overall);
                            if (ActorKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in ActorKeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BehaviorGraph ?? true)
                    {
                        sb.AppendItem(BehaviorGraph, "BehaviorGraph");
                    }
                    if ((printMask?.AnimationPaths?.Overall ?? true)
                        && AnimationPaths is {} AnimationPathsItem)
                    {
                        sb.AppendLine("AnimationPaths =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AnimationPathsItem.Overall);
                            if (AnimationPathsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationPathsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.TargetKeywords?.Overall ?? true)
                        && TargetKeywords is {} TargetKeywordsItem)
                    {
                        sb.AppendLine("TargetKeywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TargetKeywordsItem.Overall);
                            if (TargetKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in TargetKeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Role ?? true)
                    {
                        sb.AppendItem(Role, "Role");
                    }
                    if (printMask?.Perspective ?? true)
                    {
                        sb.AppendItem(Perspective, "Perspective");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorKeywords;
            public Exception? BehaviorGraph;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AnimationPaths;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TargetKeywords;
            public Exception? Role;
            public Exception? Perspective;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Subgraph_FieldIndex enu = (Subgraph_FieldIndex)index;
                switch (enu)
                {
                    case Subgraph_FieldIndex.Race:
                        return Race;
                    case Subgraph_FieldIndex.ActorKeywords:
                        return ActorKeywords;
                    case Subgraph_FieldIndex.BehaviorGraph:
                        return BehaviorGraph;
                    case Subgraph_FieldIndex.AnimationPaths:
                        return AnimationPaths;
                    case Subgraph_FieldIndex.TargetKeywords:
                        return TargetKeywords;
                    case Subgraph_FieldIndex.Role:
                        return Role;
                    case Subgraph_FieldIndex.Perspective:
                        return Perspective;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Subgraph_FieldIndex enu = (Subgraph_FieldIndex)index;
                switch (enu)
                {
                    case Subgraph_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Subgraph_FieldIndex.ActorKeywords:
                        this.ActorKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Subgraph_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = ex;
                        break;
                    case Subgraph_FieldIndex.AnimationPaths:
                        this.AnimationPaths = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Subgraph_FieldIndex.TargetKeywords:
                        this.TargetKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Subgraph_FieldIndex.Role:
                        this.Role = ex;
                        break;
                    case Subgraph_FieldIndex.Perspective:
                        this.Perspective = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Subgraph_FieldIndex enu = (Subgraph_FieldIndex)index;
                switch (enu)
                {
                    case Subgraph_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Subgraph_FieldIndex.ActorKeywords:
                        this.ActorKeywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Subgraph_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = (Exception?)obj;
                        break;
                    case Subgraph_FieldIndex.AnimationPaths:
                        this.AnimationPaths = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Subgraph_FieldIndex.TargetKeywords:
                        this.TargetKeywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Subgraph_FieldIndex.Role:
                        this.Role = (Exception?)obj;
                        break;
                    case Subgraph_FieldIndex.Perspective:
                        this.Perspective = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Race != null) return true;
                if (ActorKeywords != null) return true;
                if (BehaviorGraph != null) return true;
                if (AnimationPaths != null) return true;
                if (TargetKeywords != null) return true;
                if (Role != null) return true;
                if (Perspective != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Race, "Race");
                }
                if (ActorKeywords is {} ActorKeywordsItem)
                {
                    sb.AppendLine("ActorKeywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorKeywordsItem.Overall);
                        if (ActorKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in ActorKeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BehaviorGraph, "BehaviorGraph");
                }
                if (AnimationPaths is {} AnimationPathsItem)
                {
                    sb.AppendLine("AnimationPaths =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AnimationPathsItem.Overall);
                        if (AnimationPathsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationPathsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (TargetKeywords is {} TargetKeywordsItem)
                {
                    sb.AppendLine("TargetKeywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TargetKeywordsItem.Overall);
                        if (TargetKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in TargetKeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Role, "Role");
                }
                {
                    sb.AppendItem(Perspective, "Perspective");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Race = this.Race.Combine(rhs.Race);
                ret.ActorKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorKeywords?.Overall, rhs.ActorKeywords?.Overall), Noggog.ExceptionExt.Combine(this.ActorKeywords?.Specific, rhs.ActorKeywords?.Specific));
                ret.BehaviorGraph = this.BehaviorGraph.Combine(rhs.BehaviorGraph);
                ret.AnimationPaths = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AnimationPaths?.Overall, rhs.AnimationPaths?.Overall), Noggog.ExceptionExt.Combine(this.AnimationPaths?.Specific, rhs.AnimationPaths?.Specific));
                ret.TargetKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TargetKeywords?.Overall, rhs.TargetKeywords?.Overall), Noggog.ExceptionExt.Combine(this.TargetKeywords?.Specific, rhs.TargetKeywords?.Specific));
                ret.Role = this.Role.Combine(rhs.Role);
                ret.Perspective = this.Perspective.Combine(rhs.Perspective);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Race;
            public bool ActorKeywords;
            public bool BehaviorGraph;
            public bool AnimationPaths;
            public bool TargetKeywords;
            public bool Role;
            public bool Perspective;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Race = defaultOn;
                this.ActorKeywords = defaultOn;
                this.BehaviorGraph = defaultOn;
                this.AnimationPaths = defaultOn;
                this.TargetKeywords = defaultOn;
                this.Role = defaultOn;
                this.Perspective = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Race, null));
                ret.Add((ActorKeywords, null));
                ret.Add((BehaviorGraph, null));
                ret.Add((AnimationPaths, null));
                ret.Add((TargetKeywords, null));
                ret.Add((Role, null));
                ret.Add((Perspective, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SubgraphCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SubgraphSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SubgraphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SubgraphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Subgraph CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Subgraph();
            ((SubgraphSetterCommon)((ISubgraphGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Subgraph item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SubgraphSetterCommon)((ISubgraphGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Subgraph GetNew()
        {
            return new Subgraph();
        }

    }
    #endregion

    #region Interface
    public partial interface ISubgraph :
        IFormLinkContainer,
        ILoquiObjectSetter<ISubgraph>,
        ISubgraphGetter
    {
        new IFormLinkNullable<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> ActorKeywords { get; }
        new String? BehaviorGraph { get; set; }
        new ExtendedList<String> AnimationPaths { get; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> TargetKeywords { get; }
        new Subgraph.SubgraphRole Role { get; set; }
        new Perspective Perspective { get; set; }
    }

    public partial interface ISubgraphGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISubgraphGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Subgraph_Registration.Instance;
        IFormLinkNullableGetter<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> ActorKeywords { get; }
        String? BehaviorGraph { get; }
        IReadOnlyList<String> AnimationPaths { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> TargetKeywords { get; }
        Subgraph.SubgraphRole Role { get; }
        Perspective Perspective { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SubgraphMixIn
    {
        public static void Clear(this ISubgraph item)
        {
            ((SubgraphSetterCommon)((ISubgraphGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Subgraph.Mask<bool> GetEqualsMask(
            this ISubgraphGetter item,
            ISubgraphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISubgraphGetter item,
            string? name = null,
            Subgraph.Mask<bool>? printMask = null)
        {
            return ((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISubgraphGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Subgraph.Mask<bool>? printMask = null)
        {
            ((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISubgraphGetter item,
            ISubgraphGetter rhs,
            Subgraph.TranslationMask? equalsMask = null)
        {
            return ((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISubgraph lhs,
            ISubgraphGetter rhs)
        {
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISubgraph lhs,
            ISubgraphGetter rhs,
            Subgraph.TranslationMask? copyMask = null)
        {
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISubgraph lhs,
            ISubgraphGetter rhs,
            out Subgraph.ErrorMask errorMask,
            Subgraph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Subgraph.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISubgraph lhs,
            ISubgraphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Subgraph DeepCopy(
            this ISubgraphGetter item,
            Subgraph.TranslationMask? copyMask = null)
        {
            return ((SubgraphSetterTranslationCommon)((ISubgraphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Subgraph DeepCopy(
            this ISubgraphGetter item,
            out Subgraph.ErrorMask errorMask,
            Subgraph.TranslationMask? copyMask = null)
        {
            return ((SubgraphSetterTranslationCommon)((ISubgraphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Subgraph DeepCopy(
            this ISubgraphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SubgraphSetterTranslationCommon)((ISubgraphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISubgraph item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SubgraphSetterCommon)((ISubgraphGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Subgraph_FieldIndex
    {
        Race = 0,
        ActorKeywords = 1,
        BehaviorGraph = 2,
        AnimationPaths = 3,
        TargetKeywords = 4,
        Role = 5,
        Perspective = 6,
    }
    #endregion

    #region Registration
    internal partial class Subgraph_Registration : ILoquiRegistration
    {
        public static readonly Subgraph_Registration Instance = new Subgraph_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Subgraph.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Subgraph.ErrorMask);

        public static readonly Type ClassType = typeof(Subgraph);

        public static readonly Type GetterType = typeof(ISubgraphGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISubgraph);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Subgraph";

        public const string Name = "Subgraph";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.SADD,
                RecordTypes.SAKD,
                RecordTypes.SGNM,
                RecordTypes.SAPT,
                RecordTypes.STKD,
                RecordTypes.SRAF);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SubgraphBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SubgraphSetterCommon
    {
        public static readonly SubgraphSetterCommon Instance = new SubgraphSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISubgraph item)
        {
            ClearPartial();
            item.Race.Clear();
            item.ActorKeywords.Clear();
            item.BehaviorGraph = default;
            item.AnimationPaths.Clear();
            item.TargetKeywords.Clear();
            item.Role = default(Subgraph.SubgraphRole);
            item.Perspective = default(Perspective);
        }
        
        #region Mutagen
        public void RemapLinks(ISubgraph obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Race.Relink(mapping);
            obj.ActorKeywords.RemapLinks(mapping);
            obj.TargetKeywords.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISubgraph item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SubgraphBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SubgraphBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class SubgraphCommon
    {
        public static readonly SubgraphCommon Instance = new SubgraphCommon();

        public Subgraph.Mask<bool> GetEqualsMask(
            ISubgraphGetter item,
            ISubgraphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Subgraph.Mask<bool>(false);
            ((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISubgraphGetter item,
            ISubgraphGetter rhs,
            Subgraph.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Race = item.Race.Equals(rhs.Race);
            ret.ActorKeywords = item.ActorKeywords.CollectionEqualsHelper(
                rhs.ActorKeywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.BehaviorGraph = string.Equals(item.BehaviorGraph, rhs.BehaviorGraph);
            ret.AnimationPaths = item.AnimationPaths.CollectionEqualsHelper(
                rhs.AnimationPaths,
                (l, r) => string.Equals(l, r),
                include);
            ret.TargetKeywords = item.TargetKeywords.CollectionEqualsHelper(
                rhs.TargetKeywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Role = item.Role == rhs.Role;
            ret.Perspective = item.Perspective == rhs.Perspective;
        }
        
        public string Print(
            ISubgraphGetter item,
            string? name = null,
            Subgraph.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISubgraphGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Subgraph.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Subgraph =>");
            }
            else
            {
                sb.AppendLine($"{name} (Subgraph) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISubgraphGetter item,
            StructuredStringBuilder sb,
            Subgraph.Mask<bool>? printMask = null)
        {
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if (printMask?.ActorKeywords?.Overall ?? true)
            {
                sb.AppendLine("ActorKeywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ActorKeywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.BehaviorGraph ?? true)
                && item.BehaviorGraph is {} BehaviorGraphItem)
            {
                sb.AppendItem(BehaviorGraphItem, "BehaviorGraph");
            }
            if (printMask?.AnimationPaths?.Overall ?? true)
            {
                sb.AppendLine("AnimationPaths =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AnimationPaths)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.TargetKeywords?.Overall ?? true)
            {
                sb.AppendLine("TargetKeywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TargetKeywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Role ?? true)
            {
                sb.AppendItem(item.Role, "Role");
            }
            if (printMask?.Perspective ?? true)
            {
                sb.AppendItem(item.Perspective, "Perspective");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISubgraphGetter? lhs,
            ISubgraphGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.ActorKeywords) ?? true))
            {
                if (!lhs.ActorKeywords.SequenceEqualNullable(rhs.ActorKeywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.BehaviorGraph) ?? true))
            {
                if (!string.Equals(lhs.BehaviorGraph, rhs.BehaviorGraph)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.AnimationPaths) ?? true))
            {
                if (!lhs.AnimationPaths.SequenceEqualNullable(rhs.AnimationPaths)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.TargetKeywords) ?? true))
            {
                if (!lhs.TargetKeywords.SequenceEqualNullable(rhs.TargetKeywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Role) ?? true))
            {
                if (lhs.Role != rhs.Role) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Perspective) ?? true))
            {
                if (lhs.Perspective != rhs.Perspective) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISubgraphGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Race);
            hash.Add(item.ActorKeywords);
            if (item.BehaviorGraph is {} BehaviorGraphitem)
            {
                hash.Add(BehaviorGraphitem);
            }
            hash.Add(item.AnimationPaths);
            hash.Add(item.TargetKeywords);
            hash.Add(item.Role);
            hash.Add(item.Perspective);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Subgraph.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISubgraphGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Race, out var RaceInfo))
            {
                yield return RaceInfo;
            }
            foreach (var item in obj.ActorKeywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.TargetKeywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SubgraphSetterTranslationCommon
    {
        public static readonly SubgraphSetterTranslationCommon Instance = new SubgraphSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISubgraph item,
            ISubgraphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.ActorKeywords) ?? true))
            {
                errorMask?.PushIndex((int)Subgraph_FieldIndex.ActorKeywords);
                try
                {
                    item.ActorKeywords.SetTo(
                        rhs.ActorKeywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.BehaviorGraph) ?? true))
            {
                item.BehaviorGraph = rhs.BehaviorGraph;
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.AnimationPaths) ?? true))
            {
                errorMask?.PushIndex((int)Subgraph_FieldIndex.AnimationPaths);
                try
                {
                    item.AnimationPaths.SetTo(rhs.AnimationPaths);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.TargetKeywords) ?? true))
            {
                errorMask?.PushIndex((int)Subgraph_FieldIndex.TargetKeywords);
                try
                {
                    item.TargetKeywords.SetTo(
                        rhs.TargetKeywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Role) ?? true))
            {
                item.Role = rhs.Role;
            }
            if ((copyMask?.GetShouldTranslate((int)Subgraph_FieldIndex.Perspective) ?? true))
            {
                item.Perspective = rhs.Perspective;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISubgraph item,
            ISubgraphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Subgraph DeepCopy(
            ISubgraphGetter item,
            Subgraph.TranslationMask? copyMask = null)
        {
            Subgraph ret = (Subgraph)((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).GetNew();
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Subgraph DeepCopy(
            ISubgraphGetter item,
            out Subgraph.ErrorMask errorMask,
            Subgraph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Subgraph ret = (Subgraph)((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).GetNew();
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Subgraph.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Subgraph DeepCopy(
            ISubgraphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Subgraph ret = (Subgraph)((SubgraphCommon)((ISubgraphGetter)item).CommonInstance()!).GetNew();
            ((SubgraphSetterTranslationCommon)((ISubgraphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Subgraph
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Subgraph_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Subgraph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SubgraphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SubgraphSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SubgraphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISubgraphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISubgraphGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISubgraphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SubgraphBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SubgraphBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISubgraphGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            ISubgraphGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.SADD));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.ActorKeywords,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.SAKD));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BehaviorGraph,
                header: translationParams.ConvertToCustom(RecordTypes.SGNM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.WritePerItem(
                writer: writer,
                items: item.AnimationPaths,
                recordType: translationParams.ConvertToCustom(RecordTypes.SAPT),
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.TargetKeywords,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.STKD));
                });
            SubgraphBinaryWriteTranslation.WriteBinaryRole(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryRoleCustom(
            MutagenWriter writer,
            ISubgraphGetter item);

        public static void WriteBinaryRole(
            MutagenWriter writer,
            ISubgraphGetter item)
        {
            WriteBinaryRoleCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ISubgraphGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISubgraphGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SubgraphBinaryCreateTranslation
    {
        public static readonly SubgraphBinaryCreateTranslation Instance = new SubgraphBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISubgraph item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ISubgraph item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SADD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Subgraph_FieldIndex.Race;
                }
                case RecordTypeInts.SAKD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    item.ActorKeywords.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SAKD),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Subgraph_FieldIndex.ActorKeywords;
                }
                case RecordTypeInts.SGNM:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BehaviorGraph = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Subgraph_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.SAPT:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    item.AnimationPaths.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SAPT),
                            transl: StringBinaryTranslation.Instance.Parse));
                    return (int)Subgraph_FieldIndex.AnimationPaths;
                }
                case RecordTypeInts.STKD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    item.TargetKeywords.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.STKD),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Subgraph_FieldIndex.TargetKeywords;
                }
                case RecordTypeInts.SRAF:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    SubgraphBinaryCreateTranslation.FillBinaryRoleCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Subgraph_FieldIndex.Role;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial void FillBinaryRoleCustom(
            MutagenFrame frame,
            ISubgraph item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SubgraphBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISubgraphGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SubgraphBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SubgraphBinaryOverlay :
        PluginBinaryOverlay,
        ISubgraphGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Subgraph_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Subgraph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SubgraphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SubgraphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISubgraphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISubgraphGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISubgraphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SubgraphCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SubgraphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SubgraphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Race
        private int? _RaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> ActorKeywords { get; private set; } = Array.Empty<IFormLinkGetter<IKeywordGetter>>();
        #region BehaviorGraph
        private int? _BehaviorGraphLocation;
        public String? BehaviorGraph => _BehaviorGraphLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BehaviorGraphLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<String> AnimationPaths { get; private set; } = Array.Empty<String>();
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> TargetKeywords { get; private set; } = Array.Empty<IFormLinkGetter<IKeywordGetter>>();
        #region Role
        partial void RoleCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial Subgraph.SubgraphRole GetRoleCustom();
        public Subgraph.SubgraphRole Role => GetRoleCustom();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SubgraphBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISubgraphGetter SubgraphFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SubgraphBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISubgraphGetter SubgraphFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SubgraphFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SADD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    _RaceLocation = (stream.Position - offset);
                    return (int)Subgraph_FieldIndex.Race;
                }
                case RecordTypeInts.SAKD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    this.ActorKeywords = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IKeywordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SAKD,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Subgraph_FieldIndex.ActorKeywords;
                }
                case RecordTypeInts.SGNM:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    _BehaviorGraphLocation = (stream.Position - offset);
                    return (int)Subgraph_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.SAPT:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    this.AnimationPaths = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SAPT,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)Subgraph_FieldIndex.AnimationPaths;
                }
                case RecordTypeInts.STKD:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    this.TargetKeywords = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IKeywordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.STKD,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Subgraph_FieldIndex.TargetKeywords;
                }
                case RecordTypeInts.SRAF:
                {
                    if (lastParsed.ShortCircuit((int)Subgraph_FieldIndex.Role, translationParams)) return ParseResult.Stop;
                    RoleCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Subgraph_FieldIndex.Role;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SubgraphMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISubgraphGetter rhs) return false;
            return ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISubgraphGetter? obj)
        {
            return ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SubgraphCommon)((ISubgraphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

