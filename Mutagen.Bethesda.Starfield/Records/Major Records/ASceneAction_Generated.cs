/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    /// <summary>
    /// Implemented by: [DialogueSceneAction, PackageSceneAction, TimerSceneAction, PlayerDialogueSceneAction, StartSceneAction, RadioSceneAction, MoveSceneAction, CameraSceneAction, FxSceneAction, AnimationSceneAction, TimelineSceneAction]
    /// </summary>
    public abstract partial class ASceneAction :
        IASceneAction,
        IEquatable<IASceneActionGetter>,
        ILoquiObjectSetter<ASceneAction>
    {
        #region Ctor
        public ASceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        public String Name { get; set; } = string.Empty;
        #endregion
        #region SceneNotes
        public String? SceneNotes { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IASceneActionGetter.SceneNotes => this.SceneNotes;
        #endregion
        #region AliasID
        public Int32? AliasID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IASceneActionGetter.AliasID => this.AliasID;
        #endregion
        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IASceneActionGetter.Index => this.Index;
        #endregion
        #region Flags
        public ASceneAction.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ASceneAction.Flag? IASceneActionGetter.Flags => this.Flags;
        #endregion
        #region StartPhase
        public UInt32 StartPhase { get; set; } = default(UInt32);
        #endregion
        #region EndPhase
        public UInt32 EndPhase { get; set; } = default(UInt32);
        #endregion

        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ASceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IASceneActionGetter rhs) return false;
            return ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IASceneActionGetter? obj)
        {
            return ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.SceneNotes = initialValue;
                this.AliasID = initialValue;
                this.Index = initialValue;
                this.Flags = initialValue;
                this.StartPhase = initialValue;
                this.EndPhase = initialValue;
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase)
            {
                this.Name = Name;
                this.SceneNotes = SceneNotes;
                this.AliasID = AliasID;
                this.Index = Index;
                this.Flags = Flags;
                this.StartPhase = StartPhase;
                this.EndPhase = EndPhase;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem SceneNotes;
            public TItem AliasID;
            public TItem Index;
            public TItem Flags;
            public TItem StartPhase;
            public TItem EndPhase;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.SceneNotes, rhs.SceneNotes)) return false;
                if (!object.Equals(this.AliasID, rhs.AliasID)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.StartPhase, rhs.StartPhase)) return false;
                if (!object.Equals(this.EndPhase, rhs.EndPhase)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.SceneNotes);
                hash.Add(this.AliasID);
                hash.Add(this.Index);
                hash.Add(this.Flags);
                hash.Add(this.StartPhase);
                hash.Add(this.EndPhase);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.SceneNotes)) return false;
                if (!eval(this.AliasID)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.StartPhase)) return false;
                if (!eval(this.EndPhase)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.SceneNotes)) return true;
                if (eval(this.AliasID)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.StartPhase)) return true;
                if (eval(this.EndPhase)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ASceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.SceneNotes = eval(this.SceneNotes);
                obj.AliasID = eval(this.AliasID);
                obj.Index = eval(this.Index);
                obj.Flags = eval(this.Flags);
                obj.StartPhase = eval(this.StartPhase);
                obj.EndPhase = eval(this.EndPhase);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ASceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ASceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ASceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.SceneNotes ?? true)
                    {
                        sb.AppendItem(SceneNotes, "SceneNotes");
                    }
                    if (printMask?.AliasID ?? true)
                    {
                        sb.AppendItem(AliasID, "AliasID");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.StartPhase ?? true)
                    {
                        sb.AppendItem(StartPhase, "StartPhase");
                    }
                    if (printMask?.EndPhase ?? true)
                    {
                        sb.AppendItem(EndPhase, "EndPhase");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? SceneNotes;
            public Exception? AliasID;
            public Exception? Index;
            public Exception? Flags;
            public Exception? StartPhase;
            public Exception? EndPhase;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                ASceneAction_FieldIndex enu = (ASceneAction_FieldIndex)index;
                switch (enu)
                {
                    case ASceneAction_FieldIndex.Name:
                        return Name;
                    case ASceneAction_FieldIndex.SceneNotes:
                        return SceneNotes;
                    case ASceneAction_FieldIndex.AliasID:
                        return AliasID;
                    case ASceneAction_FieldIndex.Index:
                        return Index;
                    case ASceneAction_FieldIndex.Flags:
                        return Flags;
                    case ASceneAction_FieldIndex.StartPhase:
                        return StartPhase;
                    case ASceneAction_FieldIndex.EndPhase:
                        return EndPhase;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                ASceneAction_FieldIndex enu = (ASceneAction_FieldIndex)index;
                switch (enu)
                {
                    case ASceneAction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ASceneAction_FieldIndex.SceneNotes:
                        this.SceneNotes = ex;
                        break;
                    case ASceneAction_FieldIndex.AliasID:
                        this.AliasID = ex;
                        break;
                    case ASceneAction_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case ASceneAction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ASceneAction_FieldIndex.StartPhase:
                        this.StartPhase = ex;
                        break;
                    case ASceneAction_FieldIndex.EndPhase:
                        this.EndPhase = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                ASceneAction_FieldIndex enu = (ASceneAction_FieldIndex)index;
                switch (enu)
                {
                    case ASceneAction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.SceneNotes:
                        this.SceneNotes = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.AliasID:
                        this.AliasID = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.StartPhase:
                        this.StartPhase = (Exception?)obj;
                        break;
                    case ASceneAction_FieldIndex.EndPhase:
                        this.EndPhase = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (SceneNotes != null) return true;
                if (AliasID != null) return true;
                if (Index != null) return true;
                if (Flags != null) return true;
                if (StartPhase != null) return true;
                if (EndPhase != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public virtual void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected virtual void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(SceneNotes, "SceneNotes");
                }
                {
                    sb.AppendItem(AliasID, "AliasID");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(StartPhase, "StartPhase");
                }
                {
                    sb.AppendItem(EndPhase, "EndPhase");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.SceneNotes = this.SceneNotes.Combine(rhs.SceneNotes);
                ret.AliasID = this.AliasID.Combine(rhs.AliasID);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.StartPhase = this.StartPhase.Combine(rhs.StartPhase);
                ret.EndPhase = this.EndPhase.Combine(rhs.EndPhase);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool SceneNotes;
            public bool AliasID;
            public bool Index;
            public bool Flags;
            public bool StartPhase;
            public bool EndPhase;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.SceneNotes = defaultOn;
                this.AliasID = defaultOn;
                this.Index = defaultOn;
                this.Flags = defaultOn;
                this.StartPhase = defaultOn;
                this.EndPhase = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((SceneNotes, null));
                ret.Add((AliasID, null));
                ret.Add((Index, null));
                ret.Add((Flags, null));
                ret.Add((StartPhase, null));
                ret.Add((EndPhase, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ASceneActionCommon.Instance.EnumerateFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ASceneActionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ASceneActionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ASceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ASceneActionSetterCommon)((IASceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ASceneAction GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [DialogueSceneAction, PackageSceneAction, TimerSceneAction, PlayerDialogueSceneAction, StartSceneAction, RadioSceneAction, MoveSceneAction, CameraSceneAction, FxSceneAction, AnimationSceneAction, TimelineSceneAction]
    /// </summary>
    public partial interface IASceneAction :
        IASceneActionGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IASceneAction>,
        INamedRequired
    {
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        new String Name { get; set; }
        new String? SceneNotes { get; set; }
        new Int32? AliasID { get; set; }
        new UInt32? Index { get; set; }
        new ASceneAction.Flag? Flags { get; set; }
        new UInt32 StartPhase { get; set; }
        new UInt32 EndPhase { get; set; }
    }

    /// <summary>
    /// Implemented by: [DialogueSceneAction, PackageSceneAction, TimerSceneAction, PlayerDialogueSceneAction, StartSceneAction, RadioSceneAction, MoveSceneAction, CameraSceneAction, FxSceneAction, AnimationSceneAction, TimelineSceneAction]
    /// </summary>
    public partial interface IASceneActionGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IASceneActionGetter>,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ASceneAction_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter
        /// </summary>
        String Name { get; }
        #endregion
        String? SceneNotes { get; }
        Int32? AliasID { get; }
        UInt32? Index { get; }
        ASceneAction.Flag? Flags { get; }
        UInt32 StartPhase { get; }
        UInt32 EndPhase { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ASceneActionMixIn
    {
        public static void Clear(this IASceneAction item)
        {
            ((ASceneActionSetterCommon)((IASceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ASceneAction.Mask<bool> GetEqualsMask(
            this IASceneActionGetter item,
            IASceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IASceneActionGetter item,
            string? name = null,
            ASceneAction.Mask<bool>? printMask = null)
        {
            return ((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IASceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ASceneAction.Mask<bool>? printMask = null)
        {
            ((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IASceneActionGetter item,
            IASceneActionGetter rhs,
            ASceneAction.TranslationMask? equalsMask = null)
        {
            return ((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IASceneAction lhs,
            IASceneActionGetter rhs)
        {
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IASceneAction lhs,
            IASceneActionGetter rhs,
            ASceneAction.TranslationMask? copyMask = null)
        {
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IASceneAction lhs,
            IASceneActionGetter rhs,
            out ASceneAction.ErrorMask errorMask,
            ASceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ASceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IASceneAction lhs,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ASceneAction DeepCopy(
            this IASceneActionGetter item,
            ASceneAction.TranslationMask? copyMask = null)
        {
            return ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ASceneAction DeepCopy(
            this IASceneActionGetter item,
            out ASceneAction.ErrorMask errorMask,
            ASceneAction.TranslationMask? copyMask = null)
        {
            return ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ASceneAction DeepCopy(
            this IASceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ASceneActionSetterCommon)((IASceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ASceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
    }
    #endregion

    #region Registration
    internal partial class ASceneAction_Registration : ILoquiRegistration
    {
        public static readonly ASceneAction_Registration Instance = new ASceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ASceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ASceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(ASceneAction);

        public static readonly Type GetterType = typeof(IASceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IASceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ASceneAction";

        public const string Name = "ASceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.SNOT,
                RecordTypes.ALID,
                RecordTypes.INAM,
                RecordTypes.FNAM,
                RecordTypes.SNAM,
                RecordTypes.ENAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ASceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ASceneActionSetterCommon
    {
        public static readonly ASceneActionSetterCommon Instance = new ASceneActionSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IASceneAction item)
        {
            ClearPartial();
            item.Name = string.Empty;
            item.SceneNotes = default;
            item.AliasID = default;
            item.Index = default;
            item.Flags = default;
            item.StartPhase = default(UInt32);
            item.EndPhase = default(UInt32);
        }
        
        #region Mutagen
        public void RemapLinks(IASceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ASceneActionCommon
    {
        public static readonly ASceneActionCommon Instance = new ASceneActionCommon();

        public ASceneAction.Mask<bool> GetEqualsMask(
            IASceneActionGetter item,
            IASceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ASceneAction.Mask<bool>(false);
            ((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IASceneActionGetter item,
            IASceneActionGetter rhs,
            ASceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.SceneNotes = string.Equals(item.SceneNotes, rhs.SceneNotes);
            ret.AliasID = item.AliasID == rhs.AliasID;
            ret.Index = item.Index == rhs.Index;
            ret.Flags = item.Flags == rhs.Flags;
            ret.StartPhase = item.StartPhase == rhs.StartPhase;
            ret.EndPhase = item.EndPhase == rhs.EndPhase;
        }
        
        public string Print(
            IASceneActionGetter item,
            string? name = null,
            ASceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IASceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ASceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ASceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (ASceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IASceneActionGetter item,
            StructuredStringBuilder sb,
            ASceneAction.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.SceneNotes ?? true)
                && item.SceneNotes is {} SceneNotesItem)
            {
                sb.AppendItem(SceneNotesItem, "SceneNotes");
            }
            if ((printMask?.AliasID ?? true)
                && item.AliasID is {} AliasIDItem)
            {
                sb.AppendItem(AliasIDItem, "AliasID");
            }
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.StartPhase ?? true)
            {
                sb.AppendItem(item.StartPhase, "StartPhase");
            }
            if (printMask?.EndPhase ?? true)
            {
                sb.AppendItem(item.EndPhase, "EndPhase");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.SceneNotes) ?? true))
            {
                if (!string.Equals(lhs.SceneNotes, rhs.SceneNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.AliasID) ?? true))
            {
                if (lhs.AliasID != rhs.AliasID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.StartPhase) ?? true))
            {
                if (lhs.StartPhase != rhs.StartPhase) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.EndPhase) ?? true))
            {
                if (lhs.EndPhase != rhs.EndPhase) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IASceneActionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            if (item.SceneNotes is {} SceneNotesitem)
            {
                hash.Add(SceneNotesitem);
            }
            if (item.AliasID is {} AliasIDitem)
            {
                hash.Add(AliasIDitem);
            }
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.StartPhase);
            hash.Add(item.EndPhase);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return ASceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IASceneActionGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ASceneActionSetterTranslationCommon
    {
        public static readonly ASceneActionSetterTranslationCommon Instance = new ASceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.SceneNotes) ?? true))
            {
                item.SceneNotes = rhs.SceneNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.AliasID) ?? true))
            {
                item.AliasID = rhs.AliasID;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.StartPhase) ?? true))
            {
                item.StartPhase = rhs.StartPhase;
            }
            if ((copyMask?.GetShouldTranslate((int)ASceneAction_FieldIndex.EndPhase) ?? true))
            {
                item.EndPhase = rhs.EndPhase;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ASceneAction DeepCopy(
            IASceneActionGetter item,
            ASceneAction.TranslationMask? copyMask = null)
        {
            ASceneAction ret = (ASceneAction)((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).GetNew();
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ASceneAction DeepCopy(
            IASceneActionGetter item,
            out ASceneAction.ErrorMask errorMask,
            ASceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ASceneAction ret = (ASceneAction)((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).GetNew();
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ASceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ASceneAction DeepCopy(
            IASceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ASceneAction ret = (ASceneAction)((ASceneActionCommon)((IASceneActionGetter)item).CommonInstance()!).GetNew();
            ((ASceneActionSetterTranslationCommon)((IASceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ASceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ASceneAction_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ASceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ASceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return ASceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ASceneActionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IASceneActionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IASceneActionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IASceneActionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ASceneActionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ASceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IASceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SceneNotes,
                header: translationParams.ConvertToCustom(RecordTypes.SNOT),
                binaryType: StringBinaryType.NullTerminate);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AliasID,
                header: translationParams.ConvertToCustom(RecordTypes.ALID));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            EnumBinaryTranslation<ASceneAction.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StartPhase,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EndPhase,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
        }

        public virtual void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IASceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ASceneActionBinaryCreateTranslation
    {
        public static readonly ASceneActionBinaryCreateTranslation Instance = new ASceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IASceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.ShortCircuit((int)ASceneAction_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ASceneAction_FieldIndex.Name;
                }
                case RecordTypeInts.SNOT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SceneNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ASceneAction_FieldIndex.SceneNotes;
                }
                case RecordTypeInts.ALID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasID = frame.ReadInt32();
                    return (int)ASceneAction_FieldIndex.AliasID;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)ASceneAction_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<ASceneAction.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ASceneAction_FieldIndex.Flags;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StartPhase = frame.ReadUInt32();
                    return (int)ASceneAction_FieldIndex.StartPhase;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EndPhase = frame.ReadUInt32();
                    return (int)ASceneAction_FieldIndex.EndPhase;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ASceneActionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IASceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ASceneActionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal abstract partial class ASceneActionBinaryOverlay :
        PluginBinaryOverlay,
        IASceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ASceneAction_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ASceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ASceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ASceneActionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IASceneActionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IASceneActionGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IASceneActionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public virtual IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ASceneActionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ASceneActionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ASceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region SceneNotes
        private int? _SceneNotesLocation;
        public String? SceneNotes => _SceneNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SceneNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region AliasID
        private int? _AliasIDLocation;
        public Int32? AliasID => _AliasIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AliasIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public ASceneAction.Flag? Flags => EnumBinaryTranslation<ASceneAction.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_FlagsLocation, _recordData, _package, 4);
        #endregion
        #region StartPhase
        private int? _StartPhaseLocation;
        public UInt32 StartPhase => _StartPhaseLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StartPhaseLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        #region EndPhase
        private int? _EndPhaseLocation;
        public UInt32 EndPhase => _EndPhaseLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EndPhaseLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ASceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        public virtual ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.ShortCircuit((int)ASceneAction_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.Name;
                }
                case RecordTypeInts.SNOT:
                {
                    _SceneNotesLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.SceneNotes;
                }
                case RecordTypeInts.ALID:
                {
                    _AliasIDLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.AliasID;
                }
                case RecordTypeInts.INAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.Index;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.Flags;
                }
                case RecordTypeInts.SNAM:
                {
                    _StartPhaseLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.StartPhase;
                }
                case RecordTypeInts.ENAM:
                {
                    _EndPhaseLocation = (stream.Position - offset);
                    return (int)ASceneAction_FieldIndex.EndPhase;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ASceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IASceneActionGetter rhs) return false;
            return ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IASceneActionGetter? obj)
        {
            return ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ASceneActionCommon)((IASceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

