/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeLNAMItem :
        IBiomeLNAMItem,
        IEquatable<IBiomeLNAMItemGetter>,
        ILoquiObjectSetter<BiomeLNAMItem>
    {
        #region Ctor
        public BiomeLNAMItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BiomeLandItem? _LNAM;
        public BiomeLandItem? LNAM
        {
            get => _LNAM;
            set => _LNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeLandItemGetter? IBiomeLNAMItemGetter.LNAM => this.LNAM;
        #endregion
        #region ANAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BiomeLandItem? _ANAM;
        public BiomeLandItem? ANAM
        {
            get => _ANAM;
            set => _ANAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeLandItemGetter? IBiomeLNAMItemGetter.ANAM => this.ANAM;
        #endregion
        #region MaskType0
        public String? MaskType0 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType0 => this.MaskType0;
        #endregion
        #region MaskType1
        public String? MaskType1 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType1 => this.MaskType1;
        #endregion
        #region MaskType2
        public String? MaskType2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType2 => this.MaskType2;
        #endregion
        #region MaskType3
        public String? MaskType3 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType3 => this.MaskType3;
        #endregion
        #region MaskType4
        public String? MaskType4 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType4 => this.MaskType4;
        #endregion
        #region MaskType5
        public String? MaskType5 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeLNAMItemGetter.MaskType5 => this.MaskType5;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeLNAMItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeLNAMItemGetter rhs) return false;
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeLNAMItemGetter? obj)
        {
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LNAM = new MaskItem<TItem, BiomeLandItem.Mask<TItem>?>(initialValue, new BiomeLandItem.Mask<TItem>(initialValue));
                this.ANAM = new MaskItem<TItem, BiomeLandItem.Mask<TItem>?>(initialValue, new BiomeLandItem.Mask<TItem>(initialValue));
                this.MaskType0 = initialValue;
                this.MaskType1 = initialValue;
                this.MaskType2 = initialValue;
                this.MaskType3 = initialValue;
                this.MaskType4 = initialValue;
                this.MaskType5 = initialValue;
            }

            public Mask(
                TItem LNAM,
                TItem ANAM,
                TItem MaskType0,
                TItem MaskType1,
                TItem MaskType2,
                TItem MaskType3,
                TItem MaskType4,
                TItem MaskType5)
            {
                this.LNAM = new MaskItem<TItem, BiomeLandItem.Mask<TItem>?>(LNAM, new BiomeLandItem.Mask<TItem>(LNAM));
                this.ANAM = new MaskItem<TItem, BiomeLandItem.Mask<TItem>?>(ANAM, new BiomeLandItem.Mask<TItem>(ANAM));
                this.MaskType0 = MaskType0;
                this.MaskType1 = MaskType1;
                this.MaskType2 = MaskType2;
                this.MaskType3 = MaskType3;
                this.MaskType4 = MaskType4;
                this.MaskType5 = MaskType5;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, BiomeLandItem.Mask<TItem>?>? LNAM { get; set; }
            public MaskItem<TItem, BiomeLandItem.Mask<TItem>?>? ANAM { get; set; }
            public TItem MaskType0;
            public TItem MaskType1;
            public TItem MaskType2;
            public TItem MaskType3;
            public TItem MaskType4;
            public TItem MaskType5;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.MaskType0, rhs.MaskType0)) return false;
                if (!object.Equals(this.MaskType1, rhs.MaskType1)) return false;
                if (!object.Equals(this.MaskType2, rhs.MaskType2)) return false;
                if (!object.Equals(this.MaskType3, rhs.MaskType3)) return false;
                if (!object.Equals(this.MaskType4, rhs.MaskType4)) return false;
                if (!object.Equals(this.MaskType5, rhs.MaskType5)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LNAM);
                hash.Add(this.ANAM);
                hash.Add(this.MaskType0);
                hash.Add(this.MaskType1);
                hash.Add(this.MaskType2);
                hash.Add(this.MaskType3);
                hash.Add(this.MaskType4);
                hash.Add(this.MaskType5);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (LNAM != null)
                {
                    if (!eval(this.LNAM.Overall)) return false;
                    if (this.LNAM.Specific != null && !this.LNAM.Specific.All(eval)) return false;
                }
                if (ANAM != null)
                {
                    if (!eval(this.ANAM.Overall)) return false;
                    if (this.ANAM.Specific != null && !this.ANAM.Specific.All(eval)) return false;
                }
                if (!eval(this.MaskType0)) return false;
                if (!eval(this.MaskType1)) return false;
                if (!eval(this.MaskType2)) return false;
                if (!eval(this.MaskType3)) return false;
                if (!eval(this.MaskType4)) return false;
                if (!eval(this.MaskType5)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (LNAM != null)
                {
                    if (eval(this.LNAM.Overall)) return true;
                    if (this.LNAM.Specific != null && this.LNAM.Specific.Any(eval)) return true;
                }
                if (ANAM != null)
                {
                    if (eval(this.ANAM.Overall)) return true;
                    if (this.ANAM.Specific != null && this.ANAM.Specific.Any(eval)) return true;
                }
                if (eval(this.MaskType0)) return true;
                if (eval(this.MaskType1)) return true;
                if (eval(this.MaskType2)) return true;
                if (eval(this.MaskType3)) return true;
                if (eval(this.MaskType4)) return true;
                if (eval(this.MaskType5)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeLNAMItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LNAM = this.LNAM == null ? null : new MaskItem<R, BiomeLandItem.Mask<R>?>(eval(this.LNAM.Overall), this.LNAM.Specific?.Translate(eval));
                obj.ANAM = this.ANAM == null ? null : new MaskItem<R, BiomeLandItem.Mask<R>?>(eval(this.ANAM.Overall), this.ANAM.Specific?.Translate(eval));
                obj.MaskType0 = eval(this.MaskType0);
                obj.MaskType1 = eval(this.MaskType1);
                obj.MaskType2 = eval(this.MaskType2);
                obj.MaskType3 = eval(this.MaskType3);
                obj.MaskType4 = eval(this.MaskType4);
                obj.MaskType5 = eval(this.MaskType5);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeLNAMItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeLNAMItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeLNAMItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.LNAM?.Overall ?? true)
                    {
                        LNAM?.Print(sb);
                    }
                    if (printMask?.ANAM?.Overall ?? true)
                    {
                        ANAM?.Print(sb);
                    }
                    if (printMask?.MaskType0 ?? true)
                    {
                        sb.AppendItem(MaskType0, "MaskType0");
                    }
                    if (printMask?.MaskType1 ?? true)
                    {
                        sb.AppendItem(MaskType1, "MaskType1");
                    }
                    if (printMask?.MaskType2 ?? true)
                    {
                        sb.AppendItem(MaskType2, "MaskType2");
                    }
                    if (printMask?.MaskType3 ?? true)
                    {
                        sb.AppendItem(MaskType3, "MaskType3");
                    }
                    if (printMask?.MaskType4 ?? true)
                    {
                        sb.AppendItem(MaskType4, "MaskType4");
                    }
                    if (printMask?.MaskType5 ?? true)
                    {
                        sb.AppendItem(MaskType5, "MaskType5");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, BiomeLandItem.ErrorMask?>? LNAM;
            public MaskItem<Exception?, BiomeLandItem.ErrorMask?>? ANAM;
            public Exception? MaskType0;
            public Exception? MaskType1;
            public Exception? MaskType2;
            public Exception? MaskType3;
            public Exception? MaskType4;
            public Exception? MaskType5;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeLNAMItem_FieldIndex enu = (BiomeLNAMItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeLNAMItem_FieldIndex.LNAM:
                        return LNAM;
                    case BiomeLNAMItem_FieldIndex.ANAM:
                        return ANAM;
                    case BiomeLNAMItem_FieldIndex.MaskType0:
                        return MaskType0;
                    case BiomeLNAMItem_FieldIndex.MaskType1:
                        return MaskType1;
                    case BiomeLNAMItem_FieldIndex.MaskType2:
                        return MaskType2;
                    case BiomeLNAMItem_FieldIndex.MaskType3:
                        return MaskType3;
                    case BiomeLNAMItem_FieldIndex.MaskType4:
                        return MaskType4;
                    case BiomeLNAMItem_FieldIndex.MaskType5:
                        return MaskType5;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeLNAMItem_FieldIndex enu = (BiomeLNAMItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeLNAMItem_FieldIndex.LNAM:
                        this.LNAM = new MaskItem<Exception?, BiomeLandItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeLNAMItem_FieldIndex.ANAM:
                        this.ANAM = new MaskItem<Exception?, BiomeLandItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType0:
                        this.MaskType0 = ex;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType1:
                        this.MaskType1 = ex;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType2:
                        this.MaskType2 = ex;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType3:
                        this.MaskType3 = ex;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType4:
                        this.MaskType4 = ex;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType5:
                        this.MaskType5 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeLNAMItem_FieldIndex enu = (BiomeLNAMItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeLNAMItem_FieldIndex.LNAM:
                        this.LNAM = (MaskItem<Exception?, BiomeLandItem.ErrorMask?>?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.ANAM:
                        this.ANAM = (MaskItem<Exception?, BiomeLandItem.ErrorMask?>?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType0:
                        this.MaskType0 = (Exception?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType1:
                        this.MaskType1 = (Exception?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType2:
                        this.MaskType2 = (Exception?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType3:
                        this.MaskType3 = (Exception?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType4:
                        this.MaskType4 = (Exception?)obj;
                        break;
                    case BiomeLNAMItem_FieldIndex.MaskType5:
                        this.MaskType5 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LNAM != null) return true;
                if (ANAM != null) return true;
                if (MaskType0 != null) return true;
                if (MaskType1 != null) return true;
                if (MaskType2 != null) return true;
                if (MaskType3 != null) return true;
                if (MaskType4 != null) return true;
                if (MaskType5 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                LNAM?.Print(sb);
                ANAM?.Print(sb);
                {
                    sb.AppendItem(MaskType0, "MaskType0");
                }
                {
                    sb.AppendItem(MaskType1, "MaskType1");
                }
                {
                    sb.AppendItem(MaskType2, "MaskType2");
                }
                {
                    sb.AppendItem(MaskType3, "MaskType3");
                }
                {
                    sb.AppendItem(MaskType4, "MaskType4");
                }
                {
                    sb.AppendItem(MaskType5, "MaskType5");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LNAM = this.LNAM.Combine(rhs.LNAM, (l, r) => l.Combine(r));
                ret.ANAM = this.ANAM.Combine(rhs.ANAM, (l, r) => l.Combine(r));
                ret.MaskType0 = this.MaskType0.Combine(rhs.MaskType0);
                ret.MaskType1 = this.MaskType1.Combine(rhs.MaskType1);
                ret.MaskType2 = this.MaskType2.Combine(rhs.MaskType2);
                ret.MaskType3 = this.MaskType3.Combine(rhs.MaskType3);
                ret.MaskType4 = this.MaskType4.Combine(rhs.MaskType4);
                ret.MaskType5 = this.MaskType5.Combine(rhs.MaskType5);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public BiomeLandItem.TranslationMask? LNAM;
            public BiomeLandItem.TranslationMask? ANAM;
            public bool MaskType0;
            public bool MaskType1;
            public bool MaskType2;
            public bool MaskType3;
            public bool MaskType4;
            public bool MaskType5;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MaskType0 = defaultOn;
                this.MaskType1 = defaultOn;
                this.MaskType2 = defaultOn;
                this.MaskType3 = defaultOn;
                this.MaskType4 = defaultOn;
                this.MaskType5 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LNAM != null ? LNAM.OnOverall : DefaultOn, LNAM?.GetCrystal()));
                ret.Add((ANAM != null ? ANAM.OnOverall : DefaultOn, ANAM?.GetCrystal()));
                ret.Add((MaskType0, null));
                ret.Add((MaskType1, null));
                ret.Add((MaskType2, null));
                ret.Add((MaskType3, null));
                ret.Add((MaskType4, null));
                ret.Add((MaskType5, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeLNAMItemCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeLNAMItemSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeLNAMItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeLNAMItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeLNAMItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeLNAMItem();
            ((BiomeLNAMItemSetterCommon)((IBiomeLNAMItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeLNAMItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeLNAMItemSetterCommon)((IBiomeLNAMItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeLNAMItem GetNew()
        {
            return new BiomeLNAMItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeLNAMItem :
        IBiomeLNAMItemGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBiomeLNAMItem>
    {
        new BiomeLandItem? LNAM { get; set; }
        new BiomeLandItem? ANAM { get; set; }
        new String? MaskType0 { get; set; }
        new String? MaskType1 { get; set; }
        new String? MaskType2 { get; set; }
        new String? MaskType3 { get; set; }
        new String? MaskType4 { get; set; }
        new String? MaskType5 { get; set; }
    }

    public partial interface IBiomeLNAMItemGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBiomeLNAMItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeLNAMItem_Registration.Instance;
        IBiomeLandItemGetter? LNAM { get; }
        IBiomeLandItemGetter? ANAM { get; }
        String? MaskType0 { get; }
        String? MaskType1 { get; }
        String? MaskType2 { get; }
        String? MaskType3 { get; }
        String? MaskType4 { get; }
        String? MaskType5 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeLNAMItemMixIn
    {
        public static void Clear(this IBiomeLNAMItem item)
        {
            ((BiomeLNAMItemSetterCommon)((IBiomeLNAMItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeLNAMItem.Mask<bool> GetEqualsMask(
            this IBiomeLNAMItemGetter item,
            IBiomeLNAMItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeLNAMItemGetter item,
            string? name = null,
            BiomeLNAMItem.Mask<bool>? printMask = null)
        {
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeLNAMItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeLNAMItem.Mask<bool>? printMask = null)
        {
            ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeLNAMItemGetter item,
            IBiomeLNAMItemGetter rhs,
            BiomeLNAMItem.TranslationMask? equalsMask = null)
        {
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeLNAMItem lhs,
            IBiomeLNAMItemGetter rhs)
        {
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeLNAMItem lhs,
            IBiomeLNAMItemGetter rhs,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeLNAMItem lhs,
            IBiomeLNAMItemGetter rhs,
            out BiomeLNAMItem.ErrorMask errorMask,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeLNAMItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeLNAMItem lhs,
            IBiomeLNAMItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeLNAMItem DeepCopy(
            this IBiomeLNAMItemGetter item,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            return ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeLNAMItem DeepCopy(
            this IBiomeLNAMItemGetter item,
            out BiomeLNAMItem.ErrorMask errorMask,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            return ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeLNAMItem DeepCopy(
            this IBiomeLNAMItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeLNAMItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeLNAMItemSetterCommon)((IBiomeLNAMItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeLNAMItem_FieldIndex
    {
        LNAM = 0,
        ANAM = 1,
        MaskType0 = 2,
        MaskType1 = 3,
        MaskType2 = 4,
        MaskType3 = 5,
        MaskType4 = 6,
        MaskType5 = 7,
    }
    #endregion

    #region Registration
    internal partial class BiomeLNAMItem_Registration : ILoquiRegistration
    {
        public static readonly BiomeLNAMItem_Registration Instance = new BiomeLNAMItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(BiomeLNAMItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeLNAMItem.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeLNAMItem);

        public static readonly Type GetterType = typeof(IBiomeLNAMItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeLNAMItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeLNAMItem";

        public const string Name = "BiomeLNAMItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.LNAM,
                RecordTypes.ANAM,
                RecordTypes.TX00,
                RecordTypes.UX00,
                RecordTypes.VX00,
                RecordTypes.WX00,
                RecordTypes.XX00,
                RecordTypes.YX00);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BiomeLNAMItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeLNAMItemSetterCommon
    {
        public static readonly BiomeLNAMItemSetterCommon Instance = new BiomeLNAMItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeLNAMItem item)
        {
            ClearPartial();
            item.LNAM = null;
            item.ANAM = null;
            item.MaskType0 = default;
            item.MaskType1 = default;
            item.MaskType2 = default;
            item.MaskType3 = default;
            item.MaskType4 = default;
            item.MaskType5 = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeLNAMItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.LNAM?.RemapLinks(mapping);
            obj.ANAM?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeLNAMItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BiomeLNAMItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BiomeLNAMItemCommon
    {
        public static readonly BiomeLNAMItemCommon Instance = new BiomeLNAMItemCommon();

        public BiomeLNAMItem.Mask<bool> GetEqualsMask(
            IBiomeLNAMItemGetter item,
            IBiomeLNAMItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeLNAMItem.Mask<bool>(false);
            ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeLNAMItemGetter item,
            IBiomeLNAMItemGetter rhs,
            BiomeLNAMItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.LNAM = EqualsMaskHelper.EqualsHelper(
                item.LNAM,
                rhs.LNAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ANAM = EqualsMaskHelper.EqualsHelper(
                item.ANAM,
                rhs.ANAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaskType0 = string.Equals(item.MaskType0, rhs.MaskType0);
            ret.MaskType1 = string.Equals(item.MaskType1, rhs.MaskType1);
            ret.MaskType2 = string.Equals(item.MaskType2, rhs.MaskType2);
            ret.MaskType3 = string.Equals(item.MaskType3, rhs.MaskType3);
            ret.MaskType4 = string.Equals(item.MaskType4, rhs.MaskType4);
            ret.MaskType5 = string.Equals(item.MaskType5, rhs.MaskType5);
        }
        
        public string Print(
            IBiomeLNAMItemGetter item,
            string? name = null,
            BiomeLNAMItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeLNAMItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeLNAMItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeLNAMItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeLNAMItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeLNAMItemGetter item,
            StructuredStringBuilder sb,
            BiomeLNAMItem.Mask<bool>? printMask = null)
        {
            if ((printMask?.LNAM?.Overall ?? true)
                && item.LNAM is {} LNAMItem)
            {
                LNAMItem?.Print(sb, "LNAM");
            }
            if ((printMask?.ANAM?.Overall ?? true)
                && item.ANAM is {} ANAMItem)
            {
                ANAMItem?.Print(sb, "ANAM");
            }
            if ((printMask?.MaskType0 ?? true)
                && item.MaskType0 is {} MaskType0Item)
            {
                sb.AppendItem(MaskType0Item, "MaskType0");
            }
            if ((printMask?.MaskType1 ?? true)
                && item.MaskType1 is {} MaskType1Item)
            {
                sb.AppendItem(MaskType1Item, "MaskType1");
            }
            if ((printMask?.MaskType2 ?? true)
                && item.MaskType2 is {} MaskType2Item)
            {
                sb.AppendItem(MaskType2Item, "MaskType2");
            }
            if ((printMask?.MaskType3 ?? true)
                && item.MaskType3 is {} MaskType3Item)
            {
                sb.AppendItem(MaskType3Item, "MaskType3");
            }
            if ((printMask?.MaskType4 ?? true)
                && item.MaskType4 is {} MaskType4Item)
            {
                sb.AppendItem(MaskType4Item, "MaskType4");
            }
            if ((printMask?.MaskType5 ?? true)
                && item.MaskType5 is {} MaskType5Item)
            {
                sb.AppendItem(MaskType5Item, "MaskType5");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeLNAMItemGetter? lhs,
            IBiomeLNAMItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.LNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LNAM, rhs.LNAM, out var lhsLNAM, out var rhsLNAM, out var isLNAMEqual))
                {
                    if (!((BiomeLandItemCommon)((IBiomeLandItemGetter)lhsLNAM).CommonInstance()!).Equals(lhsLNAM, rhsLNAM, equalsMask?.GetSubCrystal((int)BiomeLNAMItem_FieldIndex.LNAM))) return false;
                }
                else if (!isLNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.ANAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ANAM, rhs.ANAM, out var lhsANAM, out var rhsANAM, out var isANAMEqual))
                {
                    if (!((BiomeLandItemCommon)((IBiomeLandItemGetter)lhsANAM).CommonInstance()!).Equals(lhsANAM, rhsANAM, equalsMask?.GetSubCrystal((int)BiomeLNAMItem_FieldIndex.ANAM))) return false;
                }
                else if (!isANAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType0) ?? true))
            {
                if (!string.Equals(lhs.MaskType0, rhs.MaskType0)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType1) ?? true))
            {
                if (!string.Equals(lhs.MaskType1, rhs.MaskType1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType2) ?? true))
            {
                if (!string.Equals(lhs.MaskType2, rhs.MaskType2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType3) ?? true))
            {
                if (!string.Equals(lhs.MaskType3, rhs.MaskType3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType4) ?? true))
            {
                if (!string.Equals(lhs.MaskType4, rhs.MaskType4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType5) ?? true))
            {
                if (!string.Equals(lhs.MaskType5, rhs.MaskType5)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeLNAMItemGetter item)
        {
            var hash = new HashCode();
            if (item.LNAM is {} LNAMitem)
            {
                hash.Add(LNAMitem);
            }
            if (item.ANAM is {} ANAMitem)
            {
                hash.Add(ANAMitem);
            }
            if (item.MaskType0 is {} MaskType0item)
            {
                hash.Add(MaskType0item);
            }
            if (item.MaskType1 is {} MaskType1item)
            {
                hash.Add(MaskType1item);
            }
            if (item.MaskType2 is {} MaskType2item)
            {
                hash.Add(MaskType2item);
            }
            if (item.MaskType3 is {} MaskType3item)
            {
                hash.Add(MaskType3item);
            }
            if (item.MaskType4 is {} MaskType4item)
            {
                hash.Add(MaskType4item);
            }
            if (item.MaskType5 is {} MaskType5item)
            {
                hash.Add(MaskType5item);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeLNAMItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeLNAMItemGetter obj)
        {
            if (obj.LNAM is {} LNAMItems)
            {
                foreach (var item in LNAMItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.ANAM is {} ANAMItems)
            {
                foreach (var item in ANAMItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeLNAMItemSetterTranslationCommon
    {
        public static readonly BiomeLNAMItemSetterTranslationCommon Instance = new BiomeLNAMItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeLNAMItem item,
            IBiomeLNAMItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.LNAM) ?? true))
            {
                errorMask?.PushIndex((int)BiomeLNAMItem_FieldIndex.LNAM);
                try
                {
                    if(rhs.LNAM is {} rhsLNAM)
                    {
                        item.LNAM = rhsLNAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BiomeLNAMItem_FieldIndex.LNAM));
                    }
                    else
                    {
                        item.LNAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.ANAM) ?? true))
            {
                errorMask?.PushIndex((int)BiomeLNAMItem_FieldIndex.ANAM);
                try
                {
                    if(rhs.ANAM is {} rhsANAM)
                    {
                        item.ANAM = rhsANAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BiomeLNAMItem_FieldIndex.ANAM));
                    }
                    else
                    {
                        item.ANAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType0) ?? true))
            {
                item.MaskType0 = rhs.MaskType0;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType1) ?? true))
            {
                item.MaskType1 = rhs.MaskType1;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType2) ?? true))
            {
                item.MaskType2 = rhs.MaskType2;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType3) ?? true))
            {
                item.MaskType3 = rhs.MaskType3;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType4) ?? true))
            {
                item.MaskType4 = rhs.MaskType4;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeLNAMItem_FieldIndex.MaskType5) ?? true))
            {
                item.MaskType5 = rhs.MaskType5;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeLNAMItem item,
            IBiomeLNAMItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeLNAMItem DeepCopy(
            IBiomeLNAMItemGetter item,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            BiomeLNAMItem ret = (BiomeLNAMItem)((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeLNAMItem DeepCopy(
            IBiomeLNAMItemGetter item,
            out BiomeLNAMItem.ErrorMask errorMask,
            BiomeLNAMItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeLNAMItem ret = (BiomeLNAMItem)((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeLNAMItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeLNAMItem DeepCopy(
            IBiomeLNAMItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeLNAMItem ret = (BiomeLNAMItem)((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeLNAMItemSetterTranslationCommon)((IBiomeLNAMItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeLNAMItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeLNAMItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeLNAMItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeLNAMItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeLNAMItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeLNAMItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeLNAMItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeLNAMItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeLNAMItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeLNAMItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeLNAMItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBiomeLNAMItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.LNAM is {} LNAMItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.LNAM))
                {
                    ((BiomeLandItemBinaryWriteTranslation)((IBinaryItem)LNAMItem).BinaryWriteTranslator).Write(
                        item: LNAMItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.ANAM is {} ANAMItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ANAM))
                {
                    ((BiomeLandItemBinaryWriteTranslation)((IBinaryItem)ANAMItem).BinaryWriteTranslator).Write(
                        item: ANAMItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType0,
                header: translationParams.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType1,
                header: translationParams.ConvertToCustom(RecordTypes.UX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType2,
                header: translationParams.ConvertToCustom(RecordTypes.VX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType3,
                header: translationParams.ConvertToCustom(RecordTypes.WX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType4,
                header: translationParams.ConvertToCustom(RecordTypes.XX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaskType5,
                header: translationParams.ConvertToCustom(RecordTypes.YX00),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeLNAMItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeLNAMItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeLNAMItemBinaryCreateTranslation
    {
        public static readonly BiomeLNAMItemBinaryCreateTranslation Instance = new BiomeLNAMItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBiomeLNAMItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.LNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.LNAM = Mutagen.Bethesda.Starfield.BiomeLandItem.CreateFromBinary(frame: frame);
                    return (int)BiomeLNAMItem_FieldIndex.LNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.ANAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.ANAM = Mutagen.Bethesda.Starfield.BiomeLandItem.CreateFromBinary(frame: frame);
                    return (int)BiomeLNAMItem_FieldIndex.ANAM;
                }
                case RecordTypeInts.TX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType0, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType0 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType0;
                }
                case RecordTypeInts.UX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType1, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType1 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType1;
                }
                case RecordTypeInts.VX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType2, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType2 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType2;
                }
                case RecordTypeInts.WX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType3, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType3 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType3;
                }
                case RecordTypeInts.XX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType4, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType4 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType4;
                }
                case RecordTypeInts.YX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType5, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType5 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType5;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeLNAMItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeLNAMItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeLNAMItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeLNAMItemBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeLNAMItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeLNAMItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeLNAMItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeLNAMItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeLNAMItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeLNAMItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeLNAMItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeLNAMItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeLNAMItemCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeLNAMItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeLNAMItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IBiomeLandItemGetter? LNAM { get; private set; }
        public IBiomeLandItemGetter? ANAM { get; private set; }
        #region MaskType0
        private int? _MaskType0Location;
        public String? MaskType0 => _MaskType0Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType0Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MaskType1
        private int? _MaskType1Location;
        public String? MaskType1 => _MaskType1Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType1Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MaskType2
        private int? _MaskType2Location;
        public String? MaskType2 => _MaskType2Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType2Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MaskType3
        private int? _MaskType3Location;
        public String? MaskType3 => _MaskType3Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType3Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MaskType4
        private int? _MaskType4Location;
        public String? MaskType4 => _MaskType4Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType4Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MaskType5
        private int? _MaskType5Location;
        public String? MaskType5 => _MaskType5Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskType5Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeLNAMItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeLNAMItemGetter BiomeLNAMItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BiomeLNAMItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBiomeLNAMItemGetter BiomeLNAMItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeLNAMItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.LNAM, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.LNAM = BiomeLandItemBinaryOverlay.BiomeLandItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)BiomeLNAMItem_FieldIndex.LNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.ANAM, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.ANAM = BiomeLandItemBinaryOverlay.BiomeLandItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)BiomeLNAMItem_FieldIndex.ANAM;
                }
                case RecordTypeInts.TX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType0, translationParams)) return ParseResult.Stop;
                    _MaskType0Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType0;
                }
                case RecordTypeInts.UX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType1, translationParams)) return ParseResult.Stop;
                    _MaskType1Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType1;
                }
                case RecordTypeInts.VX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType2, translationParams)) return ParseResult.Stop;
                    _MaskType2Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType2;
                }
                case RecordTypeInts.WX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType3, translationParams)) return ParseResult.Stop;
                    _MaskType3Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType3;
                }
                case RecordTypeInts.XX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType4, translationParams)) return ParseResult.Stop;
                    _MaskType4Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType4;
                }
                case RecordTypeInts.YX00:
                {
                    if (lastParsed.ShortCircuit((int)BiomeLNAMItem_FieldIndex.MaskType5, translationParams)) return ParseResult.Stop;
                    _MaskType5Location = (stream.Position - offset);
                    return (int)BiomeLNAMItem_FieldIndex.MaskType5;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeLNAMItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeLNAMItemGetter rhs) return false;
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeLNAMItemGetter? obj)
        {
            return ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeLNAMItemCommon)((IBiomeLNAMItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

