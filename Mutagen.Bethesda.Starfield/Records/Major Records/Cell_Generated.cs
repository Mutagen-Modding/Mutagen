/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Cell :
        StarfieldMajorRecord,
        ICellInternal,
        IEquatable<ICellGetter>,
        ILoquiObjectSetter<Cell>
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ICellGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ICellGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public Cell.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell.Flag? ICellGetter.Flags => this.Flags;
        #endregion
        #region Grid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellGrid? _Grid;
        public CellGrid? Grid
        {
            get => _Grid;
            set => _Grid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellGridGetter? ICellGetter.Grid => this.Grid;
        #endregion
        #region Lighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellLighting? _Lighting;
        public CellLighting? Lighting
        {
            get => _Lighting;
            set => _Lighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter? ICellGetter.Lighting => this.Lighting;
        #endregion
        #region MaxHeightData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellMaxHeightData? _MaxHeightData;
        public CellMaxHeightData? MaxHeightData
        {
            get => _MaxHeightData;
            set => _MaxHeightData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellMaxHeightDataGetter? ICellGetter.MaxHeightData => this.MaxHeightData;
        #endregion
        #region LightingTemplate
        private readonly IFormLinkNullable<ILightingTemplateGetter> _LightingTemplate = new FormLinkNullable<ILightingTemplateGetter>();
        public IFormLinkNullable<ILightingTemplateGetter> LightingTemplate
        {
            get => _LightingTemplate;
            set => _LightingTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILightingTemplateGetter> ICellGetter.LightingTemplate => this.LightingTemplate;
        #endregion
        #region WaterHeight
        public Single? WaterHeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.WaterHeight => this.WaterHeight;
        #endregion
        #region XILS
        public Single? XILS { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.XILS => this.XILS;
        #endregion
        #region XCLAs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CellXCLAItem> _XCLAs = new ExtendedList<CellXCLAItem>();
        public ExtendedList<CellXCLAItem> XCLAs
        {
            get => this._XCLAs;
            init => this._XCLAs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICellXCLAItemGetter> ICellGetter.XCLAs => _XCLAs;
        #endregion

        #endregion
        #region WaterData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WaterData;
        public MemorySlice<Byte>? WaterData
        {
            get => this._WaterData;
            set => this._WaterData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.WaterData => this.WaterData;
        #endregion
        #region CellSkyRegion
        private readonly IFormLinkNullable<IRegionGetter> _CellSkyRegion = new FormLinkNullable<IRegionGetter>();
        public IFormLinkNullable<IRegionGetter> CellSkyRegion
        {
            get => _CellSkyRegion;
            set => _CellSkyRegion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRegionGetter> ICellGetter.CellSkyRegion => this.CellSkyRegion;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? ICellGetter.Ownership => this.Ownership;
        #endregion
        #region Location
        private readonly IFormLinkNullable<ILocationGetter> _Location = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> Location
        {
            get => _Location;
            set => _Location.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> ICellGetter.Location => this.Location;
        #endregion
        #region Water
        private readonly IFormLinkNullable<IWaterGetter> _Water = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> Water
        {
            get => _Water;
            set => _Water.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> ICellGetter.Water => this.Water;
        #endregion
        #region WaterType
        public String? WaterType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.WaterType => this.WaterType;
        #endregion
        #region ShipBlueprintSnapLinks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CellShipBlueprintSnapLink>? _ShipBlueprintSnapLinks;
        public ExtendedList<CellShipBlueprintSnapLink>? ShipBlueprintSnapLinks
        {
            get => this._ShipBlueprintSnapLinks;
            set => this._ShipBlueprintSnapLinks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICellShipBlueprintSnapLinkGetter>? ICellGetter.ShipBlueprintSnapLinks => _ShipBlueprintSnapLinks;
        #endregion

        #endregion
        #region WaterVelocity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellWaterVelocity? _WaterVelocity;
        public CellWaterVelocity? WaterVelocity
        {
            get => _WaterVelocity;
            set => _WaterVelocity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellWaterVelocityGetter? ICellGetter.WaterVelocity => this.WaterVelocity;
        #endregion
        #region AcousticSpace
        private readonly IFormLinkNullable<IAcousticSpaceGetter> _AcousticSpace = new FormLinkNullable<IAcousticSpaceGetter>();
        public IFormLinkNullable<IAcousticSpaceGetter> AcousticSpace
        {
            get => _AcousticSpace;
            set => _AcousticSpace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAcousticSpaceGetter> ICellGetter.AcousticSpace => this.AcousticSpace;
        #endregion
        #region ImageSpace
        private readonly IFormLinkNullable<IImageSpaceGetter> _ImageSpace = new FormLinkNullable<IImageSpaceGetter>();
        public IFormLinkNullable<IImageSpaceGetter> ImageSpace
        {
            get => _ImageSpace;
            set => _ImageSpace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImageSpaceGetter> ICellGetter.ImageSpace => this.ImageSpace;
        #endregion
        #region WaterEnvironmentMap
        public String? WaterEnvironmentMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.WaterEnvironmentMap => this.WaterEnvironmentMap;
        #endregion
        #region LockList
        private readonly IFormLinkNullable<IFormListGetter> _LockList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> LockList
        {
            get => _LockList;
            set => _LockList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> ICellGetter.LockList => this.LockList;
        #endregion
        #region Music
        private readonly IFormLinkNullable<IMusicTypeGetter> _Music = new FormLinkNullable<IMusicTypeGetter>();
        public IFormLinkNullable<IMusicTypeGetter> Music
        {
            get => _Music;
            set => _Music.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMusicTypeGetter> ICellGetter.Music => this.Music;
        #endregion
        #region GlobalDirtLayerMaterial
        public String? GlobalDirtLayerMaterial { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.GlobalDirtLayerMaterial => this.GlobalDirtLayerMaterial;
        #endregion
        #region GlobalDirtLayerInheritBiomeLayer
        public Boolean? GlobalDirtLayerInheritBiomeLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? ICellGetter.GlobalDirtLayerInheritBiomeLayer => this.GlobalDirtLayerInheritBiomeLayer;
        #endregion
        #region TimeOfDay
        private readonly IFormLinkNullable<ITimeOfDayRecordGetter> _TimeOfDay = new FormLinkNullable<ITimeOfDayRecordGetter>();
        public IFormLinkNullable<ITimeOfDayRecordGetter> TimeOfDay
        {
            get => _TimeOfDay;
            set => _TimeOfDay.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITimeOfDayRecordGetter> ICellGetter.TimeOfDay => this.TimeOfDay;
        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            init => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> ICellGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region IsLinkedRefTransient
        public Boolean IsLinkedRefTransient { get; set; } = default(Boolean);
        #endregion
        #region EnvironmentMap
        public String? EnvironmentMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.EnvironmentMap => this.EnvironmentMap;
        #endregion
        #region Traversals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TraversalReference>? _Traversals;
        public ExtendedList<TraversalReference>? Traversals
        {
            get => this._Traversals;
            set => this._Traversals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITraversalReferenceGetter>? ICellGetter.Traversals => _Traversals;
        #endregion

        #endregion
        #region NumTraversalFluffBytes
        public UInt32 NumTraversalFluffBytes { get; set; } = default(UInt32);
        #endregion
        #region NavigationMeshes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavigationMesh> _NavigationMeshes = new ExtendedList<NavigationMesh>();
        public ExtendedList<NavigationMesh> NavigationMeshes
        {
            get => this._NavigationMeshes;
            init => this._NavigationMeshes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavigationMeshGetter> ICellGetter.NavigationMeshes => _NavigationMeshes;
        #endregion

        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default(Int32);
        #endregion
        #region UnknownGroupData
        public Int32 UnknownGroupData { get; set; } = default(Int32);
        #endregion
        #region PersistentTimestamp
        public Int32 PersistentTimestamp { get; set; } = default(Int32);
        #endregion
        #region PersistentUnknownGroupData
        public Int32 PersistentUnknownGroupData { get; set; } = default(Int32);
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Persistent = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Persistent
        {
            get => this._Persistent;
            init => this._Persistent = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        public Int32 TemporaryTimestamp { get; set; } = default(Int32);
        #endregion
        #region TemporaryUnknownGroupData
        public Int32 TemporaryUnknownGroupData { get; set; } = default(Int32);
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Temporary = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Temporary
        {
            get => this._Temporary;
            init => this._Temporary = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Grid = new MaskItem<TItem, CellGrid.Mask<TItem>?>(initialValue, new CellGrid.Mask<TItem>(initialValue));
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(initialValue, new CellLighting.Mask<TItem>(initialValue));
                this.MaxHeightData = new MaskItem<TItem, CellMaxHeightData.Mask<TItem>?>(initialValue, new CellMaxHeightData.Mask<TItem>(initialValue));
                this.LightingTemplate = initialValue;
                this.WaterHeight = initialValue;
                this.XILS = initialValue;
                this.XCLAs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellXCLAItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CellXCLAItem.Mask<TItem>?>>());
                this.WaterData = initialValue;
                this.CellSkyRegion = initialValue;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.Location = initialValue;
                this.Water = initialValue;
                this.WaterType = initialValue;
                this.ShipBlueprintSnapLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellShipBlueprintSnapLink.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CellShipBlueprintSnapLink.Mask<TItem>?>>());
                this.WaterVelocity = new MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>(initialValue, new CellWaterVelocity.Mask<TItem>(initialValue));
                this.AcousticSpace = initialValue;
                this.ImageSpace = initialValue;
                this.WaterEnvironmentMap = initialValue;
                this.LockList = initialValue;
                this.Music = initialValue;
                this.GlobalDirtLayerMaterial = initialValue;
                this.GlobalDirtLayerInheritBiomeLayer = initialValue;
                this.TimeOfDay = initialValue;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.IsLinkedRefTransient = initialValue;
                this.EnvironmentMap = initialValue;
                this.Traversals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TraversalReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TraversalReference.Mask<TItem>?>>());
                this.NumTraversalFluffBytes = initialValue;
                this.NavigationMeshes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMesh.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMesh.Mask<TItem>?>>());
                this.Timestamp = initialValue;
                this.UnknownGroupData = initialValue;
                this.PersistentTimestamp = initialValue;
                this.PersistentUnknownGroupData = initialValue;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = initialValue;
                this.TemporaryUnknownGroupData = initialValue;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Flags,
                TItem Grid,
                TItem Lighting,
                TItem MaxHeightData,
                TItem LightingTemplate,
                TItem WaterHeight,
                TItem XILS,
                TItem XCLAs,
                TItem WaterData,
                TItem CellSkyRegion,
                TItem Ownership,
                TItem Location,
                TItem Water,
                TItem WaterType,
                TItem ShipBlueprintSnapLinks,
                TItem WaterVelocity,
                TItem AcousticSpace,
                TItem ImageSpace,
                TItem WaterEnvironmentMap,
                TItem LockList,
                TItem Music,
                TItem GlobalDirtLayerMaterial,
                TItem GlobalDirtLayerInheritBiomeLayer,
                TItem TimeOfDay,
                TItem LinkedReferences,
                TItem IsLinkedRefTransient,
                TItem EnvironmentMap,
                TItem Traversals,
                TItem NumTraversalFluffBytes,
                TItem NavigationMeshes,
                TItem Timestamp,
                TItem UnknownGroupData,
                TItem PersistentTimestamp,
                TItem PersistentUnknownGroupData,
                TItem Persistent,
                TItem TemporaryTimestamp,
                TItem TemporaryUnknownGroupData,
                TItem Temporary)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Flags = Flags;
                this.Grid = new MaskItem<TItem, CellGrid.Mask<TItem>?>(Grid, new CellGrid.Mask<TItem>(Grid));
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(Lighting, new CellLighting.Mask<TItem>(Lighting));
                this.MaxHeightData = new MaskItem<TItem, CellMaxHeightData.Mask<TItem>?>(MaxHeightData, new CellMaxHeightData.Mask<TItem>(MaxHeightData));
                this.LightingTemplate = LightingTemplate;
                this.WaterHeight = WaterHeight;
                this.XILS = XILS;
                this.XCLAs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellXCLAItem.Mask<TItem>?>>?>(XCLAs, Enumerable.Empty<MaskItemIndexed<TItem, CellXCLAItem.Mask<TItem>?>>());
                this.WaterData = WaterData;
                this.CellSkyRegion = CellSkyRegion;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.Location = Location;
                this.Water = Water;
                this.WaterType = WaterType;
                this.ShipBlueprintSnapLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellShipBlueprintSnapLink.Mask<TItem>?>>?>(ShipBlueprintSnapLinks, Enumerable.Empty<MaskItemIndexed<TItem, CellShipBlueprintSnapLink.Mask<TItem>?>>());
                this.WaterVelocity = new MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>(WaterVelocity, new CellWaterVelocity.Mask<TItem>(WaterVelocity));
                this.AcousticSpace = AcousticSpace;
                this.ImageSpace = ImageSpace;
                this.WaterEnvironmentMap = WaterEnvironmentMap;
                this.LockList = LockList;
                this.Music = Music;
                this.GlobalDirtLayerMaterial = GlobalDirtLayerMaterial;
                this.GlobalDirtLayerInheritBiomeLayer = GlobalDirtLayerInheritBiomeLayer;
                this.TimeOfDay = TimeOfDay;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.IsLinkedRefTransient = IsLinkedRefTransient;
                this.EnvironmentMap = EnvironmentMap;
                this.Traversals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TraversalReference.Mask<TItem>?>>?>(Traversals, Enumerable.Empty<MaskItemIndexed<TItem, TraversalReference.Mask<TItem>?>>());
                this.NumTraversalFluffBytes = NumTraversalFluffBytes;
                this.NavigationMeshes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMesh.Mask<TItem>?>>?>(NavigationMeshes, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMesh.Mask<TItem>?>>());
                this.Timestamp = Timestamp;
                this.UnknownGroupData = UnknownGroupData;
                this.PersistentTimestamp = PersistentTimestamp;
                this.PersistentUnknownGroupData = PersistentUnknownGroupData;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Persistent, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = TemporaryTimestamp;
                this.TemporaryUnknownGroupData = TemporaryUnknownGroupData;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Temporary, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public TItem Flags;
            public MaskItem<TItem, CellGrid.Mask<TItem>?>? Grid { get; set; }
            public MaskItem<TItem, CellLighting.Mask<TItem>?>? Lighting { get; set; }
            public MaskItem<TItem, CellMaxHeightData.Mask<TItem>?>? MaxHeightData { get; set; }
            public TItem LightingTemplate;
            public TItem WaterHeight;
            public TItem XILS;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellXCLAItem.Mask<TItem>?>>?>? XCLAs;
            public TItem WaterData;
            public TItem CellSkyRegion;
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem Location;
            public TItem Water;
            public TItem WaterType;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellShipBlueprintSnapLink.Mask<TItem>?>>?>? ShipBlueprintSnapLinks;
            public MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>? WaterVelocity { get; set; }
            public TItem AcousticSpace;
            public TItem ImageSpace;
            public TItem WaterEnvironmentMap;
            public TItem LockList;
            public TItem Music;
            public TItem GlobalDirtLayerMaterial;
            public TItem GlobalDirtLayerInheritBiomeLayer;
            public TItem TimeOfDay;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public TItem IsLinkedRefTransient;
            public TItem EnvironmentMap;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TraversalReference.Mask<TItem>?>>?>? Traversals;
            public TItem NumTraversalFluffBytes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMesh.Mask<TItem>?>>?>? NavigationMeshes;
            public TItem Timestamp;
            public TItem UnknownGroupData;
            public TItem PersistentTimestamp;
            public TItem PersistentUnknownGroupData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Persistent;
            public TItem TemporaryTimestamp;
            public TItem TemporaryUnknownGroupData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Temporary;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
                if (!object.Equals(this.MaxHeightData, rhs.MaxHeightData)) return false;
                if (!object.Equals(this.LightingTemplate, rhs.LightingTemplate)) return false;
                if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
                if (!object.Equals(this.XILS, rhs.XILS)) return false;
                if (!object.Equals(this.XCLAs, rhs.XCLAs)) return false;
                if (!object.Equals(this.WaterData, rhs.WaterData)) return false;
                if (!object.Equals(this.CellSkyRegion, rhs.CellSkyRegion)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.WaterType, rhs.WaterType)) return false;
                if (!object.Equals(this.ShipBlueprintSnapLinks, rhs.ShipBlueprintSnapLinks)) return false;
                if (!object.Equals(this.WaterVelocity, rhs.WaterVelocity)) return false;
                if (!object.Equals(this.AcousticSpace, rhs.AcousticSpace)) return false;
                if (!object.Equals(this.ImageSpace, rhs.ImageSpace)) return false;
                if (!object.Equals(this.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
                if (!object.Equals(this.LockList, rhs.LockList)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.GlobalDirtLayerMaterial, rhs.GlobalDirtLayerMaterial)) return false;
                if (!object.Equals(this.GlobalDirtLayerInheritBiomeLayer, rhs.GlobalDirtLayerInheritBiomeLayer)) return false;
                if (!object.Equals(this.TimeOfDay, rhs.TimeOfDay)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.IsLinkedRefTransient, rhs.IsLinkedRefTransient)) return false;
                if (!object.Equals(this.EnvironmentMap, rhs.EnvironmentMap)) return false;
                if (!object.Equals(this.Traversals, rhs.Traversals)) return false;
                if (!object.Equals(this.NumTraversalFluffBytes, rhs.NumTraversalFluffBytes)) return false;
                if (!object.Equals(this.NavigationMeshes, rhs.NavigationMeshes)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.UnknownGroupData, rhs.UnknownGroupData)) return false;
                if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
                if (!object.Equals(this.PersistentUnknownGroupData, rhs.PersistentUnknownGroupData)) return false;
                if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
                if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
                if (!object.Equals(this.TemporaryUnknownGroupData, rhs.TemporaryUnknownGroupData)) return false;
                if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Grid);
                hash.Add(this.Lighting);
                hash.Add(this.MaxHeightData);
                hash.Add(this.LightingTemplate);
                hash.Add(this.WaterHeight);
                hash.Add(this.XILS);
                hash.Add(this.XCLAs);
                hash.Add(this.WaterData);
                hash.Add(this.CellSkyRegion);
                hash.Add(this.Ownership);
                hash.Add(this.Location);
                hash.Add(this.Water);
                hash.Add(this.WaterType);
                hash.Add(this.ShipBlueprintSnapLinks);
                hash.Add(this.WaterVelocity);
                hash.Add(this.AcousticSpace);
                hash.Add(this.ImageSpace);
                hash.Add(this.WaterEnvironmentMap);
                hash.Add(this.LockList);
                hash.Add(this.Music);
                hash.Add(this.GlobalDirtLayerMaterial);
                hash.Add(this.GlobalDirtLayerInheritBiomeLayer);
                hash.Add(this.TimeOfDay);
                hash.Add(this.LinkedReferences);
                hash.Add(this.IsLinkedRefTransient);
                hash.Add(this.EnvironmentMap);
                hash.Add(this.Traversals);
                hash.Add(this.NumTraversalFluffBytes);
                hash.Add(this.NavigationMeshes);
                hash.Add(this.Timestamp);
                hash.Add(this.UnknownGroupData);
                hash.Add(this.PersistentTimestamp);
                hash.Add(this.PersistentUnknownGroupData);
                hash.Add(this.Persistent);
                hash.Add(this.TemporaryTimestamp);
                hash.Add(this.TemporaryUnknownGroupData);
                hash.Add(this.Temporary);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (Grid != null)
                {
                    if (!eval(this.Grid.Overall)) return false;
                    if (this.Grid.Specific != null && !this.Grid.Specific.All(eval)) return false;
                }
                if (Lighting != null)
                {
                    if (!eval(this.Lighting.Overall)) return false;
                    if (this.Lighting.Specific != null && !this.Lighting.Specific.All(eval)) return false;
                }
                if (MaxHeightData != null)
                {
                    if (!eval(this.MaxHeightData.Overall)) return false;
                    if (this.MaxHeightData.Specific != null && !this.MaxHeightData.Specific.All(eval)) return false;
                }
                if (!eval(this.LightingTemplate)) return false;
                if (!eval(this.WaterHeight)) return false;
                if (!eval(this.XILS)) return false;
                if (this.XCLAs != null)
                {
                    if (!eval(this.XCLAs.Overall)) return false;
                    if (this.XCLAs.Specific != null)
                    {
                        foreach (var item in this.XCLAs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.WaterData)) return false;
                if (!eval(this.CellSkyRegion)) return false;
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.Location)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.WaterType)) return false;
                if (this.ShipBlueprintSnapLinks != null)
                {
                    if (!eval(this.ShipBlueprintSnapLinks.Overall)) return false;
                    if (this.ShipBlueprintSnapLinks.Specific != null)
                    {
                        foreach (var item in this.ShipBlueprintSnapLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (WaterVelocity != null)
                {
                    if (!eval(this.WaterVelocity.Overall)) return false;
                    if (this.WaterVelocity.Specific != null && !this.WaterVelocity.Specific.All(eval)) return false;
                }
                if (!eval(this.AcousticSpace)) return false;
                if (!eval(this.ImageSpace)) return false;
                if (!eval(this.WaterEnvironmentMap)) return false;
                if (!eval(this.LockList)) return false;
                if (!eval(this.Music)) return false;
                if (!eval(this.GlobalDirtLayerMaterial)) return false;
                if (!eval(this.GlobalDirtLayerInheritBiomeLayer)) return false;
                if (!eval(this.TimeOfDay)) return false;
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.IsLinkedRefTransient)) return false;
                if (!eval(this.EnvironmentMap)) return false;
                if (this.Traversals != null)
                {
                    if (!eval(this.Traversals.Overall)) return false;
                    if (this.Traversals.Specific != null)
                    {
                        foreach (var item in this.Traversals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.NumTraversalFluffBytes)) return false;
                if (this.NavigationMeshes != null)
                {
                    if (!eval(this.NavigationMeshes.Overall)) return false;
                    if (this.NavigationMeshes.Specific != null)
                    {
                        foreach (var item in this.NavigationMeshes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.UnknownGroupData)) return false;
                if (!eval(this.PersistentTimestamp)) return false;
                if (!eval(this.PersistentUnknownGroupData)) return false;
                if (this.Persistent != null)
                {
                    if (!eval(this.Persistent.Overall)) return false;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.TemporaryTimestamp)) return false;
                if (!eval(this.TemporaryUnknownGroupData)) return false;
                if (this.Temporary != null)
                {
                    if (!eval(this.Temporary.Overall)) return false;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (Grid != null)
                {
                    if (eval(this.Grid.Overall)) return true;
                    if (this.Grid.Specific != null && this.Grid.Specific.Any(eval)) return true;
                }
                if (Lighting != null)
                {
                    if (eval(this.Lighting.Overall)) return true;
                    if (this.Lighting.Specific != null && this.Lighting.Specific.Any(eval)) return true;
                }
                if (MaxHeightData != null)
                {
                    if (eval(this.MaxHeightData.Overall)) return true;
                    if (this.MaxHeightData.Specific != null && this.MaxHeightData.Specific.Any(eval)) return true;
                }
                if (eval(this.LightingTemplate)) return true;
                if (eval(this.WaterHeight)) return true;
                if (eval(this.XILS)) return true;
                if (this.XCLAs != null)
                {
                    if (eval(this.XCLAs.Overall)) return true;
                    if (this.XCLAs.Specific != null)
                    {
                        foreach (var item in this.XCLAs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.WaterData)) return true;
                if (eval(this.CellSkyRegion)) return true;
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.Location)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.WaterType)) return true;
                if (this.ShipBlueprintSnapLinks != null)
                {
                    if (eval(this.ShipBlueprintSnapLinks.Overall)) return true;
                    if (this.ShipBlueprintSnapLinks.Specific != null)
                    {
                        foreach (var item in this.ShipBlueprintSnapLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (WaterVelocity != null)
                {
                    if (eval(this.WaterVelocity.Overall)) return true;
                    if (this.WaterVelocity.Specific != null && this.WaterVelocity.Specific.Any(eval)) return true;
                }
                if (eval(this.AcousticSpace)) return true;
                if (eval(this.ImageSpace)) return true;
                if (eval(this.WaterEnvironmentMap)) return true;
                if (eval(this.LockList)) return true;
                if (eval(this.Music)) return true;
                if (eval(this.GlobalDirtLayerMaterial)) return true;
                if (eval(this.GlobalDirtLayerInheritBiomeLayer)) return true;
                if (eval(this.TimeOfDay)) return true;
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.IsLinkedRefTransient)) return true;
                if (eval(this.EnvironmentMap)) return true;
                if (this.Traversals != null)
                {
                    if (eval(this.Traversals.Overall)) return true;
                    if (this.Traversals.Specific != null)
                    {
                        foreach (var item in this.Traversals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.NumTraversalFluffBytes)) return true;
                if (this.NavigationMeshes != null)
                {
                    if (eval(this.NavigationMeshes.Overall)) return true;
                    if (this.NavigationMeshes.Specific != null)
                    {
                        foreach (var item in this.NavigationMeshes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Timestamp)) return true;
                if (eval(this.UnknownGroupData)) return true;
                if (eval(this.PersistentTimestamp)) return true;
                if (eval(this.PersistentUnknownGroupData)) return true;
                if (this.Persistent != null)
                {
                    if (eval(this.Persistent.Overall)) return true;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.TemporaryTimestamp)) return true;
                if (eval(this.TemporaryUnknownGroupData)) return true;
                if (this.Temporary != null)
                {
                    if (eval(this.Temporary.Overall)) return true;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Cell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Grid = this.Grid == null ? null : new MaskItem<R, CellGrid.Mask<R>?>(eval(this.Grid.Overall), this.Grid.Specific?.Translate(eval));
                obj.Lighting = this.Lighting == null ? null : new MaskItem<R, CellLighting.Mask<R>?>(eval(this.Lighting.Overall), this.Lighting.Specific?.Translate(eval));
                obj.MaxHeightData = this.MaxHeightData == null ? null : new MaskItem<R, CellMaxHeightData.Mask<R>?>(eval(this.MaxHeightData.Overall), this.MaxHeightData.Specific?.Translate(eval));
                obj.LightingTemplate = eval(this.LightingTemplate);
                obj.WaterHeight = eval(this.WaterHeight);
                obj.XILS = eval(this.XILS);
                if (XCLAs != null)
                {
                    obj.XCLAs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellXCLAItem.Mask<R>?>>?>(eval(this.XCLAs.Overall), Enumerable.Empty<MaskItemIndexed<R, CellXCLAItem.Mask<R>?>>());
                    if (XCLAs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CellXCLAItem.Mask<R>?>>();
                        obj.XCLAs.Specific = l;
                        foreach (var item in XCLAs.Specific)
                        {
                            MaskItemIndexed<R, CellXCLAItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, CellXCLAItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.WaterData = eval(this.WaterData);
                obj.CellSkyRegion = eval(this.CellSkyRegion);
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.Location = eval(this.Location);
                obj.Water = eval(this.Water);
                obj.WaterType = eval(this.WaterType);
                if (ShipBlueprintSnapLinks != null)
                {
                    obj.ShipBlueprintSnapLinks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellShipBlueprintSnapLink.Mask<R>?>>?>(eval(this.ShipBlueprintSnapLinks.Overall), Enumerable.Empty<MaskItemIndexed<R, CellShipBlueprintSnapLink.Mask<R>?>>());
                    if (ShipBlueprintSnapLinks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CellShipBlueprintSnapLink.Mask<R>?>>();
                        obj.ShipBlueprintSnapLinks.Specific = l;
                        foreach (var item in ShipBlueprintSnapLinks.Specific)
                        {
                            MaskItemIndexed<R, CellShipBlueprintSnapLink.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, CellShipBlueprintSnapLink.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.WaterVelocity = this.WaterVelocity == null ? null : new MaskItem<R, CellWaterVelocity.Mask<R>?>(eval(this.WaterVelocity.Overall), this.WaterVelocity.Specific?.Translate(eval));
                obj.AcousticSpace = eval(this.AcousticSpace);
                obj.ImageSpace = eval(this.ImageSpace);
                obj.WaterEnvironmentMap = eval(this.WaterEnvironmentMap);
                obj.LockList = eval(this.LockList);
                obj.Music = eval(this.Music);
                obj.GlobalDirtLayerMaterial = eval(this.GlobalDirtLayerMaterial);
                obj.GlobalDirtLayerInheritBiomeLayer = eval(this.GlobalDirtLayerInheritBiomeLayer);
                obj.TimeOfDay = eval(this.TimeOfDay);
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific)
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.IsLinkedRefTransient = eval(this.IsLinkedRefTransient);
                obj.EnvironmentMap = eval(this.EnvironmentMap);
                if (Traversals != null)
                {
                    obj.Traversals = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TraversalReference.Mask<R>?>>?>(eval(this.Traversals.Overall), Enumerable.Empty<MaskItemIndexed<R, TraversalReference.Mask<R>?>>());
                    if (Traversals.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TraversalReference.Mask<R>?>>();
                        obj.Traversals.Specific = l;
                        foreach (var item in Traversals.Specific)
                        {
                            MaskItemIndexed<R, TraversalReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TraversalReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NumTraversalFluffBytes = eval(this.NumTraversalFluffBytes);
                if (NavigationMeshes != null)
                {
                    obj.NavigationMeshes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavigationMesh.Mask<R>?>>?>(eval(this.NavigationMeshes.Overall), Enumerable.Empty<MaskItemIndexed<R, NavigationMesh.Mask<R>?>>());
                    if (NavigationMeshes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavigationMesh.Mask<R>?>>();
                        obj.NavigationMeshes.Specific = l;
                        foreach (var item in NavigationMeshes.Specific)
                        {
                            MaskItemIndexed<R, NavigationMesh.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NavigationMesh.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Timestamp = eval(this.Timestamp);
                obj.UnknownGroupData = eval(this.UnknownGroupData);
                obj.PersistentTimestamp = eval(this.PersistentTimestamp);
                obj.PersistentUnknownGroupData = eval(this.PersistentUnknownGroupData);
                if (Persistent != null)
                {
                    obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Persistent.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Persistent.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Persistent.Specific = l;
                        foreach (var item in Persistent.Specific)
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
                obj.TemporaryUnknownGroupData = eval(this.TemporaryUnknownGroupData);
                if (Temporary != null)
                {
                    obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Temporary.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Temporary.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Temporary.Specific = l;
                        foreach (var item in Temporary.Specific)
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Cell.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Cell.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Cell.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Grid?.Overall ?? true)
                    {
                        Grid?.Print(sb);
                    }
                    if (printMask?.Lighting?.Overall ?? true)
                    {
                        Lighting?.Print(sb);
                    }
                    if (printMask?.MaxHeightData?.Overall ?? true)
                    {
                        MaxHeightData?.Print(sb);
                    }
                    if (printMask?.LightingTemplate ?? true)
                    {
                        sb.AppendItem(LightingTemplate, "LightingTemplate");
                    }
                    if (printMask?.WaterHeight ?? true)
                    {
                        sb.AppendItem(WaterHeight, "WaterHeight");
                    }
                    if (printMask?.XILS ?? true)
                    {
                        sb.AppendItem(XILS, "XILS");
                    }
                    if ((printMask?.XCLAs?.Overall ?? true)
                        && XCLAs is {} XCLAsItem)
                    {
                        sb.AppendLine("XCLAs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(XCLAsItem.Overall);
                            if (XCLAsItem.Specific != null)
                            {
                                foreach (var subItem in XCLAsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.WaterData ?? true)
                    {
                        sb.AppendItem(WaterData, "WaterData");
                    }
                    if (printMask?.CellSkyRegion ?? true)
                    {
                        sb.AppendItem(CellSkyRegion, "CellSkyRegion");
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.Print(sb);
                    }
                    if (printMask?.Location ?? true)
                    {
                        sb.AppendItem(Location, "Location");
                    }
                    if (printMask?.Water ?? true)
                    {
                        sb.AppendItem(Water, "Water");
                    }
                    if (printMask?.WaterType ?? true)
                    {
                        sb.AppendItem(WaterType, "WaterType");
                    }
                    if ((printMask?.ShipBlueprintSnapLinks?.Overall ?? true)
                        && ShipBlueprintSnapLinks is {} ShipBlueprintSnapLinksItem)
                    {
                        sb.AppendLine("ShipBlueprintSnapLinks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ShipBlueprintSnapLinksItem.Overall);
                            if (ShipBlueprintSnapLinksItem.Specific != null)
                            {
                                foreach (var subItem in ShipBlueprintSnapLinksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.WaterVelocity?.Overall ?? true)
                    {
                        WaterVelocity?.Print(sb);
                    }
                    if (printMask?.AcousticSpace ?? true)
                    {
                        sb.AppendItem(AcousticSpace, "AcousticSpace");
                    }
                    if (printMask?.ImageSpace ?? true)
                    {
                        sb.AppendItem(ImageSpace, "ImageSpace");
                    }
                    if (printMask?.WaterEnvironmentMap ?? true)
                    {
                        sb.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                    }
                    if (printMask?.LockList ?? true)
                    {
                        sb.AppendItem(LockList, "LockList");
                    }
                    if (printMask?.Music ?? true)
                    {
                        sb.AppendItem(Music, "Music");
                    }
                    if (printMask?.GlobalDirtLayerMaterial ?? true)
                    {
                        sb.AppendItem(GlobalDirtLayerMaterial, "GlobalDirtLayerMaterial");
                    }
                    if (printMask?.GlobalDirtLayerInheritBiomeLayer ?? true)
                    {
                        sb.AppendItem(GlobalDirtLayerInheritBiomeLayer, "GlobalDirtLayerInheritBiomeLayer");
                    }
                    if (printMask?.TimeOfDay ?? true)
                    {
                        sb.AppendItem(TimeOfDay, "TimeOfDay");
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences is {} LinkedReferencesItem)
                    {
                        sb.AppendLine("LinkedReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IsLinkedRefTransient ?? true)
                    {
                        sb.AppendItem(IsLinkedRefTransient, "IsLinkedRefTransient");
                    }
                    if (printMask?.EnvironmentMap ?? true)
                    {
                        sb.AppendItem(EnvironmentMap, "EnvironmentMap");
                    }
                    if ((printMask?.Traversals?.Overall ?? true)
                        && Traversals is {} TraversalsItem)
                    {
                        sb.AppendLine("Traversals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TraversalsItem.Overall);
                            if (TraversalsItem.Specific != null)
                            {
                                foreach (var subItem in TraversalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NumTraversalFluffBytes ?? true)
                    {
                        sb.AppendItem(NumTraversalFluffBytes, "NumTraversalFluffBytes");
                    }
                    if ((printMask?.NavigationMeshes?.Overall ?? true)
                        && NavigationMeshes is {} NavigationMeshesItem)
                    {
                        sb.AppendLine("NavigationMeshes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NavigationMeshesItem.Overall);
                            if (NavigationMeshesItem.Specific != null)
                            {
                                foreach (var subItem in NavigationMeshesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        sb.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.UnknownGroupData ?? true)
                    {
                        sb.AppendItem(UnknownGroupData, "UnknownGroupData");
                    }
                    if (printMask?.PersistentTimestamp ?? true)
                    {
                        sb.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                    }
                    if (printMask?.PersistentUnknownGroupData ?? true)
                    {
                        sb.AppendItem(PersistentUnknownGroupData, "PersistentUnknownGroupData");
                    }
                    if ((printMask?.Persistent?.Overall ?? true)
                        && Persistent is {} PersistentItem)
                    {
                        sb.AppendLine("Persistent =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PersistentItem.Overall);
                            if (PersistentItem.Specific != null)
                            {
                                foreach (var subItem in PersistentItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.TemporaryTimestamp ?? true)
                    {
                        sb.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                    }
                    if (printMask?.TemporaryUnknownGroupData ?? true)
                    {
                        sb.AppendItem(TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
                    }
                    if ((printMask?.Temporary?.Overall ?? true)
                        && Temporary is {} TemporaryItem)
                    {
                        sb.AppendLine("Temporary =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TemporaryItem.Overall);
                            if (TemporaryItem.Specific != null)
                            {
                                foreach (var subItem in TemporaryItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public Exception? Flags;
            public MaskItem<Exception?, CellGrid.ErrorMask?>? Grid;
            public MaskItem<Exception?, CellLighting.ErrorMask?>? Lighting;
            public MaskItem<Exception?, CellMaxHeightData.ErrorMask?>? MaxHeightData;
            public Exception? LightingTemplate;
            public Exception? WaterHeight;
            public Exception? XILS;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellXCLAItem.ErrorMask?>>?>? XCLAs;
            public Exception? WaterData;
            public Exception? CellSkyRegion;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? Location;
            public Exception? Water;
            public Exception? WaterType;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellShipBlueprintSnapLink.ErrorMask?>>?>? ShipBlueprintSnapLinks;
            public MaskItem<Exception?, CellWaterVelocity.ErrorMask?>? WaterVelocity;
            public Exception? AcousticSpace;
            public Exception? ImageSpace;
            public Exception? WaterEnvironmentMap;
            public Exception? LockList;
            public Exception? Music;
            public Exception? GlobalDirtLayerMaterial;
            public Exception? GlobalDirtLayerInheritBiomeLayer;
            public Exception? TimeOfDay;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public Exception? IsLinkedRefTransient;
            public Exception? EnvironmentMap;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TraversalReference.ErrorMask?>>?>? Traversals;
            public Exception? NumTraversalFluffBytes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMesh.ErrorMask?>>?>? NavigationMeshes;
            public Exception? Timestamp;
            public Exception? UnknownGroupData;
            public Exception? PersistentTimestamp;
            public Exception? PersistentUnknownGroupData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Persistent;
            public Exception? TemporaryTimestamp;
            public Exception? TemporaryUnknownGroupData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Temporary;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Components:
                        return Components;
                    case Cell_FieldIndex.Name:
                        return Name;
                    case Cell_FieldIndex.Flags:
                        return Flags;
                    case Cell_FieldIndex.Grid:
                        return Grid;
                    case Cell_FieldIndex.Lighting:
                        return Lighting;
                    case Cell_FieldIndex.MaxHeightData:
                        return MaxHeightData;
                    case Cell_FieldIndex.LightingTemplate:
                        return LightingTemplate;
                    case Cell_FieldIndex.WaterHeight:
                        return WaterHeight;
                    case Cell_FieldIndex.XILS:
                        return XILS;
                    case Cell_FieldIndex.XCLAs:
                        return XCLAs;
                    case Cell_FieldIndex.WaterData:
                        return WaterData;
                    case Cell_FieldIndex.CellSkyRegion:
                        return CellSkyRegion;
                    case Cell_FieldIndex.Ownership:
                        return Ownership;
                    case Cell_FieldIndex.Location:
                        return Location;
                    case Cell_FieldIndex.Water:
                        return Water;
                    case Cell_FieldIndex.WaterType:
                        return WaterType;
                    case Cell_FieldIndex.ShipBlueprintSnapLinks:
                        return ShipBlueprintSnapLinks;
                    case Cell_FieldIndex.WaterVelocity:
                        return WaterVelocity;
                    case Cell_FieldIndex.AcousticSpace:
                        return AcousticSpace;
                    case Cell_FieldIndex.ImageSpace:
                        return ImageSpace;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        return WaterEnvironmentMap;
                    case Cell_FieldIndex.LockList:
                        return LockList;
                    case Cell_FieldIndex.Music:
                        return Music;
                    case Cell_FieldIndex.GlobalDirtLayerMaterial:
                        return GlobalDirtLayerMaterial;
                    case Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer:
                        return GlobalDirtLayerInheritBiomeLayer;
                    case Cell_FieldIndex.TimeOfDay:
                        return TimeOfDay;
                    case Cell_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case Cell_FieldIndex.IsLinkedRefTransient:
                        return IsLinkedRefTransient;
                    case Cell_FieldIndex.EnvironmentMap:
                        return EnvironmentMap;
                    case Cell_FieldIndex.Traversals:
                        return Traversals;
                    case Cell_FieldIndex.NumTraversalFluffBytes:
                        return NumTraversalFluffBytes;
                    case Cell_FieldIndex.NavigationMeshes:
                        return NavigationMeshes;
                    case Cell_FieldIndex.Timestamp:
                        return Timestamp;
                    case Cell_FieldIndex.UnknownGroupData:
                        return UnknownGroupData;
                    case Cell_FieldIndex.PersistentTimestamp:
                        return PersistentTimestamp;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        return PersistentUnknownGroupData;
                    case Cell_FieldIndex.Persistent:
                        return Persistent;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        return TemporaryTimestamp;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        return TemporaryUnknownGroupData;
                    case Cell_FieldIndex.Temporary:
                        return Temporary;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = new MaskItem<Exception?, CellGrid.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.MaxHeightData:
                        this.MaxHeightData = new MaskItem<Exception?, CellMaxHeightData.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.LightingTemplate:
                        this.LightingTemplate = ex;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = ex;
                        break;
                    case Cell_FieldIndex.XILS:
                        this.XILS = ex;
                        break;
                    case Cell_FieldIndex.XCLAs:
                        this.XCLAs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellXCLAItem.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.WaterData:
                        this.WaterData = ex;
                        break;
                    case Cell_FieldIndex.CellSkyRegion:
                        this.CellSkyRegion = ex;
                        break;
                    case Cell_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Cell_FieldIndex.WaterType:
                        this.WaterType = ex;
                        break;
                    case Cell_FieldIndex.ShipBlueprintSnapLinks:
                        this.ShipBlueprintSnapLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellShipBlueprintSnapLink.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.WaterVelocity:
                        this.WaterVelocity = new MaskItem<Exception?, CellWaterVelocity.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.AcousticSpace:
                        this.AcousticSpace = ex;
                        break;
                    case Cell_FieldIndex.ImageSpace:
                        this.ImageSpace = ex;
                        break;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = ex;
                        break;
                    case Cell_FieldIndex.LockList:
                        this.LockList = ex;
                        break;
                    case Cell_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Cell_FieldIndex.GlobalDirtLayerMaterial:
                        this.GlobalDirtLayerMaterial = ex;
                        break;
                    case Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer:
                        this.GlobalDirtLayerInheritBiomeLayer = ex;
                        break;
                    case Cell_FieldIndex.TimeOfDay:
                        this.TimeOfDay = ex;
                        break;
                    case Cell_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.IsLinkedRefTransient:
                        this.IsLinkedRefTransient = ex;
                        break;
                    case Cell_FieldIndex.EnvironmentMap:
                        this.EnvironmentMap = ex;
                        break;
                    case Cell_FieldIndex.Traversals:
                        this.Traversals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TraversalReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.NumTraversalFluffBytes:
                        this.NumTraversalFluffBytes = ex;
                        break;
                    case Cell_FieldIndex.NavigationMeshes:
                        this.NavigationMeshes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMesh.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Cell_FieldIndex.UnknownGroupData:
                        this.UnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = ex;
                        break;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        this.PersistentUnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = ex;
                        break;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        this.TemporaryUnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = (MaskItem<Exception?, CellGrid.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = (MaskItem<Exception?, CellLighting.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.MaxHeightData:
                        this.MaxHeightData = (MaskItem<Exception?, CellMaxHeightData.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.LightingTemplate:
                        this.LightingTemplate = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.XILS:
                        this.XILS = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.XCLAs:
                        this.XCLAs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellXCLAItem.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.WaterData:
                        this.WaterData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.CellSkyRegion:
                        this.CellSkyRegion = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterType:
                        this.WaterType = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.ShipBlueprintSnapLinks:
                        this.ShipBlueprintSnapLinks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellShipBlueprintSnapLink.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.WaterVelocity:
                        this.WaterVelocity = (MaskItem<Exception?, CellWaterVelocity.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.AcousticSpace:
                        this.AcousticSpace = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.ImageSpace:
                        this.ImageSpace = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.LockList:
                        this.LockList = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.GlobalDirtLayerMaterial:
                        this.GlobalDirtLayerMaterial = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer:
                        this.GlobalDirtLayerInheritBiomeLayer = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.TimeOfDay:
                        this.TimeOfDay = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.IsLinkedRefTransient:
                        this.IsLinkedRefTransient = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.EnvironmentMap:
                        this.EnvironmentMap = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Traversals:
                        this.Traversals = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TraversalReference.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.NumTraversalFluffBytes:
                        this.NumTraversalFluffBytes = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.NavigationMeshes:
                        this.NavigationMeshes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMesh.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.UnknownGroupData:
                        this.UnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        this.PersistentUnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        this.TemporaryUnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Grid != null) return true;
                if (Lighting != null) return true;
                if (MaxHeightData != null) return true;
                if (LightingTemplate != null) return true;
                if (WaterHeight != null) return true;
                if (XILS != null) return true;
                if (XCLAs != null) return true;
                if (WaterData != null) return true;
                if (CellSkyRegion != null) return true;
                if (Ownership != null) return true;
                if (Location != null) return true;
                if (Water != null) return true;
                if (WaterType != null) return true;
                if (ShipBlueprintSnapLinks != null) return true;
                if (WaterVelocity != null) return true;
                if (AcousticSpace != null) return true;
                if (ImageSpace != null) return true;
                if (WaterEnvironmentMap != null) return true;
                if (LockList != null) return true;
                if (Music != null) return true;
                if (GlobalDirtLayerMaterial != null) return true;
                if (GlobalDirtLayerInheritBiomeLayer != null) return true;
                if (TimeOfDay != null) return true;
                if (LinkedReferences != null) return true;
                if (IsLinkedRefTransient != null) return true;
                if (EnvironmentMap != null) return true;
                if (Traversals != null) return true;
                if (NumTraversalFluffBytes != null) return true;
                if (NavigationMeshes != null) return true;
                if (Timestamp != null) return true;
                if (UnknownGroupData != null) return true;
                if (PersistentTimestamp != null) return true;
                if (PersistentUnknownGroupData != null) return true;
                if (Persistent != null) return true;
                if (TemporaryTimestamp != null) return true;
                if (TemporaryUnknownGroupData != null) return true;
                if (Temporary != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                Grid?.Print(sb);
                Lighting?.Print(sb);
                MaxHeightData?.Print(sb);
                {
                    sb.AppendItem(LightingTemplate, "LightingTemplate");
                }
                {
                    sb.AppendItem(WaterHeight, "WaterHeight");
                }
                {
                    sb.AppendItem(XILS, "XILS");
                }
                if (XCLAs is {} XCLAsItem)
                {
                    sb.AppendLine("XCLAs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(XCLAsItem.Overall);
                        if (XCLAsItem.Specific != null)
                        {
                            foreach (var subItem in XCLAsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(WaterData, "WaterData");
                }
                {
                    sb.AppendItem(CellSkyRegion, "CellSkyRegion");
                }
                Ownership?.Print(sb);
                {
                    sb.AppendItem(Location, "Location");
                }
                {
                    sb.AppendItem(Water, "Water");
                }
                {
                    sb.AppendItem(WaterType, "WaterType");
                }
                if (ShipBlueprintSnapLinks is {} ShipBlueprintSnapLinksItem)
                {
                    sb.AppendLine("ShipBlueprintSnapLinks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ShipBlueprintSnapLinksItem.Overall);
                        if (ShipBlueprintSnapLinksItem.Specific != null)
                        {
                            foreach (var subItem in ShipBlueprintSnapLinksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                WaterVelocity?.Print(sb);
                {
                    sb.AppendItem(AcousticSpace, "AcousticSpace");
                }
                {
                    sb.AppendItem(ImageSpace, "ImageSpace");
                }
                {
                    sb.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                }
                {
                    sb.AppendItem(LockList, "LockList");
                }
                {
                    sb.AppendItem(Music, "Music");
                }
                {
                    sb.AppendItem(GlobalDirtLayerMaterial, "GlobalDirtLayerMaterial");
                }
                {
                    sb.AppendItem(GlobalDirtLayerInheritBiomeLayer, "GlobalDirtLayerInheritBiomeLayer");
                }
                {
                    sb.AppendItem(TimeOfDay, "TimeOfDay");
                }
                if (LinkedReferences is {} LinkedReferencesItem)
                {
                    sb.AppendLine("LinkedReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IsLinkedRefTransient, "IsLinkedRefTransient");
                }
                {
                    sb.AppendItem(EnvironmentMap, "EnvironmentMap");
                }
                if (Traversals is {} TraversalsItem)
                {
                    sb.AppendLine("Traversals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TraversalsItem.Overall);
                        if (TraversalsItem.Specific != null)
                        {
                            foreach (var subItem in TraversalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NumTraversalFluffBytes, "NumTraversalFluffBytes");
                }
                if (NavigationMeshes is {} NavigationMeshesItem)
                {
                    sb.AppendLine("NavigationMeshes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NavigationMeshesItem.Overall);
                        if (NavigationMeshesItem.Specific != null)
                        {
                            foreach (var subItem in NavigationMeshesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Timestamp, "Timestamp");
                }
                {
                    sb.AppendItem(UnknownGroupData, "UnknownGroupData");
                }
                {
                    sb.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                }
                {
                    sb.AppendItem(PersistentUnknownGroupData, "PersistentUnknownGroupData");
                }
                if (Persistent is {} PersistentItem)
                {
                    sb.AppendLine("Persistent =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PersistentItem.Overall);
                        if (PersistentItem.Specific != null)
                        {
                            foreach (var subItem in PersistentItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                }
                {
                    sb.AppendItem(TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
                }
                if (Temporary is {} TemporaryItem)
                {
                    sb.AppendLine("Temporary =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TemporaryItem.Overall);
                        if (TemporaryItem.Specific != null)
                        {
                            foreach (var subItem in TemporaryItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Grid = this.Grid.Combine(rhs.Grid, (l, r) => l.Combine(r));
                ret.Lighting = this.Lighting.Combine(rhs.Lighting, (l, r) => l.Combine(r));
                ret.MaxHeightData = this.MaxHeightData.Combine(rhs.MaxHeightData, (l, r) => l.Combine(r));
                ret.LightingTemplate = this.LightingTemplate.Combine(rhs.LightingTemplate);
                ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
                ret.XILS = this.XILS.Combine(rhs.XILS);
                ret.XCLAs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellXCLAItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.XCLAs?.Overall, rhs.XCLAs?.Overall), Noggog.ExceptionExt.Combine(this.XCLAs?.Specific, rhs.XCLAs?.Specific));
                ret.WaterData = this.WaterData.Combine(rhs.WaterData);
                ret.CellSkyRegion = this.CellSkyRegion.Combine(rhs.CellSkyRegion);
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.WaterType = this.WaterType.Combine(rhs.WaterType);
                ret.ShipBlueprintSnapLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellShipBlueprintSnapLink.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ShipBlueprintSnapLinks?.Overall, rhs.ShipBlueprintSnapLinks?.Overall), Noggog.ExceptionExt.Combine(this.ShipBlueprintSnapLinks?.Specific, rhs.ShipBlueprintSnapLinks?.Specific));
                ret.WaterVelocity = this.WaterVelocity.Combine(rhs.WaterVelocity, (l, r) => l.Combine(r));
                ret.AcousticSpace = this.AcousticSpace.Combine(rhs.AcousticSpace);
                ret.ImageSpace = this.ImageSpace.Combine(rhs.ImageSpace);
                ret.WaterEnvironmentMap = this.WaterEnvironmentMap.Combine(rhs.WaterEnvironmentMap);
                ret.LockList = this.LockList.Combine(rhs.LockList);
                ret.Music = this.Music.Combine(rhs.Music);
                ret.GlobalDirtLayerMaterial = this.GlobalDirtLayerMaterial.Combine(rhs.GlobalDirtLayerMaterial);
                ret.GlobalDirtLayerInheritBiomeLayer = this.GlobalDirtLayerInheritBiomeLayer.Combine(rhs.GlobalDirtLayerInheritBiomeLayer);
                ret.TimeOfDay = this.TimeOfDay.Combine(rhs.TimeOfDay);
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), Noggog.ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.IsLinkedRefTransient = this.IsLinkedRefTransient.Combine(rhs.IsLinkedRefTransient);
                ret.EnvironmentMap = this.EnvironmentMap.Combine(rhs.EnvironmentMap);
                ret.Traversals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TraversalReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Traversals?.Overall, rhs.Traversals?.Overall), Noggog.ExceptionExt.Combine(this.Traversals?.Specific, rhs.Traversals?.Specific));
                ret.NumTraversalFluffBytes = this.NumTraversalFluffBytes.Combine(rhs.NumTraversalFluffBytes);
                ret.NavigationMeshes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMesh.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.NavigationMeshes?.Overall, rhs.NavigationMeshes?.Overall), Noggog.ExceptionExt.Combine(this.NavigationMeshes?.Specific, rhs.NavigationMeshes?.Specific));
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.UnknownGroupData = this.UnknownGroupData.Combine(rhs.UnknownGroupData);
                ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
                ret.PersistentUnknownGroupData = this.PersistentUnknownGroupData.Combine(rhs.PersistentUnknownGroupData);
                ret.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Persistent?.Overall, rhs.Persistent?.Overall), Noggog.ExceptionExt.Combine(this.Persistent?.Specific, rhs.Persistent?.Specific));
                ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
                ret.TemporaryUnknownGroupData = this.TemporaryUnknownGroupData.Combine(rhs.TemporaryUnknownGroupData);
                ret.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Temporary?.Overall, rhs.Temporary?.Overall), Noggog.ExceptionExt.Combine(this.Temporary?.Specific, rhs.Temporary?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Name;
            public bool Flags;
            public CellGrid.TranslationMask? Grid;
            public CellLighting.TranslationMask? Lighting;
            public CellMaxHeightData.TranslationMask? MaxHeightData;
            public bool LightingTemplate;
            public bool WaterHeight;
            public bool XILS;
            public CellXCLAItem.TranslationMask? XCLAs;
            public bool WaterData;
            public bool CellSkyRegion;
            public Ownership.TranslationMask? Ownership;
            public bool Location;
            public bool Water;
            public bool WaterType;
            public CellShipBlueprintSnapLink.TranslationMask? ShipBlueprintSnapLinks;
            public CellWaterVelocity.TranslationMask? WaterVelocity;
            public bool AcousticSpace;
            public bool ImageSpace;
            public bool WaterEnvironmentMap;
            public bool LockList;
            public bool Music;
            public bool GlobalDirtLayerMaterial;
            public bool GlobalDirtLayerInheritBiomeLayer;
            public bool TimeOfDay;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public bool IsLinkedRefTransient;
            public bool EnvironmentMap;
            public TraversalReference.TranslationMask? Traversals;
            public bool NumTraversalFluffBytes;
            public NavigationMesh.TranslationMask? NavigationMeshes;
            public bool Timestamp;
            public bool UnknownGroupData;
            public bool PersistentTimestamp;
            public bool PersistentUnknownGroupData;
            public bool Persistent;
            public bool TemporaryTimestamp;
            public bool TemporaryUnknownGroupData;
            public bool Temporary;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.LightingTemplate = defaultOn;
                this.WaterHeight = defaultOn;
                this.XILS = defaultOn;
                this.WaterData = defaultOn;
                this.CellSkyRegion = defaultOn;
                this.Location = defaultOn;
                this.Water = defaultOn;
                this.WaterType = defaultOn;
                this.AcousticSpace = defaultOn;
                this.ImageSpace = defaultOn;
                this.WaterEnvironmentMap = defaultOn;
                this.LockList = defaultOn;
                this.Music = defaultOn;
                this.GlobalDirtLayerMaterial = defaultOn;
                this.GlobalDirtLayerInheritBiomeLayer = defaultOn;
                this.TimeOfDay = defaultOn;
                this.IsLinkedRefTransient = defaultOn;
                this.EnvironmentMap = defaultOn;
                this.NumTraversalFluffBytes = defaultOn;
                this.Timestamp = defaultOn;
                this.UnknownGroupData = defaultOn;
                this.PersistentTimestamp = defaultOn;
                this.PersistentUnknownGroupData = defaultOn;
                this.Persistent = defaultOn;
                this.TemporaryTimestamp = defaultOn;
                this.TemporaryUnknownGroupData = defaultOn;
                this.Temporary = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Grid != null ? Grid.OnOverall : DefaultOn, Grid?.GetCrystal()));
                ret.Add((Lighting != null ? Lighting.OnOverall : DefaultOn, Lighting?.GetCrystal()));
                ret.Add((MaxHeightData != null ? MaxHeightData.OnOverall : DefaultOn, MaxHeightData?.GetCrystal()));
                ret.Add((LightingTemplate, null));
                ret.Add((WaterHeight, null));
                ret.Add((XILS, null));
                ret.Add((XCLAs == null ? DefaultOn : !XCLAs.GetCrystal().CopyNothing, XCLAs?.GetCrystal()));
                ret.Add((WaterData, null));
                ret.Add((CellSkyRegion, null));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((Location, null));
                ret.Add((Water, null));
                ret.Add((WaterType, null));
                ret.Add((ShipBlueprintSnapLinks == null ? DefaultOn : !ShipBlueprintSnapLinks.GetCrystal().CopyNothing, ShipBlueprintSnapLinks?.GetCrystal()));
                ret.Add((WaterVelocity != null ? WaterVelocity.OnOverall : DefaultOn, WaterVelocity?.GetCrystal()));
                ret.Add((AcousticSpace, null));
                ret.Add((ImageSpace, null));
                ret.Add((WaterEnvironmentMap, null));
                ret.Add((LockList, null));
                ret.Add((Music, null));
                ret.Add((GlobalDirtLayerMaterial, null));
                ret.Add((GlobalDirtLayerInheritBiomeLayer, null));
                ret.Add((TimeOfDay, null));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((IsLinkedRefTransient, null));
                ret.Add((EnvironmentMap, null));
                ret.Add((Traversals == null ? DefaultOn : !Traversals.GetCrystal().CopyNothing, Traversals?.GetCrystal()));
                ret.Add((NumTraversalFluffBytes, null));
                ret.Add((NavigationMeshes == null ? DefaultOn : !NavigationMeshes.GetCrystal().CopyNothing, NavigationMeshes?.GetCrystal()));
                ret.Add((Timestamp, null));
                ret.Add((UnknownGroupData, null));
                ret.Add((PersistentTimestamp, null));
                ret.Add((PersistentUnknownGroupData, null));
                ret.Add((Persistent, null));
                ret.Add((TemporaryTimestamp, null));
                ret.Add((TemporaryUnknownGroupData, null));
                ret.Add((Temporary, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Cell_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CellCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellSetterCommon.Instance.RemapLinks(this, mapping);
        public Cell(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Cell(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Cell(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Cell(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Cell(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Cell>.ToString(this);
        }

        protected override Type LinkType => typeof(ICell);

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => CellCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => CellSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => CellSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => CellSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICellGetter rhs) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Cell CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Cell item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        IAssetLinkContainer,
        ICellGetter,
        ICellOrObject,
        IComplexLocation,
        IFormLinkContainer,
        ILoquiObjectSetter<ICellInternal>,
        IMajorRecordEnumerable,
        INamed,
        INamedRequired,
        ISpaceCellSpawn,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Cell.Flag? Flags { get; set; }
        new CellGrid? Grid { get; set; }
        new CellLighting? Lighting { get; set; }
        new CellMaxHeightData? MaxHeightData { get; set; }
        new IFormLinkNullable<ILightingTemplateGetter> LightingTemplate { get; set; }
        new Single? WaterHeight { get; set; }
        new Single? XILS { get; set; }
        new ExtendedList<CellXCLAItem> XCLAs { get; }
        new MemorySlice<Byte>? WaterData { get; set; }
        new IFormLinkNullable<IRegionGetter> CellSkyRegion { get; set; }
        new Ownership? Ownership { get; set; }
        new IFormLinkNullable<ILocationGetter> Location { get; set; }
        new IFormLinkNullable<IWaterGetter> Water { get; set; }
        new String? WaterType { get; set; }
        new ExtendedList<CellShipBlueprintSnapLink>? ShipBlueprintSnapLinks { get; set; }
        new CellWaterVelocity? WaterVelocity { get; set; }
        new IFormLinkNullable<IAcousticSpaceGetter> AcousticSpace { get; set; }
        new IFormLinkNullable<IImageSpaceGetter> ImageSpace { get; set; }
        new String? WaterEnvironmentMap { get; set; }
        new IFormLinkNullable<IFormListGetter> LockList { get; set; }
        new IFormLinkNullable<IMusicTypeGetter> Music { get; set; }
        new String? GlobalDirtLayerMaterial { get; set; }
        new Boolean? GlobalDirtLayerInheritBiomeLayer { get; set; }
        new IFormLinkNullable<ITimeOfDayRecordGetter> TimeOfDay { get; set; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new Boolean IsLinkedRefTransient { get; set; }
        new String? EnvironmentMap { get; set; }
        new ExtendedList<TraversalReference>? Traversals { get; set; }
        new UInt32 NumTraversalFluffBytes { get; set; }
        new ExtendedList<NavigationMesh> NavigationMeshes { get; }
        new Int32 Timestamp { get; set; }
        new Int32 UnknownGroupData { get; set; }
        new Int32 PersistentTimestamp { get; set; }
        new Int32 PersistentUnknownGroupData { get; set; }
        new ExtendedList<IPlaced> Persistent { get; }
        new Int32 TemporaryTimestamp { get; set; }
        new Int32 TemporaryUnknownGroupData { get; set; }
        new ExtendedList<IPlaced> Temporary { get; }
        #region Mutagen
        new Cell.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ICellInternal :
        IStarfieldMajorRecordInternal,
        ICell,
        ICellGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.CELL)]
    public partial interface ICellGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        ICellOrObjectGetter,
        IComplexLocationGetter,
        IFormLinkContainerGetter,
        ILoquiObject<ICellGetter>,
        IMajorRecordGetterEnumerable,
        IMapsToGetter<ICellGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ISpaceCellSpawnGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Cell.Flag? Flags { get; }
        ICellGridGetter? Grid { get; }
        ICellLightingGetter? Lighting { get; }
        ICellMaxHeightDataGetter? MaxHeightData { get; }
        IFormLinkNullableGetter<ILightingTemplateGetter> LightingTemplate { get; }
        Single? WaterHeight { get; }
        Single? XILS { get; }
        IReadOnlyList<ICellXCLAItemGetter> XCLAs { get; }
        ReadOnlyMemorySlice<Byte>? WaterData { get; }
        IFormLinkNullableGetter<IRegionGetter> CellSkyRegion { get; }
        IOwnershipGetter? Ownership { get; }
        IFormLinkNullableGetter<ILocationGetter> Location { get; }
        IFormLinkNullableGetter<IWaterGetter> Water { get; }
        String? WaterType { get; }
        IReadOnlyList<ICellShipBlueprintSnapLinkGetter>? ShipBlueprintSnapLinks { get; }
        ICellWaterVelocityGetter? WaterVelocity { get; }
        IFormLinkNullableGetter<IAcousticSpaceGetter> AcousticSpace { get; }
        IFormLinkNullableGetter<IImageSpaceGetter> ImageSpace { get; }
        String? WaterEnvironmentMap { get; }
        IFormLinkNullableGetter<IFormListGetter> LockList { get; }
        IFormLinkNullableGetter<IMusicTypeGetter> Music { get; }
        String? GlobalDirtLayerMaterial { get; }
        Boolean? GlobalDirtLayerInheritBiomeLayer { get; }
        IFormLinkNullableGetter<ITimeOfDayRecordGetter> TimeOfDay { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        Boolean IsLinkedRefTransient { get; }
        String? EnvironmentMap { get; }
        IReadOnlyList<ITraversalReferenceGetter>? Traversals { get; }
        UInt32 NumTraversalFluffBytes { get; }
        IReadOnlyList<INavigationMeshGetter> NavigationMeshes { get; }
        Int32 Timestamp { get; }
        Int32 UnknownGroupData { get; }
        Int32 PersistentTimestamp { get; }
        Int32 PersistentUnknownGroupData { get; }
        IReadOnlyList<IPlacedGetter> Persistent { get; }
        Int32 TemporaryTimestamp { get; }
        Int32 TemporaryUnknownGroupData { get; }
        IReadOnlyList<IPlacedGetter> Temporary { get; }

        #region Mutagen
        Cell.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Cell.Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs,
            Cell.TranslationMask? equalsMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this ICellGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this ICellGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellInternal obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this ICellInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Cell Duplicate(
            this ICellGetter item,
            FormKey formKey,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Cell Duplicate(
            this ICellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Flags = 9,
        Grid = 10,
        Lighting = 11,
        MaxHeightData = 12,
        LightingTemplate = 13,
        WaterHeight = 14,
        XILS = 15,
        XCLAs = 16,
        WaterData = 17,
        CellSkyRegion = 18,
        Ownership = 19,
        Location = 20,
        Water = 21,
        WaterType = 22,
        ShipBlueprintSnapLinks = 23,
        WaterVelocity = 24,
        AcousticSpace = 25,
        ImageSpace = 26,
        WaterEnvironmentMap = 27,
        LockList = 28,
        Music = 29,
        GlobalDirtLayerMaterial = 30,
        GlobalDirtLayerInheritBiomeLayer = 31,
        TimeOfDay = 32,
        LinkedReferences = 33,
        IsLinkedRefTransient = 34,
        EnvironmentMap = 35,
        Traversals = 36,
        NumTraversalFluffBytes = 37,
        NavigationMeshes = 38,
        Timestamp = 39,
        UnknownGroupData = 40,
        PersistentTimestamp = 41,
        PersistentUnknownGroupData = 42,
        Persistent = 43,
        TemporaryTimestamp = 44,
        TemporaryUnknownGroupData = 45,
        Temporary = 46,
    }
    #endregion

    #region Registration
    internal partial class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 40;

        public const ushort FieldCount = 47;

        public static readonly Type MaskType = typeof(Cell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell.ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type? InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CELL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CELL);
            var all = RecordCollection.Factory(
                RecordTypes.CELL,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.DATA,
                RecordTypes.XCLC,
                RecordTypes.XCLL,
                RecordTypes.MHDT,
                RecordTypes.LTMP,
                RecordTypes.XCLW,
                RecordTypes.XILS,
                RecordTypes.XCLA,
                RecordTypes.XCLD,
                RecordTypes.XWCN,
                RecordTypes.XCCM,
                RecordTypes.XOWN,
                RecordTypes.XLCN,
                RecordTypes.XCWT,
                RecordTypes.XCWM,
                RecordTypes.XBPS,
                RecordTypes.XWCU,
                RecordTypes.XCAS,
                RecordTypes.XCIM,
                RecordTypes.XWEM,
                RecordTypes.XILL,
                RecordTypes.XCMO,
                RecordTypes.XCGD,
                RecordTypes.XCIB,
                RecordTypes.TODD,
                RecordTypes.XLKR,
                RecordTypes.XLKT,
                RecordTypes.XEMP,
                RecordTypes.XTV2,
                RecordTypes.XXXX,
                RecordTypes.NAVM,
                RecordTypes.VMAD,
                RecordTypes.NVNM,
                RecordTypes.NNAM,
                RecordTypes.MNAM,
                RecordTypes.ACHR,
                RecordTypes.REFR,
                RecordTypes.NAME,
                RecordTypes.XEMI,
                RecordTypes.XRGD,
                RecordTypes.XRFG,
                RecordTypes.XPCS,
                RecordTypes.XIS2,
                RecordTypes.XRNK,
                RecordTypes.XEZN,
                RecordTypes.XLYR,
                RecordTypes.XHTW,
                RecordTypes.XLRT,
                RecordTypes.XESP,
                RecordTypes.XATP,
                RecordTypes.XSCL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static bool IsPartialFormable => true;
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CellSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Name = default;
            item.Flags = default;
            item.Grid = null;
            item.Lighting = null;
            item.MaxHeightData = null;
            item.LightingTemplate.Clear();
            item.WaterHeight = default;
            item.XILS = default;
            item.XCLAs.Clear();
            item.WaterData = default;
            item.CellSkyRegion.Clear();
            item.Ownership = null;
            item.Location.Clear();
            item.Water.Clear();
            item.WaterType = default;
            item.ShipBlueprintSnapLinks = null;
            item.WaterVelocity = null;
            item.AcousticSpace.Clear();
            item.ImageSpace.Clear();
            item.WaterEnvironmentMap = default;
            item.LockList.Clear();
            item.Music.Clear();
            item.GlobalDirtLayerMaterial = default;
            item.GlobalDirtLayerInheritBiomeLayer = default;
            item.TimeOfDay.Clear();
            item.LinkedReferences.Clear();
            item.IsLinkedRefTransient = default(Boolean);
            item.EnvironmentMap = default;
            item.Traversals = null;
            item.NumTraversalFluffBytes = default(UInt32);
            item.NavigationMeshes.Clear();
            item.Timestamp = default(Int32);
            item.UnknownGroupData = default(Int32);
            item.PersistentTimestamp = default(Int32);
            item.PersistentUnknownGroupData = default(Int32);
            item.Persistent.Clear();
            item.TemporaryTimestamp = default(Int32);
            item.TemporaryUnknownGroupData = default(Int32);
            item.Temporary.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICell obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.LightingTemplate.Relink(mapping);
            obj.CellSkyRegion.Relink(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.Location.Relink(mapping);
            obj.Water.Relink(mapping);
            obj.ShipBlueprintSnapLinks?.RemapLinks(mapping);
            obj.AcousticSpace.Relink(mapping);
            obj.ImageSpace.Relink(mapping);
            obj.LockList.Relink(mapping);
            obj.Music.Relink(mapping);
            obj.TimeOfDay.Relink(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.Traversals?.RemapLinks(mapping);
            obj.NavigationMeshes.RemapLinks(mapping);
            obj.Persistent.RemapLinks(mapping);
            obj.Temporary.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(ICellInternal obj)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ICellInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ICellInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys)
        {
            obj.NavigationMeshes.Remove(keys);
            obj.Persistent.Remove(keys);
            obj.Temporary.Remove(keys);
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                case "AnimationGraphComponent":
                case "IAnimationGraphComponentGetter":
                case "IAnimationGraphComponent":
                case "AttachParentArrayComponent":
                case "IAttachParentArrayComponentGetter":
                case "IAttachParentArrayComponent":
                case "ActivityTrackerComponent":
                case "IActivityTrackerComponentGetter":
                case "IActivityTrackerComponent":
                case "ScannableComponent":
                case "IScannableComponentGetter":
                case "IScannableComponent":
                case "KeywordFormComponent":
                case "IKeywordFormComponentGetter":
                case "IKeywordFormComponent":
                case "ObjectWindowFilterComponent":
                case "IObjectWindowFilterComponentGetter":
                case "IObjectWindowFilterComponent":
                case "ContactShadowComponent":
                case "IContactShadowComponentGetter":
                case "IContactShadowComponent":
                case "FullNameComponent":
                case "IFullNameComponentGetter":
                case "IFullNameComponent":
                case "ModelComponent":
                case "IModelComponentGetter":
                case "IModelComponent":
                case "PlanetModelComponent":
                case "IPlanetModelComponentGetter":
                case "IPlanetModelComponent":
                case "HoudiniDataComponent":
                case "IHoudiniDataComponentGetter":
                case "IHoudiniDataComponent":
                case "SkinFormComponent":
                case "ISkinFormComponentGetter":
                case "ISkinFormComponent":
                case "BodyPartInfoComponent":
                case "IBodyPartInfoComponentGetter":
                case "IBodyPartInfoComponent":
                case "EffectSequenceComponent":
                case "IEffectSequenceComponentGetter":
                case "IEffectSequenceComponent":
                case "LightAttachmentFormComponent":
                case "ILightAttachmentFormComponentGetter":
                case "ILightAttachmentFormComponent":
                case "LightAnimFormComponent":
                case "ILightAnimFormComponentGetter":
                case "ILightAnimFormComponent":
                case "ParticleSystemComponent":
                case "IParticleSystemComponentGetter":
                case "IParticleSystemComponent":
                case "LodOwnerComponent":
                case "ILodOwnerComponentGetter":
                case "ILodOwnerComponent":
                case "SoundTagComponent":
                case "ISoundTagComponentGetter":
                case "ISoundTagComponent":
                case "DisplayCaseComponent":
                case "IDisplayCaseComponentGetter":
                case "IDisplayCaseComponent":
                case "ObjectPaletteDefaultsComponent":
                case "IObjectPaletteDefaultsComponentGetter":
                case "IObjectPaletteDefaultsComponent":
                case "VolumesComponent":
                case "IVolumesComponentGetter":
                case "IVolumesComponent":
                case "PlanetContentManagerContentPropertiesComponent":
                case "IPlanetContentManagerContentPropertiesComponentGetter":
                case "IPlanetContentManagerContentPropertiesComponent":
                case "ShipManagementComponent":
                case "IShipManagementComponentGetter":
                case "IShipManagementComponent":
                case "ExternalDataSourceComponent":
                case "IExternalDataSourceComponentGetter":
                case "IExternalDataSourceComponent":
                case "ForcedLocRefTypeComponent":
                case "IForcedLocRefTypeComponentGetter":
                case "IForcedLocRefTypeComponent":
                case "LinkedVoiceTypeComponent":
                case "ILinkedVoiceTypeComponentGetter":
                case "ILinkedVoiceTypeComponent":
                case "PapyrusScriptsComponent":
                case "IPapyrusScriptsComponentGetter":
                case "IPapyrusScriptsComponent":
                case "PathingDataComponent":
                case "IPathingDataComponentGetter":
                case "IPathingDataComponent":
                case "PropertySheetComponent":
                case "IPropertySheetComponentGetter":
                case "IPropertySheetComponent":
                case "SpaceshipAIActorComponent":
                case "ISpaceshipAIActorComponentGetter":
                case "ISpaceshipAIActorComponent":
                case "SpaceshipEquipmentComponent":
                case "ISpaceshipEquipmentComponentGetter":
                case "ISpaceshipEquipmentComponent":
                case "SpaceshipWeaponBindingsComponent":
                case "ISpaceshipWeaponBindingsComponentGetter":
                case "ISpaceshipWeaponBindingsComponent":
                case "FormLinkDataComponent":
                case "IFormLinkDataComponentGetter":
                case "IFormLinkDataComponent":
                case "BlueprintComponent":
                case "IBlueprintComponentGetter":
                case "IBlueprintComponent":
                case "DestructibleObjectComponent":
                case "IDestructibleObjectComponentGetter":
                case "IDestructibleObjectComponent":
                case "ContainerComponent":
                case "IContainerComponentGetter":
                case "IContainerComponent":
                case "MagicTargetFormComponent":
                case "IMagicTargetFormComponentGetter":
                case "IMagicTargetFormComponent":
                case "StoredTraversalsComponent":
                case "IStoredTraversalsComponentGetter":
                case "IStoredTraversalsComponent":
                case "AddToInventoryOnDestroyComponent":
                case "IAddToInventoryOnDestroyComponentGetter":
                case "IAddToInventoryOnDestroyComponent":
                case "CrowdComponent":
                case "ICrowdComponentGetter":
                case "ICrowdComponent":
                case "SpaceshipHullCodeComponent":
                case "ISpaceshipHullCodeComponentGetter":
                case "ISpaceshipHullCodeComponent":
                case "PrimitiveComponent":
                case "IPrimitiveComponentGetter":
                case "IPrimitiveComponent":
                case "SpawnOnDestroyComponent":
                case "ISpawnOnDestroyComponentGetter":
                case "ISpawnOnDestroyComponent":
                case "WorldSpaceOverlayComponent":
                case "IWorldSpaceOverlayComponentGetter":
                case "IWorldSpaceOverlayComponent":
                case "ReflectionProbesComponent":
                case "IReflectionProbesComponentGetter":
                case "IReflectionProbesComponent":
                case "ImageSpaceModifiableFormComponent":
                case "IImageSpaceModifiableFormComponentGetter":
                case "IImageSpaceModifiableFormComponent":
                case "LensFlareAttachmentFormComponent":
                case "ILensFlareAttachmentFormComponentGetter":
                case "ILensFlareAttachmentFormComponent":
                case "MaterialPropertyComponent":
                case "IMaterialPropertyComponentGetter":
                case "IMaterialPropertyComponent":
                case "WorkshopItemColorComponent":
                case "IWorkshopItemColorComponentGetter":
                case "IWorkshopItemColorComponent":
                case "SpacePhysicsComponent":
                case "ISpacePhysicsComponentGetter":
                case "ISpacePhysicsComponent":
                case "BlockEditorMetaDataComponent":
                case "IBlockEditorMetaDataComponentGetter":
                case "IBlockEditorMetaDataComponent":
                case "BlockCellHeightGridComponent":
                case "IBlockCellHeightGridComponentGetter":
                case "IBlockCellHeightGridComponent":
                case "BlockHeightAdjustmentComponent":
                case "IBlockHeightAdjustmentComponentGetter":
                case "IBlockHeightAdjustmentComponent":
                case "UniqueOverlayListComponent":
                case "IUniqueOverlayListComponentGetter":
                case "IUniqueOverlayListComponent":
                case "UniquePatternPlacementInfoComponent":
                case "IUniquePatternPlacementInfoComponentGetter":
                case "IUniquePatternPlacementInfoComponent":
                case "SurfaceTreePatternSwapInfoComponent":
                case "ISurfaceTreePatternSwapInfoComponentGetter":
                case "ISurfaceTreePatternSwapInfoComponent":
                case "OrbitedDataComponent":
                case "IOrbitedDataComponentGetter":
                case "IOrbitedDataComponent":
                case "StarDataComponent":
                case "IStarDataComponentGetter":
                case "IStarDataComponent":
                case "OrbitalDataComponent":
                case "IOrbitalDataComponentGetter":
                case "IOrbitalDataComponent":
                case "CityMapsUsageComponent":
                case "ICityMapsUsageComponentGetter":
                case "ICityMapsUsageComponent":
                case "VehicleManagementComponent":
                case "IVehicleManagementComponentGetter":
                case "IVehicleManagementComponent":
                case "VehicleConfigComponent":
                case "IVehicleConfigComponentGetter":
                case "IVehicleConfigComponent":
                case "OverlayDesignatedPlacementInfoComponent":
                case "IOverlayDesignatedPlacementInfoComponentGetter":
                case "IOverlayDesignatedPlacementInfoComponent":
                    break;
                case "CellXCLAItem":
                case "ICellXCLAItemGetter":
                case "ICellXCLAItem":
                    break;
                case "CellShipBlueprintSnapLink":
                case "ICellShipBlueprintSnapLinkGetter":
                case "ICellShipBlueprintSnapLink":
                    break;
                case "LinkedReferences":
                case "ILinkedReferencesGetter":
                case "ILinkedReferences":
                    break;
                case "TraversalReference":
                case "ITraversalReferenceGetter":
                case "ITraversalReference":
                    break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    obj.NavigationMeshes.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                case "PlacedArrow":
                case "IPlacedArrowGetter":
                case "IPlacedArrow":
                case "IPlacedArrowInternal":
                case "PlacedBeam":
                case "IPlacedBeamGetter":
                case "IPlacedBeam":
                case "IPlacedBeamInternal":
                case "PlacedFlame":
                case "IPlacedFlameGetter":
                case "IPlacedFlame":
                case "IPlacedFlameInternal":
                case "PlacedCone":
                case "IPlacedConeGetter":
                case "IPlacedCone":
                case "IPlacedConeInternal":
                case "PlacedBarrier":
                case "IPlacedBarrierGetter":
                case "IPlacedBarrier":
                case "IPlacedBarrierInternal":
                case "PlacedTrap":
                case "IPlacedTrapGetter":
                case "IPlacedTrap":
                case "IPlacedTrapInternal":
                case "PlacedHazard":
                case "IPlacedHazardGetter":
                case "IPlacedHazard":
                case "IPlacedHazardInternal":
                case "PlacedMissile":
                case "IPlacedMissileGetter":
                case "IPlacedMissile":
                case "IPlacedMissileInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ICell obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshes.WhereCastable<INavigationMeshGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ICell obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.NavigationMeshes.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Persistent.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Temporary.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellBinaryCreateTranslation.FillBinaryRecordTypes);
            CellBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CellCommon : StarfieldMajorRecordCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell.Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Grid = EqualsMaskHelper.EqualsHelper(
                item.Grid,
                rhs.Grid,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaxHeightData = EqualsMaskHelper.EqualsHelper(
                item.MaxHeightData,
                rhs.MaxHeightData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LightingTemplate = item.LightingTemplate.Equals(rhs.LightingTemplate);
            ret.WaterHeight = item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.XILS = item.XILS.EqualsWithin(rhs.XILS);
            ret.XCLAs = item.XCLAs.CollectionEqualsHelper(
                rhs.XCLAs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.WaterData = MemorySliceExt.SequenceEqual(item.WaterData, rhs.WaterData);
            ret.CellSkyRegion = item.CellSkyRegion.Equals(rhs.CellSkyRegion);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Location = item.Location.Equals(rhs.Location);
            ret.Water = item.Water.Equals(rhs.Water);
            ret.WaterType = string.Equals(item.WaterType, rhs.WaterType);
            ret.ShipBlueprintSnapLinks = item.ShipBlueprintSnapLinks.CollectionEqualsHelper(
                rhs.ShipBlueprintSnapLinks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.WaterVelocity = EqualsMaskHelper.EqualsHelper(
                item.WaterVelocity,
                rhs.WaterVelocity,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AcousticSpace = item.AcousticSpace.Equals(rhs.AcousticSpace);
            ret.ImageSpace = item.ImageSpace.Equals(rhs.ImageSpace);
            ret.WaterEnvironmentMap = string.Equals(item.WaterEnvironmentMap, rhs.WaterEnvironmentMap);
            ret.LockList = item.LockList.Equals(rhs.LockList);
            ret.Music = item.Music.Equals(rhs.Music);
            ret.GlobalDirtLayerMaterial = string.Equals(item.GlobalDirtLayerMaterial, rhs.GlobalDirtLayerMaterial);
            ret.GlobalDirtLayerInheritBiomeLayer = item.GlobalDirtLayerInheritBiomeLayer == rhs.GlobalDirtLayerInheritBiomeLayer;
            ret.TimeOfDay = item.TimeOfDay.Equals(rhs.TimeOfDay);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.IsLinkedRefTransient = item.IsLinkedRefTransient == rhs.IsLinkedRefTransient;
            ret.EnvironmentMap = string.Equals(item.EnvironmentMap, rhs.EnvironmentMap);
            ret.Traversals = item.Traversals.CollectionEqualsHelper(
                rhs.Traversals,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NumTraversalFluffBytes = item.NumTraversalFluffBytes == rhs.NumTraversalFluffBytes;
            ret.NavigationMeshes = item.NavigationMeshes.CollectionEqualsHelper(
                rhs.NavigationMeshes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.UnknownGroupData = item.UnknownGroupData == rhs.UnknownGroupData;
            ret.PersistentTimestamp = item.PersistentTimestamp == rhs.PersistentTimestamp;
            ret.PersistentUnknownGroupData = item.PersistentUnknownGroupData == rhs.PersistentUnknownGroupData;
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = item.TemporaryTimestamp == rhs.TemporaryTimestamp;
            ret.TemporaryUnknownGroupData = item.TemporaryUnknownGroupData == rhs.TemporaryUnknownGroupData;
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Cell =>");
            }
            else
            {
                sb.AppendLine($"{name} (Cell) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            StructuredStringBuilder sb,
            Cell.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Grid?.Overall ?? true)
                && item.Grid is {} GridItem)
            {
                GridItem?.Print(sb, "Grid");
            }
            if ((printMask?.Lighting?.Overall ?? true)
                && item.Lighting is {} LightingItem)
            {
                LightingItem?.Print(sb, "Lighting");
            }
            if ((printMask?.MaxHeightData?.Overall ?? true)
                && item.MaxHeightData is {} MaxHeightDataItem)
            {
                MaxHeightDataItem?.Print(sb, "MaxHeightData");
            }
            if (printMask?.LightingTemplate ?? true)
            {
                sb.AppendItem(item.LightingTemplate.FormKeyNullable, "LightingTemplate");
            }
            if ((printMask?.WaterHeight ?? true)
                && item.WaterHeight is {} WaterHeightItem)
            {
                sb.AppendItem(WaterHeightItem, "WaterHeight");
            }
            if ((printMask?.XILS ?? true)
                && item.XILS is {} XILSItem)
            {
                sb.AppendItem(XILSItem, "XILS");
            }
            if (printMask?.XCLAs?.Overall ?? true)
            {
                sb.AppendLine("XCLAs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.XCLAs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.WaterData ?? true)
                && item.WaterData is {} WaterDataItem)
            {
                sb.AppendLine($"WaterData => {SpanExt.ToHexString(WaterDataItem)}");
            }
            if (printMask?.CellSkyRegion ?? true)
            {
                sb.AppendItem(item.CellSkyRegion.FormKeyNullable, "CellSkyRegion");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership is {} OwnershipItem)
            {
                OwnershipItem?.Print(sb, "Ownership");
            }
            if (printMask?.Location ?? true)
            {
                sb.AppendItem(item.Location.FormKeyNullable, "Location");
            }
            if (printMask?.Water ?? true)
            {
                sb.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if ((printMask?.WaterType ?? true)
                && item.WaterType is {} WaterTypeItem)
            {
                sb.AppendItem(WaterTypeItem, "WaterType");
            }
            if ((printMask?.ShipBlueprintSnapLinks?.Overall ?? true)
                && item.ShipBlueprintSnapLinks is {} ShipBlueprintSnapLinksItem)
            {
                sb.AppendLine("ShipBlueprintSnapLinks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ShipBlueprintSnapLinksItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.WaterVelocity?.Overall ?? true)
                && item.WaterVelocity is {} WaterVelocityItem)
            {
                WaterVelocityItem?.Print(sb, "WaterVelocity");
            }
            if (printMask?.AcousticSpace ?? true)
            {
                sb.AppendItem(item.AcousticSpace.FormKeyNullable, "AcousticSpace");
            }
            if (printMask?.ImageSpace ?? true)
            {
                sb.AppendItem(item.ImageSpace.FormKeyNullable, "ImageSpace");
            }
            if ((printMask?.WaterEnvironmentMap ?? true)
                && item.WaterEnvironmentMap is {} WaterEnvironmentMapItem)
            {
                sb.AppendItem(WaterEnvironmentMapItem, "WaterEnvironmentMap");
            }
            if (printMask?.LockList ?? true)
            {
                sb.AppendItem(item.LockList.FormKeyNullable, "LockList");
            }
            if (printMask?.Music ?? true)
            {
                sb.AppendItem(item.Music.FormKeyNullable, "Music");
            }
            if ((printMask?.GlobalDirtLayerMaterial ?? true)
                && item.GlobalDirtLayerMaterial is {} GlobalDirtLayerMaterialItem)
            {
                sb.AppendItem(GlobalDirtLayerMaterialItem, "GlobalDirtLayerMaterial");
            }
            if ((printMask?.GlobalDirtLayerInheritBiomeLayer ?? true)
                && item.GlobalDirtLayerInheritBiomeLayer is {} GlobalDirtLayerInheritBiomeLayerItem)
            {
                sb.AppendItem(GlobalDirtLayerInheritBiomeLayerItem, "GlobalDirtLayerInheritBiomeLayer");
            }
            if (printMask?.TimeOfDay ?? true)
            {
                sb.AppendItem(item.TimeOfDay.FormKeyNullable, "TimeOfDay");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                sb.AppendLine("LinkedReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.IsLinkedRefTransient ?? true)
            {
                sb.AppendItem(item.IsLinkedRefTransient, "IsLinkedRefTransient");
            }
            if ((printMask?.EnvironmentMap ?? true)
                && item.EnvironmentMap is {} EnvironmentMapItem)
            {
                sb.AppendItem(EnvironmentMapItem, "EnvironmentMap");
            }
            if ((printMask?.Traversals?.Overall ?? true)
                && item.Traversals is {} TraversalsItem)
            {
                sb.AppendLine("Traversals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in TraversalsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.NumTraversalFluffBytes ?? true)
            {
                sb.AppendItem(item.NumTraversalFluffBytes, "NumTraversalFluffBytes");
            }
            if (printMask?.NavigationMeshes?.Overall ?? true)
            {
                sb.AppendLine("NavigationMeshes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.NavigationMeshes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Timestamp ?? true)
            {
                sb.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.UnknownGroupData ?? true)
            {
                sb.AppendItem(item.UnknownGroupData, "UnknownGroupData");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                sb.AppendItem(item.PersistentTimestamp, "PersistentTimestamp");
            }
            if (printMask?.PersistentUnknownGroupData ?? true)
            {
                sb.AppendItem(item.PersistentUnknownGroupData, "PersistentUnknownGroupData");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                sb.AppendLine("Persistent =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Persistent)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                sb.AppendItem(item.TemporaryTimestamp, "TemporaryTimestamp");
            }
            if (printMask?.TemporaryUnknownGroupData ?? true)
            {
                sb.AppendItem(item.TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                sb.AppendLine("Temporary =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Temporary)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Cell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter? lhs,
            ICellGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Grid, rhs.Grid, out var lhsGrid, out var rhsGrid, out var isGridEqual))
                {
                    if (!((CellGridCommon)((ICellGridGetter)lhsGrid).CommonInstance()!).Equals(lhsGrid, rhsGrid, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Grid))) return false;
                }
                else if (!isGridEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lighting, rhs.Lighting, out var lhsLighting, out var rhsLighting, out var isLightingEqual))
                {
                    if (!((CellLightingCommon)((ICellLightingGetter)lhsLighting).CommonInstance()!).Equals(lhsLighting, rhsLighting, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting))) return false;
                }
                else if (!isLightingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.MaxHeightData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaxHeightData, rhs.MaxHeightData, out var lhsMaxHeightData, out var rhsMaxHeightData, out var isMaxHeightDataEqual))
                {
                    if (!((CellMaxHeightDataCommon)((ICellMaxHeightDataGetter)lhsMaxHeightData).CommonInstance()!).Equals(lhsMaxHeightData, rhsMaxHeightData, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.MaxHeightData))) return false;
                }
                else if (!isMaxHeightDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.LightingTemplate) ?? true))
            {
                if (!lhs.LightingTemplate.Equals(rhs.LightingTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.XILS) ?? true))
            {
                if (!lhs.XILS.EqualsWithin(rhs.XILS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.XCLAs) ?? true))
            {
                if (!lhs.XCLAs.SequenceEqual(rhs.XCLAs, (l, r) => ((CellXCLAItemCommon)((ICellXCLAItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.XCLAs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WaterData, rhs.WaterData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.CellSkyRegion) ?? true))
            {
                if (!lhs.CellSkyRegion.Equals(rhs.CellSkyRegion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Ownership) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ownership, rhs.Ownership, out var lhsOwnership, out var rhsOwnership, out var isOwnershipEqual))
                {
                    if (!((OwnershipCommon)((IOwnershipGetter)lhsOwnership).CommonInstance()!).Equals(lhsOwnership, rhsOwnership, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Ownership))) return false;
                }
                else if (!isOwnershipEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Location) ?? true))
            {
                if (!lhs.Location.Equals(rhs.Location)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                if (!lhs.Water.Equals(rhs.Water)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterType) ?? true))
            {
                if (!string.Equals(lhs.WaterType, rhs.WaterType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.ShipBlueprintSnapLinks) ?? true))
            {
                if (!lhs.ShipBlueprintSnapLinks.SequenceEqualNullable(rhs.ShipBlueprintSnapLinks, (l, r) => ((CellShipBlueprintSnapLinkCommon)((ICellShipBlueprintSnapLinkGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.ShipBlueprintSnapLinks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterVelocity) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WaterVelocity, rhs.WaterVelocity, out var lhsWaterVelocity, out var rhsWaterVelocity, out var isWaterVelocityEqual))
                {
                    if (!((CellWaterVelocityCommon)((ICellWaterVelocityGetter)lhsWaterVelocity).CommonInstance()!).Equals(lhsWaterVelocity, rhsWaterVelocity, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.WaterVelocity))) return false;
                }
                else if (!isWaterVelocityEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.AcousticSpace) ?? true))
            {
                if (!lhs.AcousticSpace.Equals(rhs.AcousticSpace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.ImageSpace) ?? true))
            {
                if (!lhs.ImageSpace.Equals(rhs.ImageSpace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterEnvironmentMap) ?? true))
            {
                if (!string.Equals(lhs.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.LockList) ?? true))
            {
                if (!lhs.LockList.Equals(rhs.LockList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Music) ?? true))
            {
                if (!lhs.Music.Equals(rhs.Music)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalDirtLayerMaterial) ?? true))
            {
                if (!string.Equals(lhs.GlobalDirtLayerMaterial, rhs.GlobalDirtLayerMaterial)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer) ?? true))
            {
                if (lhs.GlobalDirtLayerInheritBiomeLayer != rhs.GlobalDirtLayerInheritBiomeLayer) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.TimeOfDay) ?? true))
            {
                if (!lhs.TimeOfDay.Equals(rhs.TimeOfDay)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.LinkedReferences) ?? true))
            {
                if (!lhs.LinkedReferences.SequenceEqual(rhs.LinkedReferences, (l, r) => ((LinkedReferencesCommon)((ILinkedReferencesGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.LinkedReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.IsLinkedRefTransient) ?? true))
            {
                if (lhs.IsLinkedRefTransient != rhs.IsLinkedRefTransient) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.EnvironmentMap) ?? true))
            {
                if (!string.Equals(lhs.EnvironmentMap, rhs.EnvironmentMap)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Traversals) ?? true))
            {
                if (!lhs.Traversals.SequenceEqualNullable(rhs.Traversals, (l, r) => ((TraversalReferenceCommon)((ITraversalReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Traversals)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.NumTraversalFluffBytes) ?? true))
            {
                if (lhs.NumTraversalFluffBytes != rhs.NumTraversalFluffBytes) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.NavigationMeshes) ?? true))
            {
                if (!lhs.NavigationMeshes.SequenceEqual(rhs.NavigationMeshes, (l, r) => ((NavigationMeshCommon)((INavigationMeshGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.NavigationMeshes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                if (lhs.Timestamp != rhs.Timestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.UnknownGroupData) ?? true))
            {
                if (lhs.UnknownGroupData != rhs.UnknownGroupData) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                if (lhs.PersistentTimestamp != rhs.PersistentTimestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentUnknownGroupData) ?? true))
            {
                if (lhs.PersistentUnknownGroupData != rhs.PersistentUnknownGroupData) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                if (!lhs.Persistent.SequenceEqualNullable(rhs.Persistent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                if (lhs.TemporaryTimestamp != rhs.TemporaryTimestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryUnknownGroupData) ?? true))
            {
                if (lhs.TemporaryUnknownGroupData != rhs.TemporaryUnknownGroupData) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                if (!lhs.Temporary.SequenceEqualNullable(rhs.Temporary)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.Grid is {} Griditem)
            {
                hash.Add(Griditem);
            }
            if (item.Lighting is {} Lightingitem)
            {
                hash.Add(Lightingitem);
            }
            if (item.MaxHeightData is {} MaxHeightDataitem)
            {
                hash.Add(MaxHeightDataitem);
            }
            hash.Add(item.LightingTemplate);
            if (item.WaterHeight is {} WaterHeightitem)
            {
                hash.Add(WaterHeightitem);
            }
            if (item.XILS is {} XILSitem)
            {
                hash.Add(XILSitem);
            }
            hash.Add(item.XCLAs);
            if (item.WaterData is {} WaterDataItem)
            {
                hash.Add(WaterDataItem);
            }
            hash.Add(item.CellSkyRegion);
            if (item.Ownership is {} Ownershipitem)
            {
                hash.Add(Ownershipitem);
            }
            hash.Add(item.Location);
            hash.Add(item.Water);
            if (item.WaterType is {} WaterTypeitem)
            {
                hash.Add(WaterTypeitem);
            }
            hash.Add(item.ShipBlueprintSnapLinks);
            if (item.WaterVelocity is {} WaterVelocityitem)
            {
                hash.Add(WaterVelocityitem);
            }
            hash.Add(item.AcousticSpace);
            hash.Add(item.ImageSpace);
            if (item.WaterEnvironmentMap is {} WaterEnvironmentMapitem)
            {
                hash.Add(WaterEnvironmentMapitem);
            }
            hash.Add(item.LockList);
            hash.Add(item.Music);
            if (item.GlobalDirtLayerMaterial is {} GlobalDirtLayerMaterialitem)
            {
                hash.Add(GlobalDirtLayerMaterialitem);
            }
            if (item.GlobalDirtLayerInheritBiomeLayer is {} GlobalDirtLayerInheritBiomeLayeritem)
            {
                hash.Add(GlobalDirtLayerInheritBiomeLayeritem);
            }
            hash.Add(item.TimeOfDay);
            hash.Add(item.LinkedReferences);
            hash.Add(item.IsLinkedRefTransient);
            if (item.EnvironmentMap is {} EnvironmentMapitem)
            {
                hash.Add(EnvironmentMapitem);
            }
            hash.Add(item.Traversals);
            hash.Add(item.NumTraversalFluffBytes);
            hash.Add(item.NavigationMeshes);
            hash.Add(item.Timestamp);
            hash.Add(item.UnknownGroupData);
            hash.Add(item.PersistentTimestamp);
            hash.Add(item.PersistentUnknownGroupData);
            hash.Add(item.Persistent);
            hash.Add(item.TemporaryTimestamp);
            hash.Add(item.TemporaryUnknownGroupData);
            hash.Add(item.Temporary);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Cell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICellGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.LightingTemplate, out var LightingTemplateInfo))
            {
                yield return LightingTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CellSkyRegion, out var CellSkyRegionInfo))
            {
                yield return CellSkyRegionInfo;
            }
            if (obj.Ownership is {} OwnershipItems)
            {
                foreach (var item in OwnershipItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Location, out var LocationInfo))
            {
                yield return LocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Water, out var WaterInfo))
            {
                yield return WaterInfo;
            }
            if (obj.ShipBlueprintSnapLinks is {} ShipBlueprintSnapLinksItem)
            {
                foreach (var item in ShipBlueprintSnapLinksItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.AcousticSpace, out var AcousticSpaceInfo))
            {
                yield return AcousticSpaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ImageSpace, out var ImageSpaceInfo))
            {
                yield return ImageSpaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LockList, out var LockListInfo))
            {
                yield return LockListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Music, out var MusicInfo))
            {
                yield return MusicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.TimeOfDay, out var TimeOfDayInfo))
            {
                yield return TimeOfDayInfo;
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Traversals is {} TraversalsItem)
            {
                foreach (var item in TraversalsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.NavigationMeshes.WhereCastable<INavigationMeshGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            foreach (var subItem in obj.NavigationMeshes)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ICellGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ICellGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                    yield break;
                case "CellXCLAItem":
                case "ICellXCLAItemGetter":
                case "ICellXCLAItem":
                    yield break;
                case "CellShipBlueprintSnapLink":
                case "ICellShipBlueprintSnapLinkGetter":
                case "ICellShipBlueprintSnapLink":
                    yield break;
                case "LinkedReferences":
                case "ILinkedReferencesGetter":
                case "ILinkedReferences":
                    yield break;
                case "TraversalReference":
                case "ITraversalReferenceGetter":
                case "ITraversalReference":
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var subItem in obj.NavigationMeshes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Starfield, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IStarfieldMod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IStarfieldMod, ICellGetter, string?, FormKey?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IStarfieldMod, IStarfieldModGetter, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            foreach (var subItem in obj.NavigationMeshes)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, INavigationMeshInternal, INavigationMeshGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.NavigationMeshes.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (NavigationMesh)((INavigationMeshGetter)r).DeepCopy();
                        parent.NavigationMeshes.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (NavigationMesh)((INavigationMeshGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        parent.Persistent.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        parent.Temporary.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IStarfieldMod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IStarfieldMod, ICellGetter, string?, FormKey?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IStarfieldMod, IStarfieldModGetter, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "AComponent":
                case "IAComponentGetter":
                case "IAComponent":
                    yield break;
                case "CellXCLAItem":
                case "ICellXCLAItemGetter":
                case "ICellXCLAItem":
                    yield break;
                case "CellShipBlueprintSnapLink":
                case "ICellShipBlueprintSnapLinkGetter":
                case "ICellShipBlueprintSnapLink":
                    yield break;
                case "LinkedReferences":
                case "ILinkedReferencesGetter":
                case "ILinkedReferences":
                    yield break;
                case "TraversalReference":
                case "ITraversalReferenceGetter":
                case "ITraversalReference":
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var subItem in obj.NavigationMeshes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, INavigationMeshInternal, INavigationMeshGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.NavigationMeshes.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (NavigationMesh)((INavigationMeshGetter)r).DeepCopy();
                                    parent.NavigationMeshes.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (NavigationMesh)((INavigationMeshGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IStarfieldMod, IStarfieldModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<ICellGetter, IStarfieldMod, IStarfieldModGetter>(
                        GameCategory.Starfield,
                        obj,
                        type,
                        linkCache,
                        (lk, t, b) => this.EnumerateMajorRecordContexts(obj, lk, t, modKey, parent, b, getOrAddAsOverride, duplicateInto),
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ICellGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshes.WhereCastable<INavigationMeshGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Cell Duplicate(
            ICellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Cell(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CellSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellInternal item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                try
                {
                    if(rhs.Grid is {} rhsGrid)
                    {
                        item.Grid = rhsGrid.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Grid));
                    }
                    else
                    {
                        item.Grid = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting is {} rhsLighting)
                    {
                        item.Lighting = rhsLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MaxHeightData) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.MaxHeightData);
                try
                {
                    if(rhs.MaxHeightData is {} rhsMaxHeightData)
                    {
                        item.MaxHeightData = rhsMaxHeightData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.MaxHeightData));
                    }
                    else
                    {
                        item.MaxHeightData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LightingTemplate) ?? true))
            {
                item.LightingTemplate.SetTo(rhs.LightingTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                item.WaterHeight = rhs.WaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.XILS) ?? true))
            {
                item.XILS = rhs.XILS;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.XCLAs) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.XCLAs);
                try
                {
                    item.XCLAs.SetTo(
                        rhs.XCLAs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterData) ?? true))
            {
                if(rhs.WaterData is {} WaterDatarhs)
                {
                    item.WaterData = WaterDatarhs.ToArray();
                }
                else
                {
                    item.WaterData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.CellSkyRegion) ?? true))
            {
                item.CellSkyRegion.SetTo(rhs.CellSkyRegion.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership is {} rhsOwnership)
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Location) ?? true))
            {
                item.Location.SetTo(rhs.Location.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                item.Water.SetTo(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterType) ?? true))
            {
                item.WaterType = rhs.WaterType;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.ShipBlueprintSnapLinks) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.ShipBlueprintSnapLinks);
                try
                {
                    if ((rhs.ShipBlueprintSnapLinks != null))
                    {
                        item.ShipBlueprintSnapLinks = 
                            rhs.ShipBlueprintSnapLinks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<CellShipBlueprintSnapLink>();
                    }
                    else
                    {
                        item.ShipBlueprintSnapLinks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterVelocity) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.WaterVelocity);
                try
                {
                    if(rhs.WaterVelocity is {} rhsWaterVelocity)
                    {
                        item.WaterVelocity = rhsWaterVelocity.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.WaterVelocity));
                    }
                    else
                    {
                        item.WaterVelocity = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.AcousticSpace) ?? true))
            {
                item.AcousticSpace.SetTo(rhs.AcousticSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.ImageSpace) ?? true))
            {
                item.ImageSpace.SetTo(rhs.ImageSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterEnvironmentMap) ?? true))
            {
                item.WaterEnvironmentMap = rhs.WaterEnvironmentMap;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LockList) ?? true))
            {
                item.LockList.SetTo(rhs.LockList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Music) ?? true))
            {
                item.Music.SetTo(rhs.Music.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalDirtLayerMaterial) ?? true))
            {
                item.GlobalDirtLayerMaterial = rhs.GlobalDirtLayerMaterial;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer) ?? true))
            {
                item.GlobalDirtLayerInheritBiomeLayer = rhs.GlobalDirtLayerInheritBiomeLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TimeOfDay) ?? true))
            {
                item.TimeOfDay.SetTo(rhs.TimeOfDay.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.IsLinkedRefTransient) ?? true))
            {
                item.IsLinkedRefTransient = rhs.IsLinkedRefTransient;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.EnvironmentMap) ?? true))
            {
                item.EnvironmentMap = rhs.EnvironmentMap;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Traversals) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Traversals);
                try
                {
                    if ((rhs.Traversals != null))
                    {
                        item.Traversals = 
                            rhs.Traversals
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TraversalReference>();
                    }
                    else
                    {
                        item.Traversals = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.NumTraversalFluffBytes) ?? true))
            {
                item.NumTraversalFluffBytes = rhs.NumTraversalFluffBytes;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.NavigationMeshes) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.NavigationMeshes);
                try
                {
                    item.NavigationMeshes.SetTo(
                        rhs.NavigationMeshes
                        .Select(r =>
                        {
                            return (NavigationMesh)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.UnknownGroupData) ?? true))
            {
                item.UnknownGroupData = rhs.UnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentUnknownGroupData) ?? true))
            {
                item.PersistentUnknownGroupData = rhs.PersistentUnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetTo(
                        rhs.Persistent
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryUnknownGroupData) ?? true))
            {
                item.TemporaryUnknownGroupData = rhs.TemporaryUnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetTo(
                        rhs.Temporary
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CellBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CellBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICellGetter item,
            MutagenWriter writer)
        {
            StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            EnumBinaryTranslation<Cell.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            if (item.Grid is {} GridItem)
            {
                ((CellGridBinaryWriteTranslation)((IBinaryItem)GridItem).BinaryWriteTranslator).Write(
                    item: GridItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Lighting is {} LightingItem)
            {
                ((CellLightingBinaryWriteTranslation)((IBinaryItem)LightingItem).BinaryWriteTranslator).Write(
                    item: LightingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.MaxHeightData is {} MaxHeightDataItem)
            {
                ((CellMaxHeightDataBinaryWriteTranslation)((IBinaryItem)MaxHeightDataItem).BinaryWriteTranslator).Write(
                    item: MaxHeightDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LightingTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.LTMP));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WaterHeight,
                header: translationParams.ConvertToCustom(RecordTypes.XCLW));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XILS,
                header: translationParams.ConvertToCustom(RecordTypes.XILS));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ICellXCLAItemGetter>.Instance.Write(
                writer: writer,
                items: item.XCLAs,
                transl: (MutagenWriter subWriter, ICellXCLAItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((CellXCLAItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterData,
                header: translationParams.ConvertToCustom(RecordTypes.XWCN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CellSkyRegion,
                header: translationParams.ConvertToCustom(RecordTypes.XCCM));
            if (item.Ownership is {} OwnershipItem)
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Location,
                header: translationParams.ConvertToCustom(RecordTypes.XLCN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: translationParams.ConvertToCustom(RecordTypes.XCWT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterType,
                header: translationParams.ConvertToCustom(RecordTypes.XCWM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ICellShipBlueprintSnapLinkGetter>.Instance.Write(
                writer: writer,
                items: item.ShipBlueprintSnapLinks,
                recordType: translationParams.ConvertToCustom(RecordTypes.XBPS),
                transl: (MutagenWriter subWriter, ICellShipBlueprintSnapLinkGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((CellShipBlueprintSnapLinkBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.WaterVelocity is {} WaterVelocityItem)
            {
                ((CellWaterVelocityBinaryWriteTranslation)((IBinaryItem)WaterVelocityItem).BinaryWriteTranslator).Write(
                    item: WaterVelocityItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AcousticSpace,
                header: translationParams.ConvertToCustom(RecordTypes.XCAS));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpace,
                header: translationParams.ConvertToCustom(RecordTypes.XCIM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterEnvironmentMap,
                header: translationParams.ConvertToCustom(RecordTypes.XWEM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LockList,
                header: translationParams.ConvertToCustom(RecordTypes.XILL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Music,
                header: translationParams.ConvertToCustom(RecordTypes.XCMO));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalDirtLayerMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.XCGD),
                binaryType: StringBinaryType.NullTerminate);
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalDirtLayerInheritBiomeLayer,
                header: translationParams.ConvertToCustom(RecordTypes.XCIB));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TimeOfDay,
                header: translationParams.ConvertToCustom(RecordTypes.TODD));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsLinkedRefTransient,
                header: translationParams.ConvertToCustom(RecordTypes.XLKT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnvironmentMap,
                header: translationParams.ConvertToCustom(RecordTypes.XEMP),
                binaryType: StringBinaryType.NullTerminate);
            CellBinaryWriteTranslation.WriteBinaryTraversals(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryTraversalsCustom(
            MutagenWriter writer,
            ICellGetter item);

        public static void WriteBinaryTraversals(
            MutagenWriter writer,
            ICellGetter item)
        {
            WriteBinaryTraversalsCustom(
                writer: writer,
                item: item);
        }

        public static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CELL,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CellBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CELL;
        public static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame)
        {
            StarfieldMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Cell_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Cell.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    item.Grid = Mutagen.Bethesda.Starfield.CellGrid.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    item.Lighting = Mutagen.Bethesda.Starfield.CellLighting.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.MHDT:
                {
                    item.MaxHeightData = Mutagen.Bethesda.Starfield.CellMaxHeightData.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.MaxHeightData;
                }
                case RecordTypeInts.LTMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LightingTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.LightingTemplate;
                }
                case RecordTypeInts.XCLW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterHeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XILS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XILS = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.XILS;
                }
                case RecordTypeInts.XCLA:
                case RecordTypeInts.XCLD:
                {
                    item.XCLAs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<CellXCLAItem>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: CellXCLAItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: CellXCLAItem.TryCreateFromBinary));
                    return (int)Cell_FieldIndex.XCLAs;
                }
                case RecordTypeInts.XWCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.WaterData;
                }
                case RecordTypeInts.XCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CellSkyRegion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.CellSkyRegion;
                }
                case RecordTypeInts.XOWN:
                {
                    item.Ownership = Mutagen.Bethesda.Starfield.Ownership.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Ownership;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Location.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Location;
                }
                case RecordTypeInts.XCWT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XCWM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterType = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.WaterType;
                }
                case RecordTypeInts.XBPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShipBlueprintSnapLinks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<CellShipBlueprintSnapLink>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: CellShipBlueprintSnapLink.TryCreateFromBinary)
                        .CastExtendedList<CellShipBlueprintSnapLink>();
                    return (int)Cell_FieldIndex.ShipBlueprintSnapLinks;
                }
                case RecordTypeInts.XWCU:
                {
                    item.WaterVelocity = Mutagen.Bethesda.Starfield.CellWaterVelocity.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCAS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AcousticSpace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.AcousticSpace;
                }
                case RecordTypeInts.XCIM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.ImageSpace;
                }
                case RecordTypeInts.XWEM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterEnvironmentMap = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.XILL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LockList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.LockList;
                }
                case RecordTypeInts.XCMO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Music.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Music;
                }
                case RecordTypeInts.XCGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalDirtLayerMaterial = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.GlobalDirtLayerMaterial;
                }
                case RecordTypeInts.XCIB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalDirtLayerInheritBiomeLayer = frame.ReadBoolean();
                    return (int)Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer;
                }
                case RecordTypeInts.TODD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TimeOfDay.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.TimeOfDay;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: LinkedReferences_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)Cell_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XLKT:
                {
                    item.IsLinkedRefTransient = true;
                    return (int)Cell_FieldIndex.IsLinkedRefTransient;
                }
                case RecordTypeInts.XEMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnvironmentMap = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.EnvironmentMap;
                }
                case RecordTypeInts.XTV2:
                {
                    CellBinaryCreateTranslation.FillBinaryTraversalsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Cell_FieldIndex.Traversals;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryTraversalsCustom(
            MutagenFrame frame,
            ICellInternal item,
            PreviousParse lastParsed);

        public static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            ICellInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            ICellInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CellBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CellCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => CellCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICell);

        public Cell.MajorFlag MajorFlags => (Cell.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Cell.Flag? Flags => _FlagsLocation.HasValue ? (Cell.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Cell.Flag?);
        #endregion
        #region Grid
        private RangeInt32? _GridLocation;
        public ICellGridGetter? Grid => _GridLocation.HasValue ? CellGridBinaryOverlay.CellGridFactory(_recordData.Slice(_GridLocation!.Value.Min), _package) : default;
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        public ICellLightingGetter? Lighting => _LightingLocation.HasValue ? CellLightingBinaryOverlay.CellLightingFactory(_recordData.Slice(_LightingLocation!.Value.Min), _package) : default;
        #endregion
        #region MaxHeightData
        private RangeInt32? _MaxHeightDataLocation;
        public ICellMaxHeightDataGetter? MaxHeightData => _MaxHeightDataLocation.HasValue ? CellMaxHeightDataBinaryOverlay.CellMaxHeightDataFactory(_recordData.Slice(_MaxHeightDataLocation!.Value.Min), _package) : default;
        #endregion
        #region LightingTemplate
        private int? _LightingTemplateLocation;
        public IFormLinkNullableGetter<ILightingTemplateGetter> LightingTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILightingTemplateGetter>(_package, _recordData, _LightingTemplateLocation);
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public Single? WaterHeight => _WaterHeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterHeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region XILS
        private int? _XILSLocation;
        public Single? XILS => _XILSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XILSLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<ICellXCLAItemGetter> XCLAs { get; private set; } = Array.Empty<ICellXCLAItemGetter>();
        #region WaterData
        private int? _WaterDataLocation;
        public ReadOnlyMemorySlice<Byte>? WaterData => _WaterDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CellSkyRegion
        private int? _CellSkyRegionLocation;
        public IFormLinkNullableGetter<IRegionGetter> CellSkyRegion => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRegionGetter>(_package, _recordData, _CellSkyRegionLocation);
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region Location
        private int? _LocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> Location => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _LocationLocation);
        #endregion
        #region Water
        private int? _WaterLocation;
        public IFormLinkNullableGetter<IWaterGetter> Water => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWaterGetter>(_package, _recordData, _WaterLocation);
        #endregion
        #region WaterType
        private int? _WaterTypeLocation;
        public String? WaterType => _WaterTypeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterTypeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<ICellShipBlueprintSnapLinkGetter>? ShipBlueprintSnapLinks { get; private set; }
        #region WaterVelocity
        private RangeInt32? _WaterVelocityLocation;
        public ICellWaterVelocityGetter? WaterVelocity => _WaterVelocityLocation.HasValue ? CellWaterVelocityBinaryOverlay.CellWaterVelocityFactory(_recordData.Slice(_WaterVelocityLocation!.Value.Min), _package) : default;
        #endregion
        #region AcousticSpace
        private int? _AcousticSpaceLocation;
        public IFormLinkNullableGetter<IAcousticSpaceGetter> AcousticSpace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAcousticSpaceGetter>(_package, _recordData, _AcousticSpaceLocation);
        #endregion
        #region ImageSpace
        private int? _ImageSpaceLocation;
        public IFormLinkNullableGetter<IImageSpaceGetter> ImageSpace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImageSpaceGetter>(_package, _recordData, _ImageSpaceLocation);
        #endregion
        #region WaterEnvironmentMap
        private int? _WaterEnvironmentMapLocation;
        public String? WaterEnvironmentMap => _WaterEnvironmentMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterEnvironmentMapLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region LockList
        private int? _LockListLocation;
        public IFormLinkNullableGetter<IFormListGetter> LockList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _LockListLocation);
        #endregion
        #region Music
        private int? _MusicLocation;
        public IFormLinkNullableGetter<IMusicTypeGetter> Music => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMusicTypeGetter>(_package, _recordData, _MusicLocation);
        #endregion
        #region GlobalDirtLayerMaterial
        private int? _GlobalDirtLayerMaterialLocation;
        public String? GlobalDirtLayerMaterial => _GlobalDirtLayerMaterialLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GlobalDirtLayerMaterialLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region GlobalDirtLayerInheritBiomeLayer
        private int? _GlobalDirtLayerInheritBiomeLayerLocation;
        public Boolean? GlobalDirtLayerInheritBiomeLayer => _GlobalDirtLayerInheritBiomeLayerLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GlobalDirtLayerInheritBiomeLayerLocation.Value, _package.MetaData.Constants)[0] >= 1 : default(Boolean?);
        #endregion
        #region TimeOfDay
        private int? _TimeOfDayLocation;
        public IFormLinkNullableGetter<ITimeOfDayRecordGetter> TimeOfDay => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITimeOfDayRecordGetter>(_package, _recordData, _TimeOfDayLocation);
        #endregion
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = Array.Empty<ILinkedReferencesGetter>();
        #region IsLinkedRefTransient
        private int? _IsLinkedRefTransientLocation;
        public Boolean IsLinkedRefTransient => _IsLinkedRefTransientLocation.HasValue ? true : default(Boolean);
        #endregion
        #region EnvironmentMap
        private int? _EnvironmentMapLocation;
        public String? EnvironmentMap => _EnvironmentMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnvironmentMapLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Traversals
        partial void TraversalsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICellGetter CellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            var origStream = stream;
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CellBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICellGetter CellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Cell_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    _GridLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.MHDT:
                {
                    _MaxHeightDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Cell_FieldIndex.MaxHeightData;
                }
                case RecordTypeInts.LTMP:
                {
                    _LightingTemplateLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.LightingTemplate;
                }
                case RecordTypeInts.XCLW:
                {
                    _WaterHeightLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XILS:
                {
                    _XILSLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.XILS;
                }
                case RecordTypeInts.XCLA:
                case RecordTypeInts.XCLD:
                {
                    this.XCLAs = this.ParseRepeatedTypelessSubrecord<ICellXCLAItemGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: CellXCLAItem_Registration.TriggerSpecs,
                        factory: CellXCLAItemBinaryOverlay.CellXCLAItemFactory);
                    return (int)Cell_FieldIndex.XCLAs;
                }
                case RecordTypeInts.XWCN:
                {
                    _WaterDataLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterData;
                }
                case RecordTypeInts.XCCM:
                {
                    _CellSkyRegionLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.CellSkyRegion;
                }
                case RecordTypeInts.XOWN:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Cell_FieldIndex.Ownership;
                }
                case RecordTypeInts.XLCN:
                {
                    _LocationLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Location;
                }
                case RecordTypeInts.XCWT:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XCWM:
                {
                    _WaterTypeLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterType;
                }
                case RecordTypeInts.XBPS:
                {
                    this.ShipBlueprintSnapLinks = BinaryOverlayList.FactoryByStartIndexWithTrigger<ICellShipBlueprintSnapLinkGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 16,
                        getter: (s, p) => CellShipBlueprintSnapLinkBinaryOverlay.CellShipBlueprintSnapLinkFactory(s, p));
                    return (int)Cell_FieldIndex.ShipBlueprintSnapLinks;
                }
                case RecordTypeInts.XWCU:
                {
                    _WaterVelocityLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Cell_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCAS:
                {
                    _AcousticSpaceLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.AcousticSpace;
                }
                case RecordTypeInts.XCIM:
                {
                    _ImageSpaceLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.ImageSpace;
                }
                case RecordTypeInts.XWEM:
                {
                    _WaterEnvironmentMapLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.XILL:
                {
                    _LockListLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.LockList;
                }
                case RecordTypeInts.XCMO:
                {
                    _MusicLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Music;
                }
                case RecordTypeInts.XCGD:
                {
                    _GlobalDirtLayerMaterialLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.GlobalDirtLayerMaterial;
                }
                case RecordTypeInts.XCIB:
                {
                    _GlobalDirtLayerInheritBiomeLayerLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.GlobalDirtLayerInheritBiomeLayer;
                }
                case RecordTypeInts.TODD:
                {
                    _TimeOfDayLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.TimeOfDay;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<ILinkedReferencesGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: LinkedReferences_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Cell_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XLKT:
                {
                    _IsLinkedRefTransientLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.IsLinkedRefTransient;
                }
                case RecordTypeInts.XEMP:
                {
                    _EnvironmentMapLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.EnvironmentMap;
                }
                case RecordTypeInts.XTV2:
                {
                    TraversalsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Cell_FieldIndex.Traversals;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Cell>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICellGetter rhs) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

