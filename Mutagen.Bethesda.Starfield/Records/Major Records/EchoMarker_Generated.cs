/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class EchoMarker :
        IEchoMarker,
        IEquatable<IEchoMarkerGetter>,
        ILoquiObjectSetter<EchoMarker>
    {
        #region Ctor
        public EchoMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ECTE
        public Guid? ECTE { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Guid? IEchoMarkerGetter.ECTE => this.ECTE;
        #endregion
        #region Sound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _Sound;
        public SoundReference? Sound
        {
            get => _Sound;
            set => _Sound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IEchoMarkerGetter.Sound => this.Sound;
        #endregion
        #region ANAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ANAM;
        public MemorySlice<Byte>? ANAM
        {
            get => this._ANAM;
            set => this._ANAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IEchoMarkerGetter.ANAM => this.ANAM;
        #endregion
        #region BNAM
        public Single? BNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IEchoMarkerGetter.BNAM => this.BNAM;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IEchoMarkerGetter.CNAM => this.CNAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IEchoMarkerGetter.DNAM => this.DNAM;
        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IEchoMarkerGetter.ENAM => this.ENAM;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEchoMarkerGetter.Description => this.Description;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EchoMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IEchoMarkerGetter rhs) return false;
            return ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEchoMarkerGetter? obj)
        {
            return ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ECTE = initialValue;
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.ANAM = initialValue;
                this.BNAM = initialValue;
                this.CNAM = initialValue;
                this.DNAM = initialValue;
                this.ENAM = initialValue;
                this.Description = initialValue;
            }

            public Mask(
                TItem ECTE,
                TItem Sound,
                TItem ANAM,
                TItem BNAM,
                TItem CNAM,
                TItem DNAM,
                TItem ENAM,
                TItem Description)
            {
                this.ECTE = ECTE;
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Sound, new SoundReference.Mask<TItem>(Sound));
                this.ANAM = ANAM;
                this.BNAM = BNAM;
                this.CNAM = CNAM;
                this.DNAM = DNAM;
                this.ENAM = ENAM;
                this.Description = Description;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ECTE;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Sound { get; set; }
            public TItem ANAM;
            public TItem BNAM;
            public TItem CNAM;
            public TItem DNAM;
            public TItem ENAM;
            public TItem Description;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ECTE, rhs.ECTE)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ECTE);
                hash.Add(this.Sound);
                hash.Add(this.ANAM);
                hash.Add(this.BNAM);
                hash.Add(this.CNAM);
                hash.Add(this.DNAM);
                hash.Add(this.ENAM);
                hash.Add(this.Description);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ECTE)) return false;
                if (Sound != null)
                {
                    if (!eval(this.Sound.Overall)) return false;
                    if (this.Sound.Specific != null && !this.Sound.Specific.All(eval)) return false;
                }
                if (!eval(this.ANAM)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.ENAM)) return false;
                if (!eval(this.Description)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ECTE)) return true;
                if (Sound != null)
                {
                    if (eval(this.Sound.Overall)) return true;
                    if (this.Sound.Specific != null && this.Sound.Specific.Any(eval)) return true;
                }
                if (eval(this.ANAM)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.ENAM)) return true;
                if (eval(this.Description)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EchoMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ECTE = eval(this.ECTE);
                obj.Sound = this.Sound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Sound.Overall), this.Sound.Specific?.Translate(eval));
                obj.ANAM = eval(this.ANAM);
                obj.BNAM = eval(this.BNAM);
                obj.CNAM = eval(this.CNAM);
                obj.DNAM = eval(this.DNAM);
                obj.ENAM = eval(this.ENAM);
                obj.Description = eval(this.Description);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(EchoMarker.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, EchoMarker.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(EchoMarker.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ECTE ?? true)
                    {
                        sb.AppendItem(ECTE, "ECTE");
                    }
                    if (printMask?.Sound?.Overall ?? true)
                    {
                        Sound?.Print(sb);
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        sb.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ECTE;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Sound;
            public Exception? ANAM;
            public Exception? BNAM;
            public Exception? CNAM;
            public Exception? DNAM;
            public Exception? ENAM;
            public Exception? Description;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                EchoMarker_FieldIndex enu = (EchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case EchoMarker_FieldIndex.ECTE:
                        return ECTE;
                    case EchoMarker_FieldIndex.Sound:
                        return Sound;
                    case EchoMarker_FieldIndex.ANAM:
                        return ANAM;
                    case EchoMarker_FieldIndex.BNAM:
                        return BNAM;
                    case EchoMarker_FieldIndex.CNAM:
                        return CNAM;
                    case EchoMarker_FieldIndex.DNAM:
                        return DNAM;
                    case EchoMarker_FieldIndex.ENAM:
                        return ENAM;
                    case EchoMarker_FieldIndex.Description:
                        return Description;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                EchoMarker_FieldIndex enu = (EchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case EchoMarker_FieldIndex.ECTE:
                        this.ECTE = ex;
                        break;
                    case EchoMarker_FieldIndex.Sound:
                        this.Sound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case EchoMarker_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case EchoMarker_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case EchoMarker_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case EchoMarker_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case EchoMarker_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case EchoMarker_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                EchoMarker_FieldIndex enu = (EchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case EchoMarker_FieldIndex.ECTE:
                        this.ECTE = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.Sound:
                        this.Sound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case EchoMarker_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case EchoMarker_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ECTE != null) return true;
                if (Sound != null) return true;
                if (ANAM != null) return true;
                if (BNAM != null) return true;
                if (CNAM != null) return true;
                if (DNAM != null) return true;
                if (ENAM != null) return true;
                if (Description != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ECTE, "ECTE");
                }
                Sound?.Print(sb);
                {
                    sb.AppendItem(ANAM, "ANAM");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ECTE = this.ECTE.Combine(rhs.ECTE);
                ret.Sound = this.Sound.Combine(rhs.Sound, (l, r) => l.Combine(r));
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.Description = this.Description.Combine(rhs.Description);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ECTE;
            public SoundReference.TranslationMask? Sound;
            public bool ANAM;
            public bool BNAM;
            public bool CNAM;
            public bool DNAM;
            public bool ENAM;
            public bool Description;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ECTE = defaultOn;
                this.ANAM = defaultOn;
                this.BNAM = defaultOn;
                this.CNAM = defaultOn;
                this.DNAM = defaultOn;
                this.ENAM = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ECTE, null));
                ret.Add((Sound != null ? Sound.OnOverall : DefaultOn, Sound?.GetCrystal()));
                ret.Add((ANAM, null));
                ret.Add((BNAM, null));
                ret.Add((CNAM, null));
                ret.Add((DNAM, null));
                ret.Add((ENAM, null));
                ret.Add((Description, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EchoMarkerCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EchoMarkerSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EchoMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EchoMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static EchoMarker CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new EchoMarker();
            ((EchoMarkerSetterCommon)((IEchoMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EchoMarker item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((EchoMarkerSetterCommon)((IEchoMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static EchoMarker GetNew()
        {
            return new EchoMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IEchoMarker :
        IEchoMarkerGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IEchoMarker>
    {
        new Guid? ECTE { get; set; }
        new SoundReference? Sound { get; set; }
        new MemorySlice<Byte>? ANAM { get; set; }
        new Single? BNAM { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new String? Description { get; set; }
    }

    public partial interface IEchoMarkerGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IEchoMarkerGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => EchoMarker_Registration.Instance;
        Guid? ECTE { get; }
        ISoundReferenceGetter? Sound { get; }
        ReadOnlyMemorySlice<Byte>? ANAM { get; }
        Single? BNAM { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        String? Description { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EchoMarkerMixIn
    {
        public static void Clear(this IEchoMarker item)
        {
            ((EchoMarkerSetterCommon)((IEchoMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EchoMarker.Mask<bool> GetEqualsMask(
            this IEchoMarkerGetter item,
            IEchoMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IEchoMarkerGetter item,
            string? name = null,
            EchoMarker.Mask<bool>? printMask = null)
        {
            return ((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IEchoMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EchoMarker.Mask<bool>? printMask = null)
        {
            ((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEchoMarkerGetter item,
            IEchoMarkerGetter rhs,
            EchoMarker.TranslationMask? equalsMask = null)
        {
            return ((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEchoMarker lhs,
            IEchoMarkerGetter rhs)
        {
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEchoMarker lhs,
            IEchoMarkerGetter rhs,
            EchoMarker.TranslationMask? copyMask = null)
        {
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEchoMarker lhs,
            IEchoMarkerGetter rhs,
            out EchoMarker.ErrorMask errorMask,
            EchoMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = EchoMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEchoMarker lhs,
            IEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static EchoMarker DeepCopy(
            this IEchoMarkerGetter item,
            EchoMarker.TranslationMask? copyMask = null)
        {
            return ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EchoMarker DeepCopy(
            this IEchoMarkerGetter item,
            out EchoMarker.ErrorMask errorMask,
            EchoMarker.TranslationMask? copyMask = null)
        {
            return ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EchoMarker DeepCopy(
            this IEchoMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEchoMarker item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((EchoMarkerSetterCommon)((IEchoMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum EchoMarker_FieldIndex
    {
        ECTE = 0,
        Sound = 1,
        ANAM = 2,
        BNAM = 3,
        CNAM = 4,
        DNAM = 5,
        ENAM = 6,
        Description = 7,
    }
    #endregion

    #region Registration
    internal partial class EchoMarker_Registration : ILoquiRegistration
    {
        public static readonly EchoMarker_Registration Instance = new EchoMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(EchoMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EchoMarker.ErrorMask);

        public static readonly Type ClassType = typeof(EchoMarker);

        public static readonly Type GetterType = typeof(IEchoMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEchoMarker);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.EchoMarker";

        public const string Name = "EchoMarker";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.ECTE,
                RecordTypes.ECSH,
                RecordTypes.ANAM,
                RecordTypes.BNAM,
                RecordTypes.CNAM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.NNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(EchoMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class EchoMarkerSetterCommon
    {
        public static readonly EchoMarkerSetterCommon Instance = new EchoMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEchoMarker item)
        {
            ClearPartial();
            item.ECTE = default;
            item.Sound = null;
            item.ANAM = default;
            item.BNAM = default;
            item.CNAM = default;
            item.DNAM = default;
            item.ENAM = default;
            item.Description = default;
        }
        
        #region Mutagen
        public void RemapLinks(IEchoMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Sound?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEchoMarker item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: EchoMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class EchoMarkerCommon
    {
        public static readonly EchoMarkerCommon Instance = new EchoMarkerCommon();

        public EchoMarker.Mask<bool> GetEqualsMask(
            IEchoMarkerGetter item,
            IEchoMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EchoMarker.Mask<bool>(false);
            ((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEchoMarkerGetter item,
            IEchoMarkerGetter rhs,
            EchoMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ECTE = item.ECTE == rhs.ECTE;
            ret.Sound = EqualsMaskHelper.EqualsHelper(
                item.Sound,
                rhs.Sound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ANAM = MemorySliceExt.SequenceEqual(item.ANAM, rhs.ANAM);
            ret.BNAM = item.BNAM.EqualsWithin(rhs.BNAM);
            ret.CNAM = MemorySliceExt.SequenceEqual(item.CNAM, rhs.CNAM);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.Description = string.Equals(item.Description, rhs.Description);
        }
        
        public string Print(
            IEchoMarkerGetter item,
            string? name = null,
            EchoMarker.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IEchoMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EchoMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"EchoMarker =>");
            }
            else
            {
                sb.AppendLine($"{name} (EchoMarker) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IEchoMarkerGetter item,
            StructuredStringBuilder sb,
            EchoMarker.Mask<bool>? printMask = null)
        {
            if ((printMask?.ECTE ?? true)
                && item.ECTE is {} ECTEItem)
            {
                sb.AppendItem(ECTEItem, "ECTE");
            }
            if ((printMask?.Sound?.Overall ?? true)
                && item.Sound is {} SoundItem)
            {
                SoundItem?.Print(sb, "Sound");
            }
            if ((printMask?.ANAM ?? true)
                && item.ANAM is {} ANAMItem)
            {
                sb.AppendLine($"ANAM => {SpanExt.ToHexString(ANAMItem)}");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendItem(BNAMItem, "BNAM");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEchoMarkerGetter? lhs,
            IEchoMarkerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ECTE) ?? true))
            {
                if (lhs.ECTE != rhs.ECTE) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.Sound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sound, rhs.Sound, out var lhsSound, out var rhsSound, out var isSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsSound).CommonInstance()!).Equals(lhsSound, rhsSound, equalsMask?.GetSubCrystal((int)EchoMarker_FieldIndex.Sound))) return false;
                }
                else if (!isSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ANAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ANAM, rhs.ANAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.BNAM) ?? true))
            {
                if (!lhs.BNAM.EqualsWithin(rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.CNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CNAM, rhs.CNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IEchoMarkerGetter item)
        {
            var hash = new HashCode();
            if (item.ECTE is {} ECTEitem)
            {
                hash.Add(ECTEitem);
            }
            if (item.Sound is {} Sounditem)
            {
                hash.Add(Sounditem);
            }
            if (item.ANAM is {} ANAMItem)
            {
                hash.Add(ANAMItem);
            }
            if (item.BNAM is {} BNAMitem)
            {
                hash.Add(BNAMitem);
            }
            if (item.CNAM is {} CNAMItem)
            {
                hash.Add(CNAMItem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return EchoMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IEchoMarkerGetter obj)
        {
            if (obj.Sound is {} SoundItems)
            {
                foreach (var item in SoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class EchoMarkerSetterTranslationCommon
    {
        public static readonly EchoMarkerSetterTranslationCommon Instance = new EchoMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEchoMarker item,
            IEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ECTE) ?? true))
            {
                item.ECTE = rhs.ECTE;
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)EchoMarker_FieldIndex.Sound);
                try
                {
                    if(rhs.Sound is {} rhsSound)
                    {
                        item.Sound = rhsSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)EchoMarker_FieldIndex.Sound));
                    }
                    else
                    {
                        item.Sound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ANAM) ?? true))
            {
                if(rhs.ANAM is {} ANAMrhs)
                {
                    item.ANAM = ANAMrhs.ToArray();
                }
                else
                {
                    item.ANAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.BNAM) ?? true))
            {
                item.BNAM = rhs.BNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM is {} CNAMrhs)
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EchoMarker_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IEchoMarker item,
            IEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public EchoMarker DeepCopy(
            IEchoMarkerGetter item,
            EchoMarker.TranslationMask? copyMask = null)
        {
            EchoMarker ret = (EchoMarker)((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public EchoMarker DeepCopy(
            IEchoMarkerGetter item,
            out EchoMarker.ErrorMask errorMask,
            EchoMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EchoMarker ret = (EchoMarker)((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = EchoMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public EchoMarker DeepCopy(
            IEchoMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EchoMarker ret = (EchoMarker)((EchoMarkerCommon)((IEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((EchoMarkerSetterTranslationCommon)((IEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class EchoMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EchoMarker_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => EchoMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EchoMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return EchoMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EchoMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEchoMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IEchoMarkerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IEchoMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class EchoMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly EchoMarkerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IEchoMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            GuidBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ECTE,
                header: translationParams.ConvertToCustom(RecordTypes.ECTE));
            if (item.Sound is {} SoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ECSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)SoundItem).BinaryWriteTranslator).Write(
                        item: SoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ANAM,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IEchoMarkerGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IEchoMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class EchoMarkerBinaryCreateTranslation
    {
        public static readonly EchoMarkerBinaryCreateTranslation Instance = new EchoMarkerBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IEchoMarker item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ECTE:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ECTE, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ECTE = GuidBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.ECTE;
                }
                case RecordTypeInts.ECSH:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.Sound, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Sound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)EchoMarker_FieldIndex.Sound;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ANAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.BNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.BNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.CNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.CNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.DNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ENAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EchoMarker_FieldIndex.ENAM;
                }
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EchoMarker_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class EchoMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEchoMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EchoMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class EchoMarkerBinaryOverlay :
        PluginBinaryOverlay,
        IEchoMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EchoMarker_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => EchoMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EchoMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EchoMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEchoMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IEchoMarkerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IEchoMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EchoMarkerCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EchoMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EchoMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ECTE
        private int? _ECTELocation;
        public Guid? ECTE => _ECTELocation.HasValue ? new Guid(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ECTELocation.Value, _package.MetaData.Constants).Slice(0, 16)) : default(Guid?);
        #endregion
        public ISoundReferenceGetter? Sound { get; private set; }
        #region ANAM
        private int? _ANAMLocation;
        public ReadOnlyMemorySlice<Byte>? ANAM => _ANAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ANAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public Single? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EchoMarkerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IEchoMarkerGetter EchoMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new EchoMarkerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IEchoMarkerGetter EchoMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return EchoMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ECTE:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ECTE, translationParams)) return ParseResult.Stop;
                    _ECTELocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.ECTE;
                }
                case RecordTypeInts.ECSH:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.Sound, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Sound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)EchoMarker_FieldIndex.Sound;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ANAM, translationParams)) return ParseResult.Stop;
                    _ANAMLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.BNAM, translationParams)) return ParseResult.Stop;
                    _BNAMLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.BNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.CNAM, translationParams)) return ParseResult.Stop;
                    _CNAMLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.CNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.DNAM, translationParams)) return ParseResult.Stop;
                    _DNAMLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.ENAM, translationParams)) return ParseResult.Stop;
                    _ENAMLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.ENAM;
                }
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)EchoMarker_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)EchoMarker_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EchoMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IEchoMarkerGetter rhs) return false;
            return ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEchoMarkerGetter? obj)
        {
            return ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EchoMarkerCommon)((IEchoMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

