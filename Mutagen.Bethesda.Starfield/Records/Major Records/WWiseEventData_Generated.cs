/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class WWiseEventData :
        StarfieldMajorRecord,
        IEquatable<IWWiseEventDataGetter>,
        ILoquiObjectSetter<WWiseEventData>,
        IWWiseEventDataInternal
    {
        #region Ctor
        protected WWiseEventData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Start
        public Guid? Start { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Guid? IWWiseEventDataGetter.Start => this.Start;
        #endregion
        #region Condition
        private readonly IFormLinkNullable<IConditionRecordGetter> _Condition = new FormLinkNullable<IConditionRecordGetter>();
        public IFormLinkNullable<IConditionRecordGetter> Condition
        {
            get => _Condition;
            set => _Condition.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IConditionRecordGetter> IWWiseEventDataGetter.Condition => this.Condition;
        #endregion
        #region End
        public Guid? End { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Guid? IWWiseEventDataGetter.End => this.End;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WWiseEventDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Start = initialValue;
                this.Condition = initialValue;
                this.End = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Start,
                TItem Condition,
                TItem End)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Start = Start;
                this.Condition = Condition;
                this.End = End;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Start;
            public TItem Condition;
            public TItem End;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Start, rhs.Start)) return false;
                if (!object.Equals(this.Condition, rhs.Condition)) return false;
                if (!object.Equals(this.End, rhs.End)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Start);
                hash.Add(this.Condition);
                hash.Add(this.End);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Start)) return false;
                if (!eval(this.Condition)) return false;
                if (!eval(this.End)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Start)) return true;
                if (eval(this.Condition)) return true;
                if (eval(this.End)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WWiseEventData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Start = eval(this.Start);
                obj.Condition = eval(this.Condition);
                obj.End = eval(this.End);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WWiseEventData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WWiseEventData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WWiseEventData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Start ?? true)
                    {
                        sb.AppendItem(Start, "Start");
                    }
                    if (printMask?.Condition ?? true)
                    {
                        sb.AppendItem(Condition, "Condition");
                    }
                    if (printMask?.End ?? true)
                    {
                        sb.AppendItem(End, "End");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Start;
            public Exception? Condition;
            public Exception? End;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                WWiseEventData_FieldIndex enu = (WWiseEventData_FieldIndex)index;
                switch (enu)
                {
                    case WWiseEventData_FieldIndex.Start:
                        return Start;
                    case WWiseEventData_FieldIndex.Condition:
                        return Condition;
                    case WWiseEventData_FieldIndex.End:
                        return End;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                WWiseEventData_FieldIndex enu = (WWiseEventData_FieldIndex)index;
                switch (enu)
                {
                    case WWiseEventData_FieldIndex.Start:
                        this.Start = ex;
                        break;
                    case WWiseEventData_FieldIndex.Condition:
                        this.Condition = ex;
                        break;
                    case WWiseEventData_FieldIndex.End:
                        this.End = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                WWiseEventData_FieldIndex enu = (WWiseEventData_FieldIndex)index;
                switch (enu)
                {
                    case WWiseEventData_FieldIndex.Start:
                        this.Start = (Exception?)obj;
                        break;
                    case WWiseEventData_FieldIndex.Condition:
                        this.Condition = (Exception?)obj;
                        break;
                    case WWiseEventData_FieldIndex.End:
                        this.End = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Start != null) return true;
                if (Condition != null) return true;
                if (End != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Start, "Start");
                }
                {
                    sb.AppendItem(Condition, "Condition");
                }
                {
                    sb.AppendItem(End, "End");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Start = this.Start.Combine(rhs.Start);
                ret.Condition = this.Condition.Combine(rhs.Condition);
                ret.End = this.End.Combine(rhs.End);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Start;
            public bool Condition;
            public bool End;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Start = defaultOn;
                this.Condition = defaultOn;
                this.End = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Start, null));
                ret.Add((Condition, null));
                ret.Add((End, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = WWiseEventData_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WWiseEventDataCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WWiseEventDataSetterCommon.Instance.RemapLinks(this, mapping);
        public WWiseEventData(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private WWiseEventData(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal WWiseEventData(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public WWiseEventData(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public WWiseEventData(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<WWiseEventData>.ToString(this);
        }

        protected override Type LinkType => typeof(IWWiseEventData);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWWiseEventDataGetter rhs) return false;
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWWiseEventDataGetter? obj)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WWiseEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WWiseEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static WWiseEventData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new WWiseEventData();
            ((WWiseEventDataSetterCommon)((IWWiseEventDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WWiseEventData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WWiseEventDataSetterCommon)((IWWiseEventDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new WWiseEventData GetNew()
        {
            return new WWiseEventData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWWiseEventData :
        IFormLinkContainer,
        ILoquiObjectSetter<IWWiseEventDataInternal>,
        IStarfieldMajorRecordInternal,
        IWWiseEventDataGetter
    {
        new Guid? Start { get; set; }
        new IFormLinkNullable<IConditionRecordGetter> Condition { get; set; }
        new Guid? End { get; set; }
    }

    public partial interface IWWiseEventDataInternal :
        IStarfieldMajorRecordInternal,
        IWWiseEventData,
        IWWiseEventDataGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.WWED)]
    public partial interface IWWiseEventDataGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWWiseEventDataGetter>,
        IMapsToGetter<IWWiseEventDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => WWiseEventData_Registration.Instance;
        Guid? Start { get; }
        IFormLinkNullableGetter<IConditionRecordGetter> Condition { get; }
        Guid? End { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WWiseEventDataMixIn
    {
        public static void Clear(this IWWiseEventDataInternal item)
        {
            ((WWiseEventDataSetterCommon)((IWWiseEventDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WWiseEventData.Mask<bool> GetEqualsMask(
            this IWWiseEventDataGetter item,
            IWWiseEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWWiseEventDataGetter item,
            string? name = null,
            WWiseEventData.Mask<bool>? printMask = null)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWWiseEventDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WWiseEventData.Mask<bool>? printMask = null)
        {
            ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWWiseEventDataGetter item,
            IWWiseEventDataGetter rhs,
            WWiseEventData.TranslationMask? equalsMask = null)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWWiseEventDataInternal lhs,
            IWWiseEventDataGetter rhs,
            out WWiseEventData.ErrorMask errorMask,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WWiseEventData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWWiseEventDataInternal lhs,
            IWWiseEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WWiseEventData DeepCopy(
            this IWWiseEventDataGetter item,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            return ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WWiseEventData DeepCopy(
            this IWWiseEventDataGetter item,
            out WWiseEventData.ErrorMask errorMask,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            return ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WWiseEventData DeepCopy(
            this IWWiseEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static WWiseEventData Duplicate(
            this IWWiseEventDataGetter item,
            FormKey formKey,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static WWiseEventData Duplicate(
            this IWWiseEventDataGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWWiseEventDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WWiseEventDataSetterCommon)((IWWiseEventDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum WWiseEventData_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Start = 7,
        Condition = 8,
        End = 9,
    }
    #endregion

    #region Registration
    internal partial class WWiseEventData_Registration : ILoquiRegistration
    {
        public static readonly WWiseEventData_Registration Instance = new WWiseEventData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(WWiseEventData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WWiseEventData.ErrorMask);

        public static readonly Type ClassType = typeof(WWiseEventData);

        public static readonly Type GetterType = typeof(IWWiseEventDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWWiseEventData);

        public static readonly Type? InternalSetterType = typeof(IWWiseEventDataInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.WWiseEventData";

        public const string Name = "WWiseEventData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WWED;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WWED);
            var all = RecordCollection.Factory(
                RecordTypes.WWED,
                RecordTypes.WSED,
                RecordTypes.CNAM,
                RecordTypes.WTED);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WWiseEventDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WWiseEventDataSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly WWiseEventDataSetterCommon Instance = new WWiseEventDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWWiseEventDataInternal item)
        {
            ClearPartial();
            item.Start = default;
            item.Condition.Clear();
            item.End = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IWWiseEventDataInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWWiseEventDataInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWWiseEventData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Condition.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWWiseEventDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWWiseEventDataInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WWiseEventDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WWiseEventDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WWiseEventData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WWiseEventData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WWiseEventDataCommon : StarfieldMajorRecordCommon
    {
        public new static readonly WWiseEventDataCommon Instance = new WWiseEventDataCommon();

        public WWiseEventData.Mask<bool> GetEqualsMask(
            IWWiseEventDataGetter item,
            IWWiseEventDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WWiseEventData.Mask<bool>(false);
            ((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWWiseEventDataGetter item,
            IWWiseEventDataGetter rhs,
            WWiseEventData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Start = item.Start == rhs.Start;
            ret.Condition = item.Condition.Equals(rhs.Condition);
            ret.End = item.End == rhs.End;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWWiseEventDataGetter item,
            string? name = null,
            WWiseEventData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWWiseEventDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WWiseEventData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WWiseEventData =>");
            }
            else
            {
                sb.AppendLine($"{name} (WWiseEventData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWWiseEventDataGetter item,
            StructuredStringBuilder sb,
            WWiseEventData.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Start ?? true)
                && item.Start is {} StartItem)
            {
                sb.AppendItem(StartItem, "Start");
            }
            if (printMask?.Condition ?? true)
            {
                sb.AppendItem(item.Condition.FormKeyNullable, "Condition");
            }
            if ((printMask?.End ?? true)
                && item.End is {} EndItem)
            {
                sb.AppendItem(EndItem, "End");
            }
        }
        
        public static WWiseEventData_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (WWiseEventData_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (WWiseEventData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new WWiseEventData_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WWiseEventData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (WWiseEventData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (WWiseEventData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (WWiseEventData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWWiseEventDataGetter? lhs,
            IWWiseEventDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.Start) ?? true))
            {
                if (lhs.Start != rhs.Start) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.Condition) ?? true))
            {
                if (!lhs.Condition.Equals(rhs.Condition)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.End) ?? true))
            {
                if (lhs.End != rhs.End) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWWiseEventDataGetter?)lhs,
                rhs: rhs as IWWiseEventDataGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWWiseEventDataGetter?)lhs,
                rhs: rhs as IWWiseEventDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWWiseEventDataGetter item)
        {
            var hash = new HashCode();
            if (item.Start is {} Startitem)
            {
                hash.Add(Startitem);
            }
            hash.Add(item.Condition);
            if (item.End is {} Enditem)
            {
                hash.Add(Enditem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IWWiseEventDataGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWWiseEventDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return WWiseEventData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWWiseEventDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Condition, out var ConditionInfo))
            {
                yield return ConditionInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public WWiseEventData Duplicate(
            IWWiseEventDataGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new WWiseEventData(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWWiseEventDataGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWWiseEventDataGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WWiseEventDataSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly WWiseEventDataSetterTranslationCommon Instance = new WWiseEventDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWWiseEventDataInternal item,
            IWWiseEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWWiseEventData item,
            IWWiseEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.Start) ?? true))
            {
                item.Start = rhs.Start;
            }
            if ((copyMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.Condition) ?? true))
            {
                item.Condition.SetTo(rhs.Condition.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)WWiseEventData_FieldIndex.End) ?? true))
            {
                item.End = rhs.End;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWWiseEventData item,
            IWWiseEventDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseEventDataInternal)item,
                rhs: (IWWiseEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseEventData)item,
                rhs: (IWWiseEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseEventDataInternal)item,
                rhs: (IWWiseEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseEventData)item,
                rhs: (IWWiseEventDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public WWiseEventData DeepCopy(
            IWWiseEventDataGetter item,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            WWiseEventData ret = (WWiseEventData)((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).GetNew();
            ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WWiseEventData DeepCopy(
            IWWiseEventDataGetter item,
            out WWiseEventData.ErrorMask errorMask,
            WWiseEventData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WWiseEventData ret = (WWiseEventData)((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).GetNew();
            ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WWiseEventData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WWiseEventData DeepCopy(
            IWWiseEventDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WWiseEventData ret = (WWiseEventData)((WWiseEventDataCommon)((IWWiseEventDataGetter)item).CommonInstance()!).GetNew();
            ((WWiseEventDataSetterTranslationCommon)((IWWiseEventDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class WWiseEventData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WWiseEventData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WWiseEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WWiseEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WWiseEventDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WWiseEventDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class WWiseEventDataBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WWiseEventDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IWWiseEventDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            GuidBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Start,
                header: translationParams.ConvertToCustom(RecordTypes.WSED));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Condition,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            GuidBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.End,
                header: translationParams.ConvertToCustom(RecordTypes.WTED));
        }

        public void Write(
            MutagenWriter writer,
            IWWiseEventDataGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WWED,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWWiseEventDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWWiseEventDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWWiseEventDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WWiseEventDataBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly WWiseEventDataBinaryCreateTranslation Instance = new WWiseEventDataBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WWED;
        public static ParseResult FillBinaryRecordTypes(
            IWWiseEventDataInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WSED:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Start = GuidBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)WWiseEventData_FieldIndex.Start;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Condition.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)WWiseEventData_FieldIndex.Condition;
                }
                case RecordTypeInts.WTED:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.End = GuidBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)WWiseEventData_FieldIndex.End;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class WWiseEventDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class WWiseEventDataBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IWWiseEventDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WWiseEventData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WWiseEventData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WWiseEventDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WWiseEventDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WWiseEventDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WWiseEventDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WWiseEventDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWWiseEventData);


        #region Start
        private int? _StartLocation;
        public Guid? Start => _StartLocation.HasValue ? new Guid(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StartLocation.Value, _package.MetaData.Constants).Slice(0, 16)) : default(Guid?);
        #endregion
        #region Condition
        private int? _ConditionLocation;
        public IFormLinkNullableGetter<IConditionRecordGetter> Condition => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IConditionRecordGetter>(_package, _recordData, _ConditionLocation);
        #endregion
        #region End
        private int? _EndLocation;
        public Guid? End => _EndLocation.HasValue ? new Guid(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EndLocation.Value, _package.MetaData.Constants).Slice(0, 16)) : default(Guid?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WWiseEventDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWWiseEventDataGetter WWiseEventDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WWiseEventDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWWiseEventDataGetter WWiseEventDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WWiseEventDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WSED:
                {
                    _StartLocation = (stream.Position - offset);
                    return (int)WWiseEventData_FieldIndex.Start;
                }
                case RecordTypeInts.CNAM:
                {
                    _ConditionLocation = (stream.Position - offset);
                    return (int)WWiseEventData_FieldIndex.Condition;
                }
                case RecordTypeInts.WTED:
                {
                    _EndLocation = (stream.Position - offset);
                    return (int)WWiseEventData_FieldIndex.End;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WWiseEventDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<WWiseEventData>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWWiseEventDataGetter rhs) return false;
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWWiseEventDataGetter? obj)
        {
            return ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WWiseEventDataCommon)((IWWiseEventDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

