/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class LocationOwnerData :
        IEquatable<ILocationOwnerDataGetter>,
        ILocationOwnerData,
        ILoquiObjectSetter<LocationOwnerData>
    {
        #region Ctor
        public LocationOwnerData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Owner
        private readonly IFormLink<ILocationOwnerGetter> _Owner = new FormLink<ILocationOwnerGetter>();
        public IFormLink<ILocationOwnerGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILocationOwnerGetter> ILocationOwnerDataGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public static readonly SByte FactionRankDefault = -1;
        public SByte FactionRank { get; set; } = FactionRankDefault;
        #endregion
        #region EncounterMinLevel
        public SByte EncounterMinLevel { get; set; } = default(SByte);
        #endregion
        #region EncounterFlags
        public LocationOwnerData.EncounterFlag EncounterFlags { get; set; } = default(LocationOwnerData.EncounterFlag);
        #endregion
        #region EncounterMaxLevel
        public SByte EncounterMaxLevel { get; set; } = default(SByte);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationOwnerDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocationOwnerDataGetter rhs) return false;
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationOwnerDataGetter? obj)
        {
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.EncounterMinLevel = initialValue;
                this.EncounterFlags = initialValue;
                this.EncounterMaxLevel = initialValue;
            }

            public Mask(
                TItem Owner,
                TItem FactionRank,
                TItem EncounterMinLevel,
                TItem EncounterFlags,
                TItem EncounterMaxLevel)
            {
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.EncounterMinLevel = EncounterMinLevel;
                this.EncounterFlags = EncounterFlags;
                this.EncounterMaxLevel = EncounterMaxLevel;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Owner;
            public TItem FactionRank;
            public TItem EncounterMinLevel;
            public TItem EncounterFlags;
            public TItem EncounterMaxLevel;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.EncounterMinLevel, rhs.EncounterMinLevel)) return false;
                if (!object.Equals(this.EncounterFlags, rhs.EncounterFlags)) return false;
                if (!object.Equals(this.EncounterMaxLevel, rhs.EncounterMaxLevel)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.EncounterMinLevel);
                hash.Add(this.EncounterFlags);
                hash.Add(this.EncounterMaxLevel);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.EncounterMinLevel)) return false;
                if (!eval(this.EncounterFlags)) return false;
                if (!eval(this.EncounterMaxLevel)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.EncounterMinLevel)) return true;
                if (eval(this.EncounterFlags)) return true;
                if (eval(this.EncounterMaxLevel)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocationOwnerData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.EncounterMinLevel = eval(this.EncounterMinLevel);
                obj.EncounterFlags = eval(this.EncounterFlags);
                obj.EncounterMaxLevel = eval(this.EncounterMaxLevel);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LocationOwnerData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LocationOwnerData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LocationOwnerData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.EncounterMinLevel ?? true)
                    {
                        sb.AppendItem(EncounterMinLevel, "EncounterMinLevel");
                    }
                    if (printMask?.EncounterFlags ?? true)
                    {
                        sb.AppendItem(EncounterFlags, "EncounterFlags");
                    }
                    if (printMask?.EncounterMaxLevel ?? true)
                    {
                        sb.AppendItem(EncounterMaxLevel, "EncounterMaxLevel");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? EncounterMinLevel;
            public Exception? EncounterFlags;
            public Exception? EncounterMaxLevel;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocationOwnerData_FieldIndex enu = (LocationOwnerData_FieldIndex)index;
                switch (enu)
                {
                    case LocationOwnerData_FieldIndex.Owner:
                        return Owner;
                    case LocationOwnerData_FieldIndex.FactionRank:
                        return FactionRank;
                    case LocationOwnerData_FieldIndex.EncounterMinLevel:
                        return EncounterMinLevel;
                    case LocationOwnerData_FieldIndex.EncounterFlags:
                        return EncounterFlags;
                    case LocationOwnerData_FieldIndex.EncounterMaxLevel:
                        return EncounterMaxLevel;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocationOwnerData_FieldIndex enu = (LocationOwnerData_FieldIndex)index;
                switch (enu)
                {
                    case LocationOwnerData_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case LocationOwnerData_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterMinLevel:
                        this.EncounterMinLevel = ex;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterFlags:
                        this.EncounterFlags = ex;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterMaxLevel:
                        this.EncounterMaxLevel = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocationOwnerData_FieldIndex enu = (LocationOwnerData_FieldIndex)index;
                switch (enu)
                {
                    case LocationOwnerData_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case LocationOwnerData_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterMinLevel:
                        this.EncounterMinLevel = (Exception?)obj;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterFlags:
                        this.EncounterFlags = (Exception?)obj;
                        break;
                    case LocationOwnerData_FieldIndex.EncounterMaxLevel:
                        this.EncounterMaxLevel = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (EncounterMinLevel != null) return true;
                if (EncounterFlags != null) return true;
                if (EncounterMaxLevel != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(EncounterMinLevel, "EncounterMinLevel");
                }
                {
                    sb.AppendItem(EncounterFlags, "EncounterFlags");
                }
                {
                    sb.AppendItem(EncounterMaxLevel, "EncounterMaxLevel");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.EncounterMinLevel = this.EncounterMinLevel.Combine(rhs.EncounterMinLevel);
                ret.EncounterFlags = this.EncounterFlags.Combine(rhs.EncounterFlags);
                ret.EncounterMaxLevel = this.EncounterMaxLevel.Combine(rhs.EncounterMaxLevel);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Owner;
            public bool FactionRank;
            public bool EncounterMinLevel;
            public bool EncounterFlags;
            public bool EncounterMaxLevel;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.EncounterMinLevel = defaultOn;
                this.EncounterFlags = defaultOn;
                this.EncounterMaxLevel = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((EncounterMinLevel, null));
                ret.Add((EncounterFlags, null));
                ret.Add((EncounterMaxLevel, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationOwnerDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationOwnerDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationOwnerDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationOwnerDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LocationOwnerData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LocationOwnerData();
            ((LocationOwnerDataSetterCommon)((ILocationOwnerDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocationOwnerData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LocationOwnerDataSetterCommon)((ILocationOwnerDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocationOwnerData GetNew()
        {
            return new LocationOwnerData();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocationOwnerData :
        IFormLinkContainer,
        ILocationOwnerDataGetter,
        ILoquiObjectSetter<ILocationOwnerData>
    {
        new IFormLink<ILocationOwnerGetter> Owner { get; set; }
        new SByte FactionRank { get; set; }
        new SByte EncounterMinLevel { get; set; }
        new LocationOwnerData.EncounterFlag EncounterFlags { get; set; }
        new SByte EncounterMaxLevel { get; set; }
    }

    public partial interface ILocationOwnerDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILocationOwnerDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LocationOwnerData_Registration.Instance;
        IFormLinkGetter<ILocationOwnerGetter> Owner { get; }
        SByte FactionRank { get; }
        SByte EncounterMinLevel { get; }
        LocationOwnerData.EncounterFlag EncounterFlags { get; }
        SByte EncounterMaxLevel { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocationOwnerDataMixIn
    {
        public static void Clear(this ILocationOwnerData item)
        {
            ((LocationOwnerDataSetterCommon)((ILocationOwnerDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocationOwnerData.Mask<bool> GetEqualsMask(
            this ILocationOwnerDataGetter item,
            ILocationOwnerDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILocationOwnerDataGetter item,
            string? name = null,
            LocationOwnerData.Mask<bool>? printMask = null)
        {
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILocationOwnerDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocationOwnerData.Mask<bool>? printMask = null)
        {
            ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocationOwnerDataGetter item,
            ILocationOwnerDataGetter rhs,
            LocationOwnerData.TranslationMask? equalsMask = null)
        {
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocationOwnerData lhs,
            ILocationOwnerDataGetter rhs)
        {
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationOwnerData lhs,
            ILocationOwnerDataGetter rhs,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationOwnerData lhs,
            ILocationOwnerDataGetter rhs,
            out LocationOwnerData.ErrorMask errorMask,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LocationOwnerData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationOwnerData lhs,
            ILocationOwnerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LocationOwnerData DeepCopy(
            this ILocationOwnerDataGetter item,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            return ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocationOwnerData DeepCopy(
            this ILocationOwnerDataGetter item,
            out LocationOwnerData.ErrorMask errorMask,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            return ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocationOwnerData DeepCopy(
            this ILocationOwnerDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocationOwnerData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LocationOwnerDataSetterCommon)((ILocationOwnerDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum LocationOwnerData_FieldIndex
    {
        Owner = 0,
        FactionRank = 1,
        EncounterMinLevel = 2,
        EncounterFlags = 3,
        EncounterMaxLevel = 4,
    }
    #endregion

    #region Registration
    internal partial class LocationOwnerData_Registration : ILoquiRegistration
    {
        public static readonly LocationOwnerData_Registration Instance = new LocationOwnerData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LocationOwnerData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocationOwnerData.ErrorMask);

        public static readonly Type ClassType = typeof(LocationOwnerData);

        public static readonly Type GetterType = typeof(ILocationOwnerDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocationOwnerData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.LocationOwnerData";

        public const string Name = "LocationOwnerData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LocationOwnerDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LocationOwnerDataSetterCommon
    {
        public static readonly LocationOwnerDataSetterCommon Instance = new LocationOwnerDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationOwnerData item)
        {
            ClearPartial();
            item.Owner.Clear();
            item.FactionRank = LocationOwnerData.FactionRankDefault;
            item.EncounterMinLevel = default(SByte);
            item.EncounterFlags = default(LocationOwnerData.EncounterFlag);
            item.EncounterMaxLevel = default(SByte);
        }
        
        #region Mutagen
        public void RemapLinks(ILocationOwnerData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Owner.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationOwnerData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LocationOwnerDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class LocationOwnerDataCommon
    {
        public static readonly LocationOwnerDataCommon Instance = new LocationOwnerDataCommon();

        public LocationOwnerData.Mask<bool> GetEqualsMask(
            ILocationOwnerDataGetter item,
            ILocationOwnerDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocationOwnerData.Mask<bool>(false);
            ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationOwnerDataGetter item,
            ILocationOwnerDataGetter rhs,
            LocationOwnerData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.EncounterMinLevel = item.EncounterMinLevel == rhs.EncounterMinLevel;
            ret.EncounterFlags = item.EncounterFlags == rhs.EncounterFlags;
            ret.EncounterMaxLevel = item.EncounterMaxLevel == rhs.EncounterMaxLevel;
        }
        
        public string Print(
            ILocationOwnerDataGetter item,
            string? name = null,
            LocationOwnerData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILocationOwnerDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocationOwnerData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LocationOwnerData =>");
            }
            else
            {
                sb.AppendLine($"{name} (LocationOwnerData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILocationOwnerDataGetter item,
            StructuredStringBuilder sb,
            LocationOwnerData.Mask<bool>? printMask = null)
        {
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKey, "Owner");
            }
            if (printMask?.FactionRank ?? true)
            {
                sb.AppendItem(item.FactionRank, "FactionRank");
            }
            if (printMask?.EncounterMinLevel ?? true)
            {
                sb.AppendItem(item.EncounterMinLevel, "EncounterMinLevel");
            }
            if (printMask?.EncounterFlags ?? true)
            {
                sb.AppendItem(item.EncounterFlags, "EncounterFlags");
            }
            if (printMask?.EncounterMaxLevel ?? true)
            {
                sb.AppendItem(item.EncounterMaxLevel, "EncounterMaxLevel");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationOwnerDataGetter? lhs,
            ILocationOwnerDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterMinLevel) ?? true))
            {
                if (lhs.EncounterMinLevel != rhs.EncounterMinLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterFlags) ?? true))
            {
                if (lhs.EncounterFlags != rhs.EncounterFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterMaxLevel) ?? true))
            {
                if (lhs.EncounterMaxLevel != rhs.EncounterMaxLevel) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILocationOwnerDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Owner);
            hash.Add(item.FactionRank);
            hash.Add(item.EncounterMinLevel);
            hash.Add(item.EncounterFlags);
            hash.Add(item.EncounterMaxLevel);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocationOwnerData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILocationOwnerDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Owner);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LocationOwnerDataSetterTranslationCommon
    {
        public static readonly LocationOwnerDataSetterTranslationCommon Instance = new LocationOwnerDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocationOwnerData item,
            ILocationOwnerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterMinLevel) ?? true))
            {
                item.EncounterMinLevel = rhs.EncounterMinLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterFlags) ?? true))
            {
                item.EncounterFlags = rhs.EncounterFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationOwnerData_FieldIndex.EncounterMaxLevel) ?? true))
            {
                item.EncounterMaxLevel = rhs.EncounterMaxLevel;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILocationOwnerData item,
            ILocationOwnerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public LocationOwnerData DeepCopy(
            ILocationOwnerDataGetter item,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            LocationOwnerData ret = (LocationOwnerData)((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).GetNew();
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LocationOwnerData DeepCopy(
            ILocationOwnerDataGetter item,
            out LocationOwnerData.ErrorMask errorMask,
            LocationOwnerData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LocationOwnerData ret = (LocationOwnerData)((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).GetNew();
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LocationOwnerData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LocationOwnerData DeepCopy(
            ILocationOwnerDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocationOwnerData ret = (LocationOwnerData)((LocationOwnerDataCommon)((ILocationOwnerDataGetter)item).CommonInstance()!).GetNew();
            ((LocationOwnerDataSetterTranslationCommon)((ILocationOwnerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class LocationOwnerData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationOwnerData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocationOwnerData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationOwnerDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocationOwnerDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationOwnerDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationOwnerDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocationOwnerDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocationOwnerDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LocationOwnerDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LocationOwnerDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ILocationOwnerDataGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Owner);
            writer.Write(item.FactionRank);
            writer.Write(item.EncounterMinLevel);
            EnumBinaryTranslation<LocationOwnerData.EncounterFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.EncounterFlags,
                length: 1);
            writer.Write(item.EncounterMaxLevel);
        }

        public void Write(
            MutagenWriter writer,
            ILocationOwnerDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILocationOwnerDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LocationOwnerDataBinaryCreateTranslation
    {
        public static readonly LocationOwnerDataBinaryCreateTranslation Instance = new LocationOwnerDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocationOwnerData item,
            MutagenFrame frame)
        {
            item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.FactionRank = frame.ReadInt8();
            item.EncounterMinLevel = frame.ReadInt8();
            item.EncounterFlags = EnumBinaryTranslation<LocationOwnerData.EncounterFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.EncounterMaxLevel = frame.ReadInt8();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LocationOwnerDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocationOwnerDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationOwnerDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LocationOwnerDataBinaryOverlay :
        PluginBinaryOverlay,
        ILocationOwnerDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationOwnerData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocationOwnerData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationOwnerDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationOwnerDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationOwnerDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocationOwnerDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocationOwnerDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationOwnerDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationOwnerDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationOwnerDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<ILocationOwnerGetter> Owner => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationOwnerGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public SByte FactionRank => (sbyte)_structData.Slice(0x4, 0x1)[0];
        public SByte EncounterMinLevel => (sbyte)_structData.Slice(0x5, 0x1)[0];
        public LocationOwnerData.EncounterFlag EncounterFlags => (LocationOwnerData.EncounterFlag)_structData.Span.Slice(0x6, 0x1)[0];
        public SByte EncounterMaxLevel => (sbyte)_structData.Slice(0x7, 0x1)[0];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationOwnerDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILocationOwnerDataGetter LocationOwnerDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x8,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new LocationOwnerDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x8 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ILocationOwnerDataGetter LocationOwnerDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LocationOwnerDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationOwnerDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocationOwnerDataGetter rhs) return false;
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationOwnerDataGetter? obj)
        {
            return ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationOwnerDataCommon)((ILocationOwnerDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

