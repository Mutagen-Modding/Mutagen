/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class HeadPart :
        StarfieldMajorRecord,
        IEquatable<IHeadPartGetter>,
        IHeadPartInternal,
        ILoquiObjectSetter<HeadPart>
    {
        #region Ctor
        protected HeadPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IHeadPartGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IHeadPartGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHeadPartGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Flags
        public HeadPart.Flag Flags { get; set; } = default(HeadPart.Flag);
        #endregion
        #region Type
        public HeadPart.TypeEnum? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        HeadPart.TypeEnum? IHeadPartGetter.Type => this.Type;
        #endregion
        #region ExtraParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IHeadPartGetter>> _ExtraParts = new ExtendedList<IFormLinkGetter<IHeadPartGetter>>();
        public ExtendedList<IFormLinkGetter<IHeadPartGetter>> ExtraParts
        {
            get => this._ExtraParts;
            init => this._ExtraParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> IHeadPartGetter.ExtraParts => _ExtraParts;
        #endregion

        #endregion
        #region NAM2
        public String? NAM2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IHeadPartGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        public String? NAM3 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IHeadPartGetter.NAM3 => this.NAM3;
        #endregion
        #region TextureSet
        private readonly IFormLinkNullable<ITextureSetGetter> _TextureSet = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> TextureSet
        {
            get => _TextureSet;
            set => _TextureSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IHeadPartGetter.TextureSet => this.TextureSet;
        #endregion
        #region ValidRaces
        private readonly IFormLinkNullable<IFormListGetter> _ValidRaces = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> ValidRaces
        {
            get => _ValidRaces;
            set => _ValidRaces.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IHeadPartGetter.ValidRaces => this.ValidRaces;
        #endregion
        #region MNAM
        private readonly IFormLinkNullable<IMorphableObjectGetter> _MNAM = new FormLinkNullable<IMorphableObjectGetter>();
        public IFormLinkNullable<IMorphableObjectGetter> MNAM
        {
            get => _MNAM;
            set => _MNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMorphableObjectGetter> IHeadPartGetter.MNAM => this.MNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NAM2 = initialValue;
                this.NAM3 = initialValue;
                this.TextureSet = initialValue;
                this.ValidRaces = initialValue;
                this.MNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Model,
                TItem Flags,
                TItem Type,
                TItem ExtraParts,
                TItem NAM2,
                TItem NAM3,
                TItem TextureSet,
                TItem ValidRaces,
                TItem MNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Flags = Flags;
                this.Type = Type;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ExtraParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.NAM2 = NAM2;
                this.NAM3 = NAM3;
                this.TextureSet = TextureSet;
                this.ValidRaces = ValidRaces;
                this.MNAM = MNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Flags;
            public TItem Type;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ExtraParts;
            public TItem NAM2;
            public TItem NAM3;
            public TItem TextureSet;
            public TItem ValidRaces;
            public TItem MNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ExtraParts, rhs.ExtraParts)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.ValidRaces, rhs.ValidRaces)) return false;
                if (!object.Equals(this.MNAM, rhs.MNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ExtraParts);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.TextureSet);
                hash.Add(this.ValidRaces);
                hash.Add(this.MNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (this.ExtraParts != null)
                {
                    if (!eval(this.ExtraParts.Overall)) return false;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NAM2)) return false;
                if (!eval(this.NAM3)) return false;
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.ValidRaces)) return false;
                if (!eval(this.MNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (this.ExtraParts != null)
                {
                    if (eval(this.ExtraParts.Overall)) return true;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NAM2)) return true;
                if (eval(this.NAM3)) return true;
                if (eval(this.TextureSet)) return true;
                if (eval(this.ValidRaces)) return true;
                if (eval(this.MNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                if (ExtraParts != null)
                {
                    obj.ExtraParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ExtraParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ExtraParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ExtraParts.Specific = l;
                        foreach (var item in ExtraParts.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = eval(this.NAM3);
                obj.TextureSet = eval(this.TextureSet);
                obj.ValidRaces = eval(this.ValidRaces);
                obj.MNAM = eval(this.MNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HeadPart.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HeadPart.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HeadPart.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if ((printMask?.ExtraParts?.Overall ?? true)
                        && ExtraParts is {} ExtraPartsItem)
                    {
                        sb.AppendLine("ExtraParts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ExtraPartsItem.Overall);
                            if (ExtraPartsItem.Specific != null)
                            {
                                foreach (var subItem in ExtraPartsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        sb.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        sb.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.TextureSet ?? true)
                    {
                        sb.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.ValidRaces ?? true)
                    {
                        sb.AppendItem(ValidRaces, "ValidRaces");
                    }
                    if (printMask?.MNAM ?? true)
                    {
                        sb.AppendItem(MNAM, "MNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Flags;
            public Exception? Type;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ExtraParts;
            public Exception? NAM2;
            public Exception? NAM3;
            public Exception? TextureSet;
            public Exception? ValidRaces;
            public Exception? MNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Components:
                        return Components;
                    case HeadPart_FieldIndex.Name:
                        return Name;
                    case HeadPart_FieldIndex.Model:
                        return Model;
                    case HeadPart_FieldIndex.Flags:
                        return Flags;
                    case HeadPart_FieldIndex.Type:
                        return Type;
                    case HeadPart_FieldIndex.ExtraParts:
                        return ExtraParts;
                    case HeadPart_FieldIndex.NAM2:
                        return NAM2;
                    case HeadPart_FieldIndex.NAM3:
                        return NAM3;
                    case HeadPart_FieldIndex.TextureSet:
                        return TextureSet;
                    case HeadPart_FieldIndex.ValidRaces:
                        return ValidRaces;
                    case HeadPart_FieldIndex.MNAM:
                        return MNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case HeadPart_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = ex;
                        break;
                    case HeadPart_FieldIndex.MNAM:
                        this.MNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case HeadPart_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadPart_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.MNAM:
                        this.MNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ExtraParts != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (TextureSet != null) return true;
                if (ValidRaces != null) return true;
                if (MNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                if (ExtraParts is {} ExtraPartsItem)
                {
                    sb.AppendLine("ExtraParts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ExtraPartsItem.Overall);
                        if (ExtraPartsItem.Specific != null)
                        {
                            foreach (var subItem in ExtraPartsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NAM2, "NAM2");
                }
                {
                    sb.AppendItem(NAM3, "NAM3");
                }
                {
                    sb.AppendItem(TextureSet, "TextureSet");
                }
                {
                    sb.AppendItem(ValidRaces, "ValidRaces");
                }
                {
                    sb.AppendItem(MNAM, "MNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ExtraParts?.Overall, rhs.ExtraParts?.Overall), Noggog.ExceptionExt.Combine(this.ExtraParts?.Specific, rhs.ExtraParts?.Specific));
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.ValidRaces = this.ValidRaces.Combine(rhs.ValidRaces);
                ret.MNAM = this.MNAM.Combine(rhs.MNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool Flags;
            public bool Type;
            public bool ExtraParts;
            public bool NAM2;
            public bool NAM3;
            public bool TextureSet;
            public bool ValidRaces;
            public bool MNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ExtraParts = defaultOn;
                this.NAM2 = defaultOn;
                this.NAM3 = defaultOn;
                this.TextureSet = defaultOn;
                this.ValidRaces = defaultOn;
                this.MNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ExtraParts, null));
                ret.Add((NAM2, null));
                ret.Add((NAM3, null));
                ret.Add((TextureSet, null));
                ret.Add((ValidRaces, null));
                ret.Add((MNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = HeadPart_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HeadPartCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartSetterCommon.Instance.RemapLinks(this, mapping);
        public HeadPart(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private HeadPart(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal HeadPart(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public HeadPart(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public HeadPart(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<HeadPart>.ToString(this);
        }

        protected override Type LinkType => typeof(IHeadPart);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => HeadPartCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => HeadPartSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => HeadPartSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => HeadPartSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHeadPartGetter rhs) return false;
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadPartGetter? obj)
        {
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static HeadPart CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HeadPart();
            ((HeadPartSetterCommon)((IHeadPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HeadPart item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new HeadPart GetNew()
        {
            return new HeadPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadPart :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHeadPartGetter,
        ILoquiObjectSetter<IHeadPartInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new HeadPart.Flag Flags { get; set; }
        new HeadPart.TypeEnum? Type { get; set; }
        new ExtendedList<IFormLinkGetter<IHeadPartGetter>> ExtraParts { get; }
        new String? NAM2 { get; set; }
        new String? NAM3 { get; set; }
        new IFormLinkNullable<ITextureSetGetter> TextureSet { get; set; }
        new IFormLinkNullable<IFormListGetter> ValidRaces { get; set; }
        new IFormLinkNullable<IMorphableObjectGetter> MNAM { get; set; }
        #region Mutagen
        new HeadPart.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IHeadPartInternal :
        IStarfieldMajorRecordInternal,
        IHeadPart,
        IHeadPartGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.HDPT)]
    public partial interface IHeadPartGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IHeadPartGetter>,
        IMapsToGetter<IHeadPartGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => HeadPart_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        HeadPart.Flag Flags { get; }
        HeadPart.TypeEnum? Type { get; }
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> ExtraParts { get; }
        String? NAM2 { get; }
        String? NAM3 { get; }
        IFormLinkNullableGetter<ITextureSetGetter> TextureSet { get; }
        IFormLinkNullableGetter<IFormListGetter> ValidRaces { get; }
        IFormLinkNullableGetter<IMorphableObjectGetter> MNAM { get; }

        #region Mutagen
        HeadPart.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class HeadPartMixIn
    {
        public static void Clear(this IHeadPartInternal item)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadPart.Mask<bool> GetEqualsMask(
            this IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHeadPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHeadPartGetter item,
            IHeadPartGetter rhs,
            HeadPart.TranslationMask? equalsMask = null)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static HeadPart Duplicate(
            this IHeadPartGetter item,
            FormKey formKey,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static HeadPart Duplicate(
            this IHeadPartGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHeadPartInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum HeadPart_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Model = 9,
        Flags = 10,
        Type = 11,
        ExtraParts = 12,
        NAM2 = 13,
        NAM3 = 14,
        TextureSet = 15,
        ValidRaces = 16,
        MNAM = 17,
    }
    #endregion

    #region Registration
    internal partial class HeadPart_Registration : ILoquiRegistration
    {
        public static readonly HeadPart_Registration Instance = new HeadPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(HeadPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadPart.ErrorMask);

        public static readonly Type ClassType = typeof(HeadPart);

        public static readonly Type GetterType = typeof(IHeadPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadPart);

        public static readonly Type? InternalSetterType = typeof(IHeadPartInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.HeadPart";

        public const string Name = "HeadPart";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HDPT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.HDPT);
            var all = RecordCollection.Factory(
                RecordTypes.HDPT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.DATA,
                RecordTypes.PNAM,
                RecordTypes.HNAM,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.TNAM,
                RecordTypes.RNAM,
                RecordTypes.MNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HeadPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HeadPartSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly HeadPartSetterCommon Instance = new HeadPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadPartInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Name = default;
            item.Model = null;
            item.Flags = default(HeadPart.Flag);
            item.Type = default;
            item.ExtraParts.Clear();
            item.NAM2 = default;
            item.NAM3 = default;
            item.TextureSet.Clear();
            item.ValidRaces.Clear();
            item.MNAM.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IHeadPart obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ExtraParts.RemapLinks(mapping);
            obj.TextureSet.Relink(mapping);
            obj.ValidRaces.Relink(mapping);
            obj.MNAM.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IHeadPart obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IHeadPart obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHeadPartInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IHeadPartInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: HeadPartBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: HeadPartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (HeadPart)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (HeadPart)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class HeadPartCommon : StarfieldMajorRecordCommon
    {
        public new static readonly HeadPartCommon Instance = new HeadPartCommon();

        public HeadPart.Mask<bool> GetEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadPart.Mask<bool>(false);
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            HeadPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ExtraParts = item.ExtraParts.CollectionEqualsHelper(
                rhs.ExtraParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.NAM2 = string.Equals(item.NAM2, rhs.NAM2);
            ret.NAM3 = string.Equals(item.NAM3, rhs.NAM3);
            ret.TextureSet = item.TextureSet.Equals(rhs.TextureSet);
            ret.ValidRaces = item.ValidRaces.Equals(rhs.ValidRaces);
            ret.MNAM = item.MNAM.Equals(rhs.MNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHeadPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HeadPart =>");
            }
            else
            {
                sb.AppendLine($"{name} (HeadPart) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHeadPartGetter item,
            StructuredStringBuilder sb,
            HeadPart.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Type ?? true)
                && item.Type is {} TypeItem)
            {
                sb.AppendItem(TypeItem, "Type");
            }
            if (printMask?.ExtraParts?.Overall ?? true)
            {
                sb.AppendLine("ExtraParts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ExtraParts)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2 is {} NAM2Item)
            {
                sb.AppendItem(NAM2Item, "NAM2");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                sb.AppendItem(NAM3Item, "NAM3");
            }
            if (printMask?.TextureSet ?? true)
            {
                sb.AppendItem(item.TextureSet.FormKeyNullable, "TextureSet");
            }
            if (printMask?.ValidRaces ?? true)
            {
                sb.AppendItem(item.ValidRaces.FormKeyNullable, "ValidRaces");
            }
            if (printMask?.MNAM ?? true)
            {
                sb.AppendItem(item.MNAM.FormKeyNullable, "MNAM");
            }
        }
        
        public static HeadPart_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (HeadPart_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new HeadPart_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadPartGetter? lhs,
            IHeadPartGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)HeadPart_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ExtraParts) ?? true))
            {
                if (!lhs.ExtraParts.SequenceEqualNullable(rhs.ExtraParts)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.NAM2) ?? true))
            {
                if (!string.Equals(lhs.NAM2, rhs.NAM2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.NAM3) ?? true))
            {
                if (!string.Equals(lhs.NAM3, rhs.NAM3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.TextureSet) ?? true))
            {
                if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ValidRaces) ?? true))
            {
                if (!lhs.ValidRaces.Equals(rhs.ValidRaces)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadPart_FieldIndex.MNAM) ?? true))
            {
                if (!lhs.MNAM.Equals(rhs.MNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IHeadPartGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Flags);
            if (item.Type is {} Typeitem)
            {
                hash.Add(Typeitem);
            }
            hash.Add(item.ExtraParts);
            if (item.NAM2 is {} NAM2item)
            {
                hash.Add(NAM2item);
            }
            if (item.NAM3 is {} NAM3item)
            {
                hash.Add(NAM3item);
            }
            hash.Add(item.TextureSet);
            hash.Add(item.ValidRaces);
            hash.Add(item.MNAM);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return HeadPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHeadPartGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.ExtraParts)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.TextureSet, out var TextureSetInfo))
            {
                yield return TextureSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ValidRaces, out var ValidRacesInfo))
            {
                yield return ValidRacesInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MNAM, out var MNAMInfo))
            {
                yield return MNAMInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IHeadPartGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public HeadPart Duplicate(
            IHeadPartGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new HeadPart(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHeadPartGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHeadPartGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class HeadPartSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly HeadPartSetterTranslationCommon Instance = new HeadPartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHeadPartInternal item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IHeadPart item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ExtraParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.ExtraParts);
                try
                {
                    item.ExtraParts.SetTo(
                        rhs.ExtraParts
                            .Select(b => (IFormLinkGetter<IHeadPartGetter>)new FormLink<IHeadPartGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.NAM2) ?? true))
            {
                item.NAM2 = rhs.NAM2;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.NAM3) ?? true))
            {
                item.NAM3 = rhs.NAM3;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet.SetTo(rhs.TextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ValidRaces) ?? true))
            {
                item.ValidRaces.SetTo(rhs.ValidRaces.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.MNAM) ?? true))
            {
                item.MNAM.SetTo(rhs.MNAM.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IHeadPart item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class HeadPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HeadPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class HeadPartBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly HeadPartBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IHeadPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<HeadPart.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            EnumBinaryTranslation<HeadPart.TypeEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.ExtraParts,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHeadPartGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.HNAM));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM2,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM3,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ValidRaces,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MNAM,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
        }

        public void Write(
            MutagenWriter writer,
            IHeadPartGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.HDPT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HeadPartBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly HeadPartBinaryCreateTranslation Instance = new HeadPartBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.HDPT;
        public static ParseResult FillBinaryRecordTypes(
            IHeadPartInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)HeadPart_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)HeadPart_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)HeadPart_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<HeadPart.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)HeadPart_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<HeadPart.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)HeadPart_FieldIndex.Type;
                }
                case RecordTypeInts.HNAM:
                {
                    item.ExtraParts.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.HNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadPart_FieldIndex.ExtraParts;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)HeadPart_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)HeadPart_FieldIndex.NAM3;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)HeadPart_FieldIndex.TextureSet;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ValidRaces.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)HeadPart_FieldIndex.ValidRaces;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)HeadPart_FieldIndex.MNAM;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class HeadPartBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class HeadPartBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IHeadPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HeadPartCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => HeadPartCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IHeadPart);

        public HeadPart.MajorFlag MajorFlags => (HeadPart.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Flags
        private int? _FlagsLocation;
        public HeadPart.Flag Flags => _FlagsLocation.HasValue ? (HeadPart.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(HeadPart.Flag);
        #endregion
        #region Type
        private int? _TypeLocation;
        public HeadPart.TypeEnum? Type => _TypeLocation.HasValue ? (HeadPart.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeLocation!.Value, _package.MetaData.Constants)) : default(HeadPart.TypeEnum?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> ExtraParts { get; private set; } = Array.Empty<IFormLinkGetter<IHeadPartGetter>>();
        #region NAM2
        private int? _NAM2Location;
        public String? NAM2 => _NAM2Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM2Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public String? NAM3 => _NAM3Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM3Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region TextureSet
        private int? _TextureSetLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> TextureSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _TextureSetLocation);
        #endregion
        #region ValidRaces
        private int? _ValidRacesLocation;
        public IFormLinkNullableGetter<IFormListGetter> ValidRaces => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _ValidRacesLocation);
        #endregion
        #region MNAM
        private int? _MNAMLocation;
        public IFormLinkNullableGetter<IMorphableObjectGetter> MNAM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMorphableObjectGetter>(_package, _recordData, _MNAMLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HeadPartBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHeadPartGetter HeadPartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new HeadPartBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IHeadPartGetter HeadPartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HeadPartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)HeadPart_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)HeadPart_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.Type;
                }
                case RecordTypeInts.HNAM:
                {
                    this.ExtraParts = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IHeadPartGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IHeadPartGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.HNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)HeadPart_FieldIndex.ExtraParts;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.NAM3;
                }
                case RecordTypeInts.TNAM:
                {
                    _TextureSetLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.TextureSet;
                }
                case RecordTypeInts.RNAM:
                {
                    _ValidRacesLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.ValidRaces;
                }
                case RecordTypeInts.MNAM:
                {
                    _MNAMLocation = (stream.Position - offset);
                    return (int)HeadPart_FieldIndex.MNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<HeadPart>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHeadPartGetter rhs) return false;
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadPartGetter? obj)
        {
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

