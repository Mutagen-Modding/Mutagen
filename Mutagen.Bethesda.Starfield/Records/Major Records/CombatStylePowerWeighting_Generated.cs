/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CombatStylePowerWeighting :
        ICombatStylePowerWeighting,
        IEquatable<ICombatStylePowerWeightingGetter>,
        ILoquiObjectSetter<CombatStylePowerWeighting>
    {
        #region Ctor
        public CombatStylePowerWeighting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Engines
        public Single Engines { get; set; } = default(Single);
        public static RangeFloat Engines_Range = new RangeFloat(0f, 10f);
        #endregion
        #region Shields
        public Single Shields { get; set; } = default(Single);
        public static RangeFloat Shields_Range = new RangeFloat(0f, 10f);
        #endregion
        #region Guns
        public Single Guns { get; set; } = default(Single);
        public static RangeFloat Guns_Range = new RangeFloat(0f, 10f);
        #endregion
        #region ShieldBasedGunsEM
        public Single ShieldBasedGunsEM { get; set; } = default(Single);
        public static RangeFloat ShieldBasedGunsEM_Range = new RangeFloat(0f, 10f);
        #endregion
        #region ShieldBasedGunsHull
        public Single ShieldBasedGunsHull { get; set; } = default(Single);
        public static RangeFloat ShieldBasedGunsHull_Range = new RangeFloat(0f, 10f);
        #endregion
        #region ShieldBasedGunsShield
        public Single ShieldBasedGunsShield { get; set; } = default(Single);
        public static RangeFloat ShieldBasedGunsShield_Range = new RangeFloat(0f, 10f);
        #endregion
        #region HullBasedGunsEM
        public Single HullBasedGunsEM { get; set; } = default(Single);
        public static RangeFloat HullBasedGunsEM_Range = new RangeFloat(0f, 10f);
        #endregion
        #region HullBasedGunsHull
        public Single HullBasedGunsHull { get; set; } = default(Single);
        public static RangeFloat HullBasedGunsHull_Range = new RangeFloat(0f, 10f);
        #endregion
        #region HullBasedGunsShield
        public Single HullBasedGunsShield { get; set; } = default(Single);
        public static RangeFloat HullBasedGunsShield_Range = new RangeFloat(0f, 10f);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStylePowerWeightingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStylePowerWeightingGetter rhs) return false;
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStylePowerWeightingGetter? obj)
        {
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Engines = initialValue;
                this.Shields = initialValue;
                this.Guns = initialValue;
                this.ShieldBasedGunsEM = initialValue;
                this.ShieldBasedGunsHull = initialValue;
                this.ShieldBasedGunsShield = initialValue;
                this.HullBasedGunsEM = initialValue;
                this.HullBasedGunsHull = initialValue;
                this.HullBasedGunsShield = initialValue;
            }

            public Mask(
                TItem Engines,
                TItem Shields,
                TItem Guns,
                TItem ShieldBasedGunsEM,
                TItem ShieldBasedGunsHull,
                TItem ShieldBasedGunsShield,
                TItem HullBasedGunsEM,
                TItem HullBasedGunsHull,
                TItem HullBasedGunsShield)
            {
                this.Engines = Engines;
                this.Shields = Shields;
                this.Guns = Guns;
                this.ShieldBasedGunsEM = ShieldBasedGunsEM;
                this.ShieldBasedGunsHull = ShieldBasedGunsHull;
                this.ShieldBasedGunsShield = ShieldBasedGunsShield;
                this.HullBasedGunsEM = HullBasedGunsEM;
                this.HullBasedGunsHull = HullBasedGunsHull;
                this.HullBasedGunsShield = HullBasedGunsShield;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Engines;
            public TItem Shields;
            public TItem Guns;
            public TItem ShieldBasedGunsEM;
            public TItem ShieldBasedGunsHull;
            public TItem ShieldBasedGunsShield;
            public TItem HullBasedGunsEM;
            public TItem HullBasedGunsHull;
            public TItem HullBasedGunsShield;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Engines, rhs.Engines)) return false;
                if (!object.Equals(this.Shields, rhs.Shields)) return false;
                if (!object.Equals(this.Guns, rhs.Guns)) return false;
                if (!object.Equals(this.ShieldBasedGunsEM, rhs.ShieldBasedGunsEM)) return false;
                if (!object.Equals(this.ShieldBasedGunsHull, rhs.ShieldBasedGunsHull)) return false;
                if (!object.Equals(this.ShieldBasedGunsShield, rhs.ShieldBasedGunsShield)) return false;
                if (!object.Equals(this.HullBasedGunsEM, rhs.HullBasedGunsEM)) return false;
                if (!object.Equals(this.HullBasedGunsHull, rhs.HullBasedGunsHull)) return false;
                if (!object.Equals(this.HullBasedGunsShield, rhs.HullBasedGunsShield)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Engines);
                hash.Add(this.Shields);
                hash.Add(this.Guns);
                hash.Add(this.ShieldBasedGunsEM);
                hash.Add(this.ShieldBasedGunsHull);
                hash.Add(this.ShieldBasedGunsShield);
                hash.Add(this.HullBasedGunsEM);
                hash.Add(this.HullBasedGunsHull);
                hash.Add(this.HullBasedGunsShield);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Engines)) return false;
                if (!eval(this.Shields)) return false;
                if (!eval(this.Guns)) return false;
                if (!eval(this.ShieldBasedGunsEM)) return false;
                if (!eval(this.ShieldBasedGunsHull)) return false;
                if (!eval(this.ShieldBasedGunsShield)) return false;
                if (!eval(this.HullBasedGunsEM)) return false;
                if (!eval(this.HullBasedGunsHull)) return false;
                if (!eval(this.HullBasedGunsShield)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Engines)) return true;
                if (eval(this.Shields)) return true;
                if (eval(this.Guns)) return true;
                if (eval(this.ShieldBasedGunsEM)) return true;
                if (eval(this.ShieldBasedGunsHull)) return true;
                if (eval(this.ShieldBasedGunsShield)) return true;
                if (eval(this.HullBasedGunsEM)) return true;
                if (eval(this.HullBasedGunsHull)) return true;
                if (eval(this.HullBasedGunsShield)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStylePowerWeighting.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Engines = eval(this.Engines);
                obj.Shields = eval(this.Shields);
                obj.Guns = eval(this.Guns);
                obj.ShieldBasedGunsEM = eval(this.ShieldBasedGunsEM);
                obj.ShieldBasedGunsHull = eval(this.ShieldBasedGunsHull);
                obj.ShieldBasedGunsShield = eval(this.ShieldBasedGunsShield);
                obj.HullBasedGunsEM = eval(this.HullBasedGunsEM);
                obj.HullBasedGunsHull = eval(this.HullBasedGunsHull);
                obj.HullBasedGunsShield = eval(this.HullBasedGunsShield);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CombatStylePowerWeighting.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CombatStylePowerWeighting.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CombatStylePowerWeighting.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Engines ?? true)
                    {
                        sb.AppendItem(Engines, "Engines");
                    }
                    if (printMask?.Shields ?? true)
                    {
                        sb.AppendItem(Shields, "Shields");
                    }
                    if (printMask?.Guns ?? true)
                    {
                        sb.AppendItem(Guns, "Guns");
                    }
                    if (printMask?.ShieldBasedGunsEM ?? true)
                    {
                        sb.AppendItem(ShieldBasedGunsEM, "ShieldBasedGunsEM");
                    }
                    if (printMask?.ShieldBasedGunsHull ?? true)
                    {
                        sb.AppendItem(ShieldBasedGunsHull, "ShieldBasedGunsHull");
                    }
                    if (printMask?.ShieldBasedGunsShield ?? true)
                    {
                        sb.AppendItem(ShieldBasedGunsShield, "ShieldBasedGunsShield");
                    }
                    if (printMask?.HullBasedGunsEM ?? true)
                    {
                        sb.AppendItem(HullBasedGunsEM, "HullBasedGunsEM");
                    }
                    if (printMask?.HullBasedGunsHull ?? true)
                    {
                        sb.AppendItem(HullBasedGunsHull, "HullBasedGunsHull");
                    }
                    if (printMask?.HullBasedGunsShield ?? true)
                    {
                        sb.AppendItem(HullBasedGunsShield, "HullBasedGunsShield");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Engines;
            public Exception? Shields;
            public Exception? Guns;
            public Exception? ShieldBasedGunsEM;
            public Exception? ShieldBasedGunsHull;
            public Exception? ShieldBasedGunsShield;
            public Exception? HullBasedGunsEM;
            public Exception? HullBasedGunsHull;
            public Exception? HullBasedGunsShield;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStylePowerWeighting_FieldIndex enu = (CombatStylePowerWeighting_FieldIndex)index;
                switch (enu)
                {
                    case CombatStylePowerWeighting_FieldIndex.Engines:
                        return Engines;
                    case CombatStylePowerWeighting_FieldIndex.Shields:
                        return Shields;
                    case CombatStylePowerWeighting_FieldIndex.Guns:
                        return Guns;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsEM:
                        return ShieldBasedGunsEM;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsHull:
                        return ShieldBasedGunsHull;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsShield:
                        return ShieldBasedGunsShield;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsEM:
                        return HullBasedGunsEM;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsHull:
                        return HullBasedGunsHull;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsShield:
                        return HullBasedGunsShield;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStylePowerWeighting_FieldIndex enu = (CombatStylePowerWeighting_FieldIndex)index;
                switch (enu)
                {
                    case CombatStylePowerWeighting_FieldIndex.Engines:
                        this.Engines = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.Shields:
                        this.Shields = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.Guns:
                        this.Guns = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsEM:
                        this.ShieldBasedGunsEM = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsHull:
                        this.ShieldBasedGunsHull = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsShield:
                        this.ShieldBasedGunsShield = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsEM:
                        this.HullBasedGunsEM = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsHull:
                        this.HullBasedGunsHull = ex;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsShield:
                        this.HullBasedGunsShield = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStylePowerWeighting_FieldIndex enu = (CombatStylePowerWeighting_FieldIndex)index;
                switch (enu)
                {
                    case CombatStylePowerWeighting_FieldIndex.Engines:
                        this.Engines = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.Shields:
                        this.Shields = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.Guns:
                        this.Guns = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsEM:
                        this.ShieldBasedGunsEM = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsHull:
                        this.ShieldBasedGunsHull = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsShield:
                        this.ShieldBasedGunsShield = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsEM:
                        this.HullBasedGunsEM = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsHull:
                        this.HullBasedGunsHull = (Exception?)obj;
                        break;
                    case CombatStylePowerWeighting_FieldIndex.HullBasedGunsShield:
                        this.HullBasedGunsShield = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Engines != null) return true;
                if (Shields != null) return true;
                if (Guns != null) return true;
                if (ShieldBasedGunsEM != null) return true;
                if (ShieldBasedGunsHull != null) return true;
                if (ShieldBasedGunsShield != null) return true;
                if (HullBasedGunsEM != null) return true;
                if (HullBasedGunsHull != null) return true;
                if (HullBasedGunsShield != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Engines, "Engines");
                }
                {
                    sb.AppendItem(Shields, "Shields");
                }
                {
                    sb.AppendItem(Guns, "Guns");
                }
                {
                    sb.AppendItem(ShieldBasedGunsEM, "ShieldBasedGunsEM");
                }
                {
                    sb.AppendItem(ShieldBasedGunsHull, "ShieldBasedGunsHull");
                }
                {
                    sb.AppendItem(ShieldBasedGunsShield, "ShieldBasedGunsShield");
                }
                {
                    sb.AppendItem(HullBasedGunsEM, "HullBasedGunsEM");
                }
                {
                    sb.AppendItem(HullBasedGunsHull, "HullBasedGunsHull");
                }
                {
                    sb.AppendItem(HullBasedGunsShield, "HullBasedGunsShield");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Engines = this.Engines.Combine(rhs.Engines);
                ret.Shields = this.Shields.Combine(rhs.Shields);
                ret.Guns = this.Guns.Combine(rhs.Guns);
                ret.ShieldBasedGunsEM = this.ShieldBasedGunsEM.Combine(rhs.ShieldBasedGunsEM);
                ret.ShieldBasedGunsHull = this.ShieldBasedGunsHull.Combine(rhs.ShieldBasedGunsHull);
                ret.ShieldBasedGunsShield = this.ShieldBasedGunsShield.Combine(rhs.ShieldBasedGunsShield);
                ret.HullBasedGunsEM = this.HullBasedGunsEM.Combine(rhs.HullBasedGunsEM);
                ret.HullBasedGunsHull = this.HullBasedGunsHull.Combine(rhs.HullBasedGunsHull);
                ret.HullBasedGunsShield = this.HullBasedGunsShield.Combine(rhs.HullBasedGunsShield);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Engines;
            public bool Shields;
            public bool Guns;
            public bool ShieldBasedGunsEM;
            public bool ShieldBasedGunsHull;
            public bool ShieldBasedGunsShield;
            public bool HullBasedGunsEM;
            public bool HullBasedGunsHull;
            public bool HullBasedGunsShield;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Engines = defaultOn;
                this.Shields = defaultOn;
                this.Guns = defaultOn;
                this.ShieldBasedGunsEM = defaultOn;
                this.ShieldBasedGunsHull = defaultOn;
                this.ShieldBasedGunsShield = defaultOn;
                this.HullBasedGunsEM = defaultOn;
                this.HullBasedGunsHull = defaultOn;
                this.HullBasedGunsShield = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Engines, null));
                ret.Add((Shields, null));
                ret.Add((Guns, null));
                ret.Add((ShieldBasedGunsEM, null));
                ret.Add((ShieldBasedGunsHull, null));
                ret.Add((ShieldBasedGunsShield, null));
                ret.Add((HullBasedGunsEM, null));
                ret.Add((HullBasedGunsHull, null));
                ret.Add((HullBasedGunsShield, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStylePowerWeightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStylePowerWeightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CombatStylePowerWeighting CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CombatStylePowerWeighting();
            ((CombatStylePowerWeightingSetterCommon)((ICombatStylePowerWeightingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStylePowerWeighting item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CombatStylePowerWeightingSetterCommon)((ICombatStylePowerWeightingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStylePowerWeighting GetNew()
        {
            return new CombatStylePowerWeighting();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStylePowerWeighting :
        ICombatStylePowerWeightingGetter,
        ILoquiObjectSetter<ICombatStylePowerWeighting>
    {
        new Single Engines { get; set; }
        new Single Shields { get; set; }
        new Single Guns { get; set; }
        new Single ShieldBasedGunsEM { get; set; }
        new Single ShieldBasedGunsHull { get; set; }
        new Single ShieldBasedGunsShield { get; set; }
        new Single HullBasedGunsEM { get; set; }
        new Single HullBasedGunsHull { get; set; }
        new Single HullBasedGunsShield { get; set; }
    }

    public partial interface ICombatStylePowerWeightingGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICombatStylePowerWeightingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CombatStylePowerWeighting_Registration.Instance;
        Single Engines { get; }
        Single Shields { get; }
        Single Guns { get; }
        Single ShieldBasedGunsEM { get; }
        Single ShieldBasedGunsHull { get; }
        Single ShieldBasedGunsShield { get; }
        Single HullBasedGunsEM { get; }
        Single HullBasedGunsHull { get; }
        Single HullBasedGunsShield { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStylePowerWeightingMixIn
    {
        public static void Clear(this ICombatStylePowerWeighting item)
        {
            ((CombatStylePowerWeightingSetterCommon)((ICombatStylePowerWeightingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStylePowerWeighting.Mask<bool> GetEqualsMask(
            this ICombatStylePowerWeightingGetter item,
            ICombatStylePowerWeightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICombatStylePowerWeightingGetter item,
            string? name = null,
            CombatStylePowerWeighting.Mask<bool>? printMask = null)
        {
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICombatStylePowerWeightingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStylePowerWeighting.Mask<bool>? printMask = null)
        {
            ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStylePowerWeightingGetter item,
            ICombatStylePowerWeightingGetter rhs,
            CombatStylePowerWeighting.TranslationMask? equalsMask = null)
        {
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStylePowerWeighting lhs,
            ICombatStylePowerWeightingGetter rhs)
        {
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStylePowerWeighting lhs,
            ICombatStylePowerWeightingGetter rhs,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStylePowerWeighting lhs,
            ICombatStylePowerWeightingGetter rhs,
            out CombatStylePowerWeighting.ErrorMask errorMask,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStylePowerWeighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStylePowerWeighting lhs,
            ICombatStylePowerWeightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStylePowerWeighting DeepCopy(
            this ICombatStylePowerWeightingGetter item,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            return ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStylePowerWeighting DeepCopy(
            this ICombatStylePowerWeightingGetter item,
            out CombatStylePowerWeighting.ErrorMask errorMask,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            return ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStylePowerWeighting DeepCopy(
            this ICombatStylePowerWeightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStylePowerWeighting item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CombatStylePowerWeightingSetterCommon)((ICombatStylePowerWeightingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CombatStylePowerWeighting_FieldIndex
    {
        Engines = 0,
        Shields = 1,
        Guns = 2,
        ShieldBasedGunsEM = 3,
        ShieldBasedGunsHull = 4,
        ShieldBasedGunsShield = 5,
        HullBasedGunsEM = 6,
        HullBasedGunsHull = 7,
        HullBasedGunsShield = 8,
    }
    #endregion

    #region Registration
    internal partial class CombatStylePowerWeighting_Registration : ILoquiRegistration
    {
        public static readonly CombatStylePowerWeighting_Registration Instance = new CombatStylePowerWeighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CombatStylePowerWeighting.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStylePowerWeighting.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStylePowerWeighting);

        public static readonly Type GetterType = typeof(ICombatStylePowerWeightingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStylePowerWeighting);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CombatStylePowerWeighting";

        public const string Name = "CombatStylePowerWeighting";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(CombatStylePowerWeightingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CombatStylePowerWeightingSetterCommon
    {
        public static readonly CombatStylePowerWeightingSetterCommon Instance = new CombatStylePowerWeightingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStylePowerWeighting item)
        {
            ClearPartial();
            item.Engines = default(Single);
            item.Shields = default(Single);
            item.Guns = default(Single);
            item.ShieldBasedGunsEM = default(Single);
            item.ShieldBasedGunsHull = default(Single);
            item.ShieldBasedGunsShield = default(Single);
            item.HullBasedGunsEM = default(Single);
            item.HullBasedGunsHull = default(Single);
            item.HullBasedGunsShield = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStylePowerWeighting obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStylePowerWeighting item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStylePowerWeightingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CombatStylePowerWeightingCommon
    {
        public static readonly CombatStylePowerWeightingCommon Instance = new CombatStylePowerWeightingCommon();

        public CombatStylePowerWeighting.Mask<bool> GetEqualsMask(
            ICombatStylePowerWeightingGetter item,
            ICombatStylePowerWeightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStylePowerWeighting.Mask<bool>(false);
            ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStylePowerWeightingGetter item,
            ICombatStylePowerWeightingGetter rhs,
            CombatStylePowerWeighting.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Engines = item.Engines.EqualsWithin(rhs.Engines);
            ret.Shields = item.Shields.EqualsWithin(rhs.Shields);
            ret.Guns = item.Guns.EqualsWithin(rhs.Guns);
            ret.ShieldBasedGunsEM = item.ShieldBasedGunsEM.EqualsWithin(rhs.ShieldBasedGunsEM);
            ret.ShieldBasedGunsHull = item.ShieldBasedGunsHull.EqualsWithin(rhs.ShieldBasedGunsHull);
            ret.ShieldBasedGunsShield = item.ShieldBasedGunsShield.EqualsWithin(rhs.ShieldBasedGunsShield);
            ret.HullBasedGunsEM = item.HullBasedGunsEM.EqualsWithin(rhs.HullBasedGunsEM);
            ret.HullBasedGunsHull = item.HullBasedGunsHull.EqualsWithin(rhs.HullBasedGunsHull);
            ret.HullBasedGunsShield = item.HullBasedGunsShield.EqualsWithin(rhs.HullBasedGunsShield);
        }
        
        public string Print(
            ICombatStylePowerWeightingGetter item,
            string? name = null,
            CombatStylePowerWeighting.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICombatStylePowerWeightingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStylePowerWeighting.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CombatStylePowerWeighting =>");
            }
            else
            {
                sb.AppendLine($"{name} (CombatStylePowerWeighting) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICombatStylePowerWeightingGetter item,
            StructuredStringBuilder sb,
            CombatStylePowerWeighting.Mask<bool>? printMask = null)
        {
            if (printMask?.Engines ?? true)
            {
                sb.AppendItem(item.Engines, "Engines");
            }
            if (printMask?.Shields ?? true)
            {
                sb.AppendItem(item.Shields, "Shields");
            }
            if (printMask?.Guns ?? true)
            {
                sb.AppendItem(item.Guns, "Guns");
            }
            if (printMask?.ShieldBasedGunsEM ?? true)
            {
                sb.AppendItem(item.ShieldBasedGunsEM, "ShieldBasedGunsEM");
            }
            if (printMask?.ShieldBasedGunsHull ?? true)
            {
                sb.AppendItem(item.ShieldBasedGunsHull, "ShieldBasedGunsHull");
            }
            if (printMask?.ShieldBasedGunsShield ?? true)
            {
                sb.AppendItem(item.ShieldBasedGunsShield, "ShieldBasedGunsShield");
            }
            if (printMask?.HullBasedGunsEM ?? true)
            {
                sb.AppendItem(item.HullBasedGunsEM, "HullBasedGunsEM");
            }
            if (printMask?.HullBasedGunsHull ?? true)
            {
                sb.AppendItem(item.HullBasedGunsHull, "HullBasedGunsHull");
            }
            if (printMask?.HullBasedGunsShield ?? true)
            {
                sb.AppendItem(item.HullBasedGunsShield, "HullBasedGunsShield");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStylePowerWeightingGetter? lhs,
            ICombatStylePowerWeightingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Engines) ?? true))
            {
                if (!lhs.Engines.EqualsWithin(rhs.Engines)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Shields) ?? true))
            {
                if (!lhs.Shields.EqualsWithin(rhs.Shields)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Guns) ?? true))
            {
                if (!lhs.Guns.EqualsWithin(rhs.Guns)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsEM) ?? true))
            {
                if (!lhs.ShieldBasedGunsEM.EqualsWithin(rhs.ShieldBasedGunsEM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsHull) ?? true))
            {
                if (!lhs.ShieldBasedGunsHull.EqualsWithin(rhs.ShieldBasedGunsHull)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsShield) ?? true))
            {
                if (!lhs.ShieldBasedGunsShield.EqualsWithin(rhs.ShieldBasedGunsShield)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsEM) ?? true))
            {
                if (!lhs.HullBasedGunsEM.EqualsWithin(rhs.HullBasedGunsEM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsHull) ?? true))
            {
                if (!lhs.HullBasedGunsHull.EqualsWithin(rhs.HullBasedGunsHull)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsShield) ?? true))
            {
                if (!lhs.HullBasedGunsShield.EqualsWithin(rhs.HullBasedGunsShield)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICombatStylePowerWeightingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Engines);
            hash.Add(item.Shields);
            hash.Add(item.Guns);
            hash.Add(item.ShieldBasedGunsEM);
            hash.Add(item.ShieldBasedGunsHull);
            hash.Add(item.ShieldBasedGunsShield);
            hash.Add(item.HullBasedGunsEM);
            hash.Add(item.HullBasedGunsHull);
            hash.Add(item.HullBasedGunsShield);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStylePowerWeighting.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICombatStylePowerWeightingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CombatStylePowerWeightingSetterTranslationCommon
    {
        public static readonly CombatStylePowerWeightingSetterTranslationCommon Instance = new CombatStylePowerWeightingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStylePowerWeighting item,
            ICombatStylePowerWeightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Engines) ?? true))
            {
                item.Engines = rhs.Engines;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Shields) ?? true))
            {
                item.Shields = rhs.Shields;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.Guns) ?? true))
            {
                item.Guns = rhs.Guns;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsEM) ?? true))
            {
                item.ShieldBasedGunsEM = rhs.ShieldBasedGunsEM;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsHull) ?? true))
            {
                item.ShieldBasedGunsHull = rhs.ShieldBasedGunsHull;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.ShieldBasedGunsShield) ?? true))
            {
                item.ShieldBasedGunsShield = rhs.ShieldBasedGunsShield;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsEM) ?? true))
            {
                item.HullBasedGunsEM = rhs.HullBasedGunsEM;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsHull) ?? true))
            {
                item.HullBasedGunsHull = rhs.HullBasedGunsHull;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStylePowerWeighting_FieldIndex.HullBasedGunsShield) ?? true))
            {
                item.HullBasedGunsShield = rhs.HullBasedGunsShield;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICombatStylePowerWeighting item,
            ICombatStylePowerWeightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CombatStylePowerWeighting DeepCopy(
            ICombatStylePowerWeightingGetter item,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            CombatStylePowerWeighting ret = (CombatStylePowerWeighting)((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).GetNew();
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStylePowerWeighting DeepCopy(
            ICombatStylePowerWeightingGetter item,
            out CombatStylePowerWeighting.ErrorMask errorMask,
            CombatStylePowerWeighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStylePowerWeighting ret = (CombatStylePowerWeighting)((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).GetNew();
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStylePowerWeighting.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStylePowerWeighting DeepCopy(
            ICombatStylePowerWeightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStylePowerWeighting ret = (CombatStylePowerWeighting)((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)item).CommonInstance()!).GetNew();
            ((CombatStylePowerWeightingSetterTranslationCommon)((ICombatStylePowerWeightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStylePowerWeighting
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStylePowerWeighting_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStylePowerWeighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStylePowerWeightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStylePowerWeightingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStylePowerWeightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStylePowerWeightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStylePowerWeightingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStylePowerWeightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStylePowerWeightingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CombatStylePowerWeightingBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICombatStylePowerWeightingGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Engines);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Shields);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Guns);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ShieldBasedGunsEM);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ShieldBasedGunsHull);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ShieldBasedGunsShield);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HullBasedGunsEM);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HullBasedGunsHull);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HullBasedGunsShield);
        }

        public void Write(
            MutagenWriter writer,
            ICombatStylePowerWeightingGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICombatStylePowerWeightingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CombatStylePowerWeightingBinaryCreateTranslation
    {
        public static readonly CombatStylePowerWeightingBinaryCreateTranslation Instance = new CombatStylePowerWeightingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStylePowerWeighting item,
            MutagenFrame frame)
        {
            item.Engines = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Shields = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Guns = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ShieldBasedGunsEM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ShieldBasedGunsHull = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ShieldBasedGunsShield = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HullBasedGunsEM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HullBasedGunsHull = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HullBasedGunsShield = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CombatStylePowerWeightingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStylePowerWeightingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStylePowerWeightingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CombatStylePowerWeightingBinaryOverlay :
        PluginBinaryOverlay,
        ICombatStylePowerWeightingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStylePowerWeighting_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStylePowerWeighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStylePowerWeightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStylePowerWeightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStylePowerWeightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStylePowerWeightingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStylePowerWeightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStylePowerWeightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStylePowerWeightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Engines => _structData.Slice(0x0, 0x4).Float();
        public Single Shields => _structData.Slice(0x4, 0x4).Float();
        public Single Guns => _structData.Slice(0x8, 0x4).Float();
        public Single ShieldBasedGunsEM => _structData.Slice(0xC, 0x4).Float();
        public Single ShieldBasedGunsHull => _structData.Slice(0x10, 0x4).Float();
        public Single ShieldBasedGunsShield => _structData.Slice(0x14, 0x4).Float();
        public Single HullBasedGunsEM => _structData.Slice(0x18, 0x4).Float();
        public Single HullBasedGunsHull => _structData.Slice(0x1C, 0x4).Float();
        public Single HullBasedGunsShield => _structData.Slice(0x20, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStylePowerWeightingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICombatStylePowerWeightingGetter CombatStylePowerWeightingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x24,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CombatStylePowerWeightingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x24;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICombatStylePowerWeightingGetter CombatStylePowerWeightingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CombatStylePowerWeightingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStylePowerWeightingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStylePowerWeightingGetter rhs) return false;
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStylePowerWeightingGetter? obj)
        {
            return ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

