/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CombatStyleTemplates :
        ICombatStyleTemplates,
        IEquatable<ICombatStyleTemplatesGetter>,
        ILoquiObjectSetter<CombatStyleTemplates>
    {
        #region Ctor
        public CombatStyleTemplates()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OffsensiveDefensiveMults
        private readonly IFormLink<ICombatStyleGetter> _OffsensiveDefensiveMults = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> OffsensiveDefensiveMults
        {
            get => _OffsensiveDefensiveMults;
            set => _OffsensiveDefensiveMults.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.OffsensiveDefensiveMults => this.OffsensiveDefensiveMults;
        #endregion
        #region AvoidThreats
        private readonly IFormLink<ICombatStyleGetter> _AvoidThreats = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> AvoidThreats
        {
            get => _AvoidThreats;
            set => _AvoidThreats.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.AvoidThreats => this.AvoidThreats;
        #endregion
        #region EquipmentScoreMults
        private readonly IFormLink<ICombatStyleGetter> _EquipmentScoreMults = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> EquipmentScoreMults
        {
            get => _EquipmentScoreMults;
            set => _EquipmentScoreMults.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.EquipmentScoreMults => this.EquipmentScoreMults;
        #endregion
        #region Melee
        private readonly IFormLink<ICombatStyleGetter> _Melee = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Melee
        {
            get => _Melee;
            set => _Melee.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Melee => this.Melee;
        #endregion
        #region Ranged
        private readonly IFormLink<ICombatStyleGetter> _Ranged = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Ranged
        {
            get => _Ranged;
            set => _Ranged.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Ranged => this.Ranged;
        #endregion
        #region CloseRange
        private readonly IFormLink<ICombatStyleGetter> _CloseRange = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> CloseRange
        {
            get => _CloseRange;
            set => _CloseRange.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.CloseRange => this.CloseRange;
        #endregion
        #region LongRange
        private readonly IFormLink<ICombatStyleGetter> _LongRange = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> LongRange
        {
            get => _LongRange;
            set => _LongRange.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.LongRange => this.LongRange;
        #endregion
        #region Cover
        private readonly IFormLink<ICombatStyleGetter> _Cover = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Cover
        {
            get => _Cover;
            set => _Cover.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Cover => this.Cover;
        #endregion
        #region Flight
        private readonly IFormLink<ICombatStyleGetter> _Flight = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Flight
        {
            get => _Flight;
            set => _Flight.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Flight => this.Flight;
        #endregion
        #region Tunnel
        private readonly IFormLink<ICombatStyleGetter> _Tunnel = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Tunnel
        {
            get => _Tunnel;
            set => _Tunnel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Tunnel => this.Tunnel;
        #endregion
        #region SpaceGeneral
        private readonly IFormLink<ICombatStyleGetter> _SpaceGeneral = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpaceGeneral
        {
            get => _SpaceGeneral;
            set => _SpaceGeneral.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpaceGeneral => this.SpaceGeneral;
        #endregion
        #region SpacePower
        private readonly IFormLink<ICombatStyleGetter> _SpacePower = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpacePower
        {
            get => _SpacePower;
            set => _SpacePower.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpacePower => this.SpacePower;
        #endregion
        #region SpaceRepair
        private readonly IFormLink<ICombatStyleGetter> _SpaceRepair = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpaceRepair
        {
            get => _SpaceRepair;
            set => _SpaceRepair.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpaceRepair => this.SpaceRepair;
        #endregion
        #region SpaceApproaching
        private readonly IFormLink<ICombatStyleGetter> _SpaceApproaching = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpaceApproaching
        {
            get => _SpaceApproaching;
            set => _SpaceApproaching.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpaceApproaching => this.SpaceApproaching;
        #endregion
        #region SpaceDetection
        private readonly IFormLink<ICombatStyleGetter> _SpaceDetection = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpaceDetection
        {
            get => _SpaceDetection;
            set => _SpaceDetection.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpaceDetection => this.SpaceDetection;
        #endregion
        #region Misc
        private readonly IFormLink<ICombatStyleGetter> _Misc = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> Misc
        {
            get => _Misc;
            set => _Misc.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.Misc => this.Misc;
        #endregion
        #region SpaceManeuverTypes
        private readonly IFormLink<ICombatStyleGetter> _SpaceManeuverTypes = new FormLink<ICombatStyleGetter>();
        public IFormLink<ICombatStyleGetter> SpaceManeuverTypes
        {
            get => _SpaceManeuverTypes;
            set => _SpaceManeuverTypes.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICombatStyleGetter> ICombatStyleTemplatesGetter.SpaceManeuverTypes => this.SpaceManeuverTypes;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleTemplatesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleTemplatesGetter rhs) return false;
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleTemplatesGetter? obj)
        {
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.OffsensiveDefensiveMults = initialValue;
                this.AvoidThreats = initialValue;
                this.EquipmentScoreMults = initialValue;
                this.Melee = initialValue;
                this.Ranged = initialValue;
                this.CloseRange = initialValue;
                this.LongRange = initialValue;
                this.Cover = initialValue;
                this.Flight = initialValue;
                this.Tunnel = initialValue;
                this.SpaceGeneral = initialValue;
                this.SpacePower = initialValue;
                this.SpaceRepair = initialValue;
                this.SpaceApproaching = initialValue;
                this.SpaceDetection = initialValue;
                this.Misc = initialValue;
                this.SpaceManeuverTypes = initialValue;
            }

            public Mask(
                TItem OffsensiveDefensiveMults,
                TItem AvoidThreats,
                TItem EquipmentScoreMults,
                TItem Melee,
                TItem Ranged,
                TItem CloseRange,
                TItem LongRange,
                TItem Cover,
                TItem Flight,
                TItem Tunnel,
                TItem SpaceGeneral,
                TItem SpacePower,
                TItem SpaceRepair,
                TItem SpaceApproaching,
                TItem SpaceDetection,
                TItem Misc,
                TItem SpaceManeuverTypes)
            {
                this.OffsensiveDefensiveMults = OffsensiveDefensiveMults;
                this.AvoidThreats = AvoidThreats;
                this.EquipmentScoreMults = EquipmentScoreMults;
                this.Melee = Melee;
                this.Ranged = Ranged;
                this.CloseRange = CloseRange;
                this.LongRange = LongRange;
                this.Cover = Cover;
                this.Flight = Flight;
                this.Tunnel = Tunnel;
                this.SpaceGeneral = SpaceGeneral;
                this.SpacePower = SpacePower;
                this.SpaceRepair = SpaceRepair;
                this.SpaceApproaching = SpaceApproaching;
                this.SpaceDetection = SpaceDetection;
                this.Misc = Misc;
                this.SpaceManeuverTypes = SpaceManeuverTypes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem OffsensiveDefensiveMults;
            public TItem AvoidThreats;
            public TItem EquipmentScoreMults;
            public TItem Melee;
            public TItem Ranged;
            public TItem CloseRange;
            public TItem LongRange;
            public TItem Cover;
            public TItem Flight;
            public TItem Tunnel;
            public TItem SpaceGeneral;
            public TItem SpacePower;
            public TItem SpaceRepair;
            public TItem SpaceApproaching;
            public TItem SpaceDetection;
            public TItem Misc;
            public TItem SpaceManeuverTypes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.OffsensiveDefensiveMults, rhs.OffsensiveDefensiveMults)) return false;
                if (!object.Equals(this.AvoidThreats, rhs.AvoidThreats)) return false;
                if (!object.Equals(this.EquipmentScoreMults, rhs.EquipmentScoreMults)) return false;
                if (!object.Equals(this.Melee, rhs.Melee)) return false;
                if (!object.Equals(this.Ranged, rhs.Ranged)) return false;
                if (!object.Equals(this.CloseRange, rhs.CloseRange)) return false;
                if (!object.Equals(this.LongRange, rhs.LongRange)) return false;
                if (!object.Equals(this.Cover, rhs.Cover)) return false;
                if (!object.Equals(this.Flight, rhs.Flight)) return false;
                if (!object.Equals(this.Tunnel, rhs.Tunnel)) return false;
                if (!object.Equals(this.SpaceGeneral, rhs.SpaceGeneral)) return false;
                if (!object.Equals(this.SpacePower, rhs.SpacePower)) return false;
                if (!object.Equals(this.SpaceRepair, rhs.SpaceRepair)) return false;
                if (!object.Equals(this.SpaceApproaching, rhs.SpaceApproaching)) return false;
                if (!object.Equals(this.SpaceDetection, rhs.SpaceDetection)) return false;
                if (!object.Equals(this.Misc, rhs.Misc)) return false;
                if (!object.Equals(this.SpaceManeuverTypes, rhs.SpaceManeuverTypes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.OffsensiveDefensiveMults);
                hash.Add(this.AvoidThreats);
                hash.Add(this.EquipmentScoreMults);
                hash.Add(this.Melee);
                hash.Add(this.Ranged);
                hash.Add(this.CloseRange);
                hash.Add(this.LongRange);
                hash.Add(this.Cover);
                hash.Add(this.Flight);
                hash.Add(this.Tunnel);
                hash.Add(this.SpaceGeneral);
                hash.Add(this.SpacePower);
                hash.Add(this.SpaceRepair);
                hash.Add(this.SpaceApproaching);
                hash.Add(this.SpaceDetection);
                hash.Add(this.Misc);
                hash.Add(this.SpaceManeuverTypes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.OffsensiveDefensiveMults)) return false;
                if (!eval(this.AvoidThreats)) return false;
                if (!eval(this.EquipmentScoreMults)) return false;
                if (!eval(this.Melee)) return false;
                if (!eval(this.Ranged)) return false;
                if (!eval(this.CloseRange)) return false;
                if (!eval(this.LongRange)) return false;
                if (!eval(this.Cover)) return false;
                if (!eval(this.Flight)) return false;
                if (!eval(this.Tunnel)) return false;
                if (!eval(this.SpaceGeneral)) return false;
                if (!eval(this.SpacePower)) return false;
                if (!eval(this.SpaceRepair)) return false;
                if (!eval(this.SpaceApproaching)) return false;
                if (!eval(this.SpaceDetection)) return false;
                if (!eval(this.Misc)) return false;
                if (!eval(this.SpaceManeuverTypes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.OffsensiveDefensiveMults)) return true;
                if (eval(this.AvoidThreats)) return true;
                if (eval(this.EquipmentScoreMults)) return true;
                if (eval(this.Melee)) return true;
                if (eval(this.Ranged)) return true;
                if (eval(this.CloseRange)) return true;
                if (eval(this.LongRange)) return true;
                if (eval(this.Cover)) return true;
                if (eval(this.Flight)) return true;
                if (eval(this.Tunnel)) return true;
                if (eval(this.SpaceGeneral)) return true;
                if (eval(this.SpacePower)) return true;
                if (eval(this.SpaceRepair)) return true;
                if (eval(this.SpaceApproaching)) return true;
                if (eval(this.SpaceDetection)) return true;
                if (eval(this.Misc)) return true;
                if (eval(this.SpaceManeuverTypes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleTemplates.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.OffsensiveDefensiveMults = eval(this.OffsensiveDefensiveMults);
                obj.AvoidThreats = eval(this.AvoidThreats);
                obj.EquipmentScoreMults = eval(this.EquipmentScoreMults);
                obj.Melee = eval(this.Melee);
                obj.Ranged = eval(this.Ranged);
                obj.CloseRange = eval(this.CloseRange);
                obj.LongRange = eval(this.LongRange);
                obj.Cover = eval(this.Cover);
                obj.Flight = eval(this.Flight);
                obj.Tunnel = eval(this.Tunnel);
                obj.SpaceGeneral = eval(this.SpaceGeneral);
                obj.SpacePower = eval(this.SpacePower);
                obj.SpaceRepair = eval(this.SpaceRepair);
                obj.SpaceApproaching = eval(this.SpaceApproaching);
                obj.SpaceDetection = eval(this.SpaceDetection);
                obj.Misc = eval(this.Misc);
                obj.SpaceManeuverTypes = eval(this.SpaceManeuverTypes);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CombatStyleTemplates.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CombatStyleTemplates.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CombatStyleTemplates.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.OffsensiveDefensiveMults ?? true)
                    {
                        sb.AppendItem(OffsensiveDefensiveMults, "OffsensiveDefensiveMults");
                    }
                    if (printMask?.AvoidThreats ?? true)
                    {
                        sb.AppendItem(AvoidThreats, "AvoidThreats");
                    }
                    if (printMask?.EquipmentScoreMults ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMults, "EquipmentScoreMults");
                    }
                    if (printMask?.Melee ?? true)
                    {
                        sb.AppendItem(Melee, "Melee");
                    }
                    if (printMask?.Ranged ?? true)
                    {
                        sb.AppendItem(Ranged, "Ranged");
                    }
                    if (printMask?.CloseRange ?? true)
                    {
                        sb.AppendItem(CloseRange, "CloseRange");
                    }
                    if (printMask?.LongRange ?? true)
                    {
                        sb.AppendItem(LongRange, "LongRange");
                    }
                    if (printMask?.Cover ?? true)
                    {
                        sb.AppendItem(Cover, "Cover");
                    }
                    if (printMask?.Flight ?? true)
                    {
                        sb.AppendItem(Flight, "Flight");
                    }
                    if (printMask?.Tunnel ?? true)
                    {
                        sb.AppendItem(Tunnel, "Tunnel");
                    }
                    if (printMask?.SpaceGeneral ?? true)
                    {
                        sb.AppendItem(SpaceGeneral, "SpaceGeneral");
                    }
                    if (printMask?.SpacePower ?? true)
                    {
                        sb.AppendItem(SpacePower, "SpacePower");
                    }
                    if (printMask?.SpaceRepair ?? true)
                    {
                        sb.AppendItem(SpaceRepair, "SpaceRepair");
                    }
                    if (printMask?.SpaceApproaching ?? true)
                    {
                        sb.AppendItem(SpaceApproaching, "SpaceApproaching");
                    }
                    if (printMask?.SpaceDetection ?? true)
                    {
                        sb.AppendItem(SpaceDetection, "SpaceDetection");
                    }
                    if (printMask?.Misc ?? true)
                    {
                        sb.AppendItem(Misc, "Misc");
                    }
                    if (printMask?.SpaceManeuverTypes ?? true)
                    {
                        sb.AppendItem(SpaceManeuverTypes, "SpaceManeuverTypes");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? OffsensiveDefensiveMults;
            public Exception? AvoidThreats;
            public Exception? EquipmentScoreMults;
            public Exception? Melee;
            public Exception? Ranged;
            public Exception? CloseRange;
            public Exception? LongRange;
            public Exception? Cover;
            public Exception? Flight;
            public Exception? Tunnel;
            public Exception? SpaceGeneral;
            public Exception? SpacePower;
            public Exception? SpaceRepair;
            public Exception? SpaceApproaching;
            public Exception? SpaceDetection;
            public Exception? Misc;
            public Exception? SpaceManeuverTypes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleTemplates_FieldIndex enu = (CombatStyleTemplates_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleTemplates_FieldIndex.OffsensiveDefensiveMults:
                        return OffsensiveDefensiveMults;
                    case CombatStyleTemplates_FieldIndex.AvoidThreats:
                        return AvoidThreats;
                    case CombatStyleTemplates_FieldIndex.EquipmentScoreMults:
                        return EquipmentScoreMults;
                    case CombatStyleTemplates_FieldIndex.Melee:
                        return Melee;
                    case CombatStyleTemplates_FieldIndex.Ranged:
                        return Ranged;
                    case CombatStyleTemplates_FieldIndex.CloseRange:
                        return CloseRange;
                    case CombatStyleTemplates_FieldIndex.LongRange:
                        return LongRange;
                    case CombatStyleTemplates_FieldIndex.Cover:
                        return Cover;
                    case CombatStyleTemplates_FieldIndex.Flight:
                        return Flight;
                    case CombatStyleTemplates_FieldIndex.Tunnel:
                        return Tunnel;
                    case CombatStyleTemplates_FieldIndex.SpaceGeneral:
                        return SpaceGeneral;
                    case CombatStyleTemplates_FieldIndex.SpacePower:
                        return SpacePower;
                    case CombatStyleTemplates_FieldIndex.SpaceRepair:
                        return SpaceRepair;
                    case CombatStyleTemplates_FieldIndex.SpaceApproaching:
                        return SpaceApproaching;
                    case CombatStyleTemplates_FieldIndex.SpaceDetection:
                        return SpaceDetection;
                    case CombatStyleTemplates_FieldIndex.Misc:
                        return Misc;
                    case CombatStyleTemplates_FieldIndex.SpaceManeuverTypes:
                        return SpaceManeuverTypes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleTemplates_FieldIndex enu = (CombatStyleTemplates_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleTemplates_FieldIndex.OffsensiveDefensiveMults:
                        this.OffsensiveDefensiveMults = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.AvoidThreats:
                        this.AvoidThreats = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.EquipmentScoreMults:
                        this.EquipmentScoreMults = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Melee:
                        this.Melee = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Ranged:
                        this.Ranged = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.CloseRange:
                        this.CloseRange = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.LongRange:
                        this.LongRange = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Cover:
                        this.Cover = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Flight:
                        this.Flight = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Tunnel:
                        this.Tunnel = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceGeneral:
                        this.SpaceGeneral = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpacePower:
                        this.SpacePower = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceRepair:
                        this.SpaceRepair = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceApproaching:
                        this.SpaceApproaching = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceDetection:
                        this.SpaceDetection = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.Misc:
                        this.Misc = ex;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceManeuverTypes:
                        this.SpaceManeuverTypes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleTemplates_FieldIndex enu = (CombatStyleTemplates_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleTemplates_FieldIndex.OffsensiveDefensiveMults:
                        this.OffsensiveDefensiveMults = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.AvoidThreats:
                        this.AvoidThreats = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.EquipmentScoreMults:
                        this.EquipmentScoreMults = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Melee:
                        this.Melee = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Ranged:
                        this.Ranged = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.CloseRange:
                        this.CloseRange = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.LongRange:
                        this.LongRange = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Cover:
                        this.Cover = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Flight:
                        this.Flight = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Tunnel:
                        this.Tunnel = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceGeneral:
                        this.SpaceGeneral = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpacePower:
                        this.SpacePower = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceRepair:
                        this.SpaceRepair = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceApproaching:
                        this.SpaceApproaching = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceDetection:
                        this.SpaceDetection = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.Misc:
                        this.Misc = (Exception?)obj;
                        break;
                    case CombatStyleTemplates_FieldIndex.SpaceManeuverTypes:
                        this.SpaceManeuverTypes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (OffsensiveDefensiveMults != null) return true;
                if (AvoidThreats != null) return true;
                if (EquipmentScoreMults != null) return true;
                if (Melee != null) return true;
                if (Ranged != null) return true;
                if (CloseRange != null) return true;
                if (LongRange != null) return true;
                if (Cover != null) return true;
                if (Flight != null) return true;
                if (Tunnel != null) return true;
                if (SpaceGeneral != null) return true;
                if (SpacePower != null) return true;
                if (SpaceRepair != null) return true;
                if (SpaceApproaching != null) return true;
                if (SpaceDetection != null) return true;
                if (Misc != null) return true;
                if (SpaceManeuverTypes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(OffsensiveDefensiveMults, "OffsensiveDefensiveMults");
                }
                {
                    sb.AppendItem(AvoidThreats, "AvoidThreats");
                }
                {
                    sb.AppendItem(EquipmentScoreMults, "EquipmentScoreMults");
                }
                {
                    sb.AppendItem(Melee, "Melee");
                }
                {
                    sb.AppendItem(Ranged, "Ranged");
                }
                {
                    sb.AppendItem(CloseRange, "CloseRange");
                }
                {
                    sb.AppendItem(LongRange, "LongRange");
                }
                {
                    sb.AppendItem(Cover, "Cover");
                }
                {
                    sb.AppendItem(Flight, "Flight");
                }
                {
                    sb.AppendItem(Tunnel, "Tunnel");
                }
                {
                    sb.AppendItem(SpaceGeneral, "SpaceGeneral");
                }
                {
                    sb.AppendItem(SpacePower, "SpacePower");
                }
                {
                    sb.AppendItem(SpaceRepair, "SpaceRepair");
                }
                {
                    sb.AppendItem(SpaceApproaching, "SpaceApproaching");
                }
                {
                    sb.AppendItem(SpaceDetection, "SpaceDetection");
                }
                {
                    sb.AppendItem(Misc, "Misc");
                }
                {
                    sb.AppendItem(SpaceManeuverTypes, "SpaceManeuverTypes");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.OffsensiveDefensiveMults = this.OffsensiveDefensiveMults.Combine(rhs.OffsensiveDefensiveMults);
                ret.AvoidThreats = this.AvoidThreats.Combine(rhs.AvoidThreats);
                ret.EquipmentScoreMults = this.EquipmentScoreMults.Combine(rhs.EquipmentScoreMults);
                ret.Melee = this.Melee.Combine(rhs.Melee);
                ret.Ranged = this.Ranged.Combine(rhs.Ranged);
                ret.CloseRange = this.CloseRange.Combine(rhs.CloseRange);
                ret.LongRange = this.LongRange.Combine(rhs.LongRange);
                ret.Cover = this.Cover.Combine(rhs.Cover);
                ret.Flight = this.Flight.Combine(rhs.Flight);
                ret.Tunnel = this.Tunnel.Combine(rhs.Tunnel);
                ret.SpaceGeneral = this.SpaceGeneral.Combine(rhs.SpaceGeneral);
                ret.SpacePower = this.SpacePower.Combine(rhs.SpacePower);
                ret.SpaceRepair = this.SpaceRepair.Combine(rhs.SpaceRepair);
                ret.SpaceApproaching = this.SpaceApproaching.Combine(rhs.SpaceApproaching);
                ret.SpaceDetection = this.SpaceDetection.Combine(rhs.SpaceDetection);
                ret.Misc = this.Misc.Combine(rhs.Misc);
                ret.SpaceManeuverTypes = this.SpaceManeuverTypes.Combine(rhs.SpaceManeuverTypes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool OffsensiveDefensiveMults;
            public bool AvoidThreats;
            public bool EquipmentScoreMults;
            public bool Melee;
            public bool Ranged;
            public bool CloseRange;
            public bool LongRange;
            public bool Cover;
            public bool Flight;
            public bool Tunnel;
            public bool SpaceGeneral;
            public bool SpacePower;
            public bool SpaceRepair;
            public bool SpaceApproaching;
            public bool SpaceDetection;
            public bool Misc;
            public bool SpaceManeuverTypes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.OffsensiveDefensiveMults = defaultOn;
                this.AvoidThreats = defaultOn;
                this.EquipmentScoreMults = defaultOn;
                this.Melee = defaultOn;
                this.Ranged = defaultOn;
                this.CloseRange = defaultOn;
                this.LongRange = defaultOn;
                this.Cover = defaultOn;
                this.Flight = defaultOn;
                this.Tunnel = defaultOn;
                this.SpaceGeneral = defaultOn;
                this.SpacePower = defaultOn;
                this.SpaceRepair = defaultOn;
                this.SpaceApproaching = defaultOn;
                this.SpaceDetection = defaultOn;
                this.Misc = defaultOn;
                this.SpaceManeuverTypes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((OffsensiveDefensiveMults, null));
                ret.Add((AvoidThreats, null));
                ret.Add((EquipmentScoreMults, null));
                ret.Add((Melee, null));
                ret.Add((Ranged, null));
                ret.Add((CloseRange, null));
                ret.Add((LongRange, null));
                ret.Add((Cover, null));
                ret.Add((Flight, null));
                ret.Add((Tunnel, null));
                ret.Add((SpaceGeneral, null));
                ret.Add((SpacePower, null));
                ret.Add((SpaceRepair, null));
                ret.Add((SpaceApproaching, null));
                ret.Add((SpaceDetection, null));
                ret.Add((Misc, null));
                ret.Add((SpaceManeuverTypes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CombatStyleTemplatesCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CombatStyleTemplatesSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleTemplatesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleTemplatesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CombatStyleTemplates CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CombatStyleTemplates();
            ((CombatStyleTemplatesSetterCommon)((ICombatStyleTemplatesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleTemplates item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CombatStyleTemplatesSetterCommon)((ICombatStyleTemplatesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleTemplates GetNew()
        {
            return new CombatStyleTemplates();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleTemplates :
        ICombatStyleTemplatesGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICombatStyleTemplates>
    {
        new IFormLink<ICombatStyleGetter> OffsensiveDefensiveMults { get; set; }
        new IFormLink<ICombatStyleGetter> AvoidThreats { get; set; }
        new IFormLink<ICombatStyleGetter> EquipmentScoreMults { get; set; }
        new IFormLink<ICombatStyleGetter> Melee { get; set; }
        new IFormLink<ICombatStyleGetter> Ranged { get; set; }
        new IFormLink<ICombatStyleGetter> CloseRange { get; set; }
        new IFormLink<ICombatStyleGetter> LongRange { get; set; }
        new IFormLink<ICombatStyleGetter> Cover { get; set; }
        new IFormLink<ICombatStyleGetter> Flight { get; set; }
        new IFormLink<ICombatStyleGetter> Tunnel { get; set; }
        new IFormLink<ICombatStyleGetter> SpaceGeneral { get; set; }
        new IFormLink<ICombatStyleGetter> SpacePower { get; set; }
        new IFormLink<ICombatStyleGetter> SpaceRepair { get; set; }
        new IFormLink<ICombatStyleGetter> SpaceApproaching { get; set; }
        new IFormLink<ICombatStyleGetter> SpaceDetection { get; set; }
        new IFormLink<ICombatStyleGetter> Misc { get; set; }
        new IFormLink<ICombatStyleGetter> SpaceManeuverTypes { get; set; }
    }

    public partial interface ICombatStyleTemplatesGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICombatStyleTemplatesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CombatStyleTemplates_Registration.Instance;
        IFormLinkGetter<ICombatStyleGetter> OffsensiveDefensiveMults { get; }
        IFormLinkGetter<ICombatStyleGetter> AvoidThreats { get; }
        IFormLinkGetter<ICombatStyleGetter> EquipmentScoreMults { get; }
        IFormLinkGetter<ICombatStyleGetter> Melee { get; }
        IFormLinkGetter<ICombatStyleGetter> Ranged { get; }
        IFormLinkGetter<ICombatStyleGetter> CloseRange { get; }
        IFormLinkGetter<ICombatStyleGetter> LongRange { get; }
        IFormLinkGetter<ICombatStyleGetter> Cover { get; }
        IFormLinkGetter<ICombatStyleGetter> Flight { get; }
        IFormLinkGetter<ICombatStyleGetter> Tunnel { get; }
        IFormLinkGetter<ICombatStyleGetter> SpaceGeneral { get; }
        IFormLinkGetter<ICombatStyleGetter> SpacePower { get; }
        IFormLinkGetter<ICombatStyleGetter> SpaceRepair { get; }
        IFormLinkGetter<ICombatStyleGetter> SpaceApproaching { get; }
        IFormLinkGetter<ICombatStyleGetter> SpaceDetection { get; }
        IFormLinkGetter<ICombatStyleGetter> Misc { get; }
        IFormLinkGetter<ICombatStyleGetter> SpaceManeuverTypes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleTemplatesMixIn
    {
        public static void Clear(this ICombatStyleTemplates item)
        {
            ((CombatStyleTemplatesSetterCommon)((ICombatStyleTemplatesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleTemplates.Mask<bool> GetEqualsMask(
            this ICombatStyleTemplatesGetter item,
            ICombatStyleTemplatesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICombatStyleTemplatesGetter item,
            string? name = null,
            CombatStyleTemplates.Mask<bool>? printMask = null)
        {
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICombatStyleTemplatesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyleTemplates.Mask<bool>? printMask = null)
        {
            ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleTemplatesGetter item,
            ICombatStyleTemplatesGetter rhs,
            CombatStyleTemplates.TranslationMask? equalsMask = null)
        {
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleTemplates lhs,
            ICombatStyleTemplatesGetter rhs)
        {
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleTemplates lhs,
            ICombatStyleTemplatesGetter rhs,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleTemplates lhs,
            ICombatStyleTemplatesGetter rhs,
            out CombatStyleTemplates.ErrorMask errorMask,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyleTemplates.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleTemplates lhs,
            ICombatStyleTemplatesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyleTemplates DeepCopy(
            this ICombatStyleTemplatesGetter item,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            return ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleTemplates DeepCopy(
            this ICombatStyleTemplatesGetter item,
            out CombatStyleTemplates.ErrorMask errorMask,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            return ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleTemplates DeepCopy(
            this ICombatStyleTemplatesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleTemplates item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CombatStyleTemplatesSetterCommon)((ICombatStyleTemplatesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CombatStyleTemplates_FieldIndex
    {
        OffsensiveDefensiveMults = 0,
        AvoidThreats = 1,
        EquipmentScoreMults = 2,
        Melee = 3,
        Ranged = 4,
        CloseRange = 5,
        LongRange = 6,
        Cover = 7,
        Flight = 8,
        Tunnel = 9,
        SpaceGeneral = 10,
        SpacePower = 11,
        SpaceRepair = 12,
        SpaceApproaching = 13,
        SpaceDetection = 14,
        Misc = 15,
        SpaceManeuverTypes = 16,
    }
    #endregion

    #region Registration
    internal partial class CombatStyleTemplates_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleTemplates_Registration Instance = new CombatStyleTemplates_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(CombatStyleTemplates.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleTemplates.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleTemplates);

        public static readonly Type GetterType = typeof(ICombatStyleTemplatesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleTemplates);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CombatStyleTemplates";

        public const string Name = "CombatStyleTemplates";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.UNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.UNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleTemplatesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CombatStyleTemplatesSetterCommon
    {
        public static readonly CombatStyleTemplatesSetterCommon Instance = new CombatStyleTemplatesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleTemplates item)
        {
            ClearPartial();
            item.OffsensiveDefensiveMults.Clear();
            item.AvoidThreats.Clear();
            item.EquipmentScoreMults.Clear();
            item.Melee.Clear();
            item.Ranged.Clear();
            item.CloseRange.Clear();
            item.LongRange.Clear();
            item.Cover.Clear();
            item.Flight.Clear();
            item.Tunnel.Clear();
            item.SpaceGeneral.Clear();
            item.SpacePower.Clear();
            item.SpaceRepair.Clear();
            item.SpaceApproaching.Clear();
            item.SpaceDetection.Clear();
            item.Misc.Clear();
            item.SpaceManeuverTypes.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyleTemplates obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.OffsensiveDefensiveMults.Relink(mapping);
            obj.AvoidThreats.Relink(mapping);
            obj.EquipmentScoreMults.Relink(mapping);
            obj.Melee.Relink(mapping);
            obj.Ranged.Relink(mapping);
            obj.CloseRange.Relink(mapping);
            obj.LongRange.Relink(mapping);
            obj.Cover.Relink(mapping);
            obj.Flight.Relink(mapping);
            obj.Tunnel.Relink(mapping);
            obj.SpaceGeneral.Relink(mapping);
            obj.SpacePower.Relink(mapping);
            obj.SpaceRepair.Relink(mapping);
            obj.SpaceApproaching.Relink(mapping);
            obj.SpaceDetection.Relink(mapping);
            obj.Misc.Relink(mapping);
            obj.SpaceManeuverTypes.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleTemplates item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.UNAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStyleTemplatesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CombatStyleTemplatesCommon
    {
        public static readonly CombatStyleTemplatesCommon Instance = new CombatStyleTemplatesCommon();

        public CombatStyleTemplates.Mask<bool> GetEqualsMask(
            ICombatStyleTemplatesGetter item,
            ICombatStyleTemplatesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleTemplates.Mask<bool>(false);
            ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleTemplatesGetter item,
            ICombatStyleTemplatesGetter rhs,
            CombatStyleTemplates.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.OffsensiveDefensiveMults = item.OffsensiveDefensiveMults.Equals(rhs.OffsensiveDefensiveMults);
            ret.AvoidThreats = item.AvoidThreats.Equals(rhs.AvoidThreats);
            ret.EquipmentScoreMults = item.EquipmentScoreMults.Equals(rhs.EquipmentScoreMults);
            ret.Melee = item.Melee.Equals(rhs.Melee);
            ret.Ranged = item.Ranged.Equals(rhs.Ranged);
            ret.CloseRange = item.CloseRange.Equals(rhs.CloseRange);
            ret.LongRange = item.LongRange.Equals(rhs.LongRange);
            ret.Cover = item.Cover.Equals(rhs.Cover);
            ret.Flight = item.Flight.Equals(rhs.Flight);
            ret.Tunnel = item.Tunnel.Equals(rhs.Tunnel);
            ret.SpaceGeneral = item.SpaceGeneral.Equals(rhs.SpaceGeneral);
            ret.SpacePower = item.SpacePower.Equals(rhs.SpacePower);
            ret.SpaceRepair = item.SpaceRepair.Equals(rhs.SpaceRepair);
            ret.SpaceApproaching = item.SpaceApproaching.Equals(rhs.SpaceApproaching);
            ret.SpaceDetection = item.SpaceDetection.Equals(rhs.SpaceDetection);
            ret.Misc = item.Misc.Equals(rhs.Misc);
            ret.SpaceManeuverTypes = item.SpaceManeuverTypes.Equals(rhs.SpaceManeuverTypes);
        }
        
        public string Print(
            ICombatStyleTemplatesGetter item,
            string? name = null,
            CombatStyleTemplates.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICombatStyleTemplatesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyleTemplates.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CombatStyleTemplates =>");
            }
            else
            {
                sb.AppendLine($"{name} (CombatStyleTemplates) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICombatStyleTemplatesGetter item,
            StructuredStringBuilder sb,
            CombatStyleTemplates.Mask<bool>? printMask = null)
        {
            if (printMask?.OffsensiveDefensiveMults ?? true)
            {
                sb.AppendItem(item.OffsensiveDefensiveMults.FormKey, "OffsensiveDefensiveMults");
            }
            if (printMask?.AvoidThreats ?? true)
            {
                sb.AppendItem(item.AvoidThreats.FormKey, "AvoidThreats");
            }
            if (printMask?.EquipmentScoreMults ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMults.FormKey, "EquipmentScoreMults");
            }
            if (printMask?.Melee ?? true)
            {
                sb.AppendItem(item.Melee.FormKey, "Melee");
            }
            if (printMask?.Ranged ?? true)
            {
                sb.AppendItem(item.Ranged.FormKey, "Ranged");
            }
            if (printMask?.CloseRange ?? true)
            {
                sb.AppendItem(item.CloseRange.FormKey, "CloseRange");
            }
            if (printMask?.LongRange ?? true)
            {
                sb.AppendItem(item.LongRange.FormKey, "LongRange");
            }
            if (printMask?.Cover ?? true)
            {
                sb.AppendItem(item.Cover.FormKey, "Cover");
            }
            if (printMask?.Flight ?? true)
            {
                sb.AppendItem(item.Flight.FormKey, "Flight");
            }
            if (printMask?.Tunnel ?? true)
            {
                sb.AppendItem(item.Tunnel.FormKey, "Tunnel");
            }
            if (printMask?.SpaceGeneral ?? true)
            {
                sb.AppendItem(item.SpaceGeneral.FormKey, "SpaceGeneral");
            }
            if (printMask?.SpacePower ?? true)
            {
                sb.AppendItem(item.SpacePower.FormKey, "SpacePower");
            }
            if (printMask?.SpaceRepair ?? true)
            {
                sb.AppendItem(item.SpaceRepair.FormKey, "SpaceRepair");
            }
            if (printMask?.SpaceApproaching ?? true)
            {
                sb.AppendItem(item.SpaceApproaching.FormKey, "SpaceApproaching");
            }
            if (printMask?.SpaceDetection ?? true)
            {
                sb.AppendItem(item.SpaceDetection.FormKey, "SpaceDetection");
            }
            if (printMask?.Misc ?? true)
            {
                sb.AppendItem(item.Misc.FormKey, "Misc");
            }
            if (printMask?.SpaceManeuverTypes ?? true)
            {
                sb.AppendItem(item.SpaceManeuverTypes.FormKey, "SpaceManeuverTypes");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleTemplatesGetter? lhs,
            ICombatStyleTemplatesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.OffsensiveDefensiveMults) ?? true))
            {
                if (!lhs.OffsensiveDefensiveMults.Equals(rhs.OffsensiveDefensiveMults)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.AvoidThreats) ?? true))
            {
                if (!lhs.AvoidThreats.Equals(rhs.AvoidThreats)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.EquipmentScoreMults) ?? true))
            {
                if (!lhs.EquipmentScoreMults.Equals(rhs.EquipmentScoreMults)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Melee) ?? true))
            {
                if (!lhs.Melee.Equals(rhs.Melee)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Ranged) ?? true))
            {
                if (!lhs.Ranged.Equals(rhs.Ranged)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.CloseRange) ?? true))
            {
                if (!lhs.CloseRange.Equals(rhs.CloseRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.LongRange) ?? true))
            {
                if (!lhs.LongRange.Equals(rhs.LongRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Cover) ?? true))
            {
                if (!lhs.Cover.Equals(rhs.Cover)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Flight) ?? true))
            {
                if (!lhs.Flight.Equals(rhs.Flight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Tunnel) ?? true))
            {
                if (!lhs.Tunnel.Equals(rhs.Tunnel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceGeneral) ?? true))
            {
                if (!lhs.SpaceGeneral.Equals(rhs.SpaceGeneral)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpacePower) ?? true))
            {
                if (!lhs.SpacePower.Equals(rhs.SpacePower)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceRepair) ?? true))
            {
                if (!lhs.SpaceRepair.Equals(rhs.SpaceRepair)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceApproaching) ?? true))
            {
                if (!lhs.SpaceApproaching.Equals(rhs.SpaceApproaching)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceDetection) ?? true))
            {
                if (!lhs.SpaceDetection.Equals(rhs.SpaceDetection)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Misc) ?? true))
            {
                if (!lhs.Misc.Equals(rhs.Misc)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceManeuverTypes) ?? true))
            {
                if (!lhs.SpaceManeuverTypes.Equals(rhs.SpaceManeuverTypes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleTemplatesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.OffsensiveDefensiveMults);
            hash.Add(item.AvoidThreats);
            hash.Add(item.EquipmentScoreMults);
            hash.Add(item.Melee);
            hash.Add(item.Ranged);
            hash.Add(item.CloseRange);
            hash.Add(item.LongRange);
            hash.Add(item.Cover);
            hash.Add(item.Flight);
            hash.Add(item.Tunnel);
            hash.Add(item.SpaceGeneral);
            hash.Add(item.SpacePower);
            hash.Add(item.SpaceRepair);
            hash.Add(item.SpaceApproaching);
            hash.Add(item.SpaceDetection);
            hash.Add(item.Misc);
            hash.Add(item.SpaceManeuverTypes);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleTemplates.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICombatStyleTemplatesGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.OffsensiveDefensiveMults);
            yield return FormLinkInformation.Factory(obj.AvoidThreats);
            yield return FormLinkInformation.Factory(obj.EquipmentScoreMults);
            yield return FormLinkInformation.Factory(obj.Melee);
            yield return FormLinkInformation.Factory(obj.Ranged);
            yield return FormLinkInformation.Factory(obj.CloseRange);
            yield return FormLinkInformation.Factory(obj.LongRange);
            yield return FormLinkInformation.Factory(obj.Cover);
            yield return FormLinkInformation.Factory(obj.Flight);
            yield return FormLinkInformation.Factory(obj.Tunnel);
            yield return FormLinkInformation.Factory(obj.SpaceGeneral);
            yield return FormLinkInformation.Factory(obj.SpacePower);
            yield return FormLinkInformation.Factory(obj.SpaceRepair);
            yield return FormLinkInformation.Factory(obj.SpaceApproaching);
            yield return FormLinkInformation.Factory(obj.SpaceDetection);
            yield return FormLinkInformation.Factory(obj.Misc);
            yield return FormLinkInformation.Factory(obj.SpaceManeuverTypes);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CombatStyleTemplatesSetterTranslationCommon
    {
        public static readonly CombatStyleTemplatesSetterTranslationCommon Instance = new CombatStyleTemplatesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleTemplates item,
            ICombatStyleTemplatesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.OffsensiveDefensiveMults) ?? true))
            {
                item.OffsensiveDefensiveMults.SetTo(rhs.OffsensiveDefensiveMults.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.AvoidThreats) ?? true))
            {
                item.AvoidThreats.SetTo(rhs.AvoidThreats.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.EquipmentScoreMults) ?? true))
            {
                item.EquipmentScoreMults.SetTo(rhs.EquipmentScoreMults.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Melee) ?? true))
            {
                item.Melee.SetTo(rhs.Melee.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Ranged) ?? true))
            {
                item.Ranged.SetTo(rhs.Ranged.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.CloseRange) ?? true))
            {
                item.CloseRange.SetTo(rhs.CloseRange.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.LongRange) ?? true))
            {
                item.LongRange.SetTo(rhs.LongRange.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Cover) ?? true))
            {
                item.Cover.SetTo(rhs.Cover.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Flight) ?? true))
            {
                item.Flight.SetTo(rhs.Flight.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Tunnel) ?? true))
            {
                item.Tunnel.SetTo(rhs.Tunnel.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceGeneral) ?? true))
            {
                item.SpaceGeneral.SetTo(rhs.SpaceGeneral.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpacePower) ?? true))
            {
                item.SpacePower.SetTo(rhs.SpacePower.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceRepair) ?? true))
            {
                item.SpaceRepair.SetTo(rhs.SpaceRepair.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceApproaching) ?? true))
            {
                item.SpaceApproaching.SetTo(rhs.SpaceApproaching.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceDetection) ?? true))
            {
                item.SpaceDetection.SetTo(rhs.SpaceDetection.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.Misc) ?? true))
            {
                item.Misc.SetTo(rhs.Misc.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleTemplates_FieldIndex.SpaceManeuverTypes) ?? true))
            {
                item.SpaceManeuverTypes.SetTo(rhs.SpaceManeuverTypes.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICombatStyleTemplates item,
            ICombatStyleTemplatesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CombatStyleTemplates DeepCopy(
            ICombatStyleTemplatesGetter item,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            CombatStyleTemplates ret = (CombatStyleTemplates)((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyleTemplates DeepCopy(
            ICombatStyleTemplatesGetter item,
            out CombatStyleTemplates.ErrorMask errorMask,
            CombatStyleTemplates.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleTemplates ret = (CombatStyleTemplates)((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyleTemplates.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyleTemplates DeepCopy(
            ICombatStyleTemplatesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleTemplates ret = (CombatStyleTemplates)((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleTemplatesSetterTranslationCommon)((ICombatStyleTemplatesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyleTemplates
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleTemplates_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStyleTemplates_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleTemplatesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleTemplatesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleTemplatesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleTemplatesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleTemplatesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleTemplatesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyleTemplatesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CombatStyleTemplatesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICombatStyleTemplatesGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.OffsensiveDefensiveMults);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AvoidThreats);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EquipmentScoreMults);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Melee);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Ranged);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CloseRange);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LongRange);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Cover);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Flight);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Tunnel);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpaceGeneral);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpacePower);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpaceRepair);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpaceApproaching);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpaceDetection);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Misc);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpaceManeuverTypes);
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleTemplatesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.UNAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICombatStyleTemplatesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CombatStyleTemplatesBinaryCreateTranslation
    {
        public static readonly CombatStyleTemplatesBinaryCreateTranslation Instance = new CombatStyleTemplatesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleTemplates item,
            MutagenFrame frame)
        {
            item.OffsensiveDefensiveMults.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.AvoidThreats.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.EquipmentScoreMults.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Melee.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Ranged.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.CloseRange.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.LongRange.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Cover.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Flight.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Tunnel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpaceGeneral.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpacePower.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpaceRepair.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpaceApproaching.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpaceDetection.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Misc.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.SpaceManeuverTypes.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CombatStyleTemplatesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleTemplatesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleTemplatesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CombatStyleTemplatesBinaryOverlay :
        PluginBinaryOverlay,
        ICombatStyleTemplatesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleTemplates_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStyleTemplates_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleTemplatesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleTemplatesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleTemplatesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleTemplatesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleTemplatesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CombatStyleTemplatesCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleTemplatesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleTemplatesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<ICombatStyleGetter> OffsensiveDefensiveMults => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> AvoidThreats => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x4, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> EquipmentScoreMults => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Melee => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0xC, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Ranged => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x10, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> CloseRange => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x14, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> LongRange => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x18, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Cover => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x1C, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Flight => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x20, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Tunnel => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x24, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpaceGeneral => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x28, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpacePower => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x2C, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpaceRepair => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x30, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpaceApproaching => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x34, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpaceDetection => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x38, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> Misc => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x3C, 0x4));
        public IFormLinkGetter<ICombatStyleGetter> SpaceManeuverTypes => FormLinkBinaryTranslation.Instance.OverlayFactory<ICombatStyleGetter>(_package, _structData.Span.Slice(0x40, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleTemplatesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICombatStyleTemplatesGetter CombatStyleTemplatesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x44,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CombatStyleTemplatesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x44 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICombatStyleTemplatesGetter CombatStyleTemplatesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CombatStyleTemplatesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleTemplatesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleTemplatesGetter rhs) return false;
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleTemplatesGetter? obj)
        {
            return ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

