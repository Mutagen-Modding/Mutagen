/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Furniture :
        StarfieldMajorRecord,
        IEquatable<IFurnitureGetter>,
        IFurnitureInternal,
        ILoquiObjectSetter<Furniture>
    {
        #region Ctor
        protected Furniture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IFurnitureGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IFurnitureGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region PTTA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PTTA? _PTTA;
        public PTTA? PTTA
        {
            get => _PTTA;
            set => _PTTA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPTTAGetter? IFurnitureGetter.PTTA => this.PTTA;
        #endregion
        #region ObjectPlacementDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPaletteDefaults? _ObjectPlacementDefaults;
        public ObjectPaletteDefaults? ObjectPlacementDefaults
        {
            get => _ObjectPlacementDefaults;
            set => _ObjectPlacementDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPaletteDefaultsGetter? IFurnitureGetter.ObjectPlacementDefaults => this.ObjectPlacementDefaults;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? IFurnitureGetter.Transforms => this.Transforms;
        #endregion
        #region SnapTemplate
        private readonly IFormLinkNullable<ISnapTemplateGetter> _SnapTemplate = new FormLinkNullable<ISnapTemplateGetter>();
        public IFormLinkNullable<ISnapTemplateGetter> SnapTemplate
        {
            get => _SnapTemplate;
            set => _SnapTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateGetter> IFurnitureGetter.SnapTemplate => this.SnapTemplate;
        #endregion
        #region SnapBehavior
        private readonly IFormLinkNullable<ISnapTemplateGetter> _SnapBehavior = new FormLinkNullable<ISnapTemplateGetter>();
        public IFormLinkNullable<ISnapTemplateGetter> SnapBehavior
        {
            get => _SnapBehavior;
            set => _SnapBehavior.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateGetter> IFurnitureGetter.SnapBehavior => this.SnapBehavior;
        #endregion
        #region XALG
        public UInt64? XALG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? IFurnitureGetter.XALG => this.XALG;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IFurnitureGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFurnitureGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IFurnitureGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IFurnitureGetter.Destructible => this.Destructible;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IHasDestructibleGetter.Destructible => this.Destructible;
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFurnitureGetter.Description => this.Description;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IFurnitureGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? IFurnitureGetter.Properties => _Properties;
        #endregion

        #endregion
        #region ForcedLocations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _ForcedLocations;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations
        {
            get => this._ForcedLocations;
            set => this._ForcedLocations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? IFurnitureGetter.ForcedLocations => _ForcedLocations;
        #endregion

        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFurnitureGetter.PNAM => this.PNAM;
        #endregion
        #region ActivateTextOverride
        public TranslatedString? ActivateTextOverride { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFurnitureGetter.ActivateTextOverride => this.ActivateTextOverride;
        #endregion
        #region LoopingSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _LoopingSound;
        public SoundReference? LoopingSound
        {
            get => _LoopingSound;
            set => _LoopingSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IFurnitureGetter.LoopingSound => this.LoopingSound;
        #endregion
        #region Flags
        public Furniture.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Furniture.Flag? IFurnitureGetter.Flags => this.Flags;
        #endregion
        #region JNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _JNAM;
        public MemorySlice<Byte>? JNAM
        {
            get => this._JNAM;
            set => this._JNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFurnitureGetter.JNAM => this.JNAM;
        #endregion
        #region INAM
        public Boolean INAM { get; set; } = default(Boolean);
        #endregion
        #region MarkerFlags
        public FurnitureMarkerFlags? MarkerFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FurnitureMarkerFlags? IFurnitureGetter.MarkerFlags => this.MarkerFlags;
        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFurnitureGetter.GNAM => this.GNAM;
        #endregion
        #region BenchType
        public Furniture.BenchTypes BenchType { get; set; } = default(Furniture.BenchTypes);
        #endregion
        #region UsesSkill
        public Skill? UsesSkill { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IFurnitureGetter.UsesSkill => this.UsesSkill;
        #endregion
        #region FurnitureTemplate
        private readonly IFormLinkNullable<IFurnitureGetter> _FurnitureTemplate = new FormLinkNullable<IFurnitureGetter>();
        public IFormLinkNullable<IFurnitureGetter> FurnitureTemplate
        {
            get => _FurnitureTemplate;
            set => _FurnitureTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFurnitureGetter> IFurnitureGetter.FurnitureTemplate => this.FurnitureTemplate;
        #endregion
        #region MarkerEntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerEntryPoints> _MarkerEntryPoints = new ExtendedList<FurnitureMarkerEntryPoints>();
        public ExtendedList<FurnitureMarkerEntryPoints> MarkerEntryPoints
        {
            get => this._MarkerEntryPoints;
            init => this._MarkerEntryPoints = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerEntryPointsGetter> IFurnitureGetter.MarkerEntryPoints => _MarkerEntryPoints;
        #endregion

        #endregion
        #region MarkerModel
        public String? MarkerModel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFurnitureGetter.MarkerModel => this.MarkerModel;
        #endregion
        #region MarkerParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerParameters>? _MarkerParameters;
        public ExtendedList<FurnitureMarkerParameters>? MarkerParameters
        {
            get => this._MarkerParameters;
            set => this._MarkerParameters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerParametersGetter>? IFurnitureGetter.MarkerParameters => _MarkerParameters;
        #endregion

        #endregion
        #region MarkerFiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerFile>? _MarkerFiles;
        public ExtendedList<FurnitureMarkerFile>? MarkerFiles
        {
            get => this._MarkerFiles;
            set => this._MarkerFiles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerFileGetter>? IFurnitureGetter.MarkerFiles => _MarkerFiles;
        #endregion

        #endregion
        #region WBDTDataTypeState
        public Furniture.WBDTDataType WBDTDataTypeState { get; set; } = default(Furniture.WBDTDataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.PTTA = new MaskItem<TItem, PTTA.Mask<TItem>?>(initialValue, new PTTA.Mask<TItem>(initialValue));
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(initialValue, new ObjectPaletteDefaults.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.SnapTemplate = initialValue;
                this.SnapBehavior = initialValue;
                this.XALG = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Description = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = initialValue;
                this.ActivateTextOverride = initialValue;
                this.LoopingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.JNAM = initialValue;
                this.INAM = initialValue;
                this.MarkerFlags = initialValue;
                this.GNAM = initialValue;
                this.BenchType = initialValue;
                this.UsesSkill = initialValue;
                this.FurnitureTemplate = initialValue;
                this.MarkerEntryPoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>());
                this.MarkerModel = initialValue;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.MarkerFiles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerFile.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerFile.Mask<TItem>?>>());
                this.WBDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem PTTA,
                TItem ObjectPlacementDefaults,
                TItem Transforms,
                TItem SnapTemplate,
                TItem SnapBehavior,
                TItem XALG,
                TItem Components,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Description,
                TItem Keywords,
                TItem Properties,
                TItem ForcedLocations,
                TItem PNAM,
                TItem ActivateTextOverride,
                TItem LoopingSound,
                TItem Flags,
                TItem JNAM,
                TItem INAM,
                TItem MarkerFlags,
                TItem GNAM,
                TItem BenchType,
                TItem UsesSkill,
                TItem FurnitureTemplate,
                TItem MarkerEntryPoints,
                TItem MarkerModel,
                TItem MarkerParameters,
                TItem MarkerFiles,
                TItem WBDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.PTTA = new MaskItem<TItem, PTTA.Mask<TItem>?>(PTTA, new PTTA.Mask<TItem>(PTTA));
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(ObjectPlacementDefaults, new ObjectPaletteDefaults.Mask<TItem>(ObjectPlacementDefaults));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.SnapTemplate = SnapTemplate;
                this.SnapBehavior = SnapBehavior;
                this.XALG = XALG;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Description = Description;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ForcedLocations, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = PNAM;
                this.ActivateTextOverride = ActivateTextOverride;
                this.LoopingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(LoopingSound, new SoundReference.Mask<TItem>(LoopingSound));
                this.Flags = Flags;
                this.JNAM = JNAM;
                this.INAM = INAM;
                this.MarkerFlags = MarkerFlags;
                this.GNAM = GNAM;
                this.BenchType = BenchType;
                this.UsesSkill = UsesSkill;
                this.FurnitureTemplate = FurnitureTemplate;
                this.MarkerEntryPoints = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>(MarkerEntryPoints, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>());
                this.MarkerModel = MarkerModel;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(MarkerParameters, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.MarkerFiles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerFile.Mask<TItem>?>>?>(MarkerFiles, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerFile.Mask<TItem>?>>());
                this.WBDTDataTypeState = WBDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public MaskItem<TItem, PTTA.Mask<TItem>?>? PTTA { get; set; }
            public MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>? ObjectPlacementDefaults { get; set; }
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public TItem SnapTemplate;
            public TItem SnapBehavior;
            public TItem XALG;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ForcedLocations;
            public TItem PNAM;
            public TItem ActivateTextOverride;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? LoopingSound { get; set; }
            public TItem Flags;
            public TItem JNAM;
            public TItem INAM;
            public TItem MarkerFlags;
            public TItem GNAM;
            public TItem BenchType;
            public TItem UsesSkill;
            public TItem FurnitureTemplate;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerEntryPoints.Mask<TItem>?>>?>? MarkerEntryPoints;
            public TItem MarkerModel;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>? MarkerParameters;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerFile.Mask<TItem>?>>?>? MarkerFiles;
            public TItem WBDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.PTTA, rhs.PTTA)) return false;
                if (!object.Equals(this.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.SnapTemplate, rhs.SnapTemplate)) return false;
                if (!object.Equals(this.SnapBehavior, rhs.SnapBehavior)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.ForcedLocations, rhs.ForcedLocations)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
                if (!object.Equals(this.LoopingSound, rhs.LoopingSound)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.JNAM, rhs.JNAM)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.MarkerFlags, rhs.MarkerFlags)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.BenchType, rhs.BenchType)) return false;
                if (!object.Equals(this.UsesSkill, rhs.UsesSkill)) return false;
                if (!object.Equals(this.FurnitureTemplate, rhs.FurnitureTemplate)) return false;
                if (!object.Equals(this.MarkerEntryPoints, rhs.MarkerEntryPoints)) return false;
                if (!object.Equals(this.MarkerModel, rhs.MarkerModel)) return false;
                if (!object.Equals(this.MarkerParameters, rhs.MarkerParameters)) return false;
                if (!object.Equals(this.MarkerFiles, rhs.MarkerFiles)) return false;
                if (!object.Equals(this.WBDTDataTypeState, rhs.WBDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.PTTA);
                hash.Add(this.ObjectPlacementDefaults);
                hash.Add(this.Transforms);
                hash.Add(this.SnapTemplate);
                hash.Add(this.SnapBehavior);
                hash.Add(this.XALG);
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Description);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.ForcedLocations);
                hash.Add(this.PNAM);
                hash.Add(this.ActivateTextOverride);
                hash.Add(this.LoopingSound);
                hash.Add(this.Flags);
                hash.Add(this.JNAM);
                hash.Add(this.INAM);
                hash.Add(this.MarkerFlags);
                hash.Add(this.GNAM);
                hash.Add(this.BenchType);
                hash.Add(this.UsesSkill);
                hash.Add(this.FurnitureTemplate);
                hash.Add(this.MarkerEntryPoints);
                hash.Add(this.MarkerModel);
                hash.Add(this.MarkerParameters);
                hash.Add(this.MarkerFiles);
                hash.Add(this.WBDTDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (PTTA != null)
                {
                    if (!eval(this.PTTA.Overall)) return false;
                    if (this.PTTA.Specific != null && !this.PTTA.Specific.All(eval)) return false;
                }
                if (ObjectPlacementDefaults != null)
                {
                    if (!eval(this.ObjectPlacementDefaults.Overall)) return false;
                    if (this.ObjectPlacementDefaults.Specific != null && !this.ObjectPlacementDefaults.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (!eval(this.SnapTemplate)) return false;
                if (!eval(this.SnapBehavior)) return false;
                if (!eval(this.XALG)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Description)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (!eval(this.ForcedLocations.Overall)) return false;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.ActivateTextOverride)) return false;
                if (LoopingSound != null)
                {
                    if (!eval(this.LoopingSound.Overall)) return false;
                    if (this.LoopingSound.Specific != null && !this.LoopingSound.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.JNAM)) return false;
                if (!eval(this.INAM)) return false;
                if (!eval(this.MarkerFlags)) return false;
                if (!eval(this.GNAM)) return false;
                if (!eval(this.BenchType)) return false;
                if (!eval(this.UsesSkill)) return false;
                if (!eval(this.FurnitureTemplate)) return false;
                if (this.MarkerEntryPoints != null)
                {
                    if (!eval(this.MarkerEntryPoints.Overall)) return false;
                    if (this.MarkerEntryPoints.Specific != null)
                    {
                        foreach (var item in this.MarkerEntryPoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.MarkerModel)) return false;
                if (this.MarkerParameters != null)
                {
                    if (!eval(this.MarkerParameters.Overall)) return false;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MarkerFiles != null)
                {
                    if (!eval(this.MarkerFiles.Overall)) return false;
                    if (this.MarkerFiles.Specific != null)
                    {
                        foreach (var item in this.MarkerFiles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.WBDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (PTTA != null)
                {
                    if (eval(this.PTTA.Overall)) return true;
                    if (this.PTTA.Specific != null && this.PTTA.Specific.Any(eval)) return true;
                }
                if (ObjectPlacementDefaults != null)
                {
                    if (eval(this.ObjectPlacementDefaults.Overall)) return true;
                    if (this.ObjectPlacementDefaults.Specific != null && this.ObjectPlacementDefaults.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (eval(this.SnapTemplate)) return true;
                if (eval(this.SnapBehavior)) return true;
                if (eval(this.XALG)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Description)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (eval(this.ForcedLocations.Overall)) return true;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.ActivateTextOverride)) return true;
                if (LoopingSound != null)
                {
                    if (eval(this.LoopingSound.Overall)) return true;
                    if (this.LoopingSound.Specific != null && this.LoopingSound.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.JNAM)) return true;
                if (eval(this.INAM)) return true;
                if (eval(this.MarkerFlags)) return true;
                if (eval(this.GNAM)) return true;
                if (eval(this.BenchType)) return true;
                if (eval(this.UsesSkill)) return true;
                if (eval(this.FurnitureTemplate)) return true;
                if (this.MarkerEntryPoints != null)
                {
                    if (eval(this.MarkerEntryPoints.Overall)) return true;
                    if (this.MarkerEntryPoints.Specific != null)
                    {
                        foreach (var item in this.MarkerEntryPoints.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.MarkerModel)) return true;
                if (this.MarkerParameters != null)
                {
                    if (eval(this.MarkerParameters.Overall)) return true;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MarkerFiles != null)
                {
                    if (eval(this.MarkerFiles.Overall)) return true;
                    if (this.MarkerFiles.Specific != null)
                    {
                        foreach (var item in this.MarkerFiles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.WBDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Furniture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.PTTA = this.PTTA == null ? null : new MaskItem<R, PTTA.Mask<R>?>(eval(this.PTTA.Overall), this.PTTA.Specific?.Translate(eval));
                obj.ObjectPlacementDefaults = this.ObjectPlacementDefaults == null ? null : new MaskItem<R, ObjectPaletteDefaults.Mask<R>?>(eval(this.ObjectPlacementDefaults.Overall), this.ObjectPlacementDefaults.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.SnapTemplate = eval(this.SnapTemplate);
                obj.SnapBehavior = eval(this.SnapBehavior);
                obj.XALG = eval(this.XALG);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Description = eval(this.Description);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ForcedLocations != null)
                {
                    obj.ForcedLocations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ForcedLocations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ForcedLocations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ForcedLocations.Specific = l;
                        foreach (var item in ForcedLocations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.ActivateTextOverride = eval(this.ActivateTextOverride);
                obj.LoopingSound = this.LoopingSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.LoopingSound.Overall), this.LoopingSound.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.JNAM = eval(this.JNAM);
                obj.INAM = eval(this.INAM);
                obj.MarkerFlags = eval(this.MarkerFlags);
                obj.GNAM = eval(this.GNAM);
                obj.BenchType = eval(this.BenchType);
                obj.UsesSkill = eval(this.UsesSkill);
                obj.FurnitureTemplate = eval(this.FurnitureTemplate);
                if (MarkerEntryPoints != null)
                {
                    obj.MarkerEntryPoints = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>?>(eval(this.MarkerEntryPoints.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>());
                    if (MarkerEntryPoints.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>>();
                        obj.MarkerEntryPoints.Specific = l;
                        foreach (var item in MarkerEntryPoints.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerEntryPoints.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.MarkerModel = eval(this.MarkerModel);
                if (MarkerParameters != null)
                {
                    obj.MarkerParameters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>?>(eval(this.MarkerParameters.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>());
                    if (MarkerParameters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>();
                        obj.MarkerParameters.Specific = l;
                        foreach (var item in MarkerParameters.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MarkerFiles != null)
                {
                    obj.MarkerFiles = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerFile.Mask<R>?>>?>(eval(this.MarkerFiles.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerFile.Mask<R>?>>());
                    if (MarkerFiles.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerFile.Mask<R>?>>();
                        obj.MarkerFiles.Specific = l;
                        foreach (var item in MarkerFiles.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerFile.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerFile.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.WBDTDataTypeState = eval(this.WBDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Furniture.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Furniture.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Furniture.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.PTTA?.Overall ?? true)
                    {
                        PTTA?.Print(sb);
                    }
                    if (printMask?.ObjectPlacementDefaults?.Overall ?? true)
                    {
                        ObjectPlacementDefaults?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.SnapTemplate ?? true)
                    {
                        sb.AppendItem(SnapTemplate, "SnapTemplate");
                    }
                    if (printMask?.SnapBehavior ?? true)
                    {
                        sb.AppendItem(SnapBehavior, "SnapBehavior");
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ForcedLocations?.Overall ?? true)
                        && ForcedLocations is {} ForcedLocationsItem)
                    {
                        sb.AppendLine("ForcedLocations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ForcedLocationsItem.Overall);
                            if (ForcedLocationsItem.Specific != null)
                            {
                                foreach (var subItem in ForcedLocationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.ActivateTextOverride ?? true)
                    {
                        sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                    }
                    if (printMask?.LoopingSound?.Overall ?? true)
                    {
                        LoopingSound?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.JNAM ?? true)
                    {
                        sb.AppendItem(JNAM, "JNAM");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        sb.AppendItem(INAM, "INAM");
                    }
                    if (printMask?.MarkerFlags ?? true)
                    {
                        sb.AppendItem(MarkerFlags, "MarkerFlags");
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.BenchType ?? true)
                    {
                        sb.AppendItem(BenchType, "BenchType");
                    }
                    if (printMask?.UsesSkill ?? true)
                    {
                        sb.AppendItem(UsesSkill, "UsesSkill");
                    }
                    if (printMask?.FurnitureTemplate ?? true)
                    {
                        sb.AppendItem(FurnitureTemplate, "FurnitureTemplate");
                    }
                    if ((printMask?.MarkerEntryPoints?.Overall ?? true)
                        && MarkerEntryPoints is {} MarkerEntryPointsItem)
                    {
                        sb.AppendLine("MarkerEntryPoints =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerEntryPointsItem.Overall);
                            if (MarkerEntryPointsItem.Specific != null)
                            {
                                foreach (var subItem in MarkerEntryPointsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.MarkerModel ?? true)
                    {
                        sb.AppendItem(MarkerModel, "MarkerModel");
                    }
                    if ((printMask?.MarkerParameters?.Overall ?? true)
                        && MarkerParameters is {} MarkerParametersItem)
                    {
                        sb.AppendLine("MarkerParameters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerParametersItem.Overall);
                            if (MarkerParametersItem.Specific != null)
                            {
                                foreach (var subItem in MarkerParametersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MarkerFiles?.Overall ?? true)
                        && MarkerFiles is {} MarkerFilesItem)
                    {
                        sb.AppendLine("MarkerFiles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerFilesItem.Overall);
                            if (MarkerFilesItem.Specific != null)
                            {
                                foreach (var subItem in MarkerFilesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.WBDTDataTypeState ?? true)
                    {
                        sb.AppendItem(WBDTDataTypeState, "WBDTDataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public MaskItem<Exception?, PTTA.ErrorMask?>? PTTA;
            public MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>? ObjectPlacementDefaults;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public Exception? SnapTemplate;
            public Exception? SnapBehavior;
            public Exception? XALG;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ForcedLocations;
            public Exception? PNAM;
            public Exception? ActivateTextOverride;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? LoopingSound;
            public Exception? Flags;
            public Exception? JNAM;
            public Exception? INAM;
            public Exception? MarkerFlags;
            public Exception? GNAM;
            public Exception? BenchType;
            public Exception? UsesSkill;
            public Exception? FurnitureTemplate;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>? MarkerEntryPoints;
            public Exception? MarkerModel;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>? MarkerParameters;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerFile.ErrorMask?>>?>? MarkerFiles;
            public Exception? WBDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Furniture_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Furniture_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case Furniture_FieldIndex.PTTA:
                        return PTTA;
                    case Furniture_FieldIndex.ObjectPlacementDefaults:
                        return ObjectPlacementDefaults;
                    case Furniture_FieldIndex.Transforms:
                        return Transforms;
                    case Furniture_FieldIndex.SnapTemplate:
                        return SnapTemplate;
                    case Furniture_FieldIndex.SnapBehavior:
                        return SnapBehavior;
                    case Furniture_FieldIndex.XALG:
                        return XALG;
                    case Furniture_FieldIndex.Components:
                        return Components;
                    case Furniture_FieldIndex.Name:
                        return Name;
                    case Furniture_FieldIndex.Model:
                        return Model;
                    case Furniture_FieldIndex.Destructible:
                        return Destructible;
                    case Furniture_FieldIndex.Description:
                        return Description;
                    case Furniture_FieldIndex.Keywords:
                        return Keywords;
                    case Furniture_FieldIndex.Properties:
                        return Properties;
                    case Furniture_FieldIndex.ForcedLocations:
                        return ForcedLocations;
                    case Furniture_FieldIndex.PNAM:
                        return PNAM;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        return ActivateTextOverride;
                    case Furniture_FieldIndex.LoopingSound:
                        return LoopingSound;
                    case Furniture_FieldIndex.Flags:
                        return Flags;
                    case Furniture_FieldIndex.JNAM:
                        return JNAM;
                    case Furniture_FieldIndex.INAM:
                        return INAM;
                    case Furniture_FieldIndex.MarkerFlags:
                        return MarkerFlags;
                    case Furniture_FieldIndex.GNAM:
                        return GNAM;
                    case Furniture_FieldIndex.BenchType:
                        return BenchType;
                    case Furniture_FieldIndex.UsesSkill:
                        return UsesSkill;
                    case Furniture_FieldIndex.FurnitureTemplate:
                        return FurnitureTemplate;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        return MarkerEntryPoints;
                    case Furniture_FieldIndex.MarkerModel:
                        return MarkerModel;
                    case Furniture_FieldIndex.MarkerParameters:
                        return MarkerParameters;
                    case Furniture_FieldIndex.MarkerFiles:
                        return MarkerFiles;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        return WBDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case Furniture_FieldIndex.PTTA:
                        this.PTTA = new MaskItem<Exception?, PTTA.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = new MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.SnapTemplate:
                        this.SnapTemplate = ex;
                        break;
                    case Furniture_FieldIndex.SnapBehavior:
                        this.SnapBehavior = ex;
                        break;
                    case Furniture_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case Furniture_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ForcedLocations:
                        this.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = ex;
                        break;
                    case Furniture_FieldIndex.LoopingSound:
                        this.LoopingSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Furniture_FieldIndex.JNAM:
                        this.JNAM = ex;
                        break;
                    case Furniture_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case Furniture_FieldIndex.MarkerFlags:
                        this.MarkerFlags = ex;
                        break;
                    case Furniture_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case Furniture_FieldIndex.BenchType:
                        this.BenchType = ex;
                        break;
                    case Furniture_FieldIndex.UsesSkill:
                        this.UsesSkill = ex;
                        break;
                    case Furniture_FieldIndex.FurnitureTemplate:
                        this.FurnitureTemplate = ex;
                        break;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        this.MarkerEntryPoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.MarkerModel:
                        this.MarkerModel = ex;
                        break;
                    case Furniture_FieldIndex.MarkerParameters:
                        this.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.MarkerFiles:
                        this.MarkerFiles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerFile.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        this.WBDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.PTTA:
                        this.PTTA = (MaskItem<Exception?, PTTA.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = (MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.SnapTemplate:
                        this.SnapTemplate = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.SnapBehavior:
                        this.SnapBehavior = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Furniture_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.ForcedLocations:
                        this.ForcedLocations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Furniture_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.LoopingSound:
                        this.LoopingSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.JNAM:
                        this.JNAM = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.MarkerFlags:
                        this.MarkerFlags = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.BenchType:
                        this.BenchType = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.UsesSkill:
                        this.UsesSkill = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.FurnitureTemplate:
                        this.FurnitureTemplate = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.MarkerEntryPoints:
                        this.MarkerEntryPoints = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.MarkerModel:
                        this.MarkerModel = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.MarkerParameters:
                        this.MarkerParameters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.MarkerFiles:
                        this.MarkerFiles = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerFile.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.WBDTDataTypeState:
                        this.WBDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (PTTA != null) return true;
                if (ObjectPlacementDefaults != null) return true;
                if (Transforms != null) return true;
                if (SnapTemplate != null) return true;
                if (SnapBehavior != null) return true;
                if (XALG != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Description != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (ForcedLocations != null) return true;
                if (PNAM != null) return true;
                if (ActivateTextOverride != null) return true;
                if (LoopingSound != null) return true;
                if (Flags != null) return true;
                if (JNAM != null) return true;
                if (INAM != null) return true;
                if (MarkerFlags != null) return true;
                if (GNAM != null) return true;
                if (BenchType != null) return true;
                if (UsesSkill != null) return true;
                if (FurnitureTemplate != null) return true;
                if (MarkerEntryPoints != null) return true;
                if (MarkerModel != null) return true;
                if (MarkerParameters != null) return true;
                if (MarkerFiles != null) return true;
                if (WBDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                PTTA?.Print(sb);
                ObjectPlacementDefaults?.Print(sb);
                Transforms?.Print(sb);
                {
                    sb.AppendItem(SnapTemplate, "SnapTemplate");
                }
                {
                    sb.AppendItem(SnapBehavior, "SnapBehavior");
                }
                {
                    sb.AppendItem(XALG, "XALG");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                Destructible?.Print(sb);
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ForcedLocations is {} ForcedLocationsItem)
                {
                    sb.AppendLine("ForcedLocations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ForcedLocationsItem.Overall);
                        if (ForcedLocationsItem.Specific != null)
                        {
                            foreach (var subItem in ForcedLocationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                }
                LoopingSound?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(JNAM, "JNAM");
                }
                {
                    sb.AppendItem(INAM, "INAM");
                }
                {
                    sb.AppendItem(MarkerFlags, "MarkerFlags");
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(BenchType, "BenchType");
                }
                {
                    sb.AppendItem(UsesSkill, "UsesSkill");
                }
                {
                    sb.AppendItem(FurnitureTemplate, "FurnitureTemplate");
                }
                if (MarkerEntryPoints is {} MarkerEntryPointsItem)
                {
                    sb.AppendLine("MarkerEntryPoints =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerEntryPointsItem.Overall);
                        if (MarkerEntryPointsItem.Specific != null)
                        {
                            foreach (var subItem in MarkerEntryPointsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(MarkerModel, "MarkerModel");
                }
                if (MarkerParameters is {} MarkerParametersItem)
                {
                    sb.AppendLine("MarkerParameters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerParametersItem.Overall);
                        if (MarkerParametersItem.Specific != null)
                        {
                            foreach (var subItem in MarkerParametersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MarkerFiles is {} MarkerFilesItem)
                {
                    sb.AppendLine("MarkerFiles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerFilesItem.Overall);
                        if (MarkerFilesItem.Specific != null)
                        {
                            foreach (var subItem in MarkerFilesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(WBDTDataTypeState, "WBDTDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.PTTA = this.PTTA.Combine(rhs.PTTA, (l, r) => l.Combine(r));
                ret.ObjectPlacementDefaults = this.ObjectPlacementDefaults.Combine(rhs.ObjectPlacementDefaults, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.SnapTemplate = this.SnapTemplate.Combine(rhs.SnapTemplate);
                ret.SnapBehavior = this.SnapBehavior.Combine(rhs.SnapBehavior);
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ForcedLocations?.Overall, rhs.ForcedLocations?.Overall), Noggog.ExceptionExt.Combine(this.ForcedLocations?.Specific, rhs.ForcedLocations?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.ActivateTextOverride = this.ActivateTextOverride.Combine(rhs.ActivateTextOverride);
                ret.LoopingSound = this.LoopingSound.Combine(rhs.LoopingSound, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.JNAM = this.JNAM.Combine(rhs.JNAM);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.MarkerFlags = this.MarkerFlags.Combine(rhs.MarkerFlags);
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.BenchType = this.BenchType.Combine(rhs.BenchType);
                ret.UsesSkill = this.UsesSkill.Combine(rhs.UsesSkill);
                ret.FurnitureTemplate = this.FurnitureTemplate.Combine(rhs.FurnitureTemplate);
                ret.MarkerEntryPoints = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerEntryPoints.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerEntryPoints?.Overall, rhs.MarkerEntryPoints?.Overall), Noggog.ExceptionExt.Combine(this.MarkerEntryPoints?.Specific, rhs.MarkerEntryPoints?.Specific));
                ret.MarkerModel = this.MarkerModel.Combine(rhs.MarkerModel);
                ret.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerParameters?.Overall, rhs.MarkerParameters?.Overall), Noggog.ExceptionExt.Combine(this.MarkerParameters?.Specific, rhs.MarkerParameters?.Specific));
                ret.MarkerFiles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerFile.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerFiles?.Overall, rhs.MarkerFiles?.Overall), Noggog.ExceptionExt.Combine(this.MarkerFiles?.Specific, rhs.MarkerFiles?.Specific));
                ret.WBDTDataTypeState = this.WBDTDataTypeState.Combine(rhs.WBDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public PTTA.TranslationMask? PTTA;
            public ObjectPaletteDefaults.TranslationMask? ObjectPlacementDefaults;
            public Transforms.TranslationMask? Transforms;
            public bool SnapTemplate;
            public bool SnapBehavior;
            public bool XALG;
            public AComponent.TranslationMask? Components;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Description;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool ForcedLocations;
            public bool PNAM;
            public bool ActivateTextOverride;
            public SoundReference.TranslationMask? LoopingSound;
            public bool Flags;
            public bool JNAM;
            public bool INAM;
            public bool MarkerFlags;
            public bool GNAM;
            public bool BenchType;
            public bool UsesSkill;
            public bool FurnitureTemplate;
            public FurnitureMarkerEntryPoints.TranslationMask? MarkerEntryPoints;
            public bool MarkerModel;
            public FurnitureMarkerParameters.TranslationMask? MarkerParameters;
            public FurnitureMarkerFile.TranslationMask? MarkerFiles;
            public bool WBDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.SnapTemplate = defaultOn;
                this.SnapBehavior = defaultOn;
                this.XALG = defaultOn;
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Keywords = defaultOn;
                this.ForcedLocations = defaultOn;
                this.PNAM = defaultOn;
                this.ActivateTextOverride = defaultOn;
                this.Flags = defaultOn;
                this.JNAM = defaultOn;
                this.INAM = defaultOn;
                this.MarkerFlags = defaultOn;
                this.GNAM = defaultOn;
                this.BenchType = defaultOn;
                this.UsesSkill = defaultOn;
                this.FurnitureTemplate = defaultOn;
                this.MarkerModel = defaultOn;
                this.WBDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((PTTA != null ? PTTA.OnOverall : DefaultOn, PTTA?.GetCrystal()));
                ret.Add((ObjectPlacementDefaults != null ? ObjectPlacementDefaults.OnOverall : DefaultOn, ObjectPlacementDefaults?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((SnapTemplate, null));
                ret.Add((SnapBehavior, null));
                ret.Add((XALG, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((ForcedLocations, null));
                ret.Add((PNAM, null));
                ret.Add((ActivateTextOverride, null));
                ret.Add((LoopingSound != null ? LoopingSound.OnOverall : DefaultOn, LoopingSound?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((JNAM, null));
                ret.Add((INAM, null));
                ret.Add((MarkerFlags, null));
                ret.Add((GNAM, null));
                ret.Add((BenchType, null));
                ret.Add((UsesSkill, null));
                ret.Add((FurnitureTemplate, null));
                ret.Add((MarkerEntryPoints == null ? DefaultOn : !MarkerEntryPoints.GetCrystal().CopyNothing, MarkerEntryPoints?.GetCrystal()));
                ret.Add((MarkerModel, null));
                ret.Add((MarkerParameters == null ? DefaultOn : !MarkerParameters.GetCrystal().CopyNothing, MarkerParameters?.GetCrystal()));
                ret.Add((MarkerFiles == null ? DefaultOn : !MarkerFiles.GetCrystal().CopyNothing, MarkerFiles?.GetCrystal()));
                ret.Add((WBDTDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Furniture_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FurnitureCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureSetterCommon.Instance.RemapLinks(this, mapping);
        public Furniture(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Furniture(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Furniture(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Furniture(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Furniture(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Furniture>.ToString(this);
        }

        protected override Type LinkType => typeof(IFurniture);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum WBDTDataType
        {
            Break0 = 1
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FurnitureCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => FurnitureSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => FurnitureSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => FurnitureSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFurnitureGetter rhs) return false;
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFurnitureGetter? obj)
        {
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Furniture CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Furniture();
            ((FurnitureSetterCommon)((IFurnitureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Furniture item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Furniture GetNew()
        {
            return new Furniture();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurniture :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectTarget,
        IFormLinkContainer,
        IFurnitureGetter,
        IHasDestructible,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IFurnitureInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IScripted,
        IStarfieldMajorRecordInternal,
        IStaticTarget,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new PTTA? PTTA { get; set; }
        new ObjectPaletteDefaults? ObjectPlacementDefaults { get; set; }
        new Transforms? Transforms { get; set; }
        new IFormLinkNullable<ISnapTemplateGetter> SnapTemplate { get; set; }
        new IFormLinkNullable<ISnapTemplateGetter> SnapBehavior { get; set; }
        new UInt64? XALG { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        new Destructible? Destructible { get; set; }
        new TranslatedString? Description { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new TranslatedString? ActivateTextOverride { get; set; }
        new SoundReference? LoopingSound { get; set; }
        new Furniture.Flag? Flags { get; set; }
        new MemorySlice<Byte>? JNAM { get; set; }
        new Boolean INAM { get; set; }
        new FurnitureMarkerFlags? MarkerFlags { get; set; }
        new MemorySlice<Byte>? GNAM { get; set; }
        new Furniture.BenchTypes BenchType { get; set; }
        new Skill? UsesSkill { get; set; }
        new IFormLinkNullable<IFurnitureGetter> FurnitureTemplate { get; set; }
        new ExtendedList<FurnitureMarkerEntryPoints> MarkerEntryPoints { get; }
        new String? MarkerModel { get; set; }
        new ExtendedList<FurnitureMarkerParameters>? MarkerParameters { get; set; }
        new ExtendedList<FurnitureMarkerFile>? MarkerFiles { get; set; }
        new Furniture.WBDTDataType WBDTDataTypeState { get; set; }
        #region Mutagen
        new Furniture.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IFurnitureInternal :
        IStarfieldMajorRecordInternal,
        IFurniture,
        IFurnitureGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.FURN)]
    public partial interface IFurnitureGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IFormLinkContainerGetter,
        IHasDestructibleGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IFurnitureGetter>,
        IMapsToGetter<IFurnitureGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IScriptedGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Furniture_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        IPTTAGetter? PTTA { get; }
        IObjectPaletteDefaultsGetter? ObjectPlacementDefaults { get; }
        ITransformsGetter? Transforms { get; }
        IFormLinkNullableGetter<ISnapTemplateGetter> SnapTemplate { get; }
        IFormLinkNullableGetter<ISnapTemplateGetter> SnapBehavior { get; }
        UInt64? XALG { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Destructible
        /// <summary>
        /// Aspects: IHasDestructibleGetter
        /// </summary>
        IDestructibleGetter? Destructible { get; }
        #endregion
        ITranslatedStringGetter? Description { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        ITranslatedStringGetter? ActivateTextOverride { get; }
        ISoundReferenceGetter? LoopingSound { get; }
        Furniture.Flag? Flags { get; }
        ReadOnlyMemorySlice<Byte>? JNAM { get; }
        Boolean INAM { get; }
        FurnitureMarkerFlags? MarkerFlags { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }
        Furniture.BenchTypes BenchType { get; }
        Skill? UsesSkill { get; }
        IFormLinkNullableGetter<IFurnitureGetter> FurnitureTemplate { get; }
        IReadOnlyList<IFurnitureMarkerEntryPointsGetter> MarkerEntryPoints { get; }
        String? MarkerModel { get; }
        IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; }
        IReadOnlyList<IFurnitureMarkerFileGetter>? MarkerFiles { get; }
        Furniture.WBDTDataType WBDTDataTypeState { get; }

        #region Mutagen
        Furniture.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMixIn
    {
        public static void Clear(this IFurnitureInternal item)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Furniture.Mask<bool> GetEqualsMask(
            this IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFurnitureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFurnitureGetter item,
            IFurnitureGetter rhs,
            Furniture.TranslationMask? equalsMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Furniture Duplicate(
            this IFurnitureGetter item,
            FormKey formKey,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Furniture Duplicate(
            this IFurnitureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFurnitureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Furniture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        DirtinessScale = 9,
        PTTA = 10,
        ObjectPlacementDefaults = 11,
        Transforms = 12,
        SnapTemplate = 13,
        SnapBehavior = 14,
        XALG = 15,
        Components = 16,
        Name = 17,
        Model = 18,
        Destructible = 19,
        Description = 20,
        Keywords = 21,
        Properties = 22,
        ForcedLocations = 23,
        PNAM = 24,
        ActivateTextOverride = 25,
        LoopingSound = 26,
        Flags = 27,
        JNAM = 28,
        INAM = 29,
        MarkerFlags = 30,
        GNAM = 31,
        BenchType = 32,
        UsesSkill = 33,
        FurnitureTemplate = 34,
        MarkerEntryPoints = 35,
        MarkerModel = 36,
        MarkerParameters = 37,
        MarkerFiles = 38,
        WBDTDataTypeState = 39,
    }
    #endregion

    #region Registration
    internal partial class Furniture_Registration : ILoquiRegistration
    {
        public static readonly Furniture_Registration Instance = new Furniture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 33;

        public const ushort FieldCount = 40;

        public static readonly Type MaskType = typeof(Furniture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Furniture.ErrorMask);

        public static readonly Type ClassType = typeof(Furniture);

        public static readonly Type GetterType = typeof(IFurnitureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurniture);

        public static readonly Type? InternalSetterType = typeof(IFurnitureInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Furniture";

        public const string Name = "Furniture";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FURN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.STOP);
            var triggers = RecordCollection.Factory(RecordTypes.FURN);
            var all = RecordCollection.Factory(
                RecordTypes.FURN,
                RecordTypes.STOP,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.PTTA,
                RecordTypes.OPDS,
                RecordTypes.PTT2,
                RecordTypes.SNTP,
                RecordTypes.SNBH,
                RecordTypes.XALG,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.DEST,
                RecordTypes.DAMC,
                RecordTypes.DSDL,
                RecordTypes.DSTD,
                RecordTypes.DESC,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.FTYP,
                RecordTypes.PNAM,
                RecordTypes.ATTX,
                RecordTypes.ALSH,
                RecordTypes.FNAM,
                RecordTypes.JNAM,
                RecordTypes.INAM,
                RecordTypes.MNAM,
                RecordTypes.GNAM,
                RecordTypes.WBDT,
                RecordTypes.FTMP,
                RecordTypes.FNPR,
                RecordTypes.XMRK,
                RecordTypes.SNAM,
                RecordTypes.NNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FurnitureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FurnitureSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly FurnitureSetterCommon Instance = new FurnitureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.PTTA = null;
            item.ObjectPlacementDefaults = null;
            item.Transforms = null;
            item.SnapTemplate.Clear();
            item.SnapBehavior.Clear();
            item.XALG = default;
            item.Components.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Description = default;
            item.Keywords = null;
            item.Properties = null;
            item.ForcedLocations = null;
            item.PNAM = default;
            item.ActivateTextOverride = default;
            item.LoopingSound = null;
            item.Flags = default;
            item.JNAM = default;
            item.INAM = default(Boolean);
            item.MarkerFlags = default;
            item.GNAM = default;
            item.BenchType = default(Furniture.BenchTypes);
            item.UsesSkill = default;
            item.FurnitureTemplate.Clear();
            item.MarkerEntryPoints.Clear();
            item.MarkerModel = default;
            item.MarkerParameters = null;
            item.MarkerFiles = null;
            item.WBDTDataTypeState = default(Furniture.WBDTDataType);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFurniture obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PTTA?.RemapLinks(mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.SnapTemplate.Relink(mapping);
            obj.SnapBehavior.Relink(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.ForcedLocations?.RemapLinks(mapping);
            obj.LoopingSound?.RemapLinks(mapping);
            obj.FurnitureTemplate.Relink(mapping);
            obj.MarkerParameters?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFurniture obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFurniture obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFurnitureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFurnitureInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FurnitureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FurnitureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FurnitureCommon : StarfieldMajorRecordCommon
    {
        public new static readonly FurnitureCommon Instance = new FurnitureCommon();

        public Furniture.Mask<bool> GetEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Furniture.Mask<bool>(false);
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            Furniture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.PTTA = EqualsMaskHelper.EqualsHelper(
                item.PTTA,
                rhs.PTTA,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectPlacementDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPlacementDefaults,
                rhs.ObjectPlacementDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SnapTemplate = item.SnapTemplate.Equals(rhs.SnapTemplate);
            ret.SnapBehavior = item.SnapBehavior.Equals(rhs.SnapBehavior);
            ret.XALG = item.XALG == rhs.XALG;
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ForcedLocations = item.ForcedLocations.CollectionEqualsHelper(
                rhs.ForcedLocations,
                (l, r) => object.Equals(l, r),
                include);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
            ret.ActivateTextOverride = object.Equals(item.ActivateTextOverride, rhs.ActivateTextOverride);
            ret.LoopingSound = EqualsMaskHelper.EqualsHelper(
                item.LoopingSound,
                rhs.LoopingSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.JNAM = MemorySliceExt.SequenceEqual(item.JNAM, rhs.JNAM);
            ret.INAM = item.INAM == rhs.INAM;
            ret.MarkerFlags = item.MarkerFlags == rhs.MarkerFlags;
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
            ret.BenchType = item.BenchType == rhs.BenchType;
            ret.UsesSkill = item.UsesSkill == rhs.UsesSkill;
            ret.FurnitureTemplate = item.FurnitureTemplate.Equals(rhs.FurnitureTemplate);
            ret.MarkerEntryPoints = item.MarkerEntryPoints.CollectionEqualsHelper(
                rhs.MarkerEntryPoints,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MarkerModel = string.Equals(item.MarkerModel, rhs.MarkerModel);
            ret.MarkerParameters = item.MarkerParameters.CollectionEqualsHelper(
                rhs.MarkerParameters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MarkerFiles = item.MarkerFiles.CollectionEqualsHelper(
                rhs.MarkerFiles,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.WBDTDataTypeState = item.WBDTDataTypeState == rhs.WBDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFurnitureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Furniture =>");
            }
            else
            {
                sb.AppendLine($"{name} (Furniture) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFurnitureGetter item,
            StructuredStringBuilder sb,
            Furniture.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.PTTA?.Overall ?? true)
                && item.PTTA is {} PTTAItem)
            {
                PTTAItem?.Print(sb, "PTTA");
            }
            if ((printMask?.ObjectPlacementDefaults?.Overall ?? true)
                && item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ObjectPlacementDefaultsItem?.Print(sb, "ObjectPlacementDefaults");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if (printMask?.SnapTemplate ?? true)
            {
                sb.AppendItem(item.SnapTemplate.FormKeyNullable, "SnapTemplate");
            }
            if (printMask?.SnapBehavior ?? true)
            {
                sb.AppendItem(item.SnapBehavior.FormKeyNullable, "SnapBehavior");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendItem(XALGItem, "XALG");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ForcedLocations?.Overall ?? true)
                && item.ForcedLocations is {} ForcedLocationsItem)
            {
                sb.AppendLine("ForcedLocations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ForcedLocationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if ((printMask?.ActivateTextOverride ?? true)
                && item.ActivateTextOverride is {} ActivateTextOverrideItem)
            {
                sb.AppendItem(ActivateTextOverrideItem, "ActivateTextOverride");
            }
            if ((printMask?.LoopingSound?.Overall ?? true)
                && item.LoopingSound is {} LoopingSoundItem)
            {
                LoopingSoundItem?.Print(sb, "LoopingSound");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.JNAM ?? true)
                && item.JNAM is {} JNAMItem)
            {
                sb.AppendLine($"JNAM => {SpanExt.ToHexString(JNAMItem)}");
            }
            if (printMask?.INAM ?? true)
            {
                sb.AppendItem(item.INAM, "INAM");
            }
            if ((printMask?.MarkerFlags ?? true)
                && item.MarkerFlags is {} MarkerFlagsItem)
            {
                sb.AppendItem(MarkerFlagsItem, "MarkerFlags");
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
            if (printMask?.BenchType ?? true)
            {
                sb.AppendItem(item.BenchType, "BenchType");
            }
            if ((printMask?.UsesSkill ?? true)
                && item.UsesSkill is {} UsesSkillItem)
            {
                sb.AppendItem(UsesSkillItem, "UsesSkill");
            }
            if (printMask?.FurnitureTemplate ?? true)
            {
                sb.AppendItem(item.FurnitureTemplate.FormKeyNullable, "FurnitureTemplate");
            }
            if (printMask?.MarkerEntryPoints?.Overall ?? true)
            {
                sb.AppendLine("MarkerEntryPoints =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MarkerEntryPoints)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MarkerModel ?? true)
                && item.MarkerModel is {} MarkerModelItem)
            {
                sb.AppendItem(MarkerModelItem, "MarkerModel");
            }
            if ((printMask?.MarkerParameters?.Overall ?? true)
                && item.MarkerParameters is {} MarkerParametersItem)
            {
                sb.AppendLine("MarkerParameters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MarkerParametersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MarkerFiles?.Overall ?? true)
                && item.MarkerFiles is {} MarkerFilesItem)
            {
                sb.AppendLine("MarkerFiles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MarkerFilesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.WBDTDataTypeState ?? true)
            {
                sb.AppendItem(item.WBDTDataTypeState, "WBDTDataTypeState");
            }
        }
        
        public static Furniture_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Furniture_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Furniture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureGetter? lhs,
            IFurnitureGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.PTTA) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PTTA, rhs.PTTA, out var lhsPTTA, out var rhsPTTA, out var isPTTAEqual))
                {
                    if (!((PTTACommon)((IPTTAGetter)lhsPTTA).CommonInstance()!).Equals(lhsPTTA, rhsPTTA, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.PTTA))) return false;
                }
                else if (!isPTTAEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults, out var lhsObjectPlacementDefaults, out var rhsObjectPlacementDefaults, out var isObjectPlacementDefaultsEqual))
                {
                    if (!((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)lhsObjectPlacementDefaults).CommonInstance()!).Equals(lhsObjectPlacementDefaults, rhsObjectPlacementDefaults, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectPlacementDefaults))) return false;
                }
                else if (!isObjectPlacementDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.SnapTemplate) ?? true))
            {
                if (!lhs.SnapTemplate.Equals(rhs.SnapTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.SnapBehavior) ?? true))
            {
                if (!lhs.SnapBehavior.Equals(rhs.SnapBehavior)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.XALG) ?? true))
            {
                if (lhs.XALG != rhs.XALG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.ForcedLocations) ?? true))
            {
                if (!lhs.ForcedLocations.SequenceEqualNullable(rhs.ForcedLocations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.ActivateTextOverride) ?? true))
            {
                if (!object.Equals(lhs.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.LoopingSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoopingSound, rhs.LoopingSound, out var lhsLoopingSound, out var rhsLoopingSound, out var isLoopingSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsLoopingSound).CommonInstance()!).Equals(lhsLoopingSound, rhsLoopingSound, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.LoopingSound))) return false;
                }
                else if (!isLoopingSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.JNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.JNAM, rhs.JNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.INAM) ?? true))
            {
                if (lhs.INAM != rhs.INAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerFlags) ?? true))
            {
                if (lhs.MarkerFlags != rhs.MarkerFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.BenchType) ?? true))
            {
                if (lhs.BenchType != rhs.BenchType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.UsesSkill) ?? true))
            {
                if (lhs.UsesSkill != rhs.UsesSkill) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.FurnitureTemplate) ?? true))
            {
                if (!lhs.FurnitureTemplate.Equals(rhs.FurnitureTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerEntryPoints) ?? true))
            {
                if (!lhs.MarkerEntryPoints.SequenceEqual(rhs.MarkerEntryPoints, (l, r) => ((FurnitureMarkerEntryPointsCommon)((IFurnitureMarkerEntryPointsGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.MarkerEntryPoints)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerModel) ?? true))
            {
                if (!string.Equals(lhs.MarkerModel, rhs.MarkerModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerParameters) ?? true))
            {
                if (!lhs.MarkerParameters.SequenceEqualNullable(rhs.MarkerParameters, (l, r) => ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.MarkerParameters)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerFiles) ?? true))
            {
                if (!lhs.MarkerFiles.SequenceEqualNullable(rhs.MarkerFiles, (l, r) => ((FurnitureMarkerFileCommon)((IFurnitureMarkerFileGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Furniture_FieldIndex.MarkerFiles)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Furniture_FieldIndex.WBDTDataTypeState) ?? true))
            {
                if (lhs.WBDTDataTypeState != rhs.WBDTDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFurnitureGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.PTTA is {} PTTAitem)
            {
                hash.Add(PTTAitem);
            }
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsitem)
            {
                hash.Add(ObjectPlacementDefaultsitem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            hash.Add(item.SnapTemplate);
            hash.Add(item.SnapBehavior);
            if (item.XALG is {} XALGitem)
            {
                hash.Add(XALGitem);
            }
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            hash.Add(item.ForcedLocations);
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            if (item.ActivateTextOverride is {} ActivateTextOverrideitem)
            {
                hash.Add(ActivateTextOverrideitem);
            }
            if (item.LoopingSound is {} LoopingSounditem)
            {
                hash.Add(LoopingSounditem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.JNAM is {} JNAMItem)
            {
                hash.Add(JNAMItem);
            }
            hash.Add(item.INAM);
            if (item.MarkerFlags is {} MarkerFlagsitem)
            {
                hash.Add(MarkerFlagsitem);
            }
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            hash.Add(item.BenchType);
            if (item.UsesSkill is {} UsesSkillitem)
            {
                hash.Add(UsesSkillitem);
            }
            hash.Add(item.FurnitureTemplate);
            hash.Add(item.MarkerEntryPoints);
            if (item.MarkerModel is {} MarkerModelitem)
            {
                hash.Add(MarkerModelitem);
            }
            hash.Add(item.MarkerParameters);
            hash.Add(item.MarkerFiles);
            hash.Add(item.WBDTDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Furniture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFurnitureGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.PTTA is {} PTTAItems)
            {
                foreach (var item in PTTAItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.SnapTemplate, out var SnapTemplateInfo))
            {
                yield return SnapTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SnapBehavior, out var SnapBehaviorInfo))
            {
                yield return SnapBehaviorInfo;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ForcedLocations is {} ForcedLocationsItem)
            {
                foreach (var item in ForcedLocationsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LoopingSound is {} LoopingSoundItems)
            {
                foreach (var item in LoopingSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.FurnitureTemplate, out var FurnitureTemplateInfo))
            {
                yield return FurnitureTemplateInfo;
            }
            if (obj.MarkerParameters is {} MarkerParametersItem)
            {
                foreach (var item in MarkerParametersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFurnitureGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Furniture Duplicate(
            IFurnitureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Furniture(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFurnitureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFurnitureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FurnitureSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly FurnitureSetterTranslationCommon Instance = new FurnitureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFurnitureInternal item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFurniture item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.PTTA) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.PTTA);
                try
                {
                    if(rhs.PTTA is {} rhsPTTA)
                    {
                        item.PTTA = rhsPTTA.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.PTTA));
                    }
                    else
                    {
                        item.PTTA = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectPlacementDefaults);
                try
                {
                    if(rhs.ObjectPlacementDefaults is {} rhsObjectPlacementDefaults)
                    {
                        item.ObjectPlacementDefaults = rhsObjectPlacementDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectPlacementDefaults));
                    }
                    else
                    {
                        item.ObjectPlacementDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.SnapTemplate) ?? true))
            {
                item.SnapTemplate.SetTo(rhs.SnapTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.SnapBehavior) ?? true))
            {
                item.SnapBehavior.SetTo(rhs.SnapBehavior.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.XALG) ?? true))
            {
                item.XALG = rhs.XALG;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ForcedLocations) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ForcedLocations);
                try
                {
                    if ((rhs.ForcedLocations != null))
                    {
                        item.ForcedLocations = 
                            rhs.ForcedLocations
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.ForcedLocations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ActivateTextOverride) ?? true))
            {
                item.ActivateTextOverride = rhs.ActivateTextOverride?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.LoopingSound) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.LoopingSound);
                try
                {
                    if(rhs.LoopingSound is {} rhsLoopingSound)
                    {
                        item.LoopingSound = rhsLoopingSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.LoopingSound));
                    }
                    else
                    {
                        item.LoopingSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.JNAM) ?? true))
            {
                if(rhs.JNAM is {} JNAMrhs)
                {
                    item.JNAM = JNAMrhs.ToArray();
                }
                else
                {
                    item.JNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.INAM) ?? true))
            {
                item.INAM = rhs.INAM;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerFlags) ?? true))
            {
                item.MarkerFlags = rhs.MarkerFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.BenchType) ?? true))
            {
                item.BenchType = rhs.BenchType;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.UsesSkill) ?? true))
            {
                item.UsesSkill = rhs.UsesSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.FurnitureTemplate) ?? true))
            {
                item.FurnitureTemplate.SetTo(rhs.FurnitureTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerEntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.MarkerEntryPoints);
                try
                {
                    item.MarkerEntryPoints.SetTo(
                        rhs.MarkerEntryPoints
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerModel) ?? true))
            {
                item.MarkerModel = rhs.MarkerModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerParameters) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.MarkerParameters);
                try
                {
                    if ((rhs.MarkerParameters != null))
                    {
                        item.MarkerParameters = 
                            rhs.MarkerParameters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarkerParameters>();
                    }
                    else
                    {
                        item.MarkerParameters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.MarkerFiles) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.MarkerFiles);
                try
                {
                    if ((rhs.MarkerFiles != null))
                    {
                        item.MarkerFiles = 
                            rhs.MarkerFiles
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarkerFile>();
                    }
                    else
                    {
                        item.MarkerFiles = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.WBDTDataTypeState) ?? true))
            {
                item.WBDTDataTypeState = rhs.WBDTDataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFurniture item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Furniture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FurnitureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FurnitureBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FurnitureBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IFurnitureGetter item,
            MutagenWriter writer)
        {
            StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IFurnitureGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.PTTA is {} PTTAItem)
            {
                ((PTTABinaryWriteTranslation)((IBinaryItem)PTTAItem).BinaryWriteTranslator).Write(
                    item: PTTAItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ((ObjectPaletteDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPlacementDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPlacementDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SnapTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.SNTP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SnapBehavior,
                header: translationParams.ConvertToCustom(RecordTypes.SNBH));
            UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.ForcedLocations,
                recordType: translationParams.ConvertToCustom(RecordTypes.FTYP),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivateTextOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ATTX),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.LoopingSound is {} LoopingSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ALSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)LoopingSoundItem).BinaryWriteTranslator).Write(
                        item: LoopingSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            EnumBinaryTranslation<Furniture.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.JNAM,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            EnumBinaryTranslation<FurnitureMarkerFlags, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.MarkerFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.WBDT)))
            {
                EnumBinaryTranslation<Furniture.BenchTypes, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BenchType,
                    length: 1);
                if (!item.WBDTDataTypeState.HasFlag(Furniture.WBDTDataType.Break0))
                {
                    EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Write(
                        writer,
                        ((int?)item.UsesSkill) ?? -1,
                        length: 1);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FurnitureTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.FTMP));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFurnitureMarkerEntryPointsGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerEntryPoints,
                transl: (MutagenWriter subWriter, IFurnitureMarkerEntryPointsGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FurnitureMarkerEntryPointsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerModel,
                header: translationParams.ConvertToCustom(RecordTypes.XMRK),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFurnitureMarkerParametersGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerParameters,
                recordType: translationParams.ConvertToCustom(RecordTypes.SNAM),
                transl: (MutagenWriter subWriter, IFurnitureMarkerParametersGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FurnitureMarkerParametersBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFurnitureMarkerFileGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerFiles,
                recordType: translationParams.ConvertToCustom(RecordTypes.NNAM),
                transl: (MutagenWriter subWriter, IFurnitureMarkerFileGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FurnitureMarkerFileBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.FURN,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes,
                endMarker: RecordTypes.STOP);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FurnitureBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly FurnitureBinaryCreateTranslation Instance = new FurnitureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FURN;
        public static void FillBinaryStructs(
            IFurnitureInternal item,
            MutagenFrame frame)
        {
            StarfieldMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFurnitureInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)Furniture_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.PTTA:
                {
                    item.PTTA = Mutagen.Bethesda.Starfield.PTTA.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.PTTA;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPlacementDefaults = Mutagen.Bethesda.Starfield.ObjectPaletteDefaults.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.Transforms;
                }
                case RecordTypeInts.SNTP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SnapTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.SnapTemplate;
                }
                case RecordTypeInts.SNBH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SnapBehavior.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = frame.ReadUInt64();
                    return (int)Furniture_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Furniture_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Furniture_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSDL:
                case RecordTypeInts.DSTD:
                {
                    item.Destructible = Mutagen.Bethesda.Starfield.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.Destructible;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Furniture_FieldIndex.Description;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Furniture_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Furniture_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)Furniture_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Furniture_FieldIndex.PNAM;
                }
                case RecordTypeInts.ATTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivateTextOverride = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Furniture_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.ALSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.LoopingSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Furniture_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Furniture.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Furniture_FieldIndex.Flags;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Furniture_FieldIndex.JNAM;
                }
                case RecordTypeInts.INAM:
                {
                    item.INAM = true;
                    return (int)Furniture_FieldIndex.INAM;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerFlags = EnumBinaryTranslation<FurnitureMarkerFlags, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Furniture_FieldIndex.MarkerFlags;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Furniture_FieldIndex.GNAM;
                }
                case RecordTypeInts.WBDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.BenchType = EnumBinaryTranslation<Furniture.BenchTypes, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Complete)
                    {
                        item.WBDTDataTypeState |= Furniture.WBDTDataType.Break0;
                        return (int)Furniture_FieldIndex.BenchType;
                    }
                    if (dataFrame.Remaining < 1) return null;
                    item.UsesSkill = EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    return (int)Furniture_FieldIndex.UsesSkill;
                }
                case RecordTypeInts.FTMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FurnitureTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Furniture_FieldIndex.FurnitureTemplate;
                }
                case RecordTypeInts.FNPR:
                {
                    item.MarkerEntryPoints.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FurnitureMarkerEntryPoints>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FurnitureMarkerEntryPoints_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FurnitureMarkerEntryPoints.TryCreateFromBinary));
                    return (int)Furniture_FieldIndex.MarkerEntryPoints;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Furniture_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerParameters = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FurnitureMarkerParameters>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FurnitureMarkerParameters.TryCreateFromBinary)
                        .CastExtendedList<FurnitureMarkerParameters>();
                    return (int)Furniture_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerFiles = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FurnitureMarkerFile>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FurnitureMarkerFile.TryCreateFromBinary)
                        .CastExtendedList<FurnitureMarkerFile>();
                    return (int)Furniture_FieldIndex.MarkerFiles;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FurnitureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FurnitureBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IFurnitureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FurnitureCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FurnitureCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFurniture);

        public Furniture.MajorFlag MajorFlags => (Furniture.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region PTTA
        private RangeInt32? _PTTALocation;
        public IPTTAGetter? PTTA => _PTTALocation.HasValue ? PTTABinaryOverlay.PTTAFactory(_recordData.Slice(_PTTALocation!.Value.Min), _package) : default;
        #endregion
        #region ObjectPlacementDefaults
        private RangeInt32? _ObjectPlacementDefaultsLocation;
        public IObjectPaletteDefaultsGetter? ObjectPlacementDefaults => _ObjectPlacementDefaultsLocation.HasValue ? ObjectPaletteDefaultsBinaryOverlay.ObjectPaletteDefaultsFactory(_recordData.Slice(_ObjectPlacementDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        #region SnapTemplate
        private int? _SnapTemplateLocation;
        public IFormLinkNullableGetter<ISnapTemplateGetter> SnapTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateGetter>(_package, _recordData, _SnapTemplateLocation);
        #endregion
        #region SnapBehavior
        private int? _SnapBehaviorLocation;
        public IFormLinkNullableGetter<ISnapTemplateGetter> SnapBehavior => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateGetter>(_package, _recordData, _SnapBehaviorLocation);
        #endregion
        #region XALG
        private int? _XALGLocation;
        public UInt64? XALG => _XALGLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; private set; }
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ActivateTextOverride
        private int? _ActivateTextOverrideLocation;
        public ITranslatedStringGetter? ActivateTextOverride => _ActivateTextOverrideLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActivateTextOverrideLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public ISoundReferenceGetter? LoopingSound { get; private set; }
        #region Flags
        private int? _FlagsLocation;
        public Furniture.Flag? Flags => _FlagsLocation.HasValue ? (Furniture.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Furniture.Flag?);
        #endregion
        #region JNAM
        private int? _JNAMLocation;
        public ReadOnlyMemorySlice<Byte>? JNAM => _JNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _JNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region INAM
        private int? _INAMLocation;
        public Boolean INAM => _INAMLocation.HasValue ? true : default(Boolean);
        #endregion
        #region MarkerFlags
        private int? _MarkerFlagsLocation;
        public FurnitureMarkerFlags? MarkerFlags => _MarkerFlagsLocation.HasValue ? (FurnitureMarkerFlags)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MarkerFlagsLocation!.Value, _package.MetaData.Constants)) : default(FurnitureMarkerFlags?);
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        public ReadOnlyMemorySlice<Byte>? GNAM => _GNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _WBDTLocation;
        public Furniture.WBDTDataType WBDTDataTypeState { get; private set; }
        #region BenchType
        private int _BenchTypeLocation => _WBDTLocation!.Value.Min;
        private bool _BenchType_IsSet => _WBDTLocation.HasValue;
        public Furniture.BenchTypes BenchType => _BenchType_IsSet ? (Furniture.BenchTypes)_recordData.Span.Slice(_BenchTypeLocation, 0x1)[0] : default;
        #endregion
        #region UsesSkill
        private int _UsesSkillLocation => _WBDTLocation!.Value.Min + 0x1;
        private bool _UsesSkill_IsSet => _WBDTLocation.HasValue && !WBDTDataTypeState.HasFlag(Furniture.WBDTDataType.Break0);
        public Skill? UsesSkill
        {
            get
            {
                var val = (Skill)_recordData.Span.Slice(_UsesSkillLocation, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        #region FurnitureTemplate
        private int? _FurnitureTemplateLocation;
        public IFormLinkNullableGetter<IFurnitureGetter> FurnitureTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFurnitureGetter>(_package, _recordData, _FurnitureTemplateLocation);
        #endregion
        public IReadOnlyList<IFurnitureMarkerEntryPointsGetter> MarkerEntryPoints { get; private set; } = Array.Empty<IFurnitureMarkerEntryPointsGetter>();
        #region MarkerModel
        private int? _MarkerModelLocation;
        public String? MarkerModel => _MarkerModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MarkerModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; private set; }
        public IReadOnlyList<IFurnitureMarkerFileGetter>? MarkerFiles { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FurnitureBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFurnitureGetter FurnitureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FurnitureBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFurnitureGetter FurnitureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FurnitureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Furniture_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.PTTA:
                {
                    _PTTALocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.PTTA;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPlacementDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Furniture_FieldIndex.Transforms;
                }
                case RecordTypeInts.SNTP:
                {
                    _SnapTemplateLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.SnapTemplate;
                }
                case RecordTypeInts.SNBH:
                {
                    _SnapBehaviorLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Furniture_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSDL:
                case RecordTypeInts.DSTD:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.Destructible;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.Description;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Furniture_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Furniture_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    this.ForcedLocations = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)Furniture_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.PNAM;
                }
                case RecordTypeInts.ATTX:
                {
                    _ActivateTextOverrideLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.ALSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.LoopingSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Furniture_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.Flags;
                }
                case RecordTypeInts.JNAM:
                {
                    _JNAMLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.JNAM;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.INAM;
                }
                case RecordTypeInts.MNAM:
                {
                    _MarkerFlagsLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.MarkerFlags;
                }
                case RecordTypeInts.GNAM:
                {
                    _GNAMLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.GNAM;
                }
                case RecordTypeInts.WBDT:
                {
                    _WBDTLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x1)
                    {
                        this.WBDTDataTypeState |= Furniture.WBDTDataType.Break0;
                    }
                    return (int)Furniture_FieldIndex.UsesSkill;
                }
                case RecordTypeInts.FTMP:
                {
                    _FurnitureTemplateLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.FurnitureTemplate;
                }
                case RecordTypeInts.FNPR:
                {
                    this.MarkerEntryPoints = BinaryOverlayList.FactoryByArray<IFurnitureMarkerEntryPointsGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => FurnitureMarkerEntryPointsBinaryOverlay.FurnitureMarkerEntryPointsFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: FurnitureMarkerEntryPoints_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Furniture_FieldIndex.MarkerEntryPoints;
                }
                case RecordTypeInts.XMRK:
                {
                    _MarkerModelLocation = (stream.Position - offset);
                    return (int)Furniture_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    this.MarkerParameters = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFurnitureMarkerParametersGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 28,
                        getter: (s, p) => FurnitureMarkerParametersBinaryOverlay.FurnitureMarkerParametersFactory(s, p));
                    return (int)Furniture_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.NNAM:
                {
                    this.MarkerFiles = BinaryOverlayList.FactoryByLazyParseWithTrigger<IFurnitureMarkerFileGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        getter: (s, p) => FurnitureMarkerFileBinaryOverlay.FurnitureMarkerFileFactory(s, p));
                    return (int)Furniture_FieldIndex.MarkerFiles;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Furniture>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFurnitureGetter rhs) return false;
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFurnitureGetter? obj)
        {
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

