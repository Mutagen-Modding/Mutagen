/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeMarkerType :
        IBiomeMarkerType,
        IEquatable<IBiomeMarkerTypeGetter>,
        ILoquiObjectSetter<BiomeMarkerType>
    {
        #region Ctor
        public BiomeMarkerType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MarkerType
        private readonly IFormLinkNullable<IKeywordGetter> _MarkerType = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> MarkerType
        {
            get => _MarkerType;
            set => _MarkerType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IBiomeMarkerTypeGetter.MarkerType => this.MarkerType;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IBiomeMarkerTypeGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeMarkerTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeMarkerTypeGetter rhs) return false;
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeMarkerTypeGetter? obj)
        {
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MarkerType = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MarkerType,
                TItem Keywords)
            {
                this.MarkerType = MarkerType;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MarkerType;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MarkerType, rhs.MarkerType)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MarkerType);
                hash.Add(this.Keywords);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MarkerType)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MarkerType)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeMarkerType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MarkerType = eval(this.MarkerType);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeMarkerType.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeMarkerType.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeMarkerType.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MarkerType ?? true)
                    {
                        sb.AppendItem(MarkerType, "MarkerType");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MarkerType;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeMarkerType_FieldIndex enu = (BiomeMarkerType_FieldIndex)index;
                switch (enu)
                {
                    case BiomeMarkerType_FieldIndex.MarkerType:
                        return MarkerType;
                    case BiomeMarkerType_FieldIndex.Keywords:
                        return Keywords;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeMarkerType_FieldIndex enu = (BiomeMarkerType_FieldIndex)index;
                switch (enu)
                {
                    case BiomeMarkerType_FieldIndex.MarkerType:
                        this.MarkerType = ex;
                        break;
                    case BiomeMarkerType_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeMarkerType_FieldIndex enu = (BiomeMarkerType_FieldIndex)index;
                switch (enu)
                {
                    case BiomeMarkerType_FieldIndex.MarkerType:
                        this.MarkerType = (Exception?)obj;
                        break;
                    case BiomeMarkerType_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MarkerType != null) return true;
                if (Keywords != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MarkerType, "MarkerType");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MarkerType = this.MarkerType.Combine(rhs.MarkerType);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MarkerType;
            public bool Keywords;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MarkerType = defaultOn;
                this.Keywords = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MarkerType, null));
                ret.Add((Keywords, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeMarkerTypeCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeMarkerTypeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeMarkerTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeMarkerTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeMarkerType CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeMarkerType();
            ((BiomeMarkerTypeSetterCommon)((IBiomeMarkerTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeMarkerType item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeMarkerTypeSetterCommon)((IBiomeMarkerTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeMarkerType GetNew()
        {
            return new BiomeMarkerType();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeMarkerType :
        IBiomeMarkerTypeGetter,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IBiomeMarkerType>
    {
        new IFormLinkNullable<IKeywordGetter> MarkerType { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
    }

    public partial interface IBiomeMarkerTypeGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IBiomeMarkerTypeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeMarkerType_Registration.Instance;
        IFormLinkNullableGetter<IKeywordGetter> MarkerType { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeMarkerTypeMixIn
    {
        public static void Clear(this IBiomeMarkerType item)
        {
            ((BiomeMarkerTypeSetterCommon)((IBiomeMarkerTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeMarkerType.Mask<bool> GetEqualsMask(
            this IBiomeMarkerTypeGetter item,
            IBiomeMarkerTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeMarkerTypeGetter item,
            string? name = null,
            BiomeMarkerType.Mask<bool>? printMask = null)
        {
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeMarkerTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeMarkerType.Mask<bool>? printMask = null)
        {
            ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeMarkerTypeGetter item,
            IBiomeMarkerTypeGetter rhs,
            BiomeMarkerType.TranslationMask? equalsMask = null)
        {
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeMarkerType lhs,
            IBiomeMarkerTypeGetter rhs)
        {
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeMarkerType lhs,
            IBiomeMarkerTypeGetter rhs,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeMarkerType lhs,
            IBiomeMarkerTypeGetter rhs,
            out BiomeMarkerType.ErrorMask errorMask,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeMarkerType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeMarkerType lhs,
            IBiomeMarkerTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeMarkerType DeepCopy(
            this IBiomeMarkerTypeGetter item,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            return ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeMarkerType DeepCopy(
            this IBiomeMarkerTypeGetter item,
            out BiomeMarkerType.ErrorMask errorMask,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            return ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeMarkerType DeepCopy(
            this IBiomeMarkerTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeMarkerType item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeMarkerTypeSetterCommon)((IBiomeMarkerTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeMarkerType_FieldIndex
    {
        MarkerType = 0,
        Keywords = 1,
    }
    #endregion

    #region Registration
    internal partial class BiomeMarkerType_Registration : ILoquiRegistration
    {
        public static readonly BiomeMarkerType_Registration Instance = new BiomeMarkerType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BiomeMarkerType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeMarkerType.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeMarkerType);

        public static readonly Type GetterType = typeof(IBiomeMarkerTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeMarkerType);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeMarkerType";

        public const string Name = "BiomeMarkerType";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.KNAM,
                RecordTypes.KSIZ,
                RecordTypes.KWDA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BiomeMarkerTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeMarkerTypeSetterCommon
    {
        public static readonly BiomeMarkerTypeSetterCommon Instance = new BiomeMarkerTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeMarkerType item)
        {
            ClearPartial();
            item.MarkerType.Clear();
            item.Keywords = null;
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeMarkerType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MarkerType.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeMarkerType item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BiomeMarkerTypeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BiomeMarkerTypeCommon
    {
        public static readonly BiomeMarkerTypeCommon Instance = new BiomeMarkerTypeCommon();

        public BiomeMarkerType.Mask<bool> GetEqualsMask(
            IBiomeMarkerTypeGetter item,
            IBiomeMarkerTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeMarkerType.Mask<bool>(false);
            ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeMarkerTypeGetter item,
            IBiomeMarkerTypeGetter rhs,
            BiomeMarkerType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MarkerType = item.MarkerType.Equals(rhs.MarkerType);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
        }
        
        public string Print(
            IBiomeMarkerTypeGetter item,
            string? name = null,
            BiomeMarkerType.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeMarkerTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeMarkerType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeMarkerType =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeMarkerType) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeMarkerTypeGetter item,
            StructuredStringBuilder sb,
            BiomeMarkerType.Mask<bool>? printMask = null)
        {
            if (printMask?.MarkerType ?? true)
            {
                sb.AppendItem(item.MarkerType.FormKeyNullable, "MarkerType");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeMarkerTypeGetter? lhs,
            IBiomeMarkerTypeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeMarkerType_FieldIndex.MarkerType) ?? true))
            {
                if (!lhs.MarkerType.Equals(rhs.MarkerType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeMarkerType_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeMarkerTypeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MarkerType);
            hash.Add(item.Keywords);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeMarkerType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeMarkerTypeGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.MarkerType, out var MarkerTypeInfo))
            {
                yield return MarkerTypeInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeMarkerTypeSetterTranslationCommon
    {
        public static readonly BiomeMarkerTypeSetterTranslationCommon Instance = new BiomeMarkerTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeMarkerType item,
            IBiomeMarkerTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeMarkerType_FieldIndex.MarkerType) ?? true))
            {
                item.MarkerType.SetTo(rhs.MarkerType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeMarkerType_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)BiomeMarkerType_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeMarkerType item,
            IBiomeMarkerTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeMarkerType DeepCopy(
            IBiomeMarkerTypeGetter item,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            BiomeMarkerType ret = (BiomeMarkerType)((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).GetNew();
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeMarkerType DeepCopy(
            IBiomeMarkerTypeGetter item,
            out BiomeMarkerType.ErrorMask errorMask,
            BiomeMarkerType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeMarkerType ret = (BiomeMarkerType)((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).GetNew();
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeMarkerType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeMarkerType DeepCopy(
            IBiomeMarkerTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeMarkerType ret = (BiomeMarkerType)((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)item).CommonInstance()!).GetNew();
            ((BiomeMarkerTypeSetterTranslationCommon)((IBiomeMarkerTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeMarkerType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeMarkerType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeMarkerType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeMarkerTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeMarkerTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeMarkerTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeMarkerTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeMarkerTypeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeMarkerTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeMarkerTypeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeMarkerTypeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBiomeMarkerTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerType,
                header: translationParams.ConvertToCustom(RecordTypes.KNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            IBiomeMarkerTypeGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeMarkerTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeMarkerTypeBinaryCreateTranslation
    {
        public static readonly BiomeMarkerTypeBinaryCreateTranslation Instance = new BiomeMarkerTypeBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBiomeMarkerType item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.KNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeMarkerType_FieldIndex.MarkerType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BiomeMarkerType_FieldIndex.MarkerType;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (lastParsed.ShortCircuit((int)BiomeMarkerType_FieldIndex.Keywords, translationParams)) return ParseResult.Stop;
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)BiomeMarkerType_FieldIndex.Keywords;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeMarkerTypeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeMarkerTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeMarkerTypeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeMarkerTypeBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeMarkerTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeMarkerType_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeMarkerType_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeMarkerTypeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeMarkerTypeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeMarkerTypeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeMarkerTypeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeMarkerTypeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeMarkerTypeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeMarkerTypeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeMarkerTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region MarkerType
        private int? _MarkerTypeLocation;
        public IFormLinkNullableGetter<IKeywordGetter> MarkerType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _MarkerTypeLocation);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeMarkerTypeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeMarkerTypeGetter BiomeMarkerTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BiomeMarkerTypeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBiomeMarkerTypeGetter BiomeMarkerTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeMarkerTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.KNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeMarkerType_FieldIndex.MarkerType, translationParams)) return ParseResult.Stop;
                    _MarkerTypeLocation = (stream.Position - offset);
                    return (int)BiomeMarkerType_FieldIndex.MarkerType;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (lastParsed.ShortCircuit((int)BiomeMarkerType_FieldIndex.Keywords, translationParams)) return ParseResult.Stop;
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)BiomeMarkerType_FieldIndex.Keywords;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeMarkerTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeMarkerTypeGetter rhs) return false;
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeMarkerTypeGetter? obj)
        {
            return ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

