/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ActorValueInformation :
        StarfieldMajorRecord,
        IActorValueInformationInternal,
        IEquatable<IActorValueInformationGetter>,
        ILoquiObjectSetter<ActorValueInformation>
    {
        #region Ctor
        protected ActorValueInformation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DESC
        public Byte? DESC { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IActorValueInformationGetter.DESC => this.DESC;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActorValueInformationGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Context
        public String? Context { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IActorValueInformationGetter.Context => this.Context;
        #endregion
        #region Abbreviation
        public TranslatedString? Abbreviation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActorValueInformationGetter.Abbreviation => this.Abbreviation;
        #endregion
        #region DefaultValue
        public Single? DefaultValue { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IActorValueInformationGetter.DefaultValue => this.DefaultValue;
        #endregion
        #region Flags
        public ActorValueInformation.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ActorValueInformation.Flag? IActorValueInformationGetter.Flags => this.Flags;
        #endregion
        #region Type
        public ActorValueInformation.Types? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ActorValueInformation.Types? IActorValueInformationGetter.Type => this.Type;
        #endregion
        #region Min
        public Single? Min { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IActorValueInformationGetter.Min => this.Min;
        #endregion
        #region Max
        public Single? Max { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IActorValueInformationGetter.Max => this.Max;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActorValueInformationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.DESC = initialValue;
                this.Name = initialValue;
                this.Context = initialValue;
                this.Abbreviation = initialValue;
                this.DefaultValue = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.Min = initialValue;
                this.Max = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem DESC,
                TItem Name,
                TItem Context,
                TItem Abbreviation,
                TItem DefaultValue,
                TItem Flags,
                TItem Type,
                TItem Min,
                TItem Max)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.DESC = DESC;
                this.Name = Name;
                this.Context = Context;
                this.Abbreviation = Abbreviation;
                this.DefaultValue = DefaultValue;
                this.Flags = Flags;
                this.Type = Type;
                this.Min = Min;
                this.Max = Max;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DESC;
            public TItem Name;
            public TItem Context;
            public TItem Abbreviation;
            public TItem DefaultValue;
            public TItem Flags;
            public TItem Type;
            public TItem Min;
            public TItem Max;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.DESC, rhs.DESC)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Context, rhs.Context)) return false;
                if (!object.Equals(this.Abbreviation, rhs.Abbreviation)) return false;
                if (!object.Equals(this.DefaultValue, rhs.DefaultValue)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DESC);
                hash.Add(this.Name);
                hash.Add(this.Context);
                hash.Add(this.Abbreviation);
                hash.Add(this.DefaultValue);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.DESC)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Context)) return false;
                if (!eval(this.Abbreviation)) return false;
                if (!eval(this.DefaultValue)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.DESC)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Context)) return true;
                if (eval(this.Abbreviation)) return true;
                if (eval(this.DefaultValue)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ActorValueInformation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.DESC = eval(this.DESC);
                obj.Name = eval(this.Name);
                obj.Context = eval(this.Context);
                obj.Abbreviation = eval(this.Abbreviation);
                obj.DefaultValue = eval(this.DefaultValue);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ActorValueInformation.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ActorValueInformation.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ActorValueInformation.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.DESC ?? true)
                    {
                        sb.AppendItem(DESC, "DESC");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Context ?? true)
                    {
                        sb.AppendItem(Context, "Context");
                    }
                    if (printMask?.Abbreviation ?? true)
                    {
                        sb.AppendItem(Abbreviation, "Abbreviation");
                    }
                    if (printMask?.DefaultValue ?? true)
                    {
                        sb.AppendItem(DefaultValue, "DefaultValue");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Min ?? true)
                    {
                        sb.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        sb.AppendItem(Max, "Max");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? DESC;
            public Exception? Name;
            public Exception? Context;
            public Exception? Abbreviation;
            public Exception? DefaultValue;
            public Exception? Flags;
            public Exception? Type;
            public Exception? Min;
            public Exception? Max;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.DESC:
                        return DESC;
                    case ActorValueInformation_FieldIndex.Name:
                        return Name;
                    case ActorValueInformation_FieldIndex.Context:
                        return Context;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        return Abbreviation;
                    case ActorValueInformation_FieldIndex.DefaultValue:
                        return DefaultValue;
                    case ActorValueInformation_FieldIndex.Flags:
                        return Flags;
                    case ActorValueInformation_FieldIndex.Type:
                        return Type;
                    case ActorValueInformation_FieldIndex.Min:
                        return Min;
                    case ActorValueInformation_FieldIndex.Max:
                        return Max;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.DESC:
                        this.DESC = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Context:
                        this.Context = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        this.Abbreviation = ex;
                        break;
                    case ActorValueInformation_FieldIndex.DefaultValue:
                        this.DefaultValue = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.DESC:
                        this.DESC = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Context:
                        this.Context = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        this.Abbreviation = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.DefaultValue:
                        this.DefaultValue = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (DESC != null) return true;
                if (Name != null) return true;
                if (Context != null) return true;
                if (Abbreviation != null) return true;
                if (DefaultValue != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(DESC, "DESC");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Context, "Context");
                }
                {
                    sb.AppendItem(Abbreviation, "Abbreviation");
                }
                {
                    sb.AppendItem(DefaultValue, "DefaultValue");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Min, "Min");
                }
                {
                    sb.AppendItem(Max, "Max");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DESC = this.DESC.Combine(rhs.DESC);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Context = this.Context.Combine(rhs.Context);
                ret.Abbreviation = this.Abbreviation.Combine(rhs.Abbreviation);
                ret.DefaultValue = this.DefaultValue.Combine(rhs.DefaultValue);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool DESC;
            public bool Name;
            public bool Context;
            public bool Abbreviation;
            public bool DefaultValue;
            public bool Flags;
            public bool Type;
            public bool Min;
            public bool Max;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DESC = defaultOn;
                this.Name = defaultOn;
                this.Context = defaultOn;
                this.Abbreviation = defaultOn;
                this.DefaultValue = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.Min = defaultOn;
                this.Max = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((DESC, null));
                ret.Add((Name, null));
                ret.Add((Context, null));
                ret.Add((Abbreviation, null));
                ret.Add((DefaultValue, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((Min, null));
                ret.Add((Max, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ActorValueInformation_Registration.TriggeringRecordType;
        public ActorValueInformation(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ActorValueInformation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ActorValueInformation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ActorValueInformation(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ActorValueInformation(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ActorValueInformation>.ToString(this);
        }

        protected override Type LinkType => typeof(IActorValueInformation);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActorValueInformationGetter rhs) return false;
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActorValueInformationGetter? obj)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueInformationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActorValueInformationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ActorValueInformation CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ActorValueInformation();
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ActorValueInformation item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ActorValueInformation GetNew()
        {
            return new ActorValueInformation();
        }

    }
    #endregion

    #region Interface
    public partial interface IActorValueInformation :
        IActorValueInformationGetter,
        ILoquiObjectSetter<IActorValueInformationInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new Byte? DESC { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new String? Context { get; set; }
        new TranslatedString? Abbreviation { get; set; }
        new Single? DefaultValue { get; set; }
        new ActorValueInformation.Flag? Flags { get; set; }
        new ActorValueInformation.Types? Type { get; set; }
        new Single? Min { get; set; }
        new Single? Max { get; set; }
    }

    public partial interface IActorValueInformationInternal :
        IStarfieldMajorRecordInternal,
        IActorValueInformation,
        IActorValueInformationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AVIF)]
    public partial interface IActorValueInformationGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IActorValueInformationGetter>,
        IMapsToGetter<IActorValueInformationGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ActorValueInformation_Registration.Instance;
        Byte? DESC { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        String? Context { get; }
        ITranslatedStringGetter? Abbreviation { get; }
        Single? DefaultValue { get; }
        ActorValueInformation.Flag? Flags { get; }
        ActorValueInformation.Types? Type { get; }
        Single? Min { get; }
        Single? Max { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ActorValueInformationMixIn
    {
        public static void Clear(this IActorValueInformationInternal item)
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ActorValueInformation.Mask<bool> GetEqualsMask(
            this IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IActorValueInformationGetter item,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IActorValueInformationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            ActorValueInformation.TranslationMask? equalsMask = null)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IActorValueInformationInternal lhs,
            IActorValueInformationGetter rhs,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ActorValueInformation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActorValueInformationInternal lhs,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ActorValueInformation Duplicate(
            this IActorValueInformationGetter item,
            FormKey formKey,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ActorValueInformation Duplicate(
            this IActorValueInformationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActorValueInformationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ActorValueInformation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        DESC = 7,
        Name = 8,
        Context = 9,
        Abbreviation = 10,
        DefaultValue = 11,
        Flags = 12,
        Type = 13,
        Min = 14,
        Max = 15,
    }
    #endregion

    #region Registration
    internal partial class ActorValueInformation_Registration : ILoquiRegistration
    {
        public static readonly ActorValueInformation_Registration Instance = new ActorValueInformation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(ActorValueInformation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ActorValueInformation.ErrorMask);

        public static readonly Type ClassType = typeof(ActorValueInformation);

        public static readonly Type GetterType = typeof(IActorValueInformationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActorValueInformation);

        public static readonly Type? InternalSetterType = typeof(IActorValueInformationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ActorValueInformation";

        public const string Name = "ActorValueInformation";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AVIF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AVIF);
            var all = RecordCollection.Factory(
                RecordTypes.AVIF,
                RecordTypes.DESC,
                RecordTypes.FULL,
                RecordTypes.NLDT,
                RecordTypes.ANAM,
                RecordTypes.NAM0,
                RecordTypes.AVFL,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ActorValueInformationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ActorValueInformationSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ActorValueInformationSetterCommon Instance = new ActorValueInformationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActorValueInformationInternal item)
        {
            ClearPartial();
            item.DESC = default;
            item.Name = default;
            item.Context = default;
            item.Abbreviation = default;
            item.DefaultValue = default;
            item.Flags = default;
            item.Type = default;
            item.Min = default;
            item.Max = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IActorValueInformationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IActorValueInformationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IActorValueInformation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActorValueInformationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IActorValueInformationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ActorValueInformationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ActorValueInformationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ActorValueInformation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ActorValueInformation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ActorValueInformationCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ActorValueInformationCommon Instance = new ActorValueInformationCommon();

        public ActorValueInformation.Mask<bool> GetEqualsMask(
            IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ActorValueInformation.Mask<bool>(false);
            ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            ActorValueInformation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.DESC = item.DESC == rhs.DESC;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Context = string.Equals(item.Context, rhs.Context);
            ret.Abbreviation = object.Equals(item.Abbreviation, rhs.Abbreviation);
            ret.DefaultValue = item.DefaultValue.EqualsWithin(rhs.DefaultValue);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.Min = item.Min.EqualsWithin(rhs.Min);
            ret.Max = item.Max.EqualsWithin(rhs.Max);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IActorValueInformationGetter item,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IActorValueInformationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ActorValueInformation =>");
            }
            else
            {
                sb.AppendLine($"{name} (ActorValueInformation) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IActorValueInformationGetter item,
            StructuredStringBuilder sb,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.DESC ?? true)
                && item.DESC is {} DESCItem)
            {
                sb.AppendItem(DESCItem, "DESC");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Context ?? true)
                && item.Context is {} ContextItem)
            {
                sb.AppendItem(ContextItem, "Context");
            }
            if ((printMask?.Abbreviation ?? true)
                && item.Abbreviation is {} AbbreviationItem)
            {
                sb.AppendItem(AbbreviationItem, "Abbreviation");
            }
            if ((printMask?.DefaultValue ?? true)
                && item.DefaultValue is {} DefaultValueItem)
            {
                sb.AppendItem(DefaultValueItem, "DefaultValue");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Type ?? true)
                && item.Type is {} TypeItem)
            {
                sb.AppendItem(TypeItem, "Type");
            }
            if ((printMask?.Min ?? true)
                && item.Min is {} MinItem)
            {
                sb.AppendItem(MinItem, "Min");
            }
            if ((printMask?.Max ?? true)
                && item.Max is {} MaxItem)
            {
                sb.AppendItem(MaxItem, "Max");
            }
        }
        
        public static ActorValueInformation_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ActorValueInformation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ActorValueInformation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ActorValueInformation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActorValueInformationGetter? lhs,
            IActorValueInformationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.DESC) ?? true))
            {
                if (lhs.DESC != rhs.DESC) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Context) ?? true))
            {
                if (!string.Equals(lhs.Context, rhs.Context)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Abbreviation) ?? true))
            {
                if (!object.Equals(lhs.Abbreviation, rhs.Abbreviation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.DefaultValue) ?? true))
            {
                if (!lhs.DefaultValue.EqualsWithin(rhs.DefaultValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Min) ?? true))
            {
                if (!lhs.Min.EqualsWithin(rhs.Min)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Max) ?? true))
            {
                if (!lhs.Max.EqualsWithin(rhs.Max)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IActorValueInformationGetter?)lhs,
                rhs: rhs as IActorValueInformationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IActorValueInformationGetter?)lhs,
                rhs: rhs as IActorValueInformationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IActorValueInformationGetter item)
        {
            var hash = new HashCode();
            if (item.DESC is {} DESCitem)
            {
                hash.Add(DESCitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Context is {} Contextitem)
            {
                hash.Add(Contextitem);
            }
            if (item.Abbreviation is {} Abbreviationitem)
            {
                hash.Add(Abbreviationitem);
            }
            if (item.DefaultValue is {} DefaultValueitem)
            {
                hash.Add(DefaultValueitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.Type is {} Typeitem)
            {
                hash.Add(Typeitem);
            }
            if (item.Min is {} Minitem)
            {
                hash.Add(Minitem);
            }
            if (item.Max is {} Maxitem)
            {
                hash.Add(Maxitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueInformationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueInformationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ActorValueInformation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IActorValueInformationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ActorValueInformation Duplicate(
            IActorValueInformationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ActorValueInformation(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueInformationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueInformationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ActorValueInformationSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ActorValueInformationSetterTranslationCommon Instance = new ActorValueInformationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActorValueInformationInternal item,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IActorValueInformation item,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.DESC) ?? true))
            {
                item.DESC = rhs.DESC;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Context) ?? true))
            {
                item.Context = rhs.Context;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Abbreviation) ?? true))
            {
                item.Abbreviation = rhs.Abbreviation?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.DefaultValue) ?? true))
            {
                item.DefaultValue = rhs.DefaultValue;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IActorValueInformation item,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformationInternal)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformation)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformationInternal)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformation)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ActorValueInformation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ActorValueInformation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueInformation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ActorValueInformation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueInformationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ActorValueInformationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueInformationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ActorValueInformationBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ActorValueInformationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IActorValueInformationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DESC,
                header: translationParams.ConvertToCustom(RecordTypes.DESC));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Context,
                header: translationParams.ConvertToCustom(RecordTypes.NLDT),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Abbreviation,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultValue,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0));
            EnumBinaryTranslation<ActorValueInformation.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.AVFL));
            EnumBinaryTranslation<ActorValueInformation.Types, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Min,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Max,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
        }

        public void Write(
            MutagenWriter writer,
            IActorValueInformationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AVIF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ActorValueInformationBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ActorValueInformationBinaryCreateTranslation Instance = new ActorValueInformationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AVIF;
        public static ParseResult FillBinaryRecordTypes(
            IActorValueInformationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DESC = frame.ReadUInt8();
                    return (int)ActorValueInformation_FieldIndex.DESC;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ActorValueInformation_FieldIndex.Name;
                }
                case RecordTypeInts.NLDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Context = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ActorValueInformation_FieldIndex.Context;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Abbreviation = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ActorValueInformation_FieldIndex.Abbreviation;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ActorValueInformation_FieldIndex.DefaultValue;
                }
                case RecordTypeInts.AVFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<ActorValueInformation.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ActorValueInformation_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<ActorValueInformation.Types, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ActorValueInformation_FieldIndex.Type;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Min = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ActorValueInformation_FieldIndex.Min;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Max = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ActorValueInformation_FieldIndex.Max;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ActorValueInformationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ActorValueInformationBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IActorValueInformationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueInformation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ActorValueInformation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueInformationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueInformationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueInformationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActorValueInformationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IActorValueInformation);


        #region DESC
        private int? _DESCLocation;
        public Byte? DESC => _DESCLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DESCLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Context
        private int? _ContextLocation;
        public String? Context => _ContextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ContextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Abbreviation
        private int? _AbbreviationLocation;
        public ITranslatedStringGetter? Abbreviation => _AbbreviationLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AbbreviationLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region DefaultValue
        private int? _DefaultValueLocation;
        public Single? DefaultValue => _DefaultValueLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultValueLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public ActorValueInformation.Flag? Flags => _FlagsLocation.HasValue ? (ActorValueInformation.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(ActorValueInformation.Flag?);
        #endregion
        #region Type
        private int? _TypeLocation;
        public ActorValueInformation.Types? Type => _TypeLocation.HasValue ? (ActorValueInformation.Types)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeLocation!.Value, _package.MetaData.Constants)) : default(ActorValueInformation.Types?);
        #endregion
        #region Min
        private int? _MinLocation;
        public Single? Min => _MinLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MinLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Max
        private int? _MaxLocation;
        public Single? Max => _MaxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaxLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActorValueInformationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IActorValueInformationGetter ActorValueInformationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ActorValueInformationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IActorValueInformationGetter ActorValueInformationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ActorValueInformationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DESC:
                {
                    _DESCLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.DESC;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Name;
                }
                case RecordTypeInts.NLDT:
                {
                    _ContextLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Context;
                }
                case RecordTypeInts.ANAM:
                {
                    _AbbreviationLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Abbreviation;
                }
                case RecordTypeInts.NAM0:
                {
                    _DefaultValueLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.DefaultValue;
                }
                case RecordTypeInts.AVFL:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM1:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Type;
                }
                case RecordTypeInts.NAM2:
                {
                    _MinLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Min;
                }
                case RecordTypeInts.NAM3:
                {
                    _MaxLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Max;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActorValueInformationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ActorValueInformation>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IActorValueInformationGetter rhs) return false;
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActorValueInformationGetter? obj)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

