/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetBiome :
        IEquatable<IPlanetBiomeGetter>,
        ILoquiObjectSetter<PlanetBiome>,
        IPlanetBiome
    {
        #region Ctor
        public PlanetBiome()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Biome
        private readonly IFormLink<IBiomeGetter> _Biome = new FormLink<IBiomeGetter>();
        public IFormLink<IBiomeGetter> Biome
        {
            get => _Biome;
            set => _Biome.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IBiomeGetter> IPlanetBiomeGetter.Biome => this.Biome;
        #endregion
        #region Chance
        public Single Chance { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Int32 Unknown2 { get; set; } = default(Int32);
        #endregion
        #region ResourceGeneration
        private readonly IFormLink<IStarfieldMajorRecordGetter> _ResourceGeneration = new FormLink<IStarfieldMajorRecordGetter>();
        public IFormLink<IStarfieldMajorRecordGetter> ResourceGeneration
        {
            get => _ResourceGeneration;
            set => _ResourceGeneration.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStarfieldMajorRecordGetter> IPlanetBiomeGetter.ResourceGeneration => this.ResourceGeneration;
        #endregion
        #region Fauna
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INpcGetter>> _Fauna = new ExtendedList<IFormLinkGetter<INpcGetter>>();
        public ExtendedList<IFormLinkGetter<INpcGetter>> Fauna
        {
            get => this._Fauna;
            init => this._Fauna = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>> IPlanetBiomeGetter.Fauna => _Fauna;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _Keywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords
        {
            get => this._Keywords;
            init => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> IPlanetBiomeGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        ExtendedList<IFormLinkGetter<IKeywordGetter>>? IKeyworded<IKeywordGetter>.Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value ?? new();
        }
        #endregion
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PlanetFlora> _Flora = new ExtendedList<PlanetFlora>();
        public ExtendedList<PlanetFlora> Flora
        {
            get => this._Flora;
            init => this._Flora = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlanetFloraGetter> IPlanetBiomeGetter.Flora => _Flora;
        #endregion

        #endregion
        #region UnknownItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PlanetBiomeUnknownItem> _UnknownItems = new ExtendedList<PlanetBiomeUnknownItem>();
        public ExtendedList<PlanetBiomeUnknownItem> UnknownItems
        {
            get => this._UnknownItems;
            init => this._UnknownItems = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlanetBiomeUnknownItemGetter> IPlanetBiomeGetter.UnknownItems => _UnknownItems;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetBiomeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetBiomeGetter rhs) return false;
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetBiomeGetter? obj)
        {
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Biome = initialValue;
                this.Chance = initialValue;
                this.Unknown2 = initialValue;
                this.ResourceGeneration = initialValue;
                this.Fauna = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flora = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetFlora.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PlanetFlora.Mask<TItem>?>>());
                this.UnknownItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiomeUnknownItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PlanetBiomeUnknownItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem Biome,
                TItem Chance,
                TItem Unknown2,
                TItem ResourceGeneration,
                TItem Fauna,
                TItem Keywords,
                TItem Flora,
                TItem UnknownItems)
            {
                this.Biome = Biome;
                this.Chance = Chance;
                this.Unknown2 = Unknown2;
                this.ResourceGeneration = ResourceGeneration;
                this.Fauna = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Fauna, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flora = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetFlora.Mask<TItem>?>>?>(Flora, Enumerable.Empty<MaskItemIndexed<TItem, PlanetFlora.Mask<TItem>?>>());
                this.UnknownItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiomeUnknownItem.Mask<TItem>?>>?>(UnknownItems, Enumerable.Empty<MaskItemIndexed<TItem, PlanetBiomeUnknownItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Biome;
            public TItem Chance;
            public TItem Unknown2;
            public TItem ResourceGeneration;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Fauna;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetFlora.Mask<TItem>?>>?>? Flora;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiomeUnknownItem.Mask<TItem>?>>?>? UnknownItems;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Biome, rhs.Biome)) return false;
                if (!object.Equals(this.Chance, rhs.Chance)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ResourceGeneration, rhs.ResourceGeneration)) return false;
                if (!object.Equals(this.Fauna, rhs.Fauna)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Flora, rhs.Flora)) return false;
                if (!object.Equals(this.UnknownItems, rhs.UnknownItems)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Biome);
                hash.Add(this.Chance);
                hash.Add(this.Unknown2);
                hash.Add(this.ResourceGeneration);
                hash.Add(this.Fauna);
                hash.Add(this.Keywords);
                hash.Add(this.Flora);
                hash.Add(this.UnknownItems);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Biome)) return false;
                if (!eval(this.Chance)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ResourceGeneration)) return false;
                if (this.Fauna != null)
                {
                    if (!eval(this.Fauna.Overall)) return false;
                    if (this.Fauna.Specific != null)
                    {
                        foreach (var item in this.Fauna.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Flora != null)
                {
                    if (!eval(this.Flora.Overall)) return false;
                    if (this.Flora.Specific != null)
                    {
                        foreach (var item in this.Flora.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownItems != null)
                {
                    if (!eval(this.UnknownItems.Overall)) return false;
                    if (this.UnknownItems.Specific != null)
                    {
                        foreach (var item in this.UnknownItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Biome)) return true;
                if (eval(this.Chance)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ResourceGeneration)) return true;
                if (this.Fauna != null)
                {
                    if (eval(this.Fauna.Overall)) return true;
                    if (this.Fauna.Specific != null)
                    {
                        foreach (var item in this.Fauna.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Flora != null)
                {
                    if (eval(this.Flora.Overall)) return true;
                    if (this.Flora.Specific != null)
                    {
                        foreach (var item in this.Flora.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownItems != null)
                {
                    if (eval(this.UnknownItems.Overall)) return true;
                    if (this.UnknownItems.Specific != null)
                    {
                        foreach (var item in this.UnknownItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetBiome.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Biome = eval(this.Biome);
                obj.Chance = eval(this.Chance);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ResourceGeneration = eval(this.ResourceGeneration);
                if (Fauna != null)
                {
                    obj.Fauna = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Fauna.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Fauna.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Fauna.Specific = l;
                        foreach (var item in Fauna.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Flora != null)
                {
                    obj.Flora = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PlanetFlora.Mask<R>?>>?>(eval(this.Flora.Overall), Enumerable.Empty<MaskItemIndexed<R, PlanetFlora.Mask<R>?>>());
                    if (Flora.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PlanetFlora.Mask<R>?>>();
                        obj.Flora.Specific = l;
                        foreach (var item in Flora.Specific)
                        {
                            MaskItemIndexed<R, PlanetFlora.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PlanetFlora.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnknownItems != null)
                {
                    obj.UnknownItems = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PlanetBiomeUnknownItem.Mask<R>?>>?>(eval(this.UnknownItems.Overall), Enumerable.Empty<MaskItemIndexed<R, PlanetBiomeUnknownItem.Mask<R>?>>());
                    if (UnknownItems.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PlanetBiomeUnknownItem.Mask<R>?>>();
                        obj.UnknownItems.Specific = l;
                        foreach (var item in UnknownItems.Specific)
                        {
                            MaskItemIndexed<R, PlanetBiomeUnknownItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PlanetBiomeUnknownItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetBiome.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetBiome.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetBiome.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Biome ?? true)
                    {
                        sb.AppendItem(Biome, "Biome");
                    }
                    if (printMask?.Chance ?? true)
                    {
                        sb.AppendItem(Chance, "Chance");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ResourceGeneration ?? true)
                    {
                        sb.AppendItem(ResourceGeneration, "ResourceGeneration");
                    }
                    if ((printMask?.Fauna?.Overall ?? true)
                        && Fauna is {} FaunaItem)
                    {
                        sb.AppendLine("Fauna =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaunaItem.Overall);
                            if (FaunaItem.Specific != null)
                            {
                                foreach (var subItem in FaunaItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Flora?.Overall ?? true)
                        && Flora is {} FloraItem)
                    {
                        sb.AppendLine("Flora =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FloraItem.Overall);
                            if (FloraItem.Specific != null)
                            {
                                foreach (var subItem in FloraItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.UnknownItems?.Overall ?? true)
                        && UnknownItems is {} UnknownItemsItem)
                    {
                        sb.AppendLine("UnknownItems =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownItemsItem.Overall);
                            if (UnknownItemsItem.Specific != null)
                            {
                                foreach (var subItem in UnknownItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Biome;
            public Exception? Chance;
            public Exception? Unknown2;
            public Exception? ResourceGeneration;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Fauna;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetFlora.ErrorMask?>>?>? Flora;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiomeUnknownItem.ErrorMask?>>?>? UnknownItems;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlanetBiome_FieldIndex enu = (PlanetBiome_FieldIndex)index;
                switch (enu)
                {
                    case PlanetBiome_FieldIndex.Biome:
                        return Biome;
                    case PlanetBiome_FieldIndex.Chance:
                        return Chance;
                    case PlanetBiome_FieldIndex.Unknown2:
                        return Unknown2;
                    case PlanetBiome_FieldIndex.ResourceGeneration:
                        return ResourceGeneration;
                    case PlanetBiome_FieldIndex.Fauna:
                        return Fauna;
                    case PlanetBiome_FieldIndex.Keywords:
                        return Keywords;
                    case PlanetBiome_FieldIndex.Flora:
                        return Flora;
                    case PlanetBiome_FieldIndex.UnknownItems:
                        return UnknownItems;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlanetBiome_FieldIndex enu = (PlanetBiome_FieldIndex)index;
                switch (enu)
                {
                    case PlanetBiome_FieldIndex.Biome:
                        this.Biome = ex;
                        break;
                    case PlanetBiome_FieldIndex.Chance:
                        this.Chance = ex;
                        break;
                    case PlanetBiome_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case PlanetBiome_FieldIndex.ResourceGeneration:
                        this.ResourceGeneration = ex;
                        break;
                    case PlanetBiome_FieldIndex.Fauna:
                        this.Fauna = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlanetBiome_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlanetBiome_FieldIndex.Flora:
                        this.Flora = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetFlora.ErrorMask?>>?>(ex, null);
                        break;
                    case PlanetBiome_FieldIndex.UnknownItems:
                        this.UnknownItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiomeUnknownItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlanetBiome_FieldIndex enu = (PlanetBiome_FieldIndex)index;
                switch (enu)
                {
                    case PlanetBiome_FieldIndex.Biome:
                        this.Biome = (Exception?)obj;
                        break;
                    case PlanetBiome_FieldIndex.Chance:
                        this.Chance = (Exception?)obj;
                        break;
                    case PlanetBiome_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case PlanetBiome_FieldIndex.ResourceGeneration:
                        this.ResourceGeneration = (Exception?)obj;
                        break;
                    case PlanetBiome_FieldIndex.Fauna:
                        this.Fauna = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlanetBiome_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlanetBiome_FieldIndex.Flora:
                        this.Flora = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetFlora.ErrorMask?>>?>)obj;
                        break;
                    case PlanetBiome_FieldIndex.UnknownItems:
                        this.UnknownItems = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiomeUnknownItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Biome != null) return true;
                if (Chance != null) return true;
                if (Unknown2 != null) return true;
                if (ResourceGeneration != null) return true;
                if (Fauna != null) return true;
                if (Keywords != null) return true;
                if (Flora != null) return true;
                if (UnknownItems != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Biome, "Biome");
                }
                {
                    sb.AppendItem(Chance, "Chance");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(ResourceGeneration, "ResourceGeneration");
                }
                if (Fauna is {} FaunaItem)
                {
                    sb.AppendLine("Fauna =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaunaItem.Overall);
                        if (FaunaItem.Specific != null)
                        {
                            foreach (var subItem in FaunaItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Flora is {} FloraItem)
                {
                    sb.AppendLine("Flora =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FloraItem.Overall);
                        if (FloraItem.Specific != null)
                        {
                            foreach (var subItem in FloraItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (UnknownItems is {} UnknownItemsItem)
                {
                    sb.AppendLine("UnknownItems =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownItemsItem.Overall);
                        if (UnknownItemsItem.Specific != null)
                        {
                            foreach (var subItem in UnknownItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Biome = this.Biome.Combine(rhs.Biome);
                ret.Chance = this.Chance.Combine(rhs.Chance);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ResourceGeneration = this.ResourceGeneration.Combine(rhs.ResourceGeneration);
                ret.Fauna = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Fauna?.Overall, rhs.Fauna?.Overall), Noggog.ExceptionExt.Combine(this.Fauna?.Specific, rhs.Fauna?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Flora = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetFlora.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Flora?.Overall, rhs.Flora?.Overall), Noggog.ExceptionExt.Combine(this.Flora?.Specific, rhs.Flora?.Specific));
                ret.UnknownItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiomeUnknownItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.UnknownItems?.Overall, rhs.UnknownItems?.Overall), Noggog.ExceptionExt.Combine(this.UnknownItems?.Specific, rhs.UnknownItems?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Biome;
            public bool Chance;
            public bool Unknown2;
            public bool ResourceGeneration;
            public bool Fauna;
            public bool Keywords;
            public PlanetFlora.TranslationMask? Flora;
            public PlanetBiomeUnknownItem.TranslationMask? UnknownItems;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Biome = defaultOn;
                this.Chance = defaultOn;
                this.Unknown2 = defaultOn;
                this.ResourceGeneration = defaultOn;
                this.Fauna = defaultOn;
                this.Keywords = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Biome, null));
                ret.Add((Chance, null));
                ret.Add((Unknown2, null));
                ret.Add((ResourceGeneration, null));
                ret.Add((Fauna, null));
                ret.Add((Keywords, null));
                ret.Add((Flora == null ? DefaultOn : !Flora.GetCrystal().CopyNothing, Flora?.GetCrystal()));
                ret.Add((UnknownItems == null ? DefaultOn : !UnknownItems.GetCrystal().CopyNothing, UnknownItems?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetBiomeCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlanetBiomeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlanetBiomeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetBiomeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlanetBiome CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetBiome();
            ((PlanetBiomeSetterCommon)((IPlanetBiomeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetBiome item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetBiomeSetterCommon)((IPlanetBiomeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlanetBiome GetNew()
        {
            return new PlanetBiome();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetBiome :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IPlanetBiome>,
        IPlanetBiomeGetter
    {
        new IFormLink<IBiomeGetter> Biome { get; set; }
        new Single Chance { get; set; }
        new Int32 Unknown2 { get; set; }
        new IFormLink<IStarfieldMajorRecordGetter> ResourceGeneration { get; set; }
        new ExtendedList<IFormLinkGetter<INpcGetter>> Fauna { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        new ExtendedList<PlanetFlora> Flora { get; }
        new ExtendedList<PlanetBiomeUnknownItem> UnknownItems { get; }
    }

    public partial interface IPlanetBiomeGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IPlanetBiomeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlanetBiome_Registration.Instance;
        IFormLinkGetter<IBiomeGetter> Biome { get; }
        Single Chance { get; }
        Int32 Unknown2 { get; }
        IFormLinkGetter<IStarfieldMajorRecordGetter> ResourceGeneration { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>> Fauna { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        #endregion
        IReadOnlyList<IPlanetFloraGetter> Flora { get; }
        IReadOnlyList<IPlanetBiomeUnknownItemGetter> UnknownItems { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetBiomeMixIn
    {
        public static void Clear(this IPlanetBiome item)
        {
            ((PlanetBiomeSetterCommon)((IPlanetBiomeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetBiome.Mask<bool> GetEqualsMask(
            this IPlanetBiomeGetter item,
            IPlanetBiomeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetBiomeGetter item,
            string? name = null,
            PlanetBiome.Mask<bool>? printMask = null)
        {
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetBiomeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetBiome.Mask<bool>? printMask = null)
        {
            ((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetBiomeGetter item,
            IPlanetBiomeGetter rhs,
            PlanetBiome.TranslationMask? equalsMask = null)
        {
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetBiome lhs,
            IPlanetBiomeGetter rhs)
        {
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlanetBiome lhs,
            IPlanetBiomeGetter rhs,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlanetBiome lhs,
            IPlanetBiomeGetter rhs,
            out PlanetBiome.ErrorMask errorMask,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetBiome.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetBiome lhs,
            IPlanetBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetBiome DeepCopy(
            this IPlanetBiomeGetter item,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            return ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetBiome DeepCopy(
            this IPlanetBiomeGetter item,
            out PlanetBiome.ErrorMask errorMask,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            return ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetBiome DeepCopy(
            this IPlanetBiomeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetBiome item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetBiomeSetterCommon)((IPlanetBiomeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetBiome_FieldIndex
    {
        Biome = 0,
        Chance = 1,
        Unknown2 = 2,
        ResourceGeneration = 3,
        Fauna = 4,
        Keywords = 5,
        Flora = 6,
        UnknownItems = 7,
    }
    #endregion

    #region Registration
    internal partial class PlanetBiome_Registration : ILoquiRegistration
    {
        public static readonly PlanetBiome_Registration Instance = new PlanetBiome_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(PlanetBiome.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetBiome.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetBiome);

        public static readonly Type GetterType = typeof(IPlanetBiomeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetBiome);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetBiome";

        public const string Name = "PlanetBiome";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PPBD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PPBD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetBiomeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetBiomeSetterCommon
    {
        public static readonly PlanetBiomeSetterCommon Instance = new PlanetBiomeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetBiome item)
        {
            ClearPartial();
            item.Biome.Clear();
            item.Chance = default(Single);
            item.Unknown2 = default(Int32);
            item.ResourceGeneration.Clear();
            item.Fauna.Clear();
            item.Keywords.Clear();
            item.Flora.Clear();
            item.UnknownItems.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetBiome obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Biome.Relink(mapping);
            obj.ResourceGeneration.Relink(mapping);
            obj.Fauna.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.Flora.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetBiome item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.PPBD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlanetBiomeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PlanetBiomeCommon
    {
        public static readonly PlanetBiomeCommon Instance = new PlanetBiomeCommon();

        public PlanetBiome.Mask<bool> GetEqualsMask(
            IPlanetBiomeGetter item,
            IPlanetBiomeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetBiome.Mask<bool>(false);
            ((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetBiomeGetter item,
            IPlanetBiomeGetter rhs,
            PlanetBiome.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Biome = item.Biome.Equals(rhs.Biome);
            ret.Chance = item.Chance.EqualsWithin(rhs.Chance);
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ResourceGeneration = item.ResourceGeneration.Equals(rhs.ResourceGeneration);
            ret.Fauna = item.Fauna.CollectionEqualsHelper(
                rhs.Fauna,
                (l, r) => object.Equals(l, r),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Flora = item.Flora.CollectionEqualsHelper(
                rhs.Flora,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownItems = item.UnknownItems.CollectionEqualsHelper(
                rhs.UnknownItems,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IPlanetBiomeGetter item,
            string? name = null,
            PlanetBiome.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetBiomeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetBiome.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetBiome =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetBiome) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetBiomeGetter item,
            StructuredStringBuilder sb,
            PlanetBiome.Mask<bool>? printMask = null)
        {
            if (printMask?.Biome ?? true)
            {
                sb.AppendItem(item.Biome.FormKey, "Biome");
            }
            if (printMask?.Chance ?? true)
            {
                sb.AppendItem(item.Chance, "Chance");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ResourceGeneration ?? true)
            {
                sb.AppendItem(item.ResourceGeneration.FormKey, "ResourceGeneration");
            }
            if (printMask?.Fauna?.Overall ?? true)
            {
                sb.AppendLine("Fauna =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Fauna)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Keywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Flora?.Overall ?? true)
            {
                sb.AppendLine("Flora =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Flora)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.UnknownItems?.Overall ?? true)
            {
                sb.AppendLine("UnknownItems =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.UnknownItems)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetBiomeGetter? lhs,
            IPlanetBiomeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Biome) ?? true))
            {
                if (!lhs.Biome.Equals(rhs.Biome)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Chance) ?? true))
            {
                if (!lhs.Chance.EqualsWithin(rhs.Chance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.ResourceGeneration) ?? true))
            {
                if (!lhs.ResourceGeneration.Equals(rhs.ResourceGeneration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Fauna) ?? true))
            {
                if (!lhs.Fauna.SequenceEqualNullable(rhs.Fauna)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Flora) ?? true))
            {
                if (!lhs.Flora.SequenceEqual(rhs.Flora, (l, r) => ((PlanetFloraCommon)((IPlanetFloraGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetBiome_FieldIndex.Flora)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.UnknownItems) ?? true))
            {
                if (!lhs.UnknownItems.SequenceEqual(rhs.UnknownItems, (l, r) => ((PlanetBiomeUnknownItemCommon)((IPlanetBiomeUnknownItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetBiome_FieldIndex.UnknownItems)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlanetBiomeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Biome);
            hash.Add(item.Chance);
            hash.Add(item.Unknown2);
            hash.Add(item.ResourceGeneration);
            hash.Add(item.Fauna);
            hash.Add(item.Keywords);
            hash.Add(item.Flora);
            hash.Add(item.UnknownItems);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlanetBiome.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetBiomeGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Biome);
            yield return FormLinkInformation.Factory(obj.ResourceGeneration);
            foreach (var item in obj.Fauna)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Keywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Flora.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlanetBiomeSetterTranslationCommon
    {
        public static readonly PlanetBiomeSetterTranslationCommon Instance = new PlanetBiomeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetBiome item,
            IPlanetBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Biome) ?? true))
            {
                item.Biome.SetTo(rhs.Biome.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Chance) ?? true))
            {
                item.Chance = rhs.Chance;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.ResourceGeneration) ?? true))
            {
                item.ResourceGeneration.SetTo(rhs.ResourceGeneration.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Fauna) ?? true))
            {
                errorMask?.PushIndex((int)PlanetBiome_FieldIndex.Fauna);
                try
                {
                    item.Fauna.SetTo(
                        rhs.Fauna
                            .Select(b => (IFormLinkGetter<INpcGetter>)new FormLink<INpcGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)PlanetBiome_FieldIndex.Keywords);
                try
                {
                    item.Keywords.SetTo(
                        rhs.Keywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.Flora) ?? true))
            {
                errorMask?.PushIndex((int)PlanetBiome_FieldIndex.Flora);
                try
                {
                    item.Flora.SetTo(
                        rhs.Flora
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetBiome_FieldIndex.UnknownItems) ?? true))
            {
                errorMask?.PushIndex((int)PlanetBiome_FieldIndex.UnknownItems);
                try
                {
                    item.UnknownItems.SetTo(
                        rhs.UnknownItems
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlanetBiome item,
            IPlanetBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlanetBiome DeepCopy(
            IPlanetBiomeGetter item,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            PlanetBiome ret = (PlanetBiome)((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).GetNew();
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetBiome DeepCopy(
            IPlanetBiomeGetter item,
            out PlanetBiome.ErrorMask errorMask,
            PlanetBiome.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetBiome ret = (PlanetBiome)((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).GetNew();
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetBiome.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetBiome DeepCopy(
            IPlanetBiomeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetBiome ret = (PlanetBiome)((PlanetBiomeCommon)((IPlanetBiomeGetter)item).CommonInstance()!).GetNew();
            ((PlanetBiomeSetterTranslationCommon)((IPlanetBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetBiome
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetBiome_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlanetBiome_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlanetBiomeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlanetBiomeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlanetBiomeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlanetBiomeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlanetBiomeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlanetBiomeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetBiomeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlanetBiomeBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlanetBiomeGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Biome);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Chance);
            writer.Write(item.Unknown2);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ResourceGeneration);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.Fauna,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Keywords,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPlanetFloraGetter>.Instance.Write(
                writer: writer,
                items: item.Flora,
                countLengthLength: 4,
                expectedLengthLength: 4,
                expectedLength: 9,
                transl: (MutagenWriter subWriter, IPlanetFloraGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PlanetFloraBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPlanetBiomeUnknownItemGetter>.Instance.Write(
                writer: writer,
                items: item.UnknownItems,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IPlanetBiomeUnknownItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PlanetBiomeUnknownItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPlanetBiomeGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.PPBD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetBiomeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetBiomeBinaryCreateTranslation
    {
        public static readonly PlanetBiomeBinaryCreateTranslation Instance = new PlanetBiomeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlanetBiome item,
            MutagenFrame frame)
        {
            item.Biome.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Chance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = frame.ReadInt32();
            item.ResourceGeneration.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Fauna.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.Keywords.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.Flora.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetFlora>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    expectedLengthLength: 4,
                    expectedLength: 9,
                    reader: frame,
                    transl: PlanetFlora.TryCreateFromBinary));
            item.UnknownItems.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetBiomeUnknownItem>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: PlanetBiomeUnknownItem.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetBiomeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlanetBiomeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetBiomeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetBiomeBinaryOverlay :
        PluginBinaryOverlay,
        IPlanetBiomeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetBiome_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlanetBiome_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlanetBiomeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlanetBiomeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlanetBiomeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlanetBiomeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlanetBiomeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetBiomeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlanetBiomeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetBiomeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<IBiomeGetter> Biome => FormLinkBinaryTranslation.Instance.OverlayFactory<IBiomeGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public Single Chance => _structData.Slice(0x4, 0x4).Float();
        public Int32 Unknown2 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        public IFormLinkGetter<IStarfieldMajorRecordGetter> ResourceGeneration => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(_package, _structData.Span.Slice(0xC, 0x4));
        #region Fauna
        public IReadOnlyList<IFormLinkGetter<INpcGetter>> Fauna => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<INpcGetter>>(_structData.Slice(0x10), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s));
        protected int FaunaEndingPos;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> Keywords => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<IKeywordGetter>>(_structData.Slice(FaunaEndingPos), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
        protected int KeywordsEndingPos;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Flora
        public IReadOnlyList<IPlanetFloraGetter> Flora => BinaryOverlayList.FactoryByCountLength<IPlanetFloraGetter>(_structData.Slice(KeywordsEndingPos), _package, 9, countLength: 4, expectedLengthLength: 4, (s, p) => PlanetFloraBinaryOverlay.PlanetFloraFactory(s, p));
        protected int FloraEndingPos;
        #endregion
        #region UnknownItems
        public IReadOnlyList<IPlanetBiomeUnknownItemGetter> UnknownItems => BinaryOverlayList.FactoryByCountLength<IPlanetBiomeUnknownItemGetter>(_structData.Slice(FloraEndingPos), _package, 16, countLength: 4, (s, p) => PlanetBiomeUnknownItemBinaryOverlay.PlanetBiomeUnknownItemFactory(s, p));
        protected int UnknownItemsEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetBiomeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void PlanetBiomeParseEndingPositions(
            PlanetBiomeBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.FaunaEndingPos = 0x10 + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(0x10)) * 4 + 4;
            ret.KeywordsEndingPos = ret.FaunaEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.FaunaEndingPos)) * 4 + 4;
            ret.FloraEndingPos = ret.KeywordsEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.KeywordsEndingPos)) * 9 + 4 + 4;
            ret.UnknownItemsEndingPos = ret.FloraEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.FloraEndingPos)) * 16 + 4;
        }

        public static IPlanetBiomeGetter PlanetBiomeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetBiomeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            PlanetBiomeParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPlanetBiomeGetter PlanetBiomeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetBiomeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetBiomeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetBiomeGetter rhs) return false;
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetBiomeGetter? obj)
        {
            return ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetBiomeCommon)((IPlanetBiomeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

