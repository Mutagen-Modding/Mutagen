/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlacedObjectMapMarker :
        IEquatable<IPlacedObjectMapMarkerGetter>,
        ILoquiObjectSetter<PlacedObjectMapMarker>,
        IPlacedObjectMapMarker
    {
        #region Ctor
        public PlacedObjectMapMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public PlacedObjectMapMarker.Flag Flags { get; set; } = default(PlacedObjectMapMarker.Flag);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString Name { get; set; } = string.Empty;
        ITranslatedStringGetter IPlacedObjectMapMarkerGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Type
        public SByte Type { get; set; } = default(SByte);
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default(Byte);
        #endregion
        #region VNAM
        public UInt16? VNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IPlacedObjectMapMarkerGetter.VNAM => this.VNAM;
        #endregion
        #region UNAM
        public TranslatedString? UNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IPlacedObjectMapMarkerGetter.UNAM => this.UNAM;
        #endregion
        #region VISI
        public Byte? VISI { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlacedObjectMapMarkerGetter.VISI => this.VISI;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMapMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectMapMarkerGetter rhs) return false;
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectMapMarkerGetter? obj)
        {
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.Name = initialValue;
                this.Type = initialValue;
                this.Unknown = initialValue;
                this.VNAM = initialValue;
                this.UNAM = initialValue;
                this.VISI = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem Name,
                TItem Type,
                TItem Unknown,
                TItem VNAM,
                TItem UNAM,
                TItem VISI)
            {
                this.Flags = Flags;
                this.Name = Name;
                this.Type = Type;
                this.Unknown = Unknown;
                this.VNAM = VNAM;
                this.UNAM = UNAM;
                this.VISI = VISI;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem Name;
            public TItem Type;
            public TItem Unknown;
            public TItem VNAM;
            public TItem UNAM;
            public TItem VISI;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.UNAM, rhs.UNAM)) return false;
                if (!object.Equals(this.VISI, rhs.VISI)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.Name);
                hash.Add(this.Type);
                hash.Add(this.Unknown);
                hash.Add(this.VNAM);
                hash.Add(this.UNAM);
                hash.Add(this.VISI);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.VNAM)) return false;
                if (!eval(this.UNAM)) return false;
                if (!eval(this.VISI)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.VNAM)) return true;
                if (eval(this.UNAM)) return true;
                if (eval(this.VISI)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObjectMapMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.Name = eval(this.Name);
                obj.Type = eval(this.Type);
                obj.Unknown = eval(this.Unknown);
                obj.VNAM = eval(this.VNAM);
                obj.UNAM = eval(this.UNAM);
                obj.VISI = eval(this.VISI);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedObjectMapMarker.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedObjectMapMarker.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedObjectMapMarker.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if (printMask?.UNAM ?? true)
                    {
                        sb.AppendItem(UNAM, "UNAM");
                    }
                    if (printMask?.VISI ?? true)
                    {
                        sb.AppendItem(VISI, "VISI");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? Name;
            public Exception? Type;
            public Exception? Unknown;
            public Exception? VNAM;
            public Exception? UNAM;
            public Exception? VISI;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlacedObjectMapMarker_FieldIndex enu = (PlacedObjectMapMarker_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectMapMarker_FieldIndex.Flags:
                        return Flags;
                    case PlacedObjectMapMarker_FieldIndex.Name:
                        return Name;
                    case PlacedObjectMapMarker_FieldIndex.Type:
                        return Type;
                    case PlacedObjectMapMarker_FieldIndex.Unknown:
                        return Unknown;
                    case PlacedObjectMapMarker_FieldIndex.VNAM:
                        return VNAM;
                    case PlacedObjectMapMarker_FieldIndex.UNAM:
                        return UNAM;
                    case PlacedObjectMapMarker_FieldIndex.VISI:
                        return VISI;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlacedObjectMapMarker_FieldIndex enu = (PlacedObjectMapMarker_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectMapMarker_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.UNAM:
                        this.UNAM = ex;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.VISI:
                        this.VISI = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlacedObjectMapMarker_FieldIndex enu = (PlacedObjectMapMarker_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObjectMapMarker_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.UNAM:
                        this.UNAM = (Exception?)obj;
                        break;
                    case PlacedObjectMapMarker_FieldIndex.VISI:
                        this.VISI = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Name != null) return true;
                if (Type != null) return true;
                if (Unknown != null) return true;
                if (VNAM != null) return true;
                if (UNAM != null) return true;
                if (VISI != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                {
                    sb.AppendItem(UNAM, "UNAM");
                }
                {
                    sb.AppendItem(VISI, "VISI");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.UNAM = this.UNAM.Combine(rhs.UNAM);
                ret.VISI = this.VISI.Combine(rhs.VISI);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool Name;
            public bool Type;
            public bool Unknown;
            public bool VNAM;
            public bool UNAM;
            public bool VISI;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.Name = defaultOn;
                this.Type = defaultOn;
                this.Unknown = defaultOn;
                this.VNAM = defaultOn;
                this.UNAM = defaultOn;
                this.VISI = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((Name, null));
                ret.Add((Type, null));
                ret.Add((Unknown, null));
                ret.Add((VNAM, null));
                ret.Add((UNAM, null));
                ret.Add((VISI, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectMapMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectMapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlacedObjectMapMarker CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedObjectMapMarker();
            ((PlacedObjectMapMarkerSetterCommon)((IPlacedObjectMapMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObjectMapMarker item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedObjectMapMarkerSetterCommon)((IPlacedObjectMapMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlacedObjectMapMarker GetNew()
        {
            return new PlacedObjectMapMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObjectMapMarker :
        ILoquiObjectSetter<IPlacedObjectMapMarker>,
        INamedRequired,
        IPlacedObjectMapMarkerGetter,
        ITranslatedNamedRequired
    {
        new PlacedObjectMapMarker.Flag Flags { get; set; }
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString Name { get; set; }
        new SByte Type { get; set; }
        new Byte Unknown { get; set; }
        new UInt16? VNAM { get; set; }
        new TranslatedString? UNAM { get; set; }
        new Byte? VISI { get; set; }
    }

    public partial interface IPlacedObjectMapMarkerGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPlacedObjectMapMarkerGetter>,
        INamedRequiredGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlacedObjectMapMarker_Registration.Instance;
        PlacedObjectMapMarker.Flag Flags { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter Name { get; }
        #endregion
        SByte Type { get; }
        Byte Unknown { get; }
        UInt16? VNAM { get; }
        ITranslatedStringGetter? UNAM { get; }
        Byte? VISI { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectMapMarkerMixIn
    {
        public static void Clear(this IPlacedObjectMapMarker item)
        {
            ((PlacedObjectMapMarkerSetterCommon)((IPlacedObjectMapMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObjectMapMarker.Mask<bool> GetEqualsMask(
            this IPlacedObjectMapMarkerGetter item,
            IPlacedObjectMapMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedObjectMapMarkerGetter item,
            string? name = null,
            PlacedObjectMapMarker.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedObjectMapMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectMapMarker.Mask<bool>? printMask = null)
        {
            ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectMapMarkerGetter item,
            IPlacedObjectMapMarkerGetter rhs,
            PlacedObjectMapMarker.TranslationMask? equalsMask = null)
        {
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedObjectMapMarker lhs,
            IPlacedObjectMapMarkerGetter rhs)
        {
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectMapMarker lhs,
            IPlacedObjectMapMarkerGetter rhs,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlacedObjectMapMarker lhs,
            IPlacedObjectMapMarkerGetter rhs,
            out PlacedObjectMapMarker.ErrorMask errorMask,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObjectMapMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectMapMarker lhs,
            IPlacedObjectMapMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObjectMapMarker DeepCopy(
            this IPlacedObjectMapMarkerGetter item,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObjectMapMarker DeepCopy(
            this IPlacedObjectMapMarkerGetter item,
            out PlacedObjectMapMarker.ErrorMask errorMask,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObjectMapMarker DeepCopy(
            this IPlacedObjectMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectMapMarker item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedObjectMapMarkerSetterCommon)((IPlacedObjectMapMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlacedObjectMapMarker_FieldIndex
    {
        Flags = 0,
        Name = 1,
        Type = 2,
        Unknown = 3,
        VNAM = 4,
        UNAM = 5,
        VISI = 6,
    }
    #endregion

    #region Registration
    internal partial class PlacedObjectMapMarker_Registration : ILoquiRegistration
    {
        public static readonly PlacedObjectMapMarker_Registration Instance = new PlacedObjectMapMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(PlacedObjectMapMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObjectMapMarker.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObjectMapMarker);

        public static readonly Type GetterType = typeof(IPlacedObjectMapMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObjectMapMarker);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlacedObjectMapMarker";

        public const string Name = "PlacedObjectMapMarker";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FNAM);
            var all = RecordCollection.Factory(
                RecordTypes.FNAM,
                RecordTypes.FULL,
                RecordTypes.TNAM,
                RecordTypes.VNAM,
                RecordTypes.UNAM,
                RecordTypes.VISI);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectMapMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedObjectMapMarkerSetterCommon
    {
        public static readonly PlacedObjectMapMarkerSetterCommon Instance = new PlacedObjectMapMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectMapMarker item)
        {
            ClearPartial();
            item.Flags = default(PlacedObjectMapMarker.Flag);
            item.Name.Clear();
            item.Type = default(SByte);
            item.Unknown = default(Byte);
            item.VNAM = default;
            item.UNAM = default;
            item.VISI = default;
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObjectMapMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectMapMarker item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PlacedObjectMapMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectMapMarkerCommon
    {
        public static readonly PlacedObjectMapMarkerCommon Instance = new PlacedObjectMapMarkerCommon();

        public PlacedObjectMapMarker.Mask<bool> GetEqualsMask(
            IPlacedObjectMapMarkerGetter item,
            IPlacedObjectMapMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObjectMapMarker.Mask<bool>(false);
            ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectMapMarkerGetter item,
            IPlacedObjectMapMarkerGetter rhs,
            PlacedObjectMapMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Type = item.Type == rhs.Type;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.VNAM = item.VNAM == rhs.VNAM;
            ret.UNAM = object.Equals(item.UNAM, rhs.UNAM);
            ret.VISI = item.VISI == rhs.VISI;
        }
        
        public string Print(
            IPlacedObjectMapMarkerGetter item,
            string? name = null,
            PlacedObjectMapMarker.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedObjectMapMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObjectMapMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedObjectMapMarker =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedObjectMapMarker) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedObjectMapMarkerGetter item,
            StructuredStringBuilder sb,
            PlacedObjectMapMarker.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM is {} VNAMItem)
            {
                sb.AppendItem(VNAMItem, "VNAM");
            }
            if ((printMask?.UNAM ?? true)
                && item.UNAM is {} UNAMItem)
            {
                sb.AppendItem(UNAMItem, "UNAM");
            }
            if ((printMask?.VISI ?? true)
                && item.VISI is {} VISIItem)
            {
                sb.AppendItem(VISIItem, "VISI");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectMapMarkerGetter? lhs,
            IPlacedObjectMapMarkerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.VNAM) ?? true))
            {
                if (lhs.VNAM != rhs.VNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.UNAM) ?? true))
            {
                if (!object.Equals(lhs.UNAM, rhs.UNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.VISI) ?? true))
            {
                if (lhs.VISI != rhs.VISI) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlacedObjectMapMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.Name);
            hash.Add(item.Type);
            hash.Add(item.Unknown);
            if (item.VNAM is {} VNAMitem)
            {
                hash.Add(VNAMitem);
            }
            if (item.UNAM is {} UNAMitem)
            {
                hash.Add(UNAMitem);
            }
            if (item.VISI is {} VISIitem)
            {
                hash.Add(VISIitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlacedObjectMapMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedObjectMapMarkerGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectMapMarkerSetterTranslationCommon
    {
        public static readonly PlacedObjectMapMarkerSetterTranslationCommon Instance = new PlacedObjectMapMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectMapMarker item,
            IPlacedObjectMapMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.VNAM) ?? true))
            {
                item.VNAM = rhs.VNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.UNAM) ?? true))
            {
                item.UNAM = rhs.UNAM?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObjectMapMarker_FieldIndex.VISI) ?? true))
            {
                item.VISI = rhs.VISI;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedObjectMapMarker item,
            IPlacedObjectMapMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlacedObjectMapMarker DeepCopy(
            IPlacedObjectMapMarkerGetter item,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            PlacedObjectMapMarker ret = (PlacedObjectMapMarker)((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObjectMapMarker DeepCopy(
            IPlacedObjectMapMarkerGetter item,
            out PlacedObjectMapMarker.ErrorMask errorMask,
            PlacedObjectMapMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObjectMapMarker ret = (PlacedObjectMapMarker)((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObjectMapMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObjectMapMarker DeepCopy(
            IPlacedObjectMapMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObjectMapMarker ret = (PlacedObjectMapMarker)((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectMapMarkerSetterTranslationCommon)((IPlacedObjectMapMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectMapMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectMapMarker_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectMapMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectMapMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlacedObjectMapMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectMapMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectMapMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlacedObjectMapMarkerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlacedObjectMapMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlacedObjectMapMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlacedObjectMapMarkerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlacedObjectMapMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            EnumBinaryTranslation<PlacedObjectMapMarker.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TNAM)))
            {
                writer.Write(item.Type);
                writer.Write(item.Unknown);
            }
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UNAM,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VISI,
                header: translationParams.ConvertToCustom(RecordTypes.VISI));
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectMapMarkerGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedObjectMapMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedObjectMapMarkerBinaryCreateTranslation
    {
        public static readonly PlacedObjectMapMarkerBinaryCreateTranslation Instance = new PlacedObjectMapMarkerBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPlacedObjectMapMarker item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)PlacedObjectMapMarker_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<PlacedObjectMapMarker.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlacedObjectMapMarker_FieldIndex.Flags;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlacedObjectMapMarker_FieldIndex.Name;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.Type = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown = dataFrame.ReadUInt8();
                    return (int)PlacedObjectMapMarker_FieldIndex.Unknown;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNAM = frame.ReadUInt16();
                    return (int)PlacedObjectMapMarker_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UNAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlacedObjectMapMarker_FieldIndex.UNAM;
                }
                case RecordTypeInts.VISI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VISI = frame.ReadUInt8();
                    return (int)PlacedObjectMapMarker_FieldIndex.VISI;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlacedObjectMapMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlacedObjectMapMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectMapMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlacedObjectMapMarkerBinaryOverlay :
        PluginBinaryOverlay,
        IPlacedObjectMapMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObjectMapMarker_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlacedObjectMapMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlacedObjectMapMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlacedObjectMapMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlacedObjectMapMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlacedObjectMapMarkerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlacedObjectMapMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlacedObjectMapMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectMapMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Flags
        private int? _FlagsLocation;
        public PlacedObjectMapMarker.Flag Flags => EnumBinaryTranslation<PlacedObjectMapMarker.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_FlagsLocation, _recordData, _package, 4);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        #endregion
        #endregion
        private RangeInt32? _TNAMLocation;
        #region Type
        private int _TypeLocation => _TNAMLocation!.Value.Min;
        private bool _Type_IsSet => _TNAMLocation.HasValue;
        public SByte Type => _Type_IsSet ? (sbyte)_recordData.Slice(_TypeLocation, 1)[0] : default(SByte);
        #endregion
        #region Unknown
        private int _UnknownLocation => _TNAMLocation!.Value.Min + 0x1;
        private bool _Unknown_IsSet => _TNAMLocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _recordData.Span[_UnknownLocation] : default;
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public UInt16? VNAM => _VNAMLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAMLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region UNAM
        private int? _UNAMLocation;
        public ITranslatedStringGetter? UNAM => _UNAMLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _UNAMLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region VISI
        private int? _VISILocation;
        public Byte? VISI => _VISILocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VISILocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectMapMarkerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedObjectMapMarkerGetter PlacedObjectMapMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedObjectMapMarkerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedObjectMapMarkerGetter PlacedObjectMapMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedObjectMapMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)PlacedObjectMapMarker_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    _FlagsLocation = (stream.Position - offset);
                    return (int)PlacedObjectMapMarker_FieldIndex.Flags;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)PlacedObjectMapMarker_FieldIndex.Name;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)PlacedObjectMapMarker_FieldIndex.Unknown;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)PlacedObjectMapMarker_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    _UNAMLocation = (stream.Position - offset);
                    return (int)PlacedObjectMapMarker_FieldIndex.UNAM;
                }
                case RecordTypeInts.VISI:
                {
                    _VISILocation = (stream.Position - offset);
                    return (int)PlacedObjectMapMarker_FieldIndex.VISI;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMapMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlacedObjectMapMarkerGetter rhs) return false;
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectMapMarkerGetter? obj)
        {
            return ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectMapMarkerCommon)((IPlacedObjectMapMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

