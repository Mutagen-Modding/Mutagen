/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class FurnitureInstanceNamingRules :
        AInstanceNamingRules,
        IEquatable<IFurnitureInstanceNamingRulesGetter>,
        IFurnitureInstanceNamingRules,
        ILoquiObjectSetter<FurnitureInstanceNamingRules>
    {
        #region Ctor
        public FurnitureInstanceNamingRules()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Rules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>> _Rules = new ExtendedList<InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>>();
        public ExtendedList<InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>> Rules
        {
            get => this._Rules;
            init => this._Rules = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>> IFurnitureInstanceNamingRulesGetter.Rules => _Rules;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureInstanceNamingRulesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFurnitureInstanceNamingRulesGetter rhs) return false;
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFurnitureInstanceNamingRulesGetter? obj)
        {
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AInstanceNamingRules.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem Rules)
            : base()
            {
                this.Rules = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, InstanceNamingRuleSet.Mask<TItem>?>>?>(Rules, Enumerable.Empty<MaskItemIndexed<TItem, InstanceNamingRuleSet.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, InstanceNamingRuleSet.Mask<TItem>?>>?>? Rules;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Rules, rhs.Rules)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Rules);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Rules != null)
                {
                    if (!eval(this.Rules.Overall)) return false;
                    if (this.Rules.Specific != null)
                    {
                        foreach (var item in this.Rules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Rules != null)
                {
                    if (eval(this.Rules.Overall)) return true;
                    if (this.Rules.Specific != null)
                    {
                        foreach (var item in this.Rules.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FurnitureInstanceNamingRules.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Rules != null)
                {
                    obj.Rules = new MaskItem<R, IEnumerable<MaskItemIndexed<R, InstanceNamingRuleSet.Mask<R>?>>?>(eval(this.Rules.Overall), Enumerable.Empty<MaskItemIndexed<R, InstanceNamingRuleSet.Mask<R>?>>());
                    if (Rules.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, InstanceNamingRuleSet.Mask<R>?>>();
                        obj.Rules.Specific = l;
                        foreach (var item in Rules.Specific)
                        {
                            MaskItemIndexed<R, InstanceNamingRuleSet.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, InstanceNamingRuleSet.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FurnitureInstanceNamingRules.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Rules?.Overall ?? true)
                        && Rules is {} RulesItem)
                    {
                        sb.AppendLine("Rules =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RulesItem.Overall);
                            if (RulesItem.Specific != null)
                            {
                                foreach (var subItem in RulesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AInstanceNamingRules.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InstanceNamingRuleSet.ErrorMask?>>?>? Rules;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FurnitureInstanceNamingRules_FieldIndex enu = (FurnitureInstanceNamingRules_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureInstanceNamingRules_FieldIndex.Rules:
                        return Rules;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FurnitureInstanceNamingRules_FieldIndex enu = (FurnitureInstanceNamingRules_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureInstanceNamingRules_FieldIndex.Rules:
                        this.Rules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InstanceNamingRuleSet.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FurnitureInstanceNamingRules_FieldIndex enu = (FurnitureInstanceNamingRules_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureInstanceNamingRules_FieldIndex.Rules:
                        this.Rules = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InstanceNamingRuleSet.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Rules != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Rules is {} RulesItem)
                {
                    sb.AppendLine("Rules =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RulesItem.Overall);
                        if (RulesItem.Specific != null)
                        {
                            foreach (var subItem in RulesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Rules = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, InstanceNamingRuleSet.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Rules?.Overall, rhs.Rules?.Overall), Noggog.ExceptionExt.Combine(this.Rules?.Specific, rhs.Rules?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AInstanceNamingRules.TranslationMask,
            ITranslationMask
        {
            #region Members
            public InstanceNamingRuleSet.TranslationMask? Rules;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Rules == null ? DefaultOn : !Rules.GetCrystal().CopyNothing, Rules?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FurnitureInstanceNamingRulesCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureInstanceNamingRulesSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureInstanceNamingRulesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FurnitureInstanceNamingRulesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FurnitureInstanceNamingRules CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FurnitureInstanceNamingRules();
            ((FurnitureInstanceNamingRulesSetterCommon)((IFurnitureInstanceNamingRulesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FurnitureInstanceNamingRules item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FurnitureInstanceNamingRulesSetterCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FurnitureInstanceNamingRules GetNew()
        {
            return new FurnitureInstanceNamingRules();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurnitureInstanceNamingRules :
        IAInstanceNamingRules,
        IFormLinkContainer,
        IFurnitureInstanceNamingRulesGetter,
        ILoquiObjectSetter<IFurnitureInstanceNamingRules>
    {
        new ExtendedList<InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>> Rules { get; }
    }

    public partial interface IFurnitureInstanceNamingRulesGetter :
        IAInstanceNamingRulesGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFurnitureInstanceNamingRulesGetter>
    {
        static new ILoquiRegistration StaticRegistration => FurnitureInstanceNamingRules_Registration.Instance;
        IReadOnlyList<IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>> Rules { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureInstanceNamingRulesMixIn
    {
        public static void Clear(this IFurnitureInstanceNamingRules item)
        {
            ((FurnitureInstanceNamingRulesSetterCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FurnitureInstanceNamingRules.Mask<bool> GetEqualsMask(
            this IFurnitureInstanceNamingRulesGetter item,
            IFurnitureInstanceNamingRulesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFurnitureInstanceNamingRulesGetter item,
            string? name = null,
            FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
        {
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFurnitureInstanceNamingRulesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
        {
            ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFurnitureInstanceNamingRulesGetter item,
            IFurnitureInstanceNamingRulesGetter rhs,
            FurnitureInstanceNamingRules.TranslationMask? equalsMask = null)
        {
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFurnitureInstanceNamingRules lhs,
            IFurnitureInstanceNamingRulesGetter rhs,
            out FurnitureInstanceNamingRules.ErrorMask errorMask,
            FurnitureInstanceNamingRules.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FurnitureInstanceNamingRules.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureInstanceNamingRules lhs,
            IFurnitureInstanceNamingRulesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FurnitureInstanceNamingRules DeepCopy(
            this IFurnitureInstanceNamingRulesGetter item,
            FurnitureInstanceNamingRules.TranslationMask? copyMask = null)
        {
            return ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FurnitureInstanceNamingRules DeepCopy(
            this IFurnitureInstanceNamingRulesGetter item,
            out FurnitureInstanceNamingRules.ErrorMask errorMask,
            FurnitureInstanceNamingRules.TranslationMask? copyMask = null)
        {
            return ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FurnitureInstanceNamingRules DeepCopy(
            this IFurnitureInstanceNamingRulesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFurnitureInstanceNamingRules item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FurnitureInstanceNamingRulesSetterCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum FurnitureInstanceNamingRules_FieldIndex
    {
        Rules = 0,
    }
    #endregion

    #region Registration
    internal partial class FurnitureInstanceNamingRules_Registration : ILoquiRegistration
    {
        public static readonly FurnitureInstanceNamingRules_Registration Instance = new FurnitureInstanceNamingRules_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(FurnitureInstanceNamingRules.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FurnitureInstanceNamingRules.ErrorMask);

        public static readonly Type ClassType = typeof(FurnitureInstanceNamingRules);

        public static readonly Type GetterType = typeof(IFurnitureInstanceNamingRulesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurnitureInstanceNamingRules);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.FurnitureInstanceNamingRules";

        public const string Name = "FurnitureInstanceNamingRules";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.VNAM);
            var all = RecordCollection.Factory(
                RecordTypes.VNAM,
                RecordTypes.WNAM,
                RecordTypes.KSIZ,
                RecordTypes.KWDA,
                RecordTypes.XNAM,
                RecordTypes.YNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FurnitureInstanceNamingRulesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FurnitureInstanceNamingRulesSetterCommon : AInstanceNamingRulesSetterCommon
    {
        public new static readonly FurnitureInstanceNamingRulesSetterCommon Instance = new FurnitureInstanceNamingRulesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureInstanceNamingRules item)
        {
            ClearPartial();
            item.Rules.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAInstanceNamingRules item)
        {
            Clear(item: (IFurnitureInstanceNamingRules)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFurnitureInstanceNamingRules obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Rules.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFurnitureInstanceNamingRules item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: FurnitureInstanceNamingRulesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAInstanceNamingRules item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FurnitureInstanceNamingRules)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FurnitureInstanceNamingRulesCommon : AInstanceNamingRulesCommon
    {
        public new static readonly FurnitureInstanceNamingRulesCommon Instance = new FurnitureInstanceNamingRulesCommon();

        public FurnitureInstanceNamingRules.Mask<bool> GetEqualsMask(
            IFurnitureInstanceNamingRulesGetter item,
            IFurnitureInstanceNamingRulesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FurnitureInstanceNamingRules.Mask<bool>(false);
            ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureInstanceNamingRulesGetter item,
            IFurnitureInstanceNamingRulesGetter rhs,
            FurnitureInstanceNamingRules.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Rules = item.Rules.CollectionEqualsHelper(
                rhs.Rules,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFurnitureInstanceNamingRulesGetter item,
            string? name = null,
            FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFurnitureInstanceNamingRulesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FurnitureInstanceNamingRules =>");
            }
            else
            {
                sb.AppendLine($"{name} (FurnitureInstanceNamingRules) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFurnitureInstanceNamingRulesGetter item,
            StructuredStringBuilder sb,
            FurnitureInstanceNamingRules.Mask<bool>? printMask = null)
        {
            AInstanceNamingRulesCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Rules?.Overall ?? true)
            {
                sb.AppendLine("Rules =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Rules)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static FurnitureInstanceNamingRules_FieldIndex ConvertFieldIndex(AInstanceNamingRules_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureInstanceNamingRulesGetter? lhs,
            IFurnitureInstanceNamingRulesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAInstanceNamingRulesGetter)lhs, (IAInstanceNamingRulesGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FurnitureInstanceNamingRules_FieldIndex.Rules) ?? true))
            {
                if (!lhs.Rules.SequenceEqual(rhs.Rules, (l, r) => ((InstanceNamingRuleSetCommon<FurnitureInstanceNamingRules.Target>)((IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>)l).CommonInstance(typeof(FurnitureInstanceNamingRules.Target))!).Equals(l, r, equalsMask?.GetSubCrystal((int)FurnitureInstanceNamingRules_FieldIndex.Rules)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAInstanceNamingRulesGetter? lhs,
            IAInstanceNamingRulesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFurnitureInstanceNamingRulesGetter?)lhs,
                rhs: rhs as IFurnitureInstanceNamingRulesGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFurnitureInstanceNamingRulesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Rules);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAInstanceNamingRulesGetter item)
        {
            return GetHashCode(item: (IFurnitureInstanceNamingRulesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FurnitureInstanceNamingRules.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFurnitureInstanceNamingRulesGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Rules.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FurnitureInstanceNamingRulesSetterTranslationCommon : AInstanceNamingRulesSetterTranslationCommon
    {
        public new static readonly FurnitureInstanceNamingRulesSetterTranslationCommon Instance = new FurnitureInstanceNamingRulesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFurnitureInstanceNamingRules item,
            IFurnitureInstanceNamingRulesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAInstanceNamingRules)item,
                (IAInstanceNamingRulesGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FurnitureInstanceNamingRules_FieldIndex.Rules) ?? true))
            {
                errorMask?.PushIndex((int)FurnitureInstanceNamingRules_FieldIndex.Rules);
                try
                {
                    item.Rules.SetTo(
                        rhs.Rules
                        .Select(r =>
                        {
                            return r.DeepCopy<FurnitureInstanceNamingRules.Target>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFurnitureInstanceNamingRules item,
            IFurnitureInstanceNamingRulesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAInstanceNamingRules item,
            IAInstanceNamingRulesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFurnitureInstanceNamingRules)item,
                rhs: (IFurnitureInstanceNamingRulesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FurnitureInstanceNamingRules DeepCopy(
            IFurnitureInstanceNamingRulesGetter item,
            FurnitureInstanceNamingRules.TranslationMask? copyMask = null)
        {
            FurnitureInstanceNamingRules ret = (FurnitureInstanceNamingRules)((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).GetNew();
            ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FurnitureInstanceNamingRules DeepCopy(
            IFurnitureInstanceNamingRulesGetter item,
            out FurnitureInstanceNamingRules.ErrorMask errorMask,
            FurnitureInstanceNamingRules.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FurnitureInstanceNamingRules ret = (FurnitureInstanceNamingRules)((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).GetNew();
            ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FurnitureInstanceNamingRules.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FurnitureInstanceNamingRules DeepCopy(
            IFurnitureInstanceNamingRulesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FurnitureInstanceNamingRules ret = (FurnitureInstanceNamingRules)((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)item).CommonInstance()!).GetNew();
            ((FurnitureInstanceNamingRulesSetterTranslationCommon)((IFurnitureInstanceNamingRulesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class FurnitureInstanceNamingRules
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureInstanceNamingRules_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FurnitureInstanceNamingRules_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureInstanceNamingRulesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FurnitureInstanceNamingRulesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureInstanceNamingRulesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FurnitureInstanceNamingRulesBinaryWriteTranslation :
        AInstanceNamingRulesBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FurnitureInstanceNamingRulesBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFurnitureInstanceNamingRulesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>>.Instance.Write(
                writer: writer,
                items: item.Rules,
                transl: (MutagenWriter subWriter, IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target> subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((InstanceNamingRuleSetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<FurnitureInstanceNamingRules.Target>(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureInstanceNamingRulesGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFurnitureInstanceNamingRulesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAInstanceNamingRulesGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFurnitureInstanceNamingRulesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FurnitureInstanceNamingRulesBinaryCreateTranslation : AInstanceNamingRulesBinaryCreateTranslation
    {
        public new static readonly FurnitureInstanceNamingRulesBinaryCreateTranslation Instance = new FurnitureInstanceNamingRulesBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFurnitureInstanceNamingRules item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VNAM:
                {
                    if (lastParsed.ShortCircuit((int)FurnitureInstanceNamingRules_FieldIndex.Rules, translationParams)) return ParseResult.Stop;
                    item.Rules.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: InstanceNamingRuleSet_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: InstanceNamingRuleSet<FurnitureInstanceNamingRules.Target>.TryCreateFromBinary));
                    return (int)FurnitureInstanceNamingRules_FieldIndex.Rules;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FurnitureInstanceNamingRulesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FurnitureInstanceNamingRulesBinaryOverlay :
        AInstanceNamingRulesBinaryOverlay,
        IFurnitureInstanceNamingRulesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureInstanceNamingRules_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FurnitureInstanceNamingRules_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureInstanceNamingRulesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureInstanceNamingRulesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FurnitureInstanceNamingRulesCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureInstanceNamingRulesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FurnitureInstanceNamingRulesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IReadOnlyList<IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>> Rules { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FurnitureInstanceNamingRulesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFurnitureInstanceNamingRulesGetter FurnitureInstanceNamingRulesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FurnitureInstanceNamingRulesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFurnitureInstanceNamingRulesGetter FurnitureInstanceNamingRulesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FurnitureInstanceNamingRulesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VNAM:
                {
                    if (lastParsed.ShortCircuit((int)FurnitureInstanceNamingRules_FieldIndex.Rules, translationParams)) return ParseResult.Stop;
                    this.Rules = this.ParseRepeatedTypelessSubrecord<IInstanceNamingRuleSetGetter<FurnitureInstanceNamingRules.Target>>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: InstanceNamingRuleSet_Registration.TriggerSpecs,
                        factory: InstanceNamingRuleSetBinaryOverlay<FurnitureInstanceNamingRules.Target>.InstanceNamingRuleSetFactory);
                    return (int)FurnitureInstanceNamingRules_FieldIndex.Rules;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FurnitureInstanceNamingRulesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFurnitureInstanceNamingRulesGetter rhs) return false;
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFurnitureInstanceNamingRulesGetter? obj)
        {
            return ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FurnitureInstanceNamingRulesCommon)((IFurnitureInstanceNamingRulesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

