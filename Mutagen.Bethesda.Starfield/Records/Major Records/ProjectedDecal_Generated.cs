/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ProjectedDecal :
        StarfieldMajorRecord,
        IEquatable<IProjectedDecalGetter>,
        ILoquiObjectSetter<ProjectedDecal>,
        IProjectedDecalInternal
    {
        #region Ctor
        protected ProjectedDecal()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IProjectedDecalGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IProjectedDecalGetter.ODTY => this.ODTY;
        #endregion
        #region ODRT
        public Single? ODRT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IProjectedDecalGetter.ODRT => this.ODRT;
        #endregion
        #region ObjectPlacementDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPlacementDefaults? _ObjectPlacementDefaults;
        public ObjectPlacementDefaults? ObjectPlacementDefaults
        {
            get => _ObjectPlacementDefaults;
            set => _ObjectPlacementDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPlacementDefaultsGetter? IProjectedDecalGetter.ObjectPlacementDefaults => this.ObjectPlacementDefaults;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IProjectedDecalGetter.Components => _Components;
        #endregion

        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? IProjectedDecalGetter.Transforms => this.Transforms;
        #endregion
        #region PTTA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PTTA? _PTTA;
        public PTTA? PTTA
        {
            get => _PTTA;
            set => _PTTA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPTTAGetter? IProjectedDecalGetter.PTTA => this.PTTA;
        #endregion
        #region SnapBehavior
        private readonly IFormLinkNullable<ISnapTemplateBehaviorGetter> _SnapBehavior = new FormLinkNullable<ISnapTemplateBehaviorGetter>();
        public IFormLinkNullable<ISnapTemplateBehaviorGetter> SnapBehavior
        {
            get => _SnapBehavior;
            set => _SnapBehavior.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateBehaviorGetter> IProjectedDecalGetter.SnapBehavior => this.SnapBehavior;
        #endregion
        #region Material
        private readonly IFormLinkNullable<IMaterialPathGetter> _Material = new FormLinkNullable<IMaterialPathGetter>();
        public IFormLinkNullable<IMaterialPathGetter> Material
        {
            get => _Material;
            set => _Material.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialPathGetter> IProjectedDecalGetter.Material => this.Material;
        #endregion
        #region UnknownData1
        public Single UnknownData1 { get; set; } = default(Single);
        #endregion
        #region UnknownData2
        public Single UnknownData2 { get; set; } = default(Single);
        #endregion
        #region UnknownData3
        public Single UnknownData3 { get; set; } = default(Single);
        #endregion
        #region UnknownData4
        public Single UnknownData4 { get; set; } = default(Single);
        #endregion
        #region UnknownData5
        public Single UnknownData5 { get; set; } = default(Single);
        #endregion
        #region UnknownData6
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _UnknownData6;
        public Single UnknownData6
        {
            get => this._UnknownData6;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._UnknownData6 = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public ProjectedDecal.DATADataType DATADataTypeState { get; set; } = default(ProjectedDecal.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ProjectedDecalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.ODRT = initialValue;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(initialValue, new ObjectPlacementDefaults.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.PTTA = new MaskItem<TItem, PTTA.Mask<TItem>?>(initialValue, new PTTA.Mask<TItem>(initialValue));
                this.SnapBehavior = initialValue;
                this.Material = initialValue;
                this.UnknownData1 = initialValue;
                this.UnknownData2 = initialValue;
                this.UnknownData3 = initialValue;
                this.UnknownData4 = initialValue;
                this.UnknownData5 = initialValue;
                this.UnknownData6 = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem ODTY,
                TItem ODRT,
                TItem ObjectPlacementDefaults,
                TItem Components,
                TItem Transforms,
                TItem PTTA,
                TItem SnapBehavior,
                TItem Material,
                TItem UnknownData1,
                TItem UnknownData2,
                TItem UnknownData3,
                TItem UnknownData4,
                TItem UnknownData5,
                TItem UnknownData6,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.ODRT = ODRT;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(ObjectPlacementDefaults, new ObjectPlacementDefaults.Mask<TItem>(ObjectPlacementDefaults));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.PTTA = new MaskItem<TItem, PTTA.Mask<TItem>?>(PTTA, new PTTA.Mask<TItem>(PTTA));
                this.SnapBehavior = SnapBehavior;
                this.Material = Material;
                this.UnknownData1 = UnknownData1;
                this.UnknownData2 = UnknownData2;
                this.UnknownData3 = UnknownData3;
                this.UnknownData4 = UnknownData4;
                this.UnknownData5 = UnknownData5;
                this.UnknownData6 = UnknownData6;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public TItem ODRT;
            public MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>? ObjectPlacementDefaults { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, PTTA.Mask<TItem>?>? PTTA { get; set; }
            public TItem SnapBehavior;
            public TItem Material;
            public TItem UnknownData1;
            public TItem UnknownData2;
            public TItem UnknownData3;
            public TItem UnknownData4;
            public TItem UnknownData5;
            public TItem UnknownData6;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.ODRT, rhs.ODRT)) return false;
                if (!object.Equals(this.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.PTTA, rhs.PTTA)) return false;
                if (!object.Equals(this.SnapBehavior, rhs.SnapBehavior)) return false;
                if (!object.Equals(this.Material, rhs.Material)) return false;
                if (!object.Equals(this.UnknownData1, rhs.UnknownData1)) return false;
                if (!object.Equals(this.UnknownData2, rhs.UnknownData2)) return false;
                if (!object.Equals(this.UnknownData3, rhs.UnknownData3)) return false;
                if (!object.Equals(this.UnknownData4, rhs.UnknownData4)) return false;
                if (!object.Equals(this.UnknownData5, rhs.UnknownData5)) return false;
                if (!object.Equals(this.UnknownData6, rhs.UnknownData6)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.ODRT);
                hash.Add(this.ObjectPlacementDefaults);
                hash.Add(this.Components);
                hash.Add(this.Transforms);
                hash.Add(this.PTTA);
                hash.Add(this.SnapBehavior);
                hash.Add(this.Material);
                hash.Add(this.UnknownData1);
                hash.Add(this.UnknownData2);
                hash.Add(this.UnknownData3);
                hash.Add(this.UnknownData4);
                hash.Add(this.UnknownData5);
                hash.Add(this.UnknownData6);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (!eval(this.ODRT)) return false;
                if (ObjectPlacementDefaults != null)
                {
                    if (!eval(this.ObjectPlacementDefaults.Overall)) return false;
                    if (this.ObjectPlacementDefaults.Specific != null && !this.ObjectPlacementDefaults.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (PTTA != null)
                {
                    if (!eval(this.PTTA.Overall)) return false;
                    if (this.PTTA.Specific != null && !this.PTTA.Specific.All(eval)) return false;
                }
                if (!eval(this.SnapBehavior)) return false;
                if (!eval(this.Material)) return false;
                if (!eval(this.UnknownData1)) return false;
                if (!eval(this.UnknownData2)) return false;
                if (!eval(this.UnknownData3)) return false;
                if (!eval(this.UnknownData4)) return false;
                if (!eval(this.UnknownData5)) return false;
                if (!eval(this.UnknownData6)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (eval(this.ODRT)) return true;
                if (ObjectPlacementDefaults != null)
                {
                    if (eval(this.ObjectPlacementDefaults.Overall)) return true;
                    if (this.ObjectPlacementDefaults.Specific != null && this.ObjectPlacementDefaults.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (PTTA != null)
                {
                    if (eval(this.PTTA.Overall)) return true;
                    if (this.PTTA.Specific != null && this.PTTA.Specific.Any(eval)) return true;
                }
                if (eval(this.SnapBehavior)) return true;
                if (eval(this.Material)) return true;
                if (eval(this.UnknownData1)) return true;
                if (eval(this.UnknownData2)) return true;
                if (eval(this.UnknownData3)) return true;
                if (eval(this.UnknownData4)) return true;
                if (eval(this.UnknownData5)) return true;
                if (eval(this.UnknownData6)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ProjectedDecal.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.ODRT = eval(this.ODRT);
                obj.ObjectPlacementDefaults = this.ObjectPlacementDefaults == null ? null : new MaskItem<R, ObjectPlacementDefaults.Mask<R>?>(eval(this.ObjectPlacementDefaults.Overall), this.ObjectPlacementDefaults.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.PTTA = this.PTTA == null ? null : new MaskItem<R, PTTA.Mask<R>?>(eval(this.PTTA.Overall), this.PTTA.Specific?.Translate(eval));
                obj.SnapBehavior = eval(this.SnapBehavior);
                obj.Material = eval(this.Material);
                obj.UnknownData1 = eval(this.UnknownData1);
                obj.UnknownData2 = eval(this.UnknownData2);
                obj.UnknownData3 = eval(this.UnknownData3);
                obj.UnknownData4 = eval(this.UnknownData4);
                obj.UnknownData5 = eval(this.UnknownData5);
                obj.UnknownData6 = eval(this.UnknownData6);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ProjectedDecal.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ProjectedDecal.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ProjectedDecal.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.ODRT ?? true)
                    {
                        sb.AppendItem(ODRT, "ODRT");
                    }
                    if (printMask?.ObjectPlacementDefaults?.Overall ?? true)
                    {
                        ObjectPlacementDefaults?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.PTTA?.Overall ?? true)
                    {
                        PTTA?.Print(sb);
                    }
                    if (printMask?.SnapBehavior ?? true)
                    {
                        sb.AppendItem(SnapBehavior, "SnapBehavior");
                    }
                    if (printMask?.Material ?? true)
                    {
                        sb.AppendItem(Material, "Material");
                    }
                    if (printMask?.UnknownData1 ?? true)
                    {
                        sb.AppendItem(UnknownData1, "UnknownData1");
                    }
                    if (printMask?.UnknownData2 ?? true)
                    {
                        sb.AppendItem(UnknownData2, "UnknownData2");
                    }
                    if (printMask?.UnknownData3 ?? true)
                    {
                        sb.AppendItem(UnknownData3, "UnknownData3");
                    }
                    if (printMask?.UnknownData4 ?? true)
                    {
                        sb.AppendItem(UnknownData4, "UnknownData4");
                    }
                    if (printMask?.UnknownData5 ?? true)
                    {
                        sb.AppendItem(UnknownData5, "UnknownData5");
                    }
                    if (printMask?.UnknownData6 ?? true)
                    {
                        sb.AppendItem(UnknownData6, "UnknownData6");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public Exception? ODRT;
            public MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>? ObjectPlacementDefaults;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public MaskItem<Exception?, PTTA.ErrorMask?>? PTTA;
            public Exception? SnapBehavior;
            public Exception? Material;
            public Exception? UnknownData1;
            public Exception? UnknownData2;
            public Exception? UnknownData3;
            public Exception? UnknownData4;
            public Exception? UnknownData5;
            public Exception? UnknownData6;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ProjectedDecal_FieldIndex enu = (ProjectedDecal_FieldIndex)index;
                switch (enu)
                {
                    case ProjectedDecal_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case ProjectedDecal_FieldIndex.ODTY:
                        return ODTY;
                    case ProjectedDecal_FieldIndex.ODRT:
                        return ODRT;
                    case ProjectedDecal_FieldIndex.ObjectPlacementDefaults:
                        return ObjectPlacementDefaults;
                    case ProjectedDecal_FieldIndex.Components:
                        return Components;
                    case ProjectedDecal_FieldIndex.Transforms:
                        return Transforms;
                    case ProjectedDecal_FieldIndex.PTTA:
                        return PTTA;
                    case ProjectedDecal_FieldIndex.SnapBehavior:
                        return SnapBehavior;
                    case ProjectedDecal_FieldIndex.Material:
                        return Material;
                    case ProjectedDecal_FieldIndex.UnknownData1:
                        return UnknownData1;
                    case ProjectedDecal_FieldIndex.UnknownData2:
                        return UnknownData2;
                    case ProjectedDecal_FieldIndex.UnknownData3:
                        return UnknownData3;
                    case ProjectedDecal_FieldIndex.UnknownData4:
                        return UnknownData4;
                    case ProjectedDecal_FieldIndex.UnknownData5:
                        return UnknownData5;
                    case ProjectedDecal_FieldIndex.UnknownData6:
                        return UnknownData6;
                    case ProjectedDecal_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ProjectedDecal_FieldIndex enu = (ProjectedDecal_FieldIndex)index;
                switch (enu)
                {
                    case ProjectedDecal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case ProjectedDecal_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case ProjectedDecal_FieldIndex.ODRT:
                        this.ODRT = ex;
                        break;
                    case ProjectedDecal_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = new MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>(ex, null);
                        break;
                    case ProjectedDecal_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ProjectedDecal_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case ProjectedDecal_FieldIndex.PTTA:
                        this.PTTA = new MaskItem<Exception?, PTTA.ErrorMask?>(ex, null);
                        break;
                    case ProjectedDecal_FieldIndex.SnapBehavior:
                        this.SnapBehavior = ex;
                        break;
                    case ProjectedDecal_FieldIndex.Material:
                        this.Material = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData1:
                        this.UnknownData1 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData2:
                        this.UnknownData2 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData3:
                        this.UnknownData3 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData4:
                        this.UnknownData4 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData5:
                        this.UnknownData5 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData6:
                        this.UnknownData6 = ex;
                        break;
                    case ProjectedDecal_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ProjectedDecal_FieldIndex enu = (ProjectedDecal_FieldIndex)index;
                switch (enu)
                {
                    case ProjectedDecal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.ODRT:
                        this.ODRT = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = (MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case ProjectedDecal_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.PTTA:
                        this.PTTA = (MaskItem<Exception?, PTTA.ErrorMask?>?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.SnapBehavior:
                        this.SnapBehavior = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.Material:
                        this.Material = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData1:
                        this.UnknownData1 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData2:
                        this.UnknownData2 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData3:
                        this.UnknownData3 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData4:
                        this.UnknownData4 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData5:
                        this.UnknownData5 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.UnknownData6:
                        this.UnknownData6 = (Exception?)obj;
                        break;
                    case ProjectedDecal_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (ODRT != null) return true;
                if (ObjectPlacementDefaults != null) return true;
                if (Components != null) return true;
                if (Transforms != null) return true;
                if (PTTA != null) return true;
                if (SnapBehavior != null) return true;
                if (Material != null) return true;
                if (UnknownData1 != null) return true;
                if (UnknownData2 != null) return true;
                if (UnknownData3 != null) return true;
                if (UnknownData4 != null) return true;
                if (UnknownData5 != null) return true;
                if (UnknownData6 != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                {
                    sb.AppendItem(ODRT, "ODRT");
                }
                ObjectPlacementDefaults?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Transforms?.Print(sb);
                PTTA?.Print(sb);
                {
                    sb.AppendItem(SnapBehavior, "SnapBehavior");
                }
                {
                    sb.AppendItem(Material, "Material");
                }
                {
                    sb.AppendItem(UnknownData1, "UnknownData1");
                }
                {
                    sb.AppendItem(UnknownData2, "UnknownData2");
                }
                {
                    sb.AppendItem(UnknownData3, "UnknownData3");
                }
                {
                    sb.AppendItem(UnknownData4, "UnknownData4");
                }
                {
                    sb.AppendItem(UnknownData5, "UnknownData5");
                }
                {
                    sb.AppendItem(UnknownData6, "UnknownData6");
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.ODRT = this.ODRT.Combine(rhs.ODRT);
                ret.ObjectPlacementDefaults = this.ObjectPlacementDefaults.Combine(rhs.ObjectPlacementDefaults, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.PTTA = this.PTTA.Combine(rhs.PTTA, (l, r) => l.Combine(r));
                ret.SnapBehavior = this.SnapBehavior.Combine(rhs.SnapBehavior);
                ret.Material = this.Material.Combine(rhs.Material);
                ret.UnknownData1 = this.UnknownData1.Combine(rhs.UnknownData1);
                ret.UnknownData2 = this.UnknownData2.Combine(rhs.UnknownData2);
                ret.UnknownData3 = this.UnknownData3.Combine(rhs.UnknownData3);
                ret.UnknownData4 = this.UnknownData4.Combine(rhs.UnknownData4);
                ret.UnknownData5 = this.UnknownData5.Combine(rhs.UnknownData5);
                ret.UnknownData6 = this.UnknownData6.Combine(rhs.UnknownData6);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public bool ODRT;
            public ObjectPlacementDefaults.TranslationMask? ObjectPlacementDefaults;
            public AComponent.TranslationMask? Components;
            public Transforms.TranslationMask? Transforms;
            public PTTA.TranslationMask? PTTA;
            public bool SnapBehavior;
            public bool Material;
            public bool UnknownData1;
            public bool UnknownData2;
            public bool UnknownData3;
            public bool UnknownData4;
            public bool UnknownData5;
            public bool UnknownData6;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.ODRT = defaultOn;
                this.SnapBehavior = defaultOn;
                this.Material = defaultOn;
                this.UnknownData1 = defaultOn;
                this.UnknownData2 = defaultOn;
                this.UnknownData3 = defaultOn;
                this.UnknownData4 = defaultOn;
                this.UnknownData5 = defaultOn;
                this.UnknownData6 = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((ODRT, null));
                ret.Add((ObjectPlacementDefaults != null ? ObjectPlacementDefaults.OnOverall : DefaultOn, ObjectPlacementDefaults?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((PTTA != null ? PTTA.OnOverall : DefaultOn, PTTA?.GetCrystal()));
                ret.Add((SnapBehavior, null));
                ret.Add((Material, null));
                ret.Add((UnknownData1, null));
                ret.Add((UnknownData2, null));
                ret.Add((UnknownData3, null));
                ret.Add((UnknownData4, null));
                ret.Add((UnknownData5, null));
                ret.Add((UnknownData6, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ProjectedDecal_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ProjectedDecalCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectedDecalSetterCommon.Instance.RemapLinks(this, mapping);
        public ProjectedDecal(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ProjectedDecal(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ProjectedDecal(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ProjectedDecal(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ProjectedDecal(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ProjectedDecal>.ToString(this);
        }

        protected override Type LinkType => typeof(IProjectedDecal);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ProjectedDecalCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ProjectedDecalSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ProjectedDecalSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ProjectedDecalSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IProjectedDecalGetter rhs) return false;
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IProjectedDecalGetter? obj)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectedDecalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ProjectedDecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ProjectedDecal CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ProjectedDecal();
            ((ProjectedDecalSetterCommon)((IProjectedDecalGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ProjectedDecal item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ProjectedDecalSetterCommon)((IProjectedDecalGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ProjectedDecal GetNew()
        {
            return new ProjectedDecal();
        }

    }
    #endregion

    #region Interface
    public partial interface IProjectedDecal :
        IAssetLinkContainer,
        IBaseObject,
        IFormLinkContainer,
        IItem,
        ILoquiObjectSetter<IProjectedDecalInternal>,
        IObjectBounded,
        IProjectedDecalGetter,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        new Single? ODRT { get; set; }
        new ObjectPlacementDefaults? ObjectPlacementDefaults { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new Transforms? Transforms { get; set; }
        new PTTA? PTTA { get; set; }
        new IFormLinkNullable<ISnapTemplateBehaviorGetter> SnapBehavior { get; set; }
        new IFormLinkNullable<IMaterialPathGetter> Material { get; set; }
        new Single UnknownData1 { get; set; }
        new Single UnknownData2 { get; set; }
        new Single UnknownData3 { get; set; }
        new Single UnknownData4 { get; set; }
        new Single UnknownData5 { get; set; }
        new Single UnknownData6 { get; set; }
        new ProjectedDecal.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IProjectedDecalInternal :
        IStarfieldMajorRecordInternal,
        IProjectedDecal,
        IProjectedDecalGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.PDCL)]
    public partial interface IProjectedDecalGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IItemGetter,
        ILoquiObject<IProjectedDecalGetter>,
        IMapsToGetter<IProjectedDecalGetter>,
        IObjectBoundedGetter
    {
        static new ILoquiRegistration StaticRegistration => ProjectedDecal_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        Single? ODRT { get; }
        IObjectPlacementDefaultsGetter? ObjectPlacementDefaults { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        ITransformsGetter? Transforms { get; }
        IPTTAGetter? PTTA { get; }
        IFormLinkNullableGetter<ISnapTemplateBehaviorGetter> SnapBehavior { get; }
        IFormLinkNullableGetter<IMaterialPathGetter> Material { get; }
        Single UnknownData1 { get; }
        Single UnknownData2 { get; }
        Single UnknownData3 { get; }
        Single UnknownData4 { get; }
        Single UnknownData5 { get; }
        Single UnknownData6 { get; }
        ProjectedDecal.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ProjectedDecalMixIn
    {
        public static void Clear(this IProjectedDecalInternal item)
        {
            ((ProjectedDecalSetterCommon)((IProjectedDecalGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ProjectedDecal.Mask<bool> GetEqualsMask(
            this IProjectedDecalGetter item,
            IProjectedDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IProjectedDecalGetter item,
            string? name = null,
            ProjectedDecal.Mask<bool>? printMask = null)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IProjectedDecalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ProjectedDecal.Mask<bool>? printMask = null)
        {
            ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IProjectedDecalGetter item,
            IProjectedDecalGetter rhs,
            ProjectedDecal.TranslationMask? equalsMask = null)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IProjectedDecalInternal lhs,
            IProjectedDecalGetter rhs,
            out ProjectedDecal.ErrorMask errorMask,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ProjectedDecal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IProjectedDecalInternal lhs,
            IProjectedDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ProjectedDecal DeepCopy(
            this IProjectedDecalGetter item,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            return ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ProjectedDecal DeepCopy(
            this IProjectedDecalGetter item,
            out ProjectedDecal.ErrorMask errorMask,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            return ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ProjectedDecal DeepCopy(
            this IProjectedDecalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ProjectedDecal Duplicate(
            this IProjectedDecalGetter item,
            FormKey formKey,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ProjectedDecal Duplicate(
            this IProjectedDecalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IProjectedDecalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ProjectedDecalSetterCommon)((IProjectedDecalGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ProjectedDecal_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        ODTY = 8,
        ODRT = 9,
        ObjectPlacementDefaults = 10,
        Components = 11,
        Transforms = 12,
        PTTA = 13,
        SnapBehavior = 14,
        Material = 15,
        UnknownData1 = 16,
        UnknownData2 = 17,
        UnknownData3 = 18,
        UnknownData4 = 19,
        UnknownData5 = 20,
        UnknownData6 = 21,
        DATADataTypeState = 22,
    }
    #endregion

    #region Registration
    internal partial class ProjectedDecal_Registration : ILoquiRegistration
    {
        public static readonly ProjectedDecal_Registration Instance = new ProjectedDecal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(ProjectedDecal.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ProjectedDecal.ErrorMask);

        public static readonly Type ClassType = typeof(ProjectedDecal);

        public static readonly Type GetterType = typeof(IProjectedDecalGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IProjectedDecal);

        public static readonly Type? InternalSetterType = typeof(IProjectedDecalInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ProjectedDecal";

        public const string Name = "ProjectedDecal";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PDCL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.PDCL);
            var all = RecordCollection.Factory(
                RecordTypes.PDCL,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.ODRT,
                RecordTypes.OPDS,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.PTT2,
                RecordTypes.PTTA,
                RecordTypes.SNBH,
                RecordTypes.DODT,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ProjectedDecalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ProjectedDecalSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ProjectedDecalSetterCommon Instance = new ProjectedDecalSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IProjectedDecalInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.ODRT = default;
            item.ObjectPlacementDefaults = null;
            item.Components.Clear();
            item.Transforms = null;
            item.PTTA = null;
            item.SnapBehavior.Clear();
            item.Material.Clear();
            item.UnknownData1 = default(Single);
            item.UnknownData2 = default(Single);
            item.UnknownData3 = default(Single);
            item.UnknownData4 = default(Single);
            item.UnknownData5 = default(Single);
            item.UnknownData6 = default(Single);
            item.DATADataTypeState = default(ProjectedDecal.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IProjectedDecalInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IProjectedDecalInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IProjectedDecal obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.PTTA?.RemapLinks(mapping);
            obj.SnapBehavior.Relink(mapping);
            obj.Material.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IProjectedDecal obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IProjectedDecal obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IProjectedDecalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IProjectedDecalInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ProjectedDecalBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ProjectedDecalBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ProjectedDecal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ProjectedDecal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ProjectedDecalCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ProjectedDecalCommon Instance = new ProjectedDecalCommon();

        public ProjectedDecal.Mask<bool> GetEqualsMask(
            IProjectedDecalGetter item,
            IProjectedDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ProjectedDecal.Mask<bool>(false);
            ((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IProjectedDecalGetter item,
            IProjectedDecalGetter rhs,
            ProjectedDecal.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.ODRT = item.ODRT.EqualsWithin(rhs.ODRT);
            ret.ObjectPlacementDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPlacementDefaults,
                rhs.ObjectPlacementDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PTTA = EqualsMaskHelper.EqualsHelper(
                item.PTTA,
                rhs.PTTA,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SnapBehavior = item.SnapBehavior.Equals(rhs.SnapBehavior);
            ret.Material = item.Material.Equals(rhs.Material);
            ret.UnknownData1 = item.UnknownData1.EqualsWithin(rhs.UnknownData1);
            ret.UnknownData2 = item.UnknownData2.EqualsWithin(rhs.UnknownData2);
            ret.UnknownData3 = item.UnknownData3.EqualsWithin(rhs.UnknownData3);
            ret.UnknownData4 = item.UnknownData4.EqualsWithin(rhs.UnknownData4);
            ret.UnknownData5 = item.UnknownData5.EqualsWithin(rhs.UnknownData5);
            ret.UnknownData6 = item.UnknownData6.EqualsWithin(rhs.UnknownData6);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IProjectedDecalGetter item,
            string? name = null,
            ProjectedDecal.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IProjectedDecalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ProjectedDecal.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ProjectedDecal =>");
            }
            else
            {
                sb.AppendLine($"{name} (ProjectedDecal) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IProjectedDecalGetter item,
            StructuredStringBuilder sb,
            ProjectedDecal.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.ODRT ?? true)
                && item.ODRT is {} ODRTItem)
            {
                sb.AppendItem(ODRTItem, "ODRT");
            }
            if ((printMask?.ObjectPlacementDefaults?.Overall ?? true)
                && item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ObjectPlacementDefaultsItem?.Print(sb, "ObjectPlacementDefaults");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if ((printMask?.PTTA?.Overall ?? true)
                && item.PTTA is {} PTTAItem)
            {
                PTTAItem?.Print(sb, "PTTA");
            }
            if (printMask?.SnapBehavior ?? true)
            {
                sb.AppendItem(item.SnapBehavior.FormKeyNullable, "SnapBehavior");
            }
            if (printMask?.Material ?? true)
            {
                sb.AppendItem(item.Material.FormKeyNullable, "Material");
            }
            if (printMask?.UnknownData1 ?? true)
            {
                sb.AppendItem(item.UnknownData1, "UnknownData1");
            }
            if (printMask?.UnknownData2 ?? true)
            {
                sb.AppendItem(item.UnknownData2, "UnknownData2");
            }
            if (printMask?.UnknownData3 ?? true)
            {
                sb.AppendItem(item.UnknownData3, "UnknownData3");
            }
            if (printMask?.UnknownData4 ?? true)
            {
                sb.AppendItem(item.UnknownData4, "UnknownData4");
            }
            if (printMask?.UnknownData5 ?? true)
            {
                sb.AppendItem(item.UnknownData5, "UnknownData5");
            }
            if (printMask?.UnknownData6 ?? true)
            {
                sb.AppendItem(item.UnknownData6, "UnknownData6");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static ProjectedDecal_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ProjectedDecal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ProjectedDecal_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ProjectedDecal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ProjectedDecal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IProjectedDecalGetter? lhs,
            IProjectedDecalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ODRT) ?? true))
            {
                if (!lhs.ODRT.EqualsWithin(rhs.ODRT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults, out var lhsObjectPlacementDefaults, out var rhsObjectPlacementDefaults, out var isObjectPlacementDefaultsEqual))
                {
                    if (!((ObjectPlacementDefaultsCommon)((IObjectPlacementDefaultsGetter)lhsObjectPlacementDefaults).CommonInstance()!).Equals(lhsObjectPlacementDefaults, rhsObjectPlacementDefaults, equalsMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults))) return false;
                }
                else if (!isObjectPlacementDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.PTTA) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PTTA, rhs.PTTA, out var lhsPTTA, out var rhsPTTA, out var isPTTAEqual))
                {
                    if (!((PTTACommon)((IPTTAGetter)lhsPTTA).CommonInstance()!).Equals(lhsPTTA, rhsPTTA, equalsMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.PTTA))) return false;
                }
                else if (!isPTTAEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.SnapBehavior) ?? true))
            {
                if (!lhs.SnapBehavior.Equals(rhs.SnapBehavior)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Material) ?? true))
            {
                if (!lhs.Material.Equals(rhs.Material)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData1) ?? true))
            {
                if (!lhs.UnknownData1.EqualsWithin(rhs.UnknownData1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData2) ?? true))
            {
                if (!lhs.UnknownData2.EqualsWithin(rhs.UnknownData2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData3) ?? true))
            {
                if (!lhs.UnknownData3.EqualsWithin(rhs.UnknownData3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData4) ?? true))
            {
                if (!lhs.UnknownData4.EqualsWithin(rhs.UnknownData4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData5) ?? true))
            {
                if (!lhs.UnknownData5.EqualsWithin(rhs.UnknownData5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData6) ?? true))
            {
                if (!lhs.UnknownData6.EqualsWithin(rhs.UnknownData6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IProjectedDecalGetter?)lhs,
                rhs: rhs as IProjectedDecalGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IProjectedDecalGetter?)lhs,
                rhs: rhs as IProjectedDecalGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IProjectedDecalGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.ODRT is {} ODRTitem)
            {
                hash.Add(ODRTitem);
            }
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsitem)
            {
                hash.Add(ObjectPlacementDefaultsitem);
            }
            hash.Add(item.Components);
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            if (item.PTTA is {} PTTAitem)
            {
                hash.Add(PTTAitem);
            }
            hash.Add(item.SnapBehavior);
            hash.Add(item.Material);
            hash.Add(item.UnknownData1);
            hash.Add(item.UnknownData2);
            hash.Add(item.UnknownData3);
            hash.Add(item.UnknownData4);
            hash.Add(item.UnknownData5);
            hash.Add(item.UnknownData6);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectedDecalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectedDecalGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ProjectedDecal.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IProjectedDecalGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.PTTA is {} PTTAItems)
            {
                foreach (var item in PTTAItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.SnapBehavior, out var SnapBehaviorInfo))
            {
                yield return SnapBehaviorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Material, out var MaterialInfo))
            {
                yield return MaterialInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IProjectedDecalGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ProjectedDecal Duplicate(
            IProjectedDecalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ProjectedDecal(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IProjectedDecalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IProjectedDecalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ProjectedDecalSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ProjectedDecalSetterTranslationCommon Instance = new ProjectedDecalSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IProjectedDecalInternal item,
            IProjectedDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IProjectedDecal item,
            IProjectedDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)ProjectedDecal_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ODRT) ?? true))
            {
                item.ODRT = rhs.ODRT;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                errorMask?.PushIndex((int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults);
                try
                {
                    if(rhs.ObjectPlacementDefaults is {} rhsObjectPlacementDefaults)
                    {
                        item.ObjectPlacementDefaults = rhsObjectPlacementDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults));
                    }
                    else
                    {
                        item.ObjectPlacementDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)ProjectedDecal_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)ProjectedDecal_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.PTTA) ?? true))
            {
                errorMask?.PushIndex((int)ProjectedDecal_FieldIndex.PTTA);
                try
                {
                    if(rhs.PTTA is {} rhsPTTA)
                    {
                        item.PTTA = rhsPTTA.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ProjectedDecal_FieldIndex.PTTA));
                    }
                    else
                    {
                        item.PTTA = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.SnapBehavior) ?? true))
            {
                item.SnapBehavior.SetTo(rhs.SnapBehavior.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.Material) ?? true))
            {
                item.Material.SetTo(rhs.Material.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData1) ?? true))
            {
                item.UnknownData1 = rhs.UnknownData1;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData2) ?? true))
            {
                item.UnknownData2 = rhs.UnknownData2;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData3) ?? true))
            {
                item.UnknownData3 = rhs.UnknownData3;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData4) ?? true))
            {
                item.UnknownData4 = rhs.UnknownData4;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData5) ?? true))
            {
                item.UnknownData5 = rhs.UnknownData5;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.UnknownData6) ?? true))
            {
                item.UnknownData6 = rhs.UnknownData6;
            }
            if ((copyMask?.GetShouldTranslate((int)ProjectedDecal_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IProjectedDecal item,
            IProjectedDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectedDecalInternal)item,
                rhs: (IProjectedDecalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectedDecal)item,
                rhs: (IProjectedDecalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectedDecalInternal)item,
                rhs: (IProjectedDecalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectedDecal)item,
                rhs: (IProjectedDecalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ProjectedDecal DeepCopy(
            IProjectedDecalGetter item,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            ProjectedDecal ret = (ProjectedDecal)((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).GetNew();
            ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ProjectedDecal DeepCopy(
            IProjectedDecalGetter item,
            out ProjectedDecal.ErrorMask errorMask,
            ProjectedDecal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ProjectedDecal ret = (ProjectedDecal)((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).GetNew();
            ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ProjectedDecal.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ProjectedDecal DeepCopy(
            IProjectedDecalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ProjectedDecal ret = (ProjectedDecal)((ProjectedDecalCommon)((IProjectedDecalGetter)item).CommonInstance()!).GetNew();
            ((ProjectedDecalSetterTranslationCommon)((IProjectedDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ProjectedDecal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ProjectedDecal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ProjectedDecal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectedDecalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ProjectedDecalSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectedDecalSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ProjectedDecalBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ProjectedDecalBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IProjectedDecalGetter item,
            MutagenWriter writer)
        {
            StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IProjectedDecalGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODRT,
                header: translationParams.ConvertToCustom(RecordTypes.ODRT));
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ((ObjectPlacementDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPlacementDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPlacementDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.PTTA is {} PTTAItem)
            {
                ((PTTABinaryWriteTranslation)((IBinaryItem)PTTAItem).BinaryWriteTranslator).Write(
                    item: PTTAItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SnapBehavior,
                header: translationParams.ConvertToCustom(RecordTypes.SNBH));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Material,
                header: translationParams.ConvertToCustom(RecordTypes.DODT));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownData1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownData2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownData3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownData4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownData5);
                if (!item.DATADataTypeState.HasFlag(ProjectedDecal.DATADataType.Break0))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.UnknownData6);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IProjectedDecalGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PDCL,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IProjectedDecalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IProjectedDecalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IProjectedDecalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ProjectedDecalBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ProjectedDecalBinaryCreateTranslation Instance = new ProjectedDecalBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PDCL;
        public static void FillBinaryStructs(
            IProjectedDecalInternal item,
            MutagenFrame frame)
        {
            StarfieldMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IProjectedDecalInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)ProjectedDecal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ProjectedDecal_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODRT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ProjectedDecal_FieldIndex.ODRT;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPlacementDefaults = Mutagen.Bethesda.Starfield.ObjectPlacementDefaults.CreateFromBinary(frame: frame);
                    return (int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)ProjectedDecal_FieldIndex.Components;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)ProjectedDecal_FieldIndex.Transforms;
                }
                case RecordTypeInts.PTTA:
                {
                    item.PTTA = Mutagen.Bethesda.Starfield.PTTA.CreateFromBinary(frame: frame);
                    return (int)ProjectedDecal_FieldIndex.PTTA;
                }
                case RecordTypeInts.SNBH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SnapBehavior.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ProjectedDecal_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.DODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Material.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ProjectedDecal_FieldIndex.Material;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= ProjectedDecal.DATADataType.Break0;
                        return (int)ProjectedDecal_FieldIndex.UnknownData5;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownData6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)ProjectedDecal_FieldIndex.UnknownData6;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ProjectedDecalBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ProjectedDecalBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IProjectedDecalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ProjectedDecal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ProjectedDecal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectedDecalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectedDecalSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ProjectedDecalCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ProjectedDecalCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectedDecalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ProjectedDecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IProjectedDecal);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ODRT
        private int? _ODRTLocation;
        public Single? ODRT => _ODRTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODRTLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ObjectPlacementDefaults
        private RangeInt32? _ObjectPlacementDefaultsLocation;
        public IObjectPlacementDefaultsGetter? ObjectPlacementDefaults => _ObjectPlacementDefaultsLocation.HasValue ? ObjectPlacementDefaultsBinaryOverlay.ObjectPlacementDefaultsFactory(_recordData.Slice(_ObjectPlacementDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        #region PTTA
        private RangeInt32? _PTTALocation;
        public IPTTAGetter? PTTA => _PTTALocation.HasValue ? PTTABinaryOverlay.PTTAFactory(_recordData.Slice(_PTTALocation!.Value.Min), _package) : default;
        #endregion
        #region SnapBehavior
        private int? _SnapBehaviorLocation;
        public IFormLinkNullableGetter<ISnapTemplateBehaviorGetter> SnapBehavior => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateBehaviorGetter>(_package, _recordData, _SnapBehaviorLocation);
        #endregion
        #region Material
        private int? _MaterialLocation;
        public IFormLinkNullableGetter<IMaterialPathGetter> Material => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialPathGetter>(_package, _recordData, _MaterialLocation);
        #endregion
        private RangeInt32? _DATALocation;
        public ProjectedDecal.DATADataType DATADataTypeState { get; private set; }
        #region UnknownData1
        private int _UnknownData1Location => _DATALocation!.Value.Min;
        private bool _UnknownData1_IsSet => _DATALocation.HasValue;
        public Single UnknownData1 => _UnknownData1_IsSet ? _recordData.Slice(_UnknownData1Location, 4).Float() : default(Single);
        #endregion
        #region UnknownData2
        private int _UnknownData2Location => _DATALocation!.Value.Min + 0x4;
        private bool _UnknownData2_IsSet => _DATALocation.HasValue;
        public Single UnknownData2 => _UnknownData2_IsSet ? _recordData.Slice(_UnknownData2Location, 4).Float() : default(Single);
        #endregion
        #region UnknownData3
        private int _UnknownData3Location => _DATALocation!.Value.Min + 0x8;
        private bool _UnknownData3_IsSet => _DATALocation.HasValue;
        public Single UnknownData3 => _UnknownData3_IsSet ? _recordData.Slice(_UnknownData3Location, 4).Float() : default(Single);
        #endregion
        #region UnknownData4
        private int _UnknownData4Location => _DATALocation!.Value.Min + 0xC;
        private bool _UnknownData4_IsSet => _DATALocation.HasValue;
        public Single UnknownData4 => _UnknownData4_IsSet ? _recordData.Slice(_UnknownData4Location, 4).Float() : default(Single);
        #endregion
        #region UnknownData5
        private int _UnknownData5Location => _DATALocation!.Value.Min + 0x10;
        private bool _UnknownData5_IsSet => _DATALocation.HasValue;
        public Single UnknownData5 => _UnknownData5_IsSet ? _recordData.Slice(_UnknownData5Location, 4).Float() : default(Single);
        #endregion
        #region UnknownData6
        private int _UnknownData6Location => _DATALocation!.Value.Min + 0x14;
        private bool _UnknownData6_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(ProjectedDecal.DATADataType.Break0);
        public Single UnknownData6 => _UnknownData6_IsSet ? _recordData.Slice(_UnknownData6Location, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ProjectedDecalBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IProjectedDecalGetter ProjectedDecalFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ProjectedDecalBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IProjectedDecalGetter ProjectedDecalFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ProjectedDecalFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ProjectedDecal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)ProjectedDecal_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    _ODRTLocation = (stream.Position - offset);
                    return (int)ProjectedDecal_FieldIndex.ODRT;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPlacementDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ProjectedDecal_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)ProjectedDecal_FieldIndex.Components;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ProjectedDecal_FieldIndex.Transforms;
                }
                case RecordTypeInts.PTTA:
                {
                    _PTTALocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ProjectedDecal_FieldIndex.PTTA;
                }
                case RecordTypeInts.SNBH:
                {
                    _SnapBehaviorLocation = (stream.Position - offset);
                    return (int)ProjectedDecal_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.DODT:
                {
                    _MaterialLocation = (stream.Position - offset);
                    return (int)ProjectedDecal_FieldIndex.Material;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x14)
                    {
                        this.DATADataTypeState |= ProjectedDecal.DATADataType.Break0;
                    }
                    return (int)ProjectedDecal_FieldIndex.UnknownData6;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ProjectedDecalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ProjectedDecal>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IProjectedDecalGetter rhs) return false;
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IProjectedDecalGetter? obj)
        {
            return ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ProjectedDecalCommon)((IProjectedDecalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

