/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class NavigationMesh :
        StarfieldMajorRecord,
        IEquatable<INavigationMeshGetter>,
        ILoquiObjectSetter<NavigationMesh>,
        INavigationMeshInternal
    {
        #region Ctor
        protected NavigationMesh()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? INavigationMeshGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> INavigationMeshGetter.Components => _Components;
        #endregion

        #endregion
        #region NavmeshGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavmeshGeometry? _NavmeshGeometry;
        public NavmeshGeometry? NavmeshGeometry
        {
            get => _NavmeshGeometry;
            set => _NavmeshGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavmeshGeometryGetter? INavigationMeshGetter.NavmeshGeometry => this.NavmeshGeometry;
        #endregion
        #region NNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NNAM;
        public MemorySlice<Byte>? NNAM
        {
            get => this._NNAM;
            set => this._NNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshGetter.NNAM => this.NNAM;
        #endregion
        #region PreCutMapEntries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PreCutMapEntry>? _PreCutMapEntries;
        public ExtendedList<PreCutMapEntry>? PreCutMapEntries
        {
            get => this._PreCutMapEntries;
            set => this._PreCutMapEntries = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPreCutMapEntryGetter>? INavigationMeshGetter.PreCutMapEntries => _PreCutMapEntries;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(initialValue, new NavmeshGeometry.Mask<TItem>(initialValue));
                this.NNAM = initialValue;
                this.PreCutMapEntries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PreCutMapEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PreCutMapEntry.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Components,
                TItem NavmeshGeometry,
                TItem NNAM,
                TItem PreCutMapEntries)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(NavmeshGeometry, new NavmeshGeometry.Mask<TItem>(NavmeshGeometry));
                this.NNAM = NNAM;
                this.PreCutMapEntries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PreCutMapEntry.Mask<TItem>?>>?>(PreCutMapEntries, Enumerable.Empty<MaskItemIndexed<TItem, PreCutMapEntry.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>? NavmeshGeometry { get; set; }
            public TItem NNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PreCutMapEntry.Mask<TItem>?>>?>? PreCutMapEntries;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.NavmeshGeometry, rhs.NavmeshGeometry)) return false;
                if (!object.Equals(this.NNAM, rhs.NNAM)) return false;
                if (!object.Equals(this.PreCutMapEntries, rhs.PreCutMapEntries)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Components);
                hash.Add(this.NavmeshGeometry);
                hash.Add(this.NNAM);
                hash.Add(this.PreCutMapEntries);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (!eval(this.NavmeshGeometry.Overall)) return false;
                    if (this.NavmeshGeometry.Specific != null && !this.NavmeshGeometry.Specific.All(eval)) return false;
                }
                if (!eval(this.NNAM)) return false;
                if (this.PreCutMapEntries != null)
                {
                    if (!eval(this.PreCutMapEntries.Overall)) return false;
                    if (this.PreCutMapEntries.Specific != null)
                    {
                        foreach (var item in this.PreCutMapEntries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (eval(this.NavmeshGeometry.Overall)) return true;
                    if (this.NavmeshGeometry.Specific != null && this.NavmeshGeometry.Specific.Any(eval)) return true;
                }
                if (eval(this.NNAM)) return true;
                if (this.PreCutMapEntries != null)
                {
                    if (eval(this.PreCutMapEntries.Overall)) return true;
                    if (this.PreCutMapEntries.Specific != null)
                    {
                        foreach (var item in this.PreCutMapEntries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMesh.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NavmeshGeometry = this.NavmeshGeometry == null ? null : new MaskItem<R, NavmeshGeometry.Mask<R>?>(eval(this.NavmeshGeometry.Overall), this.NavmeshGeometry.Specific?.Translate(eval));
                obj.NNAM = eval(this.NNAM);
                if (PreCutMapEntries != null)
                {
                    obj.PreCutMapEntries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PreCutMapEntry.Mask<R>?>>?>(eval(this.PreCutMapEntries.Overall), Enumerable.Empty<MaskItemIndexed<R, PreCutMapEntry.Mask<R>?>>());
                    if (PreCutMapEntries.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PreCutMapEntry.Mask<R>?>>();
                        obj.PreCutMapEntries.Specific = l;
                        foreach (var item in PreCutMapEntries.Specific)
                        {
                            MaskItemIndexed<R, PreCutMapEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PreCutMapEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavigationMesh.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavigationMesh.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavigationMesh.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NavmeshGeometry?.Overall ?? true)
                    {
                        NavmeshGeometry?.Print(sb);
                    }
                    if (printMask?.NNAM ?? true)
                    {
                        sb.AppendItem(NNAM, "NNAM");
                    }
                    if ((printMask?.PreCutMapEntries?.Overall ?? true)
                        && PreCutMapEntries is {} PreCutMapEntriesItem)
                    {
                        sb.AppendLine("PreCutMapEntries =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PreCutMapEntriesItem.Overall);
                            if (PreCutMapEntriesItem.Specific != null)
                            {
                                foreach (var subItem in PreCutMapEntriesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, NavmeshGeometry.ErrorMask?>? NavmeshGeometry;
            public Exception? NNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PreCutMapEntry.ErrorMask?>>?>? PreCutMapEntries;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case NavigationMesh_FieldIndex.Components:
                        return Components;
                    case NavigationMesh_FieldIndex.NavmeshGeometry:
                        return NavmeshGeometry;
                    case NavigationMesh_FieldIndex.NNAM:
                        return NNAM;
                    case NavigationMesh_FieldIndex.PreCutMapEntries:
                        return PreCutMapEntries;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case NavigationMesh_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case NavigationMesh_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = new MaskItem<Exception?, NavmeshGeometry.ErrorMask?>(ex, null);
                        break;
                    case NavigationMesh_FieldIndex.NNAM:
                        this.NNAM = ex;
                        break;
                    case NavigationMesh_FieldIndex.PreCutMapEntries:
                        this.PreCutMapEntries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PreCutMapEntry.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case NavigationMesh_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case NavigationMesh_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = (MaskItem<Exception?, NavmeshGeometry.ErrorMask?>?)obj;
                        break;
                    case NavigationMesh_FieldIndex.NNAM:
                        this.NNAM = (Exception?)obj;
                        break;
                    case NavigationMesh_FieldIndex.PreCutMapEntries:
                        this.PreCutMapEntries = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PreCutMapEntry.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Components != null) return true;
                if (NavmeshGeometry != null) return true;
                if (NNAM != null) return true;
                if (PreCutMapEntries != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                NavmeshGeometry?.Print(sb);
                {
                    sb.AppendItem(NNAM, "NNAM");
                }
                if (PreCutMapEntries is {} PreCutMapEntriesItem)
                {
                    sb.AppendLine("PreCutMapEntries =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PreCutMapEntriesItem.Overall);
                        if (PreCutMapEntriesItem.Specific != null)
                        {
                            foreach (var subItem in PreCutMapEntriesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.NavmeshGeometry = this.NavmeshGeometry.Combine(rhs.NavmeshGeometry, (l, r) => l.Combine(r));
                ret.NNAM = this.NNAM.Combine(rhs.NNAM);
                ret.PreCutMapEntries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PreCutMapEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.PreCutMapEntries?.Overall, rhs.PreCutMapEntries?.Overall), Noggog.ExceptionExt.Combine(this.PreCutMapEntries?.Specific, rhs.PreCutMapEntries?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public AComponent.TranslationMask? Components;
            public NavmeshGeometry.TranslationMask? NavmeshGeometry;
            public bool NNAM;
            public PreCutMapEntry.TranslationMask? PreCutMapEntries;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.NNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((NavmeshGeometry != null ? NavmeshGeometry.OnOverall : DefaultOn, NavmeshGeometry?.GetCrystal()));
                ret.Add((NNAM, null));
                ret.Add((PreCutMapEntries == null ? DefaultOn : !PreCutMapEntries.GetCrystal().CopyNothing, PreCutMapEntries?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NavigationMesh_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMeshCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshSetterCommon.Instance.RemapLinks(this, mapping);
        public NavigationMesh(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private NavigationMesh(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal NavigationMesh(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public NavigationMesh(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public NavigationMesh(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<NavigationMesh>.ToString(this);
        }

        protected override Type LinkType => typeof(INavigationMesh);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => NavigationMeshCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => NavigationMeshSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => NavigationMeshSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => NavigationMeshSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INavigationMeshGetter rhs) return false;
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshGetter? obj)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static NavigationMesh CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavigationMesh();
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMesh item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NavigationMesh GetNew()
        {
            return new NavigationMesh();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMesh :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<INavigationMeshInternal>,
        INavigationMeshGetter,
        IScripted,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new NavmeshGeometry? NavmeshGeometry { get; set; }
        new MemorySlice<Byte>? NNAM { get; set; }
        new ExtendedList<PreCutMapEntry>? PreCutMapEntries { get; set; }
        #region Mutagen
        new NavigationMesh.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface INavigationMeshInternal :
        IStarfieldMajorRecordInternal,
        INavigationMesh,
        INavigationMeshGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.NAVM)]
    public partial interface INavigationMeshGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<INavigationMeshGetter>,
        IMapsToGetter<INavigationMeshGetter>,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IReadOnlyList<IAComponentGetter> Components { get; }
        INavmeshGeometryGetter? NavmeshGeometry { get; }
        ReadOnlyMemorySlice<Byte>? NNAM { get; }
        IReadOnlyList<IPreCutMapEntryGetter>? PreCutMapEntries { get; }

        #region Mutagen
        NavigationMesh.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMeshMixIn
    {
        public static void Clear(this INavigationMeshInternal item)
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMesh.Mask<bool> GetEqualsMask(
            this INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavigationMeshGetter item,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavigationMeshGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            NavigationMesh.TranslationMask? equalsMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavigationMeshInternal lhs,
            INavigationMeshGetter rhs,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavigationMesh.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMeshInternal lhs,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static NavigationMesh Duplicate(
            this INavigationMeshGetter item,
            FormKey formKey,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static NavigationMesh Duplicate(
            this INavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum NavigationMesh_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Components = 8,
        NavmeshGeometry = 9,
        NNAM = 10,
        PreCutMapEntries = 11,
    }
    #endregion

    #region Registration
    internal partial class NavigationMesh_Registration : ILoquiRegistration
    {
        public static readonly NavigationMesh_Registration Instance = new NavigationMesh_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(NavigationMesh.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMesh.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMesh);

        public static readonly Type GetterType = typeof(INavigationMeshGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMesh);

        public static readonly Type? InternalSetterType = typeof(INavigationMeshInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.NavigationMesh";

        public const string Name = "NavigationMesh";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAVM);
            var all = RecordCollection.Factory(
                RecordTypes.NAVM,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.NVNM,
                RecordTypes.NNAM,
                RecordTypes.MNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMeshBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavigationMeshSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly NavigationMeshSetterCommon Instance = new NavigationMeshSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMeshInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Components.Clear();
            item.NavmeshGeometry = null;
            item.NNAM = default;
            item.PreCutMapEntries = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INavigationMesh obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.NavmeshGeometry?.RemapLinks(mapping);
            obj.PreCutMapEntries?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(INavigationMesh obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            INavigationMesh obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<INavigationMeshInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavigationMeshBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NavigationMeshBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (NavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (NavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class NavigationMeshCommon : StarfieldMajorRecordCommon
    {
        public new static readonly NavigationMeshCommon Instance = new NavigationMeshCommon();

        public NavigationMesh.Mask<bool> GetEqualsMask(
            INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMesh.Mask<bool>(false);
            ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            NavigationMesh.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshGeometry = EqualsMaskHelper.EqualsHelper(
                item.NavmeshGeometry,
                rhs.NavmeshGeometry,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NNAM = MemorySliceExt.SequenceEqual(item.NNAM, rhs.NNAM);
            ret.PreCutMapEntries = item.PreCutMapEntries.CollectionEqualsHelper(
                rhs.PreCutMapEntries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            INavigationMeshGetter item,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavigationMeshGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavigationMesh =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavigationMesh) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavigationMeshGetter item,
            StructuredStringBuilder sb,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.NavmeshGeometry?.Overall ?? true)
                && item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                NavmeshGeometryItem?.Print(sb, "NavmeshGeometry");
            }
            if ((printMask?.NNAM ?? true)
                && item.NNAM is {} NNAMItem)
            {
                sb.AppendLine($"NNAM => {SpanExt.ToHexString(NNAMItem)}");
            }
            if ((printMask?.PreCutMapEntries?.Overall ?? true)
                && item.PreCutMapEntries is {} PreCutMapEntriesItem)
            {
                sb.AppendLine("PreCutMapEntries =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PreCutMapEntriesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static NavigationMesh_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (NavigationMesh_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (NavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new NavigationMesh_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMeshGetter? lhs,
            INavigationMeshGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NavmeshGeometry) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavmeshGeometry, rhs.NavmeshGeometry, out var lhsNavmeshGeometry, out var rhsNavmeshGeometry, out var isNavmeshGeometryEqual))
                {
                    if (!((NavmeshGeometryCommon)((INavmeshGeometryGetter)lhsNavmeshGeometry).CommonInstance()!).Equals(lhsNavmeshGeometry, rhsNavmeshGeometry, equalsMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.NavmeshGeometry))) return false;
                }
                else if (!isNavmeshGeometryEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NNAM, rhs.NNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.PreCutMapEntries) ?? true))
            {
                if (!lhs.PreCutMapEntries.SequenceEqualNullable(rhs.PreCutMapEntries, (l, r) => ((PreCutMapEntryCommon)((IPreCutMapEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.PreCutMapEntries)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INavigationMeshGetter?)lhs,
                rhs: rhs as INavigationMeshGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INavigationMeshGetter?)lhs,
                rhs: rhs as INavigationMeshGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(INavigationMeshGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Components);
            if (item.NavmeshGeometry is {} NavmeshGeometryitem)
            {
                hash.Add(NavmeshGeometryitem);
            }
            if (item.NNAM is {} NNAMItem)
            {
                hash.Add(NNAMItem);
            }
            hash.Add(item.PreCutMapEntries);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NavigationMesh.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavigationMeshGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.NavmeshGeometry is IFormLinkContainerGetter NavmeshGeometrylinkCont)
            {
                foreach (var item in NavmeshGeometrylinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.PreCutMapEntries is {} PreCutMapEntriesItem)
            {
                foreach (var item in PreCutMapEntriesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(INavigationMeshGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public NavigationMesh Duplicate(
            INavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new NavigationMesh(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class NavigationMeshSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly NavigationMeshSetterTranslationCommon Instance = new NavigationMeshSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavigationMeshInternal item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INavigationMesh item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMesh_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMesh_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NavmeshGeometry) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMesh_FieldIndex.NavmeshGeometry);
                try
                {
                    if(rhs.NavmeshGeometry is {} rhsNavmeshGeometry)
                    {
                        item.NavmeshGeometry = rhsNavmeshGeometry.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.NavmeshGeometry));
                    }
                    else
                    {
                        item.NavmeshGeometry = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if(rhs.NNAM is {} NNAMrhs)
                {
                    item.NNAM = NNAMrhs.ToArray();
                }
                else
                {
                    item.NNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.PreCutMapEntries) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMesh_FieldIndex.PreCutMapEntries);
                try
                {
                    if ((rhs.PreCutMapEntries != null))
                    {
                        item.PreCutMapEntries = 
                            rhs.PreCutMapEntries
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PreCutMapEntry>();
                    }
                    else
                    {
                        item.PreCutMapEntries = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INavigationMesh item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInternal)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMesh)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInternal)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMesh)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavigationMesh.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class NavigationMesh
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMesh_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NavigationMeshSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class NavigationMeshBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly NavigationMeshBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INavigationMeshGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                ((NavmeshGeometryBinaryWriteTranslation)((IBinaryItem)NavmeshGeometryItem).BinaryWriteTranslator).Write(
                    item: NavmeshGeometryItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NNAM,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPreCutMapEntryGetter>.Instance.Write(
                writer: writer,
                items: item.PreCutMapEntries,
                recordType: translationParams.ConvertToCustom(RecordTypes.MNAM),
                transl: (MutagenWriter subWriter, IPreCutMapEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PreCutMapEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            INavigationMeshGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.NAVM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavigationMeshBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly NavigationMeshBinaryCreateTranslation Instance = new NavigationMeshBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NAVM;
        public static ParseResult FillBinaryRecordTypes(
            INavigationMeshInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)NavigationMesh_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)NavigationMesh_FieldIndex.Components;
                }
                case RecordTypeInts.NVNM:
                {
                    item.NavmeshGeometry = Mutagen.Bethesda.Starfield.NavmeshGeometry.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)NavigationMesh_FieldIndex.NavmeshGeometry;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMesh_FieldIndex.NNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreCutMapEntries = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PreCutMapEntry>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: PreCutMapEntry.TryCreateFromBinary)
                        .CastExtendedList<PreCutMapEntry>();
                    return (int)NavigationMesh_FieldIndex.PreCutMapEntries;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class NavigationMeshBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class NavigationMeshBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        INavigationMeshGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMesh_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMeshCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => NavigationMeshCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(INavigationMesh);

        public NavigationMesh.MajorFlag MajorFlags => (NavigationMesh.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region NavmeshGeometry
        private int? _NavmeshGeometryLengthOverride;
        private RangeInt32? _NavmeshGeometryLocation;
        public INavmeshGeometryGetter? NavmeshGeometry => _NavmeshGeometryLocation.HasValue ? NavmeshGeometryBinaryOverlay.NavmeshGeometryFactory(_recordData.Slice(_NavmeshGeometryLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_NavmeshGeometryLengthOverride)) : default;
        #endregion
        #region NNAM
        private int? _NNAMLocation;
        public ReadOnlyMemorySlice<Byte>? NNAM => _NNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IPreCutMapEntryGetter>? PreCutMapEntries { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMeshBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INavigationMeshGetter NavigationMeshFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NavigationMeshBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INavigationMeshGetter NavigationMeshFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavigationMeshFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)NavigationMesh_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)NavigationMesh_FieldIndex.Components;
                }
                case RecordTypeInts.NVNM:
                {
                    _NavmeshGeometryLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _NavmeshGeometryLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)NavigationMesh_FieldIndex.NavmeshGeometry;
                }
                case RecordTypeInts.NNAM:
                {
                    _NNAMLocation = (stream.Position - offset);
                    return (int)NavigationMesh_FieldIndex.NNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    this.PreCutMapEntries = BinaryOverlayList.FactoryByLazyParseWithTrigger<IPreCutMapEntryGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        getter: (s, p) => PreCutMapEntryBinaryOverlay.PreCutMapEntryFactory(s, p));
                    return (int)NavigationMesh_FieldIndex.PreCutMapEntries;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<NavigationMesh>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INavigationMeshGetter rhs) return false;
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshGetter? obj)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

