/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PerkRank :
        IEquatable<IPerkRankGetter>,
        ILoquiObjectSetter<PerkRank>,
        IPerkRank
    {
        #region Ctor
        public PerkRank()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<APerkEffect> _Effects = new ExtendedList<APerkEffect>();
        public ExtendedList<APerkEffect> Effects
        {
            get => this._Effects;
            init => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAPerkEffectGetter> IPerkRankGetter.Effects => _Effects;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IPerkRankGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Activities
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Activity>? _Activities;
        public ExtendedList<Activity>? Activities
        {
            get => this._Activities;
            set => this._Activities = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IActivityGetter>? IPerkRankGetter.Activities => _Activities;
        #endregion

        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IPerkRankGetter.Description => this.Description;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PerkRankMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPerkRankGetter rhs) return false;
            return ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPerkRankGetter? obj)
        {
            return ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, APerkEffect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, APerkEffect.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Activities = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Activity.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Activity.Mask<TItem>?>>());
                this.Description = initialValue;
            }

            public Mask(
                TItem Effects,
                TItem Conditions,
                TItem Activities,
                TItem Description)
            {
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, APerkEffect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, APerkEffect.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Activities = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Activity.Mask<TItem>?>>?>(Activities, Enumerable.Empty<MaskItemIndexed<TItem, Activity.Mask<TItem>?>>());
                this.Description = Description;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, APerkEffect.Mask<TItem>?>>?>? Effects;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Activity.Mask<TItem>?>>?>? Activities;
            public TItem Description;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Activities, rhs.Activities)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Effects);
                hash.Add(this.Conditions);
                hash.Add(this.Activities);
                hash.Add(this.Description);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Activities != null)
                {
                    if (!eval(this.Activities.Overall)) return false;
                    if (this.Activities.Specific != null)
                    {
                        foreach (var item in this.Activities.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Activities != null)
                {
                    if (eval(this.Activities.Overall)) return true;
                    if (this.Activities.Specific != null)
                    {
                        foreach (var item in this.Activities.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkRank.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, APerkEffect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, APerkEffect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, APerkEffect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific)
                        {
                            MaskItemIndexed<R, APerkEffect.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, APerkEffect.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Activities != null)
                {
                    obj.Activities = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Activity.Mask<R>?>>?>(eval(this.Activities.Overall), Enumerable.Empty<MaskItemIndexed<R, Activity.Mask<R>?>>());
                    if (Activities.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Activity.Mask<R>?>>();
                        obj.Activities.Specific = l;
                        foreach (var item in Activities.Specific)
                        {
                            MaskItemIndexed<R, Activity.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Activity.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PerkRank.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PerkRank.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PerkRank.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects is {} EffectsItem)
                    {
                        sb.AppendLine("Effects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Activities?.Overall ?? true)
                        && Activities is {} ActivitiesItem)
                    {
                        sb.AppendLine("Activities =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActivitiesItem.Overall);
                            if (ActivitiesItem.Specific != null)
                            {
                                foreach (var subItem in ActivitiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, APerkEffect.ErrorMask?>>?>? Effects;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Activity.ErrorMask?>>?>? Activities;
            public Exception? Description;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PerkRank_FieldIndex enu = (PerkRank_FieldIndex)index;
                switch (enu)
                {
                    case PerkRank_FieldIndex.Effects:
                        return Effects;
                    case PerkRank_FieldIndex.Conditions:
                        return Conditions;
                    case PerkRank_FieldIndex.Activities:
                        return Activities;
                    case PerkRank_FieldIndex.Description:
                        return Description;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PerkRank_FieldIndex enu = (PerkRank_FieldIndex)index;
                switch (enu)
                {
                    case PerkRank_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, APerkEffect.ErrorMask?>>?>(ex, null);
                        break;
                    case PerkRank_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case PerkRank_FieldIndex.Activities:
                        this.Activities = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Activity.ErrorMask?>>?>(ex, null);
                        break;
                    case PerkRank_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PerkRank_FieldIndex enu = (PerkRank_FieldIndex)index;
                switch (enu)
                {
                    case PerkRank_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, APerkEffect.ErrorMask?>>?>)obj;
                        break;
                    case PerkRank_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case PerkRank_FieldIndex.Activities:
                        this.Activities = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Activity.ErrorMask?>>?>)obj;
                        break;
                    case PerkRank_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Effects != null) return true;
                if (Conditions != null) return true;
                if (Activities != null) return true;
                if (Description != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                if (Effects is {} EffectsItem)
                {
                    sb.AppendLine("Effects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Activities is {} ActivitiesItem)
                {
                    sb.AppendLine("Activities =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActivitiesItem.Overall);
                        if (ActivitiesItem.Specific != null)
                        {
                            foreach (var subItem in ActivitiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, APerkEffect.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), Noggog.ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Activities = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Activity.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Activities?.Overall, rhs.Activities?.Overall), Noggog.ExceptionExt.Combine(this.Activities?.Specific, rhs.Activities?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public APerkEffect.TranslationMask? Effects;
            public Condition.TranslationMask? Conditions;
            public Activity.TranslationMask? Activities;
            public bool Description;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Description = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Activities == null ? DefaultOn : !Activities.GetCrystal().CopyNothing, Activities?.GetCrystal()));
                ret.Add((Description, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PerkRankCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PerkRankSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkRankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PerkRankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PerkRank CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PerkRank();
            ((PerkRankSetterCommon)((IPerkRankGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkRank item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PerkRankSetterCommon)((IPerkRankGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PerkRank GetNew()
        {
            return new PerkRank();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkRank :
        IFormLinkContainer,
        ILoquiObjectSetter<IPerkRank>,
        IPerkRankGetter
    {
        new ExtendedList<APerkEffect> Effects { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<Activity>? Activities { get; set; }
        new TranslatedString Description { get; set; }
    }

    public partial interface IPerkRankGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPerkRankGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PerkRank_Registration.Instance;
        IReadOnlyList<IAPerkEffectGetter> Effects { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IActivityGetter>? Activities { get; }
        ITranslatedStringGetter Description { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkRankMixIn
    {
        public static void Clear(this IPerkRank item)
        {
            ((PerkRankSetterCommon)((IPerkRankGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkRank.Mask<bool> GetEqualsMask(
            this IPerkRankGetter item,
            IPerkRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPerkRankGetter item,
            string? name = null,
            PerkRank.Mask<bool>? printMask = null)
        {
            return ((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPerkRankGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PerkRank.Mask<bool>? printMask = null)
        {
            ((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkRankGetter item,
            IPerkRankGetter rhs,
            PerkRank.TranslationMask? equalsMask = null)
        {
            return ((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPerkRank lhs,
            IPerkRankGetter rhs)
        {
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkRank lhs,
            IPerkRankGetter rhs,
            PerkRank.TranslationMask? copyMask = null)
        {
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkRank lhs,
            IPerkRankGetter rhs,
            out PerkRank.ErrorMask errorMask,
            PerkRank.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkRank.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkRank lhs,
            IPerkRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkRank DeepCopy(
            this IPerkRankGetter item,
            PerkRank.TranslationMask? copyMask = null)
        {
            return ((PerkRankSetterTranslationCommon)((IPerkRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkRank DeepCopy(
            this IPerkRankGetter item,
            out PerkRank.ErrorMask errorMask,
            PerkRank.TranslationMask? copyMask = null)
        {
            return ((PerkRankSetterTranslationCommon)((IPerkRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkRank DeepCopy(
            this IPerkRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkRankSetterTranslationCommon)((IPerkRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkRank item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PerkRankSetterCommon)((IPerkRankGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PerkRank_FieldIndex
    {
        Effects = 0,
        Conditions = 1,
        Activities = 2,
        Description = 3,
    }
    #endregion

    #region Registration
    internal partial class PerkRank_Registration : ILoquiRegistration
    {
        public static readonly PerkRank_Registration Instance = new PerkRank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(PerkRank.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkRank.ErrorMask);

        public static readonly Type ClassType = typeof(PerkRank);

        public static readonly Type GetterType = typeof(IPerkRankGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkRank);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PerkRank";

        public const string Name = "PerkRank";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.PRKE,
                RecordTypes.CTDA,
                RecordTypes.ATAN,
                RecordTypes.ATCP,
                RecordTypes.DESC);
            var all = RecordCollection.Factory(
                RecordTypes.PRKE,
                RecordTypes.CTDA,
                RecordTypes.ATAN,
                RecordTypes.ATCP,
                RecordTypes.DESC,
                RecordTypes.PRKF,
                RecordTypes.PRKC,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.ATAF,
                RecordTypes.FULL,
                RecordTypes.DNAM,
                RecordTypes.ANAM,
                RecordTypes.ATAV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PerkRankBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PerkRankSetterCommon
    {
        public static readonly PerkRankSetterCommon Instance = new PerkRankSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkRank item)
        {
            ClearPartial();
            item.Effects.Clear();
            item.Conditions.Clear();
            item.Activities = null;
            item.Description.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPerkRank obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Effects.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Activities?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkRank item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PerkRankBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class PerkRankCommon
    {
        public static readonly PerkRankCommon Instance = new PerkRankCommon();

        public PerkRank.Mask<bool> GetEqualsMask(
            IPerkRankGetter item,
            IPerkRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkRank.Mask<bool>(false);
            ((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkRankGetter item,
            IPerkRankGetter rhs,
            PerkRank.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Activities = item.Activities.CollectionEqualsHelper(
                rhs.Activities,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
        }
        
        public string Print(
            IPerkRankGetter item,
            string? name = null,
            PerkRank.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPerkRankGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PerkRank.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PerkRank =>");
            }
            else
            {
                sb.AppendLine($"{name} (PerkRank) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPerkRankGetter item,
            StructuredStringBuilder sb,
            PerkRank.Mask<bool>? printMask = null)
        {
            if (printMask?.Effects?.Overall ?? true)
            {
                sb.AppendLine("Effects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Effects)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Activities?.Overall ?? true)
                && item.Activities is {} ActivitiesItem)
            {
                sb.AppendLine("Activities =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActivitiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkRankGetter? lhs,
            IPerkRankGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Effects) ?? true))
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects, (l, r) => ((APerkEffectCommon)((IAPerkEffectGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PerkRank_FieldIndex.Effects)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PerkRank_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Activities) ?? true))
            {
                if (!lhs.Activities.SequenceEqualNullable(rhs.Activities, (l, r) => ((ActivityCommon)((IActivityGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PerkRank_FieldIndex.Activities)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPerkRankGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Effects);
            hash.Add(item.Conditions);
            hash.Add(item.Activities);
            hash.Add(item.Description);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PerkRank.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPerkRankGetter obj)
        {
            foreach (var item in obj.Effects.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Activities is {} ActivitiesItem)
            {
                foreach (var item in ActivitiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PerkRankSetterTranslationCommon
    {
        public static readonly PerkRankSetterTranslationCommon Instance = new PerkRankSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkRank item,
            IPerkRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)PerkRank_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)PerkRank_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Activities) ?? true))
            {
                errorMask?.PushIndex((int)PerkRank_FieldIndex.Activities);
                try
                {
                    if ((rhs.Activities != null))
                    {
                        item.Activities = 
                            rhs.Activities
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Activity>();
                    }
                    else
                    {
                        item.Activities = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PerkRank_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPerkRank item,
            IPerkRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PerkRank DeepCopy(
            IPerkRankGetter item,
            PerkRank.TranslationMask? copyMask = null)
        {
            PerkRank ret = (PerkRank)((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).GetNew();
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkRank DeepCopy(
            IPerkRankGetter item,
            out PerkRank.ErrorMask errorMask,
            PerkRank.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkRank ret = (PerkRank)((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).GetNew();
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkRank.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkRank DeepCopy(
            IPerkRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkRank ret = (PerkRank)((PerkRankCommon)((IPerkRankGetter)item).CommonInstance()!).GetNew();
            ((PerkRankSetterTranslationCommon)((IPerkRankGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PerkRank
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkRank_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PerkRank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkRankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PerkRankSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkRankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPerkRankGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPerkRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PerkRankBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PerkRankBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPerkRankGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            PerkRankBinaryWriteTranslation.WriteBinaryEffects(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IActivityGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Activities,
                counterType: RecordTypes.ATCP,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IActivityGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ActivityBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
        }

        public static partial void WriteBinaryEffectsCustom(
            MutagenWriter writer,
            IPerkRankGetter item);

        public static void WriteBinaryEffects(
            MutagenWriter writer,
            IPerkRankGetter item)
        {
            WriteBinaryEffectsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPerkRankGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPerkRankGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PerkRankBinaryCreateTranslation
    {
        public static readonly PerkRankBinaryCreateTranslation Instance = new PerkRankBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPerkRank item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PRKE:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Effects, translationParams)) return ParseResult.Stop;
                    PerkRankBinaryCreateTranslation.FillBinaryEffectsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)PerkRank_FieldIndex.Effects;
                }
                case RecordTypeInts.CTDA:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)PerkRank_FieldIndex.Conditions;
                }
                case RecordTypeInts.ATAN:
                case RecordTypeInts.ATCP:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Activities, translationParams)) return ParseResult.Stop;
                    item.Activities = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Activity>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.ATCP,
                            triggeringRecord: Activity_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Activity.TryCreateFromBinary)
                        .CastExtendedList<Activity>();
                    return (int)PerkRank_FieldIndex.Activities;
                }
                case RecordTypeInts.DESC:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PerkRank_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial void FillBinaryEffectsCustom(
            MutagenFrame frame,
            IPerkRank item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PerkRankBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPerkRankGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PerkRankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PerkRankBinaryOverlay :
        PluginBinaryOverlay,
        IPerkRankGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkRank_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PerkRank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkRankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkRankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPerkRankGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPerkRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PerkRankCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkRankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PerkRankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Effects
        partial void EffectsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        public IReadOnlyList<IActivityGetter>? Activities { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkRankBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPerkRankGetter PerkRankFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PerkRankBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPerkRankGetter PerkRankFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PerkRankFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PRKE:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Effects, translationParams)) return ParseResult.Stop;
                    EffectsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)PerkRank_FieldIndex.Effects;
                }
                case RecordTypeInts.CTDA:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PerkRank_FieldIndex.Conditions;
                }
                case RecordTypeInts.ATAN:
                case RecordTypeInts.ATCP:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Activities, translationParams)) return ParseResult.Stop;
                    this.Activities = BinaryOverlayList.FactoryByCountPerItem<IActivityGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: Activity_Registration.TriggerSpecs,
                        countType: RecordTypes.ATCP,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ActivityBinaryOverlay.ActivityFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)PerkRank_FieldIndex.Activities;
                }
                case RecordTypeInts.DESC:
                {
                    if (lastParsed.ShortCircuit((int)PerkRank_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)PerkRank_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PerkRankMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPerkRankGetter rhs) return false;
            return ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPerkRankGetter? obj)
        {
            return ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PerkRankCommon)((IPerkRankGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

