/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AimAssistModel :
        StarfieldMajorRecord,
        IAimAssistModelInternal,
        IEquatable<IAimAssistModelGetter>,
        ILoquiObjectSetter<AimAssistModel>
    {
        #region Ctor
        protected AimAssistModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region InnerConeAngleDegrees
        public Single InnerConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region OuterConeAngleDegrees
        public Single OuterConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region SteeringDegreesPerSec
        public Single SteeringDegreesPerSec { get; set; } = default(Single);
        #endregion
        #region PitchScale
        public Single PitchScale { get; set; } = default(Single);
        #endregion
        #region InnerSteeringRing
        public Single InnerSteeringRing { get; set; } = default(Single);
        #endregion
        #region OuterSteeringRing
        public Single OuterSteeringRing { get; set; } = default(Single);
        #endregion
        #region Friction
        public Single Friction { get; set; } = default(Single);
        #endregion
        #region MoveFollowDegreesPerSec
        public Single MoveFollowDegreesPerSec { get; set; } = default(Single);
        #endregion
        #region AdsSnapSteeringMult
        public Single AdsSnapSteeringMult { get; set; } = default(Single);
        #endregion
        #region AdsSnapSeconds
        public Single AdsSnapSeconds { get; set; } = default(Single);
        #endregion
        #region AdsSnapConeAngleDegrees
        public Single AdsSnapConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region NoSteering
        public Single NoSteering { get; set; } = default(Single);
        #endregion
        #region BulletBendingConeAngleDegrees
        public Single BulletBendingConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region AdsSnapSteeringMultiplierInnerRing
        public Single AdsSnapSteeringMultiplierInnerRing { get; set; } = default(Single);
        #endregion
        #region AdsSnapSteeringMultiplierOuterRing
        public Single AdsSnapSteeringMultiplierOuterRing { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierInnerConeAngleDegrees
        public Single AdsMultiplierInnerConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierOuterConeAngleDegrees
        public Single AdsMultiplierOuterConeAngleDegrees { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierInnerSteeringRing
        public Single AdsMultiplierInnerSteeringRing { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierOuterSteeringRing
        public Single AdsMultiplierOuterSteeringRing { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierFriction
        public Single AdsMultiplierFriction { get; set; } = default(Single);
        #endregion
        #region AdsMultiplierSteeringDegreesPerSec
        public Single AdsMultiplierSteeringDegreesPerSec { get; set; } = default(Single);
        #endregion
        #region AimAssistEnabled
        public Boolean AimAssistEnabled { get; set; } = default(Boolean);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimAssistModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.InnerConeAngleDegrees = initialValue;
                this.OuterConeAngleDegrees = initialValue;
                this.SteeringDegreesPerSec = initialValue;
                this.PitchScale = initialValue;
                this.InnerSteeringRing = initialValue;
                this.OuterSteeringRing = initialValue;
                this.Friction = initialValue;
                this.MoveFollowDegreesPerSec = initialValue;
                this.AdsSnapSteeringMult = initialValue;
                this.AdsSnapSeconds = initialValue;
                this.AdsSnapConeAngleDegrees = initialValue;
                this.NoSteering = initialValue;
                this.BulletBendingConeAngleDegrees = initialValue;
                this.AdsSnapSteeringMultiplierInnerRing = initialValue;
                this.AdsSnapSteeringMultiplierOuterRing = initialValue;
                this.AdsMultiplierInnerConeAngleDegrees = initialValue;
                this.AdsMultiplierOuterConeAngleDegrees = initialValue;
                this.AdsMultiplierInnerSteeringRing = initialValue;
                this.AdsMultiplierOuterSteeringRing = initialValue;
                this.AdsMultiplierFriction = initialValue;
                this.AdsMultiplierSteeringDegreesPerSec = initialValue;
                this.AimAssistEnabled = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem InnerConeAngleDegrees,
                TItem OuterConeAngleDegrees,
                TItem SteeringDegreesPerSec,
                TItem PitchScale,
                TItem InnerSteeringRing,
                TItem OuterSteeringRing,
                TItem Friction,
                TItem MoveFollowDegreesPerSec,
                TItem AdsSnapSteeringMult,
                TItem AdsSnapSeconds,
                TItem AdsSnapConeAngleDegrees,
                TItem NoSteering,
                TItem BulletBendingConeAngleDegrees,
                TItem AdsSnapSteeringMultiplierInnerRing,
                TItem AdsSnapSteeringMultiplierOuterRing,
                TItem AdsMultiplierInnerConeAngleDegrees,
                TItem AdsMultiplierOuterConeAngleDegrees,
                TItem AdsMultiplierInnerSteeringRing,
                TItem AdsMultiplierOuterSteeringRing,
                TItem AdsMultiplierFriction,
                TItem AdsMultiplierSteeringDegreesPerSec,
                TItem AimAssistEnabled)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.InnerConeAngleDegrees = InnerConeAngleDegrees;
                this.OuterConeAngleDegrees = OuterConeAngleDegrees;
                this.SteeringDegreesPerSec = SteeringDegreesPerSec;
                this.PitchScale = PitchScale;
                this.InnerSteeringRing = InnerSteeringRing;
                this.OuterSteeringRing = OuterSteeringRing;
                this.Friction = Friction;
                this.MoveFollowDegreesPerSec = MoveFollowDegreesPerSec;
                this.AdsSnapSteeringMult = AdsSnapSteeringMult;
                this.AdsSnapSeconds = AdsSnapSeconds;
                this.AdsSnapConeAngleDegrees = AdsSnapConeAngleDegrees;
                this.NoSteering = NoSteering;
                this.BulletBendingConeAngleDegrees = BulletBendingConeAngleDegrees;
                this.AdsSnapSteeringMultiplierInnerRing = AdsSnapSteeringMultiplierInnerRing;
                this.AdsSnapSteeringMultiplierOuterRing = AdsSnapSteeringMultiplierOuterRing;
                this.AdsMultiplierInnerConeAngleDegrees = AdsMultiplierInnerConeAngleDegrees;
                this.AdsMultiplierOuterConeAngleDegrees = AdsMultiplierOuterConeAngleDegrees;
                this.AdsMultiplierInnerSteeringRing = AdsMultiplierInnerSteeringRing;
                this.AdsMultiplierOuterSteeringRing = AdsMultiplierOuterSteeringRing;
                this.AdsMultiplierFriction = AdsMultiplierFriction;
                this.AdsMultiplierSteeringDegreesPerSec = AdsMultiplierSteeringDegreesPerSec;
                this.AimAssistEnabled = AimAssistEnabled;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem InnerConeAngleDegrees;
            public TItem OuterConeAngleDegrees;
            public TItem SteeringDegreesPerSec;
            public TItem PitchScale;
            public TItem InnerSteeringRing;
            public TItem OuterSteeringRing;
            public TItem Friction;
            public TItem MoveFollowDegreesPerSec;
            public TItem AdsSnapSteeringMult;
            public TItem AdsSnapSeconds;
            public TItem AdsSnapConeAngleDegrees;
            public TItem NoSteering;
            public TItem BulletBendingConeAngleDegrees;
            public TItem AdsSnapSteeringMultiplierInnerRing;
            public TItem AdsSnapSteeringMultiplierOuterRing;
            public TItem AdsMultiplierInnerConeAngleDegrees;
            public TItem AdsMultiplierOuterConeAngleDegrees;
            public TItem AdsMultiplierInnerSteeringRing;
            public TItem AdsMultiplierOuterSteeringRing;
            public TItem AdsMultiplierFriction;
            public TItem AdsMultiplierSteeringDegreesPerSec;
            public TItem AimAssistEnabled;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.InnerConeAngleDegrees, rhs.InnerConeAngleDegrees)) return false;
                if (!object.Equals(this.OuterConeAngleDegrees, rhs.OuterConeAngleDegrees)) return false;
                if (!object.Equals(this.SteeringDegreesPerSec, rhs.SteeringDegreesPerSec)) return false;
                if (!object.Equals(this.PitchScale, rhs.PitchScale)) return false;
                if (!object.Equals(this.InnerSteeringRing, rhs.InnerSteeringRing)) return false;
                if (!object.Equals(this.OuterSteeringRing, rhs.OuterSteeringRing)) return false;
                if (!object.Equals(this.Friction, rhs.Friction)) return false;
                if (!object.Equals(this.MoveFollowDegreesPerSec, rhs.MoveFollowDegreesPerSec)) return false;
                if (!object.Equals(this.AdsSnapSteeringMult, rhs.AdsSnapSteeringMult)) return false;
                if (!object.Equals(this.AdsSnapSeconds, rhs.AdsSnapSeconds)) return false;
                if (!object.Equals(this.AdsSnapConeAngleDegrees, rhs.AdsSnapConeAngleDegrees)) return false;
                if (!object.Equals(this.NoSteering, rhs.NoSteering)) return false;
                if (!object.Equals(this.BulletBendingConeAngleDegrees, rhs.BulletBendingConeAngleDegrees)) return false;
                if (!object.Equals(this.AdsSnapSteeringMultiplierInnerRing, rhs.AdsSnapSteeringMultiplierInnerRing)) return false;
                if (!object.Equals(this.AdsSnapSteeringMultiplierOuterRing, rhs.AdsSnapSteeringMultiplierOuterRing)) return false;
                if (!object.Equals(this.AdsMultiplierInnerConeAngleDegrees, rhs.AdsMultiplierInnerConeAngleDegrees)) return false;
                if (!object.Equals(this.AdsMultiplierOuterConeAngleDegrees, rhs.AdsMultiplierOuterConeAngleDegrees)) return false;
                if (!object.Equals(this.AdsMultiplierInnerSteeringRing, rhs.AdsMultiplierInnerSteeringRing)) return false;
                if (!object.Equals(this.AdsMultiplierOuterSteeringRing, rhs.AdsMultiplierOuterSteeringRing)) return false;
                if (!object.Equals(this.AdsMultiplierFriction, rhs.AdsMultiplierFriction)) return false;
                if (!object.Equals(this.AdsMultiplierSteeringDegreesPerSec, rhs.AdsMultiplierSteeringDegreesPerSec)) return false;
                if (!object.Equals(this.AimAssistEnabled, rhs.AimAssistEnabled)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.InnerConeAngleDegrees);
                hash.Add(this.OuterConeAngleDegrees);
                hash.Add(this.SteeringDegreesPerSec);
                hash.Add(this.PitchScale);
                hash.Add(this.InnerSteeringRing);
                hash.Add(this.OuterSteeringRing);
                hash.Add(this.Friction);
                hash.Add(this.MoveFollowDegreesPerSec);
                hash.Add(this.AdsSnapSteeringMult);
                hash.Add(this.AdsSnapSeconds);
                hash.Add(this.AdsSnapConeAngleDegrees);
                hash.Add(this.NoSteering);
                hash.Add(this.BulletBendingConeAngleDegrees);
                hash.Add(this.AdsSnapSteeringMultiplierInnerRing);
                hash.Add(this.AdsSnapSteeringMultiplierOuterRing);
                hash.Add(this.AdsMultiplierInnerConeAngleDegrees);
                hash.Add(this.AdsMultiplierOuterConeAngleDegrees);
                hash.Add(this.AdsMultiplierInnerSteeringRing);
                hash.Add(this.AdsMultiplierOuterSteeringRing);
                hash.Add(this.AdsMultiplierFriction);
                hash.Add(this.AdsMultiplierSteeringDegreesPerSec);
                hash.Add(this.AimAssistEnabled);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.InnerConeAngleDegrees)) return false;
                if (!eval(this.OuterConeAngleDegrees)) return false;
                if (!eval(this.SteeringDegreesPerSec)) return false;
                if (!eval(this.PitchScale)) return false;
                if (!eval(this.InnerSteeringRing)) return false;
                if (!eval(this.OuterSteeringRing)) return false;
                if (!eval(this.Friction)) return false;
                if (!eval(this.MoveFollowDegreesPerSec)) return false;
                if (!eval(this.AdsSnapSteeringMult)) return false;
                if (!eval(this.AdsSnapSeconds)) return false;
                if (!eval(this.AdsSnapConeAngleDegrees)) return false;
                if (!eval(this.NoSteering)) return false;
                if (!eval(this.BulletBendingConeAngleDegrees)) return false;
                if (!eval(this.AdsSnapSteeringMultiplierInnerRing)) return false;
                if (!eval(this.AdsSnapSteeringMultiplierOuterRing)) return false;
                if (!eval(this.AdsMultiplierInnerConeAngleDegrees)) return false;
                if (!eval(this.AdsMultiplierOuterConeAngleDegrees)) return false;
                if (!eval(this.AdsMultiplierInnerSteeringRing)) return false;
                if (!eval(this.AdsMultiplierOuterSteeringRing)) return false;
                if (!eval(this.AdsMultiplierFriction)) return false;
                if (!eval(this.AdsMultiplierSteeringDegreesPerSec)) return false;
                if (!eval(this.AimAssistEnabled)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.InnerConeAngleDegrees)) return true;
                if (eval(this.OuterConeAngleDegrees)) return true;
                if (eval(this.SteeringDegreesPerSec)) return true;
                if (eval(this.PitchScale)) return true;
                if (eval(this.InnerSteeringRing)) return true;
                if (eval(this.OuterSteeringRing)) return true;
                if (eval(this.Friction)) return true;
                if (eval(this.MoveFollowDegreesPerSec)) return true;
                if (eval(this.AdsSnapSteeringMult)) return true;
                if (eval(this.AdsSnapSeconds)) return true;
                if (eval(this.AdsSnapConeAngleDegrees)) return true;
                if (eval(this.NoSteering)) return true;
                if (eval(this.BulletBendingConeAngleDegrees)) return true;
                if (eval(this.AdsSnapSteeringMultiplierInnerRing)) return true;
                if (eval(this.AdsSnapSteeringMultiplierOuterRing)) return true;
                if (eval(this.AdsMultiplierInnerConeAngleDegrees)) return true;
                if (eval(this.AdsMultiplierOuterConeAngleDegrees)) return true;
                if (eval(this.AdsMultiplierInnerSteeringRing)) return true;
                if (eval(this.AdsMultiplierOuterSteeringRing)) return true;
                if (eval(this.AdsMultiplierFriction)) return true;
                if (eval(this.AdsMultiplierSteeringDegreesPerSec)) return true;
                if (eval(this.AimAssistEnabled)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AimAssistModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.InnerConeAngleDegrees = eval(this.InnerConeAngleDegrees);
                obj.OuterConeAngleDegrees = eval(this.OuterConeAngleDegrees);
                obj.SteeringDegreesPerSec = eval(this.SteeringDegreesPerSec);
                obj.PitchScale = eval(this.PitchScale);
                obj.InnerSteeringRing = eval(this.InnerSteeringRing);
                obj.OuterSteeringRing = eval(this.OuterSteeringRing);
                obj.Friction = eval(this.Friction);
                obj.MoveFollowDegreesPerSec = eval(this.MoveFollowDegreesPerSec);
                obj.AdsSnapSteeringMult = eval(this.AdsSnapSteeringMult);
                obj.AdsSnapSeconds = eval(this.AdsSnapSeconds);
                obj.AdsSnapConeAngleDegrees = eval(this.AdsSnapConeAngleDegrees);
                obj.NoSteering = eval(this.NoSteering);
                obj.BulletBendingConeAngleDegrees = eval(this.BulletBendingConeAngleDegrees);
                obj.AdsSnapSteeringMultiplierInnerRing = eval(this.AdsSnapSteeringMultiplierInnerRing);
                obj.AdsSnapSteeringMultiplierOuterRing = eval(this.AdsSnapSteeringMultiplierOuterRing);
                obj.AdsMultiplierInnerConeAngleDegrees = eval(this.AdsMultiplierInnerConeAngleDegrees);
                obj.AdsMultiplierOuterConeAngleDegrees = eval(this.AdsMultiplierOuterConeAngleDegrees);
                obj.AdsMultiplierInnerSteeringRing = eval(this.AdsMultiplierInnerSteeringRing);
                obj.AdsMultiplierOuterSteeringRing = eval(this.AdsMultiplierOuterSteeringRing);
                obj.AdsMultiplierFriction = eval(this.AdsMultiplierFriction);
                obj.AdsMultiplierSteeringDegreesPerSec = eval(this.AdsMultiplierSteeringDegreesPerSec);
                obj.AimAssistEnabled = eval(this.AimAssistEnabled);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AimAssistModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AimAssistModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AimAssistModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.InnerConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(InnerConeAngleDegrees, "InnerConeAngleDegrees");
                    }
                    if (printMask?.OuterConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(OuterConeAngleDegrees, "OuterConeAngleDegrees");
                    }
                    if (printMask?.SteeringDegreesPerSec ?? true)
                    {
                        sb.AppendItem(SteeringDegreesPerSec, "SteeringDegreesPerSec");
                    }
                    if (printMask?.PitchScale ?? true)
                    {
                        sb.AppendItem(PitchScale, "PitchScale");
                    }
                    if (printMask?.InnerSteeringRing ?? true)
                    {
                        sb.AppendItem(InnerSteeringRing, "InnerSteeringRing");
                    }
                    if (printMask?.OuterSteeringRing ?? true)
                    {
                        sb.AppendItem(OuterSteeringRing, "OuterSteeringRing");
                    }
                    if (printMask?.Friction ?? true)
                    {
                        sb.AppendItem(Friction, "Friction");
                    }
                    if (printMask?.MoveFollowDegreesPerSec ?? true)
                    {
                        sb.AppendItem(MoveFollowDegreesPerSec, "MoveFollowDegreesPerSec");
                    }
                    if (printMask?.AdsSnapSteeringMult ?? true)
                    {
                        sb.AppendItem(AdsSnapSteeringMult, "AdsSnapSteeringMult");
                    }
                    if (printMask?.AdsSnapSeconds ?? true)
                    {
                        sb.AppendItem(AdsSnapSeconds, "AdsSnapSeconds");
                    }
                    if (printMask?.AdsSnapConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(AdsSnapConeAngleDegrees, "AdsSnapConeAngleDegrees");
                    }
                    if (printMask?.NoSteering ?? true)
                    {
                        sb.AppendItem(NoSteering, "NoSteering");
                    }
                    if (printMask?.BulletBendingConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(BulletBendingConeAngleDegrees, "BulletBendingConeAngleDegrees");
                    }
                    if (printMask?.AdsSnapSteeringMultiplierInnerRing ?? true)
                    {
                        sb.AppendItem(AdsSnapSteeringMultiplierInnerRing, "AdsSnapSteeringMultiplierInnerRing");
                    }
                    if (printMask?.AdsSnapSteeringMultiplierOuterRing ?? true)
                    {
                        sb.AppendItem(AdsSnapSteeringMultiplierOuterRing, "AdsSnapSteeringMultiplierOuterRing");
                    }
                    if (printMask?.AdsMultiplierInnerConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(AdsMultiplierInnerConeAngleDegrees, "AdsMultiplierInnerConeAngleDegrees");
                    }
                    if (printMask?.AdsMultiplierOuterConeAngleDegrees ?? true)
                    {
                        sb.AppendItem(AdsMultiplierOuterConeAngleDegrees, "AdsMultiplierOuterConeAngleDegrees");
                    }
                    if (printMask?.AdsMultiplierInnerSteeringRing ?? true)
                    {
                        sb.AppendItem(AdsMultiplierInnerSteeringRing, "AdsMultiplierInnerSteeringRing");
                    }
                    if (printMask?.AdsMultiplierOuterSteeringRing ?? true)
                    {
                        sb.AppendItem(AdsMultiplierOuterSteeringRing, "AdsMultiplierOuterSteeringRing");
                    }
                    if (printMask?.AdsMultiplierFriction ?? true)
                    {
                        sb.AppendItem(AdsMultiplierFriction, "AdsMultiplierFriction");
                    }
                    if (printMask?.AdsMultiplierSteeringDegreesPerSec ?? true)
                    {
                        sb.AppendItem(AdsMultiplierSteeringDegreesPerSec, "AdsMultiplierSteeringDegreesPerSec");
                    }
                    if (printMask?.AimAssistEnabled ?? true)
                    {
                        sb.AppendItem(AimAssistEnabled, "AimAssistEnabled");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? InnerConeAngleDegrees;
            public Exception? OuterConeAngleDegrees;
            public Exception? SteeringDegreesPerSec;
            public Exception? PitchScale;
            public Exception? InnerSteeringRing;
            public Exception? OuterSteeringRing;
            public Exception? Friction;
            public Exception? MoveFollowDegreesPerSec;
            public Exception? AdsSnapSteeringMult;
            public Exception? AdsSnapSeconds;
            public Exception? AdsSnapConeAngleDegrees;
            public Exception? NoSteering;
            public Exception? BulletBendingConeAngleDegrees;
            public Exception? AdsSnapSteeringMultiplierInnerRing;
            public Exception? AdsSnapSteeringMultiplierOuterRing;
            public Exception? AdsMultiplierInnerConeAngleDegrees;
            public Exception? AdsMultiplierOuterConeAngleDegrees;
            public Exception? AdsMultiplierInnerSteeringRing;
            public Exception? AdsMultiplierOuterSteeringRing;
            public Exception? AdsMultiplierFriction;
            public Exception? AdsMultiplierSteeringDegreesPerSec;
            public Exception? AimAssistEnabled;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AimAssistModel_FieldIndex enu = (AimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case AimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        return InnerConeAngleDegrees;
                    case AimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        return OuterConeAngleDegrees;
                    case AimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        return SteeringDegreesPerSec;
                    case AimAssistModel_FieldIndex.PitchScale:
                        return PitchScale;
                    case AimAssistModel_FieldIndex.InnerSteeringRing:
                        return InnerSteeringRing;
                    case AimAssistModel_FieldIndex.OuterSteeringRing:
                        return OuterSteeringRing;
                    case AimAssistModel_FieldIndex.Friction:
                        return Friction;
                    case AimAssistModel_FieldIndex.MoveFollowDegreesPerSec:
                        return MoveFollowDegreesPerSec;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMult:
                        return AdsSnapSteeringMult;
                    case AimAssistModel_FieldIndex.AdsSnapSeconds:
                        return AdsSnapSeconds;
                    case AimAssistModel_FieldIndex.AdsSnapConeAngleDegrees:
                        return AdsSnapConeAngleDegrees;
                    case AimAssistModel_FieldIndex.NoSteering:
                        return NoSteering;
                    case AimAssistModel_FieldIndex.BulletBendingConeAngleDegrees:
                        return BulletBendingConeAngleDegrees;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierInnerRing:
                        return AdsSnapSteeringMultiplierInnerRing;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierOuterRing:
                        return AdsSnapSteeringMultiplierOuterRing;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerConeAngleDegrees:
                        return AdsMultiplierInnerConeAngleDegrees;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterConeAngleDegrees:
                        return AdsMultiplierOuterConeAngleDegrees;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerSteeringRing:
                        return AdsMultiplierInnerSteeringRing;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterSteeringRing:
                        return AdsMultiplierOuterSteeringRing;
                    case AimAssistModel_FieldIndex.AdsMultiplierFriction:
                        return AdsMultiplierFriction;
                    case AimAssistModel_FieldIndex.AdsMultiplierSteeringDegreesPerSec:
                        return AdsMultiplierSteeringDegreesPerSec;
                    case AimAssistModel_FieldIndex.AimAssistEnabled:
                        return AimAssistEnabled;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AimAssistModel_FieldIndex enu = (AimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case AimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        this.InnerConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        this.OuterConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        this.SteeringDegreesPerSec = ex;
                        break;
                    case AimAssistModel_FieldIndex.PitchScale:
                        this.PitchScale = ex;
                        break;
                    case AimAssistModel_FieldIndex.InnerSteeringRing:
                        this.InnerSteeringRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.OuterSteeringRing:
                        this.OuterSteeringRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.Friction:
                        this.Friction = ex;
                        break;
                    case AimAssistModel_FieldIndex.MoveFollowDegreesPerSec:
                        this.MoveFollowDegreesPerSec = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMult:
                        this.AdsSnapSteeringMult = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSeconds:
                        this.AdsSnapSeconds = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapConeAngleDegrees:
                        this.AdsSnapConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.NoSteering:
                        this.NoSteering = ex;
                        break;
                    case AimAssistModel_FieldIndex.BulletBendingConeAngleDegrees:
                        this.BulletBendingConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierInnerRing:
                        this.AdsSnapSteeringMultiplierInnerRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierOuterRing:
                        this.AdsSnapSteeringMultiplierOuterRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerConeAngleDegrees:
                        this.AdsMultiplierInnerConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterConeAngleDegrees:
                        this.AdsMultiplierOuterConeAngleDegrees = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerSteeringRing:
                        this.AdsMultiplierInnerSteeringRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterSteeringRing:
                        this.AdsMultiplierOuterSteeringRing = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierFriction:
                        this.AdsMultiplierFriction = ex;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierSteeringDegreesPerSec:
                        this.AdsMultiplierSteeringDegreesPerSec = ex;
                        break;
                    case AimAssistModel_FieldIndex.AimAssistEnabled:
                        this.AimAssistEnabled = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AimAssistModel_FieldIndex enu = (AimAssistModel_FieldIndex)index;
                switch (enu)
                {
                    case AimAssistModel_FieldIndex.InnerConeAngleDegrees:
                        this.InnerConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.OuterConeAngleDegrees:
                        this.OuterConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.SteeringDegreesPerSec:
                        this.SteeringDegreesPerSec = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.PitchScale:
                        this.PitchScale = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.InnerSteeringRing:
                        this.InnerSteeringRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.OuterSteeringRing:
                        this.OuterSteeringRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.Friction:
                        this.Friction = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.MoveFollowDegreesPerSec:
                        this.MoveFollowDegreesPerSec = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMult:
                        this.AdsSnapSteeringMult = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSeconds:
                        this.AdsSnapSeconds = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapConeAngleDegrees:
                        this.AdsSnapConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.NoSteering:
                        this.NoSteering = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.BulletBendingConeAngleDegrees:
                        this.BulletBendingConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierInnerRing:
                        this.AdsSnapSteeringMultiplierInnerRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierOuterRing:
                        this.AdsSnapSteeringMultiplierOuterRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerConeAngleDegrees:
                        this.AdsMultiplierInnerConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterConeAngleDegrees:
                        this.AdsMultiplierOuterConeAngleDegrees = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierInnerSteeringRing:
                        this.AdsMultiplierInnerSteeringRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierOuterSteeringRing:
                        this.AdsMultiplierOuterSteeringRing = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierFriction:
                        this.AdsMultiplierFriction = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AdsMultiplierSteeringDegreesPerSec:
                        this.AdsMultiplierSteeringDegreesPerSec = (Exception?)obj;
                        break;
                    case AimAssistModel_FieldIndex.AimAssistEnabled:
                        this.AimAssistEnabled = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (InnerConeAngleDegrees != null) return true;
                if (OuterConeAngleDegrees != null) return true;
                if (SteeringDegreesPerSec != null) return true;
                if (PitchScale != null) return true;
                if (InnerSteeringRing != null) return true;
                if (OuterSteeringRing != null) return true;
                if (Friction != null) return true;
                if (MoveFollowDegreesPerSec != null) return true;
                if (AdsSnapSteeringMult != null) return true;
                if (AdsSnapSeconds != null) return true;
                if (AdsSnapConeAngleDegrees != null) return true;
                if (NoSteering != null) return true;
                if (BulletBendingConeAngleDegrees != null) return true;
                if (AdsSnapSteeringMultiplierInnerRing != null) return true;
                if (AdsSnapSteeringMultiplierOuterRing != null) return true;
                if (AdsMultiplierInnerConeAngleDegrees != null) return true;
                if (AdsMultiplierOuterConeAngleDegrees != null) return true;
                if (AdsMultiplierInnerSteeringRing != null) return true;
                if (AdsMultiplierOuterSteeringRing != null) return true;
                if (AdsMultiplierFriction != null) return true;
                if (AdsMultiplierSteeringDegreesPerSec != null) return true;
                if (AimAssistEnabled != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(InnerConeAngleDegrees, "InnerConeAngleDegrees");
                }
                {
                    sb.AppendItem(OuterConeAngleDegrees, "OuterConeAngleDegrees");
                }
                {
                    sb.AppendItem(SteeringDegreesPerSec, "SteeringDegreesPerSec");
                }
                {
                    sb.AppendItem(PitchScale, "PitchScale");
                }
                {
                    sb.AppendItem(InnerSteeringRing, "InnerSteeringRing");
                }
                {
                    sb.AppendItem(OuterSteeringRing, "OuterSteeringRing");
                }
                {
                    sb.AppendItem(Friction, "Friction");
                }
                {
                    sb.AppendItem(MoveFollowDegreesPerSec, "MoveFollowDegreesPerSec");
                }
                {
                    sb.AppendItem(AdsSnapSteeringMult, "AdsSnapSteeringMult");
                }
                {
                    sb.AppendItem(AdsSnapSeconds, "AdsSnapSeconds");
                }
                {
                    sb.AppendItem(AdsSnapConeAngleDegrees, "AdsSnapConeAngleDegrees");
                }
                {
                    sb.AppendItem(NoSteering, "NoSteering");
                }
                {
                    sb.AppendItem(BulletBendingConeAngleDegrees, "BulletBendingConeAngleDegrees");
                }
                {
                    sb.AppendItem(AdsSnapSteeringMultiplierInnerRing, "AdsSnapSteeringMultiplierInnerRing");
                }
                {
                    sb.AppendItem(AdsSnapSteeringMultiplierOuterRing, "AdsSnapSteeringMultiplierOuterRing");
                }
                {
                    sb.AppendItem(AdsMultiplierInnerConeAngleDegrees, "AdsMultiplierInnerConeAngleDegrees");
                }
                {
                    sb.AppendItem(AdsMultiplierOuterConeAngleDegrees, "AdsMultiplierOuterConeAngleDegrees");
                }
                {
                    sb.AppendItem(AdsMultiplierInnerSteeringRing, "AdsMultiplierInnerSteeringRing");
                }
                {
                    sb.AppendItem(AdsMultiplierOuterSteeringRing, "AdsMultiplierOuterSteeringRing");
                }
                {
                    sb.AppendItem(AdsMultiplierFriction, "AdsMultiplierFriction");
                }
                {
                    sb.AppendItem(AdsMultiplierSteeringDegreesPerSec, "AdsMultiplierSteeringDegreesPerSec");
                }
                {
                    sb.AppendItem(AimAssistEnabled, "AimAssistEnabled");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.InnerConeAngleDegrees = this.InnerConeAngleDegrees.Combine(rhs.InnerConeAngleDegrees);
                ret.OuterConeAngleDegrees = this.OuterConeAngleDegrees.Combine(rhs.OuterConeAngleDegrees);
                ret.SteeringDegreesPerSec = this.SteeringDegreesPerSec.Combine(rhs.SteeringDegreesPerSec);
                ret.PitchScale = this.PitchScale.Combine(rhs.PitchScale);
                ret.InnerSteeringRing = this.InnerSteeringRing.Combine(rhs.InnerSteeringRing);
                ret.OuterSteeringRing = this.OuterSteeringRing.Combine(rhs.OuterSteeringRing);
                ret.Friction = this.Friction.Combine(rhs.Friction);
                ret.MoveFollowDegreesPerSec = this.MoveFollowDegreesPerSec.Combine(rhs.MoveFollowDegreesPerSec);
                ret.AdsSnapSteeringMult = this.AdsSnapSteeringMult.Combine(rhs.AdsSnapSteeringMult);
                ret.AdsSnapSeconds = this.AdsSnapSeconds.Combine(rhs.AdsSnapSeconds);
                ret.AdsSnapConeAngleDegrees = this.AdsSnapConeAngleDegrees.Combine(rhs.AdsSnapConeAngleDegrees);
                ret.NoSteering = this.NoSteering.Combine(rhs.NoSteering);
                ret.BulletBendingConeAngleDegrees = this.BulletBendingConeAngleDegrees.Combine(rhs.BulletBendingConeAngleDegrees);
                ret.AdsSnapSteeringMultiplierInnerRing = this.AdsSnapSteeringMultiplierInnerRing.Combine(rhs.AdsSnapSteeringMultiplierInnerRing);
                ret.AdsSnapSteeringMultiplierOuterRing = this.AdsSnapSteeringMultiplierOuterRing.Combine(rhs.AdsSnapSteeringMultiplierOuterRing);
                ret.AdsMultiplierInnerConeAngleDegrees = this.AdsMultiplierInnerConeAngleDegrees.Combine(rhs.AdsMultiplierInnerConeAngleDegrees);
                ret.AdsMultiplierOuterConeAngleDegrees = this.AdsMultiplierOuterConeAngleDegrees.Combine(rhs.AdsMultiplierOuterConeAngleDegrees);
                ret.AdsMultiplierInnerSteeringRing = this.AdsMultiplierInnerSteeringRing.Combine(rhs.AdsMultiplierInnerSteeringRing);
                ret.AdsMultiplierOuterSteeringRing = this.AdsMultiplierOuterSteeringRing.Combine(rhs.AdsMultiplierOuterSteeringRing);
                ret.AdsMultiplierFriction = this.AdsMultiplierFriction.Combine(rhs.AdsMultiplierFriction);
                ret.AdsMultiplierSteeringDegreesPerSec = this.AdsMultiplierSteeringDegreesPerSec.Combine(rhs.AdsMultiplierSteeringDegreesPerSec);
                ret.AimAssistEnabled = this.AimAssistEnabled.Combine(rhs.AimAssistEnabled);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool InnerConeAngleDegrees;
            public bool OuterConeAngleDegrees;
            public bool SteeringDegreesPerSec;
            public bool PitchScale;
            public bool InnerSteeringRing;
            public bool OuterSteeringRing;
            public bool Friction;
            public bool MoveFollowDegreesPerSec;
            public bool AdsSnapSteeringMult;
            public bool AdsSnapSeconds;
            public bool AdsSnapConeAngleDegrees;
            public bool NoSteering;
            public bool BulletBendingConeAngleDegrees;
            public bool AdsSnapSteeringMultiplierInnerRing;
            public bool AdsSnapSteeringMultiplierOuterRing;
            public bool AdsMultiplierInnerConeAngleDegrees;
            public bool AdsMultiplierOuterConeAngleDegrees;
            public bool AdsMultiplierInnerSteeringRing;
            public bool AdsMultiplierOuterSteeringRing;
            public bool AdsMultiplierFriction;
            public bool AdsMultiplierSteeringDegreesPerSec;
            public bool AimAssistEnabled;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.InnerConeAngleDegrees = defaultOn;
                this.OuterConeAngleDegrees = defaultOn;
                this.SteeringDegreesPerSec = defaultOn;
                this.PitchScale = defaultOn;
                this.InnerSteeringRing = defaultOn;
                this.OuterSteeringRing = defaultOn;
                this.Friction = defaultOn;
                this.MoveFollowDegreesPerSec = defaultOn;
                this.AdsSnapSteeringMult = defaultOn;
                this.AdsSnapSeconds = defaultOn;
                this.AdsSnapConeAngleDegrees = defaultOn;
                this.NoSteering = defaultOn;
                this.BulletBendingConeAngleDegrees = defaultOn;
                this.AdsSnapSteeringMultiplierInnerRing = defaultOn;
                this.AdsSnapSteeringMultiplierOuterRing = defaultOn;
                this.AdsMultiplierInnerConeAngleDegrees = defaultOn;
                this.AdsMultiplierOuterConeAngleDegrees = defaultOn;
                this.AdsMultiplierInnerSteeringRing = defaultOn;
                this.AdsMultiplierOuterSteeringRing = defaultOn;
                this.AdsMultiplierFriction = defaultOn;
                this.AdsMultiplierSteeringDegreesPerSec = defaultOn;
                this.AimAssistEnabled = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((InnerConeAngleDegrees, null));
                ret.Add((OuterConeAngleDegrees, null));
                ret.Add((SteeringDegreesPerSec, null));
                ret.Add((PitchScale, null));
                ret.Add((InnerSteeringRing, null));
                ret.Add((OuterSteeringRing, null));
                ret.Add((Friction, null));
                ret.Add((MoveFollowDegreesPerSec, null));
                ret.Add((AdsSnapSteeringMult, null));
                ret.Add((AdsSnapSeconds, null));
                ret.Add((AdsSnapConeAngleDegrees, null));
                ret.Add((NoSteering, null));
                ret.Add((BulletBendingConeAngleDegrees, null));
                ret.Add((AdsSnapSteeringMultiplierInnerRing, null));
                ret.Add((AdsSnapSteeringMultiplierOuterRing, null));
                ret.Add((AdsMultiplierInnerConeAngleDegrees, null));
                ret.Add((AdsMultiplierOuterConeAngleDegrees, null));
                ret.Add((AdsMultiplierInnerSteeringRing, null));
                ret.Add((AdsMultiplierOuterSteeringRing, null));
                ret.Add((AdsMultiplierFriction, null));
                ret.Add((AdsMultiplierSteeringDegreesPerSec, null));
                ret.Add((AimAssistEnabled, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AimAssistModel_Registration.TriggeringRecordType;
        public AimAssistModel(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AimAssistModel(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AimAssistModel(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AimAssistModel(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AimAssistModel(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AimAssistModel>.ToString(this);
        }

        protected override Type LinkType => typeof(IAimAssistModel);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimAssistModelGetter rhs) return false;
            return ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimAssistModelGetter? obj)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimAssistModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimAssistModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AimAssistModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AimAssistModel();
            ((AimAssistModelSetterCommon)((IAimAssistModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AimAssistModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AimAssistModelSetterCommon)((IAimAssistModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AimAssistModel GetNew()
        {
            return new AimAssistModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IAimAssistModel :
        IAimAssistModelGetter,
        ILoquiObjectSetter<IAimAssistModelInternal>,
        IStarfieldMajorRecordInternal
    {
        new Single InnerConeAngleDegrees { get; set; }
        new Single OuterConeAngleDegrees { get; set; }
        new Single SteeringDegreesPerSec { get; set; }
        new Single PitchScale { get; set; }
        new Single InnerSteeringRing { get; set; }
        new Single OuterSteeringRing { get; set; }
        new Single Friction { get; set; }
        new Single MoveFollowDegreesPerSec { get; set; }
        new Single AdsSnapSteeringMult { get; set; }
        new Single AdsSnapSeconds { get; set; }
        new Single AdsSnapConeAngleDegrees { get; set; }
        new Single NoSteering { get; set; }
        new Single BulletBendingConeAngleDegrees { get; set; }
        new Single AdsSnapSteeringMultiplierInnerRing { get; set; }
        new Single AdsSnapSteeringMultiplierOuterRing { get; set; }
        new Single AdsMultiplierInnerConeAngleDegrees { get; set; }
        new Single AdsMultiplierOuterConeAngleDegrees { get; set; }
        new Single AdsMultiplierInnerSteeringRing { get; set; }
        new Single AdsMultiplierOuterSteeringRing { get; set; }
        new Single AdsMultiplierFriction { get; set; }
        new Single AdsMultiplierSteeringDegreesPerSec { get; set; }
        new Boolean AimAssistEnabled { get; set; }
    }

    public partial interface IAimAssistModelInternal :
        IStarfieldMajorRecordInternal,
        IAimAssistModel,
        IAimAssistModelGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AAMD)]
    public partial interface IAimAssistModelGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IAimAssistModelGetter>,
        IMapsToGetter<IAimAssistModelGetter>
    {
        static new ILoquiRegistration StaticRegistration => AimAssistModel_Registration.Instance;
        Single InnerConeAngleDegrees { get; }
        Single OuterConeAngleDegrees { get; }
        Single SteeringDegreesPerSec { get; }
        Single PitchScale { get; }
        Single InnerSteeringRing { get; }
        Single OuterSteeringRing { get; }
        Single Friction { get; }
        Single MoveFollowDegreesPerSec { get; }
        Single AdsSnapSteeringMult { get; }
        Single AdsSnapSeconds { get; }
        Single AdsSnapConeAngleDegrees { get; }
        Single NoSteering { get; }
        Single BulletBendingConeAngleDegrees { get; }
        Single AdsSnapSteeringMultiplierInnerRing { get; }
        Single AdsSnapSteeringMultiplierOuterRing { get; }
        Single AdsMultiplierInnerConeAngleDegrees { get; }
        Single AdsMultiplierOuterConeAngleDegrees { get; }
        Single AdsMultiplierInnerSteeringRing { get; }
        Single AdsMultiplierOuterSteeringRing { get; }
        Single AdsMultiplierFriction { get; }
        Single AdsMultiplierSteeringDegreesPerSec { get; }
        Boolean AimAssistEnabled { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AimAssistModelMixIn
    {
        public static void Clear(this IAimAssistModelInternal item)
        {
            ((AimAssistModelSetterCommon)((IAimAssistModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AimAssistModel.Mask<bool> GetEqualsMask(
            this IAimAssistModelGetter item,
            IAimAssistModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAimAssistModelGetter item,
            string? name = null,
            AimAssistModel.Mask<bool>? printMask = null)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAimAssistModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimAssistModel.Mask<bool>? printMask = null)
        {
            ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAimAssistModelGetter item,
            IAimAssistModelGetter rhs,
            AimAssistModel.TranslationMask? equalsMask = null)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAimAssistModelInternal lhs,
            IAimAssistModelGetter rhs,
            out AimAssistModel.ErrorMask errorMask,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AimAssistModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAimAssistModelInternal lhs,
            IAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AimAssistModel DeepCopy(
            this IAimAssistModelGetter item,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            return ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AimAssistModel DeepCopy(
            this IAimAssistModelGetter item,
            out AimAssistModel.ErrorMask errorMask,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            return ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AimAssistModel DeepCopy(
            this IAimAssistModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AimAssistModel Duplicate(
            this IAimAssistModelGetter item,
            FormKey formKey,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AimAssistModel Duplicate(
            this IAimAssistModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAimAssistModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AimAssistModelSetterCommon)((IAimAssistModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AimAssistModel_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        InnerConeAngleDegrees = 7,
        OuterConeAngleDegrees = 8,
        SteeringDegreesPerSec = 9,
        PitchScale = 10,
        InnerSteeringRing = 11,
        OuterSteeringRing = 12,
        Friction = 13,
        MoveFollowDegreesPerSec = 14,
        AdsSnapSteeringMult = 15,
        AdsSnapSeconds = 16,
        AdsSnapConeAngleDegrees = 17,
        NoSteering = 18,
        BulletBendingConeAngleDegrees = 19,
        AdsSnapSteeringMultiplierInnerRing = 20,
        AdsSnapSteeringMultiplierOuterRing = 21,
        AdsMultiplierInnerConeAngleDegrees = 22,
        AdsMultiplierOuterConeAngleDegrees = 23,
        AdsMultiplierInnerSteeringRing = 24,
        AdsMultiplierOuterSteeringRing = 25,
        AdsMultiplierFriction = 26,
        AdsMultiplierSteeringDegreesPerSec = 27,
        AimAssistEnabled = 28,
    }
    #endregion

    #region Registration
    internal partial class AimAssistModel_Registration : ILoquiRegistration
    {
        public static readonly AimAssistModel_Registration Instance = new AimAssistModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(AimAssistModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AimAssistModel.ErrorMask);

        public static readonly Type ClassType = typeof(AimAssistModel);

        public static readonly Type GetterType = typeof(IAimAssistModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAimAssistModel);

        public static readonly Type? InternalSetterType = typeof(IAimAssistModelInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AimAssistModel";

        public const string Name = "AimAssistModel";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AAMD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AAMD);
            var all = RecordCollection.Factory(
                RecordTypes.AAMD,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AimAssistModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AimAssistModelSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AimAssistModelSetterCommon Instance = new AimAssistModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAimAssistModelInternal item)
        {
            ClearPartial();
            item.InnerConeAngleDegrees = default(Single);
            item.OuterConeAngleDegrees = default(Single);
            item.SteeringDegreesPerSec = default(Single);
            item.PitchScale = default(Single);
            item.InnerSteeringRing = default(Single);
            item.OuterSteeringRing = default(Single);
            item.Friction = default(Single);
            item.MoveFollowDegreesPerSec = default(Single);
            item.AdsSnapSteeringMult = default(Single);
            item.AdsSnapSeconds = default(Single);
            item.AdsSnapConeAngleDegrees = default(Single);
            item.NoSteering = default(Single);
            item.BulletBendingConeAngleDegrees = default(Single);
            item.AdsSnapSteeringMultiplierInnerRing = default(Single);
            item.AdsSnapSteeringMultiplierOuterRing = default(Single);
            item.AdsMultiplierInnerConeAngleDegrees = default(Single);
            item.AdsMultiplierOuterConeAngleDegrees = default(Single);
            item.AdsMultiplierInnerSteeringRing = default(Single);
            item.AdsMultiplierOuterSteeringRing = default(Single);
            item.AdsMultiplierFriction = default(Single);
            item.AdsMultiplierSteeringDegreesPerSec = default(Single);
            item.AimAssistEnabled = default(Boolean);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAimAssistModelInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAimAssistModelInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAimAssistModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAimAssistModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAimAssistModelInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AimAssistModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AimAssistModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimAssistModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimAssistModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AimAssistModelCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AimAssistModelCommon Instance = new AimAssistModelCommon();

        public AimAssistModel.Mask<bool> GetEqualsMask(
            IAimAssistModelGetter item,
            IAimAssistModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AimAssistModel.Mask<bool>(false);
            ((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAimAssistModelGetter item,
            IAimAssistModelGetter rhs,
            AimAssistModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.InnerConeAngleDegrees = item.InnerConeAngleDegrees.EqualsWithin(rhs.InnerConeAngleDegrees);
            ret.OuterConeAngleDegrees = item.OuterConeAngleDegrees.EqualsWithin(rhs.OuterConeAngleDegrees);
            ret.SteeringDegreesPerSec = item.SteeringDegreesPerSec.EqualsWithin(rhs.SteeringDegreesPerSec);
            ret.PitchScale = item.PitchScale.EqualsWithin(rhs.PitchScale);
            ret.InnerSteeringRing = item.InnerSteeringRing.EqualsWithin(rhs.InnerSteeringRing);
            ret.OuterSteeringRing = item.OuterSteeringRing.EqualsWithin(rhs.OuterSteeringRing);
            ret.Friction = item.Friction.EqualsWithin(rhs.Friction);
            ret.MoveFollowDegreesPerSec = item.MoveFollowDegreesPerSec.EqualsWithin(rhs.MoveFollowDegreesPerSec);
            ret.AdsSnapSteeringMult = item.AdsSnapSteeringMult.EqualsWithin(rhs.AdsSnapSteeringMult);
            ret.AdsSnapSeconds = item.AdsSnapSeconds.EqualsWithin(rhs.AdsSnapSeconds);
            ret.AdsSnapConeAngleDegrees = item.AdsSnapConeAngleDegrees.EqualsWithin(rhs.AdsSnapConeAngleDegrees);
            ret.NoSteering = item.NoSteering.EqualsWithin(rhs.NoSteering);
            ret.BulletBendingConeAngleDegrees = item.BulletBendingConeAngleDegrees.EqualsWithin(rhs.BulletBendingConeAngleDegrees);
            ret.AdsSnapSteeringMultiplierInnerRing = item.AdsSnapSteeringMultiplierInnerRing.EqualsWithin(rhs.AdsSnapSteeringMultiplierInnerRing);
            ret.AdsSnapSteeringMultiplierOuterRing = item.AdsSnapSteeringMultiplierOuterRing.EqualsWithin(rhs.AdsSnapSteeringMultiplierOuterRing);
            ret.AdsMultiplierInnerConeAngleDegrees = item.AdsMultiplierInnerConeAngleDegrees.EqualsWithin(rhs.AdsMultiplierInnerConeAngleDegrees);
            ret.AdsMultiplierOuterConeAngleDegrees = item.AdsMultiplierOuterConeAngleDegrees.EqualsWithin(rhs.AdsMultiplierOuterConeAngleDegrees);
            ret.AdsMultiplierInnerSteeringRing = item.AdsMultiplierInnerSteeringRing.EqualsWithin(rhs.AdsMultiplierInnerSteeringRing);
            ret.AdsMultiplierOuterSteeringRing = item.AdsMultiplierOuterSteeringRing.EqualsWithin(rhs.AdsMultiplierOuterSteeringRing);
            ret.AdsMultiplierFriction = item.AdsMultiplierFriction.EqualsWithin(rhs.AdsMultiplierFriction);
            ret.AdsMultiplierSteeringDegreesPerSec = item.AdsMultiplierSteeringDegreesPerSec.EqualsWithin(rhs.AdsMultiplierSteeringDegreesPerSec);
            ret.AimAssistEnabled = item.AimAssistEnabled == rhs.AimAssistEnabled;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAimAssistModelGetter item,
            string? name = null,
            AimAssistModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAimAssistModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimAssistModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AimAssistModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (AimAssistModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAimAssistModelGetter item,
            StructuredStringBuilder sb,
            AimAssistModel.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.InnerConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.InnerConeAngleDegrees, "InnerConeAngleDegrees");
            }
            if (printMask?.OuterConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.OuterConeAngleDegrees, "OuterConeAngleDegrees");
            }
            if (printMask?.SteeringDegreesPerSec ?? true)
            {
                sb.AppendItem(item.SteeringDegreesPerSec, "SteeringDegreesPerSec");
            }
            if (printMask?.PitchScale ?? true)
            {
                sb.AppendItem(item.PitchScale, "PitchScale");
            }
            if (printMask?.InnerSteeringRing ?? true)
            {
                sb.AppendItem(item.InnerSteeringRing, "InnerSteeringRing");
            }
            if (printMask?.OuterSteeringRing ?? true)
            {
                sb.AppendItem(item.OuterSteeringRing, "OuterSteeringRing");
            }
            if (printMask?.Friction ?? true)
            {
                sb.AppendItem(item.Friction, "Friction");
            }
            if (printMask?.MoveFollowDegreesPerSec ?? true)
            {
                sb.AppendItem(item.MoveFollowDegreesPerSec, "MoveFollowDegreesPerSec");
            }
            if (printMask?.AdsSnapSteeringMult ?? true)
            {
                sb.AppendItem(item.AdsSnapSteeringMult, "AdsSnapSteeringMult");
            }
            if (printMask?.AdsSnapSeconds ?? true)
            {
                sb.AppendItem(item.AdsSnapSeconds, "AdsSnapSeconds");
            }
            if (printMask?.AdsSnapConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.AdsSnapConeAngleDegrees, "AdsSnapConeAngleDegrees");
            }
            if (printMask?.NoSteering ?? true)
            {
                sb.AppendItem(item.NoSteering, "NoSteering");
            }
            if (printMask?.BulletBendingConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.BulletBendingConeAngleDegrees, "BulletBendingConeAngleDegrees");
            }
            if (printMask?.AdsSnapSteeringMultiplierInnerRing ?? true)
            {
                sb.AppendItem(item.AdsSnapSteeringMultiplierInnerRing, "AdsSnapSteeringMultiplierInnerRing");
            }
            if (printMask?.AdsSnapSteeringMultiplierOuterRing ?? true)
            {
                sb.AppendItem(item.AdsSnapSteeringMultiplierOuterRing, "AdsSnapSteeringMultiplierOuterRing");
            }
            if (printMask?.AdsMultiplierInnerConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.AdsMultiplierInnerConeAngleDegrees, "AdsMultiplierInnerConeAngleDegrees");
            }
            if (printMask?.AdsMultiplierOuterConeAngleDegrees ?? true)
            {
                sb.AppendItem(item.AdsMultiplierOuterConeAngleDegrees, "AdsMultiplierOuterConeAngleDegrees");
            }
            if (printMask?.AdsMultiplierInnerSteeringRing ?? true)
            {
                sb.AppendItem(item.AdsMultiplierInnerSteeringRing, "AdsMultiplierInnerSteeringRing");
            }
            if (printMask?.AdsMultiplierOuterSteeringRing ?? true)
            {
                sb.AppendItem(item.AdsMultiplierOuterSteeringRing, "AdsMultiplierOuterSteeringRing");
            }
            if (printMask?.AdsMultiplierFriction ?? true)
            {
                sb.AppendItem(item.AdsMultiplierFriction, "AdsMultiplierFriction");
            }
            if (printMask?.AdsMultiplierSteeringDegreesPerSec ?? true)
            {
                sb.AppendItem(item.AdsMultiplierSteeringDegreesPerSec, "AdsMultiplierSteeringDegreesPerSec");
            }
            if (printMask?.AimAssistEnabled ?? true)
            {
                sb.AppendItem(item.AimAssistEnabled, "AimAssistEnabled");
            }
        }
        
        public static AimAssistModel_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AimAssistModel_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AimAssistModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AimAssistModel_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AimAssistModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AimAssistModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAimAssistModelGetter? lhs,
            IAimAssistModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.InnerConeAngleDegrees) ?? true))
            {
                if (!lhs.InnerConeAngleDegrees.EqualsWithin(rhs.InnerConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.OuterConeAngleDegrees) ?? true))
            {
                if (!lhs.OuterConeAngleDegrees.EqualsWithin(rhs.OuterConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.SteeringDegreesPerSec) ?? true))
            {
                if (!lhs.SteeringDegreesPerSec.EqualsWithin(rhs.SteeringDegreesPerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.PitchScale) ?? true))
            {
                if (!lhs.PitchScale.EqualsWithin(rhs.PitchScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.InnerSteeringRing) ?? true))
            {
                if (!lhs.InnerSteeringRing.EqualsWithin(rhs.InnerSteeringRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.OuterSteeringRing) ?? true))
            {
                if (!lhs.OuterSteeringRing.EqualsWithin(rhs.OuterSteeringRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.Friction) ?? true))
            {
                if (!lhs.Friction.EqualsWithin(rhs.Friction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.MoveFollowDegreesPerSec) ?? true))
            {
                if (!lhs.MoveFollowDegreesPerSec.EqualsWithin(rhs.MoveFollowDegreesPerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMult) ?? true))
            {
                if (!lhs.AdsSnapSteeringMult.EqualsWithin(rhs.AdsSnapSteeringMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSeconds) ?? true))
            {
                if (!lhs.AdsSnapSeconds.EqualsWithin(rhs.AdsSnapSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapConeAngleDegrees) ?? true))
            {
                if (!lhs.AdsSnapConeAngleDegrees.EqualsWithin(rhs.AdsSnapConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.NoSteering) ?? true))
            {
                if (!lhs.NoSteering.EqualsWithin(rhs.NoSteering)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.BulletBendingConeAngleDegrees) ?? true))
            {
                if (!lhs.BulletBendingConeAngleDegrees.EqualsWithin(rhs.BulletBendingConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierInnerRing) ?? true))
            {
                if (!lhs.AdsSnapSteeringMultiplierInnerRing.EqualsWithin(rhs.AdsSnapSteeringMultiplierInnerRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierOuterRing) ?? true))
            {
                if (!lhs.AdsSnapSteeringMultiplierOuterRing.EqualsWithin(rhs.AdsSnapSteeringMultiplierOuterRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierInnerConeAngleDegrees) ?? true))
            {
                if (!lhs.AdsMultiplierInnerConeAngleDegrees.EqualsWithin(rhs.AdsMultiplierInnerConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierOuterConeAngleDegrees) ?? true))
            {
                if (!lhs.AdsMultiplierOuterConeAngleDegrees.EqualsWithin(rhs.AdsMultiplierOuterConeAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierInnerSteeringRing) ?? true))
            {
                if (!lhs.AdsMultiplierInnerSteeringRing.EqualsWithin(rhs.AdsMultiplierInnerSteeringRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierOuterSteeringRing) ?? true))
            {
                if (!lhs.AdsMultiplierOuterSteeringRing.EqualsWithin(rhs.AdsMultiplierOuterSteeringRing)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierFriction) ?? true))
            {
                if (!lhs.AdsMultiplierFriction.EqualsWithin(rhs.AdsMultiplierFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierSteeringDegreesPerSec) ?? true))
            {
                if (!lhs.AdsMultiplierSteeringDegreesPerSec.EqualsWithin(rhs.AdsMultiplierSteeringDegreesPerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AimAssistEnabled) ?? true))
            {
                if (lhs.AimAssistEnabled != rhs.AimAssistEnabled) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimAssistModelGetter?)lhs,
                rhs: rhs as IAimAssistModelGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimAssistModelGetter?)lhs,
                rhs: rhs as IAimAssistModelGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAimAssistModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.InnerConeAngleDegrees);
            hash.Add(item.OuterConeAngleDegrees);
            hash.Add(item.SteeringDegreesPerSec);
            hash.Add(item.PitchScale);
            hash.Add(item.InnerSteeringRing);
            hash.Add(item.OuterSteeringRing);
            hash.Add(item.Friction);
            hash.Add(item.MoveFollowDegreesPerSec);
            hash.Add(item.AdsSnapSteeringMult);
            hash.Add(item.AdsSnapSeconds);
            hash.Add(item.AdsSnapConeAngleDegrees);
            hash.Add(item.NoSteering);
            hash.Add(item.BulletBendingConeAngleDegrees);
            hash.Add(item.AdsSnapSteeringMultiplierInnerRing);
            hash.Add(item.AdsSnapSteeringMultiplierOuterRing);
            hash.Add(item.AdsMultiplierInnerConeAngleDegrees);
            hash.Add(item.AdsMultiplierOuterConeAngleDegrees);
            hash.Add(item.AdsMultiplierInnerSteeringRing);
            hash.Add(item.AdsMultiplierOuterSteeringRing);
            hash.Add(item.AdsMultiplierFriction);
            hash.Add(item.AdsMultiplierSteeringDegreesPerSec);
            hash.Add(item.AimAssistEnabled);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimAssistModelGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimAssistModelGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AimAssistModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAimAssistModelGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public AimAssistModel Duplicate(
            IAimAssistModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AimAssistModel(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimAssistModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimAssistModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AimAssistModelSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AimAssistModelSetterTranslationCommon Instance = new AimAssistModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAimAssistModelInternal item,
            IAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAimAssistModel item,
            IAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.InnerConeAngleDegrees) ?? true))
            {
                item.InnerConeAngleDegrees = rhs.InnerConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.OuterConeAngleDegrees) ?? true))
            {
                item.OuterConeAngleDegrees = rhs.OuterConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.SteeringDegreesPerSec) ?? true))
            {
                item.SteeringDegreesPerSec = rhs.SteeringDegreesPerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.PitchScale) ?? true))
            {
                item.PitchScale = rhs.PitchScale;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.InnerSteeringRing) ?? true))
            {
                item.InnerSteeringRing = rhs.InnerSteeringRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.OuterSteeringRing) ?? true))
            {
                item.OuterSteeringRing = rhs.OuterSteeringRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.Friction) ?? true))
            {
                item.Friction = rhs.Friction;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.MoveFollowDegreesPerSec) ?? true))
            {
                item.MoveFollowDegreesPerSec = rhs.MoveFollowDegreesPerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMult) ?? true))
            {
                item.AdsSnapSteeringMult = rhs.AdsSnapSteeringMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSeconds) ?? true))
            {
                item.AdsSnapSeconds = rhs.AdsSnapSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapConeAngleDegrees) ?? true))
            {
                item.AdsSnapConeAngleDegrees = rhs.AdsSnapConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.NoSteering) ?? true))
            {
                item.NoSteering = rhs.NoSteering;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.BulletBendingConeAngleDegrees) ?? true))
            {
                item.BulletBendingConeAngleDegrees = rhs.BulletBendingConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierInnerRing) ?? true))
            {
                item.AdsSnapSteeringMultiplierInnerRing = rhs.AdsSnapSteeringMultiplierInnerRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsSnapSteeringMultiplierOuterRing) ?? true))
            {
                item.AdsSnapSteeringMultiplierOuterRing = rhs.AdsSnapSteeringMultiplierOuterRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierInnerConeAngleDegrees) ?? true))
            {
                item.AdsMultiplierInnerConeAngleDegrees = rhs.AdsMultiplierInnerConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierOuterConeAngleDegrees) ?? true))
            {
                item.AdsMultiplierOuterConeAngleDegrees = rhs.AdsMultiplierOuterConeAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierInnerSteeringRing) ?? true))
            {
                item.AdsMultiplierInnerSteeringRing = rhs.AdsMultiplierInnerSteeringRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierOuterSteeringRing) ?? true))
            {
                item.AdsMultiplierOuterSteeringRing = rhs.AdsMultiplierOuterSteeringRing;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierFriction) ?? true))
            {
                item.AdsMultiplierFriction = rhs.AdsMultiplierFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AdsMultiplierSteeringDegreesPerSec) ?? true))
            {
                item.AdsMultiplierSteeringDegreesPerSec = rhs.AdsMultiplierSteeringDegreesPerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)AimAssistModel_FieldIndex.AimAssistEnabled) ?? true))
            {
                item.AimAssistEnabled = rhs.AimAssistEnabled;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAimAssistModel item,
            IAimAssistModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimAssistModelInternal)item,
                rhs: (IAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimAssistModel)item,
                rhs: (IAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimAssistModelInternal)item,
                rhs: (IAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimAssistModel)item,
                rhs: (IAimAssistModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AimAssistModel DeepCopy(
            IAimAssistModelGetter item,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            AimAssistModel ret = (AimAssistModel)((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AimAssistModel DeepCopy(
            IAimAssistModelGetter item,
            out AimAssistModel.ErrorMask errorMask,
            AimAssistModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AimAssistModel ret = (AimAssistModel)((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AimAssistModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AimAssistModel DeepCopy(
            IAimAssistModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AimAssistModel ret = (AimAssistModel)((AimAssistModelCommon)((IAimAssistModelGetter)item).CommonInstance()!).GetNew();
            ((AimAssistModelSetterTranslationCommon)((IAimAssistModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AimAssistModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimAssistModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimAssistModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimAssistModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AimAssistModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimAssistModelSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AimAssistModelBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AimAssistModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAimAssistModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.SNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InnerConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OuterConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SteeringDegreesPerSec);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PitchScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InnerSteeringRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OuterSteeringRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Friction);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MoveFollowDegreesPerSec);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsSnapSteeringMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsSnapSeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsSnapConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.NoSteering);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BulletBendingConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsSnapSteeringMultiplierInnerRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsSnapSteeringMultiplierOuterRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierInnerConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierOuterConeAngleDegrees);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierInnerSteeringRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierOuterSteeringRing);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierFriction);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsMultiplierSteeringDegreesPerSec);
                writer.Write(item.AimAssistEnabled);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAimAssistModelGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AAMD,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimAssistModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AimAssistModelBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AimAssistModelBinaryCreateTranslation Instance = new AimAssistModelBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AAMD;
        public static ParseResult FillBinaryRecordTypes(
            IAimAssistModelInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.InnerConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OuterConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SteeringDegreesPerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PitchScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.InnerSteeringRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OuterSteeringRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Friction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MoveFollowDegreesPerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsSnapSteeringMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsSnapSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsSnapConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.NoSteering = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BulletBendingConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsSnapSteeringMultiplierInnerRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsSnapSteeringMultiplierOuterRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierInnerConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierOuterConeAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierInnerSteeringRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierOuterSteeringRing = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsMultiplierSteeringDegreesPerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.AimAssistEnabled = dataFrame.ReadBoolean();
                    return (int)AimAssistModel_FieldIndex.AimAssistEnabled;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AimAssistModelBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AimAssistModelBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAimAssistModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimAssistModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimAssistModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimAssistModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimAssistModelSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimAssistModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimAssistModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAimAssistModel);


        private RangeInt32? _SNAMLocation;
        #region InnerConeAngleDegrees
        private int _InnerConeAngleDegreesLocation => _SNAMLocation!.Value.Min;
        private bool _InnerConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single InnerConeAngleDegrees => _InnerConeAngleDegrees_IsSet ? _recordData.Slice(_InnerConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region OuterConeAngleDegrees
        private int _OuterConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x4;
        private bool _OuterConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single OuterConeAngleDegrees => _OuterConeAngleDegrees_IsSet ? _recordData.Slice(_OuterConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region SteeringDegreesPerSec
        private int _SteeringDegreesPerSecLocation => _SNAMLocation!.Value.Min + 0x8;
        private bool _SteeringDegreesPerSec_IsSet => _SNAMLocation.HasValue;
        public Single SteeringDegreesPerSec => _SteeringDegreesPerSec_IsSet ? _recordData.Slice(_SteeringDegreesPerSecLocation, 4).Float() : default(Single);
        #endregion
        #region PitchScale
        private int _PitchScaleLocation => _SNAMLocation!.Value.Min + 0xC;
        private bool _PitchScale_IsSet => _SNAMLocation.HasValue;
        public Single PitchScale => _PitchScale_IsSet ? _recordData.Slice(_PitchScaleLocation, 4).Float() : default(Single);
        #endregion
        #region InnerSteeringRing
        private int _InnerSteeringRingLocation => _SNAMLocation!.Value.Min + 0x10;
        private bool _InnerSteeringRing_IsSet => _SNAMLocation.HasValue;
        public Single InnerSteeringRing => _InnerSteeringRing_IsSet ? _recordData.Slice(_InnerSteeringRingLocation, 4).Float() : default(Single);
        #endregion
        #region OuterSteeringRing
        private int _OuterSteeringRingLocation => _SNAMLocation!.Value.Min + 0x14;
        private bool _OuterSteeringRing_IsSet => _SNAMLocation.HasValue;
        public Single OuterSteeringRing => _OuterSteeringRing_IsSet ? _recordData.Slice(_OuterSteeringRingLocation, 4).Float() : default(Single);
        #endregion
        #region Friction
        private int _FrictionLocation => _SNAMLocation!.Value.Min + 0x18;
        private bool _Friction_IsSet => _SNAMLocation.HasValue;
        public Single Friction => _Friction_IsSet ? _recordData.Slice(_FrictionLocation, 4).Float() : default(Single);
        #endregion
        #region MoveFollowDegreesPerSec
        private int _MoveFollowDegreesPerSecLocation => _SNAMLocation!.Value.Min + 0x1C;
        private bool _MoveFollowDegreesPerSec_IsSet => _SNAMLocation.HasValue;
        public Single MoveFollowDegreesPerSec => _MoveFollowDegreesPerSec_IsSet ? _recordData.Slice(_MoveFollowDegreesPerSecLocation, 4).Float() : default(Single);
        #endregion
        #region AdsSnapSteeringMult
        private int _AdsSnapSteeringMultLocation => _SNAMLocation!.Value.Min + 0x20;
        private bool _AdsSnapSteeringMult_IsSet => _SNAMLocation.HasValue;
        public Single AdsSnapSteeringMult => _AdsSnapSteeringMult_IsSet ? _recordData.Slice(_AdsSnapSteeringMultLocation, 4).Float() : default(Single);
        #endregion
        #region AdsSnapSeconds
        private int _AdsSnapSecondsLocation => _SNAMLocation!.Value.Min + 0x24;
        private bool _AdsSnapSeconds_IsSet => _SNAMLocation.HasValue;
        public Single AdsSnapSeconds => _AdsSnapSeconds_IsSet ? _recordData.Slice(_AdsSnapSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region AdsSnapConeAngleDegrees
        private int _AdsSnapConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x28;
        private bool _AdsSnapConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single AdsSnapConeAngleDegrees => _AdsSnapConeAngleDegrees_IsSet ? _recordData.Slice(_AdsSnapConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region NoSteering
        private int _NoSteeringLocation => _SNAMLocation!.Value.Min + 0x2C;
        private bool _NoSteering_IsSet => _SNAMLocation.HasValue;
        public Single NoSteering => _NoSteering_IsSet ? _recordData.Slice(_NoSteeringLocation, 4).Float() : default(Single);
        #endregion
        #region BulletBendingConeAngleDegrees
        private int _BulletBendingConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x30;
        private bool _BulletBendingConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single BulletBendingConeAngleDegrees => _BulletBendingConeAngleDegrees_IsSet ? _recordData.Slice(_BulletBendingConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region AdsSnapSteeringMultiplierInnerRing
        private int _AdsSnapSteeringMultiplierInnerRingLocation => _SNAMLocation!.Value.Min + 0x34;
        private bool _AdsSnapSteeringMultiplierInnerRing_IsSet => _SNAMLocation.HasValue;
        public Single AdsSnapSteeringMultiplierInnerRing => _AdsSnapSteeringMultiplierInnerRing_IsSet ? _recordData.Slice(_AdsSnapSteeringMultiplierInnerRingLocation, 4).Float() : default(Single);
        #endregion
        #region AdsSnapSteeringMultiplierOuterRing
        private int _AdsSnapSteeringMultiplierOuterRingLocation => _SNAMLocation!.Value.Min + 0x38;
        private bool _AdsSnapSteeringMultiplierOuterRing_IsSet => _SNAMLocation.HasValue;
        public Single AdsSnapSteeringMultiplierOuterRing => _AdsSnapSteeringMultiplierOuterRing_IsSet ? _recordData.Slice(_AdsSnapSteeringMultiplierOuterRingLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierInnerConeAngleDegrees
        private int _AdsMultiplierInnerConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x3C;
        private bool _AdsMultiplierInnerConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierInnerConeAngleDegrees => _AdsMultiplierInnerConeAngleDegrees_IsSet ? _recordData.Slice(_AdsMultiplierInnerConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierOuterConeAngleDegrees
        private int _AdsMultiplierOuterConeAngleDegreesLocation => _SNAMLocation!.Value.Min + 0x40;
        private bool _AdsMultiplierOuterConeAngleDegrees_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierOuterConeAngleDegrees => _AdsMultiplierOuterConeAngleDegrees_IsSet ? _recordData.Slice(_AdsMultiplierOuterConeAngleDegreesLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierInnerSteeringRing
        private int _AdsMultiplierInnerSteeringRingLocation => _SNAMLocation!.Value.Min + 0x44;
        private bool _AdsMultiplierInnerSteeringRing_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierInnerSteeringRing => _AdsMultiplierInnerSteeringRing_IsSet ? _recordData.Slice(_AdsMultiplierInnerSteeringRingLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierOuterSteeringRing
        private int _AdsMultiplierOuterSteeringRingLocation => _SNAMLocation!.Value.Min + 0x48;
        private bool _AdsMultiplierOuterSteeringRing_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierOuterSteeringRing => _AdsMultiplierOuterSteeringRing_IsSet ? _recordData.Slice(_AdsMultiplierOuterSteeringRingLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierFriction
        private int _AdsMultiplierFrictionLocation => _SNAMLocation!.Value.Min + 0x4C;
        private bool _AdsMultiplierFriction_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierFriction => _AdsMultiplierFriction_IsSet ? _recordData.Slice(_AdsMultiplierFrictionLocation, 4).Float() : default(Single);
        #endregion
        #region AdsMultiplierSteeringDegreesPerSec
        private int _AdsMultiplierSteeringDegreesPerSecLocation => _SNAMLocation!.Value.Min + 0x50;
        private bool _AdsMultiplierSteeringDegreesPerSec_IsSet => _SNAMLocation.HasValue;
        public Single AdsMultiplierSteeringDegreesPerSec => _AdsMultiplierSteeringDegreesPerSec_IsSet ? _recordData.Slice(_AdsMultiplierSteeringDegreesPerSecLocation, 4).Float() : default(Single);
        #endregion
        #region AimAssistEnabled
        private int _AimAssistEnabledLocation => _SNAMLocation!.Value.Min + 0x54;
        private bool _AimAssistEnabled_IsSet => _SNAMLocation.HasValue;
        public Boolean AimAssistEnabled => _AimAssistEnabled_IsSet ? _recordData.Slice(_AimAssistEnabledLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AimAssistModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAimAssistModelGetter AimAssistModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AimAssistModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAimAssistModelGetter AimAssistModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AimAssistModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SNAM:
                {
                    _SNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)AimAssistModel_FieldIndex.AimAssistEnabled;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimAssistModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AimAssistModel>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimAssistModelGetter rhs) return false;
            return ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimAssistModelGetter? obj)
        {
            return ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimAssistModelCommon)((IAimAssistModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

