/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MusicType :
        StarfieldMajorRecord,
        IEquatable<IMusicTypeGetter>,
        ILoquiObjectSetter<MusicType>,
        IMusicTypeInternal
    {
        #region Ctor
        protected MusicType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public MusicType.Flag Flags { get; set; } = default(MusicType.Flag);
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MusicTypeData? _Data;
        public MusicTypeData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMusicTypeDataGetter? IMusicTypeGetter.Data => this.Data;
        #endregion
        #region FadeDuration
        public Single? FadeDuration { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IMusicTypeGetter.FadeDuration => this.FadeDuration;
        #endregion
        #region VNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _VNAM;
        public MemorySlice<Byte>? VNAM
        {
            get => this._VNAM;
            set => this._VNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMusicTypeGetter.VNAM => this.VNAM;
        #endregion
        #region UNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _UNAM;
        public MemorySlice<Byte>? UNAM
        {
            get => this._UNAM;
            set => this._UNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMusicTypeGetter.UNAM => this.UNAM;
        #endregion
        #region Tracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IMusicTrackGetter>>? _Tracks;
        public ExtendedList<IFormLinkGetter<IMusicTrackGetter>>? Tracks
        {
            get => this._Tracks;
            set => this._Tracks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IMusicTrackGetter>>? IMusicTypeGetter.Tracks => _Tracks;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MusicTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.Data = new MaskItem<TItem, MusicTypeData.Mask<TItem>?>(initialValue, new MusicTypeData.Mask<TItem>(initialValue));
                this.FadeDuration = initialValue;
                this.VNAM = initialValue;
                this.UNAM = initialValue;
                this.Tracks = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Flags,
                TItem Data,
                TItem FadeDuration,
                TItem VNAM,
                TItem UNAM,
                TItem Tracks)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Flags = Flags;
                this.Data = new MaskItem<TItem, MusicTypeData.Mask<TItem>?>(Data, new MusicTypeData.Mask<TItem>(Data));
                this.FadeDuration = FadeDuration;
                this.VNAM = VNAM;
                this.UNAM = UNAM;
                this.Tracks = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Tracks, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public MaskItem<TItem, MusicTypeData.Mask<TItem>?>? Data { get; set; }
            public TItem FadeDuration;
            public TItem VNAM;
            public TItem UNAM;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Tracks;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.FadeDuration, rhs.FadeDuration)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.UNAM, rhs.UNAM)) return false;
                if (!object.Equals(this.Tracks, rhs.Tracks)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.Data);
                hash.Add(this.FadeDuration);
                hash.Add(this.VNAM);
                hash.Add(this.UNAM);
                hash.Add(this.Tracks);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.FadeDuration)) return false;
                if (!eval(this.VNAM)) return false;
                if (!eval(this.UNAM)) return false;
                if (this.Tracks != null)
                {
                    if (!eval(this.Tracks.Overall)) return false;
                    if (this.Tracks.Specific != null)
                    {
                        foreach (var item in this.Tracks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.FadeDuration)) return true;
                if (eval(this.VNAM)) return true;
                if (eval(this.UNAM)) return true;
                if (this.Tracks != null)
                {
                    if (eval(this.Tracks.Overall)) return true;
                    if (this.Tracks.Specific != null)
                    {
                        foreach (var item in this.Tracks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MusicType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                obj.Data = this.Data == null ? null : new MaskItem<R, MusicTypeData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.FadeDuration = eval(this.FadeDuration);
                obj.VNAM = eval(this.VNAM);
                obj.UNAM = eval(this.UNAM);
                if (Tracks != null)
                {
                    obj.Tracks = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Tracks.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Tracks.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Tracks.Specific = l;
                        foreach (var item in Tracks.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MusicType.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MusicType.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MusicType.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.FadeDuration ?? true)
                    {
                        sb.AppendItem(FadeDuration, "FadeDuration");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if (printMask?.UNAM ?? true)
                    {
                        sb.AppendItem(UNAM, "UNAM");
                    }
                    if ((printMask?.Tracks?.Overall ?? true)
                        && Tracks is {} TracksItem)
                    {
                        sb.AppendLine("Tracks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TracksItem.Overall);
                            if (TracksItem.Specific != null)
                            {
                                foreach (var subItem in TracksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public MaskItem<Exception?, MusicTypeData.ErrorMask?>? Data;
            public Exception? FadeDuration;
            public Exception? VNAM;
            public Exception? UNAM;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Tracks;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MusicType_FieldIndex enu = (MusicType_FieldIndex)index;
                switch (enu)
                {
                    case MusicType_FieldIndex.Flags:
                        return Flags;
                    case MusicType_FieldIndex.Data:
                        return Data;
                    case MusicType_FieldIndex.FadeDuration:
                        return FadeDuration;
                    case MusicType_FieldIndex.VNAM:
                        return VNAM;
                    case MusicType_FieldIndex.UNAM:
                        return UNAM;
                    case MusicType_FieldIndex.Tracks:
                        return Tracks;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MusicType_FieldIndex enu = (MusicType_FieldIndex)index;
                switch (enu)
                {
                    case MusicType_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MusicType_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, MusicTypeData.ErrorMask?>(ex, null);
                        break;
                    case MusicType_FieldIndex.FadeDuration:
                        this.FadeDuration = ex;
                        break;
                    case MusicType_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case MusicType_FieldIndex.UNAM:
                        this.UNAM = ex;
                        break;
                    case MusicType_FieldIndex.Tracks:
                        this.Tracks = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MusicType_FieldIndex enu = (MusicType_FieldIndex)index;
                switch (enu)
                {
                    case MusicType_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MusicType_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, MusicTypeData.ErrorMask?>?)obj;
                        break;
                    case MusicType_FieldIndex.FadeDuration:
                        this.FadeDuration = (Exception?)obj;
                        break;
                    case MusicType_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case MusicType_FieldIndex.UNAM:
                        this.UNAM = (Exception?)obj;
                        break;
                    case MusicType_FieldIndex.Tracks:
                        this.Tracks = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Data != null) return true;
                if (FadeDuration != null) return true;
                if (VNAM != null) return true;
                if (UNAM != null) return true;
                if (Tracks != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                Data?.Print(sb);
                {
                    sb.AppendItem(FadeDuration, "FadeDuration");
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                {
                    sb.AppendItem(UNAM, "UNAM");
                }
                if (Tracks is {} TracksItem)
                {
                    sb.AppendLine("Tracks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TracksItem.Overall);
                        if (TracksItem.Specific != null)
                        {
                            foreach (var subItem in TracksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.FadeDuration = this.FadeDuration.Combine(rhs.FadeDuration);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.UNAM = this.UNAM.Combine(rhs.UNAM);
                ret.Tracks = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Tracks?.Overall, rhs.Tracks?.Overall), Noggog.ExceptionExt.Combine(this.Tracks?.Specific, rhs.Tracks?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public MusicTypeData.TranslationMask? Data;
            public bool FadeDuration;
            public bool VNAM;
            public bool UNAM;
            public bool Tracks;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.FadeDuration = defaultOn;
                this.VNAM = defaultOn;
                this.UNAM = defaultOn;
                this.Tracks = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((FadeDuration, null));
                ret.Add((VNAM, null));
                ret.Add((UNAM, null));
                ret.Add((Tracks, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MusicType_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MusicTypeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MusicTypeSetterCommon.Instance.RemapLinks(this, mapping);
        public MusicType(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MusicType(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal MusicType(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MusicType(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public MusicType(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MusicType>.ToString(this);
        }

        protected override Type LinkType => typeof(IMusicType);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMusicTypeGetter rhs) return false;
            return ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMusicTypeGetter? obj)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MusicTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MusicTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MusicType CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MusicType();
            ((MusicTypeSetterCommon)((IMusicTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MusicType item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MusicTypeSetterCommon)((IMusicTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MusicType GetNew()
        {
            return new MusicType();
        }

    }
    #endregion

    #region Interface
    public partial interface IMusicType :
        IFormLinkContainer,
        ILoquiObjectSetter<IMusicTypeInternal>,
        IMusicTypeGetter,
        IStarfieldMajorRecordInternal
    {
        new MusicType.Flag Flags { get; set; }
        new MusicTypeData? Data { get; set; }
        new Single? FadeDuration { get; set; }
        new MemorySlice<Byte>? VNAM { get; set; }
        new MemorySlice<Byte>? UNAM { get; set; }
        new ExtendedList<IFormLinkGetter<IMusicTrackGetter>>? Tracks { get; set; }
    }

    public partial interface IMusicTypeInternal :
        IStarfieldMajorRecordInternal,
        IMusicType,
        IMusicTypeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.MUSC)]
    public partial interface IMusicTypeGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMusicTypeGetter>,
        IMapsToGetter<IMusicTypeGetter>
    {
        static new ILoquiRegistration StaticRegistration => MusicType_Registration.Instance;
        MusicType.Flag Flags { get; }
        IMusicTypeDataGetter? Data { get; }
        Single? FadeDuration { get; }
        ReadOnlyMemorySlice<Byte>? VNAM { get; }
        ReadOnlyMemorySlice<Byte>? UNAM { get; }
        IReadOnlyList<IFormLinkGetter<IMusicTrackGetter>>? Tracks { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MusicTypeMixIn
    {
        public static void Clear(this IMusicTypeInternal item)
        {
            ((MusicTypeSetterCommon)((IMusicTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MusicType.Mask<bool> GetEqualsMask(
            this IMusicTypeGetter item,
            IMusicTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMusicTypeGetter item,
            string? name = null,
            MusicType.Mask<bool>? printMask = null)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMusicTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MusicType.Mask<bool>? printMask = null)
        {
            ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMusicTypeGetter item,
            IMusicTypeGetter rhs,
            MusicType.TranslationMask? equalsMask = null)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMusicTypeInternal lhs,
            IMusicTypeGetter rhs,
            out MusicType.ErrorMask errorMask,
            MusicType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MusicType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMusicTypeInternal lhs,
            IMusicTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MusicType DeepCopy(
            this IMusicTypeGetter item,
            MusicType.TranslationMask? copyMask = null)
        {
            return ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MusicType DeepCopy(
            this IMusicTypeGetter item,
            out MusicType.ErrorMask errorMask,
            MusicType.TranslationMask? copyMask = null)
        {
            return ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MusicType DeepCopy(
            this IMusicTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MusicType Duplicate(
            this IMusicTypeGetter item,
            FormKey formKey,
            MusicType.TranslationMask? copyMask = null)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MusicType Duplicate(
            this IMusicTypeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMusicTypeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MusicTypeSetterCommon)((IMusicTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MusicType_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Flags = 7,
        Data = 8,
        FadeDuration = 9,
        VNAM = 10,
        UNAM = 11,
        Tracks = 12,
    }
    #endregion

    #region Registration
    internal partial class MusicType_Registration : ILoquiRegistration
    {
        public static readonly MusicType_Registration Instance = new MusicType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(MusicType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MusicType.ErrorMask);

        public static readonly Type ClassType = typeof(MusicType);

        public static readonly Type GetterType = typeof(IMusicTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMusicType);

        public static readonly Type? InternalSetterType = typeof(IMusicTypeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.MusicType";

        public const string Name = "MusicType";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MUSC;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MUSC);
            var all = RecordCollection.Factory(
                RecordTypes.MUSC,
                RecordTypes.FNAM,
                RecordTypes.PNAM,
                RecordTypes.WNAM,
                RecordTypes.VNAM,
                RecordTypes.UNAM,
                RecordTypes.TNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MusicTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MusicTypeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly MusicTypeSetterCommon Instance = new MusicTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMusicTypeInternal item)
        {
            ClearPartial();
            item.Flags = default(MusicType.Flag);
            item.Data = null;
            item.FadeDuration = default;
            item.VNAM = default;
            item.UNAM = default;
            item.Tracks = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IMusicTypeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMusicTypeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMusicType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Tracks?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMusicTypeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMusicTypeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MusicTypeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MusicTypeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MusicType)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MusicType)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MusicTypeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly MusicTypeCommon Instance = new MusicTypeCommon();

        public MusicType.Mask<bool> GetEqualsMask(
            IMusicTypeGetter item,
            IMusicTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MusicType.Mask<bool>(false);
            ((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMusicTypeGetter item,
            IMusicTypeGetter rhs,
            MusicType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FadeDuration = item.FadeDuration.EqualsWithin(rhs.FadeDuration);
            ret.VNAM = MemorySliceExt.SequenceEqual(item.VNAM, rhs.VNAM);
            ret.UNAM = MemorySliceExt.SequenceEqual(item.UNAM, rhs.UNAM);
            ret.Tracks = item.Tracks.CollectionEqualsHelper(
                rhs.Tracks,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMusicTypeGetter item,
            string? name = null,
            MusicType.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMusicTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MusicType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MusicType =>");
            }
            else
            {
                sb.AppendLine($"{name} (MusicType) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMusicTypeGetter item,
            StructuredStringBuilder sb,
            MusicType.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.FadeDuration ?? true)
                && item.FadeDuration is {} FadeDurationItem)
            {
                sb.AppendItem(FadeDurationItem, "FadeDuration");
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM is {} VNAMItem)
            {
                sb.AppendLine($"VNAM => {SpanExt.ToHexString(VNAMItem)}");
            }
            if ((printMask?.UNAM ?? true)
                && item.UNAM is {} UNAMItem)
            {
                sb.AppendLine($"UNAM => {SpanExt.ToHexString(UNAMItem)}");
            }
            if ((printMask?.Tracks?.Overall ?? true)
                && item.Tracks is {} TracksItem)
            {
                sb.AppendLine("Tracks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in TracksItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static MusicType_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (MusicType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (MusicType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new MusicType_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MusicType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MusicType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MusicType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MusicType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMusicTypeGetter? lhs,
            IMusicTypeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((MusicTypeDataCommon)((IMusicTypeDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)MusicType_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.FadeDuration) ?? true))
            {
                if (!lhs.FadeDuration.EqualsWithin(rhs.FadeDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.VNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.VNAM, rhs.VNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.UNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.UNAM, rhs.UNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MusicType_FieldIndex.Tracks) ?? true))
            {
                if (!lhs.Tracks.SequenceEqualNullable(rhs.Tracks)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMusicTypeGetter?)lhs,
                rhs: rhs as IMusicTypeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMusicTypeGetter?)lhs,
                rhs: rhs as IMusicTypeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMusicTypeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.FadeDuration is {} FadeDurationitem)
            {
                hash.Add(FadeDurationitem);
            }
            if (item.VNAM is {} VNAMItem)
            {
                hash.Add(VNAMItem);
            }
            if (item.UNAM is {} UNAMItem)
            {
                hash.Add(UNAMItem);
            }
            hash.Add(item.Tracks);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IMusicTypeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMusicTypeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MusicType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMusicTypeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Tracks is {} TracksItem)
            {
                foreach (var item in TracksItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public MusicType Duplicate(
            IMusicTypeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MusicType(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMusicTypeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMusicTypeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MusicTypeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly MusicTypeSetterTranslationCommon Instance = new MusicTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMusicTypeInternal item,
            IMusicTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMusicType item,
            IMusicTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)MusicType_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MusicType_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.FadeDuration) ?? true))
            {
                item.FadeDuration = rhs.FadeDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.VNAM) ?? true))
            {
                if(rhs.VNAM is {} VNAMrhs)
                {
                    item.VNAM = VNAMrhs.ToArray();
                }
                else
                {
                    item.VNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.UNAM) ?? true))
            {
                if(rhs.UNAM is {} UNAMrhs)
                {
                    item.UNAM = UNAMrhs.ToArray();
                }
                else
                {
                    item.UNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicType_FieldIndex.Tracks) ?? true))
            {
                errorMask?.PushIndex((int)MusicType_FieldIndex.Tracks);
                try
                {
                    if ((rhs.Tracks != null))
                    {
                        item.Tracks = 
                            rhs.Tracks
                                .Select(b => (IFormLinkGetter<IMusicTrackGetter>)new FormLink<IMusicTrackGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IMusicTrackGetter>>();
                    }
                    else
                    {
                        item.Tracks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMusicType item,
            IMusicTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTypeInternal)item,
                rhs: (IMusicTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicType)item,
                rhs: (IMusicTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTypeInternal)item,
                rhs: (IMusicTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicType)item,
                rhs: (IMusicTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MusicType DeepCopy(
            IMusicTypeGetter item,
            MusicType.TranslationMask? copyMask = null)
        {
            MusicType ret = (MusicType)((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).GetNew();
            ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MusicType DeepCopy(
            IMusicTypeGetter item,
            out MusicType.ErrorMask errorMask,
            MusicType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MusicType ret = (MusicType)((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).GetNew();
            ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MusicType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MusicType DeepCopy(
            IMusicTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MusicType ret = (MusicType)((MusicTypeCommon)((IMusicTypeGetter)item).CommonInstance()!).GetNew();
            ((MusicTypeSetterTranslationCommon)((IMusicTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MusicType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MusicType_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MusicType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MusicTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MusicTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MusicTypeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MusicTypeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MusicTypeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMusicTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<MusicType.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            if (item.Data is {} DataItem)
            {
                ((MusicTypeDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FadeDuration,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UNAM,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IMusicTrackGetter>>.Instance.Write(
                writer: writer,
                items: item.Tracks,
                recordType: translationParams.ConvertToCustom(RecordTypes.TNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IMusicTrackGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            IMusicTypeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.MUSC,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMusicTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMusicTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMusicTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MusicTypeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly MusicTypeBinaryCreateTranslation Instance = new MusicTypeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MUSC;
        public static ParseResult FillBinaryRecordTypes(
            IMusicTypeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<MusicType.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)MusicType_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    item.Data = Mutagen.Bethesda.Starfield.MusicTypeData.CreateFromBinary(frame: frame);
                    return (int)MusicType_FieldIndex.Data;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FadeDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MusicType_FieldIndex.FadeDuration;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MusicType_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MusicType_FieldIndex.UNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Tracks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IMusicTrackGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IMusicTrackGetter>>();
                    return (int)MusicType_FieldIndex.Tracks;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MusicTypeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MusicTypeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IMusicTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MusicType_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MusicType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MusicTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MusicTypeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MusicTypeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MusicTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MusicTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMusicType);


        #region Flags
        private int? _FlagsLocation;
        public MusicType.Flag Flags => _FlagsLocation.HasValue ? (MusicType.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(MusicType.Flag);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IMusicTypeDataGetter? Data => _DataLocation.HasValue ? MusicTypeDataBinaryOverlay.MusicTypeDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region FadeDuration
        private int? _FadeDurationLocation;
        public Single? FadeDuration => _FadeDurationLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FadeDurationLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public ReadOnlyMemorySlice<Byte>? VNAM => _VNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region UNAM
        private int? _UNAMLocation;
        public ReadOnlyMemorySlice<Byte>? UNAM => _UNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _UNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IMusicTrackGetter>>? Tracks { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MusicTypeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMusicTypeGetter MusicTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MusicTypeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMusicTypeGetter MusicTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MusicTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)MusicType_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)MusicType_FieldIndex.Data;
                }
                case RecordTypeInts.WNAM:
                {
                    _FadeDurationLocation = (stream.Position - offset);
                    return (int)MusicType_FieldIndex.FadeDuration;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)MusicType_FieldIndex.VNAM;
                }
                case RecordTypeInts.UNAM:
                {
                    _UNAMLocation = (stream.Position - offset);
                    return (int)MusicType_FieldIndex.UNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    this.Tracks = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IMusicTrackGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IMusicTrackGetter>(p, s));
                    return (int)MusicType_FieldIndex.Tracks;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MusicTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MusicType>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMusicTypeGetter rhs) return false;
            return ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMusicTypeGetter? obj)
        {
            return ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MusicTypeCommon)((IMusicTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

