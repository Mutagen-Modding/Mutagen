/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Zoom :
        StarfieldMajorRecord,
        IEquatable<IZoomGetter>,
        ILoquiObjectSetter<Zoom>,
        IZoomInternal
    {
        #region Ctor
        protected Zoom()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ImagespaceModifier
        private readonly IFormLink<IImageSpaceAdapterGetter> _ImagespaceModifier = new FormLink<IImageSpaceAdapterGetter>();
        public IFormLink<IImageSpaceAdapterGetter> ImagespaceModifier
        {
            get => _ImagespaceModifier;
            set => _ImagespaceModifier.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImageSpaceAdapterGetter> IZoomGetter.ImagespaceModifier => this.ImagespaceModifier;
        #endregion
        #region CameraOffset
        public P3Float CameraOffset { get; set; } = default(P3Float);
        #endregion
        #region FovMult
        public Single FovMult { get; set; } = default(Single);
        #endregion
        #region Overlay
        public Zoom.OverlayType Overlay { get; set; } = default(Zoom.OverlayType);
        #endregion
        #region AdsDistanceFromCameraOffset
        public Single AdsDistanceFromCameraOffset { get; set; } = default(Single);
        #endregion
        #region AdsHeightDelayEnabled
        public Boolean AdsHeightDelayEnabled { get; set; } = default(Boolean);
        #endregion
        #region AdsHeightDelaySeconds
        public Single AdsHeightDelaySeconds { get; set; } = default(Single);
        #endregion
        #region AdsDepthEnabled
        public Boolean AdsDepthEnabled { get; set; } = default(Boolean);
        #endregion
        #region AdsDepthDelaySeconds
        public Single AdsDepthDelaySeconds { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ZoomMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ImagespaceModifier = initialValue;
                this.CameraOffset = initialValue;
                this.FovMult = initialValue;
                this.Overlay = initialValue;
                this.AdsDistanceFromCameraOffset = initialValue;
                this.AdsHeightDelayEnabled = initialValue;
                this.AdsHeightDelaySeconds = initialValue;
                this.AdsDepthEnabled = initialValue;
                this.AdsDepthDelaySeconds = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ImagespaceModifier,
                TItem CameraOffset,
                TItem FovMult,
                TItem Overlay,
                TItem AdsDistanceFromCameraOffset,
                TItem AdsHeightDelayEnabled,
                TItem AdsHeightDelaySeconds,
                TItem AdsDepthEnabled,
                TItem AdsDepthDelaySeconds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ImagespaceModifier = ImagespaceModifier;
                this.CameraOffset = CameraOffset;
                this.FovMult = FovMult;
                this.Overlay = Overlay;
                this.AdsDistanceFromCameraOffset = AdsDistanceFromCameraOffset;
                this.AdsHeightDelayEnabled = AdsHeightDelayEnabled;
                this.AdsHeightDelaySeconds = AdsHeightDelaySeconds;
                this.AdsDepthEnabled = AdsDepthEnabled;
                this.AdsDepthDelaySeconds = AdsDepthDelaySeconds;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ImagespaceModifier;
            public TItem CameraOffset;
            public TItem FovMult;
            public TItem Overlay;
            public TItem AdsDistanceFromCameraOffset;
            public TItem AdsHeightDelayEnabled;
            public TItem AdsHeightDelaySeconds;
            public TItem AdsDepthEnabled;
            public TItem AdsDepthDelaySeconds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ImagespaceModifier, rhs.ImagespaceModifier)) return false;
                if (!object.Equals(this.CameraOffset, rhs.CameraOffset)) return false;
                if (!object.Equals(this.FovMult, rhs.FovMult)) return false;
                if (!object.Equals(this.Overlay, rhs.Overlay)) return false;
                if (!object.Equals(this.AdsDistanceFromCameraOffset, rhs.AdsDistanceFromCameraOffset)) return false;
                if (!object.Equals(this.AdsHeightDelayEnabled, rhs.AdsHeightDelayEnabled)) return false;
                if (!object.Equals(this.AdsHeightDelaySeconds, rhs.AdsHeightDelaySeconds)) return false;
                if (!object.Equals(this.AdsDepthEnabled, rhs.AdsDepthEnabled)) return false;
                if (!object.Equals(this.AdsDepthDelaySeconds, rhs.AdsDepthDelaySeconds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ImagespaceModifier);
                hash.Add(this.CameraOffset);
                hash.Add(this.FovMult);
                hash.Add(this.Overlay);
                hash.Add(this.AdsDistanceFromCameraOffset);
                hash.Add(this.AdsHeightDelayEnabled);
                hash.Add(this.AdsHeightDelaySeconds);
                hash.Add(this.AdsDepthEnabled);
                hash.Add(this.AdsDepthDelaySeconds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ImagespaceModifier)) return false;
                if (!eval(this.CameraOffset)) return false;
                if (!eval(this.FovMult)) return false;
                if (!eval(this.Overlay)) return false;
                if (!eval(this.AdsDistanceFromCameraOffset)) return false;
                if (!eval(this.AdsHeightDelayEnabled)) return false;
                if (!eval(this.AdsHeightDelaySeconds)) return false;
                if (!eval(this.AdsDepthEnabled)) return false;
                if (!eval(this.AdsDepthDelaySeconds)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ImagespaceModifier)) return true;
                if (eval(this.CameraOffset)) return true;
                if (eval(this.FovMult)) return true;
                if (eval(this.Overlay)) return true;
                if (eval(this.AdsDistanceFromCameraOffset)) return true;
                if (eval(this.AdsHeightDelayEnabled)) return true;
                if (eval(this.AdsHeightDelaySeconds)) return true;
                if (eval(this.AdsDepthEnabled)) return true;
                if (eval(this.AdsDepthDelaySeconds)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Zoom.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ImagespaceModifier = eval(this.ImagespaceModifier);
                obj.CameraOffset = eval(this.CameraOffset);
                obj.FovMult = eval(this.FovMult);
                obj.Overlay = eval(this.Overlay);
                obj.AdsDistanceFromCameraOffset = eval(this.AdsDistanceFromCameraOffset);
                obj.AdsHeightDelayEnabled = eval(this.AdsHeightDelayEnabled);
                obj.AdsHeightDelaySeconds = eval(this.AdsHeightDelaySeconds);
                obj.AdsDepthEnabled = eval(this.AdsDepthEnabled);
                obj.AdsDepthDelaySeconds = eval(this.AdsDepthDelaySeconds);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Zoom.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Zoom.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Zoom.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ImagespaceModifier ?? true)
                    {
                        sb.AppendItem(ImagespaceModifier, "ImagespaceModifier");
                    }
                    if (printMask?.CameraOffset ?? true)
                    {
                        sb.AppendItem(CameraOffset, "CameraOffset");
                    }
                    if (printMask?.FovMult ?? true)
                    {
                        sb.AppendItem(FovMult, "FovMult");
                    }
                    if (printMask?.Overlay ?? true)
                    {
                        sb.AppendItem(Overlay, "Overlay");
                    }
                    if (printMask?.AdsDistanceFromCameraOffset ?? true)
                    {
                        sb.AppendItem(AdsDistanceFromCameraOffset, "AdsDistanceFromCameraOffset");
                    }
                    if (printMask?.AdsHeightDelayEnabled ?? true)
                    {
                        sb.AppendItem(AdsHeightDelayEnabled, "AdsHeightDelayEnabled");
                    }
                    if (printMask?.AdsHeightDelaySeconds ?? true)
                    {
                        sb.AppendItem(AdsHeightDelaySeconds, "AdsHeightDelaySeconds");
                    }
                    if (printMask?.AdsDepthEnabled ?? true)
                    {
                        sb.AppendItem(AdsDepthEnabled, "AdsDepthEnabled");
                    }
                    if (printMask?.AdsDepthDelaySeconds ?? true)
                    {
                        sb.AppendItem(AdsDepthDelaySeconds, "AdsDepthDelaySeconds");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ImagespaceModifier;
            public Exception? CameraOffset;
            public Exception? FovMult;
            public Exception? Overlay;
            public Exception? AdsDistanceFromCameraOffset;
            public Exception? AdsHeightDelayEnabled;
            public Exception? AdsHeightDelaySeconds;
            public Exception? AdsDepthEnabled;
            public Exception? AdsDepthDelaySeconds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Zoom_FieldIndex enu = (Zoom_FieldIndex)index;
                switch (enu)
                {
                    case Zoom_FieldIndex.ImagespaceModifier:
                        return ImagespaceModifier;
                    case Zoom_FieldIndex.CameraOffset:
                        return CameraOffset;
                    case Zoom_FieldIndex.FovMult:
                        return FovMult;
                    case Zoom_FieldIndex.Overlay:
                        return Overlay;
                    case Zoom_FieldIndex.AdsDistanceFromCameraOffset:
                        return AdsDistanceFromCameraOffset;
                    case Zoom_FieldIndex.AdsHeightDelayEnabled:
                        return AdsHeightDelayEnabled;
                    case Zoom_FieldIndex.AdsHeightDelaySeconds:
                        return AdsHeightDelaySeconds;
                    case Zoom_FieldIndex.AdsDepthEnabled:
                        return AdsDepthEnabled;
                    case Zoom_FieldIndex.AdsDepthDelaySeconds:
                        return AdsDepthDelaySeconds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Zoom_FieldIndex enu = (Zoom_FieldIndex)index;
                switch (enu)
                {
                    case Zoom_FieldIndex.ImagespaceModifier:
                        this.ImagespaceModifier = ex;
                        break;
                    case Zoom_FieldIndex.CameraOffset:
                        this.CameraOffset = ex;
                        break;
                    case Zoom_FieldIndex.FovMult:
                        this.FovMult = ex;
                        break;
                    case Zoom_FieldIndex.Overlay:
                        this.Overlay = ex;
                        break;
                    case Zoom_FieldIndex.AdsDistanceFromCameraOffset:
                        this.AdsDistanceFromCameraOffset = ex;
                        break;
                    case Zoom_FieldIndex.AdsHeightDelayEnabled:
                        this.AdsHeightDelayEnabled = ex;
                        break;
                    case Zoom_FieldIndex.AdsHeightDelaySeconds:
                        this.AdsHeightDelaySeconds = ex;
                        break;
                    case Zoom_FieldIndex.AdsDepthEnabled:
                        this.AdsDepthEnabled = ex;
                        break;
                    case Zoom_FieldIndex.AdsDepthDelaySeconds:
                        this.AdsDepthDelaySeconds = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Zoom_FieldIndex enu = (Zoom_FieldIndex)index;
                switch (enu)
                {
                    case Zoom_FieldIndex.ImagespaceModifier:
                        this.ImagespaceModifier = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.CameraOffset:
                        this.CameraOffset = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.FovMult:
                        this.FovMult = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.Overlay:
                        this.Overlay = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.AdsDistanceFromCameraOffset:
                        this.AdsDistanceFromCameraOffset = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.AdsHeightDelayEnabled:
                        this.AdsHeightDelayEnabled = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.AdsHeightDelaySeconds:
                        this.AdsHeightDelaySeconds = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.AdsDepthEnabled:
                        this.AdsDepthEnabled = (Exception?)obj;
                        break;
                    case Zoom_FieldIndex.AdsDepthDelaySeconds:
                        this.AdsDepthDelaySeconds = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ImagespaceModifier != null) return true;
                if (CameraOffset != null) return true;
                if (FovMult != null) return true;
                if (Overlay != null) return true;
                if (AdsDistanceFromCameraOffset != null) return true;
                if (AdsHeightDelayEnabled != null) return true;
                if (AdsHeightDelaySeconds != null) return true;
                if (AdsDepthEnabled != null) return true;
                if (AdsDepthDelaySeconds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ImagespaceModifier, "ImagespaceModifier");
                }
                {
                    sb.AppendItem(CameraOffset, "CameraOffset");
                }
                {
                    sb.AppendItem(FovMult, "FovMult");
                }
                {
                    sb.AppendItem(Overlay, "Overlay");
                }
                {
                    sb.AppendItem(AdsDistanceFromCameraOffset, "AdsDistanceFromCameraOffset");
                }
                {
                    sb.AppendItem(AdsHeightDelayEnabled, "AdsHeightDelayEnabled");
                }
                {
                    sb.AppendItem(AdsHeightDelaySeconds, "AdsHeightDelaySeconds");
                }
                {
                    sb.AppendItem(AdsDepthEnabled, "AdsDepthEnabled");
                }
                {
                    sb.AppendItem(AdsDepthDelaySeconds, "AdsDepthDelaySeconds");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ImagespaceModifier = this.ImagespaceModifier.Combine(rhs.ImagespaceModifier);
                ret.CameraOffset = this.CameraOffset.Combine(rhs.CameraOffset);
                ret.FovMult = this.FovMult.Combine(rhs.FovMult);
                ret.Overlay = this.Overlay.Combine(rhs.Overlay);
                ret.AdsDistanceFromCameraOffset = this.AdsDistanceFromCameraOffset.Combine(rhs.AdsDistanceFromCameraOffset);
                ret.AdsHeightDelayEnabled = this.AdsHeightDelayEnabled.Combine(rhs.AdsHeightDelayEnabled);
                ret.AdsHeightDelaySeconds = this.AdsHeightDelaySeconds.Combine(rhs.AdsHeightDelaySeconds);
                ret.AdsDepthEnabled = this.AdsDepthEnabled.Combine(rhs.AdsDepthEnabled);
                ret.AdsDepthDelaySeconds = this.AdsDepthDelaySeconds.Combine(rhs.AdsDepthDelaySeconds);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ImagespaceModifier;
            public bool CameraOffset;
            public bool FovMult;
            public bool Overlay;
            public bool AdsDistanceFromCameraOffset;
            public bool AdsHeightDelayEnabled;
            public bool AdsHeightDelaySeconds;
            public bool AdsDepthEnabled;
            public bool AdsDepthDelaySeconds;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ImagespaceModifier = defaultOn;
                this.CameraOffset = defaultOn;
                this.FovMult = defaultOn;
                this.Overlay = defaultOn;
                this.AdsDistanceFromCameraOffset = defaultOn;
                this.AdsHeightDelayEnabled = defaultOn;
                this.AdsHeightDelaySeconds = defaultOn;
                this.AdsDepthEnabled = defaultOn;
                this.AdsDepthDelaySeconds = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ImagespaceModifier, null));
                ret.Add((CameraOffset, null));
                ret.Add((FovMult, null));
                ret.Add((Overlay, null));
                ret.Add((AdsDistanceFromCameraOffset, null));
                ret.Add((AdsHeightDelayEnabled, null));
                ret.Add((AdsHeightDelaySeconds, null));
                ret.Add((AdsDepthEnabled, null));
                ret.Add((AdsDepthDelaySeconds, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Zoom_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ZoomCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ZoomSetterCommon.Instance.RemapLinks(this, mapping);
        public Zoom(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Zoom(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Zoom(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Zoom(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Zoom(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Zoom>.ToString(this);
        }

        protected override Type LinkType => typeof(IZoom);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IZoomGetter rhs) return false;
            return ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IZoomGetter? obj)
        {
            return ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ZoomBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ZoomBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Zoom CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Zoom();
            ((ZoomSetterCommon)((IZoomGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Zoom item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ZoomSetterCommon)((IZoomGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Zoom GetNew()
        {
            return new Zoom();
        }

    }
    #endregion

    #region Interface
    public partial interface IZoom :
        IFormLinkContainer,
        ILoquiObjectSetter<IZoomInternal>,
        IStarfieldMajorRecordInternal,
        IZoomGetter
    {
        new IFormLink<IImageSpaceAdapterGetter> ImagespaceModifier { get; set; }
        new P3Float CameraOffset { get; set; }
        new Single FovMult { get; set; }
        new Zoom.OverlayType Overlay { get; set; }
        new Single AdsDistanceFromCameraOffset { get; set; }
        new Boolean AdsHeightDelayEnabled { get; set; }
        new Single AdsHeightDelaySeconds { get; set; }
        new Boolean AdsDepthEnabled { get; set; }
        new Single AdsDepthDelaySeconds { get; set; }
    }

    public partial interface IZoomInternal :
        IStarfieldMajorRecordInternal,
        IZoom,
        IZoomGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.ZOOM)]
    public partial interface IZoomGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IZoomGetter>,
        IMapsToGetter<IZoomGetter>
    {
        static new ILoquiRegistration StaticRegistration => Zoom_Registration.Instance;
        IFormLinkGetter<IImageSpaceAdapterGetter> ImagespaceModifier { get; }
        P3Float CameraOffset { get; }
        Single FovMult { get; }
        Zoom.OverlayType Overlay { get; }
        Single AdsDistanceFromCameraOffset { get; }
        Boolean AdsHeightDelayEnabled { get; }
        Single AdsHeightDelaySeconds { get; }
        Boolean AdsDepthEnabled { get; }
        Single AdsDepthDelaySeconds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ZoomMixIn
    {
        public static void Clear(this IZoomInternal item)
        {
            ((ZoomSetterCommon)((IZoomGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Zoom.Mask<bool> GetEqualsMask(
            this IZoomGetter item,
            IZoomGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IZoomGetter item,
            string? name = null,
            Zoom.Mask<bool>? printMask = null)
        {
            return ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IZoomGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Zoom.Mask<bool>? printMask = null)
        {
            ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IZoomGetter item,
            IZoomGetter rhs,
            Zoom.TranslationMask? equalsMask = null)
        {
            return ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IZoomInternal lhs,
            IZoomGetter rhs,
            out Zoom.ErrorMask errorMask,
            Zoom.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ZoomSetterTranslationCommon)((IZoomGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Zoom.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IZoomInternal lhs,
            IZoomGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ZoomSetterTranslationCommon)((IZoomGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Zoom DeepCopy(
            this IZoomGetter item,
            Zoom.TranslationMask? copyMask = null)
        {
            return ((ZoomSetterTranslationCommon)((IZoomGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Zoom DeepCopy(
            this IZoomGetter item,
            out Zoom.ErrorMask errorMask,
            Zoom.TranslationMask? copyMask = null)
        {
            return ((ZoomSetterTranslationCommon)((IZoomGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Zoom DeepCopy(
            this IZoomGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ZoomSetterTranslationCommon)((IZoomGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Zoom Duplicate(
            this IZoomGetter item,
            FormKey formKey,
            Zoom.TranslationMask? copyMask = null)
        {
            return ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Zoom Duplicate(
            this IZoomGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IZoomInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ZoomSetterCommon)((IZoomGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Zoom_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ImagespaceModifier = 7,
        CameraOffset = 8,
        FovMult = 9,
        Overlay = 10,
        AdsDistanceFromCameraOffset = 11,
        AdsHeightDelayEnabled = 12,
        AdsHeightDelaySeconds = 13,
        AdsDepthEnabled = 14,
        AdsDepthDelaySeconds = 15,
    }
    #endregion

    #region Registration
    internal partial class Zoom_Registration : ILoquiRegistration
    {
        public static readonly Zoom_Registration Instance = new Zoom_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(Zoom.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Zoom.ErrorMask);

        public static readonly Type ClassType = typeof(Zoom);

        public static readonly Type GetterType = typeof(IZoomGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IZoom);

        public static readonly Type? InternalSetterType = typeof(IZoomInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Zoom";

        public const string Name = "Zoom";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ZOOM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ZOOM);
            var all = RecordCollection.Factory(
                RecordTypes.ZOOM,
                RecordTypes.ZNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ZoomBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ZoomSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ZoomSetterCommon Instance = new ZoomSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IZoomInternal item)
        {
            ClearPartial();
            item.ImagespaceModifier.Clear();
            item.CameraOffset = default(P3Float);
            item.FovMult = default(Single);
            item.Overlay = default(Zoom.OverlayType);
            item.AdsDistanceFromCameraOffset = default(Single);
            item.AdsHeightDelayEnabled = default(Boolean);
            item.AdsHeightDelaySeconds = default(Single);
            item.AdsDepthEnabled = default(Boolean);
            item.AdsDepthDelaySeconds = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IZoomInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IZoomInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IZoom obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ImagespaceModifier.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IZoomInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IZoomInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ZoomBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ZoomBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Zoom)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Zoom)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ZoomCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ZoomCommon Instance = new ZoomCommon();

        public Zoom.Mask<bool> GetEqualsMask(
            IZoomGetter item,
            IZoomGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Zoom.Mask<bool>(false);
            ((ZoomCommon)((IZoomGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IZoomGetter item,
            IZoomGetter rhs,
            Zoom.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ImagespaceModifier = item.ImagespaceModifier.Equals(rhs.ImagespaceModifier);
            ret.CameraOffset = item.CameraOffset.Equals(rhs.CameraOffset);
            ret.FovMult = item.FovMult.EqualsWithin(rhs.FovMult);
            ret.Overlay = item.Overlay == rhs.Overlay;
            ret.AdsDistanceFromCameraOffset = item.AdsDistanceFromCameraOffset.EqualsWithin(rhs.AdsDistanceFromCameraOffset);
            ret.AdsHeightDelayEnabled = item.AdsHeightDelayEnabled == rhs.AdsHeightDelayEnabled;
            ret.AdsHeightDelaySeconds = item.AdsHeightDelaySeconds.EqualsWithin(rhs.AdsHeightDelaySeconds);
            ret.AdsDepthEnabled = item.AdsDepthEnabled == rhs.AdsDepthEnabled;
            ret.AdsDepthDelaySeconds = item.AdsDepthDelaySeconds.EqualsWithin(rhs.AdsDepthDelaySeconds);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IZoomGetter item,
            string? name = null,
            Zoom.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IZoomGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Zoom.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Zoom =>");
            }
            else
            {
                sb.AppendLine($"{name} (Zoom) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IZoomGetter item,
            StructuredStringBuilder sb,
            Zoom.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ImagespaceModifier ?? true)
            {
                sb.AppendItem(item.ImagespaceModifier.FormKey, "ImagespaceModifier");
            }
            if (printMask?.CameraOffset ?? true)
            {
                sb.AppendItem(item.CameraOffset, "CameraOffset");
            }
            if (printMask?.FovMult ?? true)
            {
                sb.AppendItem(item.FovMult, "FovMult");
            }
            if (printMask?.Overlay ?? true)
            {
                sb.AppendItem(item.Overlay, "Overlay");
            }
            if (printMask?.AdsDistanceFromCameraOffset ?? true)
            {
                sb.AppendItem(item.AdsDistanceFromCameraOffset, "AdsDistanceFromCameraOffset");
            }
            if (printMask?.AdsHeightDelayEnabled ?? true)
            {
                sb.AppendItem(item.AdsHeightDelayEnabled, "AdsHeightDelayEnabled");
            }
            if (printMask?.AdsHeightDelaySeconds ?? true)
            {
                sb.AppendItem(item.AdsHeightDelaySeconds, "AdsHeightDelaySeconds");
            }
            if (printMask?.AdsDepthEnabled ?? true)
            {
                sb.AppendItem(item.AdsDepthEnabled, "AdsDepthEnabled");
            }
            if (printMask?.AdsDepthDelaySeconds ?? true)
            {
                sb.AppendItem(item.AdsDepthDelaySeconds, "AdsDepthDelaySeconds");
            }
        }
        
        public static Zoom_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Zoom_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Zoom_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Zoom_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Zoom_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Zoom_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Zoom_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Zoom_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IZoomGetter? lhs,
            IZoomGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.ImagespaceModifier) ?? true))
            {
                if (!lhs.ImagespaceModifier.Equals(rhs.ImagespaceModifier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.CameraOffset) ?? true))
            {
                if (!lhs.CameraOffset.Equals(rhs.CameraOffset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.FovMult) ?? true))
            {
                if (!lhs.FovMult.EqualsWithin(rhs.FovMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.Overlay) ?? true))
            {
                if (lhs.Overlay != rhs.Overlay) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDistanceFromCameraOffset) ?? true))
            {
                if (!lhs.AdsDistanceFromCameraOffset.EqualsWithin(rhs.AdsDistanceFromCameraOffset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsHeightDelayEnabled) ?? true))
            {
                if (lhs.AdsHeightDelayEnabled != rhs.AdsHeightDelayEnabled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsHeightDelaySeconds) ?? true))
            {
                if (!lhs.AdsHeightDelaySeconds.EqualsWithin(rhs.AdsHeightDelaySeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDepthEnabled) ?? true))
            {
                if (lhs.AdsDepthEnabled != rhs.AdsDepthEnabled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDepthDelaySeconds) ?? true))
            {
                if (!lhs.AdsDepthDelaySeconds.EqualsWithin(rhs.AdsDepthDelaySeconds)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IZoomGetter?)lhs,
                rhs: rhs as IZoomGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IZoomGetter?)lhs,
                rhs: rhs as IZoomGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IZoomGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ImagespaceModifier);
            hash.Add(item.CameraOffset);
            hash.Add(item.FovMult);
            hash.Add(item.Overlay);
            hash.Add(item.AdsDistanceFromCameraOffset);
            hash.Add(item.AdsHeightDelayEnabled);
            hash.Add(item.AdsHeightDelaySeconds);
            hash.Add(item.AdsDepthEnabled);
            hash.Add(item.AdsDepthDelaySeconds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IZoomGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IZoomGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Zoom.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IZoomGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.ImagespaceModifier);
            yield break;
        }
        
        #region Duplicate
        public Zoom Duplicate(
            IZoomGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Zoom(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IZoomGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IZoomGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ZoomSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ZoomSetterTranslationCommon Instance = new ZoomSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IZoomInternal item,
            IZoomGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IZoom item,
            IZoomGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.ImagespaceModifier) ?? true))
            {
                item.ImagespaceModifier.SetTo(rhs.ImagespaceModifier.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.CameraOffset) ?? true))
            {
                item.CameraOffset = rhs.CameraOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.FovMult) ?? true))
            {
                item.FovMult = rhs.FovMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.Overlay) ?? true))
            {
                item.Overlay = rhs.Overlay;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDistanceFromCameraOffset) ?? true))
            {
                item.AdsDistanceFromCameraOffset = rhs.AdsDistanceFromCameraOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsHeightDelayEnabled) ?? true))
            {
                item.AdsHeightDelayEnabled = rhs.AdsHeightDelayEnabled;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsHeightDelaySeconds) ?? true))
            {
                item.AdsHeightDelaySeconds = rhs.AdsHeightDelaySeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDepthEnabled) ?? true))
            {
                item.AdsDepthEnabled = rhs.AdsDepthEnabled;
            }
            if ((copyMask?.GetShouldTranslate((int)Zoom_FieldIndex.AdsDepthDelaySeconds) ?? true))
            {
                item.AdsDepthDelaySeconds = rhs.AdsDepthDelaySeconds;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IZoom item,
            IZoomGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IZoomInternal)item,
                rhs: (IZoomGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IZoom)item,
                rhs: (IZoomGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IZoomInternal)item,
                rhs: (IZoomGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IZoom)item,
                rhs: (IZoomGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Zoom DeepCopy(
            IZoomGetter item,
            Zoom.TranslationMask? copyMask = null)
        {
            Zoom ret = (Zoom)((ZoomCommon)((IZoomGetter)item).CommonInstance()!).GetNew();
            ((ZoomSetterTranslationCommon)((IZoomGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Zoom DeepCopy(
            IZoomGetter item,
            out Zoom.ErrorMask errorMask,
            Zoom.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Zoom ret = (Zoom)((ZoomCommon)((IZoomGetter)item).CommonInstance()!).GetNew();
            ((ZoomSetterTranslationCommon)((IZoomGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Zoom.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Zoom DeepCopy(
            IZoomGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Zoom ret = (Zoom)((ZoomCommon)((IZoomGetter)item).CommonInstance()!).GetNew();
            ((ZoomSetterTranslationCommon)((IZoomGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Zoom
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Zoom_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Zoom_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ZoomCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ZoomSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ZoomSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ZoomBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ZoomBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IZoomGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ZNAM)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImagespaceModifier);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CameraOffset);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FovMult);
                EnumBinaryTranslation<Zoom.OverlayType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Overlay,
                    length: 1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsDistanceFromCameraOffset);
                writer.Write(item.AdsHeightDelayEnabled);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsHeightDelaySeconds);
                writer.Write(item.AdsDepthEnabled);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AdsDepthDelaySeconds);
            }
        }

        public void Write(
            MutagenWriter writer,
            IZoomGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ZOOM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IZoomGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IZoomGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IZoomGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ZoomBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ZoomBinaryCreateTranslation Instance = new ZoomBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ZOOM;
        public static ParseResult FillBinaryRecordTypes(
            IZoomInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.ImagespaceModifier.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 12) return null;
                    item.CameraOffset = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FovMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.Overlay = EnumBinaryTranslation<Zoom.OverlayType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsDistanceFromCameraOffset = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.AdsHeightDelayEnabled = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsHeightDelaySeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.AdsDepthEnabled = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    item.AdsDepthDelaySeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Zoom_FieldIndex.AdsDepthDelaySeconds;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ZoomBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ZoomBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IZoomGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Zoom_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Zoom_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ZoomCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ZoomSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ZoomCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ZoomBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ZoomBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IZoom);


        private RangeInt32? _ZNAMLocation;
        #region ImagespaceModifier
        private int _ImagespaceModifierLocation => _ZNAMLocation!.Value.Min;
        private bool _ImagespaceModifier_IsSet => _ZNAMLocation.HasValue;
        public IFormLinkGetter<IImageSpaceAdapterGetter> ImagespaceModifier => _ImagespaceModifier_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImageSpaceAdapterGetter>(_package, _recordData.Span.Slice(_ImagespaceModifierLocation, 0x4), isSet: _ImagespaceModifier_IsSet) : FormLink<IImageSpaceAdapterGetter>.Null;
        #endregion
        #region CameraOffset
        private int _CameraOffsetLocation => _ZNAMLocation!.Value.Min + 0x4;
        private bool _CameraOffset_IsSet => _ZNAMLocation.HasValue;
        public P3Float CameraOffset => _CameraOffset_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_CameraOffsetLocation, 12)) : default(P3Float);
        #endregion
        #region FovMult
        private int _FovMultLocation => _ZNAMLocation!.Value.Min + 0x10;
        private bool _FovMult_IsSet => _ZNAMLocation.HasValue;
        public Single FovMult => _FovMult_IsSet ? _recordData.Slice(_FovMultLocation, 4).Float() : default(Single);
        #endregion
        #region Overlay
        private int _OverlayLocation => _ZNAMLocation!.Value.Min + 0x14;
        private bool _Overlay_IsSet => _ZNAMLocation.HasValue;
        public Zoom.OverlayType Overlay => _Overlay_IsSet ? (Zoom.OverlayType)_recordData.Span.Slice(_OverlayLocation, 0x1)[0] : default;
        #endregion
        #region AdsDistanceFromCameraOffset
        private int _AdsDistanceFromCameraOffsetLocation => _ZNAMLocation!.Value.Min + 0x15;
        private bool _AdsDistanceFromCameraOffset_IsSet => _ZNAMLocation.HasValue;
        public Single AdsDistanceFromCameraOffset => _AdsDistanceFromCameraOffset_IsSet ? _recordData.Slice(_AdsDistanceFromCameraOffsetLocation, 4).Float() : default(Single);
        #endregion
        #region AdsHeightDelayEnabled
        private int _AdsHeightDelayEnabledLocation => _ZNAMLocation!.Value.Min + 0x19;
        private bool _AdsHeightDelayEnabled_IsSet => _ZNAMLocation.HasValue;
        public Boolean AdsHeightDelayEnabled => _AdsHeightDelayEnabled_IsSet ? _recordData.Slice(_AdsHeightDelayEnabledLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region AdsHeightDelaySeconds
        private int _AdsHeightDelaySecondsLocation => _ZNAMLocation!.Value.Min + 0x1A;
        private bool _AdsHeightDelaySeconds_IsSet => _ZNAMLocation.HasValue;
        public Single AdsHeightDelaySeconds => _AdsHeightDelaySeconds_IsSet ? _recordData.Slice(_AdsHeightDelaySecondsLocation, 4).Float() : default(Single);
        #endregion
        #region AdsDepthEnabled
        private int _AdsDepthEnabledLocation => _ZNAMLocation!.Value.Min + 0x1E;
        private bool _AdsDepthEnabled_IsSet => _ZNAMLocation.HasValue;
        public Boolean AdsDepthEnabled => _AdsDepthEnabled_IsSet ? _recordData.Slice(_AdsDepthEnabledLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region AdsDepthDelaySeconds
        private int _AdsDepthDelaySecondsLocation => _ZNAMLocation!.Value.Min + 0x1F;
        private bool _AdsDepthDelaySeconds_IsSet => _ZNAMLocation.HasValue;
        public Single AdsDepthDelaySeconds => _AdsDepthDelaySeconds_IsSet ? _recordData.Slice(_AdsDepthDelaySecondsLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ZoomBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IZoomGetter ZoomFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ZoomBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IZoomGetter ZoomFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ZoomFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ZNAM:
                {
                    _ZNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Zoom_FieldIndex.AdsDepthDelaySeconds;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ZoomMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Zoom>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IZoomGetter rhs) return false;
            return ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IZoomGetter? obj)
        {
            return ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ZoomCommon)((IZoomGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

