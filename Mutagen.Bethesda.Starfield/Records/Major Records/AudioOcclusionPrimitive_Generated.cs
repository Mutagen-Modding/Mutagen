/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AudioOcclusionPrimitive :
        StarfieldMajorRecord,
        IAudioOcclusionPrimitiveInternal,
        IEquatable<IAudioOcclusionPrimitiveGetter>,
        ILoquiObjectSetter<AudioOcclusionPrimitive>
    {
        #region Ctor
        protected AudioOcclusionPrimitive()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IAudioOcclusionPrimitiveGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAudioOcclusionPrimitiveGetter.ODTY => this.ODTY;
        #endregion
        #region ODRT
        public Single? ODRT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAudioOcclusionPrimitiveGetter.ODRT => this.ODRT;
        #endregion
        #region OBSV
        public Single? OBSV { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAudioOcclusionPrimitiveGetter.OBSV => this.OBSV;
        #endregion
        #region OCCV
        public Single? OCCV { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAudioOcclusionPrimitiveGetter.OCCV => this.OCCV;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AudioOcclusionPrimitiveMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.ODRT = initialValue;
                this.OBSV = initialValue;
                this.OCCV = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem ODTY,
                TItem ODRT,
                TItem OBSV,
                TItem OCCV)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.ODRT = ODRT;
                this.OBSV = OBSV;
                this.OCCV = OCCV;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public TItem ODRT;
            public TItem OBSV;
            public TItem OCCV;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.ODRT, rhs.ODRT)) return false;
                if (!object.Equals(this.OBSV, rhs.OBSV)) return false;
                if (!object.Equals(this.OCCV, rhs.OCCV)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.ODRT);
                hash.Add(this.OBSV);
                hash.Add(this.OCCV);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (!eval(this.ODRT)) return false;
                if (!eval(this.OBSV)) return false;
                if (!eval(this.OCCV)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (eval(this.ODRT)) return true;
                if (eval(this.OBSV)) return true;
                if (eval(this.OCCV)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AudioOcclusionPrimitive.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.ODRT = eval(this.ODRT);
                obj.OBSV = eval(this.OBSV);
                obj.OCCV = eval(this.OCCV);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AudioOcclusionPrimitive.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AudioOcclusionPrimitive.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AudioOcclusionPrimitive.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.ODRT ?? true)
                    {
                        sb.AppendItem(ODRT, "ODRT");
                    }
                    if (printMask?.OBSV ?? true)
                    {
                        sb.AppendItem(OBSV, "OBSV");
                    }
                    if (printMask?.OCCV ?? true)
                    {
                        sb.AppendItem(OCCV, "OCCV");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public Exception? ODRT;
            public Exception? OBSV;
            public Exception? OCCV;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AudioOcclusionPrimitive_FieldIndex enu = (AudioOcclusionPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case AudioOcclusionPrimitive_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case AudioOcclusionPrimitive_FieldIndex.ODTY:
                        return ODTY;
                    case AudioOcclusionPrimitive_FieldIndex.ODRT:
                        return ODRT;
                    case AudioOcclusionPrimitive_FieldIndex.OBSV:
                        return OBSV;
                    case AudioOcclusionPrimitive_FieldIndex.OCCV:
                        return OCCV;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AudioOcclusionPrimitive_FieldIndex enu = (AudioOcclusionPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case AudioOcclusionPrimitive_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.ODRT:
                        this.ODRT = ex;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.OBSV:
                        this.OBSV = ex;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.OCCV:
                        this.OCCV = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AudioOcclusionPrimitive_FieldIndex enu = (AudioOcclusionPrimitive_FieldIndex)index;
                switch (enu)
                {
                    case AudioOcclusionPrimitive_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.ODRT:
                        this.ODRT = (Exception?)obj;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.OBSV:
                        this.OBSV = (Exception?)obj;
                        break;
                    case AudioOcclusionPrimitive_FieldIndex.OCCV:
                        this.OCCV = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (ODRT != null) return true;
                if (OBSV != null) return true;
                if (OCCV != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                {
                    sb.AppendItem(ODRT, "ODRT");
                }
                {
                    sb.AppendItem(OBSV, "OBSV");
                }
                {
                    sb.AppendItem(OCCV, "OCCV");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.ODRT = this.ODRT.Combine(rhs.ODRT);
                ret.OBSV = this.OBSV.Combine(rhs.OBSV);
                ret.OCCV = this.OCCV.Combine(rhs.OCCV);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public bool ODRT;
            public bool OBSV;
            public bool OCCV;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.ODRT = defaultOn;
                this.OBSV = defaultOn;
                this.OCCV = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((ODRT, null));
                ret.Add((OBSV, null));
                ret.Add((OCCV, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AudioOcclusionPrimitive_Registration.TriggeringRecordType;
        public AudioOcclusionPrimitive(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AudioOcclusionPrimitive(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AudioOcclusionPrimitive(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AudioOcclusionPrimitive(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AudioOcclusionPrimitive(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AudioOcclusionPrimitive>.ToString(this);
        }

        protected override Type LinkType => typeof(IAudioOcclusionPrimitive);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAudioOcclusionPrimitiveGetter rhs) return false;
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAudioOcclusionPrimitiveGetter? obj)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AudioOcclusionPrimitiveBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AudioOcclusionPrimitiveBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AudioOcclusionPrimitive CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AudioOcclusionPrimitive();
            ((AudioOcclusionPrimitiveSetterCommon)((IAudioOcclusionPrimitiveGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AudioOcclusionPrimitive item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AudioOcclusionPrimitiveSetterCommon)((IAudioOcclusionPrimitiveGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AudioOcclusionPrimitive GetNew()
        {
            return new AudioOcclusionPrimitive();
        }

    }
    #endregion

    #region Interface
    public partial interface IAudioOcclusionPrimitive :
        IAudioOcclusionPrimitiveGetter,
        IBaseObject,
        ILoquiObjectSetter<IAudioOcclusionPrimitiveInternal>,
        IObjectBounded,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        new Single? ODRT { get; set; }
        new Single? OBSV { get; set; }
        new Single? OCCV { get; set; }
    }

    public partial interface IAudioOcclusionPrimitiveInternal :
        IStarfieldMajorRecordInternal,
        IAudioOcclusionPrimitive,
        IAudioOcclusionPrimitiveGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AOPF)]
    public partial interface IAudioOcclusionPrimitiveGetter :
        IStarfieldMajorRecordGetter,
        IBaseObjectGetter,
        IBinaryItem,
        ILoquiObject<IAudioOcclusionPrimitiveGetter>,
        IMapsToGetter<IAudioOcclusionPrimitiveGetter>,
        IObjectBoundedGetter
    {
        static new ILoquiRegistration StaticRegistration => AudioOcclusionPrimitive_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        Single? ODRT { get; }
        Single? OBSV { get; }
        Single? OCCV { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AudioOcclusionPrimitiveMixIn
    {
        public static void Clear(this IAudioOcclusionPrimitiveInternal item)
        {
            ((AudioOcclusionPrimitiveSetterCommon)((IAudioOcclusionPrimitiveGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AudioOcclusionPrimitive.Mask<bool> GetEqualsMask(
            this IAudioOcclusionPrimitiveGetter item,
            IAudioOcclusionPrimitiveGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAudioOcclusionPrimitiveGetter item,
            string? name = null,
            AudioOcclusionPrimitive.Mask<bool>? printMask = null)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAudioOcclusionPrimitiveGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AudioOcclusionPrimitive.Mask<bool>? printMask = null)
        {
            ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAudioOcclusionPrimitiveGetter item,
            IAudioOcclusionPrimitiveGetter rhs,
            AudioOcclusionPrimitive.TranslationMask? equalsMask = null)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAudioOcclusionPrimitiveInternal lhs,
            IAudioOcclusionPrimitiveGetter rhs,
            out AudioOcclusionPrimitive.ErrorMask errorMask,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AudioOcclusionPrimitive.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAudioOcclusionPrimitiveInternal lhs,
            IAudioOcclusionPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AudioOcclusionPrimitive DeepCopy(
            this IAudioOcclusionPrimitiveGetter item,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            return ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AudioOcclusionPrimitive DeepCopy(
            this IAudioOcclusionPrimitiveGetter item,
            out AudioOcclusionPrimitive.ErrorMask errorMask,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            return ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AudioOcclusionPrimitive DeepCopy(
            this IAudioOcclusionPrimitiveGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AudioOcclusionPrimitive Duplicate(
            this IAudioOcclusionPrimitiveGetter item,
            FormKey formKey,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AudioOcclusionPrimitive Duplicate(
            this IAudioOcclusionPrimitiveGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAudioOcclusionPrimitiveInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AudioOcclusionPrimitiveSetterCommon)((IAudioOcclusionPrimitiveGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AudioOcclusionPrimitive_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        ODTY = 8,
        ODRT = 9,
        OBSV = 10,
        OCCV = 11,
    }
    #endregion

    #region Registration
    internal partial class AudioOcclusionPrimitive_Registration : ILoquiRegistration
    {
        public static readonly AudioOcclusionPrimitive_Registration Instance = new AudioOcclusionPrimitive_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(AudioOcclusionPrimitive.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AudioOcclusionPrimitive.ErrorMask);

        public static readonly Type ClassType = typeof(AudioOcclusionPrimitive);

        public static readonly Type GetterType = typeof(IAudioOcclusionPrimitiveGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAudioOcclusionPrimitive);

        public static readonly Type? InternalSetterType = typeof(IAudioOcclusionPrimitiveInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AudioOcclusionPrimitive";

        public const string Name = "AudioOcclusionPrimitive";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AOPF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AOPF);
            var all = RecordCollection.Factory(
                RecordTypes.AOPF,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.ODRT,
                RecordTypes.OBSV,
                RecordTypes.OCCV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AudioOcclusionPrimitiveBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AudioOcclusionPrimitiveSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AudioOcclusionPrimitiveSetterCommon Instance = new AudioOcclusionPrimitiveSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAudioOcclusionPrimitiveInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.ODRT = default;
            item.OBSV = default;
            item.OCCV = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAudioOcclusionPrimitiveInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAudioOcclusionPrimitiveInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAudioOcclusionPrimitive obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAudioOcclusionPrimitiveInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAudioOcclusionPrimitiveInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AudioOcclusionPrimitiveBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AudioOcclusionPrimitiveBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AudioOcclusionPrimitive)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AudioOcclusionPrimitive)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AudioOcclusionPrimitiveCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AudioOcclusionPrimitiveCommon Instance = new AudioOcclusionPrimitiveCommon();

        public AudioOcclusionPrimitive.Mask<bool> GetEqualsMask(
            IAudioOcclusionPrimitiveGetter item,
            IAudioOcclusionPrimitiveGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AudioOcclusionPrimitive.Mask<bool>(false);
            ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAudioOcclusionPrimitiveGetter item,
            IAudioOcclusionPrimitiveGetter rhs,
            AudioOcclusionPrimitive.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.ODRT = item.ODRT.EqualsWithin(rhs.ODRT);
            ret.OBSV = item.OBSV.EqualsWithin(rhs.OBSV);
            ret.OCCV = item.OCCV.EqualsWithin(rhs.OCCV);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAudioOcclusionPrimitiveGetter item,
            string? name = null,
            AudioOcclusionPrimitive.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAudioOcclusionPrimitiveGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AudioOcclusionPrimitive.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AudioOcclusionPrimitive =>");
            }
            else
            {
                sb.AppendLine($"{name} (AudioOcclusionPrimitive) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAudioOcclusionPrimitiveGetter item,
            StructuredStringBuilder sb,
            AudioOcclusionPrimitive.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.ODRT ?? true)
                && item.ODRT is {} ODRTItem)
            {
                sb.AppendItem(ODRTItem, "ODRT");
            }
            if ((printMask?.OBSV ?? true)
                && item.OBSV is {} OBSVItem)
            {
                sb.AppendItem(OBSVItem, "OBSV");
            }
            if ((printMask?.OCCV ?? true)
                && item.OCCV is {} OCCVItem)
            {
                sb.AppendItem(OCCVItem, "OCCV");
            }
        }
        
        public static AudioOcclusionPrimitive_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AudioOcclusionPrimitive_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AudioOcclusionPrimitive_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAudioOcclusionPrimitiveGetter? lhs,
            IAudioOcclusionPrimitiveGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ODRT) ?? true))
            {
                if (!lhs.ODRT.EqualsWithin(rhs.ODRT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.OBSV) ?? true))
            {
                if (!lhs.OBSV.EqualsWithin(rhs.OBSV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.OCCV) ?? true))
            {
                if (!lhs.OCCV.EqualsWithin(rhs.OCCV)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAudioOcclusionPrimitiveGetter?)lhs,
                rhs: rhs as IAudioOcclusionPrimitiveGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAudioOcclusionPrimitiveGetter?)lhs,
                rhs: rhs as IAudioOcclusionPrimitiveGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAudioOcclusionPrimitiveGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.ODRT is {} ODRTitem)
            {
                hash.Add(ODRTitem);
            }
            if (item.OBSV is {} OBSVitem)
            {
                hash.Add(OBSVitem);
            }
            if (item.OCCV is {} OCCVitem)
            {
                hash.Add(OCCVitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAudioOcclusionPrimitiveGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAudioOcclusionPrimitiveGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AudioOcclusionPrimitive.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAudioOcclusionPrimitiveGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public AudioOcclusionPrimitive Duplicate(
            IAudioOcclusionPrimitiveGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AudioOcclusionPrimitive(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAudioOcclusionPrimitiveGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAudioOcclusionPrimitiveGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AudioOcclusionPrimitiveSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AudioOcclusionPrimitiveSetterTranslationCommon Instance = new AudioOcclusionPrimitiveSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAudioOcclusionPrimitiveInternal item,
            IAudioOcclusionPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAudioOcclusionPrimitive item,
            IAudioOcclusionPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.ODRT) ?? true))
            {
                item.ODRT = rhs.ODRT;
            }
            if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.OBSV) ?? true))
            {
                item.OBSV = rhs.OBSV;
            }
            if ((copyMask?.GetShouldTranslate((int)AudioOcclusionPrimitive_FieldIndex.OCCV) ?? true))
            {
                item.OCCV = rhs.OCCV;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAudioOcclusionPrimitive item,
            IAudioOcclusionPrimitiveGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAudioOcclusionPrimitiveInternal)item,
                rhs: (IAudioOcclusionPrimitiveGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAudioOcclusionPrimitive)item,
                rhs: (IAudioOcclusionPrimitiveGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAudioOcclusionPrimitiveInternal)item,
                rhs: (IAudioOcclusionPrimitiveGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAudioOcclusionPrimitive)item,
                rhs: (IAudioOcclusionPrimitiveGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AudioOcclusionPrimitive DeepCopy(
            IAudioOcclusionPrimitiveGetter item,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            AudioOcclusionPrimitive ret = (AudioOcclusionPrimitive)((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AudioOcclusionPrimitive DeepCopy(
            IAudioOcclusionPrimitiveGetter item,
            out AudioOcclusionPrimitive.ErrorMask errorMask,
            AudioOcclusionPrimitive.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AudioOcclusionPrimitive ret = (AudioOcclusionPrimitive)((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AudioOcclusionPrimitive.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AudioOcclusionPrimitive DeepCopy(
            IAudioOcclusionPrimitiveGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AudioOcclusionPrimitive ret = (AudioOcclusionPrimitive)((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)item).CommonInstance()!).GetNew();
            ((AudioOcclusionPrimitiveSetterTranslationCommon)((IAudioOcclusionPrimitiveGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AudioOcclusionPrimitive
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AudioOcclusionPrimitive_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AudioOcclusionPrimitive_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AudioOcclusionPrimitiveCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AudioOcclusionPrimitiveSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AudioOcclusionPrimitiveSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AudioOcclusionPrimitiveBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AudioOcclusionPrimitiveBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAudioOcclusionPrimitiveGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODRT,
                header: translationParams.ConvertToCustom(RecordTypes.ODRT));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.OBSV,
                header: translationParams.ConvertToCustom(RecordTypes.OBSV));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.OCCV,
                header: translationParams.ConvertToCustom(RecordTypes.OCCV));
        }

        public void Write(
            MutagenWriter writer,
            IAudioOcclusionPrimitiveGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AOPF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAudioOcclusionPrimitiveGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAudioOcclusionPrimitiveGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAudioOcclusionPrimitiveGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AudioOcclusionPrimitiveBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AudioOcclusionPrimitiveBinaryCreateTranslation Instance = new AudioOcclusionPrimitiveBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AOPF;
        public static ParseResult FillBinaryRecordTypes(
            IAudioOcclusionPrimitiveInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AudioOcclusionPrimitive_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODRT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AudioOcclusionPrimitive_FieldIndex.ODRT;
                }
                case RecordTypeInts.OBSV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OBSV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AudioOcclusionPrimitive_FieldIndex.OBSV;
                }
                case RecordTypeInts.OCCV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OCCV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AudioOcclusionPrimitive_FieldIndex.OCCV;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AudioOcclusionPrimitiveBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AudioOcclusionPrimitiveBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAudioOcclusionPrimitiveGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AudioOcclusionPrimitive_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AudioOcclusionPrimitive_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AudioOcclusionPrimitiveCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AudioOcclusionPrimitiveSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AudioOcclusionPrimitiveBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AudioOcclusionPrimitiveBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAudioOcclusionPrimitive);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ODRT
        private int? _ODRTLocation;
        public Single? ODRT => _ODRTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODRTLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region OBSV
        private int? _OBSVLocation;
        public Single? OBSV => _OBSVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _OBSVLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region OCCV
        private int? _OCCVLocation;
        public Single? OCCV => _OCCVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _OCCVLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AudioOcclusionPrimitiveBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAudioOcclusionPrimitiveGetter AudioOcclusionPrimitiveFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AudioOcclusionPrimitiveBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAudioOcclusionPrimitiveGetter AudioOcclusionPrimitiveFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AudioOcclusionPrimitiveFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AudioOcclusionPrimitive_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)AudioOcclusionPrimitive_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    _ODRTLocation = (stream.Position - offset);
                    return (int)AudioOcclusionPrimitive_FieldIndex.ODRT;
                }
                case RecordTypeInts.OBSV:
                {
                    _OBSVLocation = (stream.Position - offset);
                    return (int)AudioOcclusionPrimitive_FieldIndex.OBSV;
                }
                case RecordTypeInts.OCCV:
                {
                    _OCCVLocation = (stream.Position - offset);
                    return (int)AudioOcclusionPrimitive_FieldIndex.OCCV;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AudioOcclusionPrimitiveMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AudioOcclusionPrimitive>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAudioOcclusionPrimitiveGetter rhs) return false;
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAudioOcclusionPrimitiveGetter? obj)
        {
            return ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AudioOcclusionPrimitiveCommon)((IAudioOcclusionPrimitiveGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

