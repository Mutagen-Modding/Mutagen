/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Race :
        StarfieldMajorRecord,
        IEquatable<IRaceGetter>,
        ILoquiObjectSetter<Race>,
        IRaceInternal
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IRaceGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IRaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IRaceGetter.Description => this.Description;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>> _ActorEffect = new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>> ActorEffect
        {
            get => this._ActorEffect;
            init => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        private readonly IFormLinkNullable<IArmorGetter> _Skin = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> Skin
        {
            get => _Skin;
            set => _Skin.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region FirstPersonFlags
        public FirstPersonFlag? FirstPersonFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FirstPersonFlag? IRaceGetter.FirstPersonFlags => this.FirstPersonFlags;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? IRaceGetter.Properties => _Properties;
        #endregion

        #endregion
        #region BodyPartData
        private readonly IFormLinkNullable<IBodyPartDataGetter> _BodyPartData = new FormLinkNullable<IBodyPartDataGetter>();
        public IFormLinkNullable<IBodyPartDataGetter> BodyPartData
        {
            get => _BodyPartData;
            set => _BodyPartData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IRaceGetter.BodyPartData => this.BodyPartData;
        #endregion
        #region Height
        public IGenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default(Single), default(Single));
        IGenderedItemGetter<Single> IRaceGetter.Height => this.Height;
        #endregion
        #region DefaultWeight
        public IGenderedItem<Weight> DefaultWeight { get; set; } = new GenderedItem<Weight>(new Weight(), new Weight());
        IGenderedItemGetter<IWeightGetter> IRaceGetter.DefaultWeight => this.DefaultWeight;
        #endregion
        #region Flags
        public Race.Flag Flags { get; set; } = default(Race.Flag);
        #endregion
        #region AccelerationRate
        public Single AccelerationRate { get; set; } = default(Single);
        #endregion
        #region DecelerationRate
        public Single DecelerationRate { get; set; } = default(Single);
        #endregion
        #region Size
        public Size Size { get; set; } = default(Size);
        #endregion
        #region DAT2Unknown1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DAT2Unknown1 = new byte[12];
        public MemorySlice<Byte> DAT2Unknown1
        {
            get => _DAT2Unknown1;
            set => this._DAT2Unknown1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.DAT2Unknown1 => this.DAT2Unknown1;
        #endregion
        #region ShieldBipedObject
        public static readonly BipedObject ShieldBipedObjectDefault = BipedObject.None;
        public BipedObject ShieldBipedObject { get; set; } = ShieldBipedObjectDefault;
        #endregion
        #region BeardBipedObject
        public static readonly BipedObject BeardBipedObjectDefault = BipedObject.None;
        public BipedObject BeardBipedObject { get; set; } = BeardBipedObjectDefault;
        #endregion
        #region BodyBipedObject
        public static readonly BipedObject BodyBipedObjectDefault = BipedObject.None;
        public BipedObject BodyBipedObject { get; set; } = BodyBipedObjectDefault;
        #endregion
        #region DAT2Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DAT2Unknown2 = new byte[64];
        public MemorySlice<Byte> DAT2Unknown2
        {
            get => _DAT2Unknown2;
            set => this._DAT2Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.DAT2Unknown2 => this.DAT2Unknown2;
        #endregion
        #region Explosion
        private readonly IFormLink<IExplosionGetter> _Explosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> Explosion
        {
            get => _Explosion;
            set => _Explosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.Explosion => this.Explosion;
        #endregion
        #region Debris
        private readonly IFormLink<IDebrisGetter> _Debris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> Debris
        {
            get => _Debris;
            set => _Debris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.Debris => this.Debris;
        #endregion
        #region ImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region OrientationLimitsPitch
        public Single OrientationLimitsPitch { get; set; } = default(Single);
        #endregion
        #region OrientationLimitsRoll
        public Single OrientationLimitsRoll { get; set; } = default(Single);
        #endregion
        #region DAT2Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DAT2Unknown3 = new byte[61];
        public MemorySlice<Byte> DAT2Unknown3
        {
            get => _DAT2Unknown3;
            set => this._DAT2Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.DAT2Unknown3 => this.DAT2Unknown3;
        #endregion
        #region SkeletalModel
        public IGenderedItem<SkeletalModel?>? SkeletalModel { get; set; }
        IGenderedItemGetter<ISkeletalModelGetter?>? IRaceGetter.SkeletalModel => this.SkeletalModel;
        #endregion
        #region MovementTypeNames
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _MovementTypeNames = new ExtendedList<String>();
        public ExtendedList<String> MovementTypeNames
        {
            get => this._MovementTypeNames;
            init => this._MovementTypeNames = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IRaceGetter.MovementTypeNames => _MovementTypeNames;
        #endregion

        #endregion
        #region Voices
        public IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; } = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> IRaceGetter.Voices => this.Voices;
        #endregion
        #region FacegenMainClamp
        public Single FacegenMainClamp { get; set; } = default(Single);
        #endregion
        #region FacegenFaceClamp
        public Single FacegenFaceClamp { get; set; } = default(Single);
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            init => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> IRaceGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region BodyData
        public IGenderedItem<BodyData?> BodyData { get; set; } = new GenderedItem<BodyData?>(default, default);
        IGenderedItemGetter<IBodyDataGetter?> IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region AimAssistPose
        private readonly IFormLinkNullable<IAimAssistPoseGetter> _AimAssistPose = new FormLinkNullable<IAimAssistPoseGetter>();
        public IFormLinkNullable<IAimAssistPoseGetter> AimAssistPose
        {
            get => _AimAssistPose;
            set => _AimAssistPose.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAimAssistPoseGetter> IRaceGetter.AimAssistPose => this.AimAssistPose;
        #endregion
        #region ImpactMaterialType
        private readonly IFormLinkNullable<IMaterialTypeGetter> _ImpactMaterialType = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> ImpactMaterialType
        {
            get => _ImpactMaterialType;
            set => _ImpactMaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IRaceGetter.ImpactMaterialType => this.ImpactMaterialType;
        #endregion
        #region WED0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _WED0;
        public SoundReference? WED0
        {
            get => _WED0;
            set => _WED0 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IRaceGetter.WED0 => this.WED0;
        #endregion
        #region WED1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _WED1;
        public SoundReference? WED1
        {
            get => _WED1;
            set => _WED1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IRaceGetter.WED1 => this.WED1;
        #endregion
        #region BipedObjects
        private readonly Dictionary<BipedObject, BipedObjectData> _BipedObjects = new Dictionary<BipedObject, BipedObjectData>();
        public IDictionary<BipedObject, BipedObjectData> BipedObjects => _BipedObjects;
        #region Interface Members
        IDictionary<BipedObject, BipedObjectData> IRace.BipedObjects => _BipedObjects;
        IReadOnlyDictionary<BipedObject, IBipedObjectDataGetter> IRaceGetter.BipedObjects => _BipedObjects.Covariant<BipedObject, BipedObjectData, IBipedObjectDataGetter>();
        #endregion

        #endregion
        #region MovementDataOverrides
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MovementDataOverride> _MovementDataOverrides = new ExtendedList<MovementDataOverride>();
        public ExtendedList<MovementDataOverride> MovementDataOverrides
        {
            get => this._MovementDataOverrides;
            init => this._MovementDataOverrides = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMovementDataOverrideGetter> IRaceGetter.MovementDataOverrides => _MovementDataOverrides;
        #endregion

        #endregion
        #region EquipmentFlags
        public EquipTypeFlag? EquipmentFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EquipTypeFlag? IRaceGetter.EquipmentFlags => this.EquipmentFlags;
        #endregion
        #region EquipmentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<EquipmentSlot> _EquipmentSlots = new ExtendedList<EquipmentSlot>();
        public ExtendedList<EquipmentSlot> EquipmentSlots
        {
            get => this._EquipmentSlots;
            init => this._EquipmentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEquipmentSlotGetter> IRaceGetter.EquipmentSlots => _EquipmentSlots;
        #endregion

        #endregion
        #region UnarmedWeapon
        private readonly IFormLinkNullable<IWeaponGetter> _UnarmedWeapon = new FormLinkNullable<IWeaponGetter>();
        public IFormLinkNullable<IWeaponGetter> UnarmedWeapon
        {
            get => _UnarmedWeapon;
            set => _UnarmedWeapon.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWeaponGetter> IRaceGetter.UnarmedWeapon => this.UnarmedWeapon;
        #endregion
        #region BaseMovementDefault
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefault = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefault
        {
            get => _BaseMovementDefault;
            set => _BaseMovementDefault.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefault => this.BaseMovementDefault;
        #endregion
        #region BaseMovementSwimDefault
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementSwimDefault = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementSwimDefault
        {
            get => _BaseMovementSwimDefault;
            set => _BaseMovementSwimDefault.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementSwimDefault => this.BaseMovementSwimDefault;
        #endregion
        #region BaseMovementFlyDefault
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementFlyDefault = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementFlyDefault
        {
            get => _BaseMovementFlyDefault;
            set => _BaseMovementFlyDefault.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementFlyDefault => this.BaseMovementFlyDefault;
        #endregion
        #region ChargenAndSkintones
        public IGenderedItem<ChargenAndSkintones?>? ChargenAndSkintones { get; set; }
        IGenderedItemGetter<IChargenAndSkintonesGetter?>? IRaceGetter.ChargenAndSkintones => this.ChargenAndSkintones;
        #endregion
        #region ArmorRace
        private readonly IFormLinkNullable<IRaceGetter> _ArmorRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> ArmorRace
        {
            get => _ArmorRace;
            set => _ArmorRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.ArmorRace => this.ArmorRace;
        #endregion
        #region SubgraphTemplateRace
        private readonly IFormLinkNullable<IRaceGetter> _SubgraphTemplateRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> SubgraphTemplateRace
        {
            get => _SubgraphTemplateRace;
            set => _SubgraphTemplateRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.SubgraphTemplateRace => this.SubgraphTemplateRace;
        #endregion
        #region Subgraphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Subgraph> _Subgraphs = new ExtendedList<Subgraph>();
        public ExtendedList<Subgraph> Subgraphs
        {
            get => this._Subgraphs;
            init => this._Subgraphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISubgraphGetter> IRaceGetter.Subgraphs => _Subgraphs;
        #endregion

        #endregion
        #region IdleChatterTimeMin
        public Single? IdleChatterTimeMin { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.IdleChatterTimeMin => this.IdleChatterTimeMin;
        #endregion
        #region IdleChatterTimeMax
        public Single? IdleChatterTimeMax { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.IdleChatterTimeMax => this.IdleChatterTimeMax;
        #endregion
        #region DialogueQuest
        private readonly IFormLinkNullable<IQuestGetter> _DialogueQuest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> DialogueQuest
        {
            get => _DialogueQuest;
            set => _DialogueQuest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IRaceGetter.DialogueQuest => this.DialogueQuest;
        #endregion
        #region HeadPartsAndBoneModifiers
        public IGenderedItem<HeadPartsAndBoneModifiers?>? HeadPartsAndBoneModifiers { get; set; }
        IGenderedItemGetter<IHeadPartsAndBoneModifiersGetter?>? IRaceGetter.HeadPartsAndBoneModifiers => this.HeadPartsAndBoneModifiers;
        #endregion
        #region MannequinSkinSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MannequinSkinSwap> _MannequinSkinSwaps = new ExtendedList<MannequinSkinSwap>();
        public ExtendedList<MannequinSkinSwap> MannequinSkinSwaps
        {
            get => this._MannequinSkinSwaps;
            init => this._MannequinSkinSwaps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMannequinSkinSwapGetter> IRaceGetter.MannequinSkinSwaps => _MannequinSkinSwaps;
        #endregion

        #endregion
        #region PluralName
        public TranslatedString? PluralName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IRaceGetter.PluralName => this.PluralName;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = initialValue;
                this.FirstPersonFlags = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.BodyPartData = initialValue;
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.DefaultWeight = new MaskItem<TItem, GenderedItem<Weight.Mask<TItem>?>?>(initialValue, default);
                this.Flags = initialValue;
                this.AccelerationRate = initialValue;
                this.DecelerationRate = initialValue;
                this.Size = initialValue;
                this.DAT2Unknown1 = initialValue;
                this.ShieldBipedObject = initialValue;
                this.BeardBipedObject = initialValue;
                this.BodyBipedObject = initialValue;
                this.DAT2Unknown2 = initialValue;
                this.Explosion = initialValue;
                this.Debris = initialValue;
                this.ImpactDataSet = initialValue;
                this.OrientationLimitsPitch = initialValue;
                this.OrientationLimitsRoll = initialValue;
                this.DAT2Unknown3 = initialValue;
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SkeletalModel.Mask<TItem>?>?>?>(initialValue, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(initialValue, initialValue);
                this.FacegenMainClamp = initialValue;
                this.FacegenFaceClamp = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.AimAssistPose = initialValue;
                this.ImpactMaterialType = initialValue;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.WED1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.BipedObjects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>(initialValue, null);
                this.MovementDataOverrides = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>());
                this.EquipmentFlags = initialValue;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>());
                this.UnarmedWeapon = initialValue;
                this.BaseMovementDefault = initialValue;
                this.BaseMovementSwimDefault = initialValue;
                this.BaseMovementFlyDefault = initialValue;
                this.ChargenAndSkintones = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ChargenAndSkintones.Mask<TItem>?>?>?>(initialValue, default);
                this.ArmorRace = initialValue;
                this.SubgraphTemplateRace = initialValue;
                this.Subgraphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>());
                this.IdleChatterTimeMin = initialValue;
                this.IdleChatterTimeMax = initialValue;
                this.DialogueQuest = initialValue;
                this.HeadPartsAndBoneModifiers = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadPartsAndBoneModifiers.Mask<TItem>?>?>?>(initialValue, default);
                this.MannequinSkinSwaps = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MannequinSkinSwap.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MannequinSkinSwap.Mask<TItem>?>>());
                this.PluralName = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Description,
                TItem ActorEffect,
                TItem Skin,
                TItem FirstPersonFlags,
                TItem Keywords,
                TItem Properties,
                TItem BodyPartData,
                TItem Height,
                TItem DefaultWeight,
                TItem Flags,
                TItem AccelerationRate,
                TItem DecelerationRate,
                TItem Size,
                TItem DAT2Unknown1,
                TItem ShieldBipedObject,
                TItem BeardBipedObject,
                TItem BodyBipedObject,
                TItem DAT2Unknown2,
                TItem Explosion,
                TItem Debris,
                TItem ImpactDataSet,
                TItem OrientationLimitsPitch,
                TItem OrientationLimitsRoll,
                TItem DAT2Unknown3,
                TItem SkeletalModel,
                TItem MovementTypeNames,
                TItem Voices,
                TItem FacegenMainClamp,
                TItem FacegenFaceClamp,
                TItem Attacks,
                TItem BodyData,
                TItem AimAssistPose,
                TItem ImpactMaterialType,
                TItem WED0,
                TItem WED1,
                TItem BipedObjects,
                TItem MovementDataOverrides,
                TItem EquipmentFlags,
                TItem EquipmentSlots,
                TItem UnarmedWeapon,
                TItem BaseMovementDefault,
                TItem BaseMovementSwimDefault,
                TItem BaseMovementFlyDefault,
                TItem ChargenAndSkintones,
                TItem ArmorRace,
                TItem SubgraphTemplateRace,
                TItem Subgraphs,
                TItem IdleChatterTimeMin,
                TItem IdleChatterTimeMax,
                TItem DialogueQuest,
                TItem HeadPartsAndBoneModifiers,
                TItem MannequinSkinSwaps,
                TItem PluralName)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = Skin;
                this.FirstPersonFlags = FirstPersonFlags;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.BodyPartData = BodyPartData;
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.DefaultWeight = new MaskItem<TItem, GenderedItem<Weight.Mask<TItem>?>?>(DefaultWeight, default);
                this.Flags = Flags;
                this.AccelerationRate = AccelerationRate;
                this.DecelerationRate = DecelerationRate;
                this.Size = Size;
                this.DAT2Unknown1 = DAT2Unknown1;
                this.ShieldBipedObject = ShieldBipedObject;
                this.BeardBipedObject = BeardBipedObject;
                this.BodyBipedObject = BodyBipedObject;
                this.DAT2Unknown2 = DAT2Unknown2;
                this.Explosion = Explosion;
                this.Debris = Debris;
                this.ImpactDataSet = ImpactDataSet;
                this.OrientationLimitsPitch = OrientationLimitsPitch;
                this.OrientationLimitsRoll = OrientationLimitsRoll;
                this.DAT2Unknown3 = DAT2Unknown3;
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SkeletalModel.Mask<TItem>?>?>?>(SkeletalModel, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MovementTypeNames, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(Voices, Voices);
                this.FacegenMainClamp = FacegenMainClamp;
                this.FacegenFaceClamp = FacegenFaceClamp;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.AimAssistPose = AimAssistPose;
                this.ImpactMaterialType = ImpactMaterialType;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED0, new SoundReference.Mask<TItem>(WED0));
                this.WED1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED1, new SoundReference.Mask<TItem>(WED1));
                this.BipedObjects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>(BipedObjects, null);
                this.MovementDataOverrides = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>(MovementDataOverrides, Enumerable.Empty<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>());
                this.EquipmentFlags = EquipmentFlags;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>(EquipmentSlots, Enumerable.Empty<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>());
                this.UnarmedWeapon = UnarmedWeapon;
                this.BaseMovementDefault = BaseMovementDefault;
                this.BaseMovementSwimDefault = BaseMovementSwimDefault;
                this.BaseMovementFlyDefault = BaseMovementFlyDefault;
                this.ChargenAndSkintones = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ChargenAndSkintones.Mask<TItem>?>?>?>(ChargenAndSkintones, default);
                this.ArmorRace = ArmorRace;
                this.SubgraphTemplateRace = SubgraphTemplateRace;
                this.Subgraphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>(Subgraphs, Enumerable.Empty<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>());
                this.IdleChatterTimeMin = IdleChatterTimeMin;
                this.IdleChatterTimeMax = IdleChatterTimeMax;
                this.DialogueQuest = DialogueQuest;
                this.HeadPartsAndBoneModifiers = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadPartsAndBoneModifiers.Mask<TItem>?>?>?>(HeadPartsAndBoneModifiers, default);
                this.MannequinSkinSwaps = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MannequinSkinSwap.Mask<TItem>?>>?>(MannequinSkinSwaps, Enumerable.Empty<MaskItemIndexed<TItem, MannequinSkinSwap.Mask<TItem>?>>());
                this.PluralName = PluralName;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public TItem Skin;
            public TItem FirstPersonFlags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public TItem BodyPartData;
            public GenderedItem<TItem> Height;
            public MaskItem<TItem, GenderedItem<Weight.Mask<TItem>?>?>? DefaultWeight;
            public TItem Flags;
            public TItem AccelerationRate;
            public TItem DecelerationRate;
            public TItem Size;
            public TItem DAT2Unknown1;
            public TItem ShieldBipedObject;
            public TItem BeardBipedObject;
            public TItem BodyBipedObject;
            public TItem DAT2Unknown2;
            public TItem Explosion;
            public TItem Debris;
            public TItem ImpactDataSet;
            public TItem OrientationLimitsPitch;
            public TItem OrientationLimitsRoll;
            public TItem DAT2Unknown3;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, SkeletalModel.Mask<TItem>?>?>?>? SkeletalModel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MovementTypeNames;
            public GenderedItem<TItem> Voices;
            public TItem FacegenMainClamp;
            public TItem FacegenFaceClamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public TItem AimAssistPose;
            public TItem ImpactMaterialType;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED0 { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED1 { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>? BipedObjects;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>? MovementDataOverrides;
            public TItem EquipmentFlags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>? EquipmentSlots;
            public TItem UnarmedWeapon;
            public TItem BaseMovementDefault;
            public TItem BaseMovementSwimDefault;
            public TItem BaseMovementFlyDefault;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, ChargenAndSkintones.Mask<TItem>?>?>?>? ChargenAndSkintones;
            public TItem ArmorRace;
            public TItem SubgraphTemplateRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>? Subgraphs;
            public TItem IdleChatterTimeMin;
            public TItem IdleChatterTimeMax;
            public TItem DialogueQuest;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadPartsAndBoneModifiers.Mask<TItem>?>?>?>? HeadPartsAndBoneModifiers;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MannequinSkinSwap.Mask<TItem>?>>?>? MannequinSkinSwaps;
            public TItem PluralName;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.FirstPersonFlags, rhs.FirstPersonFlags)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.DefaultWeight, rhs.DefaultWeight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AccelerationRate, rhs.AccelerationRate)) return false;
                if (!object.Equals(this.DecelerationRate, rhs.DecelerationRate)) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.DAT2Unknown1, rhs.DAT2Unknown1)) return false;
                if (!object.Equals(this.ShieldBipedObject, rhs.ShieldBipedObject)) return false;
                if (!object.Equals(this.BeardBipedObject, rhs.BeardBipedObject)) return false;
                if (!object.Equals(this.BodyBipedObject, rhs.BodyBipedObject)) return false;
                if (!object.Equals(this.DAT2Unknown2, rhs.DAT2Unknown2)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.OrientationLimitsPitch, rhs.OrientationLimitsPitch)) return false;
                if (!object.Equals(this.OrientationLimitsRoll, rhs.OrientationLimitsRoll)) return false;
                if (!object.Equals(this.DAT2Unknown3, rhs.DAT2Unknown3)) return false;
                if (!object.Equals(this.SkeletalModel, rhs.SkeletalModel)) return false;
                if (!object.Equals(this.MovementTypeNames, rhs.MovementTypeNames)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.FacegenMainClamp, rhs.FacegenMainClamp)) return false;
                if (!object.Equals(this.FacegenFaceClamp, rhs.FacegenFaceClamp)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.AimAssistPose, rhs.AimAssistPose)) return false;
                if (!object.Equals(this.ImpactMaterialType, rhs.ImpactMaterialType)) return false;
                if (!object.Equals(this.WED0, rhs.WED0)) return false;
                if (!object.Equals(this.WED1, rhs.WED1)) return false;
                if (!object.Equals(this.BipedObjects, rhs.BipedObjects)) return false;
                if (!object.Equals(this.MovementDataOverrides, rhs.MovementDataOverrides)) return false;
                if (!object.Equals(this.EquipmentFlags, rhs.EquipmentFlags)) return false;
                if (!object.Equals(this.EquipmentSlots, rhs.EquipmentSlots)) return false;
                if (!object.Equals(this.UnarmedWeapon, rhs.UnarmedWeapon)) return false;
                if (!object.Equals(this.BaseMovementDefault, rhs.BaseMovementDefault)) return false;
                if (!object.Equals(this.BaseMovementSwimDefault, rhs.BaseMovementSwimDefault)) return false;
                if (!object.Equals(this.BaseMovementFlyDefault, rhs.BaseMovementFlyDefault)) return false;
                if (!object.Equals(this.ChargenAndSkintones, rhs.ChargenAndSkintones)) return false;
                if (!object.Equals(this.ArmorRace, rhs.ArmorRace)) return false;
                if (!object.Equals(this.SubgraphTemplateRace, rhs.SubgraphTemplateRace)) return false;
                if (!object.Equals(this.Subgraphs, rhs.Subgraphs)) return false;
                if (!object.Equals(this.IdleChatterTimeMin, rhs.IdleChatterTimeMin)) return false;
                if (!object.Equals(this.IdleChatterTimeMax, rhs.IdleChatterTimeMax)) return false;
                if (!object.Equals(this.DialogueQuest, rhs.DialogueQuest)) return false;
                if (!object.Equals(this.HeadPartsAndBoneModifiers, rhs.HeadPartsAndBoneModifiers)) return false;
                if (!object.Equals(this.MannequinSkinSwaps, rhs.MannequinSkinSwaps)) return false;
                if (!object.Equals(this.PluralName, rhs.PluralName)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ActorEffect);
                hash.Add(this.Skin);
                hash.Add(this.FirstPersonFlags);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.BodyPartData);
                hash.Add(this.Height);
                hash.Add(this.DefaultWeight);
                hash.Add(this.Flags);
                hash.Add(this.AccelerationRate);
                hash.Add(this.DecelerationRate);
                hash.Add(this.Size);
                hash.Add(this.DAT2Unknown1);
                hash.Add(this.ShieldBipedObject);
                hash.Add(this.BeardBipedObject);
                hash.Add(this.BodyBipedObject);
                hash.Add(this.DAT2Unknown2);
                hash.Add(this.Explosion);
                hash.Add(this.Debris);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.OrientationLimitsPitch);
                hash.Add(this.OrientationLimitsRoll);
                hash.Add(this.DAT2Unknown3);
                hash.Add(this.SkeletalModel);
                hash.Add(this.MovementTypeNames);
                hash.Add(this.Voices);
                hash.Add(this.FacegenMainClamp);
                hash.Add(this.FacegenFaceClamp);
                hash.Add(this.Attacks);
                hash.Add(this.BodyData);
                hash.Add(this.AimAssistPose);
                hash.Add(this.ImpactMaterialType);
                hash.Add(this.WED0);
                hash.Add(this.WED1);
                hash.Add(this.BipedObjects);
                hash.Add(this.MovementDataOverrides);
                hash.Add(this.EquipmentFlags);
                hash.Add(this.EquipmentSlots);
                hash.Add(this.UnarmedWeapon);
                hash.Add(this.BaseMovementDefault);
                hash.Add(this.BaseMovementSwimDefault);
                hash.Add(this.BaseMovementFlyDefault);
                hash.Add(this.ChargenAndSkintones);
                hash.Add(this.ArmorRace);
                hash.Add(this.SubgraphTemplateRace);
                hash.Add(this.Subgraphs);
                hash.Add(this.IdleChatterTimeMin);
                hash.Add(this.IdleChatterTimeMax);
                hash.Add(this.DialogueQuest);
                hash.Add(this.HeadPartsAndBoneModifiers);
                hash.Add(this.MannequinSkinSwaps);
                hash.Add(this.PluralName);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (!eval(this.FirstPersonFlags)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.BodyPartData)) return false;
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!GenderedItem.AllMask(
                    this.DefaultWeight,
                    eval: eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AccelerationRate)) return false;
                if (!eval(this.DecelerationRate)) return false;
                if (!eval(this.Size)) return false;
                if (!eval(this.DAT2Unknown1)) return false;
                if (!eval(this.ShieldBipedObject)) return false;
                if (!eval(this.BeardBipedObject)) return false;
                if (!eval(this.BodyBipedObject)) return false;
                if (!eval(this.DAT2Unknown2)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.Debris)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.OrientationLimitsPitch)) return false;
                if (!eval(this.OrientationLimitsRoll)) return false;
                if (!eval(this.DAT2Unknown3)) return false;
                if (!GenderedItem.AllMask(
                    this.SkeletalModel,
                    eval: eval)) return false;
                if (this.MovementTypeNames != null)
                {
                    if (!eval(this.MovementTypeNames.Overall)) return false;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Voices.Male) || !eval(this.Voices.Female)) return false;
                if (!eval(this.FacegenMainClamp)) return false;
                if (!eval(this.FacegenFaceClamp)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (!eval(this.AimAssistPose)) return false;
                if (!eval(this.ImpactMaterialType)) return false;
                if (WED0 != null)
                {
                    if (!eval(this.WED0.Overall)) return false;
                    if (this.WED0.Specific != null && !this.WED0.Specific.All(eval)) return false;
                }
                if (WED1 != null)
                {
                    if (!eval(this.WED1.Overall)) return false;
                    if (this.WED1.Specific != null && !this.WED1.Specific.All(eval)) return false;
                }
                if (this.BipedObjects != null)
                {
                    if (!eval(this.BipedObjects.Overall)) return false;
                    if (this.BipedObjects.Specific != null)
                    {
                        foreach (var item in this.BipedObjects.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (!eval(item.Overall)) return false;
                                if (!item.Specific?.All(eval) ?? false) return false;
                            }
                        }
                    }
                }
                if (this.MovementDataOverrides != null)
                {
                    if (!eval(this.MovementDataOverrides.Overall)) return false;
                    if (this.MovementDataOverrides.Specific != null)
                    {
                        foreach (var item in this.MovementDataOverrides.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EquipmentFlags)) return false;
                if (this.EquipmentSlots != null)
                {
                    if (!eval(this.EquipmentSlots.Overall)) return false;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.UnarmedWeapon)) return false;
                if (!eval(this.BaseMovementDefault)) return false;
                if (!eval(this.BaseMovementSwimDefault)) return false;
                if (!eval(this.BaseMovementFlyDefault)) return false;
                if (!GenderedItem.AllMask(
                    this.ChargenAndSkintones,
                    eval: eval)) return false;
                if (!eval(this.ArmorRace)) return false;
                if (!eval(this.SubgraphTemplateRace)) return false;
                if (this.Subgraphs != null)
                {
                    if (!eval(this.Subgraphs.Overall)) return false;
                    if (this.Subgraphs.Specific != null)
                    {
                        foreach (var item in this.Subgraphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.IdleChatterTimeMin)) return false;
                if (!eval(this.IdleChatterTimeMax)) return false;
                if (!eval(this.DialogueQuest)) return false;
                if (!GenderedItem.AllMask(
                    this.HeadPartsAndBoneModifiers,
                    eval: eval)) return false;
                if (this.MannequinSkinSwaps != null)
                {
                    if (!eval(this.MannequinSkinSwaps.Overall)) return false;
                    if (this.MannequinSkinSwaps.Specific != null)
                    {
                        foreach (var item in this.MannequinSkinSwaps.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.PluralName)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Skin)) return true;
                if (eval(this.FirstPersonFlags)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.BodyPartData)) return true;
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (GenderedItem.AnyMask(
                    this.DefaultWeight,
                    eval: eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AccelerationRate)) return true;
                if (eval(this.DecelerationRate)) return true;
                if (eval(this.Size)) return true;
                if (eval(this.DAT2Unknown1)) return true;
                if (eval(this.ShieldBipedObject)) return true;
                if (eval(this.BeardBipedObject)) return true;
                if (eval(this.BodyBipedObject)) return true;
                if (eval(this.DAT2Unknown2)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.Debris)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.OrientationLimitsPitch)) return true;
                if (eval(this.OrientationLimitsRoll)) return true;
                if (eval(this.DAT2Unknown3)) return true;
                if (GenderedItem.AnyMask(
                    this.SkeletalModel,
                    eval: eval)) return true;
                if (this.MovementTypeNames != null)
                {
                    if (eval(this.MovementTypeNames.Overall)) return true;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Voices.Male) || eval(this.Voices.Female)) return true;
                if (eval(this.FacegenMainClamp)) return true;
                if (eval(this.FacegenFaceClamp)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (eval(this.AimAssistPose)) return true;
                if (eval(this.ImpactMaterialType)) return true;
                if (WED0 != null)
                {
                    if (eval(this.WED0.Overall)) return true;
                    if (this.WED0.Specific != null && this.WED0.Specific.Any(eval)) return true;
                }
                if (WED1 != null)
                {
                    if (eval(this.WED1.Overall)) return true;
                    if (this.WED1.Specific != null && this.WED1.Specific.Any(eval)) return true;
                }
                if (this.BipedObjects != null)
                {
                    if (eval(this.BipedObjects.Overall)) return true;
                    if (this.BipedObjects.Specific != null)
                    {
                        foreach (var item in this.BipedObjects.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (eval(item.Overall)) return true;
                                if (item.Specific?.Any(eval) ?? false) return true;
                            }
                        }
                    }
                }
                if (this.MovementDataOverrides != null)
                {
                    if (eval(this.MovementDataOverrides.Overall)) return true;
                    if (this.MovementDataOverrides.Specific != null)
                    {
                        foreach (var item in this.MovementDataOverrides.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EquipmentFlags)) return true;
                if (this.EquipmentSlots != null)
                {
                    if (eval(this.EquipmentSlots.Overall)) return true;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.UnarmedWeapon)) return true;
                if (eval(this.BaseMovementDefault)) return true;
                if (eval(this.BaseMovementSwimDefault)) return true;
                if (eval(this.BaseMovementFlyDefault)) return true;
                if (GenderedItem.AnyMask(
                    this.ChargenAndSkintones,
                    eval: eval)) return true;
                if (eval(this.ArmorRace)) return true;
                if (eval(this.SubgraphTemplateRace)) return true;
                if (this.Subgraphs != null)
                {
                    if (eval(this.Subgraphs.Overall)) return true;
                    if (this.Subgraphs.Specific != null)
                    {
                        foreach (var item in this.Subgraphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.IdleChatterTimeMin)) return true;
                if (eval(this.IdleChatterTimeMax)) return true;
                if (eval(this.DialogueQuest)) return true;
                if (GenderedItem.AnyMask(
                    this.HeadPartsAndBoneModifiers,
                    eval: eval)) return true;
                if (this.MannequinSkinSwaps != null)
                {
                    if (eval(this.MannequinSkinSwaps.Overall)) return true;
                    if (this.MannequinSkinSwaps.Specific != null)
                    {
                        foreach (var item in this.MannequinSkinSwaps.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.PluralName)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.FirstPersonFlags = eval(this.FirstPersonFlags);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyPartData = eval(this.BodyPartData);
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.DefaultWeight = GenderedItem.TranslateHelper(
                    this.DefaultWeight,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.Flags = eval(this.Flags);
                obj.AccelerationRate = eval(this.AccelerationRate);
                obj.DecelerationRate = eval(this.DecelerationRate);
                obj.Size = eval(this.Size);
                obj.DAT2Unknown1 = eval(this.DAT2Unknown1);
                obj.ShieldBipedObject = eval(this.ShieldBipedObject);
                obj.BeardBipedObject = eval(this.BeardBipedObject);
                obj.BodyBipedObject = eval(this.BodyBipedObject);
                obj.DAT2Unknown2 = eval(this.DAT2Unknown2);
                obj.Explosion = eval(this.Explosion);
                obj.Debris = eval(this.Debris);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.OrientationLimitsPitch = eval(this.OrientationLimitsPitch);
                obj.OrientationLimitsRoll = eval(this.OrientationLimitsRoll);
                obj.DAT2Unknown3 = eval(this.DAT2Unknown3);
                obj.SkeletalModel = GenderedItem.TranslateHelper(
                    this.SkeletalModel,
                    eval,
                    (m, e) => m?.Translate(e));
                if (MovementTypeNames != null)
                {
                    obj.MovementTypeNames = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MovementTypeNames.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MovementTypeNames.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MovementTypeNames.Specific = l;
                        foreach (var item in MovementTypeNames.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Voices = new GenderedItem<R>(
                    eval(this.Voices.Male),
                    eval(this.Voices.Female));
                obj.FacegenMainClamp = eval(this.FacegenMainClamp);
                obj.FacegenFaceClamp = eval(this.FacegenFaceClamp);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific)
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.AimAssistPose = eval(this.AimAssistPose);
                obj.ImpactMaterialType = eval(this.ImpactMaterialType);
                obj.WED0 = this.WED0 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED0.Overall), this.WED0.Specific?.Translate(eval));
                obj.WED1 = this.WED1 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED1.Overall), this.WED1.Specific?.Translate(eval));
                if (BipedObjects != null)
                {
                    obj.BipedObjects = new MaskItem<R, IEnumerable<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>>?>(eval(this.BipedObjects.Overall), default);
                    if (BipedObjects.Specific != null)
                    {
                        List<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>> l = new List<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>>();
                        obj.BipedObjects.Specific = l;
                        foreach (var item in BipedObjects.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                if (MovementDataOverrides != null)
                {
                    obj.MovementDataOverrides = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>?>(eval(this.MovementDataOverrides.Overall), Enumerable.Empty<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>());
                    if (MovementDataOverrides.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>();
                        obj.MovementDataOverrides.Specific = l;
                        foreach (var item in MovementDataOverrides.Specific)
                        {
                            MaskItemIndexed<R, MovementDataOverride.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MovementDataOverride.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EquipmentFlags = eval(this.EquipmentFlags);
                if (EquipmentSlots != null)
                {
                    obj.EquipmentSlots = new MaskItem<R, IEnumerable<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>?>(eval(this.EquipmentSlots.Overall), Enumerable.Empty<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>());
                    if (EquipmentSlots.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>();
                        obj.EquipmentSlots.Specific = l;
                        foreach (var item in EquipmentSlots.Specific)
                        {
                            MaskItemIndexed<R, EquipmentSlot.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, EquipmentSlot.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.UnarmedWeapon = eval(this.UnarmedWeapon);
                obj.BaseMovementDefault = eval(this.BaseMovementDefault);
                obj.BaseMovementSwimDefault = eval(this.BaseMovementSwimDefault);
                obj.BaseMovementFlyDefault = eval(this.BaseMovementFlyDefault);
                obj.ChargenAndSkintones = GenderedItem.TranslateHelper(
                    this.ChargenAndSkintones,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.ArmorRace = eval(this.ArmorRace);
                obj.SubgraphTemplateRace = eval(this.SubgraphTemplateRace);
                if (Subgraphs != null)
                {
                    obj.Subgraphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Subgraph.Mask<R>?>>?>(eval(this.Subgraphs.Overall), Enumerable.Empty<MaskItemIndexed<R, Subgraph.Mask<R>?>>());
                    if (Subgraphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Subgraph.Mask<R>?>>();
                        obj.Subgraphs.Specific = l;
                        foreach (var item in Subgraphs.Specific)
                        {
                            MaskItemIndexed<R, Subgraph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Subgraph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.IdleChatterTimeMin = eval(this.IdleChatterTimeMin);
                obj.IdleChatterTimeMax = eval(this.IdleChatterTimeMax);
                obj.DialogueQuest = eval(this.DialogueQuest);
                obj.HeadPartsAndBoneModifiers = GenderedItem.TranslateHelper(
                    this.HeadPartsAndBoneModifiers,
                    eval,
                    (m, e) => m?.Translate(e));
                if (MannequinSkinSwaps != null)
                {
                    obj.MannequinSkinSwaps = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MannequinSkinSwap.Mask<R>?>>?>(eval(this.MannequinSkinSwaps.Overall), Enumerable.Empty<MaskItemIndexed<R, MannequinSkinSwap.Mask<R>?>>());
                    if (MannequinSkinSwaps.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MannequinSkinSwap.Mask<R>?>>();
                        obj.MannequinSkinSwaps.Specific = l;
                        foreach (var item in MannequinSkinSwaps.Specific)
                        {
                            MaskItemIndexed<R, MannequinSkinSwap.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MannequinSkinSwap.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PluralName = eval(this.PluralName);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Race.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Race.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        sb.AppendLine("ActorEffect =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Skin ?? true)
                    {
                        sb.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.FirstPersonFlags ?? true)
                    {
                        sb.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        sb.AppendItem(BodyPartData, "BodyPartData");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"DefaultWeight => {DefaultWeight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AccelerationRate ?? true)
                    {
                        sb.AppendItem(AccelerationRate, "AccelerationRate");
                    }
                    if (printMask?.DecelerationRate ?? true)
                    {
                        sb.AppendItem(DecelerationRate, "DecelerationRate");
                    }
                    if (printMask?.Size ?? true)
                    {
                        sb.AppendItem(Size, "Size");
                    }
                    if (printMask?.DAT2Unknown1 ?? true)
                    {
                        sb.AppendItem(DAT2Unknown1, "DAT2Unknown1");
                    }
                    if (printMask?.ShieldBipedObject ?? true)
                    {
                        sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                    }
                    if (printMask?.BeardBipedObject ?? true)
                    {
                        sb.AppendItem(BeardBipedObject, "BeardBipedObject");
                    }
                    if (printMask?.BodyBipedObject ?? true)
                    {
                        sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                    }
                    if (printMask?.DAT2Unknown2 ?? true)
                    {
                        sb.AppendItem(DAT2Unknown2, "DAT2Unknown2");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        sb.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.Debris ?? true)
                    {
                        sb.AppendItem(Debris, "Debris");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.OrientationLimitsPitch ?? true)
                    {
                        sb.AppendItem(OrientationLimitsPitch, "OrientationLimitsPitch");
                    }
                    if (printMask?.OrientationLimitsRoll ?? true)
                    {
                        sb.AppendItem(OrientationLimitsRoll, "OrientationLimitsRoll");
                    }
                    if (printMask?.DAT2Unknown3 ?? true)
                    {
                        sb.AppendItem(DAT2Unknown3, "DAT2Unknown3");
                    }
                    if (SkeletalModel != null
                        && (printMask?.SkeletalModel?.Overall ?? true))
                    {
                        sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                    }
                    if ((printMask?.MovementTypeNames?.Overall ?? true)
                        && MovementTypeNames is {} MovementTypeNamesItem)
                    {
                        sb.AppendLine("MovementTypeNames =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementTypeNamesItem.Overall);
                            if (MovementTypeNamesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypeNamesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Voices => {Voices}");
                    }
                    if (printMask?.FacegenMainClamp ?? true)
                    {
                        sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                    }
                    if (printMask?.FacegenFaceClamp ?? true)
                    {
                        sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks is {} AttacksItem)
                    {
                        sb.AppendLine("Attacks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BodyData => {BodyData}");
                    }
                    if (printMask?.AimAssistPose ?? true)
                    {
                        sb.AppendItem(AimAssistPose, "AimAssistPose");
                    }
                    if (printMask?.ImpactMaterialType ?? true)
                    {
                        sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                    }
                    if (printMask?.WED0?.Overall ?? true)
                    {
                        WED0?.Print(sb);
                    }
                    if (printMask?.WED1?.Overall ?? true)
                    {
                        WED1?.Print(sb);
                    }
                    if (printMask?.BipedObjects?.Overall ?? true)
                    {
                        sb.AppendLine("BipedObjects =>");
                        using (sb.Brace())
                        {
                            if (BipedObjects != null)
                            {
                                if (BipedObjects.Overall != null)
                                {
                                    sb.AppendLine(BipedObjects.Overall.ToString());
                                }
                                if (BipedObjects.Specific != null)
                                {
                                    foreach (var subItem in BipedObjects.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Index);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                subItem.Specific?.Print(sb);
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MovementDataOverrides?.Overall ?? true)
                        && MovementDataOverrides is {} MovementDataOverridesItem)
                    {
                        sb.AppendLine("MovementDataOverrides =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementDataOverridesItem.Overall);
                            if (MovementDataOverridesItem.Specific != null)
                            {
                                foreach (var subItem in MovementDataOverridesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EquipmentFlags ?? true)
                    {
                        sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                    }
                    if ((printMask?.EquipmentSlots?.Overall ?? true)
                        && EquipmentSlots is {} EquipmentSlotsItem)
                    {
                        sb.AppendLine("EquipmentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EquipmentSlotsItem.Overall);
                            if (EquipmentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in EquipmentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnarmedWeapon ?? true)
                    {
                        sb.AppendItem(UnarmedWeapon, "UnarmedWeapon");
                    }
                    if (printMask?.BaseMovementDefault ?? true)
                    {
                        sb.AppendItem(BaseMovementDefault, "BaseMovementDefault");
                    }
                    if (printMask?.BaseMovementSwimDefault ?? true)
                    {
                        sb.AppendItem(BaseMovementSwimDefault, "BaseMovementSwimDefault");
                    }
                    if (printMask?.BaseMovementFlyDefault ?? true)
                    {
                        sb.AppendItem(BaseMovementFlyDefault, "BaseMovementFlyDefault");
                    }
                    if (ChargenAndSkintones != null
                        && (printMask?.ChargenAndSkintones?.Overall ?? true))
                    {
                        sb.AppendLine($"ChargenAndSkintones => {ChargenAndSkintones}");
                    }
                    if (printMask?.ArmorRace ?? true)
                    {
                        sb.AppendItem(ArmorRace, "ArmorRace");
                    }
                    if (printMask?.SubgraphTemplateRace ?? true)
                    {
                        sb.AppendItem(SubgraphTemplateRace, "SubgraphTemplateRace");
                    }
                    if ((printMask?.Subgraphs?.Overall ?? true)
                        && Subgraphs is {} SubgraphsItem)
                    {
                        sb.AppendLine("Subgraphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SubgraphsItem.Overall);
                            if (SubgraphsItem.Specific != null)
                            {
                                foreach (var subItem in SubgraphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IdleChatterTimeMin ?? true)
                    {
                        sb.AppendItem(IdleChatterTimeMin, "IdleChatterTimeMin");
                    }
                    if (printMask?.IdleChatterTimeMax ?? true)
                    {
                        sb.AppendItem(IdleChatterTimeMax, "IdleChatterTimeMax");
                    }
                    if (printMask?.DialogueQuest ?? true)
                    {
                        sb.AppendItem(DialogueQuest, "DialogueQuest");
                    }
                    if (HeadPartsAndBoneModifiers != null
                        && (printMask?.HeadPartsAndBoneModifiers?.Overall ?? true))
                    {
                        sb.AppendLine($"HeadPartsAndBoneModifiers => {HeadPartsAndBoneModifiers}");
                    }
                    if ((printMask?.MannequinSkinSwaps?.Overall ?? true)
                        && MannequinSkinSwaps is {} MannequinSkinSwapsItem)
                    {
                        sb.AppendLine("MannequinSkinSwaps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MannequinSkinSwapsItem.Overall);
                            if (MannequinSkinSwapsItem.Specific != null)
                            {
                                foreach (var subItem in MannequinSkinSwapsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PluralName ?? true)
                    {
                        sb.AppendItem(PluralName, "PluralName");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public Exception? FirstPersonFlags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public Exception? BodyPartData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultWeight;
            public Exception? Flags;
            public Exception? AccelerationRate;
            public Exception? DecelerationRate;
            public Exception? Size;
            public Exception? DAT2Unknown1;
            public Exception? ShieldBipedObject;
            public Exception? BeardBipedObject;
            public Exception? BodyBipedObject;
            public Exception? DAT2Unknown2;
            public Exception? Explosion;
            public Exception? Debris;
            public Exception? ImpactDataSet;
            public Exception? OrientationLimitsPitch;
            public Exception? OrientationLimitsRoll;
            public Exception? DAT2Unknown3;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? SkeletalModel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MovementTypeNames;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public Exception? FacegenMainClamp;
            public Exception? FacegenFaceClamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public Exception? AimAssistPose;
            public Exception? ImpactMaterialType;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED0;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED1;
            public MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>? BipedObjects;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>? MovementDataOverrides;
            public Exception? EquipmentFlags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>? EquipmentSlots;
            public Exception? UnarmedWeapon;
            public Exception? BaseMovementDefault;
            public Exception? BaseMovementSwimDefault;
            public Exception? BaseMovementFlyDefault;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? ChargenAndSkintones;
            public Exception? ArmorRace;
            public Exception? SubgraphTemplateRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>? Subgraphs;
            public Exception? IdleChatterTimeMin;
            public Exception? IdleChatterTimeMax;
            public Exception? DialogueQuest;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? HeadPartsAndBoneModifiers;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MannequinSkinSwap.ErrorMask?>>?>? MannequinSkinSwaps;
            public Exception? PluralName;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Components:
                        return Components;
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.FirstPersonFlags:
                        return FirstPersonFlags;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.Properties:
                        return Properties;
                    case Race_FieldIndex.BodyPartData:
                        return BodyPartData;
                    case Race_FieldIndex.Height:
                        return Height;
                    case Race_FieldIndex.DefaultWeight:
                        return DefaultWeight;
                    case Race_FieldIndex.Flags:
                        return Flags;
                    case Race_FieldIndex.AccelerationRate:
                        return AccelerationRate;
                    case Race_FieldIndex.DecelerationRate:
                        return DecelerationRate;
                    case Race_FieldIndex.Size:
                        return Size;
                    case Race_FieldIndex.DAT2Unknown1:
                        return DAT2Unknown1;
                    case Race_FieldIndex.ShieldBipedObject:
                        return ShieldBipedObject;
                    case Race_FieldIndex.BeardBipedObject:
                        return BeardBipedObject;
                    case Race_FieldIndex.BodyBipedObject:
                        return BodyBipedObject;
                    case Race_FieldIndex.DAT2Unknown2:
                        return DAT2Unknown2;
                    case Race_FieldIndex.Explosion:
                        return Explosion;
                    case Race_FieldIndex.Debris:
                        return Debris;
                    case Race_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        return OrientationLimitsPitch;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        return OrientationLimitsRoll;
                    case Race_FieldIndex.DAT2Unknown3:
                        return DAT2Unknown3;
                    case Race_FieldIndex.SkeletalModel:
                        return SkeletalModel;
                    case Race_FieldIndex.MovementTypeNames:
                        return MovementTypeNames;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.FacegenMainClamp:
                        return FacegenMainClamp;
                    case Race_FieldIndex.FacegenFaceClamp:
                        return FacegenFaceClamp;
                    case Race_FieldIndex.Attacks:
                        return Attacks;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.AimAssistPose:
                        return AimAssistPose;
                    case Race_FieldIndex.ImpactMaterialType:
                        return ImpactMaterialType;
                    case Race_FieldIndex.WED0:
                        return WED0;
                    case Race_FieldIndex.WED1:
                        return WED1;
                    case Race_FieldIndex.BipedObjects:
                        return BipedObjects;
                    case Race_FieldIndex.MovementDataOverrides:
                        return MovementDataOverrides;
                    case Race_FieldIndex.EquipmentFlags:
                        return EquipmentFlags;
                    case Race_FieldIndex.EquipmentSlots:
                        return EquipmentSlots;
                    case Race_FieldIndex.UnarmedWeapon:
                        return UnarmedWeapon;
                    case Race_FieldIndex.BaseMovementDefault:
                        return BaseMovementDefault;
                    case Race_FieldIndex.BaseMovementSwimDefault:
                        return BaseMovementSwimDefault;
                    case Race_FieldIndex.BaseMovementFlyDefault:
                        return BaseMovementFlyDefault;
                    case Race_FieldIndex.ChargenAndSkintones:
                        return ChargenAndSkintones;
                    case Race_FieldIndex.ArmorRace:
                        return ArmorRace;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        return SubgraphTemplateRace;
                    case Race_FieldIndex.Subgraphs:
                        return Subgraphs;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        return IdleChatterTimeMin;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        return IdleChatterTimeMax;
                    case Race_FieldIndex.DialogueQuest:
                        return DialogueQuest;
                    case Race_FieldIndex.HeadPartsAndBoneModifiers:
                        return HeadPartsAndBoneModifiers;
                    case Race_FieldIndex.MannequinSkinSwaps:
                        return MannequinSkinSwaps;
                    case Race_FieldIndex.PluralName:
                        return PluralName;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = ex;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = ex;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = ex;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case Race_FieldIndex.DAT2Unknown1:
                        this.DAT2Unknown1 = ex;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = ex;
                        break;
                    case Race_FieldIndex.BeardBipedObject:
                        this.BeardBipedObject = ex;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = ex;
                        break;
                    case Race_FieldIndex.DAT2Unknown2:
                        this.DAT2Unknown2 = ex;
                        break;
                    case Race_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case Race_FieldIndex.Debris:
                        this.Debris = ex;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        this.OrientationLimitsPitch = ex;
                        break;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        this.OrientationLimitsRoll = ex;
                        break;
                    case Race_FieldIndex.DAT2Unknown3:
                        this.DAT2Unknown3 = ex;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.AimAssistPose:
                        this.AimAssistPose = ex;
                        break;
                    case Race_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = ex;
                        break;
                    case Race_FieldIndex.WED0:
                        this.WED0 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.WED1:
                        this.WED1 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.BipedObjects:
                        this.BipedObjects = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementDataOverrides:
                        this.MovementDataOverrides = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = ex;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefault:
                        this.BaseMovementDefault = ex;
                        break;
                    case Race_FieldIndex.BaseMovementSwimDefault:
                        this.BaseMovementSwimDefault = ex;
                        break;
                    case Race_FieldIndex.BaseMovementFlyDefault:
                        this.BaseMovementFlyDefault = ex;
                        break;
                    case Race_FieldIndex.ChargenAndSkintones:
                        this.ChargenAndSkintones = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = ex;
                        break;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        this.SubgraphTemplateRace = ex;
                        break;
                    case Race_FieldIndex.Subgraphs:
                        this.Subgraphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        this.IdleChatterTimeMin = ex;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        this.IdleChatterTimeMax = ex;
                        break;
                    case Race_FieldIndex.DialogueQuest:
                        this.DialogueQuest = ex;
                        break;
                    case Race_FieldIndex.HeadPartsAndBoneModifiers:
                        this.HeadPartsAndBoneModifiers = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MannequinSkinSwaps:
                        this.MannequinSkinSwaps = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MannequinSkinSwap.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.PluralName:
                        this.PluralName = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DAT2Unknown1:
                        this.DAT2Unknown1 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BeardBipedObject:
                        this.BeardBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DAT2Unknown2:
                        this.DAT2Unknown2 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Debris:
                        this.Debris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        this.OrientationLimitsPitch = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        this.OrientationLimitsRoll = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DAT2Unknown3:
                        this.DAT2Unknown3 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.AimAssistPose:
                        this.AimAssistPose = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = (Exception?)obj;
                        break;
                    case Race_FieldIndex.WED0:
                        this.WED0 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.WED1:
                        this.WED1 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.BipedObjects:
                        this.BipedObjects = (MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.MovementDataOverrides:
                        this.MovementDataOverrides = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefault:
                        this.BaseMovementDefault = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementSwimDefault:
                        this.BaseMovementSwimDefault = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementFlyDefault:
                        this.BaseMovementFlyDefault = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ChargenAndSkintones:
                        this.ChargenAndSkintones = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        this.SubgraphTemplateRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Subgraphs:
                        this.Subgraphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        this.IdleChatterTimeMin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        this.IdleChatterTimeMax = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DialogueQuest:
                        this.DialogueQuest = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HeadPartsAndBoneModifiers:
                        this.HeadPartsAndBoneModifiers = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MannequinSkinSwaps:
                        this.MannequinSkinSwaps = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MannequinSkinSwap.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.PluralName:
                        this.PluralName = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (FirstPersonFlags != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (BodyPartData != null) return true;
                if (Height != null) return true;
                if (DefaultWeight != null) return true;
                if (Flags != null) return true;
                if (AccelerationRate != null) return true;
                if (DecelerationRate != null) return true;
                if (Size != null) return true;
                if (DAT2Unknown1 != null) return true;
                if (ShieldBipedObject != null) return true;
                if (BeardBipedObject != null) return true;
                if (BodyBipedObject != null) return true;
                if (DAT2Unknown2 != null) return true;
                if (Explosion != null) return true;
                if (Debris != null) return true;
                if (ImpactDataSet != null) return true;
                if (OrientationLimitsPitch != null) return true;
                if (OrientationLimitsRoll != null) return true;
                if (DAT2Unknown3 != null) return true;
                if (SkeletalModel != null) return true;
                if (MovementTypeNames != null) return true;
                if (Voices != null) return true;
                if (FacegenMainClamp != null) return true;
                if (FacegenFaceClamp != null) return true;
                if (Attacks != null) return true;
                if (BodyData != null) return true;
                if (AimAssistPose != null) return true;
                if (ImpactMaterialType != null) return true;
                if (WED0 != null) return true;
                if (WED1 != null) return true;
                if (BipedObjects != null) return true;
                if (MovementDataOverrides != null) return true;
                if (EquipmentFlags != null) return true;
                if (EquipmentSlots != null) return true;
                if (UnarmedWeapon != null) return true;
                if (BaseMovementDefault != null) return true;
                if (BaseMovementSwimDefault != null) return true;
                if (BaseMovementFlyDefault != null) return true;
                if (ChargenAndSkintones != null) return true;
                if (ArmorRace != null) return true;
                if (SubgraphTemplateRace != null) return true;
                if (Subgraphs != null) return true;
                if (IdleChatterTimeMin != null) return true;
                if (IdleChatterTimeMax != null) return true;
                if (DialogueQuest != null) return true;
                if (HeadPartsAndBoneModifiers != null) return true;
                if (MannequinSkinSwaps != null) return true;
                if (PluralName != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (ActorEffect is {} ActorEffectItem)
                {
                    sb.AppendLine("ActorEffect =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Skin, "Skin");
                }
                {
                    sb.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BodyPartData, "BodyPartData");
                }
                {
                    sb.AppendLine($"Height => {Height}");
                }
                {
                    sb.AppendLine($"DefaultWeight => {DefaultWeight}");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(AccelerationRate, "AccelerationRate");
                }
                {
                    sb.AppendItem(DecelerationRate, "DecelerationRate");
                }
                {
                    sb.AppendItem(Size, "Size");
                }
                {
                    sb.AppendItem(DAT2Unknown1, "DAT2Unknown1");
                }
                {
                    sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                }
                {
                    sb.AppendItem(BeardBipedObject, "BeardBipedObject");
                }
                {
                    sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                }
                {
                    sb.AppendItem(DAT2Unknown2, "DAT2Unknown2");
                }
                {
                    sb.AppendItem(Explosion, "Explosion");
                }
                {
                    sb.AppendItem(Debris, "Debris");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(OrientationLimitsPitch, "OrientationLimitsPitch");
                }
                {
                    sb.AppendItem(OrientationLimitsRoll, "OrientationLimitsRoll");
                }
                {
                    sb.AppendItem(DAT2Unknown3, "DAT2Unknown3");
                }
                if (SkeletalModel != null)
                {
                    sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                }
                if (MovementTypeNames is {} MovementTypeNamesItem)
                {
                    sb.AppendLine("MovementTypeNames =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementTypeNamesItem.Overall);
                        if (MovementTypeNamesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypeNamesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"Voices => {Voices}");
                }
                {
                    sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                }
                {
                    sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                }
                if (Attacks is {} AttacksItem)
                {
                    sb.AppendLine("Attacks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"BodyData => {BodyData}");
                }
                {
                    sb.AppendItem(AimAssistPose, "AimAssistPose");
                }
                {
                    sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                }
                WED0?.Print(sb);
                WED1?.Print(sb);
                {
                    sb.AppendLine("BipedObjects =>");
                    using (sb.Brace())
                    {
                        if (BipedObjects != null)
                        {
                            if (BipedObjects.Overall != null)
                            {
                                sb.AppendLine(BipedObjects.Overall.ToString());
                            }
                            if (BipedObjects.Specific != null)
                            {
                                foreach (var subItem in BipedObjects.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Index);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            subItem.Specific?.Print(sb);
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                if (MovementDataOverrides is {} MovementDataOverridesItem)
                {
                    sb.AppendLine("MovementDataOverrides =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementDataOverridesItem.Overall);
                        if (MovementDataOverridesItem.Specific != null)
                        {
                            foreach (var subItem in MovementDataOverridesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                }
                if (EquipmentSlots is {} EquipmentSlotsItem)
                {
                    sb.AppendLine("EquipmentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EquipmentSlotsItem.Overall);
                        if (EquipmentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in EquipmentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnarmedWeapon, "UnarmedWeapon");
                }
                {
                    sb.AppendItem(BaseMovementDefault, "BaseMovementDefault");
                }
                {
                    sb.AppendItem(BaseMovementSwimDefault, "BaseMovementSwimDefault");
                }
                {
                    sb.AppendItem(BaseMovementFlyDefault, "BaseMovementFlyDefault");
                }
                if (ChargenAndSkintones != null)
                {
                    sb.AppendLine($"ChargenAndSkintones => {ChargenAndSkintones}");
                }
                {
                    sb.AppendItem(ArmorRace, "ArmorRace");
                }
                {
                    sb.AppendItem(SubgraphTemplateRace, "SubgraphTemplateRace");
                }
                if (Subgraphs is {} SubgraphsItem)
                {
                    sb.AppendLine("Subgraphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SubgraphsItem.Overall);
                        if (SubgraphsItem.Specific != null)
                        {
                            foreach (var subItem in SubgraphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IdleChatterTimeMin, "IdleChatterTimeMin");
                }
                {
                    sb.AppendItem(IdleChatterTimeMax, "IdleChatterTimeMax");
                }
                {
                    sb.AppendItem(DialogueQuest, "DialogueQuest");
                }
                if (HeadPartsAndBoneModifiers != null)
                {
                    sb.AppendLine($"HeadPartsAndBoneModifiers => {HeadPartsAndBoneModifiers}");
                }
                if (MannequinSkinSwaps is {} MannequinSkinSwapsItem)
                {
                    sb.AppendLine("MannequinSkinSwaps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MannequinSkinSwapsItem.Overall);
                        if (MannequinSkinSwapsItem.Specific != null)
                        {
                            foreach (var subItem in MannequinSkinSwapsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PluralName, "PluralName");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), Noggog.ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.FirstPersonFlags = this.FirstPersonFlags.Combine(rhs.FirstPersonFlags);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DefaultWeight?.Overall, rhs.DefaultWeight?.Overall), GenderedItem.Combine(this.DefaultWeight?.Specific, rhs.DefaultWeight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AccelerationRate = this.AccelerationRate.Combine(rhs.AccelerationRate);
                ret.DecelerationRate = this.DecelerationRate.Combine(rhs.DecelerationRate);
                ret.Size = this.Size.Combine(rhs.Size);
                ret.DAT2Unknown1 = this.DAT2Unknown1.Combine(rhs.DAT2Unknown1);
                ret.ShieldBipedObject = this.ShieldBipedObject.Combine(rhs.ShieldBipedObject);
                ret.BeardBipedObject = this.BeardBipedObject.Combine(rhs.BeardBipedObject);
                ret.BodyBipedObject = this.BodyBipedObject.Combine(rhs.BodyBipedObject);
                ret.DAT2Unknown2 = this.DAT2Unknown2.Combine(rhs.DAT2Unknown2);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.Debris = this.Debris.Combine(rhs.Debris);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.OrientationLimitsPitch = this.OrientationLimitsPitch.Combine(rhs.OrientationLimitsPitch);
                ret.OrientationLimitsRoll = this.OrientationLimitsRoll.Combine(rhs.OrientationLimitsRoll);
                ret.DAT2Unknown3 = this.DAT2Unknown3.Combine(rhs.DAT2Unknown3);
                ret.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.SkeletalModel?.Overall, rhs.SkeletalModel?.Overall), GenderedItem.Combine(this.SkeletalModel?.Specific, rhs.SkeletalModel?.Specific));
                ret.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Overall, rhs.MovementTypeNames?.Overall), Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Specific, rhs.MovementTypeNames?.Specific));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.FacegenMainClamp = this.FacegenMainClamp.Combine(rhs.FacegenMainClamp);
                ret.FacegenFaceClamp = this.FacegenFaceClamp.Combine(rhs.FacegenFaceClamp);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), Noggog.ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.AimAssistPose = this.AimAssistPose.Combine(rhs.AimAssistPose);
                ret.ImpactMaterialType = this.ImpactMaterialType.Combine(rhs.ImpactMaterialType);
                ret.WED0 = this.WED0.Combine(rhs.WED0, (l, r) => l.Combine(r));
                ret.WED1 = this.WED1.Combine(rhs.WED1, (l, r) => l.Combine(r));
                ret.BipedObjects = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.BipedObjects?.Overall, rhs.BipedObjects?.Overall), Noggog.ExceptionExt.Combine(this.BipedObjects?.Specific, rhs.BipedObjects?.Specific));
                ret.MovementDataOverrides = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MovementDataOverrides?.Overall, rhs.MovementDataOverrides?.Overall), Noggog.ExceptionExt.Combine(this.MovementDataOverrides?.Specific, rhs.MovementDataOverrides?.Specific));
                ret.EquipmentFlags = this.EquipmentFlags.Combine(rhs.EquipmentFlags);
                ret.EquipmentSlots = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Overall, rhs.EquipmentSlots?.Overall), Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Specific, rhs.EquipmentSlots?.Specific));
                ret.UnarmedWeapon = this.UnarmedWeapon.Combine(rhs.UnarmedWeapon);
                ret.BaseMovementDefault = this.BaseMovementDefault.Combine(rhs.BaseMovementDefault);
                ret.BaseMovementSwimDefault = this.BaseMovementSwimDefault.Combine(rhs.BaseMovementSwimDefault);
                ret.BaseMovementFlyDefault = this.BaseMovementFlyDefault.Combine(rhs.BaseMovementFlyDefault);
                ret.ChargenAndSkintones = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.ChargenAndSkintones?.Overall, rhs.ChargenAndSkintones?.Overall), GenderedItem.Combine(this.ChargenAndSkintones?.Specific, rhs.ChargenAndSkintones?.Specific));
                ret.ArmorRace = this.ArmorRace.Combine(rhs.ArmorRace);
                ret.SubgraphTemplateRace = this.SubgraphTemplateRace.Combine(rhs.SubgraphTemplateRace);
                ret.Subgraphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Subgraphs?.Overall, rhs.Subgraphs?.Overall), Noggog.ExceptionExt.Combine(this.Subgraphs?.Specific, rhs.Subgraphs?.Specific));
                ret.IdleChatterTimeMin = this.IdleChatterTimeMin.Combine(rhs.IdleChatterTimeMin);
                ret.IdleChatterTimeMax = this.IdleChatterTimeMax.Combine(rhs.IdleChatterTimeMax);
                ret.DialogueQuest = this.DialogueQuest.Combine(rhs.DialogueQuest);
                ret.HeadPartsAndBoneModifiers = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.HeadPartsAndBoneModifiers?.Overall, rhs.HeadPartsAndBoneModifiers?.Overall), GenderedItem.Combine(this.HeadPartsAndBoneModifiers?.Specific, rhs.HeadPartsAndBoneModifiers?.Specific));
                ret.MannequinSkinSwaps = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MannequinSkinSwap.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MannequinSkinSwaps?.Overall, rhs.MannequinSkinSwaps?.Overall), Noggog.ExceptionExt.Combine(this.MannequinSkinSwaps?.Specific, rhs.MannequinSkinSwaps?.Specific));
                ret.PluralName = this.PluralName.Combine(rhs.PluralName);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public bool FirstPersonFlags;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool BodyPartData;
            public GenderedItem<bool>? Height;
            public GenderedItem<Weight.TranslationMask>? DefaultWeight;
            public bool Flags;
            public bool AccelerationRate;
            public bool DecelerationRate;
            public bool Size;
            public bool DAT2Unknown1;
            public bool ShieldBipedObject;
            public bool BeardBipedObject;
            public bool BodyBipedObject;
            public bool DAT2Unknown2;
            public bool Explosion;
            public bool Debris;
            public bool ImpactDataSet;
            public bool OrientationLimitsPitch;
            public bool OrientationLimitsRoll;
            public bool DAT2Unknown3;
            public GenderedItem<SkeletalModel.TranslationMask>? SkeletalModel;
            public bool MovementTypeNames;
            public GenderedItem<bool>? Voices;
            public bool FacegenMainClamp;
            public bool FacegenFaceClamp;
            public Attack.TranslationMask? Attacks;
            public GenderedItem<BodyData.TranslationMask>? BodyData;
            public bool AimAssistPose;
            public bool ImpactMaterialType;
            public SoundReference.TranslationMask? WED0;
            public SoundReference.TranslationMask? WED1;
            public BipedObjectData.TranslationMask? BipedObjects;
            public MovementDataOverride.TranslationMask? MovementDataOverrides;
            public bool EquipmentFlags;
            public EquipmentSlot.TranslationMask? EquipmentSlots;
            public bool UnarmedWeapon;
            public bool BaseMovementDefault;
            public bool BaseMovementSwimDefault;
            public bool BaseMovementFlyDefault;
            public GenderedItem<ChargenAndSkintones.TranslationMask>? ChargenAndSkintones;
            public bool ArmorRace;
            public bool SubgraphTemplateRace;
            public Subgraph.TranslationMask? Subgraphs;
            public bool IdleChatterTimeMin;
            public bool IdleChatterTimeMax;
            public bool DialogueQuest;
            public GenderedItem<HeadPartsAndBoneModifiers.TranslationMask>? HeadPartsAndBoneModifiers;
            public MannequinSkinSwap.TranslationMask? MannequinSkinSwaps;
            public bool PluralName;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.FirstPersonFlags = defaultOn;
                this.Keywords = defaultOn;
                this.BodyPartData = defaultOn;
                this.Flags = defaultOn;
                this.AccelerationRate = defaultOn;
                this.DecelerationRate = defaultOn;
                this.Size = defaultOn;
                this.DAT2Unknown1 = defaultOn;
                this.ShieldBipedObject = defaultOn;
                this.BeardBipedObject = defaultOn;
                this.BodyBipedObject = defaultOn;
                this.DAT2Unknown2 = defaultOn;
                this.Explosion = defaultOn;
                this.Debris = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.OrientationLimitsPitch = defaultOn;
                this.OrientationLimitsRoll = defaultOn;
                this.DAT2Unknown3 = defaultOn;
                this.MovementTypeNames = defaultOn;
                this.FacegenMainClamp = defaultOn;
                this.FacegenFaceClamp = defaultOn;
                this.AimAssistPose = defaultOn;
                this.ImpactMaterialType = defaultOn;
                this.EquipmentFlags = defaultOn;
                this.UnarmedWeapon = defaultOn;
                this.BaseMovementDefault = defaultOn;
                this.BaseMovementSwimDefault = defaultOn;
                this.BaseMovementFlyDefault = defaultOn;
                this.ArmorRace = defaultOn;
                this.SubgraphTemplateRace = defaultOn;
                this.IdleChatterTimeMin = defaultOn;
                this.IdleChatterTimeMax = defaultOn;
                this.DialogueQuest = defaultOn;
                this.PluralName = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((FirstPersonFlags, null));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((BodyPartData, null));
                ret.Add((Height != null || DefaultOn, null));
                ret.Add((DefaultWeight != null || DefaultOn, null));
                ret.Add((Flags, null));
                ret.Add((AccelerationRate, null));
                ret.Add((DecelerationRate, null));
                ret.Add((Size, null));
                ret.Add((DAT2Unknown1, null));
                ret.Add((ShieldBipedObject, null));
                ret.Add((BeardBipedObject, null));
                ret.Add((BodyBipedObject, null));
                ret.Add((DAT2Unknown2, null));
                ret.Add((Explosion, null));
                ret.Add((Debris, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((OrientationLimitsPitch, null));
                ret.Add((OrientationLimitsRoll, null));
                ret.Add((DAT2Unknown3, null));
                ret.Add((SkeletalModel != null || DefaultOn, null));
                ret.Add((MovementTypeNames, null));
                ret.Add((Voices != null || DefaultOn, null));
                ret.Add((FacegenMainClamp, null));
                ret.Add((FacegenFaceClamp, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((BodyData != null || DefaultOn, null));
                ret.Add((AimAssistPose, null));
                ret.Add((ImpactMaterialType, null));
                ret.Add((WED0 != null ? WED0.OnOverall : DefaultOn, WED0?.GetCrystal()));
                ret.Add((WED1 != null ? WED1.OnOverall : DefaultOn, WED1?.GetCrystal()));
                ret.Add((BipedObjects != null || DefaultOn, BipedObjects?.GetCrystal()));
                ret.Add((MovementDataOverrides == null ? DefaultOn : !MovementDataOverrides.GetCrystal().CopyNothing, MovementDataOverrides?.GetCrystal()));
                ret.Add((EquipmentFlags, null));
                ret.Add((EquipmentSlots == null ? DefaultOn : !EquipmentSlots.GetCrystal().CopyNothing, EquipmentSlots?.GetCrystal()));
                ret.Add((UnarmedWeapon, null));
                ret.Add((BaseMovementDefault, null));
                ret.Add((BaseMovementSwimDefault, null));
                ret.Add((BaseMovementFlyDefault, null));
                ret.Add((ChargenAndSkintones != null || DefaultOn, null));
                ret.Add((ArmorRace, null));
                ret.Add((SubgraphTemplateRace, null));
                ret.Add((Subgraphs == null ? DefaultOn : !Subgraphs.GetCrystal().CopyNothing, Subgraphs?.GetCrystal()));
                ret.Add((IdleChatterTimeMin, null));
                ret.Add((IdleChatterTimeMax, null));
                ret.Add((DialogueQuest, null));
                ret.Add((HeadPartsAndBoneModifiers != null || DefaultOn, null));
                ret.Add((MannequinSkinSwaps == null ? DefaultOn : !MannequinSkinSwaps.GetCrystal().CopyNothing, MannequinSkinSwaps?.GetCrystal()));
                ret.Add((PluralName, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Race(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Race(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Race(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Race(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Race(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        protected override Type LinkType => typeof(IRace);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => RaceCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => RaceSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => RaceSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => RaceSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Race CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IRaceInternal>,
        INamed,
        INamedRequired,
        IRaceGetter,
        IRelatable,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>> ActorEffect { get; }
        new IFormLinkNullable<IArmorGetter> Skin { get; set; }
        new FirstPersonFlag? FirstPersonFlags { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new IFormLinkNullable<IBodyPartDataGetter> BodyPartData { get; set; }
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Weight> DefaultWeight { get; set; }
        new Race.Flag Flags { get; set; }
        new Single AccelerationRate { get; set; }
        new Single DecelerationRate { get; set; }
        new Size Size { get; set; }
        new MemorySlice<Byte> DAT2Unknown1 { get; set; }
        new BipedObject ShieldBipedObject { get; set; }
        new BipedObject BeardBipedObject { get; set; }
        new BipedObject BodyBipedObject { get; set; }
        new MemorySlice<Byte> DAT2Unknown2 { get; set; }
        new IFormLink<IExplosionGetter> Explosion { get; set; }
        new IFormLink<IDebrisGetter> Debris { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new Single OrientationLimitsPitch { get; set; }
        new Single OrientationLimitsRoll { get; set; }
        new MemorySlice<Byte> DAT2Unknown3 { get; set; }
        new IGenderedItem<SkeletalModel?>? SkeletalModel { get; set; }
        new ExtendedList<String> MovementTypeNames { get; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new Single FacegenMainClamp { get; set; }
        new Single FacegenFaceClamp { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new IFormLinkNullable<IAimAssistPoseGetter> AimAssistPose { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> ImpactMaterialType { get; set; }
        new SoundReference? WED0 { get; set; }
        new SoundReference? WED1 { get; set; }
        new IDictionary<BipedObject, BipedObjectData> BipedObjects { get; }
        new ExtendedList<MovementDataOverride> MovementDataOverrides { get; }
        new EquipTypeFlag? EquipmentFlags { get; set; }
        new ExtendedList<EquipmentSlot> EquipmentSlots { get; }
        new IFormLinkNullable<IWeaponGetter> UnarmedWeapon { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefault { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementSwimDefault { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementFlyDefault { get; set; }
        new IGenderedItem<ChargenAndSkintones?>? ChargenAndSkintones { get; set; }
        new IFormLinkNullable<IRaceGetter> ArmorRace { get; set; }
        new IFormLinkNullable<IRaceGetter> SubgraphTemplateRace { get; set; }
        new ExtendedList<Subgraph> Subgraphs { get; }
        new Single? IdleChatterTimeMin { get; set; }
        new Single? IdleChatterTimeMax { get; set; }
        new IFormLinkNullable<IQuestGetter> DialogueQuest { get; set; }
        new IGenderedItem<HeadPartsAndBoneModifiers?>? HeadPartsAndBoneModifiers { get; set; }
        new ExtendedList<MannequinSkinSwap> MannequinSkinSwaps { get; }
        new TranslatedString? PluralName { get; set; }
    }

    public partial interface IRaceInternal :
        IStarfieldMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Weight> DefaultWeight { get; set; }
        new IGenderedItem<SkeletalModel?>? SkeletalModel { get; set; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new IDictionary<BipedObject, BipedObjectData> BipedObjects { get; }
        new IGenderedItem<ChargenAndSkintones?>? ChargenAndSkintones { get; set; }
        new IGenderedItem<HeadPartsAndBoneModifiers?>? HeadPartsAndBoneModifiers { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.RACE)]
    public partial interface IRaceGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IRaceGetter>,
        IMapsToGetter<IRaceGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        FirstPersonFlag? FirstPersonFlags { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<IWeightGetter> DefaultWeight { get; }
        Race.Flag Flags { get; }
        Single AccelerationRate { get; }
        Single DecelerationRate { get; }
        Size Size { get; }
        ReadOnlyMemorySlice<Byte> DAT2Unknown1 { get; }
        BipedObject ShieldBipedObject { get; }
        BipedObject BeardBipedObject { get; }
        BipedObject BodyBipedObject { get; }
        ReadOnlyMemorySlice<Byte> DAT2Unknown2 { get; }
        IFormLinkGetter<IExplosionGetter> Explosion { get; }
        IFormLinkGetter<IDebrisGetter> Debris { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        Single OrientationLimitsPitch { get; }
        Single OrientationLimitsRoll { get; }
        ReadOnlyMemorySlice<Byte> DAT2Unknown3 { get; }
        IGenderedItemGetter<ISkeletalModelGetter?>? SkeletalModel { get; }
        IReadOnlyList<String> MovementTypeNames { get; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; }
        Single FacegenMainClamp { get; }
        Single FacegenFaceClamp { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IGenderedItemGetter<IBodyDataGetter?> BodyData { get; }
        IFormLinkNullableGetter<IAimAssistPoseGetter> AimAssistPose { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> ImpactMaterialType { get; }
        ISoundReferenceGetter? WED0 { get; }
        ISoundReferenceGetter? WED1 { get; }
        IReadOnlyDictionary<BipedObject, IBipedObjectDataGetter> BipedObjects { get; }
        IReadOnlyList<IMovementDataOverrideGetter> MovementDataOverrides { get; }
        EquipTypeFlag? EquipmentFlags { get; }
        IReadOnlyList<IEquipmentSlotGetter> EquipmentSlots { get; }
        IFormLinkNullableGetter<IWeaponGetter> UnarmedWeapon { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefault { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementSwimDefault { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementFlyDefault { get; }
        IGenderedItemGetter<IChargenAndSkintonesGetter?>? ChargenAndSkintones { get; }
        IFormLinkNullableGetter<IRaceGetter> ArmorRace { get; }
        IFormLinkNullableGetter<IRaceGetter> SubgraphTemplateRace { get; }
        IReadOnlyList<ISubgraphGetter> Subgraphs { get; }
        Single? IdleChatterTimeMin { get; }
        Single? IdleChatterTimeMax { get; }
        IFormLinkNullableGetter<IQuestGetter> DialogueQuest { get; }
        IGenderedItemGetter<IHeadPartsAndBoneModifiersGetter?>? HeadPartsAndBoneModifiers { get; }
        IReadOnlyList<IMannequinSkinSwapGetter> MannequinSkinSwaps { get; }
        ITranslatedStringGetter? PluralName { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs,
            Race.TranslationMask? equalsMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Description = 9,
        ActorEffect = 10,
        Skin = 11,
        FirstPersonFlags = 12,
        Keywords = 13,
        Properties = 14,
        BodyPartData = 15,
        Height = 16,
        DefaultWeight = 17,
        Flags = 18,
        AccelerationRate = 19,
        DecelerationRate = 20,
        Size = 21,
        DAT2Unknown1 = 22,
        ShieldBipedObject = 23,
        BeardBipedObject = 24,
        BodyBipedObject = 25,
        DAT2Unknown2 = 26,
        Explosion = 27,
        Debris = 28,
        ImpactDataSet = 29,
        OrientationLimitsPitch = 30,
        OrientationLimitsRoll = 31,
        DAT2Unknown3 = 32,
        SkeletalModel = 33,
        MovementTypeNames = 34,
        Voices = 35,
        FacegenMainClamp = 36,
        FacegenFaceClamp = 37,
        Attacks = 38,
        BodyData = 39,
        AimAssistPose = 40,
        ImpactMaterialType = 41,
        WED0 = 42,
        WED1 = 43,
        BipedObjects = 44,
        MovementDataOverrides = 45,
        EquipmentFlags = 46,
        EquipmentSlots = 47,
        UnarmedWeapon = 48,
        BaseMovementDefault = 49,
        BaseMovementSwimDefault = 50,
        BaseMovementFlyDefault = 51,
        ChargenAndSkintones = 52,
        ArmorRace = 53,
        SubgraphTemplateRace = 54,
        Subgraphs = 55,
        IdleChatterTimeMin = 56,
        IdleChatterTimeMax = 57,
        DialogueQuest = 58,
        HeadPartsAndBoneModifiers = 59,
        MannequinSkinSwaps = 60,
        PluralName = 61,
    }
    #endregion

    #region Registration
    internal partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 55;

        public const ushort FieldCount = 62;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.RACE);
            var all = RecordCollection.Factory(
                RecordTypes.RACE,
                RecordTypes.RBPC,
                RecordTypes.FTSM,
                RecordTypes.AHCM,
                RecordTypes.DFTM,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.SPLO,
                RecordTypes.WNAM,
                RecordTypes.BO64,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.GNAM,
                RecordTypes.DAT2,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.ANAM,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.DNAM,
                RecordTypes.MTNM,
                RecordTypes.VTCK,
                RecordTypes.PNAM,
                RecordTypes.UNAM,
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.ATKW,
                RecordTypes.ATKS,
                RecordTypes.ATKT,
                RecordTypes.NAM1,
                RecordTypes.ENAM,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.WED0,
                RecordTypes.WED1,
                RecordTypes.NAME,
                RecordTypes.MTYP,
                RecordTypes.SPED,
                RecordTypes.VNAM,
                RecordTypes.QNAM,
                RecordTypes.ZNAM,
                RecordTypes.UNWP,
                RecordTypes.WKMV,
                RecordTypes.SWMV,
                RecordTypes.FLMV,
                RecordTypes.RPRF,
                RecordTypes.RNAM,
                RecordTypes.SRAC,
                RecordTypes.SADD,
                RecordTypes.SAKD,
                RecordTypes.SGNM,
                RecordTypes.SAPT,
                RecordTypes.STKD,
                RecordTypes.SRAF,
                RecordTypes.PTOP,
                RecordTypes.NTOP,
                RecordTypes.QSTI,
                RecordTypes.MSSS,
                RecordTypes.MSSI,
                RecordTypes.MSSA,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        public static RecordTypeConverter ChargenAndSkintonesFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.RPRM,
                RecordTypes.RPRF));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RaceSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Name = default;
            item.Description.Clear();
            item.ActorEffect.Clear();
            item.Skin.Clear();
            item.FirstPersonFlags = default;
            item.Keywords = null;
            item.Properties = null;
            item.BodyPartData.Clear();
            item.Height.Male = default(Single);
            item.Height.Female = default(Single);
            item.DefaultWeight.Male.Clear();
            item.DefaultWeight.Female.Clear();
            item.Flags = default(Race.Flag);
            item.AccelerationRate = default(Single);
            item.DecelerationRate = default(Single);
            item.Size = default(Size);
            item.DAT2Unknown1 = new byte[12];
            item.ShieldBipedObject = Race.ShieldBipedObjectDefault;
            item.BeardBipedObject = Race.BeardBipedObjectDefault;
            item.BodyBipedObject = Race.BodyBipedObjectDefault;
            item.DAT2Unknown2 = new byte[64];
            item.Explosion.Clear();
            item.Debris.Clear();
            item.ImpactDataSet.Clear();
            item.OrientationLimitsPitch = default(Single);
            item.OrientationLimitsRoll = default(Single);
            item.DAT2Unknown3 = new byte[61];
            item.SkeletalModel = null;
            item.MovementTypeNames.Clear();
            item.Voices.Male = FormLink<IVoiceTypeGetter>.Null;
            item.Voices.Female = FormLink<IVoiceTypeGetter>.Null;
            item.FacegenMainClamp = default(Single);
            item.FacegenFaceClamp = default(Single);
            item.Attacks.Clear();
            item.BodyData.Male = null;
            item.BodyData.Female = null;
            item.AimAssistPose.Clear();
            item.ImpactMaterialType.Clear();
            item.WED0 = null;
            item.WED1 = null;
            item.BipedObjects.Clear();
            item.MovementDataOverrides.Clear();
            item.EquipmentFlags = default;
            item.EquipmentSlots.Clear();
            item.UnarmedWeapon.Clear();
            item.BaseMovementDefault.Clear();
            item.BaseMovementSwimDefault.Clear();
            item.BaseMovementFlyDefault.Clear();
            item.ChargenAndSkintones = null;
            item.ArmorRace.Clear();
            item.SubgraphTemplateRace.Clear();
            item.Subgraphs.Clear();
            item.IdleChatterTimeMin = default;
            item.IdleChatterTimeMax = default;
            item.DialogueQuest.Clear();
            item.HeadPartsAndBoneModifiers = null;
            item.MannequinSkinSwaps.Clear();
            item.PluralName = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.ActorEffect.RemapLinks(mapping);
            obj.Skin.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.BodyPartData.Relink(mapping);
            obj.Explosion.Relink(mapping);
            obj.Debris.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.SkeletalModel?.RemapLinks(mapping);
            obj.Voices.RemapLinks(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.BodyData.RemapLinks(mapping);
            obj.AimAssistPose.Relink(mapping);
            obj.ImpactMaterialType.Relink(mapping);
            obj.WED0?.RemapLinks(mapping);
            obj.WED1?.RemapLinks(mapping);
            obj.BipedObjects?.RemapLinks(mapping);
            obj.MovementDataOverrides.RemapLinks(mapping);
            obj.EquipmentSlots.RemapLinks(mapping);
            obj.UnarmedWeapon.Relink(mapping);
            obj.BaseMovementDefault.Relink(mapping);
            obj.BaseMovementSwimDefault.Relink(mapping);
            obj.BaseMovementFlyDefault.Relink(mapping);
            obj.ChargenAndSkintones?.RemapLinks(mapping);
            obj.ArmorRace.Relink(mapping);
            obj.SubgraphTemplateRace.Relink(mapping);
            obj.Subgraphs.RemapLinks(mapping);
            obj.DialogueQuest.Relink(mapping);
            obj.HeadPartsAndBoneModifiers?.RemapLinks(mapping);
            obj.MannequinSkinSwaps.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IRace obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IRace obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.SkeletalModel?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.BodyData.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class RaceCommon : StarfieldMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = item.Skin.Equals(rhs.Skin);
            ret.FirstPersonFlags = item.FirstPersonFlags == rhs.FirstPersonFlags;
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyPartData = item.BodyPartData.Equals(rhs.BodyPartData);
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.DefaultWeight = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultWeight,
                rhs: rhs.DefaultWeight,
                maskGetter: (l, r, i) => l.GetEqualsMask(r, i),
                include: include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AccelerationRate = item.AccelerationRate.EqualsWithin(rhs.AccelerationRate);
            ret.DecelerationRate = item.DecelerationRate.EqualsWithin(rhs.DecelerationRate);
            ret.Size = item.Size == rhs.Size;
            ret.DAT2Unknown1 = MemoryExtensions.SequenceEqual(item.DAT2Unknown1.Span, rhs.DAT2Unknown1.Span);
            ret.ShieldBipedObject = item.ShieldBipedObject == rhs.ShieldBipedObject;
            ret.BeardBipedObject = item.BeardBipedObject == rhs.BeardBipedObject;
            ret.BodyBipedObject = item.BodyBipedObject == rhs.BodyBipedObject;
            ret.DAT2Unknown2 = MemoryExtensions.SequenceEqual(item.DAT2Unknown2.Span, rhs.DAT2Unknown2.Span);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.Debris = item.Debris.Equals(rhs.Debris);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.OrientationLimitsPitch = item.OrientationLimitsPitch.EqualsWithin(rhs.OrientationLimitsPitch);
            ret.OrientationLimitsRoll = item.OrientationLimitsRoll.EqualsWithin(rhs.OrientationLimitsRoll);
            ret.DAT2Unknown3 = MemoryExtensions.SequenceEqual(item.DAT2Unknown3.Span, rhs.DAT2Unknown3.Span);
            ret.SkeletalModel = GenderedItem.EqualityMaskHelper(
                lhs: item.SkeletalModel,
                rhs: rhs.SkeletalModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MovementTypeNames = item.MovementTypeNames.CollectionEqualsHelper(
                rhs.MovementTypeNames,
                (l, r) => string.Equals(l, r),
                include);
            ret.Voices = new GenderedItem<bool>(
                male: object.Equals(item.Voices.Male, rhs.Voices.Male),
                female: object.Equals(item.Voices.Female, rhs.Voices.Female));
            ret.FacegenMainClamp = item.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp);
            ret.FacegenFaceClamp = item.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.AimAssistPose = item.AimAssistPose.Equals(rhs.AimAssistPose);
            ret.ImpactMaterialType = item.ImpactMaterialType.Equals(rhs.ImpactMaterialType);
            ret.WED0 = EqualsMaskHelper.EqualsHelper(
                item.WED0,
                rhs.WED0,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WED1 = EqualsMaskHelper.EqualsHelper(
                item.WED1,
                rhs.WED1,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BipedObjects = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.BipedObjects,
                rhs: rhs.BipedObjects,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
            ret.MovementDataOverrides = item.MovementDataOverrides.CollectionEqualsHelper(
                rhs.MovementDataOverrides,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EquipmentFlags = item.EquipmentFlags == rhs.EquipmentFlags;
            ret.EquipmentSlots = item.EquipmentSlots.CollectionEqualsHelper(
                rhs.EquipmentSlots,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnarmedWeapon = item.UnarmedWeapon.Equals(rhs.UnarmedWeapon);
            ret.BaseMovementDefault = item.BaseMovementDefault.Equals(rhs.BaseMovementDefault);
            ret.BaseMovementSwimDefault = item.BaseMovementSwimDefault.Equals(rhs.BaseMovementSwimDefault);
            ret.BaseMovementFlyDefault = item.BaseMovementFlyDefault.Equals(rhs.BaseMovementFlyDefault);
            ret.ChargenAndSkintones = GenderedItem.EqualityMaskHelper(
                lhs: item.ChargenAndSkintones,
                rhs: rhs.ChargenAndSkintones,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.ArmorRace = item.ArmorRace.Equals(rhs.ArmorRace);
            ret.SubgraphTemplateRace = item.SubgraphTemplateRace.Equals(rhs.SubgraphTemplateRace);
            ret.Subgraphs = item.Subgraphs.CollectionEqualsHelper(
                rhs.Subgraphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.IdleChatterTimeMin = item.IdleChatterTimeMin.EqualsWithin(rhs.IdleChatterTimeMin);
            ret.IdleChatterTimeMax = item.IdleChatterTimeMax.EqualsWithin(rhs.IdleChatterTimeMax);
            ret.DialogueQuest = item.DialogueQuest.Equals(rhs.DialogueQuest);
            ret.HeadPartsAndBoneModifiers = GenderedItem.EqualityMaskHelper(
                lhs: item.HeadPartsAndBoneModifiers,
                rhs: rhs.HeadPartsAndBoneModifiers,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MannequinSkinSwaps = item.MannequinSkinSwaps.CollectionEqualsHelper(
                rhs.MannequinSkinSwaps,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PluralName = object.Equals(item.PluralName, rhs.PluralName);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Race =>");
            }
            else
            {
                sb.AppendLine($"{name} (Race) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            StructuredStringBuilder sb,
            Race.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if (printMask?.ActorEffect?.Overall ?? true)
            {
                sb.AppendLine("ActorEffect =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ActorEffect)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Skin ?? true)
            {
                sb.AppendItem(item.Skin.FormKeyNullable, "Skin");
            }
            if ((printMask?.FirstPersonFlags ?? true)
                && item.FirstPersonFlags is {} FirstPersonFlagsItem)
            {
                sb.AppendItem(FirstPersonFlagsItem, "FirstPersonFlags");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.BodyPartData ?? true)
            {
                sb.AppendItem(item.BodyPartData.FormKeyNullable, "BodyPartData");
            }
            if (true)
            {
                item.Height.Print(sb, "Height");
            }
            if (true)
            {
                item.DefaultWeight.Print(sb, "DefaultWeight");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AccelerationRate ?? true)
            {
                sb.AppendItem(item.AccelerationRate, "AccelerationRate");
            }
            if (printMask?.DecelerationRate ?? true)
            {
                sb.AppendItem(item.DecelerationRate, "DecelerationRate");
            }
            if (printMask?.Size ?? true)
            {
                sb.AppendItem(item.Size, "Size");
            }
            if (printMask?.DAT2Unknown1 ?? true)
            {
                sb.AppendLine($"DAT2Unknown1 => {SpanExt.ToHexString(item.DAT2Unknown1)}");
            }
            if (printMask?.ShieldBipedObject ?? true)
            {
                sb.AppendItem(item.ShieldBipedObject, "ShieldBipedObject");
            }
            if (printMask?.BeardBipedObject ?? true)
            {
                sb.AppendItem(item.BeardBipedObject, "BeardBipedObject");
            }
            if (printMask?.BodyBipedObject ?? true)
            {
                sb.AppendItem(item.BodyBipedObject, "BodyBipedObject");
            }
            if (printMask?.DAT2Unknown2 ?? true)
            {
                sb.AppendLine($"DAT2Unknown2 => {SpanExt.ToHexString(item.DAT2Unknown2)}");
            }
            if (printMask?.Explosion ?? true)
            {
                sb.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.Debris ?? true)
            {
                sb.AppendItem(item.Debris.FormKey, "Debris");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.OrientationLimitsPitch ?? true)
            {
                sb.AppendItem(item.OrientationLimitsPitch, "OrientationLimitsPitch");
            }
            if (printMask?.OrientationLimitsRoll ?? true)
            {
                sb.AppendItem(item.OrientationLimitsRoll, "OrientationLimitsRoll");
            }
            if (printMask?.DAT2Unknown3 ?? true)
            {
                sb.AppendLine($"DAT2Unknown3 => {SpanExt.ToHexString(item.DAT2Unknown3)}");
            }
            if ((printMask?.SkeletalModel?.Overall ?? true)
                && item.SkeletalModel is {} SkeletalModelItem)
            {
                SkeletalModelItem?.Print(sb, "SkeletalModel");
            }
            if (printMask?.MovementTypeNames?.Overall ?? true)
            {
                sb.AppendLine("MovementTypeNames =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementTypeNames)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (true)
            {
                item.Voices.Print(sb, "Voices");
            }
            if (printMask?.FacegenMainClamp ?? true)
            {
                sb.AppendItem(item.FacegenMainClamp, "FacegenMainClamp");
            }
            if (printMask?.FacegenFaceClamp ?? true)
            {
                sb.AppendItem(item.FacegenFaceClamp, "FacegenFaceClamp");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                sb.AppendLine("Attacks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attacks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (true)
            {
                item.BodyData.Print(sb, "BodyData");
            }
            if (printMask?.AimAssistPose ?? true)
            {
                sb.AppendItem(item.AimAssistPose.FormKeyNullable, "AimAssistPose");
            }
            if (printMask?.ImpactMaterialType ?? true)
            {
                sb.AppendItem(item.ImpactMaterialType.FormKeyNullable, "ImpactMaterialType");
            }
            if ((printMask?.WED0?.Overall ?? true)
                && item.WED0 is {} WED0Item)
            {
                WED0Item?.Print(sb, "WED0");
            }
            if ((printMask?.WED1?.Overall ?? true)
                && item.WED1 is {} WED1Item)
            {
                WED1Item?.Print(sb, "WED1");
            }
            if ((printMask?.BipedObjects?.Overall ?? true)
                && item.BipedObjects is {} BipedObjectsItem)
            {
                sb.AppendLine("BipedObjects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BipedObjectsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            subItem.Value?.Print(sb, "Value");
                        }
                    }
                }
            }
            if (printMask?.MovementDataOverrides?.Overall ?? true)
            {
                sb.AppendLine("MovementDataOverrides =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementDataOverrides)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EquipmentFlags ?? true)
                && item.EquipmentFlags is {} EquipmentFlagsItem)
            {
                sb.AppendItem(EquipmentFlagsItem, "EquipmentFlags");
            }
            if (printMask?.EquipmentSlots?.Overall ?? true)
            {
                sb.AppendLine("EquipmentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.EquipmentSlots)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.UnarmedWeapon ?? true)
            {
                sb.AppendItem(item.UnarmedWeapon.FormKeyNullable, "UnarmedWeapon");
            }
            if (printMask?.BaseMovementDefault ?? true)
            {
                sb.AppendItem(item.BaseMovementDefault.FormKeyNullable, "BaseMovementDefault");
            }
            if (printMask?.BaseMovementSwimDefault ?? true)
            {
                sb.AppendItem(item.BaseMovementSwimDefault.FormKeyNullable, "BaseMovementSwimDefault");
            }
            if (printMask?.BaseMovementFlyDefault ?? true)
            {
                sb.AppendItem(item.BaseMovementFlyDefault.FormKeyNullable, "BaseMovementFlyDefault");
            }
            if ((printMask?.ChargenAndSkintones?.Overall ?? true)
                && item.ChargenAndSkintones is {} ChargenAndSkintonesItem)
            {
                ChargenAndSkintonesItem?.Print(sb, "ChargenAndSkintones");
            }
            if (printMask?.ArmorRace ?? true)
            {
                sb.AppendItem(item.ArmorRace.FormKeyNullable, "ArmorRace");
            }
            if (printMask?.SubgraphTemplateRace ?? true)
            {
                sb.AppendItem(item.SubgraphTemplateRace.FormKeyNullable, "SubgraphTemplateRace");
            }
            if (printMask?.Subgraphs?.Overall ?? true)
            {
                sb.AppendLine("Subgraphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Subgraphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.IdleChatterTimeMin ?? true)
                && item.IdleChatterTimeMin is {} IdleChatterTimeMinItem)
            {
                sb.AppendItem(IdleChatterTimeMinItem, "IdleChatterTimeMin");
            }
            if ((printMask?.IdleChatterTimeMax ?? true)
                && item.IdleChatterTimeMax is {} IdleChatterTimeMaxItem)
            {
                sb.AppendItem(IdleChatterTimeMaxItem, "IdleChatterTimeMax");
            }
            if (printMask?.DialogueQuest ?? true)
            {
                sb.AppendItem(item.DialogueQuest.FormKeyNullable, "DialogueQuest");
            }
            if ((printMask?.HeadPartsAndBoneModifiers?.Overall ?? true)
                && item.HeadPartsAndBoneModifiers is {} HeadPartsAndBoneModifiersItem)
            {
                HeadPartsAndBoneModifiersItem?.Print(sb, "HeadPartsAndBoneModifiers");
            }
            if (printMask?.MannequinSkinSwaps?.Overall ?? true)
            {
                sb.AppendLine("MannequinSkinSwaps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MannequinSkinSwaps)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.PluralName ?? true)
                && item.PluralName is {} PluralNameItem)
            {
                sb.AppendItem(PluralNameItem, "PluralName");
            }
        }
        
        public static Race_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                if (!lhs.Skin.Equals(rhs.Skin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FirstPersonFlags) ?? true))
            {
                if (lhs.FirstPersonFlags != rhs.FirstPersonFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Height) ?? true))
            {
                if (!Equals(lhs.Height, rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultWeight) ?? true))
            {
                if (!Equals(lhs.DefaultWeight, rhs.DefaultWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                if (!lhs.AccelerationRate.EqualsWithin(rhs.AccelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                if (!lhs.DecelerationRate.EqualsWithin(rhs.DecelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown1) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DAT2Unknown1.Span, rhs.DAT2Unknown1.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                if (lhs.ShieldBipedObject != rhs.ShieldBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BeardBipedObject) ?? true))
            {
                if (lhs.BeardBipedObject != rhs.BeardBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                if (lhs.BodyBipedObject != rhs.BodyBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DAT2Unknown2.Span, rhs.DAT2Unknown2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Explosion) ?? true))
            {
                if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Debris) ?? true))
            {
                if (!lhs.Debris.Equals(rhs.Debris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsPitch) ?? true))
            {
                if (!lhs.OrientationLimitsPitch.EqualsWithin(rhs.OrientationLimitsPitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsRoll) ?? true))
            {
                if (!lhs.OrientationLimitsRoll.EqualsWithin(rhs.OrientationLimitsRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown3) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DAT2Unknown3.Span, rhs.DAT2Unknown3.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkeletalModel) ?? true))
            {
                if (!Equals(lhs.SkeletalModel, rhs.SkeletalModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                if (!lhs.MovementTypeNames.SequenceEqualNullable(rhs.MovementTypeNames)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                if (!Equals(lhs.Voices, rhs.Voices)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                if (!lhs.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                if (!lhs.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                if (!lhs.Attacks.SequenceEqual(rhs.Attacks, (l, r) => ((AttackCommon)((IAttackGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Attacks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AimAssistPose) ?? true))
            {
                if (!lhs.AimAssistPose.Equals(rhs.AimAssistPose)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactMaterialType) ?? true))
            {
                if (!lhs.ImpactMaterialType.Equals(rhs.ImpactMaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.WED0) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED0, rhs.WED0, out var lhsWED0, out var rhsWED0, out var isWED0Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED0).CommonInstance()!).Equals(lhsWED0, rhsWED0, equalsMask?.GetSubCrystal((int)Race_FieldIndex.WED0))) return false;
                }
                else if (!isWED0Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.WED1) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED1, rhs.WED1, out var lhsWED1, out var rhsWED1, out var isWED1Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED1).CommonInstance()!).Equals(lhsWED1, rhsWED1, equalsMask?.GetSubCrystal((int)Race_FieldIndex.WED1))) return false;
                }
                else if (!isWED1Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjects) ?? true))
            {
                if (!lhs.BipedObjects.SequenceEqualNullable(rhs.BipedObjects)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementDataOverrides) ?? true))
            {
                if (!lhs.MovementDataOverrides.SequenceEqual(rhs.MovementDataOverrides, (l, r) => ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MovementDataOverrides)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                if (lhs.EquipmentFlags != rhs.EquipmentFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                if (!lhs.EquipmentSlots.SequenceEqual(rhs.EquipmentSlots, (l, r) => ((EquipmentSlotCommon)((IEquipmentSlotGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.EquipmentSlots)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedWeapon) ?? true))
            {
                if (!lhs.UnarmedWeapon.Equals(rhs.UnarmedWeapon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefault) ?? true))
            {
                if (!lhs.BaseMovementDefault.Equals(rhs.BaseMovementDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementSwimDefault) ?? true))
            {
                if (!lhs.BaseMovementSwimDefault.Equals(rhs.BaseMovementSwimDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementFlyDefault) ?? true))
            {
                if (!lhs.BaseMovementFlyDefault.Equals(rhs.BaseMovementFlyDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ChargenAndSkintones) ?? true))
            {
                if (!Equals(lhs.ChargenAndSkintones, rhs.ChargenAndSkintones)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                if (!lhs.ArmorRace.Equals(rhs.ArmorRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphTemplateRace) ?? true))
            {
                if (!lhs.SubgraphTemplateRace.Equals(rhs.SubgraphTemplateRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Subgraphs) ?? true))
            {
                if (!lhs.Subgraphs.SequenceEqual(rhs.Subgraphs, (l, r) => ((SubgraphCommon)((ISubgraphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Subgraphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMin) ?? true))
            {
                if (!lhs.IdleChatterTimeMin.EqualsWithin(rhs.IdleChatterTimeMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMax) ?? true))
            {
                if (!lhs.IdleChatterTimeMax.EqualsWithin(rhs.IdleChatterTimeMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DialogueQuest) ?? true))
            {
                if (!lhs.DialogueQuest.Equals(rhs.DialogueQuest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HeadPartsAndBoneModifiers) ?? true))
            {
                if (!Equals(lhs.HeadPartsAndBoneModifiers, rhs.HeadPartsAndBoneModifiers)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MannequinSkinSwaps) ?? true))
            {
                if (!lhs.MannequinSkinSwaps.SequenceEqual(rhs.MannequinSkinSwaps, (l, r) => ((MannequinSkinSwapCommon)((IMannequinSkinSwapGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MannequinSkinSwaps)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.PluralName) ?? true))
            {
                if (!object.Equals(lhs.PluralName, rhs.PluralName)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ActorEffect);
            hash.Add(item.Skin);
            if (item.FirstPersonFlags is {} FirstPersonFlagsitem)
            {
                hash.Add(FirstPersonFlagsitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            hash.Add(item.BodyPartData);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.DefaultWeight.Male, item.DefaultWeight.Female));
            hash.Add(item.Flags);
            hash.Add(item.AccelerationRate);
            hash.Add(item.DecelerationRate);
            hash.Add(item.Size);
            hash.Add(item.DAT2Unknown1);
            hash.Add(item.ShieldBipedObject);
            hash.Add(item.BeardBipedObject);
            hash.Add(item.BodyBipedObject);
            hash.Add(item.DAT2Unknown2);
            hash.Add(item.Explosion);
            hash.Add(item.Debris);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.OrientationLimitsPitch);
            hash.Add(item.OrientationLimitsRoll);
            hash.Add(item.DAT2Unknown3);
            if (item.SkeletalModel is {} SkeletalModelitem)
            {
                hash.Add(HashCode.Combine(SkeletalModelitem.Male, SkeletalModelitem.Female));
            }
            hash.Add(item.MovementTypeNames);
            hash.Add(HashCode.Combine(item.Voices.Male, item.Voices.Female));
            hash.Add(item.FacegenMainClamp);
            hash.Add(item.FacegenFaceClamp);
            hash.Add(item.Attacks);
            hash.Add(HashCode.Combine(item.BodyData.Male, item.BodyData.Female));
            hash.Add(item.AimAssistPose);
            hash.Add(item.ImpactMaterialType);
            if (item.WED0 is {} WED0item)
            {
                hash.Add(WED0item);
            }
            if (item.WED1 is {} WED1item)
            {
                hash.Add(WED1item);
            }
            hash.Add(item.BipedObjects);
            hash.Add(item.MovementDataOverrides);
            if (item.EquipmentFlags is {} EquipmentFlagsitem)
            {
                hash.Add(EquipmentFlagsitem);
            }
            hash.Add(item.EquipmentSlots);
            hash.Add(item.UnarmedWeapon);
            hash.Add(item.BaseMovementDefault);
            hash.Add(item.BaseMovementSwimDefault);
            hash.Add(item.BaseMovementFlyDefault);
            if (item.ChargenAndSkintones is {} ChargenAndSkintonesitem)
            {
                hash.Add(HashCode.Combine(ChargenAndSkintonesitem.Male, ChargenAndSkintonesitem.Female));
            }
            hash.Add(item.ArmorRace);
            hash.Add(item.SubgraphTemplateRace);
            hash.Add(item.Subgraphs);
            if (item.IdleChatterTimeMin is {} IdleChatterTimeMinitem)
            {
                hash.Add(IdleChatterTimeMinitem);
            }
            if (item.IdleChatterTimeMax is {} IdleChatterTimeMaxitem)
            {
                hash.Add(IdleChatterTimeMaxitem);
            }
            hash.Add(item.DialogueQuest);
            if (item.HeadPartsAndBoneModifiers is {} HeadPartsAndBoneModifiersitem)
            {
                hash.Add(HashCode.Combine(HeadPartsAndBoneModifiersitem.Male, HeadPartsAndBoneModifiersitem.Female));
            }
            hash.Add(item.MannequinSkinSwaps);
            if (item.PluralName is {} PluralNameitem)
            {
                hash.Add(PluralNameitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.ActorEffect)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Skin, out var SkinInfo))
            {
                yield return SkinInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.BodyPartData, out var BodyPartDataInfo))
            {
                yield return BodyPartDataInfo;
            }
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.Debris);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Voices)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.AimAssistPose, out var AimAssistPoseInfo))
            {
                yield return AimAssistPoseInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ImpactMaterialType, out var ImpactMaterialTypeInfo))
            {
                yield return ImpactMaterialTypeInfo;
            }
            if (obj.WED0 is {} WED0Items)
            {
                foreach (var item in WED0Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.WED1 is {} WED1Items)
            {
                foreach (var item in WED1Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.BipedObjects.Values.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.MovementDataOverrides.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.EquipmentSlots.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.UnarmedWeapon, out var UnarmedWeaponInfo))
            {
                yield return UnarmedWeaponInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefault, out var BaseMovementDefaultInfo))
            {
                yield return BaseMovementDefaultInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementSwimDefault, out var BaseMovementSwimDefaultInfo))
            {
                yield return BaseMovementSwimDefaultInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementFlyDefault, out var BaseMovementFlyDefaultInfo))
            {
                yield return BaseMovementFlyDefaultInfo;
            }
            if (obj.ChargenAndSkintones is {} ChargenAndSkintonesItem)
            {
                foreach (var item in ChargenAndSkintonesItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.ArmorRace, out var ArmorRaceInfo))
            {
                yield return ArmorRaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SubgraphTemplateRace, out var SubgraphTemplateRaceInfo))
            {
                yield return SubgraphTemplateRaceInfo;
            }
            foreach (var item in obj.Subgraphs.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DialogueQuest, out var DialogueQuestInfo))
            {
                yield return DialogueQuestInfo;
            }
            if (obj.HeadPartsAndBoneModifiers is {} HeadPartsAndBoneModifiersItem)
            {
                foreach (var item in HeadPartsAndBoneModifiersItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.MannequinSkinSwaps.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IRaceGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Race Duplicate(
            IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Race(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class RaceSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    item.ActorEffect.SetTo(
                        rhs.ActorEffect
                            .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin.SetTo(rhs.Skin.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FirstPersonFlags) ?? true))
            {
                item.FirstPersonFlags = rhs.FirstPersonFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData.SetTo(rhs.BodyPartData.FormKeyNullable);
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.DefaultWeight = new GenderedItem<Weight>(
                male: rhs.DefaultWeight.Male.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.DefaultWeight.Female.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                item.AccelerationRate = rhs.AccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                item.DecelerationRate = rhs.DecelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown1) ?? true))
            {
                item.DAT2Unknown1 = rhs.DAT2Unknown1.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                item.ShieldBipedObject = rhs.ShieldBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BeardBipedObject) ?? true))
            {
                item.BeardBipedObject = rhs.BeardBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                item.BodyBipedObject = rhs.BodyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown2) ?? true))
            {
                item.DAT2Unknown2 = rhs.DAT2Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Explosion) ?? true))
            {
                item.Explosion.SetTo(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Debris) ?? true))
            {
                item.Debris.SetTo(rhs.Debris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsPitch) ?? true))
            {
                item.OrientationLimitsPitch = rhs.OrientationLimitsPitch;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsRoll) ?? true))
            {
                item.OrientationLimitsRoll = rhs.OrientationLimitsRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DAT2Unknown3) ?? true))
            {
                item.DAT2Unknown3 = rhs.DAT2Unknown3.ToArray();
            }
            if (rhs.SkeletalModel is not {} rhsSkeletalModelitem)
            {
                item.SkeletalModel = null;
            }
            else
            {
                item.SkeletalModel = new GenderedItem<SkeletalModel?>(
                    male: rhsSkeletalModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsSkeletalModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                try
                {
                    item.MovementTypeNames.SetTo(rhs.MovementTypeNames);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Voices = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                male: new FormLink<IVoiceTypeGetter>(rhs.Voices.Male.FormKey),
                female: new FormLink<IVoiceTypeGetter>(rhs.Voices.Female.FormKey));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                item.FacegenMainClamp = rhs.FacegenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                item.FacegenFaceClamp = rhs.FacegenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.BodyData = new GenderedItem<BodyData?>(
                male: rhs.BodyData.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BodyData.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AimAssistPose) ?? true))
            {
                item.AimAssistPose.SetTo(rhs.AimAssistPose.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactMaterialType) ?? true))
            {
                item.ImpactMaterialType.SetTo(rhs.ImpactMaterialType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.WED0) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.WED0);
                try
                {
                    if(rhs.WED0 is {} rhsWED0)
                    {
                        item.WED0 = rhsWED0.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.WED0));
                    }
                    else
                    {
                        item.WED0 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.WED1) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.WED1);
                try
                {
                    if(rhs.WED1 is {} rhsWED1)
                    {
                        item.WED1 = rhsWED1.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.WED1));
                    }
                    else
                    {
                        item.WED1 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjects) ?? true))
            {
                item.BipedObjects.SetTo(
                    rhs.BipedObjects
                        .Select((r) =>
                        {
                            var value = r.Value.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                            return new KeyValuePair<BipedObject, BipedObjectData>(r.Key, value);
                        }));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementDataOverrides) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementDataOverrides);
                try
                {
                    item.MovementDataOverrides.SetTo(
                        rhs.MovementDataOverrides
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                item.EquipmentFlags = rhs.EquipmentFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.EquipmentSlots);
                try
                {
                    item.EquipmentSlots.SetTo(
                        rhs.EquipmentSlots
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedWeapon) ?? true))
            {
                item.UnarmedWeapon.SetTo(rhs.UnarmedWeapon.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefault) ?? true))
            {
                item.BaseMovementDefault.SetTo(rhs.BaseMovementDefault.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementSwimDefault) ?? true))
            {
                item.BaseMovementSwimDefault.SetTo(rhs.BaseMovementSwimDefault.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementFlyDefault) ?? true))
            {
                item.BaseMovementFlyDefault.SetTo(rhs.BaseMovementFlyDefault.FormKeyNullable);
            }
            if (rhs.ChargenAndSkintones is not {} rhsChargenAndSkintonesitem)
            {
                item.ChargenAndSkintones = null;
            }
            else
            {
                item.ChargenAndSkintones = new GenderedItem<ChargenAndSkintones?>(
                    male: rhsChargenAndSkintonesitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsChargenAndSkintonesitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                item.ArmorRace.SetTo(rhs.ArmorRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphTemplateRace) ?? true))
            {
                item.SubgraphTemplateRace.SetTo(rhs.SubgraphTemplateRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Subgraphs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Subgraphs);
                try
                {
                    item.Subgraphs.SetTo(
                        rhs.Subgraphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMin) ?? true))
            {
                item.IdleChatterTimeMin = rhs.IdleChatterTimeMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMax) ?? true))
            {
                item.IdleChatterTimeMax = rhs.IdleChatterTimeMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DialogueQuest) ?? true))
            {
                item.DialogueQuest.SetTo(rhs.DialogueQuest.FormKeyNullable);
            }
            if (rhs.HeadPartsAndBoneModifiers is not {} rhsHeadPartsAndBoneModifiersitem)
            {
                item.HeadPartsAndBoneModifiers = null;
            }
            else
            {
                item.HeadPartsAndBoneModifiers = new GenderedItem<HeadPartsAndBoneModifiers?>(
                    male: rhsHeadPartsAndBoneModifiersitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsHeadPartsAndBoneModifiersitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MannequinSkinSwaps) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MannequinSkinSwaps);
                try
                {
                    item.MannequinSkinSwaps.SetTo(
                        rhs.MannequinSkinSwaps
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.PluralName) ?? true))
            {
                item.PluralName = rhs.PluralName?.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class RaceBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly RaceBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.ActorEffect,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.SPLO));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            EnumBinaryTranslation<FirstPersonFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.FirstPersonFlags,
                length: 8,
                header: translationParams.ConvertToCustom(RecordTypes.BO64));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DAT2)))
            {
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Height,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.DefaultWeight,
                    transl: (MutagenWriter subWriter, IWeightGetter subItem) =>
                    {
                        var Item = subItem;
                        ((WeightBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    });
                EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 8);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DecelerationRate);
                EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Size,
                    length: 4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DAT2Unknown1);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ShieldBipedObject,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BeardBipedObject,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BodyBipedObject,
                    length: 4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DAT2Unknown2);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Debris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OrientationLimitsPitch);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OrientationLimitsRoll);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DAT2Unknown3);
            }
            RaceBinaryWriteTranslation.WriteBinaryMNAMLogic(
                writer: writer,
                item: item);
            RaceBinaryWriteTranslation.WriteBinaryFNAMLogic(
                writer: writer,
                item: item);
            RaceBinaryWriteTranslation.WriteBinarySkeletalModel(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.MovementTypeNames,
                transl: (MutagenWriter subWriter, String subItem) =>
                {
                    StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.MTNM),
                        binaryType: StringBinaryType.Plain);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: RecordTypes.VTCK,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IVoiceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenMainClamp,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenFaceClamp,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: RecordTypes.NAM1,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AimAssistPose,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            RaceBinaryWriteTranslation.WriteBinaryNAM3(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactMaterialType,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            if (item.WED0 is {} WED0Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED0))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED0Item).BinaryWriteTranslator).Write(
                        item: WED0Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.WED1 is {} WED1Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED1))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED1Item).BinaryWriteTranslator).Write(
                        item: WED1Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            RaceBinaryWriteTranslation.WriteBinaryBipedObjects(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMovementDataOverrideGetter>.Instance.Write(
                writer: writer,
                items: item.MovementDataOverrides,
                transl: (MutagenWriter subWriter, IMovementDataOverrideGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MovementDataOverrideBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.EquipmentFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEquipmentSlotGetter>.Instance.Write(
                writer: writer,
                items: item.EquipmentSlots,
                transl: (MutagenWriter subWriter, IEquipmentSlotGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EquipmentSlotBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnarmedWeapon,
                header: translationParams.ConvertToCustom(RecordTypes.UNWP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefault,
                header: translationParams.ConvertToCustom(RecordTypes.WKMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementSwimDefault,
                header: translationParams.ConvertToCustom(RecordTypes.SWMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementFlyDefault,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.ChargenAndSkintones,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter,
                transl: (MutagenWriter subWriter, IChargenAndSkintonesGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ChargenAndSkintonesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArmorRace,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SubgraphTemplateRace,
                header: translationParams.ConvertToCustom(RecordTypes.SRAC));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISubgraphGetter>.Instance.Write(
                writer: writer,
                items: item.Subgraphs,
                transl: (MutagenWriter subWriter, ISubgraphGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SubgraphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.IdleChatterTimeMin,
                header: translationParams.ConvertToCustom(RecordTypes.PTOP));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.IdleChatterTimeMax,
                header: translationParams.ConvertToCustom(RecordTypes.NTOP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DialogueQuest,
                header: translationParams.ConvertToCustom(RecordTypes.QSTI));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.HeadPartsAndBoneModifiers,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IHeadPartsAndBoneModifiersGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((HeadPartsAndBoneModifiersBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMannequinSkinSwapGetter>.Instance.Write(
                writer: writer,
                items: item.MannequinSkinSwaps,
                transl: (MutagenWriter subWriter, IMannequinSkinSwapGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MannequinSkinSwapBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PluralName,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
        }

        public static partial void WriteBinaryMNAMLogicCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryMNAMLogic(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryMNAMLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFNAMLogicCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFNAMLogic(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFNAMLogicCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySkeletalModelCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinarySkeletalModel(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinarySkeletalModelCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryNAM3Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryNAM3(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryNAM3Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryBipedObjectsCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBipedObjects(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBipedObjectsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.RACE,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RaceBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static ParseResult FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                {
                    item.ActorEffect.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skin.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BO64:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FirstPersonFlags = EnumBinaryTranslation<FirstPersonFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Race_FieldIndex.FirstPersonFlags;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BodyPartData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.DAT2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 8) return null;
                    item.Height = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 24) return null;
                    item.DefaultWeight = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<Weight>(
                        frame: frame,
                        transl: Weight.TryCreateFromBinary);
                    if (dataFrame.Remaining < 8) return null;
                    item.Flags = EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 8);
                    if (dataFrame.Remaining < 4) return null;
                    item.AccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DecelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Size = EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.DAT2Unknown1 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(12));
                    if (dataFrame.Remaining < 4) return null;
                    item.ShieldBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.BeardBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.BodyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.DAT2Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(64));
                    if (dataFrame.Remaining < 4) return null;
                    item.Explosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Debris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OrientationLimitsPitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OrientationLimitsRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    item.DAT2Unknown3 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(61));
                    return (int)Race_FieldIndex.DAT2Unknown3;
                }
                case RecordTypeInts.MNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DAT2Unknown3)
                    {
                        return RaceBinaryCreateTranslation.FillBinaryMNAMLogicCustom(
                            frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                            item: item,
                            lastParsed: lastParsed);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.BaseMovementFlyDefault)
                    {
                        item.ChargenAndSkintones = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ChargenAndSkintones>(
                            frame: frame,
                            maleMarker: RecordTypes.MNAM,
                            femaleMarker: RecordTypes.FNAM,
                            femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter,
                            transl: ChargenAndSkintones.TryCreateFromBinary);
                        return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DialogueQuest)
                    {
                        item.HeadPartsAndBoneModifiers = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<HeadPartsAndBoneModifiers>(
                            frame: frame,
                            maleMarker: RecordTypes.MNAM,
                            femaleMarker: RecordTypes.FNAM,
                            transl: HeadPartsAndBoneModifiers.TryCreateFromBinary);
                        return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                return RaceBinaryCreateTranslation.FillBinaryMNAMLogicCustom(
                                    frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                                    item: item,
                                    lastParsed: lastParsed);
                            case 1:
                                item.ChargenAndSkintones = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ChargenAndSkintones>(
                                    frame: frame,
                                    maleMarker: RecordTypes.MNAM,
                                    femaleMarker: RecordTypes.FNAM,
                                    femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter,
                                    transl: ChargenAndSkintones.TryCreateFromBinary);
                                return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, nextRecordType);
                            case 2:
                                item.HeadPartsAndBoneModifiers = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<HeadPartsAndBoneModifiers>(
                                    frame: frame,
                                    maleMarker: RecordTypes.MNAM,
                                    femaleMarker: RecordTypes.FNAM,
                                    transl: HeadPartsAndBoneModifiers.TryCreateFromBinary);
                                return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DAT2Unknown3)
                    {
                        return RaceBinaryCreateTranslation.FillBinaryFNAMLogicCustom(
                            frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                            item: item,
                            lastParsed: lastParsed);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.BaseMovementFlyDefault)
                    {
                        item.ChargenAndSkintones = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ChargenAndSkintones>(
                            frame: frame,
                            maleMarker: RecordTypes.MNAM,
                            femaleMarker: RecordTypes.FNAM,
                            femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter,
                            transl: ChargenAndSkintones.TryCreateFromBinary);
                        return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DialogueQuest)
                    {
                        item.HeadPartsAndBoneModifiers = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<HeadPartsAndBoneModifiers>(
                            frame: frame,
                            maleMarker: RecordTypes.MNAM,
                            femaleMarker: RecordTypes.FNAM,
                            transl: HeadPartsAndBoneModifiers.TryCreateFromBinary);
                        return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                return RaceBinaryCreateTranslation.FillBinaryFNAMLogicCustom(
                                    frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                                    item: item,
                                    lastParsed: lastParsed);
                            case 1:
                                item.ChargenAndSkintones = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ChargenAndSkintones>(
                                    frame: frame,
                                    maleMarker: RecordTypes.MNAM,
                                    femaleMarker: RecordTypes.FNAM,
                                    femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter,
                                    transl: ChargenAndSkintones.TryCreateFromBinary);
                                return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, nextRecordType);
                            case 2:
                                item.HeadPartsAndBoneModifiers = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<HeadPartsAndBoneModifiers>(
                                    frame: frame,
                                    maleMarker: RecordTypes.MNAM,
                                    femaleMarker: RecordTypes.FNAM,
                                    transl: HeadPartsAndBoneModifiers.TryCreateFromBinary);
                                return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MTNM:
                {
                    item.MovementTypeNames.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.MTNM),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: true,
                                    binaryType: StringBinaryType.Plain);
                            }));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IVoiceTypeGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenMainClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenFaceClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Attack>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Attack_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: BodyData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AimAssistPose.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.AimAssistPose;
                }
                case RecordTypeInts.NAM3:
                {
                    return RaceBinaryCreateTranslation.FillBinaryNAM3Custom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactMaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ImpactMaterialType;
                }
                case RecordTypeInts.WED0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.WED0 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.WED0;
                }
                case RecordTypeInts.WED1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.WED1 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.WED1;
                }
                case RecordTypeInts.NAME:
                {
                    RaceBinaryCreateTranslation.FillBinaryBipedObjectsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.BipedObjects;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    item.MovementDataOverrides.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MovementDataOverride>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MovementDataOverride_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MovementDataOverride.TryCreateFromBinary));
                    return (int)Race_FieldIndex.MovementDataOverrides;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentFlags = EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                case RecordTypeInts.ZNAM:
                {
                    item.EquipmentSlots.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<EquipmentSlot>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: EquipmentSlot_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: EquipmentSlot.TryCreateFromBinary));
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNWP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnarmedWeapon.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.UnarmedWeapon;
                }
                case RecordTypeInts.WKMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefault.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefault;
                }
                case RecordTypeInts.SWMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementSwimDefault.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementSwimDefault;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementFlyDefault.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementFlyDefault;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArmorRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ArmorRace;
                }
                case RecordTypeInts.SRAC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubgraphTemplateRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.SubgraphTemplateRace;
                }
                case RecordTypeInts.SADD:
                case RecordTypeInts.SAKD:
                case RecordTypeInts.SGNM:
                case RecordTypeInts.SAPT:
                case RecordTypeInts.STKD:
                case RecordTypeInts.SRAF:
                {
                    item.Subgraphs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Subgraph>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Subgraph_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Subgraph.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Subgraphs;
                }
                case RecordTypeInts.PTOP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleChatterTimeMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.IdleChatterTimeMin;
                }
                case RecordTypeInts.NTOP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleChatterTimeMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.IdleChatterTimeMax;
                }
                case RecordTypeInts.QSTI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DialogueQuest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.DialogueQuest;
                }
                case RecordTypeInts.MSSS:
                case RecordTypeInts.MSSI:
                case RecordTypeInts.MSSA:
                {
                    item.MannequinSkinSwaps.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MannequinSkinSwap>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MannequinSkinSwap_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MannequinSkinSwap.TryCreateFromBinary));
                    return (int)Race_FieldIndex.MannequinSkinSwaps;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PluralName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.PluralName;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryMNAMLogicCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryFNAMLogicCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryNAM3Custom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryBipedObjectsCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class RaceBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => RaceCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRace);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> ActorEffect { get; private set; } = Array.Empty<IFormLinkGetter<ISpellRecordGetter>>();
        #region Skin
        private int? _SkinLocation;
        public IFormLinkNullableGetter<IArmorGetter> Skin => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _SkinLocation);
        #endregion
        #region FirstPersonFlags
        private int? _FirstPersonFlagsLocation;
        public FirstPersonFlag? FirstPersonFlags => _FirstPersonFlagsLocation.HasValue ? (FirstPersonFlag)BinaryPrimitives.ReadInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FirstPersonFlagsLocation!.Value, _package.MetaData.Constants)) : default(FirstPersonFlag?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IBodyPartDataGetter>(_package, _recordData, _BodyPartDataLocation);
        #endregion
        private RangeInt32? _DAT2Location;
        #region Height
        private int _HeightLocation => _DAT2Location!.Value.Min;
        private bool _Height_IsSet => _DAT2Location.HasValue;
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                if (!_Height_IsSet) return new GenderedItem<Single>(default(Single), default(Single));
                var data = _recordData.Slice(_HeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region DefaultWeight
        private int _DefaultWeightLocation => _DAT2Location!.Value.Min + 0x8;
        private bool _DefaultWeight_IsSet => _DAT2Location.HasValue;
        public IGenderedItemGetter<IWeightGetter> DefaultWeight
        {
            get
            {
                if (!_DefaultWeight_IsSet) return new GenderedItem<IWeightGetter>(new Weight(), new Weight());
                var data = _recordData.Slice(_DefaultWeightLocation);
                return new GenderedItem<IWeightGetter>(
                    WeightBinaryOverlay.WeightFactory(data, _package),
                    WeightBinaryOverlay.WeightFactory(data.Slice(12), _package));
            }
        }
        #endregion
        #region Flags
        private int _FlagsLocation => _DAT2Location!.Value.Min + 0x20;
        private bool _Flags_IsSet => _DAT2Location.HasValue;
        public Race.Flag Flags => _Flags_IsSet ? (Race.Flag)BinaryPrimitives.ReadInt64LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x8)) : default;
        #endregion
        #region AccelerationRate
        private int _AccelerationRateLocation => _DAT2Location!.Value.Min + 0x28;
        private bool _AccelerationRate_IsSet => _DAT2Location.HasValue;
        public Single AccelerationRate => _AccelerationRate_IsSet ? _recordData.Slice(_AccelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region DecelerationRate
        private int _DecelerationRateLocation => _DAT2Location!.Value.Min + 0x2C;
        private bool _DecelerationRate_IsSet => _DAT2Location.HasValue;
        public Single DecelerationRate => _DecelerationRate_IsSet ? _recordData.Slice(_DecelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region Size
        private int _SizeLocation => _DAT2Location!.Value.Min + 0x30;
        private bool _Size_IsSet => _DAT2Location.HasValue;
        public Size Size => _Size_IsSet ? (Size)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_SizeLocation, 0x4)) : default;
        #endregion
        #region DAT2Unknown1
        private int _DAT2Unknown1Location => _DAT2Location!.Value.Min + 0x34;
        private bool _DAT2Unknown1_IsSet => _DAT2Location.HasValue;
        public ReadOnlyMemorySlice<Byte> DAT2Unknown1 => _DAT2Unknown1_IsSet ? _recordData.Span.Slice(_DAT2Unknown1Location, 12).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region ShieldBipedObject
        private int _ShieldBipedObjectLocation => _DAT2Location!.Value.Min + 0x40;
        private bool _ShieldBipedObject_IsSet => _DAT2Location.HasValue;
        public BipedObject ShieldBipedObject => _ShieldBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ShieldBipedObjectLocation, 0x4)) : default;
        #endregion
        #region BeardBipedObject
        private int _BeardBipedObjectLocation => _DAT2Location!.Value.Min + 0x44;
        private bool _BeardBipedObject_IsSet => _DAT2Location.HasValue;
        public BipedObject BeardBipedObject => _BeardBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_BeardBipedObjectLocation, 0x4)) : default;
        #endregion
        #region BodyBipedObject
        private int _BodyBipedObjectLocation => _DAT2Location!.Value.Min + 0x48;
        private bool _BodyBipedObject_IsSet => _DAT2Location.HasValue;
        public BipedObject BodyBipedObject => _BodyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_BodyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region DAT2Unknown2
        private int _DAT2Unknown2Location => _DAT2Location!.Value.Min + 0x4C;
        private bool _DAT2Unknown2_IsSet => _DAT2Location.HasValue;
        public ReadOnlyMemorySlice<Byte> DAT2Unknown2 => _DAT2Unknown2_IsSet ? _recordData.Span.Slice(_DAT2Unknown2Location, 64).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DAT2Location!.Value.Min + 0x8C;
        private bool _Explosion_IsSet => _DAT2Location.HasValue;
        public IFormLinkGetter<IExplosionGetter> Explosion => _Explosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplosionLocation, 0x4), isSet: _Explosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region Debris
        private int _DebrisLocation => _DAT2Location!.Value.Min + 0x90;
        private bool _Debris_IsSet => _DAT2Location.HasValue;
        public IFormLinkGetter<IDebrisGetter> Debris => _Debris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_DebrisLocation, 0x4), isSet: _Debris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DAT2Location!.Value.Min + 0x94;
        private bool _ImpactDataSet_IsSet => _DAT2Location.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ImpactDataSetLocation, 0x4), isSet: _ImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region OrientationLimitsPitch
        private int _OrientationLimitsPitchLocation => _DAT2Location!.Value.Min + 0x98;
        private bool _OrientationLimitsPitch_IsSet => _DAT2Location.HasValue;
        public Single OrientationLimitsPitch => _OrientationLimitsPitch_IsSet ? _recordData.Slice(_OrientationLimitsPitchLocation, 4).Float() : default(Single);
        #endregion
        #region OrientationLimitsRoll
        private int _OrientationLimitsRollLocation => _DAT2Location!.Value.Min + 0x9C;
        private bool _OrientationLimitsRoll_IsSet => _DAT2Location.HasValue;
        public Single OrientationLimitsRoll => _OrientationLimitsRoll_IsSet ? _recordData.Slice(_OrientationLimitsRollLocation, 4).Float() : default(Single);
        #endregion
        #region DAT2Unknown3
        private int _DAT2Unknown3Location => _DAT2Location!.Value.Min + 0xA0;
        private bool _DAT2Unknown3_IsSet => _DAT2Location.HasValue;
        public ReadOnlyMemorySlice<Byte> DAT2Unknown3 => _DAT2Unknown3_IsSet ? _recordData.Span.Slice(_DAT2Unknown3Location, 61).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region MNAMLogic
        public partial ParseResult MNAMLogicCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region FNAMLogic
        public partial ParseResult FNAMLogicCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<String> MovementTypeNames { get; private set; } = Array.Empty<String>();
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _VoicesLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region FacegenMainClamp
        private int? _FacegenMainClampLocation;
        public Single FacegenMainClamp => _FacegenMainClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenMainClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region FacegenFaceClamp
        private int? _FacegenFaceClampLocation;
        public Single FacegenFaceClamp => _FacegenFaceClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenFaceClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = Array.Empty<IAttackGetter>();
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?> BodyData => _BodyDataOverlay ?? new GenderedItem<IBodyDataGetter?>(default, default);
        #endregion
        #region AimAssistPose
        private int? _AimAssistPoseLocation;
        public IFormLinkNullableGetter<IAimAssistPoseGetter> AimAssistPose => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAimAssistPoseGetter>(_package, _recordData, _AimAssistPoseLocation);
        #endregion
        #region NAM3
        public partial ParseResult NAM3CustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region ImpactMaterialType
        private int? _ImpactMaterialTypeLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> ImpactMaterialType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _ImpactMaterialTypeLocation);
        #endregion
        public ISoundReferenceGetter? WED0 { get; private set; }
        public ISoundReferenceGetter? WED1 { get; private set; }
        public IReadOnlyList<IMovementDataOverrideGetter> MovementDataOverrides { get; private set; } = Array.Empty<IMovementDataOverrideGetter>();
        #region EquipmentFlags
        private int? _EquipmentFlagsLocation;
        public EquipTypeFlag? EquipmentFlags => _EquipmentFlagsLocation.HasValue ? (EquipTypeFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EquipmentFlagsLocation!.Value, _package.MetaData.Constants)) : default(EquipTypeFlag?);
        #endregion
        public IReadOnlyList<IEquipmentSlotGetter> EquipmentSlots { get; private set; } = Array.Empty<IEquipmentSlotGetter>();
        #region UnarmedWeapon
        private int? _UnarmedWeaponLocation;
        public IFormLinkNullableGetter<IWeaponGetter> UnarmedWeapon => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWeaponGetter>(_package, _recordData, _UnarmedWeaponLocation);
        #endregion
        #region BaseMovementDefault
        private int? _BaseMovementDefaultLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefault => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultLocation);
        #endregion
        #region BaseMovementSwimDefault
        private int? _BaseMovementSwimDefaultLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementSwimDefault => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementSwimDefaultLocation);
        #endregion
        #region BaseMovementFlyDefault
        private int? _BaseMovementFlyDefaultLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementFlyDefault => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementFlyDefaultLocation);
        #endregion
        #region ChargenAndSkintones
        private IGenderedItemGetter<IChargenAndSkintonesGetter?>? _ChargenAndSkintonesOverlay;
        public IGenderedItemGetter<IChargenAndSkintonesGetter?>? ChargenAndSkintones => _ChargenAndSkintonesOverlay;
        #endregion
        #region ArmorRace
        private int? _ArmorRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> ArmorRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _ArmorRaceLocation);
        #endregion
        #region SubgraphTemplateRace
        private int? _SubgraphTemplateRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> SubgraphTemplateRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _SubgraphTemplateRaceLocation);
        #endregion
        public IReadOnlyList<ISubgraphGetter> Subgraphs { get; private set; } = Array.Empty<ISubgraphGetter>();
        #region IdleChatterTimeMin
        private int? _IdleChatterTimeMinLocation;
        public Single? IdleChatterTimeMin => _IdleChatterTimeMinLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _IdleChatterTimeMinLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region IdleChatterTimeMax
        private int? _IdleChatterTimeMaxLocation;
        public Single? IdleChatterTimeMax => _IdleChatterTimeMaxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _IdleChatterTimeMaxLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region DialogueQuest
        private int? _DialogueQuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> DialogueQuest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _DialogueQuestLocation);
        #endregion
        #region HeadPartsAndBoneModifiers
        private IGenderedItemGetter<IHeadPartsAndBoneModifiersGetter?>? _HeadPartsAndBoneModifiersOverlay;
        public IGenderedItemGetter<IHeadPartsAndBoneModifiersGetter?>? HeadPartsAndBoneModifiers => _HeadPartsAndBoneModifiersOverlay;
        #endregion
        public IReadOnlyList<IMannequinSkinSwapGetter> MannequinSkinSwaps { get; private set; } = Array.Empty<IMannequinSkinSwapGetter>();
        #region PluralName
        private int? _PluralNameLocation;
        public ITranslatedStringGetter? PluralName => _PluralNameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PluralNameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRaceGetter RaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new RaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IRaceGetter RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Race_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellRecordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SPLO,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    _SkinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BO64:
                {
                    _FirstPersonFlagsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FirstPersonFlags;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.GNAM:
                {
                    _BodyPartDataLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.DAT2:
                {
                    _DAT2Location = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Race_FieldIndex.DAT2Unknown3;
                }
                case RecordTypeInts.MNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DAT2Unknown3)
                    {
                        return MNAMLogicCustomParse(
                            stream,
                            offset,
                            lastParsed: lastParsed);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.BaseMovementFlyDefault)
                    {
                        _ChargenAndSkintonesOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IChargenAndSkintonesGetter>(
                            package: _package,
                            male: RecordTypes.MNAM,
                            female: RecordTypes.FNAM,
                            stream: stream,
                            creator: static (s, p, r) => ChargenAndSkintonesBinaryOverlay.ChargenAndSkintonesFactory(s, p, r),
                            femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter);
                        return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DialogueQuest)
                    {
                        _HeadPartsAndBoneModifiersOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadPartsAndBoneModifiersGetter>(
                            package: _package,
                            male: RecordTypes.MNAM,
                            female: RecordTypes.FNAM,
                            stream: stream,
                            creator: static (s, p, r) => HeadPartsAndBoneModifiersBinaryOverlay.HeadPartsAndBoneModifiersFactory(s, p, r),
                            translationParams: translationParams);
                        return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                return MNAMLogicCustomParse(
                                    stream,
                                    offset,
                                    lastParsed: lastParsed);
                            }
                            case 1:
                            {
                                _ChargenAndSkintonesOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IChargenAndSkintonesGetter>(
                                    package: _package,
                                    male: RecordTypes.MNAM,
                                    female: RecordTypes.FNAM,
                                    stream: stream,
                                    creator: static (s, p, r) => ChargenAndSkintonesBinaryOverlay.ChargenAndSkintonesFactory(s, p, r),
                                    femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter);
                                return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, type);
                            }
                            case 2:
                            {
                                _HeadPartsAndBoneModifiersOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadPartsAndBoneModifiersGetter>(
                                    package: _package,
                                    male: RecordTypes.MNAM,
                                    female: RecordTypes.FNAM,
                                    stream: stream,
                                    creator: static (s, p, r) => HeadPartsAndBoneModifiersBinaryOverlay.HeadPartsAndBoneModifiersFactory(s, p, r),
                                    translationParams: translationParams);
                                return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DAT2Unknown3)
                    {
                        return FNAMLogicCustomParse(
                            stream,
                            offset,
                            lastParsed: lastParsed);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.BaseMovementFlyDefault)
                    {
                        _ChargenAndSkintonesOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IChargenAndSkintonesGetter>(
                            package: _package,
                            male: RecordTypes.MNAM,
                            female: RecordTypes.FNAM,
                            stream: stream,
                            creator: static (s, p, r) => ChargenAndSkintonesBinaryOverlay.ChargenAndSkintonesFactory(s, p, r),
                            femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter);
                        return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Race_FieldIndex.DialogueQuest)
                    {
                        _HeadPartsAndBoneModifiersOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadPartsAndBoneModifiersGetter>(
                            package: _package,
                            male: RecordTypes.MNAM,
                            female: RecordTypes.FNAM,
                            stream: stream,
                            creator: static (s, p, r) => HeadPartsAndBoneModifiersBinaryOverlay.HeadPartsAndBoneModifiersFactory(s, p, r),
                            translationParams: translationParams);
                        return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                return FNAMLogicCustomParse(
                                    stream,
                                    offset,
                                    lastParsed: lastParsed);
                            }
                            case 1:
                            {
                                _ChargenAndSkintonesOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IChargenAndSkintonesGetter>(
                                    package: _package,
                                    male: RecordTypes.MNAM,
                                    female: RecordTypes.FNAM,
                                    stream: stream,
                                    creator: static (s, p, r) => ChargenAndSkintonesBinaryOverlay.ChargenAndSkintonesFactory(s, p, r),
                                    femaleRecordConverter: Race_Registration.ChargenAndSkintonesFemaleConverter);
                                return new ParseResult((int)Race_FieldIndex.ChargenAndSkintones, type);
                            }
                            case 2:
                            {
                                _HeadPartsAndBoneModifiersOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadPartsAndBoneModifiersGetter>(
                                    package: _package,
                                    male: RecordTypes.MNAM,
                                    female: RecordTypes.FNAM,
                                    stream: stream,
                                    creator: static (s, p, r) => HeadPartsAndBoneModifiersBinaryOverlay.HeadPartsAndBoneModifiersFactory(s, p, r),
                                    translationParams: translationParams);
                                return new ParseResult((int)Race_FieldIndex.HeadPartsAndBoneModifiers, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MTNM:
                {
                    this.MovementTypeNames = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.MTNM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoicesLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.PNAM:
                {
                    _FacegenMainClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    _FacegenFaceClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<IAttackGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Attack_Registration.TriggerSpecs,
                        factory: AttackBinaryOverlay.AttackFactory);
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.ENAM:
                {
                    _AimAssistPoseLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.AimAssistPose;
                }
                case RecordTypeInts.NAM3:
                {
                    return NAM3CustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM4:
                {
                    _ImpactMaterialTypeLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ImpactMaterialType;
                }
                case RecordTypeInts.WED0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.WED0 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Race_FieldIndex.WED0;
                }
                case RecordTypeInts.WED1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.WED1 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Race_FieldIndex.WED1;
                }
                case RecordTypeInts.NAME:
                {
                    BipedObjectsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Race_FieldIndex.BipedObjects;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    this.MovementDataOverrides = this.ParseRepeatedTypelessSubrecord<IMovementDataOverrideGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MovementDataOverride_Registration.TriggerSpecs,
                        factory: MovementDataOverrideBinaryOverlay.MovementDataOverrideFactory);
                    return (int)Race_FieldIndex.MovementDataOverrides;
                }
                case RecordTypeInts.VNAM:
                {
                    _EquipmentFlagsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                case RecordTypeInts.ZNAM:
                {
                    this.EquipmentSlots = this.ParseRepeatedTypelessSubrecord<IEquipmentSlotGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: EquipmentSlot_Registration.TriggerSpecs,
                        factory: EquipmentSlotBinaryOverlay.EquipmentSlotFactory);
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNWP:
                {
                    _UnarmedWeaponLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.UnarmedWeapon;
                }
                case RecordTypeInts.WKMV:
                {
                    _BaseMovementDefaultLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefault;
                }
                case RecordTypeInts.SWMV:
                {
                    _BaseMovementSwimDefaultLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementSwimDefault;
                }
                case RecordTypeInts.FLMV:
                {
                    _BaseMovementFlyDefaultLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementFlyDefault;
                }
                case RecordTypeInts.RNAM:
                {
                    _ArmorRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ArmorRace;
                }
                case RecordTypeInts.SRAC:
                {
                    _SubgraphTemplateRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SubgraphTemplateRace;
                }
                case RecordTypeInts.SADD:
                case RecordTypeInts.SAKD:
                case RecordTypeInts.SGNM:
                case RecordTypeInts.SAPT:
                case RecordTypeInts.STKD:
                case RecordTypeInts.SRAF:
                {
                    this.Subgraphs = this.ParseRepeatedTypelessSubrecord<ISubgraphGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Subgraph_Registration.TriggerSpecs,
                        factory: SubgraphBinaryOverlay.SubgraphFactory);
                    return (int)Race_FieldIndex.Subgraphs;
                }
                case RecordTypeInts.PTOP:
                {
                    _IdleChatterTimeMinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.IdleChatterTimeMin;
                }
                case RecordTypeInts.NTOP:
                {
                    _IdleChatterTimeMaxLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.IdleChatterTimeMax;
                }
                case RecordTypeInts.QSTI:
                {
                    _DialogueQuestLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DialogueQuest;
                }
                case RecordTypeInts.MSSS:
                case RecordTypeInts.MSSI:
                case RecordTypeInts.MSSA:
                {
                    this.MannequinSkinSwaps = this.ParseRepeatedTypelessSubrecord<IMannequinSkinSwapGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MannequinSkinSwap_Registration.TriggerSpecs,
                        factory: MannequinSkinSwapBinaryOverlay.MannequinSkinSwapFactory);
                    return (int)Race_FieldIndex.MannequinSkinSwaps;
                }
                case RecordTypeInts.SNAM:
                {
                    _PluralNameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.PluralName;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

