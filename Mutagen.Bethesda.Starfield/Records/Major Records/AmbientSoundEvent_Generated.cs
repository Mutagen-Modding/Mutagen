/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AmbientSoundEvent :
        IAmbientSoundEvent,
        IEquatable<IAmbientSoundEventGetter>,
        ILoquiObjectSetter<AmbientSoundEvent>
    {
        #region Ctor
        public AmbientSoundEvent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sound
        public SoundReference Sound { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IAmbientSoundEventGetter.Sound => Sound;
        #endregion
        #region WeatherKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _WeatherKeywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> WeatherKeywords
        {
            get => this._WeatherKeywords;
            init => this._WeatherKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> IAmbientSoundEventGetter.WeatherKeywords => _WeatherKeywords;
        #endregion

        #endregion
        #region MarkerKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _MarkerKeywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> MarkerKeywords
        {
            get => this._MarkerKeywords;
            init => this._MarkerKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> IAmbientSoundEventGetter.MarkerKeywords => _MarkerKeywords;
        #endregion

        #endregion
        #region SwitchGroup
        public Guid SwitchGroup { get; set; } = default(Guid);
        #endregion
        #region ReEvaluateIntervalUseCustom
        public Boolean ReEvaluateIntervalUseCustom { get; set; } = default(Boolean);
        #endregion
        #region ReEvaluateIntervalSeconds
        public Single ReEvaluateIntervalSeconds { get; set; } = default(Single);
        #endregion
        #region PlanetCustomizations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AmbientSoundPlanetCustomization> _PlanetCustomizations = new ExtendedList<AmbientSoundPlanetCustomization>();
        public ExtendedList<AmbientSoundPlanetCustomization> PlanetCustomizations
        {
            get => this._PlanetCustomizations;
            init => this._PlanetCustomizations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAmbientSoundPlanetCustomizationGetter> IAmbientSoundEventGetter.PlanetCustomizations => _PlanetCustomizations;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AmbientSoundEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAmbientSoundEventGetter rhs) return false;
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAmbientSoundEventGetter? obj)
        {
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.WeatherKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MarkerKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SwitchGroup = initialValue;
                this.ReEvaluateIntervalUseCustom = initialValue;
                this.ReEvaluateIntervalSeconds = initialValue;
                this.PlanetCustomizations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AmbientSoundPlanetCustomization.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AmbientSoundPlanetCustomization.Mask<TItem>?>>());
            }

            public Mask(
                TItem Sound,
                TItem WeatherKeywords,
                TItem MarkerKeywords,
                TItem SwitchGroup,
                TItem ReEvaluateIntervalUseCustom,
                TItem ReEvaluateIntervalSeconds,
                TItem PlanetCustomizations)
            {
                this.Sound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Sound, new SoundReference.Mask<TItem>(Sound));
                this.WeatherKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WeatherKeywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MarkerKeywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MarkerKeywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.SwitchGroup = SwitchGroup;
                this.ReEvaluateIntervalUseCustom = ReEvaluateIntervalUseCustom;
                this.ReEvaluateIntervalSeconds = ReEvaluateIntervalSeconds;
                this.PlanetCustomizations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AmbientSoundPlanetCustomization.Mask<TItem>?>>?>(PlanetCustomizations, Enumerable.Empty<MaskItemIndexed<TItem, AmbientSoundPlanetCustomization.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Sound { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WeatherKeywords;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MarkerKeywords;
            public TItem SwitchGroup;
            public TItem ReEvaluateIntervalUseCustom;
            public TItem ReEvaluateIntervalSeconds;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AmbientSoundPlanetCustomization.Mask<TItem>?>>?>? PlanetCustomizations;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.WeatherKeywords, rhs.WeatherKeywords)) return false;
                if (!object.Equals(this.MarkerKeywords, rhs.MarkerKeywords)) return false;
                if (!object.Equals(this.SwitchGroup, rhs.SwitchGroup)) return false;
                if (!object.Equals(this.ReEvaluateIntervalUseCustom, rhs.ReEvaluateIntervalUseCustom)) return false;
                if (!object.Equals(this.ReEvaluateIntervalSeconds, rhs.ReEvaluateIntervalSeconds)) return false;
                if (!object.Equals(this.PlanetCustomizations, rhs.PlanetCustomizations)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Sound);
                hash.Add(this.WeatherKeywords);
                hash.Add(this.MarkerKeywords);
                hash.Add(this.SwitchGroup);
                hash.Add(this.ReEvaluateIntervalUseCustom);
                hash.Add(this.ReEvaluateIntervalSeconds);
                hash.Add(this.PlanetCustomizations);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Sound != null)
                {
                    if (!eval(this.Sound.Overall)) return false;
                    if (this.Sound.Specific != null && !this.Sound.Specific.All(eval)) return false;
                }
                if (this.WeatherKeywords != null)
                {
                    if (!eval(this.WeatherKeywords.Overall)) return false;
                    if (this.WeatherKeywords.Specific != null)
                    {
                        foreach (var item in this.WeatherKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MarkerKeywords != null)
                {
                    if (!eval(this.MarkerKeywords.Overall)) return false;
                    if (this.MarkerKeywords.Specific != null)
                    {
                        foreach (var item in this.MarkerKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.SwitchGroup)) return false;
                if (!eval(this.ReEvaluateIntervalUseCustom)) return false;
                if (!eval(this.ReEvaluateIntervalSeconds)) return false;
                if (this.PlanetCustomizations != null)
                {
                    if (!eval(this.PlanetCustomizations.Overall)) return false;
                    if (this.PlanetCustomizations.Specific != null)
                    {
                        foreach (var item in this.PlanetCustomizations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Sound != null)
                {
                    if (eval(this.Sound.Overall)) return true;
                    if (this.Sound.Specific != null && this.Sound.Specific.Any(eval)) return true;
                }
                if (this.WeatherKeywords != null)
                {
                    if (eval(this.WeatherKeywords.Overall)) return true;
                    if (this.WeatherKeywords.Specific != null)
                    {
                        foreach (var item in this.WeatherKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MarkerKeywords != null)
                {
                    if (eval(this.MarkerKeywords.Overall)) return true;
                    if (this.MarkerKeywords.Specific != null)
                    {
                        foreach (var item in this.MarkerKeywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.SwitchGroup)) return true;
                if (eval(this.ReEvaluateIntervalUseCustom)) return true;
                if (eval(this.ReEvaluateIntervalSeconds)) return true;
                if (this.PlanetCustomizations != null)
                {
                    if (eval(this.PlanetCustomizations.Overall)) return true;
                    if (this.PlanetCustomizations.Specific != null)
                    {
                        foreach (var item in this.PlanetCustomizations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AmbientSoundEvent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Sound = this.Sound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Sound.Overall), this.Sound.Specific?.Translate(eval));
                if (WeatherKeywords != null)
                {
                    obj.WeatherKeywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WeatherKeywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WeatherKeywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WeatherKeywords.Specific = l;
                        foreach (var item in WeatherKeywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MarkerKeywords != null)
                {
                    obj.MarkerKeywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MarkerKeywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MarkerKeywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MarkerKeywords.Specific = l;
                        foreach (var item in MarkerKeywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.SwitchGroup = eval(this.SwitchGroup);
                obj.ReEvaluateIntervalUseCustom = eval(this.ReEvaluateIntervalUseCustom);
                obj.ReEvaluateIntervalSeconds = eval(this.ReEvaluateIntervalSeconds);
                if (PlanetCustomizations != null)
                {
                    obj.PlanetCustomizations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AmbientSoundPlanetCustomization.Mask<R>?>>?>(eval(this.PlanetCustomizations.Overall), Enumerable.Empty<MaskItemIndexed<R, AmbientSoundPlanetCustomization.Mask<R>?>>());
                    if (PlanetCustomizations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AmbientSoundPlanetCustomization.Mask<R>?>>();
                        obj.PlanetCustomizations.Specific = l;
                        foreach (var item in PlanetCustomizations.Specific)
                        {
                            MaskItemIndexed<R, AmbientSoundPlanetCustomization.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AmbientSoundPlanetCustomization.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AmbientSoundEvent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AmbientSoundEvent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AmbientSoundEvent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Sound?.Overall ?? true)
                    {
                        Sound?.Print(sb);
                    }
                    if ((printMask?.WeatherKeywords?.Overall ?? true)
                        && WeatherKeywords is {} WeatherKeywordsItem)
                    {
                        sb.AppendLine("WeatherKeywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WeatherKeywordsItem.Overall);
                            if (WeatherKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in WeatherKeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MarkerKeywords?.Overall ?? true)
                        && MarkerKeywords is {} MarkerKeywordsItem)
                    {
                        sb.AppendLine("MarkerKeywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerKeywordsItem.Overall);
                            if (MarkerKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in MarkerKeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SwitchGroup ?? true)
                    {
                        sb.AppendItem(SwitchGroup, "SwitchGroup");
                    }
                    if (printMask?.ReEvaluateIntervalUseCustom ?? true)
                    {
                        sb.AppendItem(ReEvaluateIntervalUseCustom, "ReEvaluateIntervalUseCustom");
                    }
                    if (printMask?.ReEvaluateIntervalSeconds ?? true)
                    {
                        sb.AppendItem(ReEvaluateIntervalSeconds, "ReEvaluateIntervalSeconds");
                    }
                    if ((printMask?.PlanetCustomizations?.Overall ?? true)
                        && PlanetCustomizations is {} PlanetCustomizationsItem)
                    {
                        sb.AppendLine("PlanetCustomizations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PlanetCustomizationsItem.Overall);
                            if (PlanetCustomizationsItem.Specific != null)
                            {
                                foreach (var subItem in PlanetCustomizationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Sound;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WeatherKeywords;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MarkerKeywords;
            public Exception? SwitchGroup;
            public Exception? ReEvaluateIntervalUseCustom;
            public Exception? ReEvaluateIntervalSeconds;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AmbientSoundPlanetCustomization.ErrorMask?>>?>? PlanetCustomizations;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AmbientSoundEvent_FieldIndex enu = (AmbientSoundEvent_FieldIndex)index;
                switch (enu)
                {
                    case AmbientSoundEvent_FieldIndex.Sound:
                        return Sound;
                    case AmbientSoundEvent_FieldIndex.WeatherKeywords:
                        return WeatherKeywords;
                    case AmbientSoundEvent_FieldIndex.MarkerKeywords:
                        return MarkerKeywords;
                    case AmbientSoundEvent_FieldIndex.SwitchGroup:
                        return SwitchGroup;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalUseCustom:
                        return ReEvaluateIntervalUseCustom;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalSeconds:
                        return ReEvaluateIntervalSeconds;
                    case AmbientSoundEvent_FieldIndex.PlanetCustomizations:
                        return PlanetCustomizations;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AmbientSoundEvent_FieldIndex enu = (AmbientSoundEvent_FieldIndex)index;
                switch (enu)
                {
                    case AmbientSoundEvent_FieldIndex.Sound:
                        this.Sound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case AmbientSoundEvent_FieldIndex.WeatherKeywords:
                        this.WeatherKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case AmbientSoundEvent_FieldIndex.MarkerKeywords:
                        this.MarkerKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case AmbientSoundEvent_FieldIndex.SwitchGroup:
                        this.SwitchGroup = ex;
                        break;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalUseCustom:
                        this.ReEvaluateIntervalUseCustom = ex;
                        break;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalSeconds:
                        this.ReEvaluateIntervalSeconds = ex;
                        break;
                    case AmbientSoundEvent_FieldIndex.PlanetCustomizations:
                        this.PlanetCustomizations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AmbientSoundPlanetCustomization.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AmbientSoundEvent_FieldIndex enu = (AmbientSoundEvent_FieldIndex)index;
                switch (enu)
                {
                    case AmbientSoundEvent_FieldIndex.Sound:
                        this.Sound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.WeatherKeywords:
                        this.WeatherKeywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.MarkerKeywords:
                        this.MarkerKeywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.SwitchGroup:
                        this.SwitchGroup = (Exception?)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalUseCustom:
                        this.ReEvaluateIntervalUseCustom = (Exception?)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.ReEvaluateIntervalSeconds:
                        this.ReEvaluateIntervalSeconds = (Exception?)obj;
                        break;
                    case AmbientSoundEvent_FieldIndex.PlanetCustomizations:
                        this.PlanetCustomizations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AmbientSoundPlanetCustomization.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Sound != null) return true;
                if (WeatherKeywords != null) return true;
                if (MarkerKeywords != null) return true;
                if (SwitchGroup != null) return true;
                if (ReEvaluateIntervalUseCustom != null) return true;
                if (ReEvaluateIntervalSeconds != null) return true;
                if (PlanetCustomizations != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Sound?.Print(sb);
                if (WeatherKeywords is {} WeatherKeywordsItem)
                {
                    sb.AppendLine("WeatherKeywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WeatherKeywordsItem.Overall);
                        if (WeatherKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in WeatherKeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MarkerKeywords is {} MarkerKeywordsItem)
                {
                    sb.AppendLine("MarkerKeywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerKeywordsItem.Overall);
                        if (MarkerKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in MarkerKeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SwitchGroup, "SwitchGroup");
                }
                {
                    sb.AppendItem(ReEvaluateIntervalUseCustom, "ReEvaluateIntervalUseCustom");
                }
                {
                    sb.AppendItem(ReEvaluateIntervalSeconds, "ReEvaluateIntervalSeconds");
                }
                if (PlanetCustomizations is {} PlanetCustomizationsItem)
                {
                    sb.AppendLine("PlanetCustomizations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PlanetCustomizationsItem.Overall);
                        if (PlanetCustomizationsItem.Specific != null)
                        {
                            foreach (var subItem in PlanetCustomizationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Sound = this.Sound.Combine(rhs.Sound, (l, r) => l.Combine(r));
                ret.WeatherKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.WeatherKeywords?.Overall, rhs.WeatherKeywords?.Overall), Noggog.ExceptionExt.Combine(this.WeatherKeywords?.Specific, rhs.WeatherKeywords?.Specific));
                ret.MarkerKeywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MarkerKeywords?.Overall, rhs.MarkerKeywords?.Overall), Noggog.ExceptionExt.Combine(this.MarkerKeywords?.Specific, rhs.MarkerKeywords?.Specific));
                ret.SwitchGroup = this.SwitchGroup.Combine(rhs.SwitchGroup);
                ret.ReEvaluateIntervalUseCustom = this.ReEvaluateIntervalUseCustom.Combine(rhs.ReEvaluateIntervalUseCustom);
                ret.ReEvaluateIntervalSeconds = this.ReEvaluateIntervalSeconds.Combine(rhs.ReEvaluateIntervalSeconds);
                ret.PlanetCustomizations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AmbientSoundPlanetCustomization.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.PlanetCustomizations?.Overall, rhs.PlanetCustomizations?.Overall), Noggog.ExceptionExt.Combine(this.PlanetCustomizations?.Specific, rhs.PlanetCustomizations?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public SoundReference.TranslationMask? Sound;
            public bool WeatherKeywords;
            public bool MarkerKeywords;
            public bool SwitchGroup;
            public bool ReEvaluateIntervalUseCustom;
            public bool ReEvaluateIntervalSeconds;
            public AmbientSoundPlanetCustomization.TranslationMask? PlanetCustomizations;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.WeatherKeywords = defaultOn;
                this.MarkerKeywords = defaultOn;
                this.SwitchGroup = defaultOn;
                this.ReEvaluateIntervalUseCustom = defaultOn;
                this.ReEvaluateIntervalSeconds = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Sound != null ? Sound.OnOverall : DefaultOn, Sound?.GetCrystal()));
                ret.Add((WeatherKeywords, null));
                ret.Add((MarkerKeywords, null));
                ret.Add((SwitchGroup, null));
                ret.Add((ReEvaluateIntervalUseCustom, null));
                ret.Add((ReEvaluateIntervalSeconds, null));
                ret.Add((PlanetCustomizations == null ? DefaultOn : !PlanetCustomizations.GetCrystal().CopyNothing, PlanetCustomizations?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AmbientSoundEventCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AmbientSoundEventSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AmbientSoundEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientSoundEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static AmbientSoundEvent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AmbientSoundEvent();
            ((AmbientSoundEventSetterCommon)((IAmbientSoundEventGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AmbientSoundEvent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AmbientSoundEventSetterCommon)((IAmbientSoundEventGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AmbientSoundEvent GetNew()
        {
            return new AmbientSoundEvent();
        }

    }
    #endregion

    #region Interface
    public partial interface IAmbientSoundEvent :
        IAmbientSoundEventGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAmbientSoundEvent>
    {
        new SoundReference Sound { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> WeatherKeywords { get; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> MarkerKeywords { get; }
        new Guid SwitchGroup { get; set; }
        new Boolean ReEvaluateIntervalUseCustom { get; set; }
        new Single ReEvaluateIntervalSeconds { get; set; }
        new ExtendedList<AmbientSoundPlanetCustomization> PlanetCustomizations { get; }
    }

    public partial interface IAmbientSoundEventGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAmbientSoundEventGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => AmbientSoundEvent_Registration.Instance;
        ISoundReferenceGetter Sound { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> WeatherKeywords { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> MarkerKeywords { get; }
        Guid SwitchGroup { get; }
        Boolean ReEvaluateIntervalUseCustom { get; }
        Single ReEvaluateIntervalSeconds { get; }
        IReadOnlyList<IAmbientSoundPlanetCustomizationGetter> PlanetCustomizations { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AmbientSoundEventMixIn
    {
        public static void Clear(this IAmbientSoundEvent item)
        {
            ((AmbientSoundEventSetterCommon)((IAmbientSoundEventGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AmbientSoundEvent.Mask<bool> GetEqualsMask(
            this IAmbientSoundEventGetter item,
            IAmbientSoundEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAmbientSoundEventGetter item,
            string? name = null,
            AmbientSoundEvent.Mask<bool>? printMask = null)
        {
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAmbientSoundEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AmbientSoundEvent.Mask<bool>? printMask = null)
        {
            ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAmbientSoundEventGetter item,
            IAmbientSoundEventGetter rhs,
            AmbientSoundEvent.TranslationMask? equalsMask = null)
        {
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAmbientSoundEvent lhs,
            IAmbientSoundEventGetter rhs)
        {
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAmbientSoundEvent lhs,
            IAmbientSoundEventGetter rhs,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAmbientSoundEvent lhs,
            IAmbientSoundEventGetter rhs,
            out AmbientSoundEvent.ErrorMask errorMask,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AmbientSoundEvent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAmbientSoundEvent lhs,
            IAmbientSoundEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AmbientSoundEvent DeepCopy(
            this IAmbientSoundEventGetter item,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            return ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AmbientSoundEvent DeepCopy(
            this IAmbientSoundEventGetter item,
            out AmbientSoundEvent.ErrorMask errorMask,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            return ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AmbientSoundEvent DeepCopy(
            this IAmbientSoundEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAmbientSoundEvent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AmbientSoundEventSetterCommon)((IAmbientSoundEventGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AmbientSoundEvent_FieldIndex
    {
        Sound = 0,
        WeatherKeywords = 1,
        MarkerKeywords = 2,
        SwitchGroup = 3,
        ReEvaluateIntervalUseCustom = 4,
        ReEvaluateIntervalSeconds = 5,
        PlanetCustomizations = 6,
    }
    #endregion

    #region Registration
    internal partial class AmbientSoundEvent_Registration : ILoquiRegistration
    {
        public static readonly AmbientSoundEvent_Registration Instance = new AmbientSoundEvent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(AmbientSoundEvent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AmbientSoundEvent.ErrorMask);

        public static readonly Type ClassType = typeof(AmbientSoundEvent);

        public static readonly Type GetterType = typeof(IAmbientSoundEventGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAmbientSoundEvent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.AmbientSoundEvent";

        public const string Name = "AmbientSoundEvent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ASAE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.ASAE);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AmbientSoundEventBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AmbientSoundEventSetterCommon
    {
        public static readonly AmbientSoundEventSetterCommon Instance = new AmbientSoundEventSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAmbientSoundEvent item)
        {
            ClearPartial();
            item.Sound.Clear();
            item.WeatherKeywords.Clear();
            item.MarkerKeywords.Clear();
            item.SwitchGroup = default(Guid);
            item.ReEvaluateIntervalUseCustom = default(Boolean);
            item.ReEvaluateIntervalSeconds = default(Single);
            item.PlanetCustomizations.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IAmbientSoundEvent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Sound.RemapLinks(mapping);
            obj.WeatherKeywords.RemapLinks(mapping);
            obj.MarkerKeywords.RemapLinks(mapping);
            obj.PlanetCustomizations.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAmbientSoundEvent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.ASAE),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AmbientSoundEventBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class AmbientSoundEventCommon
    {
        public static readonly AmbientSoundEventCommon Instance = new AmbientSoundEventCommon();

        public AmbientSoundEvent.Mask<bool> GetEqualsMask(
            IAmbientSoundEventGetter item,
            IAmbientSoundEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AmbientSoundEvent.Mask<bool>(false);
            ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAmbientSoundEventGetter item,
            IAmbientSoundEventGetter rhs,
            AmbientSoundEvent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Sound = MaskItemExt.Factory(item.Sound.GetEqualsMask(rhs.Sound, include), include);
            ret.WeatherKeywords = item.WeatherKeywords.CollectionEqualsHelper(
                rhs.WeatherKeywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MarkerKeywords = item.MarkerKeywords.CollectionEqualsHelper(
                rhs.MarkerKeywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.SwitchGroup = item.SwitchGroup == rhs.SwitchGroup;
            ret.ReEvaluateIntervalUseCustom = item.ReEvaluateIntervalUseCustom == rhs.ReEvaluateIntervalUseCustom;
            ret.ReEvaluateIntervalSeconds = item.ReEvaluateIntervalSeconds.EqualsWithin(rhs.ReEvaluateIntervalSeconds);
            ret.PlanetCustomizations = item.PlanetCustomizations.CollectionEqualsHelper(
                rhs.PlanetCustomizations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IAmbientSoundEventGetter item,
            string? name = null,
            AmbientSoundEvent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAmbientSoundEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AmbientSoundEvent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AmbientSoundEvent =>");
            }
            else
            {
                sb.AppendLine($"{name} (AmbientSoundEvent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAmbientSoundEventGetter item,
            StructuredStringBuilder sb,
            AmbientSoundEvent.Mask<bool>? printMask = null)
        {
            if (printMask?.Sound?.Overall ?? true)
            {
                item.Sound?.Print(sb, "Sound");
            }
            if (printMask?.WeatherKeywords?.Overall ?? true)
            {
                sb.AppendLine("WeatherKeywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.WeatherKeywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.MarkerKeywords?.Overall ?? true)
            {
                sb.AppendLine("MarkerKeywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MarkerKeywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.SwitchGroup ?? true)
            {
                sb.AppendItem(item.SwitchGroup, "SwitchGroup");
            }
            if (printMask?.ReEvaluateIntervalUseCustom ?? true)
            {
                sb.AppendItem(item.ReEvaluateIntervalUseCustom, "ReEvaluateIntervalUseCustom");
            }
            if (printMask?.ReEvaluateIntervalSeconds ?? true)
            {
                sb.AppendItem(item.ReEvaluateIntervalSeconds, "ReEvaluateIntervalSeconds");
            }
            if (printMask?.PlanetCustomizations?.Overall ?? true)
            {
                sb.AppendLine("PlanetCustomizations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PlanetCustomizations)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAmbientSoundEventGetter? lhs,
            IAmbientSoundEventGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.Sound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sound, rhs.Sound, out var lhsSound, out var rhsSound, out var isSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsSound).CommonInstance()!).Equals(lhsSound, rhsSound, equalsMask?.GetSubCrystal((int)AmbientSoundEvent_FieldIndex.Sound))) return false;
                }
                else if (!isSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.WeatherKeywords) ?? true))
            {
                if (!lhs.WeatherKeywords.SequenceEqualNullable(rhs.WeatherKeywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.MarkerKeywords) ?? true))
            {
                if (!lhs.MarkerKeywords.SequenceEqualNullable(rhs.MarkerKeywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.SwitchGroup) ?? true))
            {
                if (lhs.SwitchGroup != rhs.SwitchGroup) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.ReEvaluateIntervalUseCustom) ?? true))
            {
                if (lhs.ReEvaluateIntervalUseCustom != rhs.ReEvaluateIntervalUseCustom) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.ReEvaluateIntervalSeconds) ?? true))
            {
                if (!lhs.ReEvaluateIntervalSeconds.EqualsWithin(rhs.ReEvaluateIntervalSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.PlanetCustomizations) ?? true))
            {
                if (!lhs.PlanetCustomizations.SequenceEqual(rhs.PlanetCustomizations, (l, r) => ((AmbientSoundPlanetCustomizationCommon)((IAmbientSoundPlanetCustomizationGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)AmbientSoundEvent_FieldIndex.PlanetCustomizations)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAmbientSoundEventGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Sound);
            hash.Add(item.WeatherKeywords);
            hash.Add(item.MarkerKeywords);
            hash.Add(item.SwitchGroup);
            hash.Add(item.ReEvaluateIntervalUseCustom);
            hash.Add(item.ReEvaluateIntervalSeconds);
            hash.Add(item.PlanetCustomizations);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AmbientSoundEvent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAmbientSoundEventGetter obj)
        {
            foreach (var item in obj.Sound.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.WeatherKeywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.MarkerKeywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.PlanetCustomizations.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class AmbientSoundEventSetterTranslationCommon
    {
        public static readonly AmbientSoundEventSetterTranslationCommon Instance = new AmbientSoundEventSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAmbientSoundEvent item,
            IAmbientSoundEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)AmbientSoundEvent_FieldIndex.Sound);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.Sound) ?? true))
                    {
                        item.Sound = rhs.Sound.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AmbientSoundEvent_FieldIndex.Sound),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.WeatherKeywords) ?? true))
            {
                errorMask?.PushIndex((int)AmbientSoundEvent_FieldIndex.WeatherKeywords);
                try
                {
                    item.WeatherKeywords.SetTo(
                        rhs.WeatherKeywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.MarkerKeywords) ?? true))
            {
                errorMask?.PushIndex((int)AmbientSoundEvent_FieldIndex.MarkerKeywords);
                try
                {
                    item.MarkerKeywords.SetTo(
                        rhs.MarkerKeywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.SwitchGroup) ?? true))
            {
                item.SwitchGroup = rhs.SwitchGroup;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.ReEvaluateIntervalUseCustom) ?? true))
            {
                item.ReEvaluateIntervalUseCustom = rhs.ReEvaluateIntervalUseCustom;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.ReEvaluateIntervalSeconds) ?? true))
            {
                item.ReEvaluateIntervalSeconds = rhs.ReEvaluateIntervalSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AmbientSoundEvent_FieldIndex.PlanetCustomizations) ?? true))
            {
                errorMask?.PushIndex((int)AmbientSoundEvent_FieldIndex.PlanetCustomizations);
                try
                {
                    item.PlanetCustomizations.SetTo(
                        rhs.PlanetCustomizations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAmbientSoundEvent item,
            IAmbientSoundEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public AmbientSoundEvent DeepCopy(
            IAmbientSoundEventGetter item,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            AmbientSoundEvent ret = (AmbientSoundEvent)((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).GetNew();
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AmbientSoundEvent DeepCopy(
            IAmbientSoundEventGetter item,
            out AmbientSoundEvent.ErrorMask errorMask,
            AmbientSoundEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AmbientSoundEvent ret = (AmbientSoundEvent)((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).GetNew();
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AmbientSoundEvent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AmbientSoundEvent DeepCopy(
            IAmbientSoundEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AmbientSoundEvent ret = (AmbientSoundEvent)((AmbientSoundEventCommon)((IAmbientSoundEventGetter)item).CommonInstance()!).GetNew();
            ((AmbientSoundEventSetterTranslationCommon)((IAmbientSoundEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AmbientSoundEvent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AmbientSoundEvent_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AmbientSoundEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AmbientSoundEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AmbientSoundEventSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AmbientSoundEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAmbientSoundEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAmbientSoundEventGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAmbientSoundEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AmbientSoundEventBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly AmbientSoundEventBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IAmbientSoundEventGetter item,
            MutagenWriter writer)
        {
            var SoundItem = item.Sound;
            ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)SoundItem).BinaryWriteTranslator).Write(
                item: SoundItem,
                writer: writer);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.WeatherKeywords,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.MarkerKeywords,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GuidBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SwitchGroup);
            writer.Write(item.ReEvaluateIntervalUseCustom);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ReEvaluateIntervalSeconds);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAmbientSoundPlanetCustomizationGetter>.Instance.Write(
                writer: writer,
                items: item.PlanetCustomizations,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IAmbientSoundPlanetCustomizationGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AmbientSoundPlanetCustomizationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IAmbientSoundEventGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.ASAE),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAmbientSoundEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AmbientSoundEventBinaryCreateTranslation
    {
        public static readonly AmbientSoundEventBinaryCreateTranslation Instance = new AmbientSoundEventBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAmbientSoundEvent item,
            MutagenFrame frame)
        {
            item.Sound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
            item.WeatherKeywords.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.MarkerKeywords.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
            item.SwitchGroup = GuidBinaryTranslation.Instance.Parse(reader: frame);
            item.ReEvaluateIntervalUseCustom = frame.ReadBoolean();
            item.ReEvaluateIntervalSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.PlanetCustomizations.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AmbientSoundPlanetCustomization>.Instance.Parse(
                    amount: checked((int)frame.ReadUInt32()),
                    reader: frame,
                    transl: AmbientSoundPlanetCustomization.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AmbientSoundEventBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAmbientSoundEventGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientSoundEventBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AmbientSoundEventBinaryOverlay :
        PluginBinaryOverlay,
        IAmbientSoundEventGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AmbientSoundEvent_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AmbientSoundEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AmbientSoundEventCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AmbientSoundEventSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAmbientSoundEventGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAmbientSoundEventGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAmbientSoundEventGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AmbientSoundEventCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AmbientSoundEventBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AmbientSoundEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ISoundReferenceGetter Sound => SoundReferenceBinaryOverlay.SoundReferenceFactory(_structData, _package, default(TypedParseParams));
        #region WeatherKeywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> WeatherKeywords => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<IKeywordGetter>>(_structData.Slice(0x28), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
        protected int WeatherKeywordsEndingPos;
        #endregion
        #region MarkerKeywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> MarkerKeywords => BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<IKeywordGetter>>(_structData.Slice(WeatherKeywordsEndingPos), _package, 4, countLength: 4, (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
        protected int MarkerKeywordsEndingPos;
        #endregion
        public Guid SwitchGroup => new Guid(_structData.Slice(MarkerKeywordsEndingPos, 0x10).Slice(0, 16));
        public Boolean ReEvaluateIntervalUseCustom => _structData.Slice(MarkerKeywordsEndingPos + 0x10, 0x1)[0] >= 1;
        public Single ReEvaluateIntervalSeconds => _structData.Slice(MarkerKeywordsEndingPos + 0x11, 0x4).Float();
        #region PlanetCustomizations
        public IReadOnlyList<IAmbientSoundPlanetCustomizationGetter> PlanetCustomizations { get; private set; } = null!;
        protected int PlanetCustomizationsEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AmbientSoundEventBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void AmbientSoundEventParseEndingPositions(
            AmbientSoundEventBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.WeatherKeywordsEndingPos = 0x28 + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(0x28)) * 4 + 4;
            ret.MarkerKeywordsEndingPos = ret.WeatherKeywordsEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.WeatherKeywordsEndingPos)) * 4 + 4;
            {
                var tempStream = new OverlayStream(ret._structData, package)
                {
                    Position = ret.MarkerKeywordsEndingPos + 0x15
                };
                ret.PlanetCustomizations = BinaryOverlayList.EagerFactoryByPrependedCount(tempStream, package, 4, (s, p) => AmbientSoundPlanetCustomizationBinaryOverlay.AmbientSoundPlanetCustomizationFactory(s, p));
                ret.PlanetCustomizationsEndingPos = tempStream.Position;
            }
        }

        public static IAmbientSoundEventGetter AmbientSoundEventFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AmbientSoundEventBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            AmbientSoundEventParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IAmbientSoundEventGetter AmbientSoundEventFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AmbientSoundEventFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AmbientSoundEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAmbientSoundEventGetter rhs) return false;
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAmbientSoundEventGetter? obj)
        {
            return ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AmbientSoundEventCommon)((IAmbientSoundEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

