/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class FloraModification :
        AObjectModification,
        IEquatable<IFloraModificationGetter>,
        IFloraModificationInternal,
        ILoquiObjectSetter<FloraModification>
    {
        #region Ctor
        protected FloraModification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AObjectModProperty<Flora.Property>> _Properties = new ExtendedList<AObjectModProperty<Flora.Property>>();
        public ExtendedList<AObjectModProperty<Flora.Property>> Properties
        {
            get => this._Properties;
            init => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAObjectModPropertyGetter<Flora.Property>> IFloraModificationGetter.Properties => _Properties;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloraModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AObjectModification.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Description,
                TItem Model,
                TItem Unknown,
                TItem Unknown2,
                TItem AttachPoint,
                TItem AttachParentSlots,
                TItem Unknown3,
                TItem Includes,
                TItem TargetOmodKeywords,
                TItem FilterKeywords,
                TItem LooseMod,
                TItem Priority,
                TItem Filter,
                TItem Properties)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags,
                Components: Components,
                Name: Name,
                Description: Description,
                Model: Model,
                Unknown: Unknown,
                Unknown2: Unknown2,
                AttachPoint: AttachPoint,
                AttachParentSlots: AttachParentSlots,
                Unknown3: Unknown3,
                Includes: Includes,
                TargetOmodKeywords: TargetOmodKeywords,
                FilterKeywords: FilterKeywords,
                LooseMod: LooseMod,
                Priority: Priority,
                Filter: Filter)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>? Properties;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Properties);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FloraModification.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, AObjectModProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AObjectModProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FloraModification.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FloraModification.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FloraModification.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AObjectModification.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>? Properties;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FloraModification_FieldIndex enu = (FloraModification_FieldIndex)index;
                switch (enu)
                {
                    case FloraModification_FieldIndex.Properties:
                        return Properties;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FloraModification_FieldIndex enu = (FloraModification_FieldIndex)index;
                switch (enu)
                {
                    case FloraModification_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FloraModification_FieldIndex enu = (FloraModification_FieldIndex)index;
                switch (enu)
                {
                    case FloraModification_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Properties != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AObjectModification.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AObjectModProperty.TranslationMask? Properties;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = FloraModification_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FloraModificationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FloraModificationSetterCommon.Instance.RemapLinks(this, mapping);
        public FloraModification(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private FloraModification(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal FloraModification(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public FloraModification(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public FloraModification(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<FloraModification>.ToString(this);
        }

        protected override Type LinkType => typeof(IFloraModification);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFloraModificationGetter rhs) return false;
            return ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloraModificationGetter? obj)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloraModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloraModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FloraModification CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FloraModification();
            ((FloraModificationSetterCommon)((IFloraModificationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FloraModification item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FloraModificationSetterCommon)((IFloraModificationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FloraModification GetNew()
        {
            return new FloraModification();
        }

    }
    #endregion

    #region Interface
    public partial interface IFloraModification :
        IAObjectModificationInternal,
        IFloraModificationGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IFloraModificationInternal>,
        IModeled,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AObjectModProperty<Flora.Property>> Properties { get; }
    }

    public partial interface IFloraModificationInternal :
        IAObjectModificationInternal,
        IFloraModification,
        IFloraModificationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.OMOD)]
    public partial interface IFloraModificationGetter :
        IAObjectModificationGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFloraModificationGetter>,
        IMapsToGetter<IFloraModificationGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => FloraModification_Registration.Instance;
        IReadOnlyList<IAObjectModPropertyGetter<Flora.Property>> Properties { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FloraModificationMixIn
    {
        public static void Clear(this IFloraModificationInternal item)
        {
            ((FloraModificationSetterCommon)((IFloraModificationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FloraModification.Mask<bool> GetEqualsMask(
            this IFloraModificationGetter item,
            IFloraModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFloraModificationGetter item,
            string? name = null,
            FloraModification.Mask<bool>? printMask = null)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFloraModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FloraModification.Mask<bool>? printMask = null)
        {
            ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFloraModificationGetter item,
            IFloraModificationGetter rhs,
            FloraModification.TranslationMask? equalsMask = null)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFloraModificationInternal lhs,
            IFloraModificationGetter rhs,
            out FloraModification.ErrorMask errorMask,
            FloraModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FloraModification.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFloraModificationInternal lhs,
            IFloraModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FloraModification DeepCopy(
            this IFloraModificationGetter item,
            FloraModification.TranslationMask? copyMask = null)
        {
            return ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FloraModification DeepCopy(
            this IFloraModificationGetter item,
            out FloraModification.ErrorMask errorMask,
            FloraModification.TranslationMask? copyMask = null)
        {
            return ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FloraModification DeepCopy(
            this IFloraModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static FloraModification Duplicate(
            this IFloraModificationGetter item,
            FormKey formKey,
            FloraModification.TranslationMask? copyMask = null)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static FloraModification Duplicate(
            this IFloraModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFloraModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FloraModificationSetterCommon)((IFloraModificationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum FloraModification_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Description = 9,
        Model = 10,
        Unknown = 11,
        Unknown2 = 12,
        AttachPoint = 13,
        AttachParentSlots = 14,
        Unknown3 = 15,
        Includes = 16,
        TargetOmodKeywords = 17,
        FilterKeywords = 18,
        LooseMod = 19,
        Priority = 20,
        Filter = 21,
        Properties = 22,
    }
    #endregion

    #region Registration
    internal partial class FloraModification_Registration : ILoquiRegistration
    {
        public static readonly FloraModification_Registration Instance = new FloraModification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(FloraModification.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FloraModification.ErrorMask);

        public static readonly Type ClassType = typeof(FloraModification);

        public static readonly Type GetterType = typeof(IFloraModificationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFloraModification);

        public static readonly Type? InternalSetterType = typeof(IFloraModificationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.FloraModification";

        public const string Name = "FloraModification";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OMOD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.OMOD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FloraModificationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FloraModificationSetterCommon : AObjectModificationSetterCommon
    {
        public new static readonly FloraModificationSetterCommon Instance = new FloraModificationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFloraModificationInternal item)
        {
            ClearPartial();
            item.Properties.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAObjectModificationInternal item)
        {
            Clear(item: (IFloraModificationInternal)item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IFloraModificationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFloraModificationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFloraModification obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Properties.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFloraModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFloraModificationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FloraModificationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FloraModificationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FloraModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FloraModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FloraModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FloraModificationCommon : AObjectModificationCommon
    {
        public new static readonly FloraModificationCommon Instance = new FloraModificationCommon();

        public FloraModification.Mask<bool> GetEqualsMask(
            IFloraModificationGetter item,
            IFloraModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FloraModification.Mask<bool>(false);
            ((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFloraModificationGetter item,
            IFloraModificationGetter rhs,
            FloraModification.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFloraModificationGetter item,
            string? name = null,
            FloraModification.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFloraModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FloraModification.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FloraModification =>");
            }
            else
            {
                sb.AppendLine($"{name} (FloraModification) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFloraModificationGetter item,
            StructuredStringBuilder sb,
            FloraModification.Mask<bool>? printMask = null)
        {
            AObjectModificationCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Properties?.Overall ?? true)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Properties)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static FloraModification_FieldIndex ConvertFieldIndex(AObjectModification_FieldIndex index)
        {
            switch (index)
            {
                case AObjectModification_FieldIndex.MajorRecordFlagsRaw:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormKey:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.VersionControl:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.EditorID:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormVersion:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Version2:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.StarfieldMajorRecordFlags:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Components:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Name:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Description:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Model:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown2:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachPoint:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachParentSlots:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown3:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Includes:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.TargetOmodKeywords:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FilterKeywords:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.LooseMod:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Priority:
                    return (FloraModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Filter:
                    return (FloraModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new FloraModification_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (FloraModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (FloraModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new FloraModification_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FloraModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (FloraModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (FloraModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (FloraModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFloraModificationGetter? lhs,
            IFloraModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAObjectModificationGetter)lhs, (IAObjectModificationGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FloraModification_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqual(rhs.Properties, (l, r) => ((AObjectModPropertyCommon<Flora.Property>)((IAObjectModPropertyGetter<Flora.Property>)l).CommonInstance(typeof(Flora.Property))!).Equals(l, r, equalsMask?.GetSubCrystal((int)FloraModification_FieldIndex.Properties)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAObjectModificationGetter? lhs,
            IAObjectModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloraModificationGetter?)lhs,
                rhs: rhs as IFloraModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloraModificationGetter?)lhs,
                rhs: rhs as IFloraModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloraModificationGetter?)lhs,
                rhs: rhs as IFloraModificationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFloraModificationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Properties);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAObjectModificationGetter item)
        {
            return GetHashCode(item: (IFloraModificationGetter)item);
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraModificationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraModificationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FloraModification.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFloraModificationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Properties.WhereCastable<IAObjectModPropertyGetter<Flora.Property>, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public FloraModification Duplicate(
            IFloraModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new FloraModification(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override AObjectModification Duplicate(
            IAObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFloraModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFloraModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFloraModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FloraModificationSetterTranslationCommon : AObjectModificationSetterTranslationCommon
    {
        public new static readonly FloraModificationSetterTranslationCommon Instance = new FloraModificationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFloraModificationInternal item,
            IFloraModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFloraModification item,
            IFloraModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAObjectModification)item,
                (IAObjectModificationGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FloraModification_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)FloraModification_FieldIndex.Properties);
                try
                {
                    item.Properties.SetTo(
                        rhs.Properties
                        .Select(r =>
                        {
                            return r.DeepCopy<Flora.Property>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFloraModification item,
            IFloraModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAObjectModificationInternal item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModificationInternal)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAObjectModification item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModification)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModificationInternal)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModification)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModificationInternal)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraModification)item,
                rhs: (IFloraModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FloraModification DeepCopy(
            IFloraModificationGetter item,
            FloraModification.TranslationMask? copyMask = null)
        {
            FloraModification ret = (FloraModification)((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).GetNew();
            ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FloraModification DeepCopy(
            IFloraModificationGetter item,
            out FloraModification.ErrorMask errorMask,
            FloraModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FloraModification ret = (FloraModification)((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).GetNew();
            ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FloraModification.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FloraModification DeepCopy(
            IFloraModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FloraModification ret = (FloraModification)((FloraModificationCommon)((IFloraModificationGetter)item).CommonInstance()!).GetNew();
            ((FloraModificationSetterTranslationCommon)((IFloraModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class FloraModification
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FloraModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FloraModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FloraModificationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraModificationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FloraModificationBinaryWriteTranslation :
        AObjectModificationBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FloraModificationBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IFloraModificationGetter item,
            MutagenWriter writer)
        {
            AObjectModificationBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IFloraModificationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.OMOD,
                writeEmbedded: AObjectModificationBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFloraModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAObjectModificationGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloraModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloraModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloraModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FloraModificationBinaryCreateTranslation : AObjectModificationBinaryCreateTranslation
    {
        public new static readonly FloraModificationBinaryCreateTranslation Instance = new FloraModificationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.OMOD;
        public static void FillBinaryStructs(
            IFloraModificationInternal item,
            MutagenFrame frame)
        {
            AObjectModificationBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FloraModificationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FloraModificationBinaryOverlay :
        AObjectModificationBinaryOverlay,
        IFloraModificationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FloraModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FloraModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraModificationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FloraModificationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloraModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloraModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFloraModification);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FloraModificationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFloraModificationGetter FloraModificationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FloraModificationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFloraModificationGetter FloraModificationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FloraModificationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloraModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<FloraModification>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFloraModificationGetter rhs) return false;
            return ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloraModificationGetter? obj)
        {
            return ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloraModificationCommon)((IFloraModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

