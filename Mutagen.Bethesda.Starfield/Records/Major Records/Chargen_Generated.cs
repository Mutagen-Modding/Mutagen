/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Chargen :
        IChargen,
        IEquatable<IChargenGetter>,
        ILoquiObjectSetter<Chargen>
    {
        #region Ctor
        public Chargen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NNAM;
        public MemorySlice<Byte>? NNAM
        {
            get => this._NNAM;
            set => this._NNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IChargenGetter.NNAM => this.NNAM;
        #endregion
        #region RacePresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INpcGetter>> _RacePresets = new ExtendedList<IFormLinkGetter<INpcGetter>>();
        public ExtendedList<IFormLinkGetter<INpcGetter>> RacePresets
        {
            get => this._RacePresets;
            init => this._RacePresets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>> IChargenGetter.RacePresets => _RacePresets;
        #endregion

        #endregion
        #region MorphGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MorphGroup> _MorphGroups = new ExtendedList<MorphGroup>();
        public ExtendedList<MorphGroup> MorphGroups
        {
            get => this._MorphGroups;
            init => this._MorphGroups = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMorphGroupGetter> IChargenGetter.MorphGroups => _MorphGroups;
        #endregion

        #endregion
        #region FaceMorphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FaceMorph> _FaceMorphs = new ExtendedList<FaceMorph>();
        public ExtendedList<FaceMorph> FaceMorphs
        {
            get => this._FaceMorphs;
            init => this._FaceMorphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFaceMorphGetter> IChargenGetter.FaceMorphs => _FaceMorphs;
        #endregion

        #endregion
        #region FaceDials
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FaceDial> _FaceDials = new ExtendedList<FaceDial>();
        public ExtendedList<FaceDial> FaceDials
        {
            get => this._FaceDials;
            init => this._FaceDials = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFaceDialGetter> IChargenGetter.FaceDials => _FaceDials;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ChargenMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IChargenGetter rhs) return false;
            return ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IChargenGetter? obj)
        {
            return ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NNAM = initialValue;
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MorphGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>());
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>());
                this.FaceDials = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceDial.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FaceDial.Mask<TItem>?>>());
            }

            public Mask(
                TItem NNAM,
                TItem RacePresets,
                TItem MorphGroups,
                TItem FaceMorphs,
                TItem FaceDials)
            {
                this.NNAM = NNAM;
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RacePresets, Enumerable.Empty<(int Index, TItem Value)>());
                this.MorphGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>(MorphGroups, Enumerable.Empty<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>());
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>(FaceMorphs, Enumerable.Empty<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>());
                this.FaceDials = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceDial.Mask<TItem>?>>?>(FaceDials, Enumerable.Empty<MaskItemIndexed<TItem, FaceDial.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NNAM;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RacePresets;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>? MorphGroups;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>? FaceMorphs;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceDial.Mask<TItem>?>>?>? FaceDials;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NNAM, rhs.NNAM)) return false;
                if (!object.Equals(this.RacePresets, rhs.RacePresets)) return false;
                if (!object.Equals(this.MorphGroups, rhs.MorphGroups)) return false;
                if (!object.Equals(this.FaceMorphs, rhs.FaceMorphs)) return false;
                if (!object.Equals(this.FaceDials, rhs.FaceDials)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NNAM);
                hash.Add(this.RacePresets);
                hash.Add(this.MorphGroups);
                hash.Add(this.FaceMorphs);
                hash.Add(this.FaceDials);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NNAM)) return false;
                if (this.RacePresets != null)
                {
                    if (!eval(this.RacePresets.Overall)) return false;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MorphGroups != null)
                {
                    if (!eval(this.MorphGroups.Overall)) return false;
                    if (this.MorphGroups.Specific != null)
                    {
                        foreach (var item in this.MorphGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceMorphs != null)
                {
                    if (!eval(this.FaceMorphs.Overall)) return false;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceDials != null)
                {
                    if (!eval(this.FaceDials.Overall)) return false;
                    if (this.FaceDials.Specific != null)
                    {
                        foreach (var item in this.FaceDials.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NNAM)) return true;
                if (this.RacePresets != null)
                {
                    if (eval(this.RacePresets.Overall)) return true;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MorphGroups != null)
                {
                    if (eval(this.MorphGroups.Overall)) return true;
                    if (this.MorphGroups.Specific != null)
                    {
                        foreach (var item in this.MorphGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceMorphs != null)
                {
                    if (eval(this.FaceMorphs.Overall)) return true;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceDials != null)
                {
                    if (eval(this.FaceDials.Overall)) return true;
                    if (this.FaceDials.Specific != null)
                    {
                        foreach (var item in this.FaceDials.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Chargen.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NNAM = eval(this.NNAM);
                if (RacePresets != null)
                {
                    obj.RacePresets = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RacePresets.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RacePresets.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RacePresets.Specific = l;
                        foreach (var item in RacePresets.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MorphGroups != null)
                {
                    obj.MorphGroups = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MorphGroup.Mask<R>?>>?>(eval(this.MorphGroups.Overall), Enumerable.Empty<MaskItemIndexed<R, MorphGroup.Mask<R>?>>());
                    if (MorphGroups.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MorphGroup.Mask<R>?>>();
                        obj.MorphGroups.Specific = l;
                        foreach (var item in MorphGroups.Specific)
                        {
                            MaskItemIndexed<R, MorphGroup.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MorphGroup.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (FaceMorphs != null)
                {
                    obj.FaceMorphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FaceMorph.Mask<R>?>>?>(eval(this.FaceMorphs.Overall), Enumerable.Empty<MaskItemIndexed<R, FaceMorph.Mask<R>?>>());
                    if (FaceMorphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FaceMorph.Mask<R>?>>();
                        obj.FaceMorphs.Specific = l;
                        foreach (var item in FaceMorphs.Specific)
                        {
                            MaskItemIndexed<R, FaceMorph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FaceMorph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (FaceDials != null)
                {
                    obj.FaceDials = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FaceDial.Mask<R>?>>?>(eval(this.FaceDials.Overall), Enumerable.Empty<MaskItemIndexed<R, FaceDial.Mask<R>?>>());
                    if (FaceDials.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FaceDial.Mask<R>?>>();
                        obj.FaceDials.Specific = l;
                        foreach (var item in FaceDials.Specific)
                        {
                            MaskItemIndexed<R, FaceDial.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FaceDial.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Chargen.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Chargen.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Chargen.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NNAM ?? true)
                    {
                        sb.AppendItem(NNAM, "NNAM");
                    }
                    if ((printMask?.RacePresets?.Overall ?? true)
                        && RacePresets is {} RacePresetsItem)
                    {
                        sb.AppendLine("RacePresets =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RacePresetsItem.Overall);
                            if (RacePresetsItem.Specific != null)
                            {
                                foreach (var subItem in RacePresetsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MorphGroups?.Overall ?? true)
                        && MorphGroups is {} MorphGroupsItem)
                    {
                        sb.AppendLine("MorphGroups =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MorphGroupsItem.Overall);
                            if (MorphGroupsItem.Specific != null)
                            {
                                foreach (var subItem in MorphGroupsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FaceMorphs?.Overall ?? true)
                        && FaceMorphs is {} FaceMorphsItem)
                    {
                        sb.AppendLine("FaceMorphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceMorphsItem.Overall);
                            if (FaceMorphsItem.Specific != null)
                            {
                                foreach (var subItem in FaceMorphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FaceDials?.Overall ?? true)
                        && FaceDials is {} FaceDialsItem)
                    {
                        sb.AppendLine("FaceDials =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceDialsItem.Overall);
                            if (FaceDialsItem.Specific != null)
                            {
                                foreach (var subItem in FaceDialsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NNAM;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RacePresets;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>? MorphGroups;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>? FaceMorphs;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceDial.ErrorMask?>>?>? FaceDials;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Chargen_FieldIndex enu = (Chargen_FieldIndex)index;
                switch (enu)
                {
                    case Chargen_FieldIndex.NNAM:
                        return NNAM;
                    case Chargen_FieldIndex.RacePresets:
                        return RacePresets;
                    case Chargen_FieldIndex.MorphGroups:
                        return MorphGroups;
                    case Chargen_FieldIndex.FaceMorphs:
                        return FaceMorphs;
                    case Chargen_FieldIndex.FaceDials:
                        return FaceDials;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Chargen_FieldIndex enu = (Chargen_FieldIndex)index;
                switch (enu)
                {
                    case Chargen_FieldIndex.NNAM:
                        this.NNAM = ex;
                        break;
                    case Chargen_FieldIndex.RacePresets:
                        this.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Chargen_FieldIndex.MorphGroups:
                        this.MorphGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>(ex, null);
                        break;
                    case Chargen_FieldIndex.FaceMorphs:
                        this.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>(ex, null);
                        break;
                    case Chargen_FieldIndex.FaceDials:
                        this.FaceDials = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceDial.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Chargen_FieldIndex enu = (Chargen_FieldIndex)index;
                switch (enu)
                {
                    case Chargen_FieldIndex.NNAM:
                        this.NNAM = (Exception?)obj;
                        break;
                    case Chargen_FieldIndex.RacePresets:
                        this.RacePresets = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Chargen_FieldIndex.MorphGroups:
                        this.MorphGroups = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>)obj;
                        break;
                    case Chargen_FieldIndex.FaceMorphs:
                        this.FaceMorphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>)obj;
                        break;
                    case Chargen_FieldIndex.FaceDials:
                        this.FaceDials = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceDial.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NNAM != null) return true;
                if (RacePresets != null) return true;
                if (MorphGroups != null) return true;
                if (FaceMorphs != null) return true;
                if (FaceDials != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NNAM, "NNAM");
                }
                if (RacePresets is {} RacePresetsItem)
                {
                    sb.AppendLine("RacePresets =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RacePresetsItem.Overall);
                        if (RacePresetsItem.Specific != null)
                        {
                            foreach (var subItem in RacePresetsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MorphGroups is {} MorphGroupsItem)
                {
                    sb.AppendLine("MorphGroups =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MorphGroupsItem.Overall);
                        if (MorphGroupsItem.Specific != null)
                        {
                            foreach (var subItem in MorphGroupsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (FaceMorphs is {} FaceMorphsItem)
                {
                    sb.AppendLine("FaceMorphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceMorphsItem.Overall);
                        if (FaceMorphsItem.Specific != null)
                        {
                            foreach (var subItem in FaceMorphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (FaceDials is {} FaceDialsItem)
                {
                    sb.AppendLine("FaceDials =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceDialsItem.Overall);
                        if (FaceDialsItem.Specific != null)
                        {
                            foreach (var subItem in FaceDialsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NNAM = this.NNAM.Combine(rhs.NNAM);
                ret.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RacePresets?.Overall, rhs.RacePresets?.Overall), Noggog.ExceptionExt.Combine(this.RacePresets?.Specific, rhs.RacePresets?.Specific));
                ret.MorphGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MorphGroups?.Overall, rhs.MorphGroups?.Overall), Noggog.ExceptionExt.Combine(this.MorphGroups?.Specific, rhs.MorphGroups?.Specific));
                ret.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceMorphs?.Overall, rhs.FaceMorphs?.Overall), Noggog.ExceptionExt.Combine(this.FaceMorphs?.Specific, rhs.FaceMorphs?.Specific));
                ret.FaceDials = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceDial.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceDials?.Overall, rhs.FaceDials?.Overall), Noggog.ExceptionExt.Combine(this.FaceDials?.Specific, rhs.FaceDials?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NNAM;
            public bool RacePresets;
            public MorphGroup.TranslationMask? MorphGroups;
            public FaceMorph.TranslationMask? FaceMorphs;
            public FaceDial.TranslationMask? FaceDials;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NNAM = defaultOn;
                this.RacePresets = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NNAM, null));
                ret.Add((RacePresets, null));
                ret.Add((MorphGroups == null ? DefaultOn : !MorphGroups.GetCrystal().CopyNothing, MorphGroups?.GetCrystal()));
                ret.Add((FaceMorphs == null ? DefaultOn : !FaceMorphs.GetCrystal().CopyNothing, FaceMorphs?.GetCrystal()));
                ret.Add((FaceDials == null ? DefaultOn : !FaceDials.GetCrystal().CopyNothing, FaceDials?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ChargenCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ChargenSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ChargenBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Chargen CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Chargen();
            ((ChargenSetterCommon)((IChargenGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Chargen item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ChargenSetterCommon)((IChargenGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Chargen GetNew()
        {
            return new Chargen();
        }

    }
    #endregion

    #region Interface
    public partial interface IChargen :
        IChargenGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IChargen>
    {
        new MemorySlice<Byte>? NNAM { get; set; }
        new ExtendedList<IFormLinkGetter<INpcGetter>> RacePresets { get; }
        new ExtendedList<MorphGroup> MorphGroups { get; }
        new ExtendedList<FaceMorph> FaceMorphs { get; }
        new ExtendedList<FaceDial> FaceDials { get; }
    }

    public partial interface IChargenGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IChargenGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Chargen_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? NNAM { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>> RacePresets { get; }
        IReadOnlyList<IMorphGroupGetter> MorphGroups { get; }
        IReadOnlyList<IFaceMorphGetter> FaceMorphs { get; }
        IReadOnlyList<IFaceDialGetter> FaceDials { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ChargenMixIn
    {
        public static void Clear(this IChargen item)
        {
            ((ChargenSetterCommon)((IChargenGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Chargen.Mask<bool> GetEqualsMask(
            this IChargenGetter item,
            IChargenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ChargenCommon)((IChargenGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IChargenGetter item,
            string? name = null,
            Chargen.Mask<bool>? printMask = null)
        {
            return ((ChargenCommon)((IChargenGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IChargenGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Chargen.Mask<bool>? printMask = null)
        {
            ((ChargenCommon)((IChargenGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IChargenGetter item,
            IChargenGetter rhs,
            Chargen.TranslationMask? equalsMask = null)
        {
            return ((ChargenCommon)((IChargenGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IChargen lhs,
            IChargenGetter rhs)
        {
            ((ChargenSetterTranslationCommon)((IChargenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IChargen lhs,
            IChargenGetter rhs,
            Chargen.TranslationMask? copyMask = null)
        {
            ((ChargenSetterTranslationCommon)((IChargenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IChargen lhs,
            IChargenGetter rhs,
            out Chargen.ErrorMask errorMask,
            Chargen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ChargenSetterTranslationCommon)((IChargenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Chargen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IChargen lhs,
            IChargenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ChargenSetterTranslationCommon)((IChargenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Chargen DeepCopy(
            this IChargenGetter item,
            Chargen.TranslationMask? copyMask = null)
        {
            return ((ChargenSetterTranslationCommon)((IChargenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Chargen DeepCopy(
            this IChargenGetter item,
            out Chargen.ErrorMask errorMask,
            Chargen.TranslationMask? copyMask = null)
        {
            return ((ChargenSetterTranslationCommon)((IChargenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Chargen DeepCopy(
            this IChargenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ChargenSetterTranslationCommon)((IChargenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IChargen item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ChargenSetterCommon)((IChargenGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Chargen_FieldIndex
    {
        NNAM = 0,
        RacePresets = 1,
        MorphGroups = 2,
        FaceMorphs = 3,
        FaceDials = 4,
    }
    #endregion

    #region Registration
    internal partial class Chargen_Registration : ILoquiRegistration
    {
        public static readonly Chargen_Registration Instance = new Chargen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Chargen.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Chargen.ErrorMask);

        public static readonly Type ClassType = typeof(Chargen);

        public static readonly Type GetterType = typeof(IChargenGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IChargen);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Chargen";

        public const string Name = "Chargen";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.NNAM,
                RecordTypes.RPRM,
                RecordTypes.MPGN,
                RecordTypes.MPGM,
                RecordTypes.FMRI,
                RecordTypes.FMRU,
                RecordTypes.FMRN,
                RecordTypes.FMRS,
                RecordTypes.FMSR,
                RecordTypes.FDSI,
                RecordTypes.FDSL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ChargenBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ChargenSetterCommon
    {
        public static readonly ChargenSetterCommon Instance = new ChargenSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IChargen item)
        {
            ClearPartial();
            item.NNAM = default;
            item.RacePresets.Clear();
            item.MorphGroups.Clear();
            item.FaceMorphs.Clear();
            item.FaceDials.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IChargen obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.RacePresets.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IChargen item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame.ReadSubrecord(RecordTypes.NAM0);
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ChargenBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ChargenCommon
    {
        public static readonly ChargenCommon Instance = new ChargenCommon();

        public Chargen.Mask<bool> GetEqualsMask(
            IChargenGetter item,
            IChargenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Chargen.Mask<bool>(false);
            ((ChargenCommon)((IChargenGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IChargenGetter item,
            IChargenGetter rhs,
            Chargen.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NNAM = MemorySliceExt.SequenceEqual(item.NNAM, rhs.NNAM);
            ret.RacePresets = item.RacePresets.CollectionEqualsHelper(
                rhs.RacePresets,
                (l, r) => object.Equals(l, r),
                include);
            ret.MorphGroups = item.MorphGroups.CollectionEqualsHelper(
                rhs.MorphGroups,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FaceMorphs = item.FaceMorphs.CollectionEqualsHelper(
                rhs.FaceMorphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FaceDials = item.FaceDials.CollectionEqualsHelper(
                rhs.FaceDials,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IChargenGetter item,
            string? name = null,
            Chargen.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IChargenGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Chargen.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Chargen =>");
            }
            else
            {
                sb.AppendLine($"{name} (Chargen) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IChargenGetter item,
            StructuredStringBuilder sb,
            Chargen.Mask<bool>? printMask = null)
        {
            if ((printMask?.NNAM ?? true)
                && item.NNAM is {} NNAMItem)
            {
                sb.AppendLine($"NNAM => {SpanExt.ToHexString(NNAMItem)}");
            }
            if (printMask?.RacePresets?.Overall ?? true)
            {
                sb.AppendLine("RacePresets =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RacePresets)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.MorphGroups?.Overall ?? true)
            {
                sb.AppendLine("MorphGroups =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MorphGroups)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FaceMorphs?.Overall ?? true)
            {
                sb.AppendLine("FaceMorphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceMorphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FaceDials?.Overall ?? true)
            {
                sb.AppendLine("FaceDials =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceDials)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IChargenGetter? lhs,
            IChargenGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Chargen_FieldIndex.NNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NNAM, rhs.NNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Chargen_FieldIndex.RacePresets) ?? true))
            {
                if (!lhs.RacePresets.SequenceEqualNullable(rhs.RacePresets)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Chargen_FieldIndex.MorphGroups) ?? true))
            {
                if (!lhs.MorphGroups.SequenceEqual(rhs.MorphGroups, (l, r) => ((MorphGroupCommon)((IMorphGroupGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Chargen_FieldIndex.MorphGroups)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Chargen_FieldIndex.FaceMorphs) ?? true))
            {
                if (!lhs.FaceMorphs.SequenceEqual(rhs.FaceMorphs, (l, r) => ((FaceMorphCommon)((IFaceMorphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Chargen_FieldIndex.FaceMorphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Chargen_FieldIndex.FaceDials) ?? true))
            {
                if (!lhs.FaceDials.SequenceEqual(rhs.FaceDials, (l, r) => ((FaceDialCommon)((IFaceDialGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Chargen_FieldIndex.FaceDials)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IChargenGetter item)
        {
            var hash = new HashCode();
            if (item.NNAM is {} NNAMItem)
            {
                hash.Add(NNAMItem);
            }
            hash.Add(item.RacePresets);
            hash.Add(item.MorphGroups);
            hash.Add(item.FaceMorphs);
            hash.Add(item.FaceDials);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Chargen.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IChargenGetter obj)
        {
            foreach (var item in obj.RacePresets)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ChargenSetterTranslationCommon
    {
        public static readonly ChargenSetterTranslationCommon Instance = new ChargenSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IChargen item,
            IChargenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Chargen_FieldIndex.NNAM) ?? true))
            {
                if(rhs.NNAM is {} NNAMrhs)
                {
                    item.NNAM = NNAMrhs.ToArray();
                }
                else
                {
                    item.NNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Chargen_FieldIndex.RacePresets) ?? true))
            {
                errorMask?.PushIndex((int)Chargen_FieldIndex.RacePresets);
                try
                {
                    item.RacePresets.SetTo(
                        rhs.RacePresets
                            .Select(b => (IFormLinkGetter<INpcGetter>)new FormLink<INpcGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Chargen_FieldIndex.MorphGroups) ?? true))
            {
                errorMask?.PushIndex((int)Chargen_FieldIndex.MorphGroups);
                try
                {
                    item.MorphGroups.SetTo(
                        rhs.MorphGroups
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Chargen_FieldIndex.FaceMorphs) ?? true))
            {
                errorMask?.PushIndex((int)Chargen_FieldIndex.FaceMorphs);
                try
                {
                    item.FaceMorphs.SetTo(
                        rhs.FaceMorphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Chargen_FieldIndex.FaceDials) ?? true))
            {
                errorMask?.PushIndex((int)Chargen_FieldIndex.FaceDials);
                try
                {
                    item.FaceDials.SetTo(
                        rhs.FaceDials
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IChargen item,
            IChargenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Chargen DeepCopy(
            IChargenGetter item,
            Chargen.TranslationMask? copyMask = null)
        {
            Chargen ret = (Chargen)((ChargenCommon)((IChargenGetter)item).CommonInstance()!).GetNew();
            ((ChargenSetterTranslationCommon)((IChargenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Chargen DeepCopy(
            IChargenGetter item,
            out Chargen.ErrorMask errorMask,
            Chargen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Chargen ret = (Chargen)((ChargenCommon)((IChargenGetter)item).CommonInstance()!).GetNew();
            ((ChargenSetterTranslationCommon)((IChargenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Chargen.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Chargen DeepCopy(
            IChargenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Chargen ret = (Chargen)((ChargenCommon)((IChargenGetter)item).CommonInstance()!).GetNew();
            ((ChargenSetterTranslationCommon)((IChargenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Chargen
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Chargen_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Chargen_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ChargenCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ChargenSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ChargenSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IChargenGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IChargenGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IChargenGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ChargenBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ChargenBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IChargenGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NNAM,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.RacePresets,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.RPRM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMorphGroupGetter>.Instance.Write(
                writer: writer,
                items: item.MorphGroups,
                transl: (MutagenWriter subWriter, IMorphGroupGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MorphGroupBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFaceMorphGetter>.Instance.Write(
                writer: writer,
                items: item.FaceMorphs,
                transl: (MutagenWriter subWriter, IFaceMorphGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FaceMorphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFaceDialGetter>.Instance.Write(
                writer: writer,
                items: item.FaceDials,
                transl: (MutagenWriter subWriter, IFaceDialGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FaceDialBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IChargenGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.NAM0)) { } // Start Marker
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IChargenGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ChargenBinaryCreateTranslation
    {
        public static readonly ChargenBinaryCreateTranslation Instance = new ChargenBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IChargen item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Chargen_FieldIndex.NNAM;
                }
                case RecordTypeInts.RPRM:
                {
                    item.RacePresets.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.RPRM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Chargen_FieldIndex.RacePresets;
                }
                case RecordTypeInts.MPGN:
                case RecordTypeInts.MPGM:
                {
                    item.MorphGroups.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MorphGroup>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MorphGroup_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MorphGroup.TryCreateFromBinary));
                    return (int)Chargen_FieldIndex.MorphGroups;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRU:
                case RecordTypeInts.FMRN:
                case RecordTypeInts.FMRS:
                case RecordTypeInts.FMSR:
                {
                    item.FaceMorphs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FaceMorph>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FaceMorph_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FaceMorph.TryCreateFromBinary));
                    return (int)Chargen_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.FDSI:
                case RecordTypeInts.FDSL:
                {
                    item.FaceDials.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FaceDial>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FaceDial_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FaceDial.TryCreateFromBinary));
                    return (int)Chargen_FieldIndex.FaceDials;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ChargenBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IChargenGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ChargenBinaryOverlay :
        PluginBinaryOverlay,
        IChargenGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Chargen_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Chargen_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ChargenCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ChargenSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IChargenGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IChargenGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IChargenGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ChargenCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ChargenBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ChargenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region NNAM
        private int? _NNAMLocation;
        public ReadOnlyMemorySlice<Byte>? NNAM => _NNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<INpcGetter>> RacePresets { get; private set; } = [];
        public IReadOnlyList<IMorphGroupGetter> MorphGroups { get; private set; } = [];
        public IReadOnlyList<IFaceMorphGetter> FaceMorphs { get; private set; } = [];
        public IReadOnlyList<IFaceDialGetter> FaceDials { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ChargenBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IChargenGetter ChargenFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream.ReadSubrecord(RecordTypes.NAM0);
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ChargenBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IChargenGetter ChargenFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ChargenFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    _NNAMLocation = (stream.Position - offset);
                    return (int)Chargen_FieldIndex.NNAM;
                }
                case RecordTypeInts.RPRM:
                {
                    this.RacePresets = BinaryOverlayList.FactoryByArray<IFormLinkGetter<INpcGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.RPRM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Chargen_FieldIndex.RacePresets;
                }
                case RecordTypeInts.MPGN:
                case RecordTypeInts.MPGM:
                {
                    this.MorphGroups = this.ParseRepeatedTypelessSubrecord<IMorphGroupGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MorphGroup_Registration.TriggerSpecs,
                        factory: MorphGroupBinaryOverlay.MorphGroupFactory);
                    return (int)Chargen_FieldIndex.MorphGroups;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRU:
                case RecordTypeInts.FMRN:
                case RecordTypeInts.FMRS:
                case RecordTypeInts.FMSR:
                {
                    this.FaceMorphs = this.ParseRepeatedTypelessSubrecord<IFaceMorphGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: FaceMorph_Registration.TriggerSpecs,
                        factory: FaceMorphBinaryOverlay.FaceMorphFactory);
                    return (int)Chargen_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.FDSI:
                case RecordTypeInts.FDSL:
                {
                    this.FaceDials = this.ParseRepeatedTypelessSubrecord<IFaceDialGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: FaceDial_Registration.TriggerSpecs,
                        factory: FaceDialBinaryOverlay.FaceDialFactory);
                    return (int)Chargen_FieldIndex.FaceDials;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ChargenMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IChargenGetter rhs) return false;
            return ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IChargenGetter? obj)
        {
            return ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ChargenCommon)((IChargenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

