/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Assets;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DebrisModel :
        IDebrisModel,
        IEquatable<IDebrisModelGetter>,
        ILoquiObjectSetter<DebrisModel>
    {
        #region Ctor
        public DebrisModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Percentage
        public Byte Percentage { get; set; } = default(Byte);
        #endregion
        #region ModelFilename
        public AssetLink<StarfieldModelAssetType> ModelFilename { get; set; } = new AssetLink<StarfieldModelAssetType>();
        AssetLinkGetter<StarfieldModelAssetType> IDebrisModelGetter.ModelFilename => this.ModelFilename;
        #endregion
        #region HasCollision
        public Boolean HasCollision { get; set; } = default(Boolean);
        #endregion
        #region TextureFileHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFileHashes;
        public MemorySlice<Byte>? TextureFileHashes
        {
            get => this._TextureFileHashes;
            set => this._TextureFileHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDebrisModelGetter.TextureFileHashes => this.TextureFileHashes;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DebrisModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDebrisModelGetter rhs) return false;
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDebrisModelGetter? obj)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Percentage = initialValue;
                this.ModelFilename = initialValue;
                this.HasCollision = initialValue;
                this.TextureFileHashes = initialValue;
            }

            public Mask(
                TItem Percentage,
                TItem ModelFilename,
                TItem HasCollision,
                TItem TextureFileHashes)
            {
                this.Percentage = Percentage;
                this.ModelFilename = ModelFilename;
                this.HasCollision = HasCollision;
                this.TextureFileHashes = TextureFileHashes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Percentage;
            public TItem ModelFilename;
            public TItem HasCollision;
            public TItem TextureFileHashes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Percentage, rhs.Percentage)) return false;
                if (!object.Equals(this.ModelFilename, rhs.ModelFilename)) return false;
                if (!object.Equals(this.HasCollision, rhs.HasCollision)) return false;
                if (!object.Equals(this.TextureFileHashes, rhs.TextureFileHashes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Percentage);
                hash.Add(this.ModelFilename);
                hash.Add(this.HasCollision);
                hash.Add(this.TextureFileHashes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Percentage)) return false;
                if (!eval(this.ModelFilename)) return false;
                if (!eval(this.HasCollision)) return false;
                if (!eval(this.TextureFileHashes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Percentage)) return true;
                if (eval(this.ModelFilename)) return true;
                if (eval(this.HasCollision)) return true;
                if (eval(this.TextureFileHashes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DebrisModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Percentage = eval(this.Percentage);
                obj.ModelFilename = eval(this.ModelFilename);
                obj.HasCollision = eval(this.HasCollision);
                obj.TextureFileHashes = eval(this.TextureFileHashes);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DebrisModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DebrisModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DebrisModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Percentage ?? true)
                    {
                        sb.AppendItem(Percentage, "Percentage");
                    }
                    if (printMask?.ModelFilename ?? true)
                    {
                        sb.AppendItem(ModelFilename, "ModelFilename");
                    }
                    if (printMask?.HasCollision ?? true)
                    {
                        sb.AppendItem(HasCollision, "HasCollision");
                    }
                    if (printMask?.TextureFileHashes ?? true)
                    {
                        sb.AppendItem(TextureFileHashes, "TextureFileHashes");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Percentage;
            public Exception? ModelFilename;
            public Exception? HasCollision;
            public Exception? TextureFileHashes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        return Percentage;
                    case DebrisModel_FieldIndex.ModelFilename:
                        return ModelFilename;
                    case DebrisModel_FieldIndex.HasCollision:
                        return HasCollision;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        return TextureFileHashes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        this.Percentage = ex;
                        break;
                    case DebrisModel_FieldIndex.ModelFilename:
                        this.ModelFilename = ex;
                        break;
                    case DebrisModel_FieldIndex.HasCollision:
                        this.HasCollision = ex;
                        break;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DebrisModel_FieldIndex enu = (DebrisModel_FieldIndex)index;
                switch (enu)
                {
                    case DebrisModel_FieldIndex.Percentage:
                        this.Percentage = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.ModelFilename:
                        this.ModelFilename = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.HasCollision:
                        this.HasCollision = (Exception?)obj;
                        break;
                    case DebrisModel_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Percentage != null) return true;
                if (ModelFilename != null) return true;
                if (HasCollision != null) return true;
                if (TextureFileHashes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Percentage, "Percentage");
                }
                {
                    sb.AppendItem(ModelFilename, "ModelFilename");
                }
                {
                    sb.AppendItem(HasCollision, "HasCollision");
                }
                {
                    sb.AppendItem(TextureFileHashes, "TextureFileHashes");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Percentage = this.Percentage.Combine(rhs.Percentage);
                ret.ModelFilename = this.ModelFilename.Combine(rhs.ModelFilename);
                ret.HasCollision = this.HasCollision.Combine(rhs.HasCollision);
                ret.TextureFileHashes = this.TextureFileHashes.Combine(rhs.TextureFileHashes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Percentage;
            public bool ModelFilename;
            public bool HasCollision;
            public bool TextureFileHashes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Percentage = defaultOn;
                this.ModelFilename = defaultOn;
                this.HasCollision = defaultOn;
                this.TextureFileHashes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Percentage, null));
                ret.Add((ModelFilename, null));
                ret.Add((HasCollision, null));
                ret.Add((TextureFileHashes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => DebrisModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => DebrisModelSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => DebrisModelSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => DebrisModelSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DebrisModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DebrisModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DebrisModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DebrisModel();
            ((DebrisModelSetterCommon)((IDebrisModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DebrisModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DebrisModel GetNew()
        {
            return new DebrisModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IDebrisModel :
        IAssetLinkContainer,
        IDebrisModelGetter,
        ILoquiObjectSetter<IDebrisModel>
    {
        new Byte Percentage { get; set; }
        new AssetLink<StarfieldModelAssetType> ModelFilename { get; set; }
        new Boolean HasCollision { get; set; }
        new MemorySlice<Byte>? TextureFileHashes { get; set; }
    }

    public partial interface IDebrisModelGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IBinaryItem,
        ILoquiObject<IDebrisModelGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DebrisModel_Registration.Instance;
        Byte Percentage { get; }
        AssetLinkGetter<StarfieldModelAssetType> ModelFilename { get; }
        Boolean HasCollision { get; }
        ReadOnlyMemorySlice<Byte>? TextureFileHashes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DebrisModelMixIn
    {
        public static void Clear(this IDebrisModel item)
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DebrisModel.Mask<bool> GetEqualsMask(
            this IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDebrisModelGetter item,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDebrisModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            DebrisModel.TranslationMask? equalsMask = null)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            DebrisModel.TranslationMask? copyMask = null)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDebrisModel lhs,
            IDebrisModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            DebrisModel.TranslationMask? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DebrisModel DeepCopy(
            this IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDebrisModel item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DebrisModelSetterCommon)((IDebrisModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DebrisModel_FieldIndex
    {
        Percentage = 0,
        ModelFilename = 1,
        HasCollision = 2,
        TextureFileHashes = 3,
    }
    #endregion

    #region Registration
    internal partial class DebrisModel_Registration : ILoquiRegistration
    {
        public static readonly DebrisModel_Registration Instance = new DebrisModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(DebrisModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DebrisModel.ErrorMask);

        public static readonly Type ClassType = typeof(DebrisModel);

        public static readonly Type GetterType = typeof(IDebrisModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDebrisModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DebrisModel";

        public const string Name = "DebrisModel";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.DATA);
            var all = RecordCollection.Factory(
                RecordTypes.DATA,
                RecordTypes.MODT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DebrisModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DebrisModelSetterCommon
    {
        public static readonly DebrisModelSetterCommon Instance = new DebrisModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDebrisModel item)
        {
            ClearPartial();
            item.Percentage = default(Byte);
            item.ModelFilename.SetToNull();
            item.HasCollision = default(Boolean);
            item.TextureFileHashes = default;
        }
        
        #region Mutagen
        public void RemapLinks(IDebrisModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IDebrisModel obj)
        {
            yield return obj.ModelFilename;
            yield break;
        }
        
        public void RemapAssetLinks(
            IDebrisModel obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.ModelFilename.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDebrisModel item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DebrisModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DebrisModelCommon
    {
        public static readonly DebrisModelCommon Instance = new DebrisModelCommon();

        public DebrisModel.Mask<bool> GetEqualsMask(
            IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DebrisModel.Mask<bool>(false);
            ((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDebrisModelGetter item,
            IDebrisModelGetter rhs,
            DebrisModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Percentage = item.Percentage == rhs.Percentage;
            ret.ModelFilename = object.Equals(item.ModelFilename, rhs.ModelFilename);
            ret.HasCollision = item.HasCollision == rhs.HasCollision;
            ret.TextureFileHashes = MemorySliceExt.SequenceEqual(item.TextureFileHashes, rhs.TextureFileHashes);
        }
        
        public string Print(
            IDebrisModelGetter item,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDebrisModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DebrisModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DebrisModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (DebrisModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDebrisModelGetter item,
            StructuredStringBuilder sb,
            DebrisModel.Mask<bool>? printMask = null)
        {
            if (printMask?.Percentage ?? true)
            {
                sb.AppendItem(item.Percentage, "Percentage");
            }
            if (printMask?.ModelFilename ?? true)
            {
                sb.AppendItem(item.ModelFilename, "ModelFilename");
            }
            if (printMask?.HasCollision ?? true)
            {
                sb.AppendItem(item.HasCollision, "HasCollision");
            }
            if ((printMask?.TextureFileHashes ?? true)
                && item.TextureFileHashes is {} TextureFileHashesItem)
            {
                sb.AppendLine($"TextureFileHashes => {SpanExt.ToHexString(TextureFileHashesItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDebrisModelGetter? lhs,
            IDebrisModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Percentage) ?? true))
            {
                if (lhs.Percentage != rhs.Percentage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.ModelFilename) ?? true))
            {
                if (!object.Equals(lhs.ModelFilename, rhs.ModelFilename)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.HasCollision) ?? true))
            {
                if (lhs.HasCollision != rhs.HasCollision) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.TextureFileHashes) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextureFileHashes, rhs.TextureFileHashes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDebrisModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Percentage);
            hash.Add(item.ModelFilename);
            hash.Add(item.HasCollision);
            if (item.TextureFileHashes is {} TextureFileHashesItem)
            {
                hash.Add(TextureFileHashesItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DebrisModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDebrisModelGetter obj)
        {
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IDebrisModelGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                yield return obj.ModelFilename;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DebrisModelSetterTranslationCommon
    {
        public static readonly DebrisModelSetterTranslationCommon Instance = new DebrisModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDebrisModel item,
            IDebrisModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.Percentage) ?? true))
            {
                item.Percentage = rhs.Percentage;
            }
            item.ModelFilename.GivenPath = rhs.ModelFilename.GivenPath;
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.HasCollision) ?? true))
            {
                item.HasCollision = rhs.HasCollision;
            }
            if ((copyMask?.GetShouldTranslate((int)DebrisModel_FieldIndex.TextureFileHashes) ?? true))
            {
                if(rhs.TextureFileHashes is {} TextureFileHashesrhs)
                {
                    item.TextureFileHashes = TextureFileHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFileHashes = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDebrisModel item,
            IDebrisModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            DebrisModel.TranslationMask? copyMask = null)
        {
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            out DebrisModel.ErrorMask errorMask,
            DebrisModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DebrisModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DebrisModel DeepCopy(
            IDebrisModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DebrisModel ret = (DebrisModel)((DebrisModelCommon)((IDebrisModelGetter)item).CommonInstance()!).GetNew();
            ((DebrisModelSetterTranslationCommon)((IDebrisModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DebrisModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DebrisModel_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DebrisModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DebrisModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DebrisModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DebrisModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DebrisModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DebrisModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDebrisModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Percentage);
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ModelFilename.GivenPath,
                    binaryType: StringBinaryType.NullTerminate);
                writer.Write(item.HasCollision);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureFileHashes,
                header: translationParams.ConvertToCustom(RecordTypes.MODT));
        }

        public void Write(
            MutagenWriter writer,
            IDebrisModelGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDebrisModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DebrisModelBinaryCreateTranslation
    {
        public static readonly DebrisModelBinaryCreateTranslation Instance = new DebrisModelBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDebrisModel item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.ShortCircuit((int)DebrisModel_FieldIndex.HasCollision, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.Percentage = dataFrame.ReadUInt8();
                    item.ModelFilename.GivenPath = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: false);
                    if (dataFrame.Remaining < 1) return null;
                    item.HasCollision = dataFrame.ReadBoolean();
                    return (int)DebrisModel_FieldIndex.HasCollision;
                }
                case RecordTypeInts.MODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFileHashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DebrisModel_FieldIndex.TextureFileHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DebrisModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDebrisModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DebrisModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DebrisModelBinaryOverlay :
        PluginBinaryOverlay,
        IDebrisModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DebrisModel_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DebrisModel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DebrisModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DebrisModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDebrisModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDebrisModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => DebrisModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DebrisModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DebrisModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _DATALocation;
        #region Percentage
        private int _PercentageLocation => _DATALocation!.Value.Min;
        private bool _Percentage_IsSet => _DATALocation.HasValue;
        public Byte Percentage => _Percentage_IsSet ? _recordData.Span[_PercentageLocation] : default;
        #endregion
        #region ModelFilename
        public AssetLinkGetter<StarfieldModelAssetType> ModelFilename { get; private set; } = null!;
        protected int ModelFilenameEndingPos;
        #endregion
        #region HasCollision
        private int _HasCollisionLocation => ModelFilenameEndingPos;
        private bool _HasCollision_IsSet => _DATALocation.HasValue;
        public Boolean HasCollision => _HasCollision_IsSet ? _recordData.Slice(_HasCollisionLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region TextureFileHashes
        private int? _TextureFileHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFileHashes => _TextureFileHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureFileHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DebrisModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDebrisModelGetter DebrisModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DebrisModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.ModelFilename = new AssetLink<StarfieldModelAssetType>(BinaryStringUtility.ParseUnknownLengthString(ret._recordData.Slice(ret._DATALocation!.Value.Min + 0x1), package.MetaData.Encodings.NonTranslated));
            ret.ModelFilenameEndingPos = ret._DATALocation!.Value.Min + 0x1 + ret.ModelFilename.GivenPath.Length + 1;
            return ret;
        }

        public static IDebrisModelGetter DebrisModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DebrisModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.ShortCircuit((int)DebrisModel_FieldIndex.HasCollision, translationParams)) return ParseResult.Stop;
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DebrisModel_FieldIndex.HasCollision;
                }
                case RecordTypeInts.MODT:
                {
                    _TextureFileHashesLocation = (stream.Position - offset);
                    return (int)DebrisModel_FieldIndex.TextureFileHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DebrisModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDebrisModelGetter rhs) return false;
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDebrisModelGetter? obj)
        {
            return ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DebrisModelCommon)((IDebrisModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

