/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Transform :
        StarfieldMajorRecord,
        IEquatable<ITransformGetter>,
        ILoquiObjectSetter<Transform>,
        ITransformInternal
    {
        #region Ctor
        protected Transform()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Position
        public P3Float Position { get; set; } = default(P3Float);
        #endregion
        #region Rotation
        public P3Float Rotation { get; set; } = default(P3Float);
        #endregion
        #region Scale
        public Single Scale { get; set; } = default(Single);
        #endregion
        #region ZoomMin
        public Single ZoomMin { get; set; } = default(Single);
        #endregion
        #region ZoomMax
        public Single ZoomMax { get; set; } = default(Single);
        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BNAM;
        public MemorySlice<Byte>? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITransformGetter.BNAM => this.BNAM;
        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITransformGetter.ENAM => this.ENAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransformMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.Scale = initialValue;
                this.ZoomMin = initialValue;
                this.ZoomMax = initialValue;
                this.BNAM = initialValue;
                this.ENAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Position,
                TItem Rotation,
                TItem Scale,
                TItem ZoomMin,
                TItem ZoomMax,
                TItem BNAM,
                TItem ENAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Position = Position;
                this.Rotation = Rotation;
                this.Scale = Scale;
                this.ZoomMin = ZoomMin;
                this.ZoomMax = ZoomMax;
                this.BNAM = BNAM;
                this.ENAM = ENAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Position;
            public TItem Rotation;
            public TItem Scale;
            public TItem ZoomMin;
            public TItem ZoomMax;
            public TItem BNAM;
            public TItem ENAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.ZoomMin, rhs.ZoomMin)) return false;
                if (!object.Equals(this.ZoomMax, rhs.ZoomMax)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Position);
                hash.Add(this.Rotation);
                hash.Add(this.Scale);
                hash.Add(this.ZoomMin);
                hash.Add(this.ZoomMax);
                hash.Add(this.BNAM);
                hash.Add(this.ENAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.ZoomMin)) return false;
                if (!eval(this.ZoomMax)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.ENAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.ZoomMin)) return true;
                if (eval(this.ZoomMax)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.ENAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Transform.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.Scale = eval(this.Scale);
                obj.ZoomMin = eval(this.ZoomMin);
                obj.ZoomMax = eval(this.ZoomMax);
                obj.BNAM = eval(this.BNAM);
                obj.ENAM = eval(this.ENAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Transform.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Transform.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Transform.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Position ?? true)
                    {
                        sb.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        sb.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.ZoomMin ?? true)
                    {
                        sb.AppendItem(ZoomMin, "ZoomMin");
                    }
                    if (printMask?.ZoomMax ?? true)
                    {
                        sb.AppendItem(ZoomMax, "ZoomMax");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Position;
            public Exception? Rotation;
            public Exception? Scale;
            public Exception? ZoomMin;
            public Exception? ZoomMax;
            public Exception? BNAM;
            public Exception? ENAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Transform_FieldIndex enu = (Transform_FieldIndex)index;
                switch (enu)
                {
                    case Transform_FieldIndex.Position:
                        return Position;
                    case Transform_FieldIndex.Rotation:
                        return Rotation;
                    case Transform_FieldIndex.Scale:
                        return Scale;
                    case Transform_FieldIndex.ZoomMin:
                        return ZoomMin;
                    case Transform_FieldIndex.ZoomMax:
                        return ZoomMax;
                    case Transform_FieldIndex.BNAM:
                        return BNAM;
                    case Transform_FieldIndex.ENAM:
                        return ENAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Transform_FieldIndex enu = (Transform_FieldIndex)index;
                switch (enu)
                {
                    case Transform_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case Transform_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case Transform_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case Transform_FieldIndex.ZoomMin:
                        this.ZoomMin = ex;
                        break;
                    case Transform_FieldIndex.ZoomMax:
                        this.ZoomMax = ex;
                        break;
                    case Transform_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case Transform_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Transform_FieldIndex enu = (Transform_FieldIndex)index;
                switch (enu)
                {
                    case Transform_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.ZoomMin:
                        this.ZoomMin = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.ZoomMax:
                        this.ZoomMax = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case Transform_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (Scale != null) return true;
                if (ZoomMin != null) return true;
                if (ZoomMax != null) return true;
                if (BNAM != null) return true;
                if (ENAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Position, "Position");
                }
                {
                    sb.AppendItem(Rotation, "Rotation");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(ZoomMin, "ZoomMin");
                }
                {
                    sb.AppendItem(ZoomMax, "ZoomMax");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.ZoomMin = this.ZoomMin.Combine(rhs.ZoomMin);
                ret.ZoomMax = this.ZoomMax.Combine(rhs.ZoomMax);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Position;
            public bool Rotation;
            public bool Scale;
            public bool ZoomMin;
            public bool ZoomMax;
            public bool BNAM;
            public bool ENAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.Scale = defaultOn;
                this.ZoomMin = defaultOn;
                this.ZoomMax = defaultOn;
                this.BNAM = defaultOn;
                this.ENAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((Scale, null));
                ret.Add((ZoomMin, null));
                ret.Add((ZoomMax, null));
                ret.Add((BNAM, null));
                ret.Add((ENAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Transform_Registration.TriggeringRecordType;
        public Transform(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Transform(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Transform(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Transform(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Transform(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Transform>.ToString(this);
        }

        protected override Type LinkType => typeof(ITransform);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITransformGetter rhs) return false;
            return ((TransformCommon)((ITransformGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransformGetter? obj)
        {
            return ((TransformCommon)((ITransformGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransformCommon)((ITransformGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TransformBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransformBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Transform CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Transform();
            ((TransformSetterCommon)((ITransformGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Transform item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TransformSetterCommon)((ITransformGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Transform GetNew()
        {
            return new Transform();
        }

    }
    #endregion

    #region Interface
    public partial interface ITransform :
        ILoquiObjectSetter<ITransformInternal>,
        IPositionRotation,
        IStarfieldMajorRecordInternal,
        ITransformGetter
    {
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new Single Scale { get; set; }
        new Single ZoomMin { get; set; }
        new Single ZoomMax { get; set; }
        new MemorySlice<Byte>? BNAM { get; set; }
        new MemorySlice<Byte>? ENAM { get; set; }
        #region Mutagen
        new Transform.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITransformInternal :
        IStarfieldMajorRecordInternal,
        ITransform,
        ITransformGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.TRNS)]
    public partial interface ITransformGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<ITransformGetter>,
        IMapsToGetter<ITransformGetter>,
        IPositionRotationGetter
    {
        static new ILoquiRegistration StaticRegistration => Transform_Registration.Instance;
        P3Float Position { get; }
        P3Float Rotation { get; }
        Single Scale { get; }
        Single ZoomMin { get; }
        Single ZoomMax { get; }
        ReadOnlyMemorySlice<Byte>? BNAM { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }

        #region Mutagen
        Transform.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TransformMixIn
    {
        public static void Clear(this ITransformInternal item)
        {
            ((TransformSetterCommon)((ITransformGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Transform.Mask<bool> GetEqualsMask(
            this ITransformGetter item,
            ITransformGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TransformCommon)((ITransformGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITransformGetter item,
            string? name = null,
            Transform.Mask<bool>? printMask = null)
        {
            return ((TransformCommon)((ITransformGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITransformGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Transform.Mask<bool>? printMask = null)
        {
            ((TransformCommon)((ITransformGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITransformGetter item,
            ITransformGetter rhs,
            Transform.TranslationMask? equalsMask = null)
        {
            return ((TransformCommon)((ITransformGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITransformInternal lhs,
            ITransformGetter rhs,
            out Transform.ErrorMask errorMask,
            Transform.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TransformSetterTranslationCommon)((ITransformGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Transform.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITransformInternal lhs,
            ITransformGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TransformSetterTranslationCommon)((ITransformGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Transform DeepCopy(
            this ITransformGetter item,
            Transform.TranslationMask? copyMask = null)
        {
            return ((TransformSetterTranslationCommon)((ITransformGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Transform DeepCopy(
            this ITransformGetter item,
            out Transform.ErrorMask errorMask,
            Transform.TranslationMask? copyMask = null)
        {
            return ((TransformSetterTranslationCommon)((ITransformGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Transform DeepCopy(
            this ITransformGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TransformSetterTranslationCommon)((ITransformGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Transform Duplicate(
            this ITransformGetter item,
            FormKey formKey,
            Transform.TranslationMask? copyMask = null)
        {
            return ((TransformCommon)((ITransformGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Transform Duplicate(
            this ITransformGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TransformCommon)((ITransformGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITransformInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TransformSetterCommon)((ITransformGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Transform_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Position = 7,
        Rotation = 8,
        Scale = 9,
        ZoomMin = 10,
        ZoomMax = 11,
        BNAM = 12,
        ENAM = 13,
    }
    #endregion

    #region Registration
    internal partial class Transform_Registration : ILoquiRegistration
    {
        public static readonly Transform_Registration Instance = new Transform_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Transform.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Transform.ErrorMask);

        public static readonly Type ClassType = typeof(Transform);

        public static readonly Type GetterType = typeof(ITransformGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITransform);

        public static readonly Type? InternalSetterType = typeof(ITransformInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Transform";

        public const string Name = "Transform";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRNS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TRNS);
            var all = RecordCollection.Factory(
                RecordTypes.TRNS,
                RecordTypes.DATA,
                RecordTypes.BNAM,
                RecordTypes.ENAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TransformBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TransformSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly TransformSetterCommon Instance = new TransformSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITransformInternal item)
        {
            ClearPartial();
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
            item.Scale = default(Single);
            item.ZoomMin = default(Single);
            item.ZoomMax = default(Single);
            item.BNAM = default;
            item.ENAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ITransformInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITransformInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITransform obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITransformInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITransformInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TransformBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TransformBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Transform)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Transform)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TransformCommon : StarfieldMajorRecordCommon
    {
        public new static readonly TransformCommon Instance = new TransformCommon();

        public Transform.Mask<bool> GetEqualsMask(
            ITransformGetter item,
            ITransformGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Transform.Mask<bool>(false);
            ((TransformCommon)((ITransformGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITransformGetter item,
            ITransformGetter rhs,
            Transform.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.ZoomMin = item.ZoomMin.EqualsWithin(rhs.ZoomMin);
            ret.ZoomMax = item.ZoomMax.EqualsWithin(rhs.ZoomMax);
            ret.BNAM = MemorySliceExt.SequenceEqual(item.BNAM, rhs.BNAM);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITransformGetter item,
            string? name = null,
            Transform.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITransformGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Transform.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Transform =>");
            }
            else
            {
                sb.AppendLine($"{name} (Transform) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITransformGetter item,
            StructuredStringBuilder sb,
            Transform.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Position ?? true)
            {
                sb.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                sb.AppendItem(item.Rotation, "Rotation");
            }
            if (printMask?.Scale ?? true)
            {
                sb.AppendItem(item.Scale, "Scale");
            }
            if (printMask?.ZoomMin ?? true)
            {
                sb.AppendItem(item.ZoomMin, "ZoomMin");
            }
            if (printMask?.ZoomMax ?? true)
            {
                sb.AppendItem(item.ZoomMax, "ZoomMax");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendLine($"BNAM => {SpanExt.ToHexString(BNAMItem)}");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
        }
        
        public static Transform_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Transform_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Transform_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Transform_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Transform_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Transform_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Transform_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Transform_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITransformGetter? lhs,
            ITransformGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.Position) ?? true))
            {
                if (!lhs.Position.Equals(rhs.Position)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.Rotation) ?? true))
            {
                if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.ZoomMin) ?? true))
            {
                if (!lhs.ZoomMin.EqualsWithin(rhs.ZoomMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.ZoomMax) ?? true))
            {
                if (!lhs.ZoomMax.EqualsWithin(rhs.ZoomMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.BNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BNAM, rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Transform_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITransformGetter?)lhs,
                rhs: rhs as ITransformGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITransformGetter?)lhs,
                rhs: rhs as ITransformGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITransformGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Position);
            hash.Add(item.Rotation);
            hash.Add(item.Scale);
            hash.Add(item.ZoomMin);
            hash.Add(item.ZoomMax);
            if (item.BNAM is {} BNAMItem)
            {
                hash.Add(BNAMItem);
            }
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ITransformGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITransformGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Transform.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITransformGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Transform Duplicate(
            ITransformGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Transform(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITransformGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITransformGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TransformSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly TransformSetterTranslationCommon Instance = new TransformSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITransformInternal item,
            ITransformGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITransform item,
            ITransformGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.ZoomMin) ?? true))
            {
                item.ZoomMin = rhs.ZoomMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.ZoomMax) ?? true))
            {
                item.ZoomMax = rhs.ZoomMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.BNAM) ?? true))
            {
                if(rhs.BNAM is {} BNAMrhs)
                {
                    item.BNAM = BNAMrhs.ToArray();
                }
                else
                {
                    item.BNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Transform_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITransform item,
            ITransformGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITransformInternal)item,
                rhs: (ITransformGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITransform)item,
                rhs: (ITransformGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITransformInternal)item,
                rhs: (ITransformGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITransform)item,
                rhs: (ITransformGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Transform DeepCopy(
            ITransformGetter item,
            Transform.TranslationMask? copyMask = null)
        {
            Transform ret = (Transform)((TransformCommon)((ITransformGetter)item).CommonInstance()!).GetNew();
            ((TransformSetterTranslationCommon)((ITransformGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Transform DeepCopy(
            ITransformGetter item,
            out Transform.ErrorMask errorMask,
            Transform.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Transform ret = (Transform)((TransformCommon)((ITransformGetter)item).CommonInstance()!).GetNew();
            ((TransformSetterTranslationCommon)((ITransformGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Transform.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Transform DeepCopy(
            ITransformGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Transform ret = (Transform)((TransformCommon)((ITransformGetter)item).CommonInstance()!).GetNew();
            ((TransformSetterTranslationCommon)((ITransformGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Transform
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Transform_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Transform_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TransformCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TransformSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TransformSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TransformBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TransformBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITransformGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Position);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Rotation);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Scale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ZoomMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ZoomMax);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
        }

        public void Write(
            MutagenWriter writer,
            ITransformGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TRNS,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITransformGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITransformGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITransformGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TransformBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly TransformBinaryCreateTranslation Instance = new TransformBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TRNS;
        public static ParseResult FillBinaryRecordTypes(
            ITransformInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 12) return null;
                    item.Position = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.Rotation = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ZoomMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ZoomMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Transform_FieldIndex.ZoomMax;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Transform_FieldIndex.BNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Transform_FieldIndex.ENAM;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TransformBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TransformBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ITransformGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Transform_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Transform_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TransformCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TransformSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TransformBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TransformBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITransform);

        public Transform.MajorFlag MajorFlags => (Transform.MajorFlag)this.MajorRecordFlagsRaw;

        private RangeInt32? _DATALocation;
        #region Position
        private int _PositionLocation => _DATALocation!.Value.Min;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_PositionLocation, 12)) : default(P3Float);
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation!.Value.Min + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_RotationLocation, 12)) : default(P3Float);
        #endregion
        #region Scale
        private int _ScaleLocation => _DATALocation!.Value.Min + 0x18;
        private bool _Scale_IsSet => _DATALocation.HasValue;
        public Single Scale => _Scale_IsSet ? _recordData.Slice(_ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region ZoomMin
        private int _ZoomMinLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _ZoomMin_IsSet => _DATALocation.HasValue;
        public Single ZoomMin => _ZoomMin_IsSet ? _recordData.Slice(_ZoomMinLocation, 4).Float() : default(Single);
        #endregion
        #region ZoomMax
        private int _ZoomMaxLocation => _DATALocation!.Value.Min + 0x20;
        private bool _ZoomMax_IsSet => _DATALocation.HasValue;
        public Single ZoomMax => _ZoomMax_IsSet ? _recordData.Slice(_ZoomMaxLocation, 4).Float() : default(Single);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Byte>? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TransformBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITransformGetter TransformFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TransformBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITransformGetter TransformFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TransformFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Transform_FieldIndex.ZoomMax;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)Transform_FieldIndex.BNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)Transform_FieldIndex.ENAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TransformMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Transform>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITransformGetter rhs) return false;
            return ((TransformCommon)((ITransformGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITransformGetter? obj)
        {
            return ((TransformCommon)((ITransformGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TransformCommon)((ITransformGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

