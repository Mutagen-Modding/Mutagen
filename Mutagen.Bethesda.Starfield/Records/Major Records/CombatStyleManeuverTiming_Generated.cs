/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CombatStyleManeuverTiming :
        ICombatStyleManeuverTiming,
        IEquatable<ICombatStyleManeuverTimingGetter>,
        ILoquiObjectSetter<CombatStyleManeuverTiming>
    {
        #region Ctor
        public CombatStyleManeuverTiming()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Engage
        public Single Engage { get; set; } = default(Single);
        public static RangeFloat Engage_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Evade
        public Single Evade { get; set; } = default(Single);
        public static RangeFloat Evade_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Acquire
        public Single Acquire { get; set; } = default(Single);
        public static RangeFloat Acquire_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Persue
        public Single Persue { get; set; } = default(Single);
        public static RangeFloat Persue_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Disengage
        public Single Disengage { get; set; } = default(Single);
        public static RangeFloat Disengage_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Surround
        public Single Surround { get; set; } = default(Single);
        public static RangeFloat Surround_Range = new RangeFloat(0f, 600f);
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default(Single);
        #endregion
        #region BreakStalemate
        public Single BreakStalemate { get; set; } = default(Single);
        public static RangeFloat BreakStalemate_Range = new RangeFloat(0f, 600f);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleManeuverTimingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleManeuverTimingGetter rhs) return false;
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleManeuverTimingGetter? obj)
        {
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Engage = initialValue;
                this.Evade = initialValue;
                this.Acquire = initialValue;
                this.Persue = initialValue;
                this.Disengage = initialValue;
                this.Surround = initialValue;
                this.Unknown = initialValue;
                this.BreakStalemate = initialValue;
            }

            public Mask(
                TItem Engage,
                TItem Evade,
                TItem Acquire,
                TItem Persue,
                TItem Disengage,
                TItem Surround,
                TItem Unknown,
                TItem BreakStalemate)
            {
                this.Engage = Engage;
                this.Evade = Evade;
                this.Acquire = Acquire;
                this.Persue = Persue;
                this.Disengage = Disengage;
                this.Surround = Surround;
                this.Unknown = Unknown;
                this.BreakStalemate = BreakStalemate;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Engage;
            public TItem Evade;
            public TItem Acquire;
            public TItem Persue;
            public TItem Disengage;
            public TItem Surround;
            public TItem Unknown;
            public TItem BreakStalemate;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Engage, rhs.Engage)) return false;
                if (!object.Equals(this.Evade, rhs.Evade)) return false;
                if (!object.Equals(this.Acquire, rhs.Acquire)) return false;
                if (!object.Equals(this.Persue, rhs.Persue)) return false;
                if (!object.Equals(this.Disengage, rhs.Disengage)) return false;
                if (!object.Equals(this.Surround, rhs.Surround)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.BreakStalemate, rhs.BreakStalemate)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Engage);
                hash.Add(this.Evade);
                hash.Add(this.Acquire);
                hash.Add(this.Persue);
                hash.Add(this.Disengage);
                hash.Add(this.Surround);
                hash.Add(this.Unknown);
                hash.Add(this.BreakStalemate);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Engage)) return false;
                if (!eval(this.Evade)) return false;
                if (!eval(this.Acquire)) return false;
                if (!eval(this.Persue)) return false;
                if (!eval(this.Disengage)) return false;
                if (!eval(this.Surround)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.BreakStalemate)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Engage)) return true;
                if (eval(this.Evade)) return true;
                if (eval(this.Acquire)) return true;
                if (eval(this.Persue)) return true;
                if (eval(this.Disengage)) return true;
                if (eval(this.Surround)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.BreakStalemate)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleManeuverTiming.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Engage = eval(this.Engage);
                obj.Evade = eval(this.Evade);
                obj.Acquire = eval(this.Acquire);
                obj.Persue = eval(this.Persue);
                obj.Disengage = eval(this.Disengage);
                obj.Surround = eval(this.Surround);
                obj.Unknown = eval(this.Unknown);
                obj.BreakStalemate = eval(this.BreakStalemate);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CombatStyleManeuverTiming.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CombatStyleManeuverTiming.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CombatStyleManeuverTiming.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Engage ?? true)
                    {
                        sb.AppendItem(Engage, "Engage");
                    }
                    if (printMask?.Evade ?? true)
                    {
                        sb.AppendItem(Evade, "Evade");
                    }
                    if (printMask?.Acquire ?? true)
                    {
                        sb.AppendItem(Acquire, "Acquire");
                    }
                    if (printMask?.Persue ?? true)
                    {
                        sb.AppendItem(Persue, "Persue");
                    }
                    if (printMask?.Disengage ?? true)
                    {
                        sb.AppendItem(Disengage, "Disengage");
                    }
                    if (printMask?.Surround ?? true)
                    {
                        sb.AppendItem(Surround, "Surround");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.BreakStalemate ?? true)
                    {
                        sb.AppendItem(BreakStalemate, "BreakStalemate");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Engage;
            public Exception? Evade;
            public Exception? Acquire;
            public Exception? Persue;
            public Exception? Disengage;
            public Exception? Surround;
            public Exception? Unknown;
            public Exception? BreakStalemate;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleManeuverTiming_FieldIndex enu = (CombatStyleManeuverTiming_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleManeuverTiming_FieldIndex.Engage:
                        return Engage;
                    case CombatStyleManeuverTiming_FieldIndex.Evade:
                        return Evade;
                    case CombatStyleManeuverTiming_FieldIndex.Acquire:
                        return Acquire;
                    case CombatStyleManeuverTiming_FieldIndex.Persue:
                        return Persue;
                    case CombatStyleManeuverTiming_FieldIndex.Disengage:
                        return Disengage;
                    case CombatStyleManeuverTiming_FieldIndex.Surround:
                        return Surround;
                    case CombatStyleManeuverTiming_FieldIndex.Unknown:
                        return Unknown;
                    case CombatStyleManeuverTiming_FieldIndex.BreakStalemate:
                        return BreakStalemate;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleManeuverTiming_FieldIndex enu = (CombatStyleManeuverTiming_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleManeuverTiming_FieldIndex.Engage:
                        this.Engage = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Evade:
                        this.Evade = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Acquire:
                        this.Acquire = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Persue:
                        this.Persue = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Disengage:
                        this.Disengage = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Surround:
                        this.Surround = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.BreakStalemate:
                        this.BreakStalemate = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleManeuverTiming_FieldIndex enu = (CombatStyleManeuverTiming_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleManeuverTiming_FieldIndex.Engage:
                        this.Engage = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Evade:
                        this.Evade = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Acquire:
                        this.Acquire = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Persue:
                        this.Persue = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Disengage:
                        this.Disengage = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Surround:
                        this.Surround = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case CombatStyleManeuverTiming_FieldIndex.BreakStalemate:
                        this.BreakStalemate = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Engage != null) return true;
                if (Evade != null) return true;
                if (Acquire != null) return true;
                if (Persue != null) return true;
                if (Disengage != null) return true;
                if (Surround != null) return true;
                if (Unknown != null) return true;
                if (BreakStalemate != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Engage, "Engage");
                }
                {
                    sb.AppendItem(Evade, "Evade");
                }
                {
                    sb.AppendItem(Acquire, "Acquire");
                }
                {
                    sb.AppendItem(Persue, "Persue");
                }
                {
                    sb.AppendItem(Disengage, "Disengage");
                }
                {
                    sb.AppendItem(Surround, "Surround");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(BreakStalemate, "BreakStalemate");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Engage = this.Engage.Combine(rhs.Engage);
                ret.Evade = this.Evade.Combine(rhs.Evade);
                ret.Acquire = this.Acquire.Combine(rhs.Acquire);
                ret.Persue = this.Persue.Combine(rhs.Persue);
                ret.Disengage = this.Disengage.Combine(rhs.Disengage);
                ret.Surround = this.Surround.Combine(rhs.Surround);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.BreakStalemate = this.BreakStalemate.Combine(rhs.BreakStalemate);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Engage;
            public bool Evade;
            public bool Acquire;
            public bool Persue;
            public bool Disengage;
            public bool Surround;
            public bool Unknown;
            public bool BreakStalemate;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Engage = defaultOn;
                this.Evade = defaultOn;
                this.Acquire = defaultOn;
                this.Persue = defaultOn;
                this.Disengage = defaultOn;
                this.Surround = defaultOn;
                this.Unknown = defaultOn;
                this.BreakStalemate = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Engage, null));
                ret.Add((Evade, null));
                ret.Add((Acquire, null));
                ret.Add((Persue, null));
                ret.Add((Disengage, null));
                ret.Add((Surround, null));
                ret.Add((Unknown, null));
                ret.Add((BreakStalemate, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleManeuverTimingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleManeuverTimingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CombatStyleManeuverTiming CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CombatStyleManeuverTiming();
            ((CombatStyleManeuverTimingSetterCommon)((ICombatStyleManeuverTimingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleManeuverTiming item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CombatStyleManeuverTimingSetterCommon)((ICombatStyleManeuverTimingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleManeuverTiming GetNew()
        {
            return new CombatStyleManeuverTiming();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleManeuverTiming :
        ICombatStyleManeuverTimingGetter,
        ILoquiObjectSetter<ICombatStyleManeuverTiming>
    {
        new Single Engage { get; set; }
        new Single Evade { get; set; }
        new Single Acquire { get; set; }
        new Single Persue { get; set; }
        new Single Disengage { get; set; }
        new Single Surround { get; set; }
        new Single Unknown { get; set; }
        new Single BreakStalemate { get; set; }
    }

    public partial interface ICombatStyleManeuverTimingGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICombatStyleManeuverTimingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CombatStyleManeuverTiming_Registration.Instance;
        Single Engage { get; }
        Single Evade { get; }
        Single Acquire { get; }
        Single Persue { get; }
        Single Disengage { get; }
        Single Surround { get; }
        Single Unknown { get; }
        Single BreakStalemate { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleManeuverTimingMixIn
    {
        public static void Clear(this ICombatStyleManeuverTiming item)
        {
            ((CombatStyleManeuverTimingSetterCommon)((ICombatStyleManeuverTimingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleManeuverTiming.Mask<bool> GetEqualsMask(
            this ICombatStyleManeuverTimingGetter item,
            ICombatStyleManeuverTimingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICombatStyleManeuverTimingGetter item,
            string? name = null,
            CombatStyleManeuverTiming.Mask<bool>? printMask = null)
        {
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICombatStyleManeuverTimingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyleManeuverTiming.Mask<bool>? printMask = null)
        {
            ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleManeuverTimingGetter item,
            ICombatStyleManeuverTimingGetter rhs,
            CombatStyleManeuverTiming.TranslationMask? equalsMask = null)
        {
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleManeuverTiming lhs,
            ICombatStyleManeuverTimingGetter rhs)
        {
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleManeuverTiming lhs,
            ICombatStyleManeuverTimingGetter rhs,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleManeuverTiming lhs,
            ICombatStyleManeuverTimingGetter rhs,
            out CombatStyleManeuverTiming.ErrorMask errorMask,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyleManeuverTiming.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleManeuverTiming lhs,
            ICombatStyleManeuverTimingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyleManeuverTiming DeepCopy(
            this ICombatStyleManeuverTimingGetter item,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            return ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleManeuverTiming DeepCopy(
            this ICombatStyleManeuverTimingGetter item,
            out CombatStyleManeuverTiming.ErrorMask errorMask,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            return ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleManeuverTiming DeepCopy(
            this ICombatStyleManeuverTimingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleManeuverTiming item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CombatStyleManeuverTimingSetterCommon)((ICombatStyleManeuverTimingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CombatStyleManeuverTiming_FieldIndex
    {
        Engage = 0,
        Evade = 1,
        Acquire = 2,
        Persue = 3,
        Disengage = 4,
        Surround = 5,
        Unknown = 6,
        BreakStalemate = 7,
    }
    #endregion

    #region Registration
    internal partial class CombatStyleManeuverTiming_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleManeuverTiming_Registration Instance = new CombatStyleManeuverTiming_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(CombatStyleManeuverTiming.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleManeuverTiming.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleManeuverTiming);

        public static readonly Type GetterType = typeof(ICombatStyleManeuverTimingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleManeuverTiming);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CombatStyleManeuverTiming";

        public const string Name = "CombatStyleManeuverTiming";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleManeuverTimingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CombatStyleManeuverTimingSetterCommon
    {
        public static readonly CombatStyleManeuverTimingSetterCommon Instance = new CombatStyleManeuverTimingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleManeuverTiming item)
        {
            ClearPartial();
            item.Engage = default(Single);
            item.Evade = default(Single);
            item.Acquire = default(Single);
            item.Persue = default(Single);
            item.Disengage = default(Single);
            item.Surround = default(Single);
            item.Unknown = default(Single);
            item.BreakStalemate = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyleManeuverTiming obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleManeuverTiming item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStyleManeuverTimingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CombatStyleManeuverTimingCommon
    {
        public static readonly CombatStyleManeuverTimingCommon Instance = new CombatStyleManeuverTimingCommon();

        public CombatStyleManeuverTiming.Mask<bool> GetEqualsMask(
            ICombatStyleManeuverTimingGetter item,
            ICombatStyleManeuverTimingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleManeuverTiming.Mask<bool>(false);
            ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleManeuverTimingGetter item,
            ICombatStyleManeuverTimingGetter rhs,
            CombatStyleManeuverTiming.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Engage = item.Engage.EqualsWithin(rhs.Engage);
            ret.Evade = item.Evade.EqualsWithin(rhs.Evade);
            ret.Acquire = item.Acquire.EqualsWithin(rhs.Acquire);
            ret.Persue = item.Persue.EqualsWithin(rhs.Persue);
            ret.Disengage = item.Disengage.EqualsWithin(rhs.Disengage);
            ret.Surround = item.Surround.EqualsWithin(rhs.Surround);
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
            ret.BreakStalemate = item.BreakStalemate.EqualsWithin(rhs.BreakStalemate);
        }
        
        public string Print(
            ICombatStyleManeuverTimingGetter item,
            string? name = null,
            CombatStyleManeuverTiming.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICombatStyleManeuverTimingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyleManeuverTiming.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CombatStyleManeuverTiming =>");
            }
            else
            {
                sb.AppendLine($"{name} (CombatStyleManeuverTiming) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICombatStyleManeuverTimingGetter item,
            StructuredStringBuilder sb,
            CombatStyleManeuverTiming.Mask<bool>? printMask = null)
        {
            if (printMask?.Engage ?? true)
            {
                sb.AppendItem(item.Engage, "Engage");
            }
            if (printMask?.Evade ?? true)
            {
                sb.AppendItem(item.Evade, "Evade");
            }
            if (printMask?.Acquire ?? true)
            {
                sb.AppendItem(item.Acquire, "Acquire");
            }
            if (printMask?.Persue ?? true)
            {
                sb.AppendItem(item.Persue, "Persue");
            }
            if (printMask?.Disengage ?? true)
            {
                sb.AppendItem(item.Disengage, "Disengage");
            }
            if (printMask?.Surround ?? true)
            {
                sb.AppendItem(item.Surround, "Surround");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.BreakStalemate ?? true)
            {
                sb.AppendItem(item.BreakStalemate, "BreakStalemate");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleManeuverTimingGetter? lhs,
            ICombatStyleManeuverTimingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Engage) ?? true))
            {
                if (!lhs.Engage.EqualsWithin(rhs.Engage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Evade) ?? true))
            {
                if (!lhs.Evade.EqualsWithin(rhs.Evade)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Acquire) ?? true))
            {
                if (!lhs.Acquire.EqualsWithin(rhs.Acquire)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Persue) ?? true))
            {
                if (!lhs.Persue.EqualsWithin(rhs.Persue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Disengage) ?? true))
            {
                if (!lhs.Disengage.EqualsWithin(rhs.Disengage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Surround) ?? true))
            {
                if (!lhs.Surround.EqualsWithin(rhs.Surround)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Unknown) ?? true))
            {
                if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.BreakStalemate) ?? true))
            {
                if (!lhs.BreakStalemate.EqualsWithin(rhs.BreakStalemate)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleManeuverTimingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Engage);
            hash.Add(item.Evade);
            hash.Add(item.Acquire);
            hash.Add(item.Persue);
            hash.Add(item.Disengage);
            hash.Add(item.Surround);
            hash.Add(item.Unknown);
            hash.Add(item.BreakStalemate);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleManeuverTiming.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICombatStyleManeuverTimingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CombatStyleManeuverTimingSetterTranslationCommon
    {
        public static readonly CombatStyleManeuverTimingSetterTranslationCommon Instance = new CombatStyleManeuverTimingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleManeuverTiming item,
            ICombatStyleManeuverTimingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Engage) ?? true))
            {
                item.Engage = rhs.Engage;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Evade) ?? true))
            {
                item.Evade = rhs.Evade;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Acquire) ?? true))
            {
                item.Acquire = rhs.Acquire;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Persue) ?? true))
            {
                item.Persue = rhs.Persue;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Disengage) ?? true))
            {
                item.Disengage = rhs.Disengage;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Surround) ?? true))
            {
                item.Surround = rhs.Surround;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleManeuverTiming_FieldIndex.BreakStalemate) ?? true))
            {
                item.BreakStalemate = rhs.BreakStalemate;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICombatStyleManeuverTiming item,
            ICombatStyleManeuverTimingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CombatStyleManeuverTiming DeepCopy(
            ICombatStyleManeuverTimingGetter item,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            CombatStyleManeuverTiming ret = (CombatStyleManeuverTiming)((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyleManeuverTiming DeepCopy(
            ICombatStyleManeuverTimingGetter item,
            out CombatStyleManeuverTiming.ErrorMask errorMask,
            CombatStyleManeuverTiming.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleManeuverTiming ret = (CombatStyleManeuverTiming)((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyleManeuverTiming.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyleManeuverTiming DeepCopy(
            ICombatStyleManeuverTimingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleManeuverTiming ret = (CombatStyleManeuverTiming)((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleManeuverTimingSetterTranslationCommon)((ICombatStyleManeuverTimingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyleManeuverTiming
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleManeuverTiming_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStyleManeuverTiming_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleManeuverTimingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleManeuverTimingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleManeuverTimingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleManeuverTimingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleManeuverTimingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleManeuverTimingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyleManeuverTimingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CombatStyleManeuverTimingBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICombatStyleManeuverTimingGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Engage);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Evade);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Acquire);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Persue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Disengage);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Surround);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BreakStalemate);
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleManeuverTimingGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICombatStyleManeuverTimingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CombatStyleManeuverTimingBinaryCreateTranslation
    {
        public static readonly CombatStyleManeuverTimingBinaryCreateTranslation Instance = new CombatStyleManeuverTimingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleManeuverTiming item,
            MutagenFrame frame)
        {
            item.Engage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Evade = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Acquire = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Persue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Disengage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Surround = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BreakStalemate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CombatStyleManeuverTimingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleManeuverTimingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleManeuverTimingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CombatStyleManeuverTimingBinaryOverlay :
        PluginBinaryOverlay,
        ICombatStyleManeuverTimingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleManeuverTiming_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CombatStyleManeuverTiming_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleManeuverTimingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleManeuverTimingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleManeuverTimingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleManeuverTimingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleManeuverTimingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleManeuverTimingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleManeuverTimingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Engage => _structData.Slice(0x0, 0x4).Float();
        public Single Evade => _structData.Slice(0x4, 0x4).Float();
        public Single Acquire => _structData.Slice(0x8, 0x4).Float();
        public Single Persue => _structData.Slice(0xC, 0x4).Float();
        public Single Disengage => _structData.Slice(0x10, 0x4).Float();
        public Single Surround => _structData.Slice(0x14, 0x4).Float();
        public Single Unknown => _structData.Slice(0x18, 0x4).Float();
        public Single BreakStalemate => _structData.Slice(0x1C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleManeuverTimingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICombatStyleManeuverTimingGetter CombatStyleManeuverTimingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CombatStyleManeuverTimingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x20;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICombatStyleManeuverTimingGetter CombatStyleManeuverTimingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CombatStyleManeuverTimingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleManeuverTimingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICombatStyleManeuverTimingGetter rhs) return false;
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleManeuverTimingGetter? obj)
        {
            return ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

