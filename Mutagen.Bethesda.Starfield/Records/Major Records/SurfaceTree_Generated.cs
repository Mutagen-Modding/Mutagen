/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SurfaceTree :
        StarfieldMajorRecord,
        IEquatable<ISurfaceTreeGetter>,
        ILoquiObjectSetter<SurfaceTree>,
        ISurfaceTreeInternal
    {
        #region Ctor
        protected SurfaceTree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ISurfaceTreeGetter.Components => _Components;
        #endregion

        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _CNAM = new byte[0];
        public MemorySlice<Byte> CNAM
        {
            get => _CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ISurfaceTreeGetter.CNAM => this.CNAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DNAM = new byte[0];
        public MemorySlice<Byte> DNAM
        {
            get => _DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ISurfaceTreeGetter.DNAM => this.DNAM;
        #endregion
        #region SurfacePatterns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IFormLinkGetter<ISurfacePatternGetter>[] _SurfacePatterns = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns
        {
            get => this._SurfacePatterns;
            init => this._SurfacePatterns = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> ISurfaceTreeGetter.SurfacePatterns => _SurfacePatterns;
        #endregion

        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISurfaceTreeGetter.GNAM => this.GNAM;
        #endregion
        #region SurfacePatterns2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IFormLinkGetter<ISurfacePatternGetter>[] _SurfacePatterns2 = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns2
        {
            get => this._SurfacePatterns2;
            init => this._SurfacePatterns2 = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> ISurfaceTreeGetter.SurfacePatterns2 => _SurfacePatterns2;
        #endregion

        #endregion
        #region GNAM2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM2;
        public MemorySlice<Byte>? GNAM2
        {
            get => this._GNAM2;
            set => this._GNAM2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISurfaceTreeGetter.GNAM2 => this.GNAM2;
        #endregion
        #region Filter
        public String Filter { get; set; } = string.Empty;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceTreeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.CNAM = initialValue;
                this.DNAM = initialValue;
                this.SurfacePatterns = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM = initialValue;
                this.SurfacePatterns2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM2 = initialValue;
                this.Filter = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem CNAM,
                TItem DNAM,
                TItem SurfacePatterns,
                TItem GNAM,
                TItem SurfacePatterns2,
                TItem GNAM2,
                TItem Filter)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.CNAM = CNAM;
                this.DNAM = DNAM;
                this.SurfacePatterns = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SurfacePatterns, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM = GNAM;
                this.SurfacePatterns2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SurfacePatterns2, Enumerable.Empty<(int Index, TItem Value)>());
                this.GNAM2 = GNAM2;
                this.Filter = Filter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem CNAM;
            public TItem DNAM;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SurfacePatterns;
            public TItem GNAM;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SurfacePatterns2;
            public TItem GNAM2;
            public TItem Filter;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.SurfacePatterns, rhs.SurfacePatterns)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.SurfacePatterns2, rhs.SurfacePatterns2)) return false;
                if (!object.Equals(this.GNAM2, rhs.GNAM2)) return false;
                if (!object.Equals(this.Filter, rhs.Filter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.CNAM);
                hash.Add(this.DNAM);
                hash.Add(this.SurfacePatterns);
                hash.Add(this.GNAM);
                hash.Add(this.SurfacePatterns2);
                hash.Add(this.GNAM2);
                hash.Add(this.Filter);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CNAM)) return false;
                if (!eval(this.DNAM)) return false;
                if (this.SurfacePatterns != null)
                {
                    if (!eval(this.SurfacePatterns.Overall)) return false;
                    if (this.SurfacePatterns.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.GNAM)) return false;
                if (this.SurfacePatterns2 != null)
                {
                    if (!eval(this.SurfacePatterns2.Overall)) return false;
                    if (this.SurfacePatterns2.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.GNAM2)) return false;
                if (!eval(this.Filter)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CNAM)) return true;
                if (eval(this.DNAM)) return true;
                if (this.SurfacePatterns != null)
                {
                    if (eval(this.SurfacePatterns.Overall)) return true;
                    if (this.SurfacePatterns.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.GNAM)) return true;
                if (this.SurfacePatterns2 != null)
                {
                    if (eval(this.SurfacePatterns2.Overall)) return true;
                    if (this.SurfacePatterns2.Specific != null)
                    {
                        foreach (var item in this.SurfacePatterns2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.GNAM2)) return true;
                if (eval(this.Filter)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SurfaceTree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CNAM = eval(this.CNAM);
                obj.DNAM = eval(this.DNAM);
                if (SurfacePatterns != null)
                {
                    obj.SurfacePatterns = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SurfacePatterns.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SurfacePatterns.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SurfacePatterns.Specific = l;
                        foreach (var item in SurfacePatterns.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.GNAM = eval(this.GNAM);
                if (SurfacePatterns2 != null)
                {
                    obj.SurfacePatterns2 = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SurfacePatterns2.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SurfacePatterns2.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SurfacePatterns2.Specific = l;
                        foreach (var item in SurfacePatterns2.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.GNAM2 = eval(this.GNAM2);
                obj.Filter = eval(this.Filter);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SurfaceTree.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SurfaceTree.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SurfaceTree.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if ((printMask?.SurfacePatterns?.Overall ?? true)
                        && SurfacePatterns is {} SurfacePatternsItem)
                    {
                        sb.AppendLine("SurfacePatterns =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SurfacePatternsItem.Overall);
                            if (SurfacePatternsItem.Specific != null)
                            {
                                foreach (var subItem in SurfacePatternsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if ((printMask?.SurfacePatterns2?.Overall ?? true)
                        && SurfacePatterns2 is {} SurfacePatterns2Item)
                    {
                        sb.AppendLine("SurfacePatterns2 =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SurfacePatterns2Item.Overall);
                            if (SurfacePatterns2Item.Specific != null)
                            {
                                foreach (var subItem in SurfacePatterns2Item.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.GNAM2 ?? true)
                    {
                        sb.AppendItem(GNAM2, "GNAM2");
                    }
                    if (printMask?.Filter ?? true)
                    {
                        sb.AppendItem(Filter, "Filter");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? CNAM;
            public Exception? DNAM;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SurfacePatterns;
            public Exception? GNAM;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SurfacePatterns2;
            public Exception? GNAM2;
            public Exception? Filter;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SurfaceTree_FieldIndex enu = (SurfaceTree_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTree_FieldIndex.Components:
                        return Components;
                    case SurfaceTree_FieldIndex.CNAM:
                        return CNAM;
                    case SurfaceTree_FieldIndex.DNAM:
                        return DNAM;
                    case SurfaceTree_FieldIndex.SurfacePatterns:
                        return SurfacePatterns;
                    case SurfaceTree_FieldIndex.GNAM:
                        return GNAM;
                    case SurfaceTree_FieldIndex.SurfacePatterns2:
                        return SurfacePatterns2;
                    case SurfaceTree_FieldIndex.GNAM2:
                        return GNAM2;
                    case SurfaceTree_FieldIndex.Filter:
                        return Filter;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SurfaceTree_FieldIndex enu = (SurfaceTree_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTree_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case SurfaceTree_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case SurfaceTree_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case SurfaceTree_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfaceTree_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case SurfaceTree_FieldIndex.SurfacePatterns2:
                        this.SurfacePatterns2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfaceTree_FieldIndex.GNAM2:
                        this.GNAM2 = ex;
                        break;
                    case SurfaceTree_FieldIndex.Filter:
                        this.Filter = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SurfaceTree_FieldIndex enu = (SurfaceTree_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceTree_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case SurfaceTree_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case SurfaceTree_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case SurfaceTree_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SurfaceTree_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case SurfaceTree_FieldIndex.SurfacePatterns2:
                        this.SurfacePatterns2 = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SurfaceTree_FieldIndex.GNAM2:
                        this.GNAM2 = (Exception?)obj;
                        break;
                    case SurfaceTree_FieldIndex.Filter:
                        this.Filter = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (CNAM != null) return true;
                if (DNAM != null) return true;
                if (SurfacePatterns != null) return true;
                if (GNAM != null) return true;
                if (SurfacePatterns2 != null) return true;
                if (GNAM2 != null) return true;
                if (Filter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                if (SurfacePatterns is {} SurfacePatternsItem)
                {
                    sb.AppendLine("SurfacePatterns =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SurfacePatternsItem.Overall);
                        if (SurfacePatternsItem.Specific != null)
                        {
                            foreach (var subItem in SurfacePatternsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                if (SurfacePatterns2 is {} SurfacePatterns2Item)
                {
                    sb.AppendLine("SurfacePatterns2 =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SurfacePatterns2Item.Overall);
                        if (SurfacePatterns2Item.Specific != null)
                        {
                            foreach (var subItem in SurfacePatterns2Item.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(GNAM2, "GNAM2");
                }
                {
                    sb.AppendItem(Filter, "Filter");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.SurfacePatterns = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SurfacePatterns?.Overall, rhs.SurfacePatterns?.Overall), Noggog.ExceptionExt.Combine(this.SurfacePatterns?.Specific, rhs.SurfacePatterns?.Specific));
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.SurfacePatterns2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SurfacePatterns2?.Overall, rhs.SurfacePatterns2?.Overall), Noggog.ExceptionExt.Combine(this.SurfacePatterns2?.Specific, rhs.SurfacePatterns2?.Specific));
                ret.GNAM2 = this.GNAM2.Combine(rhs.GNAM2);
                ret.Filter = this.Filter.Combine(rhs.Filter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool CNAM;
            public bool DNAM;
            public bool SurfacePatterns;
            public bool GNAM;
            public bool SurfacePatterns2;
            public bool GNAM2;
            public bool Filter;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.CNAM = defaultOn;
                this.DNAM = defaultOn;
                this.SurfacePatterns = defaultOn;
                this.GNAM = defaultOn;
                this.SurfacePatterns2 = defaultOn;
                this.GNAM2 = defaultOn;
                this.Filter = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((CNAM, null));
                ret.Add((DNAM, null));
                ret.Add((SurfacePatterns, null));
                ret.Add((GNAM, null));
                ret.Add((SurfacePatterns2, null));
                ret.Add((GNAM2, null));
                ret.Add((Filter, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SurfaceTree_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceTreeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SurfaceTreeSetterCommon.Instance.RemapLinks(this, mapping);
        public SurfaceTree(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SurfaceTree(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SurfaceTree(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SurfaceTree(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SurfaceTree(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SurfaceTree>.ToString(this);
        }

        protected override Type LinkType => typeof(ISurfaceTree);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfaceTreeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SurfaceTreeSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SurfaceTreeSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SurfaceTreeSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfaceTreeGetter rhs) return false;
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceTreeGetter? obj)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfaceTreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceTreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SurfaceTree CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SurfaceTree();
            ((SurfaceTreeSetterCommon)((ISurfaceTreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SurfaceTree item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SurfaceTreeSetterCommon)((ISurfaceTreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SurfaceTree GetNew()
        {
            return new SurfaceTree();
        }

    }
    #endregion

    #region Interface
    public partial interface ISurfaceTree :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISurfaceTreeInternal>,
        IStarfieldMajorRecordInternal,
        ISurfaceTreeGetter
    {
        new ExtendedList<AComponent> Components { get; }
        new MemorySlice<Byte> CNAM { get; set; }
        new MemorySlice<Byte> DNAM { get; set; }
        new IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns { get; }
        new MemorySlice<Byte>? GNAM { get; set; }
        new IFormLinkGetter<ISurfacePatternGetter>[] SurfacePatterns2 { get; }
        new MemorySlice<Byte>? GNAM2 { get; set; }
        new String Filter { get; set; }
    }

    public partial interface ISurfaceTreeInternal :
        IStarfieldMajorRecordInternal,
        ISurfaceTree,
        ISurfaceTreeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SFTR)]
    public partial interface ISurfaceTreeGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISurfaceTreeGetter>,
        IMapsToGetter<ISurfaceTreeGetter>
    {
        static new ILoquiRegistration StaticRegistration => SurfaceTree_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        ReadOnlyMemorySlice<Byte> CNAM { get; }
        ReadOnlyMemorySlice<Byte> DNAM { get; }
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }
        ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns2 { get; }
        ReadOnlyMemorySlice<Byte>? GNAM2 { get; }
        String Filter { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SurfaceTreeMixIn
    {
        public static void Clear(this ISurfaceTreeInternal item)
        {
            ((SurfaceTreeSetterCommon)((ISurfaceTreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SurfaceTree.Mask<bool> GetEqualsMask(
            this ISurfaceTreeGetter item,
            ISurfaceTreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISurfaceTreeGetter item,
            string? name = null,
            SurfaceTree.Mask<bool>? printMask = null)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISurfaceTreeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceTree.Mask<bool>? printMask = null)
        {
            ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISurfaceTreeGetter item,
            ISurfaceTreeGetter rhs,
            SurfaceTree.TranslationMask? equalsMask = null)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISurfaceTreeInternal lhs,
            ISurfaceTreeGetter rhs,
            out SurfaceTree.ErrorMask errorMask,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SurfaceTree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISurfaceTreeInternal lhs,
            ISurfaceTreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SurfaceTree DeepCopy(
            this ISurfaceTreeGetter item,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            return ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SurfaceTree DeepCopy(
            this ISurfaceTreeGetter item,
            out SurfaceTree.ErrorMask errorMask,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            return ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SurfaceTree DeepCopy(
            this ISurfaceTreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SurfaceTree Duplicate(
            this ISurfaceTreeGetter item,
            FormKey formKey,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SurfaceTree Duplicate(
            this ISurfaceTreeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISurfaceTreeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SurfaceTreeSetterCommon)((ISurfaceTreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SurfaceTree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        CNAM = 8,
        DNAM = 9,
        SurfacePatterns = 10,
        GNAM = 11,
        SurfacePatterns2 = 12,
        GNAM2 = 13,
        Filter = 14,
    }
    #endregion

    #region Registration
    internal partial class SurfaceTree_Registration : ILoquiRegistration
    {
        public static readonly SurfaceTree_Registration Instance = new SurfaceTree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(SurfaceTree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SurfaceTree.ErrorMask);

        public static readonly Type ClassType = typeof(SurfaceTree);

        public static readonly Type GetterType = typeof(ISurfaceTreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISurfaceTree);

        public static readonly Type? InternalSetterType = typeof(ISurfaceTreeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SurfaceTree";

        public const string Name = "SurfaceTree";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SFTR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SFTR);
            var all = RecordCollection.Factory(
                RecordTypes.SFTR,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.CNAM,
                RecordTypes.DNAM,
                RecordTypes.FNAM,
                RecordTypes.XXXX,
                RecordTypes.GNAM,
                RecordTypes.NAM1);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SurfaceTreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SurfaceTreeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SurfaceTreeSetterCommon Instance = new SurfaceTreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISurfaceTreeInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.CNAM = Array.Empty<byte>();
            item.DNAM = Array.Empty<byte>();
            item.SurfacePatterns.Fill(FormLink<ISurfacePatternGetter>.Null);
            item.GNAM = default;
            item.SurfacePatterns2.Fill(FormLink<ISurfacePatternGetter>.Null);
            item.GNAM2 = default;
            item.Filter = string.Empty;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISurfaceTreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISurfaceTreeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISurfaceTree obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.SurfacePatterns.RemapLinks(mapping);
            obj.SurfacePatterns2.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISurfaceTree obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISurfaceTree obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISurfaceTreeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISurfaceTreeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SurfaceTreeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SurfaceTreeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfaceTree)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfaceTree)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SurfaceTreeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SurfaceTreeCommon Instance = new SurfaceTreeCommon();

        public SurfaceTree.Mask<bool> GetEqualsMask(
            ISurfaceTreeGetter item,
            ISurfaceTreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SurfaceTree.Mask<bool>(false);
            ((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISurfaceTreeGetter item,
            ISurfaceTreeGetter rhs,
            SurfaceTree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CNAM = MemoryExtensions.SequenceEqual(item.CNAM.Span, rhs.CNAM.Span);
            ret.DNAM = MemoryExtensions.SequenceEqual(item.DNAM.Span, rhs.DNAM.Span);
            ret.SurfacePatterns = EqualsMaskHelper.SpanEqualsHelper<IFormLinkGetter<ISurfacePatternGetter>>(
                item.SurfacePatterns,
                rhs.SurfacePatterns,
                (l, r) => object.Equals(l, r),
                include);
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
            ret.SurfacePatterns2 = EqualsMaskHelper.SpanEqualsHelper<IFormLinkGetter<ISurfacePatternGetter>>(
                item.SurfacePatterns2,
                rhs.SurfacePatterns2,
                (l, r) => object.Equals(l, r),
                include);
            ret.GNAM2 = MemorySliceExt.SequenceEqual(item.GNAM2, rhs.GNAM2);
            ret.Filter = string.Equals(item.Filter, rhs.Filter);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISurfaceTreeGetter item,
            string? name = null,
            SurfaceTree.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISurfaceTreeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceTree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SurfaceTree =>");
            }
            else
            {
                sb.AppendLine($"{name} (SurfaceTree) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISurfaceTreeGetter item,
            StructuredStringBuilder sb,
            SurfaceTree.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.CNAM ?? true)
            {
                sb.AppendLine($"CNAM => {SpanExt.ToHexString(item.CNAM)}");
            }
            if (printMask?.DNAM ?? true)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(item.DNAM)}");
            }
            if (printMask?.SurfacePatterns?.Overall ?? true)
            {
                sb.AppendLine("SurfacePatterns =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SurfacePatterns)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
            if (printMask?.SurfacePatterns2?.Overall ?? true)
            {
                sb.AppendLine("SurfacePatterns2 =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SurfacePatterns2)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.GNAM2 ?? true)
                && item.GNAM2 is {} GNAM2Item)
            {
                sb.AppendLine($"GNAM2 => {SpanExt.ToHexString(GNAM2Item)}");
            }
            if (printMask?.Filter ?? true)
            {
                sb.AppendItem(item.Filter, "Filter");
            }
        }
        
        public static SurfaceTree_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SurfaceTree_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SurfaceTree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SurfaceTree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfaceTree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SurfaceTree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SurfaceTree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SurfaceTree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISurfaceTreeGetter? lhs,
            ISurfaceTreeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SurfaceTree_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.CNAM) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.CNAM.Span, rhs.CNAM.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.DNAM) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DNAM.Span, rhs.DNAM.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.SurfacePatterns) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual<IFormLinkGetter<ISurfacePatternGetter>>(lhs.SurfacePatterns.Span!, rhs.SurfacePatterns.Span!)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.SurfacePatterns2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual<IFormLinkGetter<ISurfacePatternGetter>>(lhs.SurfacePatterns2.Span!, rhs.SurfacePatterns2.Span!)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.GNAM2) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM2, rhs.GNAM2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.Filter) ?? true))
            {
                if (!string.Equals(lhs.Filter, rhs.Filter)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfaceTreeGetter?)lhs,
                rhs: rhs as ISurfaceTreeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfaceTreeGetter?)lhs,
                rhs: rhs as ISurfaceTreeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISurfaceTreeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.CNAM);
            hash.Add(item.DNAM);
            hash.Add(item.SurfacePatterns);
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            hash.Add(item.SurfacePatterns2);
            if (item.GNAM2 is {} GNAM2Item)
            {
                hash.Add(GNAM2Item);
            }
            hash.Add(item.Filter);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfaceTreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfaceTreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SurfaceTree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISurfaceTreeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.SurfacePatterns)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.SurfacePatterns2)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISurfaceTreeGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public SurfaceTree Duplicate(
            ISurfaceTreeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SurfaceTree(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfaceTreeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfaceTreeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SurfaceTreeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SurfaceTreeSetterTranslationCommon Instance = new SurfaceTreeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISurfaceTreeInternal item,
            ISurfaceTreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISurfaceTree item,
            ISurfaceTreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceTree_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.CNAM) ?? true))
            {
                item.CNAM = rhs.CNAM.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.DNAM) ?? true))
            {
                item.DNAM = rhs.DNAM.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.SurfacePatterns) ?? true))
            {
                item.SurfacePatterns.SetTo(rhs.SurfacePatterns.Select(x => new FormLink<ISurfacePatternGetter>(x.FormKey)));
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.SurfacePatterns2) ?? true))
            {
                item.SurfacePatterns2.SetTo(rhs.SurfacePatterns2.Select(x => new FormLink<ISurfacePatternGetter>(x.FormKey)));
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.GNAM2) ?? true))
            {
                if(rhs.GNAM2 is {} GNAM2rhs)
                {
                    item.GNAM2 = GNAM2rhs.ToArray();
                }
                else
                {
                    item.GNAM2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceTree_FieldIndex.Filter) ?? true))
            {
                item.Filter = rhs.Filter;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISurfaceTree item,
            ISurfaceTreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceTreeInternal)item,
                rhs: (ISurfaceTreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceTree)item,
                rhs: (ISurfaceTreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceTreeInternal)item,
                rhs: (ISurfaceTreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceTree)item,
                rhs: (ISurfaceTreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SurfaceTree DeepCopy(
            ISurfaceTreeGetter item,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            SurfaceTree ret = (SurfaceTree)((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SurfaceTree DeepCopy(
            ISurfaceTreeGetter item,
            out SurfaceTree.ErrorMask errorMask,
            SurfaceTree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SurfaceTree ret = (SurfaceTree)((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SurfaceTree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SurfaceTree DeepCopy(
            ISurfaceTreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SurfaceTree ret = (SurfaceTree)((SurfaceTreeCommon)((ISurfaceTreeGetter)item).CommonInstance()!).GetNew();
            ((SurfaceTreeSetterTranslationCommon)((ISurfaceTreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceTree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceTree_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfaceTree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfaceTreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SurfaceTreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfaceTreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceTreeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SurfaceTreeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISurfaceTreeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Write(
                writer: writer,
                items: item.SurfacePatterns,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                overflowRecord: RecordTypes.XXXX,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfacePatternGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                overflowRecord: RecordTypes.XXXX);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Write(
                writer: writer,
                items: item.SurfacePatterns2,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                overflowRecord: RecordTypes.XXXX,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfacePatternGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM2,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                overflowRecord: RecordTypes.XXXX);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Filter,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ISurfaceTreeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SFTR,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISurfaceTreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfaceTreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfaceTreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SurfaceTreeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SurfaceTreeBinaryCreateTranslation Instance = new SurfaceTreeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SFTR;
        public static ParseResult FillBinaryRecordTypes(
            ISurfaceTreeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)SurfaceTree_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SurfaceTree_FieldIndex.CNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SurfaceTree_FieldIndex.DNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.DNAM)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.SurfacePatterns.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Parse(
                                reader: frame,
                                amount: 65536,
                                transl: FormLinkBinaryTranslation.Instance.Parse));
                        return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.GNAM)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.SurfacePatterns2.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Parse(
                                reader: frame,
                                amount: 65536,
                                transl: FormLinkBinaryTranslation.Instance.Parse));
                        return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns2, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.SurfacePatterns.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Parse(
                                        reader: frame,
                                        amount: 65536,
                                        transl: FormLinkBinaryTranslation.Instance.Parse));
                                return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.SurfacePatterns2.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISurfacePatternGetter>>.Instance.Parse(
                                        reader: frame,
                                        amount: 65536,
                                        transl: FormLinkBinaryTranslation.Instance.Parse));
                                return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns2, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.GNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.SurfacePatterns)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)SurfaceTree_FieldIndex.GNAM, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.SurfacePatterns2)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.GNAM2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)SurfaceTree_FieldIndex.GNAM2, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)SurfaceTree_FieldIndex.GNAM, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.GNAM2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)SurfaceTree_FieldIndex.GNAM2, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filter = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SurfaceTree_FieldIndex.Filter;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SurfaceTreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SurfaceTreeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISurfaceTreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceTree_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfaceTree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfaceTreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfaceTreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceTreeCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfaceTreeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfaceTreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceTreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISurfaceTree);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte> CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants) : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte> DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region SurfacePatterns
        private int? _SurfacePatternsLengthOverride;
        private int? _SurfacePatternsLocation;
        private readonly static ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> _defaultSurfacePatterns = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns => _SurfacePatternsLocation.HasValue ? BinaryOverlayArrayHelper.FormLinkSliceFromFixedSize<ISurfacePatternGetter>(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SurfacePatternsLocation.Value, _package.MetaData.Constants, TypedParseParams.FromLengthOverride(_SurfacePatternsLengthOverride)), amount: 65536, masterReferences: _package.MetaData.MasterReferences) : _defaultSurfacePatterns;
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        private int? _GNAMLengthOverride;
        public ReadOnlyMemorySlice<Byte>? GNAM => PluginUtilityTranslation.ReadByteArrayWithOverflow(
            _recordData,
            _package.MetaData.Constants,
            _GNAMLocation,
            _GNAMLengthOverride);
        #endregion
        #region SurfacePatterns2
        private int? _SurfacePatterns2LengthOverride;
        private int? _SurfacePatterns2Location;
        private readonly static ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> _defaultSurfacePatterns2 = ArrayExt.Create(65536, FormLink<ISurfacePatternGetter>.Null);
        public ReadOnlyMemorySlice<IFormLinkGetter<ISurfacePatternGetter>> SurfacePatterns2 => _SurfacePatterns2Location.HasValue ? BinaryOverlayArrayHelper.FormLinkSliceFromFixedSize<ISurfacePatternGetter>(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SurfacePatterns2Location.Value, _package.MetaData.Constants, TypedParseParams.FromLengthOverride(_SurfacePatterns2LengthOverride)), amount: 65536, masterReferences: _package.MetaData.MasterReferences) : _defaultSurfacePatterns2;
        #endregion
        #region GNAM2
        private int? _GNAM2Location;
        private int? _GNAM2LengthOverride;
        public ReadOnlyMemorySlice<Byte>? GNAM2 => PluginUtilityTranslation.ReadByteArrayWithOverflow(
            _recordData,
            _package.MetaData.Constants,
            _GNAM2Location,
            _GNAM2LengthOverride);
        #endregion
        #region Filter
        private int? _FilterLocation;
        public String Filter => _FilterLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilterLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SurfaceTreeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISurfaceTreeGetter SurfaceTreeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SurfaceTreeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISurfaceTreeGetter SurfaceTreeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SurfaceTreeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)SurfaceTree_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)SurfaceTree_FieldIndex.CNAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)SurfaceTree_FieldIndex.DNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.DNAM)
                    {
                        _SurfacePatternsLocation = (stream.Position - offset);
                        _SurfacePatternsLengthOverride = lastParsed.LengthOverride;
                        if (lastParsed.LengthOverride.HasValue)
                        {
                            stream.Position += lastParsed.LengthOverride.Value;
                        }
                        return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.GNAM)
                    {
                        _SurfacePatterns2Location = (stream.Position - offset);
                        _SurfacePatterns2LengthOverride = lastParsed.LengthOverride;
                        if (lastParsed.LengthOverride.HasValue)
                        {
                            stream.Position += lastParsed.LengthOverride.Value;
                        }
                        return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns2, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _SurfacePatternsLocation = (stream.Position - offset);
                                _SurfacePatternsLengthOverride = lastParsed.LengthOverride;
                                if (lastParsed.LengthOverride.HasValue)
                                {
                                    stream.Position += lastParsed.LengthOverride.Value;
                                }
                                return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns, type);
                            }
                            case 1:
                            {
                                _SurfacePatterns2Location = (stream.Position - offset);
                                _SurfacePatterns2LengthOverride = lastParsed.LengthOverride;
                                if (lastParsed.LengthOverride.HasValue)
                                {
                                    stream.Position += lastParsed.LengthOverride.Value;
                                }
                                return new ParseResult((int)SurfaceTree_FieldIndex.SurfacePatterns2, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.GNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.SurfacePatterns)
                    {
                        _GNAMLocation = (stream.Position - offset);
                        _GNAMLengthOverride = lastParsed.LengthOverride;
                        if (lastParsed.LengthOverride.HasValue)
                        {
                            stream.Position += lastParsed.LengthOverride.Value;
                        }
                        return new ParseResult((int)SurfaceTree_FieldIndex.GNAM, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SurfaceTree_FieldIndex.SurfacePatterns2)
                    {
                        _GNAM2Location = (stream.Position - offset);
                        _GNAM2LengthOverride = lastParsed.LengthOverride;
                        if (lastParsed.LengthOverride.HasValue)
                        {
                            stream.Position += lastParsed.LengthOverride.Value;
                        }
                        return new ParseResult((int)SurfaceTree_FieldIndex.GNAM2, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _GNAMLocation = (stream.Position - offset);
                                _GNAMLengthOverride = lastParsed.LengthOverride;
                                if (lastParsed.LengthOverride.HasValue)
                                {
                                    stream.Position += lastParsed.LengthOverride.Value;
                                }
                                return new ParseResult((int)SurfaceTree_FieldIndex.GNAM, type);
                            }
                            case 1:
                            {
                                _GNAM2Location = (stream.Position - offset);
                                _GNAM2LengthOverride = lastParsed.LengthOverride;
                                if (lastParsed.LengthOverride.HasValue)
                                {
                                    stream.Position += lastParsed.LengthOverride.Value;
                                }
                                return new ParseResult((int)SurfaceTree_FieldIndex.GNAM2, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM1:
                {
                    _FilterLocation = (stream.Position - offset);
                    return (int)SurfaceTree_FieldIndex.Filter;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceTreeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SurfaceTree>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfaceTreeGetter rhs) return false;
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceTreeGetter? obj)
        {
            return ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceTreeCommon)((ISurfaceTreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

