/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Planet :
        StarfieldMajorRecord,
        IEquatable<IPlanetGetter>,
        ILoquiObjectSetter<Planet>,
        IPlanetInternal
    {
        #region Ctor
        protected Planet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IPlanetGetter.Components => _Components;
        #endregion

        #endregion
        #region EOVR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _EOVR;
        public MemorySlice<Byte>? EOVR
        {
            get => this._EOVR;
            set => this._EOVR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.EOVR => this.EOVR;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PlanetWorldspace>? _Worldspaces;
        public ExtendedList<PlanetWorldspace>? Worldspaces
        {
            get => this._Worldspaces;
            set => this._Worldspaces = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlanetWorldspaceGetter>? IPlanetGetter.Worldspaces => _Worldspaces;
        #endregion

        #endregion
        #region Biomes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PlanetBiome> _Biomes = new ExtendedList<PlanetBiome>();
        public ExtendedList<PlanetBiome> Biomes
        {
            get => this._Biomes;
            init => this._Biomes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlanetBiomeGetter> IPlanetGetter.Biomes => _Biomes;
        #endregion

        #endregion
        #region SurfaceTree
        private readonly IFormLinkNullable<ISurfaceTreeGetter> _SurfaceTree = new FormLinkNullable<ISurfaceTreeGetter>();
        public IFormLinkNullable<ISurfaceTreeGetter> SurfaceTree
        {
            get => _SurfaceTree;
            set => _SurfaceTree.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISurfaceTreeGetter> IPlanetGetter.SurfaceTree => this.SurfaceTree;
        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.GNAM => this.GNAM;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlanetGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region BodyType
        public Planet.BodyTypeEnum? BodyType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Planet.BodyTypeEnum? IPlanetGetter.BodyType => this.BodyType;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.DNAM => this.DNAM;
        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.ENAM => this.ENAM;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlanetFNAM? _FNAM;
        public PlanetFNAM? FNAM
        {
            get => _FNAM;
            set => _FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlanetFNAMGetter? IPlanetGetter.FNAM => this.FNAM;
        #endregion
        #region IDs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlanetIds? _IDs;
        public PlanetIds? IDs
        {
            get => _IDs;
            set => _IDs = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlanetIdsGetter? IPlanetGetter.IDs => this.IDs;
        #endregion
        #region Details
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlanetDetails? _Details;
        public PlanetDetails? Details
        {
            get => _Details;
            set => _Details = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlanetDetailsGetter? IPlanetGetter.Details => this.Details;
        #endregion
        #region INAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlanetINAM? _INAM;
        public PlanetINAM? INAM
        {
            get => _INAM;
            set => _INAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlanetINAMGetter? IPlanetGetter.INAM => this.INAM;
        #endregion
        #region KNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _KNAM;
        public MemorySlice<Byte>? KNAM
        {
            get => this._KNAM;
            set => this._KNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.KNAM => this.KNAM;
        #endregion
        #region NNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NNAM;
        public MemorySlice<Byte>? NNAM
        {
            get => this._NNAM;
            set => this._NNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.NNAM => this.NNAM;
        #endregion
        #region Temperature
        public Single? Temperature { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlanetGetter.Temperature => this.Temperature;
        #endregion
        #region Density
        public Single? Density { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlanetGetter.Density => this.Density;
        #endregion
        #region PerihelionAngleDegrees
        public Single? PerihelionAngleDegrees { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlanetGetter.PerihelionAngleDegrees => this.PerihelionAngleDegrees;
        #endregion
        #region RSCS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RSCS;
        public MemorySlice<Byte>? RSCS
        {
            get => this._RSCS;
            set => this._RSCS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlanetGetter.RSCS => this.RSCS;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.EOVR = initialValue;
                this.Worldspaces = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetWorldspace.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PlanetWorldspace.Mask<TItem>?>>());
                this.Biomes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiome.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PlanetBiome.Mask<TItem>?>>());
                this.SurfaceTree = initialValue;
                this.GNAM = initialValue;
                this.Name = initialValue;
                this.BodyType = initialValue;
                this.DNAM = initialValue;
                this.ENAM = initialValue;
                this.FNAM = new MaskItem<TItem, PlanetFNAM.Mask<TItem>?>(initialValue, new PlanetFNAM.Mask<TItem>(initialValue));
                this.IDs = new MaskItem<TItem, PlanetIds.Mask<TItem>?>(initialValue, new PlanetIds.Mask<TItem>(initialValue));
                this.Details = new MaskItem<TItem, PlanetDetails.Mask<TItem>?>(initialValue, new PlanetDetails.Mask<TItem>(initialValue));
                this.INAM = new MaskItem<TItem, PlanetINAM.Mask<TItem>?>(initialValue, new PlanetINAM.Mask<TItem>(initialValue));
                this.KNAM = initialValue;
                this.NNAM = initialValue;
                this.Temperature = initialValue;
                this.Density = initialValue;
                this.PerihelionAngleDegrees = initialValue;
                this.RSCS = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem EOVR,
                TItem Worldspaces,
                TItem Biomes,
                TItem SurfaceTree,
                TItem GNAM,
                TItem Name,
                TItem BodyType,
                TItem DNAM,
                TItem ENAM,
                TItem FNAM,
                TItem IDs,
                TItem Details,
                TItem INAM,
                TItem KNAM,
                TItem NNAM,
                TItem Temperature,
                TItem Density,
                TItem PerihelionAngleDegrees,
                TItem RSCS)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.EOVR = EOVR;
                this.Worldspaces = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetWorldspace.Mask<TItem>?>>?>(Worldspaces, Enumerable.Empty<MaskItemIndexed<TItem, PlanetWorldspace.Mask<TItem>?>>());
                this.Biomes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiome.Mask<TItem>?>>?>(Biomes, Enumerable.Empty<MaskItemIndexed<TItem, PlanetBiome.Mask<TItem>?>>());
                this.SurfaceTree = SurfaceTree;
                this.GNAM = GNAM;
                this.Name = Name;
                this.BodyType = BodyType;
                this.DNAM = DNAM;
                this.ENAM = ENAM;
                this.FNAM = new MaskItem<TItem, PlanetFNAM.Mask<TItem>?>(FNAM, new PlanetFNAM.Mask<TItem>(FNAM));
                this.IDs = new MaskItem<TItem, PlanetIds.Mask<TItem>?>(IDs, new PlanetIds.Mask<TItem>(IDs));
                this.Details = new MaskItem<TItem, PlanetDetails.Mask<TItem>?>(Details, new PlanetDetails.Mask<TItem>(Details));
                this.INAM = new MaskItem<TItem, PlanetINAM.Mask<TItem>?>(INAM, new PlanetINAM.Mask<TItem>(INAM));
                this.KNAM = KNAM;
                this.NNAM = NNAM;
                this.Temperature = Temperature;
                this.Density = Density;
                this.PerihelionAngleDegrees = PerihelionAngleDegrees;
                this.RSCS = RSCS;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem EOVR;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetWorldspace.Mask<TItem>?>>?>? Worldspaces;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetBiome.Mask<TItem>?>>?>? Biomes;
            public TItem SurfaceTree;
            public TItem GNAM;
            public TItem Name;
            public TItem BodyType;
            public TItem DNAM;
            public TItem ENAM;
            public MaskItem<TItem, PlanetFNAM.Mask<TItem>?>? FNAM { get; set; }
            public MaskItem<TItem, PlanetIds.Mask<TItem>?>? IDs { get; set; }
            public MaskItem<TItem, PlanetDetails.Mask<TItem>?>? Details { get; set; }
            public MaskItem<TItem, PlanetINAM.Mask<TItem>?>? INAM { get; set; }
            public TItem KNAM;
            public TItem NNAM;
            public TItem Temperature;
            public TItem Density;
            public TItem PerihelionAngleDegrees;
            public TItem RSCS;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.EOVR, rhs.EOVR)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.Biomes, rhs.Biomes)) return false;
                if (!object.Equals(this.SurfaceTree, rhs.SurfaceTree)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.BodyType, rhs.BodyType)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.IDs, rhs.IDs)) return false;
                if (!object.Equals(this.Details, rhs.Details)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.KNAM, rhs.KNAM)) return false;
                if (!object.Equals(this.NNAM, rhs.NNAM)) return false;
                if (!object.Equals(this.Temperature, rhs.Temperature)) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.PerihelionAngleDegrees, rhs.PerihelionAngleDegrees)) return false;
                if (!object.Equals(this.RSCS, rhs.RSCS)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.EOVR);
                hash.Add(this.Worldspaces);
                hash.Add(this.Biomes);
                hash.Add(this.SurfaceTree);
                hash.Add(this.GNAM);
                hash.Add(this.Name);
                hash.Add(this.BodyType);
                hash.Add(this.DNAM);
                hash.Add(this.ENAM);
                hash.Add(this.FNAM);
                hash.Add(this.IDs);
                hash.Add(this.Details);
                hash.Add(this.INAM);
                hash.Add(this.KNAM);
                hash.Add(this.NNAM);
                hash.Add(this.Temperature);
                hash.Add(this.Density);
                hash.Add(this.PerihelionAngleDegrees);
                hash.Add(this.RSCS);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EOVR)) return false;
                if (this.Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null)
                    {
                        foreach (var item in this.Worldspaces.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Biomes != null)
                {
                    if (!eval(this.Biomes.Overall)) return false;
                    if (this.Biomes.Specific != null)
                    {
                        foreach (var item in this.Biomes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SurfaceTree)) return false;
                if (!eval(this.GNAM)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.BodyType)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.ENAM)) return false;
                if (FNAM != null)
                {
                    if (!eval(this.FNAM.Overall)) return false;
                    if (this.FNAM.Specific != null && !this.FNAM.Specific.All(eval)) return false;
                }
                if (IDs != null)
                {
                    if (!eval(this.IDs.Overall)) return false;
                    if (this.IDs.Specific != null && !this.IDs.Specific.All(eval)) return false;
                }
                if (Details != null)
                {
                    if (!eval(this.Details.Overall)) return false;
                    if (this.Details.Specific != null && !this.Details.Specific.All(eval)) return false;
                }
                if (INAM != null)
                {
                    if (!eval(this.INAM.Overall)) return false;
                    if (this.INAM.Specific != null && !this.INAM.Specific.All(eval)) return false;
                }
                if (!eval(this.KNAM)) return false;
                if (!eval(this.NNAM)) return false;
                if (!eval(this.Temperature)) return false;
                if (!eval(this.Density)) return false;
                if (!eval(this.PerihelionAngleDegrees)) return false;
                if (!eval(this.RSCS)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EOVR)) return true;
                if (this.Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null)
                    {
                        foreach (var item in this.Worldspaces.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Biomes != null)
                {
                    if (eval(this.Biomes.Overall)) return true;
                    if (this.Biomes.Specific != null)
                    {
                        foreach (var item in this.Biomes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SurfaceTree)) return true;
                if (eval(this.GNAM)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.BodyType)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.ENAM)) return true;
                if (FNAM != null)
                {
                    if (eval(this.FNAM.Overall)) return true;
                    if (this.FNAM.Specific != null && this.FNAM.Specific.Any(eval)) return true;
                }
                if (IDs != null)
                {
                    if (eval(this.IDs.Overall)) return true;
                    if (this.IDs.Specific != null && this.IDs.Specific.Any(eval)) return true;
                }
                if (Details != null)
                {
                    if (eval(this.Details.Overall)) return true;
                    if (this.Details.Specific != null && this.Details.Specific.Any(eval)) return true;
                }
                if (INAM != null)
                {
                    if (eval(this.INAM.Overall)) return true;
                    if (this.INAM.Specific != null && this.INAM.Specific.Any(eval)) return true;
                }
                if (eval(this.KNAM)) return true;
                if (eval(this.NNAM)) return true;
                if (eval(this.Temperature)) return true;
                if (eval(this.Density)) return true;
                if (eval(this.PerihelionAngleDegrees)) return true;
                if (eval(this.RSCS)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Planet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EOVR = eval(this.EOVR);
                if (Worldspaces != null)
                {
                    obj.Worldspaces = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PlanetWorldspace.Mask<R>?>>?>(eval(this.Worldspaces.Overall), Enumerable.Empty<MaskItemIndexed<R, PlanetWorldspace.Mask<R>?>>());
                    if (Worldspaces.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PlanetWorldspace.Mask<R>?>>();
                        obj.Worldspaces.Specific = l;
                        foreach (var item in Worldspaces.Specific)
                        {
                            MaskItemIndexed<R, PlanetWorldspace.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PlanetWorldspace.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Biomes != null)
                {
                    obj.Biomes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PlanetBiome.Mask<R>?>>?>(eval(this.Biomes.Overall), Enumerable.Empty<MaskItemIndexed<R, PlanetBiome.Mask<R>?>>());
                    if (Biomes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PlanetBiome.Mask<R>?>>();
                        obj.Biomes.Specific = l;
                        foreach (var item in Biomes.Specific)
                        {
                            MaskItemIndexed<R, PlanetBiome.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PlanetBiome.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SurfaceTree = eval(this.SurfaceTree);
                obj.GNAM = eval(this.GNAM);
                obj.Name = eval(this.Name);
                obj.BodyType = eval(this.BodyType);
                obj.DNAM = eval(this.DNAM);
                obj.ENAM = eval(this.ENAM);
                obj.FNAM = this.FNAM == null ? null : new MaskItem<R, PlanetFNAM.Mask<R>?>(eval(this.FNAM.Overall), this.FNAM.Specific?.Translate(eval));
                obj.IDs = this.IDs == null ? null : new MaskItem<R, PlanetIds.Mask<R>?>(eval(this.IDs.Overall), this.IDs.Specific?.Translate(eval));
                obj.Details = this.Details == null ? null : new MaskItem<R, PlanetDetails.Mask<R>?>(eval(this.Details.Overall), this.Details.Specific?.Translate(eval));
                obj.INAM = this.INAM == null ? null : new MaskItem<R, PlanetINAM.Mask<R>?>(eval(this.INAM.Overall), this.INAM.Specific?.Translate(eval));
                obj.KNAM = eval(this.KNAM);
                obj.NNAM = eval(this.NNAM);
                obj.Temperature = eval(this.Temperature);
                obj.Density = eval(this.Density);
                obj.PerihelionAngleDegrees = eval(this.PerihelionAngleDegrees);
                obj.RSCS = eval(this.RSCS);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Planet.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Planet.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Planet.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EOVR ?? true)
                    {
                        sb.AppendItem(EOVR, "EOVR");
                    }
                    if ((printMask?.Worldspaces?.Overall ?? true)
                        && Worldspaces is {} WorldspacesItem)
                    {
                        sb.AppendLine("Worldspaces =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WorldspacesItem.Overall);
                            if (WorldspacesItem.Specific != null)
                            {
                                foreach (var subItem in WorldspacesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Biomes?.Overall ?? true)
                        && Biomes is {} BiomesItem)
                    {
                        sb.AppendLine("Biomes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BiomesItem.Overall);
                            if (BiomesItem.Specific != null)
                            {
                                foreach (var subItem in BiomesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SurfaceTree ?? true)
                    {
                        sb.AppendItem(SurfaceTree, "SurfaceTree");
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.BodyType ?? true)
                    {
                        sb.AppendItem(BodyType, "BodyType");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.FNAM?.Overall ?? true)
                    {
                        FNAM?.Print(sb);
                    }
                    if (printMask?.IDs?.Overall ?? true)
                    {
                        IDs?.Print(sb);
                    }
                    if (printMask?.Details?.Overall ?? true)
                    {
                        Details?.Print(sb);
                    }
                    if (printMask?.INAM?.Overall ?? true)
                    {
                        INAM?.Print(sb);
                    }
                    if (printMask?.KNAM ?? true)
                    {
                        sb.AppendItem(KNAM, "KNAM");
                    }
                    if (printMask?.NNAM ?? true)
                    {
                        sb.AppendItem(NNAM, "NNAM");
                    }
                    if (printMask?.Temperature ?? true)
                    {
                        sb.AppendItem(Temperature, "Temperature");
                    }
                    if (printMask?.Density ?? true)
                    {
                        sb.AppendItem(Density, "Density");
                    }
                    if (printMask?.PerihelionAngleDegrees ?? true)
                    {
                        sb.AppendItem(PerihelionAngleDegrees, "PerihelionAngleDegrees");
                    }
                    if (printMask?.RSCS ?? true)
                    {
                        sb.AppendItem(RSCS, "RSCS");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? EOVR;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetWorldspace.ErrorMask?>>?>? Worldspaces;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiome.ErrorMask?>>?>? Biomes;
            public Exception? SurfaceTree;
            public Exception? GNAM;
            public Exception? Name;
            public Exception? BodyType;
            public Exception? DNAM;
            public Exception? ENAM;
            public MaskItem<Exception?, PlanetFNAM.ErrorMask?>? FNAM;
            public MaskItem<Exception?, PlanetIds.ErrorMask?>? IDs;
            public MaskItem<Exception?, PlanetDetails.ErrorMask?>? Details;
            public MaskItem<Exception?, PlanetINAM.ErrorMask?>? INAM;
            public Exception? KNAM;
            public Exception? NNAM;
            public Exception? Temperature;
            public Exception? Density;
            public Exception? PerihelionAngleDegrees;
            public Exception? RSCS;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Planet_FieldIndex enu = (Planet_FieldIndex)index;
                switch (enu)
                {
                    case Planet_FieldIndex.Components:
                        return Components;
                    case Planet_FieldIndex.EOVR:
                        return EOVR;
                    case Planet_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case Planet_FieldIndex.Biomes:
                        return Biomes;
                    case Planet_FieldIndex.SurfaceTree:
                        return SurfaceTree;
                    case Planet_FieldIndex.GNAM:
                        return GNAM;
                    case Planet_FieldIndex.Name:
                        return Name;
                    case Planet_FieldIndex.BodyType:
                        return BodyType;
                    case Planet_FieldIndex.DNAM:
                        return DNAM;
                    case Planet_FieldIndex.ENAM:
                        return ENAM;
                    case Planet_FieldIndex.FNAM:
                        return FNAM;
                    case Planet_FieldIndex.IDs:
                        return IDs;
                    case Planet_FieldIndex.Details:
                        return Details;
                    case Planet_FieldIndex.INAM:
                        return INAM;
                    case Planet_FieldIndex.KNAM:
                        return KNAM;
                    case Planet_FieldIndex.NNAM:
                        return NNAM;
                    case Planet_FieldIndex.Temperature:
                        return Temperature;
                    case Planet_FieldIndex.Density:
                        return Density;
                    case Planet_FieldIndex.PerihelionAngleDegrees:
                        return PerihelionAngleDegrees;
                    case Planet_FieldIndex.RSCS:
                        return RSCS;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Planet_FieldIndex enu = (Planet_FieldIndex)index;
                switch (enu)
                {
                    case Planet_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Planet_FieldIndex.EOVR:
                        this.EOVR = ex;
                        break;
                    case Planet_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetWorldspace.ErrorMask?>>?>(ex, null);
                        break;
                    case Planet_FieldIndex.Biomes:
                        this.Biomes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiome.ErrorMask?>>?>(ex, null);
                        break;
                    case Planet_FieldIndex.SurfaceTree:
                        this.SurfaceTree = ex;
                        break;
                    case Planet_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case Planet_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Planet_FieldIndex.BodyType:
                        this.BodyType = ex;
                        break;
                    case Planet_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case Planet_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case Planet_FieldIndex.FNAM:
                        this.FNAM = new MaskItem<Exception?, PlanetFNAM.ErrorMask?>(ex, null);
                        break;
                    case Planet_FieldIndex.IDs:
                        this.IDs = new MaskItem<Exception?, PlanetIds.ErrorMask?>(ex, null);
                        break;
                    case Planet_FieldIndex.Details:
                        this.Details = new MaskItem<Exception?, PlanetDetails.ErrorMask?>(ex, null);
                        break;
                    case Planet_FieldIndex.INAM:
                        this.INAM = new MaskItem<Exception?, PlanetINAM.ErrorMask?>(ex, null);
                        break;
                    case Planet_FieldIndex.KNAM:
                        this.KNAM = ex;
                        break;
                    case Planet_FieldIndex.NNAM:
                        this.NNAM = ex;
                        break;
                    case Planet_FieldIndex.Temperature:
                        this.Temperature = ex;
                        break;
                    case Planet_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case Planet_FieldIndex.PerihelionAngleDegrees:
                        this.PerihelionAngleDegrees = ex;
                        break;
                    case Planet_FieldIndex.RSCS:
                        this.RSCS = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Planet_FieldIndex enu = (Planet_FieldIndex)index;
                switch (enu)
                {
                    case Planet_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Planet_FieldIndex.EOVR:
                        this.EOVR = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetWorldspace.ErrorMask?>>?>)obj;
                        break;
                    case Planet_FieldIndex.Biomes:
                        this.Biomes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiome.ErrorMask?>>?>)obj;
                        break;
                    case Planet_FieldIndex.SurfaceTree:
                        this.SurfaceTree = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.BodyType:
                        this.BodyType = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.FNAM:
                        this.FNAM = (MaskItem<Exception?, PlanetFNAM.ErrorMask?>?)obj;
                        break;
                    case Planet_FieldIndex.IDs:
                        this.IDs = (MaskItem<Exception?, PlanetIds.ErrorMask?>?)obj;
                        break;
                    case Planet_FieldIndex.Details:
                        this.Details = (MaskItem<Exception?, PlanetDetails.ErrorMask?>?)obj;
                        break;
                    case Planet_FieldIndex.INAM:
                        this.INAM = (MaskItem<Exception?, PlanetINAM.ErrorMask?>?)obj;
                        break;
                    case Planet_FieldIndex.KNAM:
                        this.KNAM = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.NNAM:
                        this.NNAM = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.Temperature:
                        this.Temperature = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.PerihelionAngleDegrees:
                        this.PerihelionAngleDegrees = (Exception?)obj;
                        break;
                    case Planet_FieldIndex.RSCS:
                        this.RSCS = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (EOVR != null) return true;
                if (Worldspaces != null) return true;
                if (Biomes != null) return true;
                if (SurfaceTree != null) return true;
                if (GNAM != null) return true;
                if (Name != null) return true;
                if (BodyType != null) return true;
                if (DNAM != null) return true;
                if (ENAM != null) return true;
                if (FNAM != null) return true;
                if (IDs != null) return true;
                if (Details != null) return true;
                if (INAM != null) return true;
                if (KNAM != null) return true;
                if (NNAM != null) return true;
                if (Temperature != null) return true;
                if (Density != null) return true;
                if (PerihelionAngleDegrees != null) return true;
                if (RSCS != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EOVR, "EOVR");
                }
                if (Worldspaces is {} WorldspacesItem)
                {
                    sb.AppendLine("Worldspaces =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WorldspacesItem.Overall);
                        if (WorldspacesItem.Specific != null)
                        {
                            foreach (var subItem in WorldspacesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Biomes is {} BiomesItem)
                {
                    sb.AppendLine("Biomes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BiomesItem.Overall);
                        if (BiomesItem.Specific != null)
                        {
                            foreach (var subItem in BiomesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SurfaceTree, "SurfaceTree");
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(BodyType, "BodyType");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                FNAM?.Print(sb);
                IDs?.Print(sb);
                Details?.Print(sb);
                INAM?.Print(sb);
                {
                    sb.AppendItem(KNAM, "KNAM");
                }
                {
                    sb.AppendItem(NNAM, "NNAM");
                }
                {
                    sb.AppendItem(Temperature, "Temperature");
                }
                {
                    sb.AppendItem(Density, "Density");
                }
                {
                    sb.AppendItem(PerihelionAngleDegrees, "PerihelionAngleDegrees");
                }
                {
                    sb.AppendItem(RSCS, "RSCS");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.EOVR = this.EOVR.Combine(rhs.EOVR);
                ret.Worldspaces = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetWorldspace.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Worldspaces?.Overall, rhs.Worldspaces?.Overall), Noggog.ExceptionExt.Combine(this.Worldspaces?.Specific, rhs.Worldspaces?.Specific));
                ret.Biomes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetBiome.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Biomes?.Overall, rhs.Biomes?.Overall), Noggog.ExceptionExt.Combine(this.Biomes?.Specific, rhs.Biomes?.Specific));
                ret.SurfaceTree = this.SurfaceTree.Combine(rhs.SurfaceTree);
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.BodyType = this.BodyType.Combine(rhs.BodyType);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM, (l, r) => l.Combine(r));
                ret.IDs = this.IDs.Combine(rhs.IDs, (l, r) => l.Combine(r));
                ret.Details = this.Details.Combine(rhs.Details, (l, r) => l.Combine(r));
                ret.INAM = this.INAM.Combine(rhs.INAM, (l, r) => l.Combine(r));
                ret.KNAM = this.KNAM.Combine(rhs.KNAM);
                ret.NNAM = this.NNAM.Combine(rhs.NNAM);
                ret.Temperature = this.Temperature.Combine(rhs.Temperature);
                ret.Density = this.Density.Combine(rhs.Density);
                ret.PerihelionAngleDegrees = this.PerihelionAngleDegrees.Combine(rhs.PerihelionAngleDegrees);
                ret.RSCS = this.RSCS.Combine(rhs.RSCS);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool EOVR;
            public PlanetWorldspace.TranslationMask? Worldspaces;
            public PlanetBiome.TranslationMask? Biomes;
            public bool SurfaceTree;
            public bool GNAM;
            public bool Name;
            public bool BodyType;
            public bool DNAM;
            public bool ENAM;
            public PlanetFNAM.TranslationMask? FNAM;
            public PlanetIds.TranslationMask? IDs;
            public PlanetDetails.TranslationMask? Details;
            public PlanetINAM.TranslationMask? INAM;
            public bool KNAM;
            public bool NNAM;
            public bool Temperature;
            public bool Density;
            public bool PerihelionAngleDegrees;
            public bool RSCS;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EOVR = defaultOn;
                this.SurfaceTree = defaultOn;
                this.GNAM = defaultOn;
                this.Name = defaultOn;
                this.BodyType = defaultOn;
                this.DNAM = defaultOn;
                this.ENAM = defaultOn;
                this.KNAM = defaultOn;
                this.NNAM = defaultOn;
                this.Temperature = defaultOn;
                this.Density = defaultOn;
                this.PerihelionAngleDegrees = defaultOn;
                this.RSCS = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((EOVR, null));
                ret.Add((Worldspaces == null ? DefaultOn : !Worldspaces.GetCrystal().CopyNothing, Worldspaces?.GetCrystal()));
                ret.Add((Biomes == null ? DefaultOn : !Biomes.GetCrystal().CopyNothing, Biomes?.GetCrystal()));
                ret.Add((SurfaceTree, null));
                ret.Add((GNAM, null));
                ret.Add((Name, null));
                ret.Add((BodyType, null));
                ret.Add((DNAM, null));
                ret.Add((ENAM, null));
                ret.Add((FNAM != null ? FNAM.OnOverall : DefaultOn, FNAM?.GetCrystal()));
                ret.Add((IDs != null ? IDs.OnOverall : DefaultOn, IDs?.GetCrystal()));
                ret.Add((Details != null ? Details.OnOverall : DefaultOn, Details?.GetCrystal()));
                ret.Add((INAM != null ? INAM.OnOverall : DefaultOn, INAM?.GetCrystal()));
                ret.Add((KNAM, null));
                ret.Add((NNAM, null));
                ret.Add((Temperature, null));
                ret.Add((Density, null));
                ret.Add((PerihelionAngleDegrees, null));
                ret.Add((RSCS, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Planet_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlanetSetterCommon.Instance.RemapLinks(this, mapping);
        public Planet(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Planet(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Planet(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Planet(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Planet(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Planet>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlanet);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => PlanetSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => PlanetSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => PlanetSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlanetGetter rhs) return false;
            return ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetGetter? obj)
        {
            return ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Planet CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Planet();
            ((PlanetSetterCommon)((IPlanetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Planet item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetSetterCommon)((IPlanetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Planet GetNew()
        {
            return new Planet();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanet :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IPlanetInternal>,
        INamed,
        INamedRequired,
        IPlanetGetter,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new MemorySlice<Byte>? EOVR { get; set; }
        new ExtendedList<PlanetWorldspace>? Worldspaces { get; set; }
        new ExtendedList<PlanetBiome> Biomes { get; }
        new IFormLinkNullable<ISurfaceTreeGetter> SurfaceTree { get; set; }
        new MemorySlice<Byte>? GNAM { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new Planet.BodyTypeEnum? BodyType { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new PlanetFNAM? FNAM { get; set; }
        new PlanetIds? IDs { get; set; }
        new PlanetDetails? Details { get; set; }
        new PlanetINAM? INAM { get; set; }
        new MemorySlice<Byte>? KNAM { get; set; }
        new MemorySlice<Byte>? NNAM { get; set; }
        new Single? Temperature { get; set; }
        new Single? Density { get; set; }
        new Single? PerihelionAngleDegrees { get; set; }
        new MemorySlice<Byte>? RSCS { get; set; }
    }

    public partial interface IPlanetInternal :
        IStarfieldMajorRecordInternal,
        IPlanet,
        IPlanetGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.PNDT)]
    public partial interface IPlanetGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlanetGetter>,
        IMapsToGetter<IPlanetGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Planet_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        ReadOnlyMemorySlice<Byte>? EOVR { get; }
        IReadOnlyList<IPlanetWorldspaceGetter>? Worldspaces { get; }
        IReadOnlyList<IPlanetBiomeGetter> Biomes { get; }
        IFormLinkNullableGetter<ISurfaceTreeGetter> SurfaceTree { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        Planet.BodyTypeEnum? BodyType { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        IPlanetFNAMGetter? FNAM { get; }
        IPlanetIdsGetter? IDs { get; }
        IPlanetDetailsGetter? Details { get; }
        IPlanetINAMGetter? INAM { get; }
        ReadOnlyMemorySlice<Byte>? KNAM { get; }
        ReadOnlyMemorySlice<Byte>? NNAM { get; }
        Single? Temperature { get; }
        Single? Density { get; }
        Single? PerihelionAngleDegrees { get; }
        ReadOnlyMemorySlice<Byte>? RSCS { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetMixIn
    {
        public static void Clear(this IPlanetInternal item)
        {
            ((PlanetSetterCommon)((IPlanetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Planet.Mask<bool> GetEqualsMask(
            this IPlanetGetter item,
            IPlanetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetGetter item,
            string? name = null,
            Planet.Mask<bool>? printMask = null)
        {
            return ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Planet.Mask<bool>? printMask = null)
        {
            ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetGetter item,
            IPlanetGetter rhs,
            Planet.TranslationMask? equalsMask = null)
        {
            return ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetInternal lhs,
            IPlanetGetter rhs,
            out Planet.ErrorMask errorMask,
            Planet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetSetterTranslationCommon)((IPlanetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Planet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetInternal lhs,
            IPlanetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetSetterTranslationCommon)((IPlanetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Planet DeepCopy(
            this IPlanetGetter item,
            Planet.TranslationMask? copyMask = null)
        {
            return ((PlanetSetterTranslationCommon)((IPlanetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Planet DeepCopy(
            this IPlanetGetter item,
            out Planet.ErrorMask errorMask,
            Planet.TranslationMask? copyMask = null)
        {
            return ((PlanetSetterTranslationCommon)((IPlanetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Planet DeepCopy(
            this IPlanetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetSetterTranslationCommon)((IPlanetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Planet Duplicate(
            this IPlanetGetter item,
            FormKey formKey,
            Planet.TranslationMask? copyMask = null)
        {
            return ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Planet Duplicate(
            this IPlanetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetSetterCommon)((IPlanetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Planet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        EOVR = 8,
        Worldspaces = 9,
        Biomes = 10,
        SurfaceTree = 11,
        GNAM = 12,
        Name = 13,
        BodyType = 14,
        DNAM = 15,
        ENAM = 16,
        FNAM = 17,
        IDs = 18,
        Details = 19,
        INAM = 20,
        KNAM = 21,
        NNAM = 22,
        Temperature = 23,
        Density = 24,
        PerihelionAngleDegrees = 25,
        RSCS = 26,
    }
    #endregion

    #region Registration
    internal partial class Planet_Registration : ILoquiRegistration
    {
        public static readonly Planet_Registration Instance = new Planet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(Planet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Planet.ErrorMask);

        public static readonly Type ClassType = typeof(Planet);

        public static readonly Type GetterType = typeof(IPlanetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanet);

        public static readonly Type? InternalSetterType = typeof(IPlanetInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Planet";

        public const string Name = "Planet";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PNDT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.PNDT);
            var all = RecordCollection.Factory(
                RecordTypes.PNDT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.EOVR,
                RecordTypes.CNAM,
                RecordTypes.PPBD,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.BDST,
                RecordTypes.ANAM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.HNAM,
                RecordTypes.INAM,
                RecordTypes.KNAM,
                RecordTypes.NNAM,
                RecordTypes.BDED,
                RecordTypes.TEMP,
                RecordTypes.DENS,
                RecordTypes.PHLA,
                RecordTypes.RSCS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly PlanetSetterCommon Instance = new PlanetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.EOVR = default;
            item.Worldspaces = null;
            item.Biomes.Clear();
            item.SurfaceTree.Clear();
            item.GNAM = default;
            item.Name = default;
            item.BodyType = default;
            item.DNAM = default;
            item.ENAM = default;
            item.FNAM = null;
            item.IDs = null;
            item.Details = null;
            item.INAM = null;
            item.KNAM = default;
            item.NNAM = default;
            item.Temperature = default;
            item.Density = default;
            item.PerihelionAngleDegrees = default;
            item.RSCS = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IPlanetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlanetInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Worldspaces?.RemapLinks(mapping);
            obj.Biomes.RemapLinks(mapping);
            obj.SurfaceTree.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IPlanet obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IPlanet obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlanetInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlanetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlanetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Planet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Planet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlanetCommon : StarfieldMajorRecordCommon
    {
        public new static readonly PlanetCommon Instance = new PlanetCommon();

        public Planet.Mask<bool> GetEqualsMask(
            IPlanetGetter item,
            IPlanetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Planet.Mask<bool>(false);
            ((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetGetter item,
            IPlanetGetter rhs,
            Planet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EOVR = MemorySliceExt.SequenceEqual(item.EOVR, rhs.EOVR);
            ret.Worldspaces = item.Worldspaces.CollectionEqualsHelper(
                rhs.Worldspaces,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Biomes = item.Biomes.CollectionEqualsHelper(
                rhs.Biomes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SurfaceTree = item.SurfaceTree.Equals(rhs.SurfaceTree);
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.BodyType = item.BodyType == rhs.BodyType;
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.FNAM = EqualsMaskHelper.EqualsHelper(
                item.FNAM,
                rhs.FNAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IDs = EqualsMaskHelper.EqualsHelper(
                item.IDs,
                rhs.IDs,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Details = EqualsMaskHelper.EqualsHelper(
                item.Details,
                rhs.Details,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.INAM = EqualsMaskHelper.EqualsHelper(
                item.INAM,
                rhs.INAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.KNAM = MemorySliceExt.SequenceEqual(item.KNAM, rhs.KNAM);
            ret.NNAM = MemorySliceExt.SequenceEqual(item.NNAM, rhs.NNAM);
            ret.Temperature = item.Temperature.EqualsWithin(rhs.Temperature);
            ret.Density = item.Density.EqualsWithin(rhs.Density);
            ret.PerihelionAngleDegrees = item.PerihelionAngleDegrees.EqualsWithin(rhs.PerihelionAngleDegrees);
            ret.RSCS = MemorySliceExt.SequenceEqual(item.RSCS, rhs.RSCS);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlanetGetter item,
            string? name = null,
            Planet.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Planet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Planet =>");
            }
            else
            {
                sb.AppendLine($"{name} (Planet) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetGetter item,
            StructuredStringBuilder sb,
            Planet.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EOVR ?? true)
                && item.EOVR is {} EOVRItem)
            {
                sb.AppendLine($"EOVR => {SpanExt.ToHexString(EOVRItem)}");
            }
            if ((printMask?.Worldspaces?.Overall ?? true)
                && item.Worldspaces is {} WorldspacesItem)
            {
                sb.AppendLine("Worldspaces =>");
                using (sb.Brace())
                {
                    foreach (var subItem in WorldspacesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Biomes?.Overall ?? true)
            {
                sb.AppendLine("Biomes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Biomes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SurfaceTree ?? true)
            {
                sb.AppendItem(item.SurfaceTree.FormKeyNullable, "SurfaceTree");
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.BodyType ?? true)
                && item.BodyType is {} BodyTypeItem)
            {
                sb.AppendItem(BodyTypeItem, "BodyType");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.FNAM?.Overall ?? true)
                && item.FNAM is {} FNAMItem)
            {
                FNAMItem?.Print(sb, "FNAM");
            }
            if ((printMask?.IDs?.Overall ?? true)
                && item.IDs is {} IDsItem)
            {
                IDsItem?.Print(sb, "IDs");
            }
            if ((printMask?.Details?.Overall ?? true)
                && item.Details is {} DetailsItem)
            {
                DetailsItem?.Print(sb, "Details");
            }
            if ((printMask?.INAM?.Overall ?? true)
                && item.INAM is {} INAMItem)
            {
                INAMItem?.Print(sb, "INAM");
            }
            if ((printMask?.KNAM ?? true)
                && item.KNAM is {} KNAMItem)
            {
                sb.AppendLine($"KNAM => {SpanExt.ToHexString(KNAMItem)}");
            }
            if ((printMask?.NNAM ?? true)
                && item.NNAM is {} NNAMItem)
            {
                sb.AppendLine($"NNAM => {SpanExt.ToHexString(NNAMItem)}");
            }
            if ((printMask?.Temperature ?? true)
                && item.Temperature is {} TemperatureItem)
            {
                sb.AppendItem(TemperatureItem, "Temperature");
            }
            if ((printMask?.Density ?? true)
                && item.Density is {} DensityItem)
            {
                sb.AppendItem(DensityItem, "Density");
            }
            if ((printMask?.PerihelionAngleDegrees ?? true)
                && item.PerihelionAngleDegrees is {} PerihelionAngleDegreesItem)
            {
                sb.AppendItem(PerihelionAngleDegreesItem, "PerihelionAngleDegrees");
            }
            if ((printMask?.RSCS ?? true)
                && item.RSCS is {} RSCSItem)
            {
                sb.AppendLine($"RSCS => {SpanExt.ToHexString(RSCSItem)}");
            }
        }
        
        public static Planet_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Planet_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Planet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Planet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Planet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Planet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Planet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Planet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetGetter? lhs,
            IPlanetGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.EOVR) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.EOVR, rhs.EOVR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Worldspaces) ?? true))
            {
                if (!lhs.Worldspaces.SequenceEqualNullable(rhs.Worldspaces, (l, r) => ((PlanetWorldspaceCommon)((IPlanetWorldspaceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.Worldspaces)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Biomes) ?? true))
            {
                if (!lhs.Biomes.SequenceEqual(rhs.Biomes, (l, r) => ((PlanetBiomeCommon)((IPlanetBiomeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.Biomes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.SurfaceTree) ?? true))
            {
                if (!lhs.SurfaceTree.Equals(rhs.SurfaceTree)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.BodyType) ?? true))
            {
                if (lhs.BodyType != rhs.BodyType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.FNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FNAM, rhs.FNAM, out var lhsFNAM, out var rhsFNAM, out var isFNAMEqual))
                {
                    if (!((PlanetFNAMCommon)((IPlanetFNAMGetter)lhsFNAM).CommonInstance()!).Equals(lhsFNAM, rhsFNAM, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.FNAM))) return false;
                }
                else if (!isFNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.IDs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IDs, rhs.IDs, out var lhsIDs, out var rhsIDs, out var isIDsEqual))
                {
                    if (!((PlanetIdsCommon)((IPlanetIdsGetter)lhsIDs).CommonInstance()!).Equals(lhsIDs, rhsIDs, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.IDs))) return false;
                }
                else if (!isIDsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Details) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Details, rhs.Details, out var lhsDetails, out var rhsDetails, out var isDetailsEqual))
                {
                    if (!((PlanetDetailsCommon)((IPlanetDetailsGetter)lhsDetails).CommonInstance()!).Equals(lhsDetails, rhsDetails, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.Details))) return false;
                }
                else if (!isDetailsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.INAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.INAM, rhs.INAM, out var lhsINAM, out var rhsINAM, out var isINAMEqual))
                {
                    if (!((PlanetINAMCommon)((IPlanetINAMGetter)lhsINAM).CommonInstance()!).Equals(lhsINAM, rhsINAM, equalsMask?.GetSubCrystal((int)Planet_FieldIndex.INAM))) return false;
                }
                else if (!isINAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.KNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.KNAM, rhs.KNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.NNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NNAM, rhs.NNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Temperature) ?? true))
            {
                if (!lhs.Temperature.EqualsWithin(rhs.Temperature)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.Density) ?? true))
            {
                if (!lhs.Density.EqualsWithin(rhs.Density)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.PerihelionAngleDegrees) ?? true))
            {
                if (!lhs.PerihelionAngleDegrees.EqualsWithin(rhs.PerihelionAngleDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Planet_FieldIndex.RSCS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RSCS, rhs.RSCS)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetGetter?)lhs,
                rhs: rhs as IPlanetGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetGetter?)lhs,
                rhs: rhs as IPlanetGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlanetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.EOVR is {} EOVRItem)
            {
                hash.Add(EOVRItem);
            }
            hash.Add(item.Worldspaces);
            hash.Add(item.Biomes);
            hash.Add(item.SurfaceTree);
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.BodyType is {} BodyTypeitem)
            {
                hash.Add(BodyTypeitem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.FNAM is {} FNAMitem)
            {
                hash.Add(FNAMitem);
            }
            if (item.IDs is {} IDsitem)
            {
                hash.Add(IDsitem);
            }
            if (item.Details is {} Detailsitem)
            {
                hash.Add(Detailsitem);
            }
            if (item.INAM is {} INAMitem)
            {
                hash.Add(INAMitem);
            }
            if (item.KNAM is {} KNAMItem)
            {
                hash.Add(KNAMItem);
            }
            if (item.NNAM is {} NNAMItem)
            {
                hash.Add(NNAMItem);
            }
            if (item.Temperature is {} Temperatureitem)
            {
                hash.Add(Temperatureitem);
            }
            if (item.Density is {} Densityitem)
            {
                hash.Add(Densityitem);
            }
            if (item.PerihelionAngleDegrees is {} PerihelionAngleDegreesitem)
            {
                hash.Add(PerihelionAngleDegreesitem);
            }
            if (item.RSCS is {} RSCSItem)
            {
                hash.Add(RSCSItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlanetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlanetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Planet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Worldspaces is {} WorldspacesItem)
            {
                foreach (var item in WorldspacesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Biomes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.SurfaceTree, out var SurfaceTreeInfo))
            {
                yield return SurfaceTreeInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IPlanetGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Planet Duplicate(
            IPlanetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Planet(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlanetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlanetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlanetSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly PlanetSetterTranslationCommon Instance = new PlanetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetInternal item,
            IPlanetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlanet item,
            IPlanetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.EOVR) ?? true))
            {
                if(rhs.EOVR is {} EOVRrhs)
                {
                    item.EOVR = EOVRrhs.ToArray();
                }
                else
                {
                    item.EOVR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.Worldspaces);
                try
                {
                    if ((rhs.Worldspaces != null))
                    {
                        item.Worldspaces = 
                            rhs.Worldspaces
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PlanetWorldspace>();
                    }
                    else
                    {
                        item.Worldspaces = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Biomes) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.Biomes);
                try
                {
                    item.Biomes.SetTo(
                        rhs.Biomes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.SurfaceTree) ?? true))
            {
                item.SurfaceTree.SetTo(rhs.SurfaceTree.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.BodyType) ?? true))
            {
                item.BodyType = rhs.BodyType;
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.FNAM) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.FNAM);
                try
                {
                    if(rhs.FNAM is {} rhsFNAM)
                    {
                        item.FNAM = rhsFNAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Planet_FieldIndex.FNAM));
                    }
                    else
                    {
                        item.FNAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.IDs) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.IDs);
                try
                {
                    if(rhs.IDs is {} rhsIDs)
                    {
                        item.IDs = rhsIDs.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Planet_FieldIndex.IDs));
                    }
                    else
                    {
                        item.IDs = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Details) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.Details);
                try
                {
                    if(rhs.Details is {} rhsDetails)
                    {
                        item.Details = rhsDetails.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Planet_FieldIndex.Details));
                    }
                    else
                    {
                        item.Details = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.INAM) ?? true))
            {
                errorMask?.PushIndex((int)Planet_FieldIndex.INAM);
                try
                {
                    if(rhs.INAM is {} rhsINAM)
                    {
                        item.INAM = rhsINAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Planet_FieldIndex.INAM));
                    }
                    else
                    {
                        item.INAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.KNAM) ?? true))
            {
                if(rhs.KNAM is {} KNAMrhs)
                {
                    item.KNAM = KNAMrhs.ToArray();
                }
                else
                {
                    item.KNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.NNAM) ?? true))
            {
                if(rhs.NNAM is {} NNAMrhs)
                {
                    item.NNAM = NNAMrhs.ToArray();
                }
                else
                {
                    item.NNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Temperature) ?? true))
            {
                item.Temperature = rhs.Temperature;
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.PerihelionAngleDegrees) ?? true))
            {
                item.PerihelionAngleDegrees = rhs.PerihelionAngleDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)Planet_FieldIndex.RSCS) ?? true))
            {
                if(rhs.RSCS is {} RSCSrhs)
                {
                    item.RSCS = RSCSrhs.ToArray();
                }
                else
                {
                    item.RSCS = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlanet item,
            IPlanetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetInternal)item,
                rhs: (IPlanetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanet)item,
                rhs: (IPlanetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetInternal)item,
                rhs: (IPlanetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanet)item,
                rhs: (IPlanetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Planet DeepCopy(
            IPlanetGetter item,
            Planet.TranslationMask? copyMask = null)
        {
            Planet ret = (Planet)((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).GetNew();
            ((PlanetSetterTranslationCommon)((IPlanetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Planet DeepCopy(
            IPlanetGetter item,
            out Planet.ErrorMask errorMask,
            Planet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Planet ret = (Planet)((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).GetNew();
            ((PlanetSetterTranslationCommon)((IPlanetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Planet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Planet DeepCopy(
            IPlanetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Planet ret = (Planet)((PlanetCommon)((IPlanetGetter)item).CommonInstance()!).GetNew();
            ((PlanetSetterTranslationCommon)((IPlanetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Planet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Planet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Planet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlanetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlanetBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlanetGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EOVR,
                header: translationParams.ConvertToCustom(RecordTypes.EOVR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPlanetWorldspaceGetter>.Instance.Write(
                writer: writer,
                items: item.Worldspaces,
                recordType: translationParams.ConvertToCustom(RecordTypes.CNAM),
                transl: (MutagenWriter subWriter, IPlanetWorldspaceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PlanetWorldspaceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPlanetBiomeGetter>.Instance.Write(
                writer: writer,
                items: item.Biomes,
                transl: (MutagenWriter subWriter, IPlanetBiomeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PlanetBiomeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SurfaceTree,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            using (HeaderExport.Subrecord(writer, RecordTypes.BDST)) { }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<Planet.BodyTypeEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.BodyType,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            if (item.FNAM is {} FNAMItem)
            {
                ((PlanetFNAMBinaryWriteTranslation)((IBinaryItem)FNAMItem).BinaryWriteTranslator).Write(
                    item: FNAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.IDs is {} IDsItem)
            {
                ((PlanetIdsBinaryWriteTranslation)((IBinaryItem)IDsItem).BinaryWriteTranslator).Write(
                    item: IDsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Details is {} DetailsItem)
            {
                ((PlanetDetailsBinaryWriteTranslation)((IBinaryItem)DetailsItem).BinaryWriteTranslator).Write(
                    item: DetailsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.INAM is {} INAMItem)
            {
                ((PlanetINAMBinaryWriteTranslation)((IBinaryItem)INAMItem).BinaryWriteTranslator).Write(
                    item: INAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.KNAM,
                header: translationParams.ConvertToCustom(RecordTypes.KNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NNAM,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            using (HeaderExport.Subrecord(writer, RecordTypes.BDED)) { }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Temperature,
                header: translationParams.ConvertToCustom(RecordTypes.TEMP));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Density,
                header: translationParams.ConvertToCustom(RecordTypes.DENS));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PerihelionAngleDegrees,
                header: translationParams.ConvertToCustom(RecordTypes.PHLA));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RSCS,
                header: translationParams.ConvertToCustom(RecordTypes.RSCS));
        }

        public void Write(
            MutagenWriter writer,
            IPlanetGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PNDT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlanetBinaryCreateTranslation Instance = new PlanetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PNDT;
        public static ParseResult FillBinaryRecordTypes(
            IPlanetInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Planet_FieldIndex.Components;
                }
                case RecordTypeInts.EOVR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EOVR = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.EOVR;
                }
                case RecordTypeInts.CNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.EOVR)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Worldspaces = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetWorldspace>.Instance.Parse(
                                reader: frame.SpawnWithLength(contentLength),
                                transl: PlanetWorldspace.TryCreateFromBinary)
                            .CastExtendedList<PlanetWorldspace>();
                        return new ParseResult((int)Planet_FieldIndex.Worldspaces, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.Name)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.BodyType = EnumBinaryTranslation<Planet.BodyTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                            reader: frame,
                            length: contentLength);
                        return new ParseResult((int)Planet_FieldIndex.BodyType, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.Worldspaces = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetWorldspace>.Instance.Parse(
                                        reader: frame.SpawnWithLength(contentLength),
                                        transl: PlanetWorldspace.TryCreateFromBinary)
                                    .CastExtendedList<PlanetWorldspace>();
                                return new ParseResult((int)Planet_FieldIndex.Worldspaces, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.BodyType = EnumBinaryTranslation<Planet.BodyTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                                    reader: frame,
                                    length: contentLength);
                                return new ParseResult((int)Planet_FieldIndex.BodyType, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.PPBD:
                {
                    item.Biomes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetBiome>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: PlanetBiome_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: PlanetBiome.TryCreateFromBinary));
                    return (int)Planet_FieldIndex.Biomes;
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.Biomes)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.SurfaceTree.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                        return new ParseResult((int)Planet_FieldIndex.SurfaceTree, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.ENAM)
                    {
                        item.FNAM = Mutagen.Bethesda.Starfield.PlanetFNAM.CreateFromBinary(frame: frame);
                        return new ParseResult((int)Planet_FieldIndex.FNAM, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.SurfaceTree.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                                return new ParseResult((int)Planet_FieldIndex.SurfaceTree, nextRecordType);
                            case 1:
                                item.FNAM = Mutagen.Bethesda.Starfield.PlanetFNAM.CreateFromBinary(frame: frame);
                                return new ParseResult((int)Planet_FieldIndex.FNAM, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.GNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.SurfaceTree)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)Planet_FieldIndex.GNAM, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.FNAM)
                    {
                        item.IDs = Mutagen.Bethesda.Starfield.PlanetIds.CreateFromBinary(frame: frame);
                        return new ParseResult((int)Planet_FieldIndex.IDs, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)Planet_FieldIndex.GNAM, nextRecordType);
                            case 1:
                                item.IDs = Mutagen.Bethesda.Starfield.PlanetIds.CreateFromBinary(frame: frame);
                                return new ParseResult((int)Planet_FieldIndex.IDs, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.BDST:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Planet_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.ENAM;
                }
                case RecordTypeInts.HNAM:
                {
                    item.Details = Mutagen.Bethesda.Starfield.PlanetDetails.CreateFromBinary(frame: frame);
                    return (int)Planet_FieldIndex.Details;
                }
                case RecordTypeInts.INAM:
                {
                    item.INAM = Mutagen.Bethesda.Starfield.PlanetINAM.CreateFromBinary(frame: frame);
                    return (int)Planet_FieldIndex.INAM;
                }
                case RecordTypeInts.KNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.KNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.KNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.NNAM;
                }
                case RecordTypeInts.BDED:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.TEMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Temperature = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.Temperature;
                }
                case RecordTypeInts.DENS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Density = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.Density;
                }
                case RecordTypeInts.PHLA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PerihelionAngleDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.PerihelionAngleDegrees;
                }
                case RecordTypeInts.RSCS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RSCS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Planet_FieldIndex.RSCS;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IPlanetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Planet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Planet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlanet);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region EOVR
        private int? _EOVRLocation;
        public ReadOnlyMemorySlice<Byte>? EOVR => _EOVRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _EOVRLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IPlanetWorldspaceGetter>? Worldspaces { get; private set; }
        public IReadOnlyList<IPlanetBiomeGetter> Biomes { get; private set; } = Array.Empty<IPlanetBiomeGetter>();
        #region SurfaceTree
        private int? _SurfaceTreeLocation;
        public IFormLinkNullableGetter<ISurfaceTreeGetter> SurfaceTree => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISurfaceTreeGetter>(_package, _recordData, _SurfaceTreeLocation);
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        public ReadOnlyMemorySlice<Byte>? GNAM => _GNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region BodyType
        private int? _BodyTypeLocation;
        public Planet.BodyTypeEnum? BodyType => _BodyTypeLocation.HasValue ? (Planet.BodyTypeEnum)HeaderTranslation.ExtractSubrecordMemory(_recordData, _BodyTypeLocation!.Value, _package.MetaData.Constants)[0] : default(Planet.BodyTypeEnum?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FNAM
        private RangeInt32? _FNAMLocation;
        public IPlanetFNAMGetter? FNAM => _FNAMLocation.HasValue ? PlanetFNAMBinaryOverlay.PlanetFNAMFactory(_recordData.Slice(_FNAMLocation!.Value.Min), _package) : default;
        #endregion
        #region IDs
        private RangeInt32? _IDsLocation;
        public IPlanetIdsGetter? IDs => _IDsLocation.HasValue ? PlanetIdsBinaryOverlay.PlanetIdsFactory(_recordData.Slice(_IDsLocation!.Value.Min), _package) : default;
        #endregion
        #region Details
        private RangeInt32? _DetailsLocation;
        public IPlanetDetailsGetter? Details => _DetailsLocation.HasValue ? PlanetDetailsBinaryOverlay.PlanetDetailsFactory(_recordData.Slice(_DetailsLocation!.Value.Min), _package) : default;
        #endregion
        #region INAM
        private RangeInt32? _INAMLocation;
        public IPlanetINAMGetter? INAM => _INAMLocation.HasValue ? PlanetINAMBinaryOverlay.PlanetINAMFactory(_recordData.Slice(_INAMLocation!.Value.Min), _package) : default;
        #endregion
        #region KNAM
        private int? _KNAMLocation;
        public ReadOnlyMemorySlice<Byte>? KNAM => _KNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _KNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NNAM
        private int? _NNAMLocation;
        public ReadOnlyMemorySlice<Byte>? NNAM => _NNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Temperature
        private int? _TemperatureLocation;
        public Single? Temperature => _TemperatureLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TemperatureLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Density
        private int? _DensityLocation;
        public Single? Density => _DensityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DensityLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region PerihelionAngleDegrees
        private int? _PerihelionAngleDegreesLocation;
        public Single? PerihelionAngleDegrees => _PerihelionAngleDegreesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PerihelionAngleDegreesLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region RSCS
        private int? _RSCSLocation;
        public ReadOnlyMemorySlice<Byte>? RSCS => _RSCSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RSCSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlanetGetter PlanetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlanetGetter PlanetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Planet_FieldIndex.Components;
                }
                case RecordTypeInts.EOVR:
                {
                    _EOVRLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.EOVR;
                }
                case RecordTypeInts.CNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.EOVR)
                    {
                        this.Worldspaces = BinaryOverlayList.FactoryByStartIndexWithTrigger<IPlanetWorldspaceGetter>(
                            stream: stream,
                            package: _package,
                            finalPos: finalPos,
                            itemLength: 20,
                            getter: (s, p) => PlanetWorldspaceBinaryOverlay.PlanetWorldspaceFactory(s, p));
                        return new ParseResult((int)Planet_FieldIndex.Worldspaces, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.Name)
                    {
                        _BodyTypeLocation = (stream.Position - offset);
                        return new ParseResult((int)Planet_FieldIndex.BodyType, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.Worldspaces = BinaryOverlayList.FactoryByStartIndexWithTrigger<IPlanetWorldspaceGetter>(
                                    stream: stream,
                                    package: _package,
                                    finalPos: finalPos,
                                    itemLength: 20,
                                    getter: (s, p) => PlanetWorldspaceBinaryOverlay.PlanetWorldspaceFactory(s, p));
                                return new ParseResult((int)Planet_FieldIndex.Worldspaces, type);
                            }
                            case 1:
                            {
                                _BodyTypeLocation = (stream.Position - offset);
                                return new ParseResult((int)Planet_FieldIndex.BodyType, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.PPBD:
                {
                    this.Biomes = BinaryOverlayList.FactoryByArray<IPlanetBiomeGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => PlanetBiomeBinaryOverlay.PlanetBiomeFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: PlanetBiome_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Planet_FieldIndex.Biomes;
                }
                case RecordTypeInts.FNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.Biomes)
                    {
                        _SurfaceTreeLocation = (stream.Position - offset);
                        return new ParseResult((int)Planet_FieldIndex.SurfaceTree, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.ENAM)
                    {
                        _FNAMLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                        return new ParseResult((int)Planet_FieldIndex.FNAM, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _SurfaceTreeLocation = (stream.Position - offset);
                                return new ParseResult((int)Planet_FieldIndex.SurfaceTree, type);
                            }
                            case 1:
                            {
                                _FNAMLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                                return new ParseResult((int)Planet_FieldIndex.FNAM, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.GNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.SurfaceTree)
                    {
                        _GNAMLocation = (stream.Position - offset);
                        return new ParseResult((int)Planet_FieldIndex.GNAM, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Planet_FieldIndex.FNAM)
                    {
                        _IDsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                        return new ParseResult((int)Planet_FieldIndex.IDs, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _GNAMLocation = (stream.Position - offset);
                                return new ParseResult((int)Planet_FieldIndex.GNAM, type);
                            }
                            case 1:
                            {
                                _IDsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                                return new ParseResult((int)Planet_FieldIndex.IDs, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.BDST:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.ANAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.ENAM;
                }
                case RecordTypeInts.HNAM:
                {
                    _DetailsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Planet_FieldIndex.Details;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Planet_FieldIndex.INAM;
                }
                case RecordTypeInts.KNAM:
                {
                    _KNAMLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.KNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    _NNAMLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.NNAM;
                }
                case RecordTypeInts.BDED:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.TEMP:
                {
                    _TemperatureLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.Temperature;
                }
                case RecordTypeInts.DENS:
                {
                    _DensityLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.Density;
                }
                case RecordTypeInts.PHLA:
                {
                    _PerihelionAngleDegreesLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.PerihelionAngleDegrees;
                }
                case RecordTypeInts.RSCS:
                {
                    _RSCSLocation = (stream.Position - offset);
                    return (int)Planet_FieldIndex.RSCS;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Planet>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlanetGetter rhs) return false;
            return ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetGetter? obj)
        {
            return ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetCommon)((IPlanetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

