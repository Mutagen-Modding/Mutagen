/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SceneCollection :
        StarfieldMajorRecord,
        IEquatable<ISceneCollectionGetter>,
        ILoquiObjectSetter<SceneCollection>,
        ISceneCollectionInternal
    {
        #region Ctor
        protected SceneCollection()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quest
        private readonly IFormLinkNullable<IQuestGetter> _Quest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> ISceneCollectionGetter.Quest => this.Quest;
        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SceneCollectionItem> _Scenes = new ExtendedList<SceneCollectionItem>();
        public ExtendedList<SceneCollectionItem> Scenes
        {
            get => this._Scenes;
            init => this._Scenes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISceneCollectionItemGetter> ISceneCollectionGetter.Scenes => _Scenes;
        #endregion

        #endregion
        #region VNAM
        public Int32? VNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ISceneCollectionGetter.VNAM => this.VNAM;
        #endregion
        #region XNAMs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Int64> _XNAMs = new ExtendedList<Int64>();
        public ExtendedList<Int64> XNAMs
        {
            get => this._XNAMs;
            init => this._XNAMs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int64> ISceneCollectionGetter.XNAMs => _XNAMs;
        #endregion

        #endregion
        #region VNAM2
        public Int32? VNAM2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ISceneCollectionGetter.VNAM2 => this.VNAM2;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneCollectionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Quest = initialValue;
                this.Scenes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneCollectionItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SceneCollectionItem.Mask<TItem>?>>());
                this.VNAM = initialValue;
                this.XNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.VNAM2 = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Quest,
                TItem Scenes,
                TItem VNAM,
                TItem XNAMs,
                TItem VNAM2)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Quest = Quest;
                this.Scenes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneCollectionItem.Mask<TItem>?>>?>(Scenes, Enumerable.Empty<MaskItemIndexed<TItem, SceneCollectionItem.Mask<TItem>?>>());
                this.VNAM = VNAM;
                this.XNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(XNAMs, Enumerable.Empty<(int Index, TItem Value)>());
                this.VNAM2 = VNAM2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Quest;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneCollectionItem.Mask<TItem>?>>?>? Scenes;
            public TItem VNAM;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? XNAMs;
            public TItem VNAM2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.XNAMs, rhs.XNAMs)) return false;
                if (!object.Equals(this.VNAM2, rhs.VNAM2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Quest);
                hash.Add(this.Scenes);
                hash.Add(this.VNAM);
                hash.Add(this.XNAMs);
                hash.Add(this.VNAM2);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Quest)) return false;
                if (this.Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.VNAM)) return false;
                if (this.XNAMs != null)
                {
                    if (!eval(this.XNAMs.Overall)) return false;
                    if (this.XNAMs.Specific != null)
                    {
                        foreach (var item in this.XNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.VNAM2)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Quest)) return true;
                if (this.Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.VNAM)) return true;
                if (this.XNAMs != null)
                {
                    if (eval(this.XNAMs.Overall)) return true;
                    if (this.XNAMs.Specific != null)
                    {
                        foreach (var item in this.XNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.VNAM2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SceneCollection.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Quest = eval(this.Quest);
                if (Scenes != null)
                {
                    obj.Scenes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SceneCollectionItem.Mask<R>?>>?>(eval(this.Scenes.Overall), Enumerable.Empty<MaskItemIndexed<R, SceneCollectionItem.Mask<R>?>>());
                    if (Scenes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SceneCollectionItem.Mask<R>?>>();
                        obj.Scenes.Specific = l;
                        foreach (var item in Scenes.Specific)
                        {
                            MaskItemIndexed<R, SceneCollectionItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SceneCollectionItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VNAM = eval(this.VNAM);
                if (XNAMs != null)
                {
                    obj.XNAMs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.XNAMs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (XNAMs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.XNAMs.Specific = l;
                        foreach (var item in XNAMs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.VNAM2 = eval(this.VNAM2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SceneCollection.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SceneCollection.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SceneCollection.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Quest ?? true)
                    {
                        sb.AppendItem(Quest, "Quest");
                    }
                    if ((printMask?.Scenes?.Overall ?? true)
                        && Scenes is {} ScenesItem)
                    {
                        sb.AppendLine("Scenes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ScenesItem.Overall);
                            if (ScenesItem.Specific != null)
                            {
                                foreach (var subItem in ScenesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if ((printMask?.XNAMs?.Overall ?? true)
                        && XNAMs is {} XNAMsItem)
                    {
                        sb.AppendLine("XNAMs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(XNAMsItem.Overall);
                            if (XNAMsItem.Specific != null)
                            {
                                foreach (var subItem in XNAMsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.VNAM2 ?? true)
                    {
                        sb.AppendItem(VNAM2, "VNAM2");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Quest;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneCollectionItem.ErrorMask?>>?>? Scenes;
            public Exception? VNAM;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? XNAMs;
            public Exception? VNAM2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SceneCollection_FieldIndex enu = (SceneCollection_FieldIndex)index;
                switch (enu)
                {
                    case SceneCollection_FieldIndex.Quest:
                        return Quest;
                    case SceneCollection_FieldIndex.Scenes:
                        return Scenes;
                    case SceneCollection_FieldIndex.VNAM:
                        return VNAM;
                    case SceneCollection_FieldIndex.XNAMs:
                        return XNAMs;
                    case SceneCollection_FieldIndex.VNAM2:
                        return VNAM2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SceneCollection_FieldIndex enu = (SceneCollection_FieldIndex)index;
                switch (enu)
                {
                    case SceneCollection_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case SceneCollection_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneCollectionItem.ErrorMask?>>?>(ex, null);
                        break;
                    case SceneCollection_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case SceneCollection_FieldIndex.XNAMs:
                        this.XNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SceneCollection_FieldIndex.VNAM2:
                        this.VNAM2 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SceneCollection_FieldIndex enu = (SceneCollection_FieldIndex)index;
                switch (enu)
                {
                    case SceneCollection_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case SceneCollection_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneCollectionItem.ErrorMask?>>?>)obj;
                        break;
                    case SceneCollection_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case SceneCollection_FieldIndex.XNAMs:
                        this.XNAMs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SceneCollection_FieldIndex.VNAM2:
                        this.VNAM2 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Quest != null) return true;
                if (Scenes != null) return true;
                if (VNAM != null) return true;
                if (XNAMs != null) return true;
                if (VNAM2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Quest, "Quest");
                }
                if (Scenes is {} ScenesItem)
                {
                    sb.AppendLine("Scenes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ScenesItem.Overall);
                        if (ScenesItem.Specific != null)
                        {
                            foreach (var subItem in ScenesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                if (XNAMs is {} XNAMsItem)
                {
                    sb.AppendLine("XNAMs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(XNAMsItem.Overall);
                        if (XNAMsItem.Specific != null)
                        {
                            foreach (var subItem in XNAMsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(VNAM2, "VNAM2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.Scenes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneCollectionItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Scenes?.Overall, rhs.Scenes?.Overall), Noggog.ExceptionExt.Combine(this.Scenes?.Specific, rhs.Scenes?.Specific));
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.XNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.XNAMs?.Overall, rhs.XNAMs?.Overall), Noggog.ExceptionExt.Combine(this.XNAMs?.Specific, rhs.XNAMs?.Specific));
                ret.VNAM2 = this.VNAM2.Combine(rhs.VNAM2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Quest;
            public SceneCollectionItem.TranslationMask? Scenes;
            public bool VNAM;
            public bool XNAMs;
            public bool VNAM2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Quest = defaultOn;
                this.VNAM = defaultOn;
                this.XNAMs = defaultOn;
                this.VNAM2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Quest, null));
                ret.Add((Scenes == null ? DefaultOn : !Scenes.GetCrystal().CopyNothing, Scenes?.GetCrystal()));
                ret.Add((VNAM, null));
                ret.Add((XNAMs, null));
                ret.Add((VNAM2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SceneCollection_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SceneCollectionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SceneCollectionSetterCommon.Instance.RemapLinks(this, mapping);
        public SceneCollection(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SceneCollection(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SceneCollection(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SceneCollection(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SceneCollection(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SceneCollection>.ToString(this);
        }

        protected override Type LinkType => typeof(ISceneCollection);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISceneCollectionGetter rhs) return false;
            return ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneCollectionGetter? obj)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneCollectionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneCollectionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SceneCollection CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SceneCollection();
            ((SceneCollectionSetterCommon)((ISceneCollectionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SceneCollection item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SceneCollectionSetterCommon)((ISceneCollectionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SceneCollection GetNew()
        {
            return new SceneCollection();
        }

    }
    #endregion

    #region Interface
    public partial interface ISceneCollection :
        IFormLinkContainer,
        ILoquiObjectSetter<ISceneCollectionInternal>,
        ISceneCollectionGetter,
        IStarfieldMajorRecordInternal
    {
        new IFormLinkNullable<IQuestGetter> Quest { get; set; }
        new ExtendedList<SceneCollectionItem> Scenes { get; }
        new Int32? VNAM { get; set; }
        new ExtendedList<Int64> XNAMs { get; }
        new Int32? VNAM2 { get; set; }
    }

    public partial interface ISceneCollectionInternal :
        IStarfieldMajorRecordInternal,
        ISceneCollection,
        ISceneCollectionGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SCCO)]
    public partial interface ISceneCollectionGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISceneCollectionGetter>,
        IMapsToGetter<ISceneCollectionGetter>
    {
        static new ILoquiRegistration StaticRegistration => SceneCollection_Registration.Instance;
        IFormLinkNullableGetter<IQuestGetter> Quest { get; }
        IReadOnlyList<ISceneCollectionItemGetter> Scenes { get; }
        Int32? VNAM { get; }
        IReadOnlyList<Int64> XNAMs { get; }
        Int32? VNAM2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SceneCollectionMixIn
    {
        public static void Clear(this ISceneCollectionInternal item)
        {
            ((SceneCollectionSetterCommon)((ISceneCollectionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SceneCollection.Mask<bool> GetEqualsMask(
            this ISceneCollectionGetter item,
            ISceneCollectionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISceneCollectionGetter item,
            string? name = null,
            SceneCollection.Mask<bool>? printMask = null)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISceneCollectionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SceneCollection.Mask<bool>? printMask = null)
        {
            ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISceneCollectionGetter item,
            ISceneCollectionGetter rhs,
            SceneCollection.TranslationMask? equalsMask = null)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISceneCollectionInternal lhs,
            ISceneCollectionGetter rhs,
            out SceneCollection.ErrorMask errorMask,
            SceneCollection.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SceneCollection.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISceneCollectionInternal lhs,
            ISceneCollectionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SceneCollection DeepCopy(
            this ISceneCollectionGetter item,
            SceneCollection.TranslationMask? copyMask = null)
        {
            return ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SceneCollection DeepCopy(
            this ISceneCollectionGetter item,
            out SceneCollection.ErrorMask errorMask,
            SceneCollection.TranslationMask? copyMask = null)
        {
            return ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SceneCollection DeepCopy(
            this ISceneCollectionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SceneCollection Duplicate(
            this ISceneCollectionGetter item,
            FormKey formKey,
            SceneCollection.TranslationMask? copyMask = null)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SceneCollection Duplicate(
            this ISceneCollectionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISceneCollectionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SceneCollectionSetterCommon)((ISceneCollectionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SceneCollection_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Quest = 7,
        Scenes = 8,
        VNAM = 9,
        XNAMs = 10,
        VNAM2 = 11,
    }
    #endregion

    #region Registration
    internal partial class SceneCollection_Registration : ILoquiRegistration
    {
        public static readonly SceneCollection_Registration Instance = new SceneCollection_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(SceneCollection.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SceneCollection.ErrorMask);

        public static readonly Type ClassType = typeof(SceneCollection);

        public static readonly Type GetterType = typeof(ISceneCollectionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISceneCollection);

        public static readonly Type? InternalSetterType = typeof(ISceneCollectionInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SceneCollection";

        public const string Name = "SceneCollection";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCCO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SCCO);
            var all = RecordCollection.Factory(
                RecordTypes.SCCO,
                RecordTypes.QNAM,
                RecordTypes.SNAM,
                RecordTypes.XNAM,
                RecordTypes.VNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SceneCollectionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SceneCollectionSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SceneCollectionSetterCommon Instance = new SceneCollectionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISceneCollectionInternal item)
        {
            ClearPartial();
            item.Quest.Clear();
            item.Scenes.Clear();
            item.VNAM = default;
            item.XNAMs.Clear();
            item.VNAM2 = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISceneCollectionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISceneCollectionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISceneCollection obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quest.Relink(mapping);
            obj.Scenes.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISceneCollectionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISceneCollectionInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SceneCollectionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SceneCollectionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SceneCollection)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SceneCollection)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SceneCollectionCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SceneCollectionCommon Instance = new SceneCollectionCommon();

        public SceneCollection.Mask<bool> GetEqualsMask(
            ISceneCollectionGetter item,
            ISceneCollectionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SceneCollection.Mask<bool>(false);
            ((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISceneCollectionGetter item,
            ISceneCollectionGetter rhs,
            SceneCollection.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.Scenes = item.Scenes.CollectionEqualsHelper(
                rhs.Scenes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VNAM = item.VNAM == rhs.VNAM;
            ret.XNAMs = item.XNAMs.CollectionEqualsHelper(
                rhs.XNAMs,
                (l, r) => l == r,
                include);
            ret.VNAM2 = item.VNAM2 == rhs.VNAM2;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISceneCollectionGetter item,
            string? name = null,
            SceneCollection.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISceneCollectionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SceneCollection.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SceneCollection =>");
            }
            else
            {
                sb.AppendLine($"{name} (SceneCollection) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISceneCollectionGetter item,
            StructuredStringBuilder sb,
            SceneCollection.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Quest ?? true)
            {
                sb.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if (printMask?.Scenes?.Overall ?? true)
            {
                sb.AppendLine("Scenes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Scenes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM is {} VNAMItem)
            {
                sb.AppendItem(VNAMItem, "VNAM");
            }
            if (printMask?.XNAMs?.Overall ?? true)
            {
                sb.AppendLine("XNAMs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.XNAMs)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.VNAM2 ?? true)
                && item.VNAM2 is {} VNAM2Item)
            {
                sb.AppendItem(VNAM2Item, "VNAM2");
            }
        }
        
        public static SceneCollection_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SceneCollection_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SceneCollection_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SceneCollection_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SceneCollection_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SceneCollection_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SceneCollection_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SceneCollection_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISceneCollectionGetter? lhs,
            ISceneCollectionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.Scenes) ?? true))
            {
                if (!lhs.Scenes.SequenceEqual(rhs.Scenes, (l, r) => ((SceneCollectionItemCommon)((ISceneCollectionItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SceneCollection_FieldIndex.Scenes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.VNAM) ?? true))
            {
                if (lhs.VNAM != rhs.VNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.XNAMs) ?? true))
            {
                if (!lhs.XNAMs.SequenceEqualNullable(rhs.XNAMs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.VNAM2) ?? true))
            {
                if (lhs.VNAM2 != rhs.VNAM2) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISceneCollectionGetter?)lhs,
                rhs: rhs as ISceneCollectionGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISceneCollectionGetter?)lhs,
                rhs: rhs as ISceneCollectionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISceneCollectionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Quest);
            hash.Add(item.Scenes);
            if (item.VNAM is {} VNAMitem)
            {
                hash.Add(VNAMitem);
            }
            hash.Add(item.XNAMs);
            if (item.VNAM2 is {} VNAM2item)
            {
                hash.Add(VNAM2item);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneCollectionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneCollectionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SceneCollection.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISceneCollectionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Quest, out var QuestInfo))
            {
                yield return QuestInfo;
            }
            foreach (var item in obj.Scenes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public SceneCollection Duplicate(
            ISceneCollectionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SceneCollection(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISceneCollectionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISceneCollectionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SceneCollectionSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SceneCollectionSetterTranslationCommon Instance = new SceneCollectionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISceneCollectionInternal item,
            ISceneCollectionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISceneCollection item,
            ISceneCollectionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)SceneCollection_FieldIndex.Scenes);
                try
                {
                    item.Scenes.SetTo(
                        rhs.Scenes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.VNAM) ?? true))
            {
                item.VNAM = rhs.VNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.XNAMs) ?? true))
            {
                errorMask?.PushIndex((int)SceneCollection_FieldIndex.XNAMs);
                try
                {
                    item.XNAMs.SetTo(rhs.XNAMs);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SceneCollection_FieldIndex.VNAM2) ?? true))
            {
                item.VNAM2 = rhs.VNAM2;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISceneCollection item,
            ISceneCollectionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneCollectionInternal)item,
                rhs: (ISceneCollectionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneCollection)item,
                rhs: (ISceneCollectionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneCollectionInternal)item,
                rhs: (ISceneCollectionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneCollection)item,
                rhs: (ISceneCollectionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SceneCollection DeepCopy(
            ISceneCollectionGetter item,
            SceneCollection.TranslationMask? copyMask = null)
        {
            SceneCollection ret = (SceneCollection)((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).GetNew();
            ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SceneCollection DeepCopy(
            ISceneCollectionGetter item,
            out SceneCollection.ErrorMask errorMask,
            SceneCollection.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SceneCollection ret = (SceneCollection)((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).GetNew();
            ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SceneCollection.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SceneCollection DeepCopy(
            ISceneCollectionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SceneCollection ret = (SceneCollection)((SceneCollectionCommon)((ISceneCollectionGetter)item).CommonInstance()!).GetNew();
            ((SceneCollectionSetterTranslationCommon)((ISceneCollectionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SceneCollection
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SceneCollection_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SceneCollection_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCollectionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SceneCollectionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneCollectionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SceneCollectionBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SceneCollectionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISceneCollectionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISceneCollectionItemGetter>.Instance.Write(
                writer: writer,
                items: item.Scenes,
                transl: (MutagenWriter subWriter, ISceneCollectionItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SceneCollectionItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int64>.Instance.WritePerItem(
                writer: writer,
                items: item.XNAMs,
                recordType: translationParams.ConvertToCustom(RecordTypes.XNAM),
                transl: Int64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VNAM2,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
        }

        public void Write(
            MutagenWriter writer,
            ISceneCollectionGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SCCO,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISceneCollectionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISceneCollectionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISceneCollectionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SceneCollectionBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SceneCollectionBinaryCreateTranslation Instance = new SceneCollectionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SCCO;
        public static ParseResult FillBinaryRecordTypes(
            ISceneCollectionInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SceneCollection_FieldIndex.Quest;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Scenes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SceneCollectionItem>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SceneCollectionItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SceneCollectionItem.TryCreateFromBinary));
                    return (int)SceneCollection_FieldIndex.Scenes;
                }
                case RecordTypeInts.VNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SceneCollection_FieldIndex.Scenes)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.VNAM = frame.ReadInt32();
                        return new ParseResult((int)SceneCollection_FieldIndex.VNAM, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SceneCollection_FieldIndex.XNAMs)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.VNAM2 = frame.ReadInt32();
                        return new ParseResult((int)SceneCollection_FieldIndex.VNAM2, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.VNAM = frame.ReadInt32();
                                return new ParseResult((int)SceneCollection_FieldIndex.VNAM, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.VNAM2 = frame.ReadInt32();
                                return new ParseResult((int)SceneCollection_FieldIndex.VNAM2, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.XNAM:
                {
                    item.XNAMs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int64>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.XNAM),
                            transl: Int64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
                    return (int)SceneCollection_FieldIndex.XNAMs;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SceneCollectionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SceneCollectionBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISceneCollectionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SceneCollection_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SceneCollection_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCollectionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneCollectionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SceneCollectionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneCollectionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SceneCollectionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISceneCollection);


        #region Quest
        private int? _QuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> Quest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _QuestLocation);
        #endregion
        public IReadOnlyList<ISceneCollectionItemGetter> Scenes { get; private set; } = Array.Empty<ISceneCollectionItemGetter>();
        #region VNAM
        private int? _VNAMLocation;
        public Int32? VNAM => _VNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public IReadOnlyList<Int64> XNAMs { get; private set; } = Array.Empty<Int64>();
        #region VNAM2
        private int? _VNAM2Location;
        public Int32? VNAM2 => _VNAM2Location.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VNAM2Location.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SceneCollectionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISceneCollectionGetter SceneCollectionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SceneCollectionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISceneCollectionGetter SceneCollectionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SceneCollectionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)SceneCollection_FieldIndex.Quest;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Scenes = this.ParseRepeatedTypelessSubrecord<ISceneCollectionItemGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SceneCollectionItem_Registration.TriggerSpecs,
                        factory: SceneCollectionItemBinaryOverlay.SceneCollectionItemFactory);
                    return (int)SceneCollection_FieldIndex.Scenes;
                }
                case RecordTypeInts.VNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)SceneCollection_FieldIndex.Scenes)
                    {
                        _VNAMLocation = (stream.Position - offset);
                        return new ParseResult((int)SceneCollection_FieldIndex.VNAM, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)SceneCollection_FieldIndex.XNAMs)
                    {
                        _VNAM2Location = (stream.Position - offset);
                        return new ParseResult((int)SceneCollection_FieldIndex.VNAM2, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _VNAMLocation = (stream.Position - offset);
                                return new ParseResult((int)SceneCollection_FieldIndex.VNAM, type);
                            }
                            case 1:
                            {
                                _VNAM2Location = (stream.Position - offset);
                                return new ParseResult((int)SceneCollection_FieldIndex.VNAM2, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.XNAM:
                {
                    this.XNAMs = BinaryOverlayList.FactoryByArray<Int64>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryPrimitives.ReadInt64LittleEndian(s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.XNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)SceneCollection_FieldIndex.XNAMs;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SceneCollectionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SceneCollection>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISceneCollectionGetter rhs) return false;
            return ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISceneCollectionGetter? obj)
        {
            return ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SceneCollectionCommon)((ISceneCollectionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

