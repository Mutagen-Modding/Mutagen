/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class LensFlareSprite :
        IEquatable<ILensFlareSpriteGetter>,
        ILensFlareSprite,
        ILoquiObjectSetter<LensFlareSprite>
    {
        #region Ctor
        public LensFlareSprite()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LensFlareSpriteId
        public String? LensFlareSpriteId { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILensFlareSpriteGetter.LensFlareSpriteId => this.LensFlareSpriteId;
        #endregion
        #region Texture
        public String? Texture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILensFlareSpriteGetter.Texture => this.Texture;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LensFlareSpriteData? _Data;
        public LensFlareSpriteData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILensFlareSpriteDataGetter? ILensFlareSpriteGetter.Data => this.Data;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LensFlareSpriteMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILensFlareSpriteGetter rhs) return false;
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILensFlareSpriteGetter? obj)
        {
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LensFlareSpriteId = initialValue;
                this.Texture = initialValue;
                this.Data = new MaskItem<TItem, LensFlareSpriteData.Mask<TItem>?>(initialValue, new LensFlareSpriteData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem LensFlareSpriteId,
                TItem Texture,
                TItem Data)
            {
                this.LensFlareSpriteId = LensFlareSpriteId;
                this.Texture = Texture;
                this.Data = new MaskItem<TItem, LensFlareSpriteData.Mask<TItem>?>(Data, new LensFlareSpriteData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LensFlareSpriteId;
            public TItem Texture;
            public MaskItem<TItem, LensFlareSpriteData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LensFlareSpriteId, rhs.LensFlareSpriteId)) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LensFlareSpriteId);
                hash.Add(this.Texture);
                hash.Add(this.Data);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LensFlareSpriteId)) return false;
                if (!eval(this.Texture)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LensFlareSpriteId)) return true;
                if (eval(this.Texture)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LensFlareSprite.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LensFlareSpriteId = eval(this.LensFlareSpriteId);
                obj.Texture = eval(this.Texture);
                obj.Data = this.Data == null ? null : new MaskItem<R, LensFlareSpriteData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LensFlareSprite.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LensFlareSprite.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LensFlareSprite.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.LensFlareSpriteId ?? true)
                    {
                        sb.AppendItem(LensFlareSpriteId, "LensFlareSpriteId");
                    }
                    if (printMask?.Texture ?? true)
                    {
                        sb.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LensFlareSpriteId;
            public Exception? Texture;
            public MaskItem<Exception?, LensFlareSpriteData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LensFlareSprite_FieldIndex enu = (LensFlareSprite_FieldIndex)index;
                switch (enu)
                {
                    case LensFlareSprite_FieldIndex.LensFlareSpriteId:
                        return LensFlareSpriteId;
                    case LensFlareSprite_FieldIndex.Texture:
                        return Texture;
                    case LensFlareSprite_FieldIndex.Data:
                        return Data;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LensFlareSprite_FieldIndex enu = (LensFlareSprite_FieldIndex)index;
                switch (enu)
                {
                    case LensFlareSprite_FieldIndex.LensFlareSpriteId:
                        this.LensFlareSpriteId = ex;
                        break;
                    case LensFlareSprite_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case LensFlareSprite_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, LensFlareSpriteData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LensFlareSprite_FieldIndex enu = (LensFlareSprite_FieldIndex)index;
                switch (enu)
                {
                    case LensFlareSprite_FieldIndex.LensFlareSpriteId:
                        this.LensFlareSpriteId = (Exception?)obj;
                        break;
                    case LensFlareSprite_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case LensFlareSprite_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, LensFlareSpriteData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LensFlareSpriteId != null) return true;
                if (Texture != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(LensFlareSpriteId, "LensFlareSpriteId");
                }
                {
                    sb.AppendItem(Texture, "Texture");
                }
                Data?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LensFlareSpriteId = this.LensFlareSpriteId.Combine(rhs.LensFlareSpriteId);
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool LensFlareSpriteId;
            public bool Texture;
            public LensFlareSpriteData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.LensFlareSpriteId = defaultOn;
                this.Texture = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LensFlareSpriteId, null));
                ret.Add((Texture, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LensFlareSpriteBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LensFlareSpriteBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LensFlareSprite CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LensFlareSprite();
            ((LensFlareSpriteSetterCommon)((ILensFlareSpriteGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LensFlareSprite item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LensFlareSpriteSetterCommon)((ILensFlareSpriteGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LensFlareSprite GetNew()
        {
            return new LensFlareSprite();
        }

    }
    #endregion

    #region Interface
    public partial interface ILensFlareSprite :
        ILensFlareSpriteGetter,
        ILoquiObjectSetter<ILensFlareSprite>
    {
        new String? LensFlareSpriteId { get; set; }
        new String? Texture { get; set; }
        new LensFlareSpriteData? Data { get; set; }
    }

    public partial interface ILensFlareSpriteGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ILensFlareSpriteGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LensFlareSprite_Registration.Instance;
        String? LensFlareSpriteId { get; }
        String? Texture { get; }
        ILensFlareSpriteDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LensFlareSpriteMixIn
    {
        public static void Clear(this ILensFlareSprite item)
        {
            ((LensFlareSpriteSetterCommon)((ILensFlareSpriteGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LensFlareSprite.Mask<bool> GetEqualsMask(
            this ILensFlareSpriteGetter item,
            ILensFlareSpriteGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILensFlareSpriteGetter item,
            string? name = null,
            LensFlareSprite.Mask<bool>? printMask = null)
        {
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILensFlareSpriteGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LensFlareSprite.Mask<bool>? printMask = null)
        {
            ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILensFlareSpriteGetter item,
            ILensFlareSpriteGetter rhs,
            LensFlareSprite.TranslationMask? equalsMask = null)
        {
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILensFlareSprite lhs,
            ILensFlareSpriteGetter rhs)
        {
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILensFlareSprite lhs,
            ILensFlareSpriteGetter rhs,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILensFlareSprite lhs,
            ILensFlareSpriteGetter rhs,
            out LensFlareSprite.ErrorMask errorMask,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LensFlareSprite.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILensFlareSprite lhs,
            ILensFlareSpriteGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LensFlareSprite DeepCopy(
            this ILensFlareSpriteGetter item,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            return ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LensFlareSprite DeepCopy(
            this ILensFlareSpriteGetter item,
            out LensFlareSprite.ErrorMask errorMask,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            return ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LensFlareSprite DeepCopy(
            this ILensFlareSpriteGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILensFlareSprite item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LensFlareSpriteSetterCommon)((ILensFlareSpriteGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum LensFlareSprite_FieldIndex
    {
        LensFlareSpriteId = 0,
        Texture = 1,
        Data = 2,
    }
    #endregion

    #region Registration
    internal partial class LensFlareSprite_Registration : ILoquiRegistration
    {
        public static readonly LensFlareSprite_Registration Instance = new LensFlareSprite_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LensFlareSprite.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LensFlareSprite.ErrorMask);

        public static readonly Type ClassType = typeof(LensFlareSprite);

        public static readonly Type GetterType = typeof(ILensFlareSpriteGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILensFlareSprite);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.LensFlareSprite";

        public const string Name = "LensFlareSprite";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.DNAM,
                RecordTypes.FNAM,
                RecordTypes.LFSD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LensFlareSpriteBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LensFlareSpriteSetterCommon
    {
        public static readonly LensFlareSpriteSetterCommon Instance = new LensFlareSpriteSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILensFlareSprite item)
        {
            ClearPartial();
            item.LensFlareSpriteId = default;
            item.Texture = default;
            item.Data = null;
        }
        
        #region Mutagen
        public void RemapLinks(ILensFlareSprite obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILensFlareSprite item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: LensFlareSpriteBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class LensFlareSpriteCommon
    {
        public static readonly LensFlareSpriteCommon Instance = new LensFlareSpriteCommon();

        public LensFlareSprite.Mask<bool> GetEqualsMask(
            ILensFlareSpriteGetter item,
            ILensFlareSpriteGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LensFlareSprite.Mask<bool>(false);
            ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILensFlareSpriteGetter item,
            ILensFlareSpriteGetter rhs,
            LensFlareSprite.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.LensFlareSpriteId = string.Equals(item.LensFlareSpriteId, rhs.LensFlareSpriteId);
            ret.Texture = string.Equals(item.Texture, rhs.Texture);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            ILensFlareSpriteGetter item,
            string? name = null,
            LensFlareSprite.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILensFlareSpriteGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LensFlareSprite.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LensFlareSprite =>");
            }
            else
            {
                sb.AppendLine($"{name} (LensFlareSprite) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILensFlareSpriteGetter item,
            StructuredStringBuilder sb,
            LensFlareSprite.Mask<bool>? printMask = null)
        {
            if ((printMask?.LensFlareSpriteId ?? true)
                && item.LensFlareSpriteId is {} LensFlareSpriteIdItem)
            {
                sb.AppendItem(LensFlareSpriteIdItem, "LensFlareSpriteId");
            }
            if ((printMask?.Texture ?? true)
                && item.Texture is {} TextureItem)
            {
                sb.AppendItem(TextureItem, "Texture");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILensFlareSpriteGetter? lhs,
            ILensFlareSpriteGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.LensFlareSpriteId) ?? true))
            {
                if (!string.Equals(lhs.LensFlareSpriteId, rhs.LensFlareSpriteId)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.Texture) ?? true))
            {
                if (!string.Equals(lhs.Texture, rhs.Texture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((LensFlareSpriteDataCommon)((ILensFlareSpriteDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)LensFlareSprite_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILensFlareSpriteGetter item)
        {
            var hash = new HashCode();
            if (item.LensFlareSpriteId is {} LensFlareSpriteIditem)
            {
                hash.Add(LensFlareSpriteIditem);
            }
            if (item.Texture is {} Textureitem)
            {
                hash.Add(Textureitem);
            }
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LensFlareSprite.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILensFlareSpriteGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LensFlareSpriteSetterTranslationCommon
    {
        public static readonly LensFlareSpriteSetterTranslationCommon Instance = new LensFlareSpriteSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILensFlareSprite item,
            ILensFlareSpriteGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.LensFlareSpriteId) ?? true))
            {
                item.LensFlareSpriteId = rhs.LensFlareSpriteId;
            }
            if ((copyMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.Texture) ?? true))
            {
                item.Texture = rhs.Texture;
            }
            if ((copyMask?.GetShouldTranslate((int)LensFlareSprite_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)LensFlareSprite_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LensFlareSprite_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILensFlareSprite item,
            ILensFlareSpriteGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public LensFlareSprite DeepCopy(
            ILensFlareSpriteGetter item,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            LensFlareSprite ret = (LensFlareSprite)((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LensFlareSprite DeepCopy(
            ILensFlareSpriteGetter item,
            out LensFlareSprite.ErrorMask errorMask,
            LensFlareSprite.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LensFlareSprite ret = (LensFlareSprite)((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LensFlareSprite.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LensFlareSprite DeepCopy(
            ILensFlareSpriteGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LensFlareSprite ret = (LensFlareSprite)((LensFlareSpriteCommon)((ILensFlareSpriteGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSpriteSetterTranslationCommon)((ILensFlareSpriteGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class LensFlareSprite
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LensFlareSprite_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LensFlareSprite_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LensFlareSpriteCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LensFlareSpriteSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LensFlareSpriteSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILensFlareSpriteGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILensFlareSpriteGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILensFlareSpriteGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LensFlareSpriteBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LensFlareSpriteBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILensFlareSpriteGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LensFlareSpriteId,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Texture,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Data is {} DataItem)
            {
                ((LensFlareSpriteDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILensFlareSpriteGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILensFlareSpriteGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LensFlareSpriteBinaryCreateTranslation
    {
        public static readonly LensFlareSpriteBinaryCreateTranslation Instance = new LensFlareSpriteBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ILensFlareSprite item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.LensFlareSpriteId, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LensFlareSpriteId = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)LensFlareSprite_FieldIndex.LensFlareSpriteId;
                }
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.Texture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Texture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)LensFlareSprite_FieldIndex.Texture;
                }
                case RecordTypeInts.LFSD:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    item.Data = Mutagen.Bethesda.Starfield.LensFlareSpriteData.CreateFromBinary(frame: frame);
                    return (int)LensFlareSprite_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LensFlareSpriteBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILensFlareSpriteGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LensFlareSpriteBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LensFlareSpriteBinaryOverlay :
        PluginBinaryOverlay,
        ILensFlareSpriteGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LensFlareSprite_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LensFlareSprite_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LensFlareSpriteCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LensFlareSpriteSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILensFlareSpriteGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILensFlareSpriteGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILensFlareSpriteGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LensFlareSpriteBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LensFlareSpriteBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region LensFlareSpriteId
        private int? _LensFlareSpriteIdLocation;
        public String? LensFlareSpriteId => _LensFlareSpriteIdLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LensFlareSpriteIdLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Texture
        private int? _TextureLocation;
        public String? Texture => _TextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public ILensFlareSpriteDataGetter? Data => _DataLocation.HasValue ? LensFlareSpriteDataBinaryOverlay.LensFlareSpriteDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LensFlareSpriteBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILensFlareSpriteGetter LensFlareSpriteFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LensFlareSpriteBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILensFlareSpriteGetter LensFlareSpriteFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LensFlareSpriteFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.LensFlareSpriteId, translationParams)) return ParseResult.Stop;
                    _LensFlareSpriteIdLocation = (stream.Position - offset);
                    return (int)LensFlareSprite_FieldIndex.LensFlareSpriteId;
                }
                case RecordTypeInts.FNAM:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.Texture, translationParams)) return ParseResult.Stop;
                    _TextureLocation = (stream.Position - offset);
                    return (int)LensFlareSprite_FieldIndex.Texture;
                }
                case RecordTypeInts.LFSD:
                {
                    if (lastParsed.ShortCircuit((int)LensFlareSprite_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)LensFlareSprite_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LensFlareSpriteMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILensFlareSpriteGetter rhs) return false;
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILensFlareSpriteGetter? obj)
        {
            return ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

