/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DialogueSceneAction :
        ASceneAction,
        IDialogueSceneAction,
        IEquatable<IDialogueSceneActionGetter>,
        ILoquiObjectSetter<DialogueSceneAction>
    {
        #region Ctor
        public DialogueSceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Topic
        private readonly IFormLinkNullable<IDialogTopicGetter> _Topic = new FormLinkNullable<IDialogTopicGetter>();
        public IFormLinkNullable<IDialogTopicGetter> Topic
        {
            get => _Topic;
            set => _Topic.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogTopicGetter> IDialogueSceneActionGetter.Topic => this.Topic;
        #endregion
        #region LoopingMax
        public Single? LoopingMax { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IDialogueSceneActionGetter.LoopingMax => this.LoopingMax;
        #endregion
        #region LoopingMin
        public Single? LoopingMin { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IDialogueSceneActionGetter.LoopingMin => this.LoopingMin;
        #endregion
        #region HNAM
        public HeadTracking HNAM { get; set; } = new HeadTracking();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHeadTrackingGetter IDialogueSceneActionGetter.HNAM => HNAM;
        #endregion
        #region DialogueSubtype
        private readonly IFormLinkNullable<IKeywordGetter> _DialogueSubtype = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> DialogueSubtype
        {
            get => _DialogueSubtype;
            set => _DialogueSubtype.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IDialogueSceneActionGetter.DialogueSubtype => this.DialogueSubtype;
        #endregion
        #region WED0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _WED0;
        public SoundReference? WED0
        {
            get => _WED0;
            set => _WED0 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IDialogueSceneActionGetter.WED0 => this.WED0;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogueSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogueSceneActionGetter rhs) return false;
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogueSceneActionGetter? obj)
        {
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASceneAction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Topic = initialValue;
                this.LoopingMax = initialValue;
                this.LoopingMin = initialValue;
                this.HNAM = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(initialValue, new HeadTracking.Mask<TItem>(initialValue));
                this.DialogueSubtype = initialValue;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase,
                TItem Topic,
                TItem LoopingMax,
                TItem LoopingMin,
                TItem HNAM,
                TItem DialogueSubtype,
                TItem WED0)
            : base(
                Name: Name,
                SceneNotes: SceneNotes,
                AliasID: AliasID,
                Index: Index,
                Flags: Flags,
                StartPhase: StartPhase,
                EndPhase: EndPhase)
            {
                this.Topic = Topic;
                this.LoopingMax = LoopingMax;
                this.LoopingMin = LoopingMin;
                this.HNAM = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(HNAM, new HeadTracking.Mask<TItem>(HNAM));
                this.DialogueSubtype = DialogueSubtype;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED0, new SoundReference.Mask<TItem>(WED0));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Topic;
            public TItem LoopingMax;
            public TItem LoopingMin;
            public MaskItem<TItem, HeadTracking.Mask<TItem>?>? HNAM { get; set; }
            public TItem DialogueSubtype;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED0 { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Topic, rhs.Topic)) return false;
                if (!object.Equals(this.LoopingMax, rhs.LoopingMax)) return false;
                if (!object.Equals(this.LoopingMin, rhs.LoopingMin)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.DialogueSubtype, rhs.DialogueSubtype)) return false;
                if (!object.Equals(this.WED0, rhs.WED0)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Topic);
                hash.Add(this.LoopingMax);
                hash.Add(this.LoopingMin);
                hash.Add(this.HNAM);
                hash.Add(this.DialogueSubtype);
                hash.Add(this.WED0);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Topic)) return false;
                if (!eval(this.LoopingMax)) return false;
                if (!eval(this.LoopingMin)) return false;
                if (HNAM != null)
                {
                    if (!eval(this.HNAM.Overall)) return false;
                    if (this.HNAM.Specific != null && !this.HNAM.Specific.All(eval)) return false;
                }
                if (!eval(this.DialogueSubtype)) return false;
                if (WED0 != null)
                {
                    if (!eval(this.WED0.Overall)) return false;
                    if (this.WED0.Specific != null && !this.WED0.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Topic)) return true;
                if (eval(this.LoopingMax)) return true;
                if (eval(this.LoopingMin)) return true;
                if (HNAM != null)
                {
                    if (eval(this.HNAM.Overall)) return true;
                    if (this.HNAM.Specific != null && this.HNAM.Specific.Any(eval)) return true;
                }
                if (eval(this.DialogueSubtype)) return true;
                if (WED0 != null)
                {
                    if (eval(this.WED0.Overall)) return true;
                    if (this.WED0.Specific != null && this.WED0.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogueSceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Topic = eval(this.Topic);
                obj.LoopingMax = eval(this.LoopingMax);
                obj.LoopingMin = eval(this.LoopingMin);
                obj.HNAM = this.HNAM == null ? null : new MaskItem<R, HeadTracking.Mask<R>?>(eval(this.HNAM.Overall), this.HNAM.Specific?.Translate(eval));
                obj.DialogueSubtype = eval(this.DialogueSubtype);
                obj.WED0 = this.WED0 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED0.Overall), this.WED0.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogueSceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogueSceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogueSceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Topic ?? true)
                    {
                        sb.AppendItem(Topic, "Topic");
                    }
                    if (printMask?.LoopingMax ?? true)
                    {
                        sb.AppendItem(LoopingMax, "LoopingMax");
                    }
                    if (printMask?.LoopingMin ?? true)
                    {
                        sb.AppendItem(LoopingMin, "LoopingMin");
                    }
                    if (printMask?.HNAM?.Overall ?? true)
                    {
                        HNAM?.Print(sb);
                    }
                    if (printMask?.DialogueSubtype ?? true)
                    {
                        sb.AppendItem(DialogueSubtype, "DialogueSubtype");
                    }
                    if (printMask?.WED0?.Overall ?? true)
                    {
                        WED0?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASceneAction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Topic;
            public Exception? LoopingMax;
            public Exception? LoopingMin;
            public MaskItem<Exception?, HeadTracking.ErrorMask?>? HNAM;
            public Exception? DialogueSubtype;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED0;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogueSceneAction_FieldIndex enu = (DialogueSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case DialogueSceneAction_FieldIndex.Topic:
                        return Topic;
                    case DialogueSceneAction_FieldIndex.LoopingMax:
                        return LoopingMax;
                    case DialogueSceneAction_FieldIndex.LoopingMin:
                        return LoopingMin;
                    case DialogueSceneAction_FieldIndex.HNAM:
                        return HNAM;
                    case DialogueSceneAction_FieldIndex.DialogueSubtype:
                        return DialogueSubtype;
                    case DialogueSceneAction_FieldIndex.WED0:
                        return WED0;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogueSceneAction_FieldIndex enu = (DialogueSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case DialogueSceneAction_FieldIndex.Topic:
                        this.Topic = ex;
                        break;
                    case DialogueSceneAction_FieldIndex.LoopingMax:
                        this.LoopingMax = ex;
                        break;
                    case DialogueSceneAction_FieldIndex.LoopingMin:
                        this.LoopingMin = ex;
                        break;
                    case DialogueSceneAction_FieldIndex.HNAM:
                        this.HNAM = new MaskItem<Exception?, HeadTracking.ErrorMask?>(ex, null);
                        break;
                    case DialogueSceneAction_FieldIndex.DialogueSubtype:
                        this.DialogueSubtype = ex;
                        break;
                    case DialogueSceneAction_FieldIndex.WED0:
                        this.WED0 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogueSceneAction_FieldIndex enu = (DialogueSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case DialogueSceneAction_FieldIndex.Topic:
                        this.Topic = (Exception?)obj;
                        break;
                    case DialogueSceneAction_FieldIndex.LoopingMax:
                        this.LoopingMax = (Exception?)obj;
                        break;
                    case DialogueSceneAction_FieldIndex.LoopingMin:
                        this.LoopingMin = (Exception?)obj;
                        break;
                    case DialogueSceneAction_FieldIndex.HNAM:
                        this.HNAM = (MaskItem<Exception?, HeadTracking.ErrorMask?>?)obj;
                        break;
                    case DialogueSceneAction_FieldIndex.DialogueSubtype:
                        this.DialogueSubtype = (Exception?)obj;
                        break;
                    case DialogueSceneAction_FieldIndex.WED0:
                        this.WED0 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Topic != null) return true;
                if (LoopingMax != null) return true;
                if (LoopingMin != null) return true;
                if (HNAM != null) return true;
                if (DialogueSubtype != null) return true;
                if (WED0 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Topic, "Topic");
                }
                {
                    sb.AppendItem(LoopingMax, "LoopingMax");
                }
                {
                    sb.AppendItem(LoopingMin, "LoopingMin");
                }
                HNAM?.Print(sb);
                {
                    sb.AppendItem(DialogueSubtype, "DialogueSubtype");
                }
                WED0?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Topic = this.Topic.Combine(rhs.Topic);
                ret.LoopingMax = this.LoopingMax.Combine(rhs.LoopingMax);
                ret.LoopingMin = this.LoopingMin.Combine(rhs.LoopingMin);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM, (l, r) => l.Combine(r));
                ret.DialogueSubtype = this.DialogueSubtype.Combine(rhs.DialogueSubtype);
                ret.WED0 = this.WED0.Combine(rhs.WED0, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASceneAction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Topic;
            public bool LoopingMax;
            public bool LoopingMin;
            public HeadTracking.TranslationMask? HNAM;
            public bool DialogueSubtype;
            public SoundReference.TranslationMask? WED0;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Topic = defaultOn;
                this.LoopingMax = defaultOn;
                this.LoopingMin = defaultOn;
                this.DialogueSubtype = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Topic, null));
                ret.Add((LoopingMax, null));
                ret.Add((LoopingMin, null));
                ret.Add((HNAM != null ? HNAM.OnOverall : DefaultOn, HNAM?.GetCrystal()));
                ret.Add((DialogueSubtype, null));
                ret.Add((WED0 != null ? WED0.OnOverall : DefaultOn, WED0?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogueSceneActionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogueSceneActionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogueSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogueSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogueSceneAction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogueSceneAction();
            ((DialogueSceneActionSetterCommon)((IDialogueSceneActionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogueSceneAction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogueSceneActionSetterCommon)((IDialogueSceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogueSceneAction GetNew()
        {
            return new DialogueSceneAction();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogueSceneAction :
        IASceneAction,
        IDialogueSceneActionGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogueSceneAction>,
        INamedRequired
    {
        new IFormLinkNullable<IDialogTopicGetter> Topic { get; set; }
        new Single? LoopingMax { get; set; }
        new Single? LoopingMin { get; set; }
        new HeadTracking HNAM { get; set; }
        new IFormLinkNullable<IKeywordGetter> DialogueSubtype { get; set; }
        new SoundReference? WED0 { get; set; }
    }

    public partial interface IDialogueSceneActionGetter :
        IASceneActionGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogueSceneActionGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => DialogueSceneAction_Registration.Instance;
        IFormLinkNullableGetter<IDialogTopicGetter> Topic { get; }
        Single? LoopingMax { get; }
        Single? LoopingMin { get; }
        IHeadTrackingGetter HNAM { get; }
        IFormLinkNullableGetter<IKeywordGetter> DialogueSubtype { get; }
        ISoundReferenceGetter? WED0 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogueSceneActionMixIn
    {
        public static void Clear(this IDialogueSceneAction item)
        {
            ((DialogueSceneActionSetterCommon)((IDialogueSceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogueSceneAction.Mask<bool> GetEqualsMask(
            this IDialogueSceneActionGetter item,
            IDialogueSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogueSceneActionGetter item,
            string? name = null,
            DialogueSceneAction.Mask<bool>? printMask = null)
        {
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogueSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogueSceneAction.Mask<bool>? printMask = null)
        {
            ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogueSceneActionGetter item,
            IDialogueSceneActionGetter rhs,
            DialogueSceneAction.TranslationMask? equalsMask = null)
        {
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogueSceneAction lhs,
            IDialogueSceneActionGetter rhs,
            out DialogueSceneAction.ErrorMask errorMask,
            DialogueSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogueSceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogueSceneAction lhs,
            IDialogueSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogueSceneAction DeepCopy(
            this IDialogueSceneActionGetter item,
            DialogueSceneAction.TranslationMask? copyMask = null)
        {
            return ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogueSceneAction DeepCopy(
            this IDialogueSceneActionGetter item,
            out DialogueSceneAction.ErrorMask errorMask,
            DialogueSceneAction.TranslationMask? copyMask = null)
        {
            return ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogueSceneAction DeepCopy(
            this IDialogueSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogueSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogueSceneActionSetterCommon)((IDialogueSceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DialogueSceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
        Topic = 7,
        LoopingMax = 8,
        LoopingMin = 9,
        HNAM = 10,
        DialogueSubtype = 11,
        WED0 = 12,
    }
    #endregion

    #region Registration
    internal partial class DialogueSceneAction_Registration : ILoquiRegistration
    {
        public static readonly DialogueSceneAction_Registration Instance = new DialogueSceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(DialogueSceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogueSceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(DialogueSceneAction);

        public static readonly Type GetterType = typeof(IDialogueSceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogueSceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DialogueSceneAction";

        public const string Name = "DialogueSceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.DATA,
                RecordTypes.DMAX,
                RecordTypes.DMIN,
                RecordTypes.HNAM,
                RecordTypes.VENC,
                RecordTypes.WED0);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogueSceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogueSceneActionSetterCommon : ASceneActionSetterCommon
    {
        public new static readonly DialogueSceneActionSetterCommon Instance = new DialogueSceneActionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogueSceneAction item)
        {
            ClearPartial();
            item.Topic.Clear();
            item.LoopingMax = default;
            item.LoopingMin = default;
            item.HNAM.Clear();
            item.DialogueSubtype.Clear();
            item.WED0 = null;
            base.Clear(item);
        }
        
        public override void Clear(IASceneAction item)
        {
            Clear(item: (IDialogueSceneAction)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogueSceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Topic.Relink(mapping);
            obj.DialogueSubtype.Relink(mapping);
            obj.WED0?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogueSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DialogueSceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogueSceneAction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogueSceneActionCommon : ASceneActionCommon
    {
        public new static readonly DialogueSceneActionCommon Instance = new DialogueSceneActionCommon();

        public DialogueSceneAction.Mask<bool> GetEqualsMask(
            IDialogueSceneActionGetter item,
            IDialogueSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogueSceneAction.Mask<bool>(false);
            ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogueSceneActionGetter item,
            IDialogueSceneActionGetter rhs,
            DialogueSceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Topic = item.Topic.Equals(rhs.Topic);
            ret.LoopingMax = item.LoopingMax.EqualsWithin(rhs.LoopingMax);
            ret.LoopingMin = item.LoopingMin.EqualsWithin(rhs.LoopingMin);
            ret.HNAM = MaskItemExt.Factory(item.HNAM.GetEqualsMask(rhs.HNAM, include), include);
            ret.DialogueSubtype = item.DialogueSubtype.Equals(rhs.DialogueSubtype);
            ret.WED0 = EqualsMaskHelper.EqualsHelper(
                item.WED0,
                rhs.WED0,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogueSceneActionGetter item,
            string? name = null,
            DialogueSceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogueSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogueSceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogueSceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogueSceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogueSceneActionGetter item,
            StructuredStringBuilder sb,
            DialogueSceneAction.Mask<bool>? printMask = null)
        {
            ASceneActionCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Topic ?? true)
            {
                sb.AppendItem(item.Topic.FormKeyNullable, "Topic");
            }
            if ((printMask?.LoopingMax ?? true)
                && item.LoopingMax is {} LoopingMaxItem)
            {
                sb.AppendItem(LoopingMaxItem, "LoopingMax");
            }
            if ((printMask?.LoopingMin ?? true)
                && item.LoopingMin is {} LoopingMinItem)
            {
                sb.AppendItem(LoopingMinItem, "LoopingMin");
            }
            if (printMask?.HNAM?.Overall ?? true)
            {
                item.HNAM?.Print(sb, "HNAM");
            }
            if (printMask?.DialogueSubtype ?? true)
            {
                sb.AppendItem(item.DialogueSubtype.FormKeyNullable, "DialogueSubtype");
            }
            if ((printMask?.WED0?.Overall ?? true)
                && item.WED0 is {} WED0Item)
            {
                WED0Item?.Print(sb, "WED0");
            }
        }
        
        public static DialogueSceneAction_FieldIndex ConvertFieldIndex(ASceneAction_FieldIndex index)
        {
            switch (index)
            {
                case ASceneAction_FieldIndex.Name:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.SceneNotes:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.AliasID:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Index:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Flags:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.StartPhase:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.EndPhase:
                    return (DialogueSceneAction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogueSceneActionGetter? lhs,
            IDialogueSceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASceneActionGetter)lhs, (IASceneActionGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.Topic) ?? true))
            {
                if (!lhs.Topic.Equals(rhs.Topic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.LoopingMax) ?? true))
            {
                if (!lhs.LoopingMax.EqualsWithin(rhs.LoopingMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.LoopingMin) ?? true))
            {
                if (!lhs.LoopingMin.EqualsWithin(rhs.LoopingMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.HNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HNAM, rhs.HNAM, out var lhsHNAM, out var rhsHNAM, out var isHNAMEqual))
                {
                    if (!((HeadTrackingCommon)((IHeadTrackingGetter)lhsHNAM).CommonInstance()!).Equals(lhsHNAM, rhsHNAM, equalsMask?.GetSubCrystal((int)DialogueSceneAction_FieldIndex.HNAM))) return false;
                }
                else if (!isHNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.DialogueSubtype) ?? true))
            {
                if (!lhs.DialogueSubtype.Equals(rhs.DialogueSubtype)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.WED0) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED0, rhs.WED0, out var lhsWED0, out var rhsWED0, out var isWED0Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED0).CommonInstance()!).Equals(lhsWED0, rhsWED0, equalsMask?.GetSubCrystal((int)DialogueSceneAction_FieldIndex.WED0))) return false;
                }
                else if (!isWED0Equal) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogueSceneActionGetter?)lhs,
                rhs: rhs as IDialogueSceneActionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogueSceneActionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Topic);
            if (item.LoopingMax is {} LoopingMaxitem)
            {
                hash.Add(LoopingMaxitem);
            }
            if (item.LoopingMin is {} LoopingMinitem)
            {
                hash.Add(LoopingMinitem);
            }
            hash.Add(item.HNAM);
            hash.Add(item.DialogueSubtype);
            if (item.WED0 is {} WED0item)
            {
                hash.Add(WED0item);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASceneActionGetter item)
        {
            return GetHashCode(item: (IDialogueSceneActionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogueSceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogueSceneActionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Topic, out var TopicInfo))
            {
                yield return TopicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DialogueSubtype, out var DialogueSubtypeInfo))
            {
                yield return DialogueSubtypeInfo;
            }
            if (obj.WED0 is {} WED0Items)
            {
                foreach (var item in WED0Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogueSceneActionSetterTranslationCommon : ASceneActionSetterTranslationCommon
    {
        public new static readonly DialogueSceneActionSetterTranslationCommon Instance = new DialogueSceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogueSceneAction item,
            IDialogueSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASceneAction)item,
                (IASceneActionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.Topic) ?? true))
            {
                item.Topic.SetTo(rhs.Topic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.LoopingMax) ?? true))
            {
                item.LoopingMax = rhs.LoopingMax;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.LoopingMin) ?? true))
            {
                item.LoopingMin = rhs.LoopingMin;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.HNAM) ?? true))
            {
                errorMask?.PushIndex((int)DialogueSceneAction_FieldIndex.HNAM);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.HNAM) ?? true))
                    {
                        item.HNAM = rhs.HNAM.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)DialogueSceneAction_FieldIndex.HNAM),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.DialogueSubtype) ?? true))
            {
                item.DialogueSubtype.SetTo(rhs.DialogueSubtype.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogueSceneAction_FieldIndex.WED0) ?? true))
            {
                errorMask?.PushIndex((int)DialogueSceneAction_FieldIndex.WED0);
                try
                {
                    if(rhs.WED0 is {} rhsWED0)
                    {
                        item.WED0 = rhsWED0.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogueSceneAction_FieldIndex.WED0));
                    }
                    else
                    {
                        item.WED0 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogueSceneAction item,
            IDialogueSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogueSceneAction)item,
                rhs: (IDialogueSceneActionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogueSceneAction DeepCopy(
            IDialogueSceneActionGetter item,
            DialogueSceneAction.TranslationMask? copyMask = null)
        {
            DialogueSceneAction ret = (DialogueSceneAction)((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).GetNew();
            ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogueSceneAction DeepCopy(
            IDialogueSceneActionGetter item,
            out DialogueSceneAction.ErrorMask errorMask,
            DialogueSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogueSceneAction ret = (DialogueSceneAction)((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).GetNew();
            ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogueSceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogueSceneAction DeepCopy(
            IDialogueSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogueSceneAction ret = (DialogueSceneAction)((DialogueSceneActionCommon)((IDialogueSceneActionGetter)item).CommonInstance()!).GetNew();
            ((DialogueSceneActionSetterTranslationCommon)((IDialogueSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogueSceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogueSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogueSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogueSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogueSceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogueSceneActionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogueSceneActionBinaryWriteTranslation :
        ASceneActionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogueSceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogueSceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ASceneActionBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Topic,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LoopingMax,
                header: translationParams.ConvertToCustom(RecordTypes.DMAX));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LoopingMin,
                header: translationParams.ConvertToCustom(RecordTypes.DMIN));
            var HNAMItem = item.HNAM;
            ((HeadTrackingBinaryWriteTranslation)((IBinaryItem)HNAMItem).BinaryWriteTranslator).Write(
                item: HNAMItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DialogueSubtype,
                header: translationParams.ConvertToCustom(RecordTypes.VENC));
            if (item.WED0 is {} WED0Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED0))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED0Item).BinaryWriteTranslator).Write(
                        item: WED0Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogueSceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogueSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogueSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogueSceneActionBinaryCreateTranslation : ASceneActionBinaryCreateTranslation
    {
        public new static readonly DialogueSceneActionBinaryCreateTranslation Instance = new DialogueSceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDialogueSceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Topic.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogueSceneAction_FieldIndex.Topic;
                }
                case RecordTypeInts.DMAX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopingMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogueSceneAction_FieldIndex.LoopingMax;
                }
                case RecordTypeInts.DMIN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopingMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogueSceneAction_FieldIndex.LoopingMin;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HNAM = Mutagen.Bethesda.Starfield.HeadTracking.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogueSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VENC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DialogueSubtype.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogueSceneAction_FieldIndex.DialogueSubtype;
                }
                case RecordTypeInts.WED0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.WED0 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)DialogueSceneAction_FieldIndex.WED0;
                }
                default:
                    return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DialogueSceneActionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DialogueSceneActionBinaryOverlay :
        ASceneActionBinaryOverlay,
        IDialogueSceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogueSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogueSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogueSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogueSceneActionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogueSceneActionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogueSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogueSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Topic
        private int? _TopicLocation;
        public IFormLinkNullableGetter<IDialogTopicGetter> Topic => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _TopicLocation);
        #endregion
        #region LoopingMax
        private int? _LoopingMaxLocation;
        public Single? LoopingMax => _LoopingMaxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LoopingMaxLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region LoopingMin
        private int? _LoopingMinLocation;
        public Single? LoopingMin => _LoopingMinLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LoopingMinLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region HNAM
        private IHeadTrackingGetter? _HNAM;
        public IHeadTrackingGetter HNAM => _HNAM ?? new HeadTracking();
        #endregion
        #region DialogueSubtype
        private int? _DialogueSubtypeLocation;
        public IFormLinkNullableGetter<IKeywordGetter> DialogueSubtype => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _DialogueSubtypeLocation);
        #endregion
        public ISoundReferenceGetter? WED0 { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogueSceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogueSceneActionGetter DialogueSceneActionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogueSceneActionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogueSceneActionGetter DialogueSceneActionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogueSceneActionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _TopicLocation = (stream.Position - offset);
                    return (int)DialogueSceneAction_FieldIndex.Topic;
                }
                case RecordTypeInts.DMAX:
                {
                    _LoopingMaxLocation = (stream.Position - offset);
                    return (int)DialogueSceneAction_FieldIndex.LoopingMax;
                }
                case RecordTypeInts.DMIN:
                {
                    _LoopingMinLocation = (stream.Position - offset);
                    return (int)DialogueSceneAction_FieldIndex.LoopingMin;
                }
                case RecordTypeInts.HNAM:
                {
                    this._HNAM = HeadTrackingBinaryOverlay.HeadTrackingFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogueSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VENC:
                {
                    _DialogueSubtypeLocation = (stream.Position - offset);
                    return (int)DialogueSceneAction_FieldIndex.DialogueSubtype;
                }
                case RecordTypeInts.WED0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.WED0 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogueSceneAction_FieldIndex.WED0;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogueSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogueSceneActionGetter rhs) return false;
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogueSceneActionGetter? obj)
        {
            return ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogueSceneActionCommon)((IDialogueSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

