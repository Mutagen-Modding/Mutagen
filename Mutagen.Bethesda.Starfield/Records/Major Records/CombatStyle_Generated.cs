/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CombatStyle :
        StarfieldMajorRecord,
        ICombatStyleInternal,
        IEquatable<ICombatStyleGetter>,
        ILoquiObjectSetter<CombatStyle>
    {
        #region Ctor
        protected CombatStyle()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OffensiveMult
        public Percent OffensiveMult { get; set; } = default(Percent);
        #endregion
        #region DefensiveMult
        public Percent DefensiveMult { get; set; } = default(Percent);
        #endregion
        #region GroupOffensiveMult
        public Percent GroupOffensiveMult { get; set; } = default(Percent);
        #endregion
        #region EquipmentScoreMultMelee
        public Single EquipmentScoreMultMelee { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultMelee_Range = new RangeFloat(0f, 10f);
        #endregion
        #region EquipmentScoreMultMagic
        public Single EquipmentScoreMultMagic { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultMagic_Range = new RangeFloat(0f, 10f);
        #endregion
        #region EquipmentScoreMultRanged
        public Single EquipmentScoreMultRanged { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultRanged_Range = new RangeFloat(0f, 10f);
        #endregion
        #region EquipmentScoreMultShout
        public Single EquipmentScoreMultShout { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultShout_Range = new RangeFloat(0f, 10f);
        #endregion
        #region EquipmentScoreMultUnarmed
        public Single EquipmentScoreMultUnarmed { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultUnarmed_Range = new RangeFloat(0f, 10f);
        #endregion
        #region EquipmentScoreMultStaff
        public Single EquipmentScoreMultStaff { get; set; } = default(Single);
        public static RangeFloat EquipmentScoreMultStaff_Range = new RangeFloat(0f, 10f);
        #endregion
        #region AvoidThreatChance
        public Percent AvoidThreatChance { get; set; } = default(Percent);
        #endregion
        #region DodgeThreadChance
        public Percent DodgeThreadChance { get; set; } = default(Percent);
        #endregion
        #region EvadeThreatChance
        public Percent EvadeThreatChance { get; set; } = default(Percent);
        #endregion
        #region HealAllyDistance
        public Single HealAllyDistance { get; set; } = default(Single);
        public static RangeFloat HealAllyDistance_Range = new RangeFloat(0f, 100f);
        #endregion
        #region JumpCostMult
        public Single JumpCostMult { get; set; } = default(Single);
        public static RangeFloat JumpCostMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region TauntDelayMult
        public Single TauntDelayMult { get; set; } = default(Single);
        public static RangeFloat TauntDelayMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeAttackStaggeredMult
        public Single MeleeAttackStaggeredMult { get; set; } = default(Single);
        public static RangeFloat MeleeAttackStaggeredMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleePowerAttackStaggeredMult
        public Single MeleePowerAttackStaggeredMult { get; set; } = default(Single);
        public static RangeFloat MeleePowerAttackStaggeredMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleePowerAttackBlockingMult
        public Single MeleePowerAttackBlockingMult { get; set; } = default(Single);
        public static RangeFloat MeleePowerAttackBlockingMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeBashMult
        public Single MeleeBashMult { get; set; } = default(Single);
        public static RangeFloat MeleeBashMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeBashRecoilMult
        public Single MeleeBashRecoilMult { get; set; } = default(Single);
        public static RangeFloat MeleeBashRecoilMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeBashAttackMult
        public Single MeleeBashAttackMult { get; set; } = default(Single);
        public static RangeFloat MeleeBashAttackMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeBashPowerAttackMult
        public Single MeleeBashPowerAttackMult { get; set; } = default(Single);
        public static RangeFloat MeleeBashPowerAttackMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeSpecialAttackMult
        public Single MeleeSpecialAttackMult { get; set; } = default(Single);
        public static RangeFloat MeleeSpecialAttackMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeBlockWhenStaggeredMult
        public Single MeleeBlockWhenStaggeredMult { get; set; } = default(Single);
        public static RangeFloat MeleeBlockWhenStaggeredMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region MeleeAttackWhenStaggeredMult
        public Single MeleeAttackWhenStaggeredMult { get; set; } = default(Single);
        public static RangeFloat MeleeAttackWhenStaggeredMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region RangedAccuracyMult
        public Percent RangedAccuracyMult { get; set; } = default(Percent);
        #endregion
        #region RangedThrowMult
        public Percent RangedThrowMult { get; set; } = default(Percent);
        #endregion
        #region RangedGrenadeAdvancedThrowingMult
        public Percent RangedGrenadeAdvancedThrowingMult { get; set; } = default(Percent);
        #endregion
        #region RangedGrenadeFlashTargetMult
        public Percent RangedGrenadeFlashTargetMult { get; set; } = default(Percent);
        #endregion
        #region RangedGrenadeThrowAtGroupMult
        public Percent RangedGrenadeThrowAtGroupMult { get; set; } = default(Percent);
        #endregion
        #region RangedGrenadeCloseRangeAttackChanceMult
        public Percent RangedGrenadeCloseRangeAttackChanceMult { get; set; } = default(Percent);
        #endregion
        #region CloseRangeDuelingCircleMult
        public Percent CloseRangeDuelingCircleMult { get; set; } = default(Percent);
        #endregion
        #region CloseRangeDuelingFallbackMult
        public Percent CloseRangeDuelingFallbackMult { get; set; } = default(Percent);
        #endregion
        #region CloseRangeFlankDistance
        public Percent CloseRangeFlankDistance { get; set; } = default(Percent);
        #endregion
        #region CloseRangeFlankingStalkTime
        public Percent CloseRangeFlankingStalkTime { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargeDistance
        public Percent CloseRangeChargeDistance { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargingThrowProbability
        public Percent CloseRangeChargingThrowProbability { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargingSprintFastProbability
        public Percent CloseRangeChargingSprintFastProbability { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargingSideswipeProbability
        public Percent CloseRangeChargingSideswipeProbability { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargingDisengageProbability
        public Percent CloseRangeChargingDisengageProbability { get; set; } = default(Percent);
        #endregion
        #region CloseRangeChargingThrowMaxTargets
        public UInt32 CloseRangeChargingThrowMaxTargets { get; set; } = default(UInt32);
        #endregion
        #region CloseRangeFlankingVariance
        public Percent CloseRangeFlankingVariance { get; set; } = default(Percent);
        #endregion
        #region CloseRangeRetreatChance
        public Percent CloseRangeRetreatChance { get; set; } = default(Percent);
        #endregion
        #region CloseRangeRetreatDistanceMult
        public Percent CloseRangeRetreatDistanceMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeStrafeMult
        public Percent LongRangeStrafeMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeAdjustRangeMult
        public Percent LongRangeAdjustRangeMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeCrouchMult
        public Percent LongRangeCrouchMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeWaitMult
        public Percent LongRangeWaitMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeRangeMult
        public Percent LongRangeRangeMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeProvideSuppressiveFireMult
        public Percent LongRangeProvideSuppressiveFireMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeRetreatChance
        public Percent LongRangeRetreatChance { get; set; } = default(Percent);
        #endregion
        #region LongRangeRetreatHideTimeMult
        public Percent LongRangeRetreatHideTimeMult { get; set; } = default(Percent);
        #endregion
        #region LongRangeRetreatDistanceMult
        public Percent LongRangeRetreatDistanceMult { get; set; } = default(Percent);
        #endregion
        #region CoverSearchDistanceMult
        public Percent CoverSearchDistanceMult { get; set; } = default(Percent);
        #endregion
        #region CoverSearchSuppressionSensitivity
        public Percent CoverSearchSuppressionSensitivity { get; set; } = default(Percent);
        #endregion
        #region FlightHoverChance
        public Percent FlightHoverChance { get; set; } = default(Percent);
        #endregion
        #region FlightDiveBombChance
        public Percent FlightDiveBombChance { get; set; } = default(Percent);
        #endregion
        #region FlightGroundAttackChance
        public Percent FlightGroundAttackChance { get; set; } = default(Percent);
        #endregion
        #region FlightHoverTime
        public Percent FlightHoverTime { get; set; } = default(Percent);
        #endregion
        #region FlightGroundAttackTime
        public Percent FlightGroundAttackTime { get; set; } = default(Percent);
        #endregion
        #region FlightPerchAttackChance
        public Percent FlightPerchAttackChance { get; set; } = default(Percent);
        #endregion
        #region FlightPerchAttackTime
        public Percent FlightPerchAttackTime { get; set; } = default(Percent);
        #endregion
        #region FlightFlyingAttackChance
        public Percent FlightFlyingAttackChance { get; set; } = default(Percent);
        #endregion
        #region TunnelCostMult
        public Single TunnelCostMult { get; set; } = default(Single);
        public static RangeFloat TunnelCostMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region TunnelChance
        public Percent TunnelChance { get; set; } = default(Percent);
        #endregion
        #region TunnelMaxDistance
        public Single TunnelMaxDistance { get; set; } = default(Single);
        public static RangeFloat TunnelMaxDistance_Range = new RangeFloat(0f, 1000f);
        #endregion
        #region TunnelSpeedMult
        public Single TunnelSpeedMult { get; set; } = default(Single);
        public static RangeFloat TunnelSpeedMult_Range = new RangeFloat(0f, 10f);
        #endregion
        #region TunnelMinTime
        public Single TunnelMinTime { get; set; } = default(Single);
        public static RangeFloat TunnelMinTime_Range = new RangeFloat(0f, 30f);
        #endregion
        #region TunnelMaxTime
        public Single TunnelMaxTime { get; set; } = default(Single);
        public static RangeFloat TunnelMaxTime_Range = new RangeFloat(0f, 30f);
        #endregion
        #region TunnelMaximumTime
        public Single TunnelMaximumTime { get; set; } = default(Single);
        public static RangeFloat TunnelMaximumTime_Range = new RangeFloat(0f, 30f);
        #endregion
        #region TunnelCooldown
        public Single TunnelCooldown { get; set; } = default(Single);
        public static RangeFloat TunnelCooldown_Range = new RangeFloat(0f, 30f);
        #endregion
        #region SpaceGeneralPilotSkill
        public Percent SpaceGeneralPilotSkill { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAccuracy
        public Percent SpaceGeneralAccuracy { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralTargetShield
        public Percent SpaceGeneralTargetShield { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAdjustment
        public Single SpaceGeneralAdjustment { get; set; } = default(Single);
        public static RangeFloat SpaceGeneralAdjustment_Range = new RangeFloat(0f, 60f);
        #endregion
        #region SpaceGeneralEngageManeuverChanceDirectAttack
        public Percent SpaceGeneralEngageManeuverChanceDirectAttack { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChancePass
        public Percent SpaceGeneralEngageManeuverChancePass { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceLeadTurn
        public Percent SpaceGeneralEngageManeuverChanceLeadTurn { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceSlideTurn
        public Percent SpaceGeneralEngageManeuverChanceSlideTurn { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceBarrelRoll
        public Percent SpaceGeneralEngageManeuverChanceBarrelRoll { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceBreak
        public Percent SpaceGeneralEvadeManeuverChanceBreak { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceScissors
        public Percent SpaceGeneralEvadeManeuverChanceScissors { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceCut
        public Percent SpaceGeneralEvadeManeuverChanceCut { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceBoost
        public Percent SpaceGeneralEvadeManeuverChanceBoost { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceSliceback
        public Percent SpaceGeneralAcquireManeuverChanceSliceback { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceStrafeTurn
        public Percent SpaceGeneralAcquireManeuverChanceStrafeTurn { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceAcquire
        public Percent SpaceGeneralAcquireManeuverChanceAcquire { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceTurn
        public Percent SpaceGeneralAcquireManeuverChanceTurn { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralDisengageManeuverChance
        public Percent SpaceGeneralDisengageManeuverChance { get; set; } = default(Percent);
        #endregion
        #region SpaceGeneralMissileSeekingStrength
        public Single SpaceGeneralMissileSeekingStrength { get; set; } = default(Single);
        public static RangeFloat SpaceGeneralMissileSeekingStrength_Range = new RangeFloat(0f, 10f);
        #endregion
        #region SpaceGeneralMinTimeBetweenBoosts
        public Single SpaceGeneralMinTimeBetweenBoosts { get; set; } = default(Single);
        public static RangeFloat SpaceGeneralMinTimeBetweenBoosts_Range = new RangeFloat(0f, 60f);
        #endregion
        #region SpaceGeneralCombatStrafing
        public Boolean SpaceGeneralCombatStrafing { get; set; } = default(Boolean);
        #endregion
        #region SpaceGeneralRollsDuringBoost
        public Boolean SpaceGeneralRollsDuringBoost { get; set; } = default(Boolean);
        #endregion
        #region UnknownCSSG
        public Int16 UnknownCSSG { get; set; } = default(Int16);
        #endregion
        #region SpaceGeneralPowerWeighting
        public CombatStylePowerWeighting SpaceGeneralPowerWeighting { get; set; } = new CombatStylePowerWeighting();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStylePowerWeightingGetter ICombatStyleGetter.SpaceGeneralPowerWeighting => SpaceGeneralPowerWeighting;
        #endregion
        #region SpaceManeuverTypesMaxTime
        public CombatStyleManeuverTiming SpaceManeuverTypesMaxTime { get; set; } = new CombatStyleManeuverTiming();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleManeuverTimingGetter ICombatStyleGetter.SpaceManeuverTypesMaxTime => SpaceManeuverTypesMaxTime;
        #endregion
        #region SpaceManeuverTypesReentryDelays
        public CombatStyleManeuverTiming SpaceManeuverTypesReentryDelays { get; set; } = new CombatStyleManeuverTiming();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleManeuverTimingGetter ICombatStyleGetter.SpaceManeuverTypesReentryDelays => SpaceManeuverTypesReentryDelays;
        #endregion
        #region SpaceRepairDamageThreshold
        public Percent SpaceRepairDamageThreshold { get; set; } = default(Percent);
        #endregion
        #region SpaceRepairFarawayDistance
        public Percent SpaceRepairFarawayDistance { get; set; } = default(Percent);
        #endregion
        #region SpaceRepairPowerToUse
        public Percent SpaceRepairPowerToUse { get; set; } = default(Percent);
        #endregion
        #region SpaceRepairInClosePowerWeightingTables
        public CombatStylePowerWeighting SpaceRepairInClosePowerWeightingTables { get; set; } = new CombatStylePowerWeighting();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStylePowerWeightingGetter ICombatStyleGetter.SpaceRepairInClosePowerWeightingTables => SpaceRepairInClosePowerWeightingTables;
        #endregion
        #region SpaceRepairFarawayPowerWeightingTables
        public CombatStylePowerWeighting SpaceRepairFarawayPowerWeightingTables { get; set; } = new CombatStylePowerWeighting();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStylePowerWeightingGetter ICombatStyleGetter.SpaceRepairFarawayPowerWeightingTables => SpaceRepairFarawayPowerWeightingTables;
        #endregion
        #region SpaceApproachingMinDistance
        public Percent SpaceApproachingMinDistance { get; set; } = default(Percent);
        #endregion
        #region SpaceApproachingWeighting
        public CombatStylePowerWeighting SpaceApproachingWeighting { get; set; } = new CombatStylePowerWeighting();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStylePowerWeightingGetter ICombatStyleGetter.SpaceApproachingWeighting => SpaceApproachingWeighting;
        #endregion
        #region SpaceDetectionRating1
        public Single SpaceDetectionRating1 { get; set; } = default(Single);
        #endregion
        #region SpaceDetectionRating2
        public Single SpaceDetectionRating2 { get; set; } = default(Single);
        #endregion
        #region SpaceDetectionRating3
        public Single SpaceDetectionRating3 { get; set; } = default(Single);
        #endregion
        #region Flags
        public CombatStyle.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CombatStyle.Flag? ICombatStyleGetter.Flags => this.Flags;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICombatStyleGetter.FNAM => this.FNAM;
        #endregion
        #region TemplateDefaultCombatStyle
        private readonly IFormLinkNullable<ICombatStyleGetter> _TemplateDefaultCombatStyle = new FormLinkNullable<ICombatStyleGetter>();
        public IFormLinkNullable<ICombatStyleGetter> TemplateDefaultCombatStyle
        {
            get => _TemplateDefaultCombatStyle;
            set => _TemplateDefaultCombatStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> ICombatStyleGetter.TemplateDefaultCombatStyle => this.TemplateDefaultCombatStyle;
        #endregion
        #region Templates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyleTemplates? _Templates;
        public CombatStyleTemplates? Templates
        {
            get => _Templates;
            set => _Templates = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleTemplatesGetter? ICombatStyleGetter.Templates => this.Templates;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.OffensiveMult = initialValue;
                this.DefensiveMult = initialValue;
                this.GroupOffensiveMult = initialValue;
                this.EquipmentScoreMultMelee = initialValue;
                this.EquipmentScoreMultMagic = initialValue;
                this.EquipmentScoreMultRanged = initialValue;
                this.EquipmentScoreMultShout = initialValue;
                this.EquipmentScoreMultUnarmed = initialValue;
                this.EquipmentScoreMultStaff = initialValue;
                this.AvoidThreatChance = initialValue;
                this.DodgeThreadChance = initialValue;
                this.EvadeThreatChance = initialValue;
                this.HealAllyDistance = initialValue;
                this.JumpCostMult = initialValue;
                this.TauntDelayMult = initialValue;
                this.MeleeAttackStaggeredMult = initialValue;
                this.MeleePowerAttackStaggeredMult = initialValue;
                this.MeleePowerAttackBlockingMult = initialValue;
                this.MeleeBashMult = initialValue;
                this.MeleeBashRecoilMult = initialValue;
                this.MeleeBashAttackMult = initialValue;
                this.MeleeBashPowerAttackMult = initialValue;
                this.MeleeSpecialAttackMult = initialValue;
                this.MeleeBlockWhenStaggeredMult = initialValue;
                this.MeleeAttackWhenStaggeredMult = initialValue;
                this.RangedAccuracyMult = initialValue;
                this.RangedThrowMult = initialValue;
                this.RangedGrenadeAdvancedThrowingMult = initialValue;
                this.RangedGrenadeFlashTargetMult = initialValue;
                this.RangedGrenadeThrowAtGroupMult = initialValue;
                this.RangedGrenadeCloseRangeAttackChanceMult = initialValue;
                this.CloseRangeDuelingCircleMult = initialValue;
                this.CloseRangeDuelingFallbackMult = initialValue;
                this.CloseRangeFlankDistance = initialValue;
                this.CloseRangeFlankingStalkTime = initialValue;
                this.CloseRangeChargeDistance = initialValue;
                this.CloseRangeChargingThrowProbability = initialValue;
                this.CloseRangeChargingSprintFastProbability = initialValue;
                this.CloseRangeChargingSideswipeProbability = initialValue;
                this.CloseRangeChargingDisengageProbability = initialValue;
                this.CloseRangeChargingThrowMaxTargets = initialValue;
                this.CloseRangeFlankingVariance = initialValue;
                this.CloseRangeRetreatChance = initialValue;
                this.CloseRangeRetreatDistanceMult = initialValue;
                this.LongRangeStrafeMult = initialValue;
                this.LongRangeAdjustRangeMult = initialValue;
                this.LongRangeCrouchMult = initialValue;
                this.LongRangeWaitMult = initialValue;
                this.LongRangeRangeMult = initialValue;
                this.LongRangeProvideSuppressiveFireMult = initialValue;
                this.LongRangeRetreatChance = initialValue;
                this.LongRangeRetreatHideTimeMult = initialValue;
                this.LongRangeRetreatDistanceMult = initialValue;
                this.CoverSearchDistanceMult = initialValue;
                this.CoverSearchSuppressionSensitivity = initialValue;
                this.FlightHoverChance = initialValue;
                this.FlightDiveBombChance = initialValue;
                this.FlightGroundAttackChance = initialValue;
                this.FlightHoverTime = initialValue;
                this.FlightGroundAttackTime = initialValue;
                this.FlightPerchAttackChance = initialValue;
                this.FlightPerchAttackTime = initialValue;
                this.FlightFlyingAttackChance = initialValue;
                this.TunnelCostMult = initialValue;
                this.TunnelChance = initialValue;
                this.TunnelMaxDistance = initialValue;
                this.TunnelSpeedMult = initialValue;
                this.TunnelMinTime = initialValue;
                this.TunnelMaxTime = initialValue;
                this.TunnelMaximumTime = initialValue;
                this.TunnelCooldown = initialValue;
                this.SpaceGeneralPilotSkill = initialValue;
                this.SpaceGeneralAccuracy = initialValue;
                this.SpaceGeneralTargetShield = initialValue;
                this.SpaceGeneralAdjustment = initialValue;
                this.SpaceGeneralEngageManeuverChanceDirectAttack = initialValue;
                this.SpaceGeneralEngageManeuverChancePass = initialValue;
                this.SpaceGeneralEngageManeuverChanceLeadTurn = initialValue;
                this.SpaceGeneralEngageManeuverChanceSlideTurn = initialValue;
                this.SpaceGeneralEngageManeuverChanceBarrelRoll = initialValue;
                this.SpaceGeneralEvadeManeuverChanceBreak = initialValue;
                this.SpaceGeneralEvadeManeuverChanceScissors = initialValue;
                this.SpaceGeneralEvadeManeuverChanceCut = initialValue;
                this.SpaceGeneralEvadeManeuverChanceBoost = initialValue;
                this.SpaceGeneralAcquireManeuverChanceSliceback = initialValue;
                this.SpaceGeneralAcquireManeuverChanceStrafeTurn = initialValue;
                this.SpaceGeneralAcquireManeuverChanceAcquire = initialValue;
                this.SpaceGeneralAcquireManeuverChanceTurn = initialValue;
                this.SpaceGeneralDisengageManeuverChance = initialValue;
                this.SpaceGeneralMissileSeekingStrength = initialValue;
                this.SpaceGeneralMinTimeBetweenBoosts = initialValue;
                this.SpaceGeneralCombatStrafing = initialValue;
                this.SpaceGeneralRollsDuringBoost = initialValue;
                this.UnknownCSSG = initialValue;
                this.SpaceGeneralPowerWeighting = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(initialValue, new CombatStylePowerWeighting.Mask<TItem>(initialValue));
                this.SpaceManeuverTypesMaxTime = new MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>(initialValue, new CombatStyleManeuverTiming.Mask<TItem>(initialValue));
                this.SpaceManeuverTypesReentryDelays = new MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>(initialValue, new CombatStyleManeuverTiming.Mask<TItem>(initialValue));
                this.SpaceRepairDamageThreshold = initialValue;
                this.SpaceRepairFarawayDistance = initialValue;
                this.SpaceRepairPowerToUse = initialValue;
                this.SpaceRepairInClosePowerWeightingTables = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(initialValue, new CombatStylePowerWeighting.Mask<TItem>(initialValue));
                this.SpaceRepairFarawayPowerWeightingTables = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(initialValue, new CombatStylePowerWeighting.Mask<TItem>(initialValue));
                this.SpaceApproachingMinDistance = initialValue;
                this.SpaceApproachingWeighting = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(initialValue, new CombatStylePowerWeighting.Mask<TItem>(initialValue));
                this.SpaceDetectionRating1 = initialValue;
                this.SpaceDetectionRating2 = initialValue;
                this.SpaceDetectionRating3 = initialValue;
                this.Flags = initialValue;
                this.FNAM = initialValue;
                this.TemplateDefaultCombatStyle = initialValue;
                this.Templates = new MaskItem<TItem, CombatStyleTemplates.Mask<TItem>?>(initialValue, new CombatStyleTemplates.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem OffensiveMult,
                TItem DefensiveMult,
                TItem GroupOffensiveMult,
                TItem EquipmentScoreMultMelee,
                TItem EquipmentScoreMultMagic,
                TItem EquipmentScoreMultRanged,
                TItem EquipmentScoreMultShout,
                TItem EquipmentScoreMultUnarmed,
                TItem EquipmentScoreMultStaff,
                TItem AvoidThreatChance,
                TItem DodgeThreadChance,
                TItem EvadeThreatChance,
                TItem HealAllyDistance,
                TItem JumpCostMult,
                TItem TauntDelayMult,
                TItem MeleeAttackStaggeredMult,
                TItem MeleePowerAttackStaggeredMult,
                TItem MeleePowerAttackBlockingMult,
                TItem MeleeBashMult,
                TItem MeleeBashRecoilMult,
                TItem MeleeBashAttackMult,
                TItem MeleeBashPowerAttackMult,
                TItem MeleeSpecialAttackMult,
                TItem MeleeBlockWhenStaggeredMult,
                TItem MeleeAttackWhenStaggeredMult,
                TItem RangedAccuracyMult,
                TItem RangedThrowMult,
                TItem RangedGrenadeAdvancedThrowingMult,
                TItem RangedGrenadeFlashTargetMult,
                TItem RangedGrenadeThrowAtGroupMult,
                TItem RangedGrenadeCloseRangeAttackChanceMult,
                TItem CloseRangeDuelingCircleMult,
                TItem CloseRangeDuelingFallbackMult,
                TItem CloseRangeFlankDistance,
                TItem CloseRangeFlankingStalkTime,
                TItem CloseRangeChargeDistance,
                TItem CloseRangeChargingThrowProbability,
                TItem CloseRangeChargingSprintFastProbability,
                TItem CloseRangeChargingSideswipeProbability,
                TItem CloseRangeChargingDisengageProbability,
                TItem CloseRangeChargingThrowMaxTargets,
                TItem CloseRangeFlankingVariance,
                TItem CloseRangeRetreatChance,
                TItem CloseRangeRetreatDistanceMult,
                TItem LongRangeStrafeMult,
                TItem LongRangeAdjustRangeMult,
                TItem LongRangeCrouchMult,
                TItem LongRangeWaitMult,
                TItem LongRangeRangeMult,
                TItem LongRangeProvideSuppressiveFireMult,
                TItem LongRangeRetreatChance,
                TItem LongRangeRetreatHideTimeMult,
                TItem LongRangeRetreatDistanceMult,
                TItem CoverSearchDistanceMult,
                TItem CoverSearchSuppressionSensitivity,
                TItem FlightHoverChance,
                TItem FlightDiveBombChance,
                TItem FlightGroundAttackChance,
                TItem FlightHoverTime,
                TItem FlightGroundAttackTime,
                TItem FlightPerchAttackChance,
                TItem FlightPerchAttackTime,
                TItem FlightFlyingAttackChance,
                TItem TunnelCostMult,
                TItem TunnelChance,
                TItem TunnelMaxDistance,
                TItem TunnelSpeedMult,
                TItem TunnelMinTime,
                TItem TunnelMaxTime,
                TItem TunnelMaximumTime,
                TItem TunnelCooldown,
                TItem SpaceGeneralPilotSkill,
                TItem SpaceGeneralAccuracy,
                TItem SpaceGeneralTargetShield,
                TItem SpaceGeneralAdjustment,
                TItem SpaceGeneralEngageManeuverChanceDirectAttack,
                TItem SpaceGeneralEngageManeuverChancePass,
                TItem SpaceGeneralEngageManeuverChanceLeadTurn,
                TItem SpaceGeneralEngageManeuverChanceSlideTurn,
                TItem SpaceGeneralEngageManeuverChanceBarrelRoll,
                TItem SpaceGeneralEvadeManeuverChanceBreak,
                TItem SpaceGeneralEvadeManeuverChanceScissors,
                TItem SpaceGeneralEvadeManeuverChanceCut,
                TItem SpaceGeneralEvadeManeuverChanceBoost,
                TItem SpaceGeneralAcquireManeuverChanceSliceback,
                TItem SpaceGeneralAcquireManeuverChanceStrafeTurn,
                TItem SpaceGeneralAcquireManeuverChanceAcquire,
                TItem SpaceGeneralAcquireManeuverChanceTurn,
                TItem SpaceGeneralDisengageManeuverChance,
                TItem SpaceGeneralMissileSeekingStrength,
                TItem SpaceGeneralMinTimeBetweenBoosts,
                TItem SpaceGeneralCombatStrafing,
                TItem SpaceGeneralRollsDuringBoost,
                TItem UnknownCSSG,
                TItem SpaceGeneralPowerWeighting,
                TItem SpaceManeuverTypesMaxTime,
                TItem SpaceManeuverTypesReentryDelays,
                TItem SpaceRepairDamageThreshold,
                TItem SpaceRepairFarawayDistance,
                TItem SpaceRepairPowerToUse,
                TItem SpaceRepairInClosePowerWeightingTables,
                TItem SpaceRepairFarawayPowerWeightingTables,
                TItem SpaceApproachingMinDistance,
                TItem SpaceApproachingWeighting,
                TItem SpaceDetectionRating1,
                TItem SpaceDetectionRating2,
                TItem SpaceDetectionRating3,
                TItem Flags,
                TItem FNAM,
                TItem TemplateDefaultCombatStyle,
                TItem Templates)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.OffensiveMult = OffensiveMult;
                this.DefensiveMult = DefensiveMult;
                this.GroupOffensiveMult = GroupOffensiveMult;
                this.EquipmentScoreMultMelee = EquipmentScoreMultMelee;
                this.EquipmentScoreMultMagic = EquipmentScoreMultMagic;
                this.EquipmentScoreMultRanged = EquipmentScoreMultRanged;
                this.EquipmentScoreMultShout = EquipmentScoreMultShout;
                this.EquipmentScoreMultUnarmed = EquipmentScoreMultUnarmed;
                this.EquipmentScoreMultStaff = EquipmentScoreMultStaff;
                this.AvoidThreatChance = AvoidThreatChance;
                this.DodgeThreadChance = DodgeThreadChance;
                this.EvadeThreatChance = EvadeThreatChance;
                this.HealAllyDistance = HealAllyDistance;
                this.JumpCostMult = JumpCostMult;
                this.TauntDelayMult = TauntDelayMult;
                this.MeleeAttackStaggeredMult = MeleeAttackStaggeredMult;
                this.MeleePowerAttackStaggeredMult = MeleePowerAttackStaggeredMult;
                this.MeleePowerAttackBlockingMult = MeleePowerAttackBlockingMult;
                this.MeleeBashMult = MeleeBashMult;
                this.MeleeBashRecoilMult = MeleeBashRecoilMult;
                this.MeleeBashAttackMult = MeleeBashAttackMult;
                this.MeleeBashPowerAttackMult = MeleeBashPowerAttackMult;
                this.MeleeSpecialAttackMult = MeleeSpecialAttackMult;
                this.MeleeBlockWhenStaggeredMult = MeleeBlockWhenStaggeredMult;
                this.MeleeAttackWhenStaggeredMult = MeleeAttackWhenStaggeredMult;
                this.RangedAccuracyMult = RangedAccuracyMult;
                this.RangedThrowMult = RangedThrowMult;
                this.RangedGrenadeAdvancedThrowingMult = RangedGrenadeAdvancedThrowingMult;
                this.RangedGrenadeFlashTargetMult = RangedGrenadeFlashTargetMult;
                this.RangedGrenadeThrowAtGroupMult = RangedGrenadeThrowAtGroupMult;
                this.RangedGrenadeCloseRangeAttackChanceMult = RangedGrenadeCloseRangeAttackChanceMult;
                this.CloseRangeDuelingCircleMult = CloseRangeDuelingCircleMult;
                this.CloseRangeDuelingFallbackMult = CloseRangeDuelingFallbackMult;
                this.CloseRangeFlankDistance = CloseRangeFlankDistance;
                this.CloseRangeFlankingStalkTime = CloseRangeFlankingStalkTime;
                this.CloseRangeChargeDistance = CloseRangeChargeDistance;
                this.CloseRangeChargingThrowProbability = CloseRangeChargingThrowProbability;
                this.CloseRangeChargingSprintFastProbability = CloseRangeChargingSprintFastProbability;
                this.CloseRangeChargingSideswipeProbability = CloseRangeChargingSideswipeProbability;
                this.CloseRangeChargingDisengageProbability = CloseRangeChargingDisengageProbability;
                this.CloseRangeChargingThrowMaxTargets = CloseRangeChargingThrowMaxTargets;
                this.CloseRangeFlankingVariance = CloseRangeFlankingVariance;
                this.CloseRangeRetreatChance = CloseRangeRetreatChance;
                this.CloseRangeRetreatDistanceMult = CloseRangeRetreatDistanceMult;
                this.LongRangeStrafeMult = LongRangeStrafeMult;
                this.LongRangeAdjustRangeMult = LongRangeAdjustRangeMult;
                this.LongRangeCrouchMult = LongRangeCrouchMult;
                this.LongRangeWaitMult = LongRangeWaitMult;
                this.LongRangeRangeMult = LongRangeRangeMult;
                this.LongRangeProvideSuppressiveFireMult = LongRangeProvideSuppressiveFireMult;
                this.LongRangeRetreatChance = LongRangeRetreatChance;
                this.LongRangeRetreatHideTimeMult = LongRangeRetreatHideTimeMult;
                this.LongRangeRetreatDistanceMult = LongRangeRetreatDistanceMult;
                this.CoverSearchDistanceMult = CoverSearchDistanceMult;
                this.CoverSearchSuppressionSensitivity = CoverSearchSuppressionSensitivity;
                this.FlightHoverChance = FlightHoverChance;
                this.FlightDiveBombChance = FlightDiveBombChance;
                this.FlightGroundAttackChance = FlightGroundAttackChance;
                this.FlightHoverTime = FlightHoverTime;
                this.FlightGroundAttackTime = FlightGroundAttackTime;
                this.FlightPerchAttackChance = FlightPerchAttackChance;
                this.FlightPerchAttackTime = FlightPerchAttackTime;
                this.FlightFlyingAttackChance = FlightFlyingAttackChance;
                this.TunnelCostMult = TunnelCostMult;
                this.TunnelChance = TunnelChance;
                this.TunnelMaxDistance = TunnelMaxDistance;
                this.TunnelSpeedMult = TunnelSpeedMult;
                this.TunnelMinTime = TunnelMinTime;
                this.TunnelMaxTime = TunnelMaxTime;
                this.TunnelMaximumTime = TunnelMaximumTime;
                this.TunnelCooldown = TunnelCooldown;
                this.SpaceGeneralPilotSkill = SpaceGeneralPilotSkill;
                this.SpaceGeneralAccuracy = SpaceGeneralAccuracy;
                this.SpaceGeneralTargetShield = SpaceGeneralTargetShield;
                this.SpaceGeneralAdjustment = SpaceGeneralAdjustment;
                this.SpaceGeneralEngageManeuverChanceDirectAttack = SpaceGeneralEngageManeuverChanceDirectAttack;
                this.SpaceGeneralEngageManeuverChancePass = SpaceGeneralEngageManeuverChancePass;
                this.SpaceGeneralEngageManeuverChanceLeadTurn = SpaceGeneralEngageManeuverChanceLeadTurn;
                this.SpaceGeneralEngageManeuverChanceSlideTurn = SpaceGeneralEngageManeuverChanceSlideTurn;
                this.SpaceGeneralEngageManeuverChanceBarrelRoll = SpaceGeneralEngageManeuverChanceBarrelRoll;
                this.SpaceGeneralEvadeManeuverChanceBreak = SpaceGeneralEvadeManeuverChanceBreak;
                this.SpaceGeneralEvadeManeuverChanceScissors = SpaceGeneralEvadeManeuverChanceScissors;
                this.SpaceGeneralEvadeManeuverChanceCut = SpaceGeneralEvadeManeuverChanceCut;
                this.SpaceGeneralEvadeManeuverChanceBoost = SpaceGeneralEvadeManeuverChanceBoost;
                this.SpaceGeneralAcquireManeuverChanceSliceback = SpaceGeneralAcquireManeuverChanceSliceback;
                this.SpaceGeneralAcquireManeuverChanceStrafeTurn = SpaceGeneralAcquireManeuverChanceStrafeTurn;
                this.SpaceGeneralAcquireManeuverChanceAcquire = SpaceGeneralAcquireManeuverChanceAcquire;
                this.SpaceGeneralAcquireManeuverChanceTurn = SpaceGeneralAcquireManeuverChanceTurn;
                this.SpaceGeneralDisengageManeuverChance = SpaceGeneralDisengageManeuverChance;
                this.SpaceGeneralMissileSeekingStrength = SpaceGeneralMissileSeekingStrength;
                this.SpaceGeneralMinTimeBetweenBoosts = SpaceGeneralMinTimeBetweenBoosts;
                this.SpaceGeneralCombatStrafing = SpaceGeneralCombatStrafing;
                this.SpaceGeneralRollsDuringBoost = SpaceGeneralRollsDuringBoost;
                this.UnknownCSSG = UnknownCSSG;
                this.SpaceGeneralPowerWeighting = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(SpaceGeneralPowerWeighting, new CombatStylePowerWeighting.Mask<TItem>(SpaceGeneralPowerWeighting));
                this.SpaceManeuverTypesMaxTime = new MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>(SpaceManeuverTypesMaxTime, new CombatStyleManeuverTiming.Mask<TItem>(SpaceManeuverTypesMaxTime));
                this.SpaceManeuverTypesReentryDelays = new MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>(SpaceManeuverTypesReentryDelays, new CombatStyleManeuverTiming.Mask<TItem>(SpaceManeuverTypesReentryDelays));
                this.SpaceRepairDamageThreshold = SpaceRepairDamageThreshold;
                this.SpaceRepairFarawayDistance = SpaceRepairFarawayDistance;
                this.SpaceRepairPowerToUse = SpaceRepairPowerToUse;
                this.SpaceRepairInClosePowerWeightingTables = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(SpaceRepairInClosePowerWeightingTables, new CombatStylePowerWeighting.Mask<TItem>(SpaceRepairInClosePowerWeightingTables));
                this.SpaceRepairFarawayPowerWeightingTables = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(SpaceRepairFarawayPowerWeightingTables, new CombatStylePowerWeighting.Mask<TItem>(SpaceRepairFarawayPowerWeightingTables));
                this.SpaceApproachingMinDistance = SpaceApproachingMinDistance;
                this.SpaceApproachingWeighting = new MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>(SpaceApproachingWeighting, new CombatStylePowerWeighting.Mask<TItem>(SpaceApproachingWeighting));
                this.SpaceDetectionRating1 = SpaceDetectionRating1;
                this.SpaceDetectionRating2 = SpaceDetectionRating2;
                this.SpaceDetectionRating3 = SpaceDetectionRating3;
                this.Flags = Flags;
                this.FNAM = FNAM;
                this.TemplateDefaultCombatStyle = TemplateDefaultCombatStyle;
                this.Templates = new MaskItem<TItem, CombatStyleTemplates.Mask<TItem>?>(Templates, new CombatStyleTemplates.Mask<TItem>(Templates));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem OffensiveMult;
            public TItem DefensiveMult;
            public TItem GroupOffensiveMult;
            public TItem EquipmentScoreMultMelee;
            public TItem EquipmentScoreMultMagic;
            public TItem EquipmentScoreMultRanged;
            public TItem EquipmentScoreMultShout;
            public TItem EquipmentScoreMultUnarmed;
            public TItem EquipmentScoreMultStaff;
            public TItem AvoidThreatChance;
            public TItem DodgeThreadChance;
            public TItem EvadeThreatChance;
            public TItem HealAllyDistance;
            public TItem JumpCostMult;
            public TItem TauntDelayMult;
            public TItem MeleeAttackStaggeredMult;
            public TItem MeleePowerAttackStaggeredMult;
            public TItem MeleePowerAttackBlockingMult;
            public TItem MeleeBashMult;
            public TItem MeleeBashRecoilMult;
            public TItem MeleeBashAttackMult;
            public TItem MeleeBashPowerAttackMult;
            public TItem MeleeSpecialAttackMult;
            public TItem MeleeBlockWhenStaggeredMult;
            public TItem MeleeAttackWhenStaggeredMult;
            public TItem RangedAccuracyMult;
            public TItem RangedThrowMult;
            public TItem RangedGrenadeAdvancedThrowingMult;
            public TItem RangedGrenadeFlashTargetMult;
            public TItem RangedGrenadeThrowAtGroupMult;
            public TItem RangedGrenadeCloseRangeAttackChanceMult;
            public TItem CloseRangeDuelingCircleMult;
            public TItem CloseRangeDuelingFallbackMult;
            public TItem CloseRangeFlankDistance;
            public TItem CloseRangeFlankingStalkTime;
            public TItem CloseRangeChargeDistance;
            public TItem CloseRangeChargingThrowProbability;
            public TItem CloseRangeChargingSprintFastProbability;
            public TItem CloseRangeChargingSideswipeProbability;
            public TItem CloseRangeChargingDisengageProbability;
            public TItem CloseRangeChargingThrowMaxTargets;
            public TItem CloseRangeFlankingVariance;
            public TItem CloseRangeRetreatChance;
            public TItem CloseRangeRetreatDistanceMult;
            public TItem LongRangeStrafeMult;
            public TItem LongRangeAdjustRangeMult;
            public TItem LongRangeCrouchMult;
            public TItem LongRangeWaitMult;
            public TItem LongRangeRangeMult;
            public TItem LongRangeProvideSuppressiveFireMult;
            public TItem LongRangeRetreatChance;
            public TItem LongRangeRetreatHideTimeMult;
            public TItem LongRangeRetreatDistanceMult;
            public TItem CoverSearchDistanceMult;
            public TItem CoverSearchSuppressionSensitivity;
            public TItem FlightHoverChance;
            public TItem FlightDiveBombChance;
            public TItem FlightGroundAttackChance;
            public TItem FlightHoverTime;
            public TItem FlightGroundAttackTime;
            public TItem FlightPerchAttackChance;
            public TItem FlightPerchAttackTime;
            public TItem FlightFlyingAttackChance;
            public TItem TunnelCostMult;
            public TItem TunnelChance;
            public TItem TunnelMaxDistance;
            public TItem TunnelSpeedMult;
            public TItem TunnelMinTime;
            public TItem TunnelMaxTime;
            public TItem TunnelMaximumTime;
            public TItem TunnelCooldown;
            public TItem SpaceGeneralPilotSkill;
            public TItem SpaceGeneralAccuracy;
            public TItem SpaceGeneralTargetShield;
            public TItem SpaceGeneralAdjustment;
            public TItem SpaceGeneralEngageManeuverChanceDirectAttack;
            public TItem SpaceGeneralEngageManeuverChancePass;
            public TItem SpaceGeneralEngageManeuverChanceLeadTurn;
            public TItem SpaceGeneralEngageManeuverChanceSlideTurn;
            public TItem SpaceGeneralEngageManeuverChanceBarrelRoll;
            public TItem SpaceGeneralEvadeManeuverChanceBreak;
            public TItem SpaceGeneralEvadeManeuverChanceScissors;
            public TItem SpaceGeneralEvadeManeuverChanceCut;
            public TItem SpaceGeneralEvadeManeuverChanceBoost;
            public TItem SpaceGeneralAcquireManeuverChanceSliceback;
            public TItem SpaceGeneralAcquireManeuverChanceStrafeTurn;
            public TItem SpaceGeneralAcquireManeuverChanceAcquire;
            public TItem SpaceGeneralAcquireManeuverChanceTurn;
            public TItem SpaceGeneralDisengageManeuverChance;
            public TItem SpaceGeneralMissileSeekingStrength;
            public TItem SpaceGeneralMinTimeBetweenBoosts;
            public TItem SpaceGeneralCombatStrafing;
            public TItem SpaceGeneralRollsDuringBoost;
            public TItem UnknownCSSG;
            public MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>? SpaceGeneralPowerWeighting { get; set; }
            public MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>? SpaceManeuverTypesMaxTime { get; set; }
            public MaskItem<TItem, CombatStyleManeuverTiming.Mask<TItem>?>? SpaceManeuverTypesReentryDelays { get; set; }
            public TItem SpaceRepairDamageThreshold;
            public TItem SpaceRepairFarawayDistance;
            public TItem SpaceRepairPowerToUse;
            public MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>? SpaceRepairInClosePowerWeightingTables { get; set; }
            public MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>? SpaceRepairFarawayPowerWeightingTables { get; set; }
            public TItem SpaceApproachingMinDistance;
            public MaskItem<TItem, CombatStylePowerWeighting.Mask<TItem>?>? SpaceApproachingWeighting { get; set; }
            public TItem SpaceDetectionRating1;
            public TItem SpaceDetectionRating2;
            public TItem SpaceDetectionRating3;
            public TItem Flags;
            public TItem FNAM;
            public TItem TemplateDefaultCombatStyle;
            public MaskItem<TItem, CombatStyleTemplates.Mask<TItem>?>? Templates { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.OffensiveMult, rhs.OffensiveMult)) return false;
                if (!object.Equals(this.DefensiveMult, rhs.DefensiveMult)) return false;
                if (!object.Equals(this.GroupOffensiveMult, rhs.GroupOffensiveMult)) return false;
                if (!object.Equals(this.EquipmentScoreMultMelee, rhs.EquipmentScoreMultMelee)) return false;
                if (!object.Equals(this.EquipmentScoreMultMagic, rhs.EquipmentScoreMultMagic)) return false;
                if (!object.Equals(this.EquipmentScoreMultRanged, rhs.EquipmentScoreMultRanged)) return false;
                if (!object.Equals(this.EquipmentScoreMultShout, rhs.EquipmentScoreMultShout)) return false;
                if (!object.Equals(this.EquipmentScoreMultUnarmed, rhs.EquipmentScoreMultUnarmed)) return false;
                if (!object.Equals(this.EquipmentScoreMultStaff, rhs.EquipmentScoreMultStaff)) return false;
                if (!object.Equals(this.AvoidThreatChance, rhs.AvoidThreatChance)) return false;
                if (!object.Equals(this.DodgeThreadChance, rhs.DodgeThreadChance)) return false;
                if (!object.Equals(this.EvadeThreatChance, rhs.EvadeThreatChance)) return false;
                if (!object.Equals(this.HealAllyDistance, rhs.HealAllyDistance)) return false;
                if (!object.Equals(this.JumpCostMult, rhs.JumpCostMult)) return false;
                if (!object.Equals(this.TauntDelayMult, rhs.TauntDelayMult)) return false;
                if (!object.Equals(this.MeleeAttackStaggeredMult, rhs.MeleeAttackStaggeredMult)) return false;
                if (!object.Equals(this.MeleePowerAttackStaggeredMult, rhs.MeleePowerAttackStaggeredMult)) return false;
                if (!object.Equals(this.MeleePowerAttackBlockingMult, rhs.MeleePowerAttackBlockingMult)) return false;
                if (!object.Equals(this.MeleeBashMult, rhs.MeleeBashMult)) return false;
                if (!object.Equals(this.MeleeBashRecoilMult, rhs.MeleeBashRecoilMult)) return false;
                if (!object.Equals(this.MeleeBashAttackMult, rhs.MeleeBashAttackMult)) return false;
                if (!object.Equals(this.MeleeBashPowerAttackMult, rhs.MeleeBashPowerAttackMult)) return false;
                if (!object.Equals(this.MeleeSpecialAttackMult, rhs.MeleeSpecialAttackMult)) return false;
                if (!object.Equals(this.MeleeBlockWhenStaggeredMult, rhs.MeleeBlockWhenStaggeredMult)) return false;
                if (!object.Equals(this.MeleeAttackWhenStaggeredMult, rhs.MeleeAttackWhenStaggeredMult)) return false;
                if (!object.Equals(this.RangedAccuracyMult, rhs.RangedAccuracyMult)) return false;
                if (!object.Equals(this.RangedThrowMult, rhs.RangedThrowMult)) return false;
                if (!object.Equals(this.RangedGrenadeAdvancedThrowingMult, rhs.RangedGrenadeAdvancedThrowingMult)) return false;
                if (!object.Equals(this.RangedGrenadeFlashTargetMult, rhs.RangedGrenadeFlashTargetMult)) return false;
                if (!object.Equals(this.RangedGrenadeThrowAtGroupMult, rhs.RangedGrenadeThrowAtGroupMult)) return false;
                if (!object.Equals(this.RangedGrenadeCloseRangeAttackChanceMult, rhs.RangedGrenadeCloseRangeAttackChanceMult)) return false;
                if (!object.Equals(this.CloseRangeDuelingCircleMult, rhs.CloseRangeDuelingCircleMult)) return false;
                if (!object.Equals(this.CloseRangeDuelingFallbackMult, rhs.CloseRangeDuelingFallbackMult)) return false;
                if (!object.Equals(this.CloseRangeFlankDistance, rhs.CloseRangeFlankDistance)) return false;
                if (!object.Equals(this.CloseRangeFlankingStalkTime, rhs.CloseRangeFlankingStalkTime)) return false;
                if (!object.Equals(this.CloseRangeChargeDistance, rhs.CloseRangeChargeDistance)) return false;
                if (!object.Equals(this.CloseRangeChargingThrowProbability, rhs.CloseRangeChargingThrowProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingSprintFastProbability, rhs.CloseRangeChargingSprintFastProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingSideswipeProbability, rhs.CloseRangeChargingSideswipeProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingDisengageProbability, rhs.CloseRangeChargingDisengageProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingThrowMaxTargets, rhs.CloseRangeChargingThrowMaxTargets)) return false;
                if (!object.Equals(this.CloseRangeFlankingVariance, rhs.CloseRangeFlankingVariance)) return false;
                if (!object.Equals(this.CloseRangeRetreatChance, rhs.CloseRangeRetreatChance)) return false;
                if (!object.Equals(this.CloseRangeRetreatDistanceMult, rhs.CloseRangeRetreatDistanceMult)) return false;
                if (!object.Equals(this.LongRangeStrafeMult, rhs.LongRangeStrafeMult)) return false;
                if (!object.Equals(this.LongRangeAdjustRangeMult, rhs.LongRangeAdjustRangeMult)) return false;
                if (!object.Equals(this.LongRangeCrouchMult, rhs.LongRangeCrouchMult)) return false;
                if (!object.Equals(this.LongRangeWaitMult, rhs.LongRangeWaitMult)) return false;
                if (!object.Equals(this.LongRangeRangeMult, rhs.LongRangeRangeMult)) return false;
                if (!object.Equals(this.LongRangeProvideSuppressiveFireMult, rhs.LongRangeProvideSuppressiveFireMult)) return false;
                if (!object.Equals(this.LongRangeRetreatChance, rhs.LongRangeRetreatChance)) return false;
                if (!object.Equals(this.LongRangeRetreatHideTimeMult, rhs.LongRangeRetreatHideTimeMult)) return false;
                if (!object.Equals(this.LongRangeRetreatDistanceMult, rhs.LongRangeRetreatDistanceMult)) return false;
                if (!object.Equals(this.CoverSearchDistanceMult, rhs.CoverSearchDistanceMult)) return false;
                if (!object.Equals(this.CoverSearchSuppressionSensitivity, rhs.CoverSearchSuppressionSensitivity)) return false;
                if (!object.Equals(this.FlightHoverChance, rhs.FlightHoverChance)) return false;
                if (!object.Equals(this.FlightDiveBombChance, rhs.FlightDiveBombChance)) return false;
                if (!object.Equals(this.FlightGroundAttackChance, rhs.FlightGroundAttackChance)) return false;
                if (!object.Equals(this.FlightHoverTime, rhs.FlightHoverTime)) return false;
                if (!object.Equals(this.FlightGroundAttackTime, rhs.FlightGroundAttackTime)) return false;
                if (!object.Equals(this.FlightPerchAttackChance, rhs.FlightPerchAttackChance)) return false;
                if (!object.Equals(this.FlightPerchAttackTime, rhs.FlightPerchAttackTime)) return false;
                if (!object.Equals(this.FlightFlyingAttackChance, rhs.FlightFlyingAttackChance)) return false;
                if (!object.Equals(this.TunnelCostMult, rhs.TunnelCostMult)) return false;
                if (!object.Equals(this.TunnelChance, rhs.TunnelChance)) return false;
                if (!object.Equals(this.TunnelMaxDistance, rhs.TunnelMaxDistance)) return false;
                if (!object.Equals(this.TunnelSpeedMult, rhs.TunnelSpeedMult)) return false;
                if (!object.Equals(this.TunnelMinTime, rhs.TunnelMinTime)) return false;
                if (!object.Equals(this.TunnelMaxTime, rhs.TunnelMaxTime)) return false;
                if (!object.Equals(this.TunnelMaximumTime, rhs.TunnelMaximumTime)) return false;
                if (!object.Equals(this.TunnelCooldown, rhs.TunnelCooldown)) return false;
                if (!object.Equals(this.SpaceGeneralPilotSkill, rhs.SpaceGeneralPilotSkill)) return false;
                if (!object.Equals(this.SpaceGeneralAccuracy, rhs.SpaceGeneralAccuracy)) return false;
                if (!object.Equals(this.SpaceGeneralTargetShield, rhs.SpaceGeneralTargetShield)) return false;
                if (!object.Equals(this.SpaceGeneralAdjustment, rhs.SpaceGeneralAdjustment)) return false;
                if (!object.Equals(this.SpaceGeneralEngageManeuverChanceDirectAttack, rhs.SpaceGeneralEngageManeuverChanceDirectAttack)) return false;
                if (!object.Equals(this.SpaceGeneralEngageManeuverChancePass, rhs.SpaceGeneralEngageManeuverChancePass)) return false;
                if (!object.Equals(this.SpaceGeneralEngageManeuverChanceLeadTurn, rhs.SpaceGeneralEngageManeuverChanceLeadTurn)) return false;
                if (!object.Equals(this.SpaceGeneralEngageManeuverChanceSlideTurn, rhs.SpaceGeneralEngageManeuverChanceSlideTurn)) return false;
                if (!object.Equals(this.SpaceGeneralEngageManeuverChanceBarrelRoll, rhs.SpaceGeneralEngageManeuverChanceBarrelRoll)) return false;
                if (!object.Equals(this.SpaceGeneralEvadeManeuverChanceBreak, rhs.SpaceGeneralEvadeManeuverChanceBreak)) return false;
                if (!object.Equals(this.SpaceGeneralEvadeManeuverChanceScissors, rhs.SpaceGeneralEvadeManeuverChanceScissors)) return false;
                if (!object.Equals(this.SpaceGeneralEvadeManeuverChanceCut, rhs.SpaceGeneralEvadeManeuverChanceCut)) return false;
                if (!object.Equals(this.SpaceGeneralEvadeManeuverChanceBoost, rhs.SpaceGeneralEvadeManeuverChanceBoost)) return false;
                if (!object.Equals(this.SpaceGeneralAcquireManeuverChanceSliceback, rhs.SpaceGeneralAcquireManeuverChanceSliceback)) return false;
                if (!object.Equals(this.SpaceGeneralAcquireManeuverChanceStrafeTurn, rhs.SpaceGeneralAcquireManeuverChanceStrafeTurn)) return false;
                if (!object.Equals(this.SpaceGeneralAcquireManeuverChanceAcquire, rhs.SpaceGeneralAcquireManeuverChanceAcquire)) return false;
                if (!object.Equals(this.SpaceGeneralAcquireManeuverChanceTurn, rhs.SpaceGeneralAcquireManeuverChanceTurn)) return false;
                if (!object.Equals(this.SpaceGeneralDisengageManeuverChance, rhs.SpaceGeneralDisengageManeuverChance)) return false;
                if (!object.Equals(this.SpaceGeneralMissileSeekingStrength, rhs.SpaceGeneralMissileSeekingStrength)) return false;
                if (!object.Equals(this.SpaceGeneralMinTimeBetweenBoosts, rhs.SpaceGeneralMinTimeBetweenBoosts)) return false;
                if (!object.Equals(this.SpaceGeneralCombatStrafing, rhs.SpaceGeneralCombatStrafing)) return false;
                if (!object.Equals(this.SpaceGeneralRollsDuringBoost, rhs.SpaceGeneralRollsDuringBoost)) return false;
                if (!object.Equals(this.UnknownCSSG, rhs.UnknownCSSG)) return false;
                if (!object.Equals(this.SpaceGeneralPowerWeighting, rhs.SpaceGeneralPowerWeighting)) return false;
                if (!object.Equals(this.SpaceManeuverTypesMaxTime, rhs.SpaceManeuverTypesMaxTime)) return false;
                if (!object.Equals(this.SpaceManeuverTypesReentryDelays, rhs.SpaceManeuverTypesReentryDelays)) return false;
                if (!object.Equals(this.SpaceRepairDamageThreshold, rhs.SpaceRepairDamageThreshold)) return false;
                if (!object.Equals(this.SpaceRepairFarawayDistance, rhs.SpaceRepairFarawayDistance)) return false;
                if (!object.Equals(this.SpaceRepairPowerToUse, rhs.SpaceRepairPowerToUse)) return false;
                if (!object.Equals(this.SpaceRepairInClosePowerWeightingTables, rhs.SpaceRepairInClosePowerWeightingTables)) return false;
                if (!object.Equals(this.SpaceRepairFarawayPowerWeightingTables, rhs.SpaceRepairFarawayPowerWeightingTables)) return false;
                if (!object.Equals(this.SpaceApproachingMinDistance, rhs.SpaceApproachingMinDistance)) return false;
                if (!object.Equals(this.SpaceApproachingWeighting, rhs.SpaceApproachingWeighting)) return false;
                if (!object.Equals(this.SpaceDetectionRating1, rhs.SpaceDetectionRating1)) return false;
                if (!object.Equals(this.SpaceDetectionRating2, rhs.SpaceDetectionRating2)) return false;
                if (!object.Equals(this.SpaceDetectionRating3, rhs.SpaceDetectionRating3)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.TemplateDefaultCombatStyle, rhs.TemplateDefaultCombatStyle)) return false;
                if (!object.Equals(this.Templates, rhs.Templates)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.OffensiveMult);
                hash.Add(this.DefensiveMult);
                hash.Add(this.GroupOffensiveMult);
                hash.Add(this.EquipmentScoreMultMelee);
                hash.Add(this.EquipmentScoreMultMagic);
                hash.Add(this.EquipmentScoreMultRanged);
                hash.Add(this.EquipmentScoreMultShout);
                hash.Add(this.EquipmentScoreMultUnarmed);
                hash.Add(this.EquipmentScoreMultStaff);
                hash.Add(this.AvoidThreatChance);
                hash.Add(this.DodgeThreadChance);
                hash.Add(this.EvadeThreatChance);
                hash.Add(this.HealAllyDistance);
                hash.Add(this.JumpCostMult);
                hash.Add(this.TauntDelayMult);
                hash.Add(this.MeleeAttackStaggeredMult);
                hash.Add(this.MeleePowerAttackStaggeredMult);
                hash.Add(this.MeleePowerAttackBlockingMult);
                hash.Add(this.MeleeBashMult);
                hash.Add(this.MeleeBashRecoilMult);
                hash.Add(this.MeleeBashAttackMult);
                hash.Add(this.MeleeBashPowerAttackMult);
                hash.Add(this.MeleeSpecialAttackMult);
                hash.Add(this.MeleeBlockWhenStaggeredMult);
                hash.Add(this.MeleeAttackWhenStaggeredMult);
                hash.Add(this.RangedAccuracyMult);
                hash.Add(this.RangedThrowMult);
                hash.Add(this.RangedGrenadeAdvancedThrowingMult);
                hash.Add(this.RangedGrenadeFlashTargetMult);
                hash.Add(this.RangedGrenadeThrowAtGroupMult);
                hash.Add(this.RangedGrenadeCloseRangeAttackChanceMult);
                hash.Add(this.CloseRangeDuelingCircleMult);
                hash.Add(this.CloseRangeDuelingFallbackMult);
                hash.Add(this.CloseRangeFlankDistance);
                hash.Add(this.CloseRangeFlankingStalkTime);
                hash.Add(this.CloseRangeChargeDistance);
                hash.Add(this.CloseRangeChargingThrowProbability);
                hash.Add(this.CloseRangeChargingSprintFastProbability);
                hash.Add(this.CloseRangeChargingSideswipeProbability);
                hash.Add(this.CloseRangeChargingDisengageProbability);
                hash.Add(this.CloseRangeChargingThrowMaxTargets);
                hash.Add(this.CloseRangeFlankingVariance);
                hash.Add(this.CloseRangeRetreatChance);
                hash.Add(this.CloseRangeRetreatDistanceMult);
                hash.Add(this.LongRangeStrafeMult);
                hash.Add(this.LongRangeAdjustRangeMult);
                hash.Add(this.LongRangeCrouchMult);
                hash.Add(this.LongRangeWaitMult);
                hash.Add(this.LongRangeRangeMult);
                hash.Add(this.LongRangeProvideSuppressiveFireMult);
                hash.Add(this.LongRangeRetreatChance);
                hash.Add(this.LongRangeRetreatHideTimeMult);
                hash.Add(this.LongRangeRetreatDistanceMult);
                hash.Add(this.CoverSearchDistanceMult);
                hash.Add(this.CoverSearchSuppressionSensitivity);
                hash.Add(this.FlightHoverChance);
                hash.Add(this.FlightDiveBombChance);
                hash.Add(this.FlightGroundAttackChance);
                hash.Add(this.FlightHoverTime);
                hash.Add(this.FlightGroundAttackTime);
                hash.Add(this.FlightPerchAttackChance);
                hash.Add(this.FlightPerchAttackTime);
                hash.Add(this.FlightFlyingAttackChance);
                hash.Add(this.TunnelCostMult);
                hash.Add(this.TunnelChance);
                hash.Add(this.TunnelMaxDistance);
                hash.Add(this.TunnelSpeedMult);
                hash.Add(this.TunnelMinTime);
                hash.Add(this.TunnelMaxTime);
                hash.Add(this.TunnelMaximumTime);
                hash.Add(this.TunnelCooldown);
                hash.Add(this.SpaceGeneralPilotSkill);
                hash.Add(this.SpaceGeneralAccuracy);
                hash.Add(this.SpaceGeneralTargetShield);
                hash.Add(this.SpaceGeneralAdjustment);
                hash.Add(this.SpaceGeneralEngageManeuverChanceDirectAttack);
                hash.Add(this.SpaceGeneralEngageManeuverChancePass);
                hash.Add(this.SpaceGeneralEngageManeuverChanceLeadTurn);
                hash.Add(this.SpaceGeneralEngageManeuverChanceSlideTurn);
                hash.Add(this.SpaceGeneralEngageManeuverChanceBarrelRoll);
                hash.Add(this.SpaceGeneralEvadeManeuverChanceBreak);
                hash.Add(this.SpaceGeneralEvadeManeuverChanceScissors);
                hash.Add(this.SpaceGeneralEvadeManeuverChanceCut);
                hash.Add(this.SpaceGeneralEvadeManeuverChanceBoost);
                hash.Add(this.SpaceGeneralAcquireManeuverChanceSliceback);
                hash.Add(this.SpaceGeneralAcquireManeuverChanceStrafeTurn);
                hash.Add(this.SpaceGeneralAcquireManeuverChanceAcquire);
                hash.Add(this.SpaceGeneralAcquireManeuverChanceTurn);
                hash.Add(this.SpaceGeneralDisengageManeuverChance);
                hash.Add(this.SpaceGeneralMissileSeekingStrength);
                hash.Add(this.SpaceGeneralMinTimeBetweenBoosts);
                hash.Add(this.SpaceGeneralCombatStrafing);
                hash.Add(this.SpaceGeneralRollsDuringBoost);
                hash.Add(this.UnknownCSSG);
                hash.Add(this.SpaceGeneralPowerWeighting);
                hash.Add(this.SpaceManeuverTypesMaxTime);
                hash.Add(this.SpaceManeuverTypesReentryDelays);
                hash.Add(this.SpaceRepairDamageThreshold);
                hash.Add(this.SpaceRepairFarawayDistance);
                hash.Add(this.SpaceRepairPowerToUse);
                hash.Add(this.SpaceRepairInClosePowerWeightingTables);
                hash.Add(this.SpaceRepairFarawayPowerWeightingTables);
                hash.Add(this.SpaceApproachingMinDistance);
                hash.Add(this.SpaceApproachingWeighting);
                hash.Add(this.SpaceDetectionRating1);
                hash.Add(this.SpaceDetectionRating2);
                hash.Add(this.SpaceDetectionRating3);
                hash.Add(this.Flags);
                hash.Add(this.FNAM);
                hash.Add(this.TemplateDefaultCombatStyle);
                hash.Add(this.Templates);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.OffensiveMult)) return false;
                if (!eval(this.DefensiveMult)) return false;
                if (!eval(this.GroupOffensiveMult)) return false;
                if (!eval(this.EquipmentScoreMultMelee)) return false;
                if (!eval(this.EquipmentScoreMultMagic)) return false;
                if (!eval(this.EquipmentScoreMultRanged)) return false;
                if (!eval(this.EquipmentScoreMultShout)) return false;
                if (!eval(this.EquipmentScoreMultUnarmed)) return false;
                if (!eval(this.EquipmentScoreMultStaff)) return false;
                if (!eval(this.AvoidThreatChance)) return false;
                if (!eval(this.DodgeThreadChance)) return false;
                if (!eval(this.EvadeThreatChance)) return false;
                if (!eval(this.HealAllyDistance)) return false;
                if (!eval(this.JumpCostMult)) return false;
                if (!eval(this.TauntDelayMult)) return false;
                if (!eval(this.MeleeAttackStaggeredMult)) return false;
                if (!eval(this.MeleePowerAttackStaggeredMult)) return false;
                if (!eval(this.MeleePowerAttackBlockingMult)) return false;
                if (!eval(this.MeleeBashMult)) return false;
                if (!eval(this.MeleeBashRecoilMult)) return false;
                if (!eval(this.MeleeBashAttackMult)) return false;
                if (!eval(this.MeleeBashPowerAttackMult)) return false;
                if (!eval(this.MeleeSpecialAttackMult)) return false;
                if (!eval(this.MeleeBlockWhenStaggeredMult)) return false;
                if (!eval(this.MeleeAttackWhenStaggeredMult)) return false;
                if (!eval(this.RangedAccuracyMult)) return false;
                if (!eval(this.RangedThrowMult)) return false;
                if (!eval(this.RangedGrenadeAdvancedThrowingMult)) return false;
                if (!eval(this.RangedGrenadeFlashTargetMult)) return false;
                if (!eval(this.RangedGrenadeThrowAtGroupMult)) return false;
                if (!eval(this.RangedGrenadeCloseRangeAttackChanceMult)) return false;
                if (!eval(this.CloseRangeDuelingCircleMult)) return false;
                if (!eval(this.CloseRangeDuelingFallbackMult)) return false;
                if (!eval(this.CloseRangeFlankDistance)) return false;
                if (!eval(this.CloseRangeFlankingStalkTime)) return false;
                if (!eval(this.CloseRangeChargeDistance)) return false;
                if (!eval(this.CloseRangeChargingThrowProbability)) return false;
                if (!eval(this.CloseRangeChargingSprintFastProbability)) return false;
                if (!eval(this.CloseRangeChargingSideswipeProbability)) return false;
                if (!eval(this.CloseRangeChargingDisengageProbability)) return false;
                if (!eval(this.CloseRangeChargingThrowMaxTargets)) return false;
                if (!eval(this.CloseRangeFlankingVariance)) return false;
                if (!eval(this.CloseRangeRetreatChance)) return false;
                if (!eval(this.CloseRangeRetreatDistanceMult)) return false;
                if (!eval(this.LongRangeStrafeMult)) return false;
                if (!eval(this.LongRangeAdjustRangeMult)) return false;
                if (!eval(this.LongRangeCrouchMult)) return false;
                if (!eval(this.LongRangeWaitMult)) return false;
                if (!eval(this.LongRangeRangeMult)) return false;
                if (!eval(this.LongRangeProvideSuppressiveFireMult)) return false;
                if (!eval(this.LongRangeRetreatChance)) return false;
                if (!eval(this.LongRangeRetreatHideTimeMult)) return false;
                if (!eval(this.LongRangeRetreatDistanceMult)) return false;
                if (!eval(this.CoverSearchDistanceMult)) return false;
                if (!eval(this.CoverSearchSuppressionSensitivity)) return false;
                if (!eval(this.FlightHoverChance)) return false;
                if (!eval(this.FlightDiveBombChance)) return false;
                if (!eval(this.FlightGroundAttackChance)) return false;
                if (!eval(this.FlightHoverTime)) return false;
                if (!eval(this.FlightGroundAttackTime)) return false;
                if (!eval(this.FlightPerchAttackChance)) return false;
                if (!eval(this.FlightPerchAttackTime)) return false;
                if (!eval(this.FlightFlyingAttackChance)) return false;
                if (!eval(this.TunnelCostMult)) return false;
                if (!eval(this.TunnelChance)) return false;
                if (!eval(this.TunnelMaxDistance)) return false;
                if (!eval(this.TunnelSpeedMult)) return false;
                if (!eval(this.TunnelMinTime)) return false;
                if (!eval(this.TunnelMaxTime)) return false;
                if (!eval(this.TunnelMaximumTime)) return false;
                if (!eval(this.TunnelCooldown)) return false;
                if (!eval(this.SpaceGeneralPilotSkill)) return false;
                if (!eval(this.SpaceGeneralAccuracy)) return false;
                if (!eval(this.SpaceGeneralTargetShield)) return false;
                if (!eval(this.SpaceGeneralAdjustment)) return false;
                if (!eval(this.SpaceGeneralEngageManeuverChanceDirectAttack)) return false;
                if (!eval(this.SpaceGeneralEngageManeuverChancePass)) return false;
                if (!eval(this.SpaceGeneralEngageManeuverChanceLeadTurn)) return false;
                if (!eval(this.SpaceGeneralEngageManeuverChanceSlideTurn)) return false;
                if (!eval(this.SpaceGeneralEngageManeuverChanceBarrelRoll)) return false;
                if (!eval(this.SpaceGeneralEvadeManeuverChanceBreak)) return false;
                if (!eval(this.SpaceGeneralEvadeManeuverChanceScissors)) return false;
                if (!eval(this.SpaceGeneralEvadeManeuverChanceCut)) return false;
                if (!eval(this.SpaceGeneralEvadeManeuverChanceBoost)) return false;
                if (!eval(this.SpaceGeneralAcquireManeuverChanceSliceback)) return false;
                if (!eval(this.SpaceGeneralAcquireManeuverChanceStrafeTurn)) return false;
                if (!eval(this.SpaceGeneralAcquireManeuverChanceAcquire)) return false;
                if (!eval(this.SpaceGeneralAcquireManeuverChanceTurn)) return false;
                if (!eval(this.SpaceGeneralDisengageManeuverChance)) return false;
                if (!eval(this.SpaceGeneralMissileSeekingStrength)) return false;
                if (!eval(this.SpaceGeneralMinTimeBetweenBoosts)) return false;
                if (!eval(this.SpaceGeneralCombatStrafing)) return false;
                if (!eval(this.SpaceGeneralRollsDuringBoost)) return false;
                if (!eval(this.UnknownCSSG)) return false;
                if (SpaceGeneralPowerWeighting != null)
                {
                    if (!eval(this.SpaceGeneralPowerWeighting.Overall)) return false;
                    if (this.SpaceGeneralPowerWeighting.Specific != null && !this.SpaceGeneralPowerWeighting.Specific.All(eval)) return false;
                }
                if (SpaceManeuverTypesMaxTime != null)
                {
                    if (!eval(this.SpaceManeuverTypesMaxTime.Overall)) return false;
                    if (this.SpaceManeuverTypesMaxTime.Specific != null && !this.SpaceManeuverTypesMaxTime.Specific.All(eval)) return false;
                }
                if (SpaceManeuverTypesReentryDelays != null)
                {
                    if (!eval(this.SpaceManeuverTypesReentryDelays.Overall)) return false;
                    if (this.SpaceManeuverTypesReentryDelays.Specific != null && !this.SpaceManeuverTypesReentryDelays.Specific.All(eval)) return false;
                }
                if (!eval(this.SpaceRepairDamageThreshold)) return false;
                if (!eval(this.SpaceRepairFarawayDistance)) return false;
                if (!eval(this.SpaceRepairPowerToUse)) return false;
                if (SpaceRepairInClosePowerWeightingTables != null)
                {
                    if (!eval(this.SpaceRepairInClosePowerWeightingTables.Overall)) return false;
                    if (this.SpaceRepairInClosePowerWeightingTables.Specific != null && !this.SpaceRepairInClosePowerWeightingTables.Specific.All(eval)) return false;
                }
                if (SpaceRepairFarawayPowerWeightingTables != null)
                {
                    if (!eval(this.SpaceRepairFarawayPowerWeightingTables.Overall)) return false;
                    if (this.SpaceRepairFarawayPowerWeightingTables.Specific != null && !this.SpaceRepairFarawayPowerWeightingTables.Specific.All(eval)) return false;
                }
                if (!eval(this.SpaceApproachingMinDistance)) return false;
                if (SpaceApproachingWeighting != null)
                {
                    if (!eval(this.SpaceApproachingWeighting.Overall)) return false;
                    if (this.SpaceApproachingWeighting.Specific != null && !this.SpaceApproachingWeighting.Specific.All(eval)) return false;
                }
                if (!eval(this.SpaceDetectionRating1)) return false;
                if (!eval(this.SpaceDetectionRating2)) return false;
                if (!eval(this.SpaceDetectionRating3)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.TemplateDefaultCombatStyle)) return false;
                if (Templates != null)
                {
                    if (!eval(this.Templates.Overall)) return false;
                    if (this.Templates.Specific != null && !this.Templates.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.OffensiveMult)) return true;
                if (eval(this.DefensiveMult)) return true;
                if (eval(this.GroupOffensiveMult)) return true;
                if (eval(this.EquipmentScoreMultMelee)) return true;
                if (eval(this.EquipmentScoreMultMagic)) return true;
                if (eval(this.EquipmentScoreMultRanged)) return true;
                if (eval(this.EquipmentScoreMultShout)) return true;
                if (eval(this.EquipmentScoreMultUnarmed)) return true;
                if (eval(this.EquipmentScoreMultStaff)) return true;
                if (eval(this.AvoidThreatChance)) return true;
                if (eval(this.DodgeThreadChance)) return true;
                if (eval(this.EvadeThreatChance)) return true;
                if (eval(this.HealAllyDistance)) return true;
                if (eval(this.JumpCostMult)) return true;
                if (eval(this.TauntDelayMult)) return true;
                if (eval(this.MeleeAttackStaggeredMult)) return true;
                if (eval(this.MeleePowerAttackStaggeredMult)) return true;
                if (eval(this.MeleePowerAttackBlockingMult)) return true;
                if (eval(this.MeleeBashMult)) return true;
                if (eval(this.MeleeBashRecoilMult)) return true;
                if (eval(this.MeleeBashAttackMult)) return true;
                if (eval(this.MeleeBashPowerAttackMult)) return true;
                if (eval(this.MeleeSpecialAttackMult)) return true;
                if (eval(this.MeleeBlockWhenStaggeredMult)) return true;
                if (eval(this.MeleeAttackWhenStaggeredMult)) return true;
                if (eval(this.RangedAccuracyMult)) return true;
                if (eval(this.RangedThrowMult)) return true;
                if (eval(this.RangedGrenadeAdvancedThrowingMult)) return true;
                if (eval(this.RangedGrenadeFlashTargetMult)) return true;
                if (eval(this.RangedGrenadeThrowAtGroupMult)) return true;
                if (eval(this.RangedGrenadeCloseRangeAttackChanceMult)) return true;
                if (eval(this.CloseRangeDuelingCircleMult)) return true;
                if (eval(this.CloseRangeDuelingFallbackMult)) return true;
                if (eval(this.CloseRangeFlankDistance)) return true;
                if (eval(this.CloseRangeFlankingStalkTime)) return true;
                if (eval(this.CloseRangeChargeDistance)) return true;
                if (eval(this.CloseRangeChargingThrowProbability)) return true;
                if (eval(this.CloseRangeChargingSprintFastProbability)) return true;
                if (eval(this.CloseRangeChargingSideswipeProbability)) return true;
                if (eval(this.CloseRangeChargingDisengageProbability)) return true;
                if (eval(this.CloseRangeChargingThrowMaxTargets)) return true;
                if (eval(this.CloseRangeFlankingVariance)) return true;
                if (eval(this.CloseRangeRetreatChance)) return true;
                if (eval(this.CloseRangeRetreatDistanceMult)) return true;
                if (eval(this.LongRangeStrafeMult)) return true;
                if (eval(this.LongRangeAdjustRangeMult)) return true;
                if (eval(this.LongRangeCrouchMult)) return true;
                if (eval(this.LongRangeWaitMult)) return true;
                if (eval(this.LongRangeRangeMult)) return true;
                if (eval(this.LongRangeProvideSuppressiveFireMult)) return true;
                if (eval(this.LongRangeRetreatChance)) return true;
                if (eval(this.LongRangeRetreatHideTimeMult)) return true;
                if (eval(this.LongRangeRetreatDistanceMult)) return true;
                if (eval(this.CoverSearchDistanceMult)) return true;
                if (eval(this.CoverSearchSuppressionSensitivity)) return true;
                if (eval(this.FlightHoverChance)) return true;
                if (eval(this.FlightDiveBombChance)) return true;
                if (eval(this.FlightGroundAttackChance)) return true;
                if (eval(this.FlightHoverTime)) return true;
                if (eval(this.FlightGroundAttackTime)) return true;
                if (eval(this.FlightPerchAttackChance)) return true;
                if (eval(this.FlightPerchAttackTime)) return true;
                if (eval(this.FlightFlyingAttackChance)) return true;
                if (eval(this.TunnelCostMult)) return true;
                if (eval(this.TunnelChance)) return true;
                if (eval(this.TunnelMaxDistance)) return true;
                if (eval(this.TunnelSpeedMult)) return true;
                if (eval(this.TunnelMinTime)) return true;
                if (eval(this.TunnelMaxTime)) return true;
                if (eval(this.TunnelMaximumTime)) return true;
                if (eval(this.TunnelCooldown)) return true;
                if (eval(this.SpaceGeneralPilotSkill)) return true;
                if (eval(this.SpaceGeneralAccuracy)) return true;
                if (eval(this.SpaceGeneralTargetShield)) return true;
                if (eval(this.SpaceGeneralAdjustment)) return true;
                if (eval(this.SpaceGeneralEngageManeuverChanceDirectAttack)) return true;
                if (eval(this.SpaceGeneralEngageManeuverChancePass)) return true;
                if (eval(this.SpaceGeneralEngageManeuverChanceLeadTurn)) return true;
                if (eval(this.SpaceGeneralEngageManeuverChanceSlideTurn)) return true;
                if (eval(this.SpaceGeneralEngageManeuverChanceBarrelRoll)) return true;
                if (eval(this.SpaceGeneralEvadeManeuverChanceBreak)) return true;
                if (eval(this.SpaceGeneralEvadeManeuverChanceScissors)) return true;
                if (eval(this.SpaceGeneralEvadeManeuverChanceCut)) return true;
                if (eval(this.SpaceGeneralEvadeManeuverChanceBoost)) return true;
                if (eval(this.SpaceGeneralAcquireManeuverChanceSliceback)) return true;
                if (eval(this.SpaceGeneralAcquireManeuverChanceStrafeTurn)) return true;
                if (eval(this.SpaceGeneralAcquireManeuverChanceAcquire)) return true;
                if (eval(this.SpaceGeneralAcquireManeuverChanceTurn)) return true;
                if (eval(this.SpaceGeneralDisengageManeuverChance)) return true;
                if (eval(this.SpaceGeneralMissileSeekingStrength)) return true;
                if (eval(this.SpaceGeneralMinTimeBetweenBoosts)) return true;
                if (eval(this.SpaceGeneralCombatStrafing)) return true;
                if (eval(this.SpaceGeneralRollsDuringBoost)) return true;
                if (eval(this.UnknownCSSG)) return true;
                if (SpaceGeneralPowerWeighting != null)
                {
                    if (eval(this.SpaceGeneralPowerWeighting.Overall)) return true;
                    if (this.SpaceGeneralPowerWeighting.Specific != null && this.SpaceGeneralPowerWeighting.Specific.Any(eval)) return true;
                }
                if (SpaceManeuverTypesMaxTime != null)
                {
                    if (eval(this.SpaceManeuverTypesMaxTime.Overall)) return true;
                    if (this.SpaceManeuverTypesMaxTime.Specific != null && this.SpaceManeuverTypesMaxTime.Specific.Any(eval)) return true;
                }
                if (SpaceManeuverTypesReentryDelays != null)
                {
                    if (eval(this.SpaceManeuverTypesReentryDelays.Overall)) return true;
                    if (this.SpaceManeuverTypesReentryDelays.Specific != null && this.SpaceManeuverTypesReentryDelays.Specific.Any(eval)) return true;
                }
                if (eval(this.SpaceRepairDamageThreshold)) return true;
                if (eval(this.SpaceRepairFarawayDistance)) return true;
                if (eval(this.SpaceRepairPowerToUse)) return true;
                if (SpaceRepairInClosePowerWeightingTables != null)
                {
                    if (eval(this.SpaceRepairInClosePowerWeightingTables.Overall)) return true;
                    if (this.SpaceRepairInClosePowerWeightingTables.Specific != null && this.SpaceRepairInClosePowerWeightingTables.Specific.Any(eval)) return true;
                }
                if (SpaceRepairFarawayPowerWeightingTables != null)
                {
                    if (eval(this.SpaceRepairFarawayPowerWeightingTables.Overall)) return true;
                    if (this.SpaceRepairFarawayPowerWeightingTables.Specific != null && this.SpaceRepairFarawayPowerWeightingTables.Specific.Any(eval)) return true;
                }
                if (eval(this.SpaceApproachingMinDistance)) return true;
                if (SpaceApproachingWeighting != null)
                {
                    if (eval(this.SpaceApproachingWeighting.Overall)) return true;
                    if (this.SpaceApproachingWeighting.Specific != null && this.SpaceApproachingWeighting.Specific.Any(eval)) return true;
                }
                if (eval(this.SpaceDetectionRating1)) return true;
                if (eval(this.SpaceDetectionRating2)) return true;
                if (eval(this.SpaceDetectionRating3)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.TemplateDefaultCombatStyle)) return true;
                if (Templates != null)
                {
                    if (eval(this.Templates.Overall)) return true;
                    if (this.Templates.Specific != null && this.Templates.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyle.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.OffensiveMult = eval(this.OffensiveMult);
                obj.DefensiveMult = eval(this.DefensiveMult);
                obj.GroupOffensiveMult = eval(this.GroupOffensiveMult);
                obj.EquipmentScoreMultMelee = eval(this.EquipmentScoreMultMelee);
                obj.EquipmentScoreMultMagic = eval(this.EquipmentScoreMultMagic);
                obj.EquipmentScoreMultRanged = eval(this.EquipmentScoreMultRanged);
                obj.EquipmentScoreMultShout = eval(this.EquipmentScoreMultShout);
                obj.EquipmentScoreMultUnarmed = eval(this.EquipmentScoreMultUnarmed);
                obj.EquipmentScoreMultStaff = eval(this.EquipmentScoreMultStaff);
                obj.AvoidThreatChance = eval(this.AvoidThreatChance);
                obj.DodgeThreadChance = eval(this.DodgeThreadChance);
                obj.EvadeThreatChance = eval(this.EvadeThreatChance);
                obj.HealAllyDistance = eval(this.HealAllyDistance);
                obj.JumpCostMult = eval(this.JumpCostMult);
                obj.TauntDelayMult = eval(this.TauntDelayMult);
                obj.MeleeAttackStaggeredMult = eval(this.MeleeAttackStaggeredMult);
                obj.MeleePowerAttackStaggeredMult = eval(this.MeleePowerAttackStaggeredMult);
                obj.MeleePowerAttackBlockingMult = eval(this.MeleePowerAttackBlockingMult);
                obj.MeleeBashMult = eval(this.MeleeBashMult);
                obj.MeleeBashRecoilMult = eval(this.MeleeBashRecoilMult);
                obj.MeleeBashAttackMult = eval(this.MeleeBashAttackMult);
                obj.MeleeBashPowerAttackMult = eval(this.MeleeBashPowerAttackMult);
                obj.MeleeSpecialAttackMult = eval(this.MeleeSpecialAttackMult);
                obj.MeleeBlockWhenStaggeredMult = eval(this.MeleeBlockWhenStaggeredMult);
                obj.MeleeAttackWhenStaggeredMult = eval(this.MeleeAttackWhenStaggeredMult);
                obj.RangedAccuracyMult = eval(this.RangedAccuracyMult);
                obj.RangedThrowMult = eval(this.RangedThrowMult);
                obj.RangedGrenadeAdvancedThrowingMult = eval(this.RangedGrenadeAdvancedThrowingMult);
                obj.RangedGrenadeFlashTargetMult = eval(this.RangedGrenadeFlashTargetMult);
                obj.RangedGrenadeThrowAtGroupMult = eval(this.RangedGrenadeThrowAtGroupMult);
                obj.RangedGrenadeCloseRangeAttackChanceMult = eval(this.RangedGrenadeCloseRangeAttackChanceMult);
                obj.CloseRangeDuelingCircleMult = eval(this.CloseRangeDuelingCircleMult);
                obj.CloseRangeDuelingFallbackMult = eval(this.CloseRangeDuelingFallbackMult);
                obj.CloseRangeFlankDistance = eval(this.CloseRangeFlankDistance);
                obj.CloseRangeFlankingStalkTime = eval(this.CloseRangeFlankingStalkTime);
                obj.CloseRangeChargeDistance = eval(this.CloseRangeChargeDistance);
                obj.CloseRangeChargingThrowProbability = eval(this.CloseRangeChargingThrowProbability);
                obj.CloseRangeChargingSprintFastProbability = eval(this.CloseRangeChargingSprintFastProbability);
                obj.CloseRangeChargingSideswipeProbability = eval(this.CloseRangeChargingSideswipeProbability);
                obj.CloseRangeChargingDisengageProbability = eval(this.CloseRangeChargingDisengageProbability);
                obj.CloseRangeChargingThrowMaxTargets = eval(this.CloseRangeChargingThrowMaxTargets);
                obj.CloseRangeFlankingVariance = eval(this.CloseRangeFlankingVariance);
                obj.CloseRangeRetreatChance = eval(this.CloseRangeRetreatChance);
                obj.CloseRangeRetreatDistanceMult = eval(this.CloseRangeRetreatDistanceMult);
                obj.LongRangeStrafeMult = eval(this.LongRangeStrafeMult);
                obj.LongRangeAdjustRangeMult = eval(this.LongRangeAdjustRangeMult);
                obj.LongRangeCrouchMult = eval(this.LongRangeCrouchMult);
                obj.LongRangeWaitMult = eval(this.LongRangeWaitMult);
                obj.LongRangeRangeMult = eval(this.LongRangeRangeMult);
                obj.LongRangeProvideSuppressiveFireMult = eval(this.LongRangeProvideSuppressiveFireMult);
                obj.LongRangeRetreatChance = eval(this.LongRangeRetreatChance);
                obj.LongRangeRetreatHideTimeMult = eval(this.LongRangeRetreatHideTimeMult);
                obj.LongRangeRetreatDistanceMult = eval(this.LongRangeRetreatDistanceMult);
                obj.CoverSearchDistanceMult = eval(this.CoverSearchDistanceMult);
                obj.CoverSearchSuppressionSensitivity = eval(this.CoverSearchSuppressionSensitivity);
                obj.FlightHoverChance = eval(this.FlightHoverChance);
                obj.FlightDiveBombChance = eval(this.FlightDiveBombChance);
                obj.FlightGroundAttackChance = eval(this.FlightGroundAttackChance);
                obj.FlightHoverTime = eval(this.FlightHoverTime);
                obj.FlightGroundAttackTime = eval(this.FlightGroundAttackTime);
                obj.FlightPerchAttackChance = eval(this.FlightPerchAttackChance);
                obj.FlightPerchAttackTime = eval(this.FlightPerchAttackTime);
                obj.FlightFlyingAttackChance = eval(this.FlightFlyingAttackChance);
                obj.TunnelCostMult = eval(this.TunnelCostMult);
                obj.TunnelChance = eval(this.TunnelChance);
                obj.TunnelMaxDistance = eval(this.TunnelMaxDistance);
                obj.TunnelSpeedMult = eval(this.TunnelSpeedMult);
                obj.TunnelMinTime = eval(this.TunnelMinTime);
                obj.TunnelMaxTime = eval(this.TunnelMaxTime);
                obj.TunnelMaximumTime = eval(this.TunnelMaximumTime);
                obj.TunnelCooldown = eval(this.TunnelCooldown);
                obj.SpaceGeneralPilotSkill = eval(this.SpaceGeneralPilotSkill);
                obj.SpaceGeneralAccuracy = eval(this.SpaceGeneralAccuracy);
                obj.SpaceGeneralTargetShield = eval(this.SpaceGeneralTargetShield);
                obj.SpaceGeneralAdjustment = eval(this.SpaceGeneralAdjustment);
                obj.SpaceGeneralEngageManeuverChanceDirectAttack = eval(this.SpaceGeneralEngageManeuverChanceDirectAttack);
                obj.SpaceGeneralEngageManeuverChancePass = eval(this.SpaceGeneralEngageManeuverChancePass);
                obj.SpaceGeneralEngageManeuverChanceLeadTurn = eval(this.SpaceGeneralEngageManeuverChanceLeadTurn);
                obj.SpaceGeneralEngageManeuverChanceSlideTurn = eval(this.SpaceGeneralEngageManeuverChanceSlideTurn);
                obj.SpaceGeneralEngageManeuverChanceBarrelRoll = eval(this.SpaceGeneralEngageManeuverChanceBarrelRoll);
                obj.SpaceGeneralEvadeManeuverChanceBreak = eval(this.SpaceGeneralEvadeManeuverChanceBreak);
                obj.SpaceGeneralEvadeManeuverChanceScissors = eval(this.SpaceGeneralEvadeManeuverChanceScissors);
                obj.SpaceGeneralEvadeManeuverChanceCut = eval(this.SpaceGeneralEvadeManeuverChanceCut);
                obj.SpaceGeneralEvadeManeuverChanceBoost = eval(this.SpaceGeneralEvadeManeuverChanceBoost);
                obj.SpaceGeneralAcquireManeuverChanceSliceback = eval(this.SpaceGeneralAcquireManeuverChanceSliceback);
                obj.SpaceGeneralAcquireManeuverChanceStrafeTurn = eval(this.SpaceGeneralAcquireManeuverChanceStrafeTurn);
                obj.SpaceGeneralAcquireManeuverChanceAcquire = eval(this.SpaceGeneralAcquireManeuverChanceAcquire);
                obj.SpaceGeneralAcquireManeuverChanceTurn = eval(this.SpaceGeneralAcquireManeuverChanceTurn);
                obj.SpaceGeneralDisengageManeuverChance = eval(this.SpaceGeneralDisengageManeuverChance);
                obj.SpaceGeneralMissileSeekingStrength = eval(this.SpaceGeneralMissileSeekingStrength);
                obj.SpaceGeneralMinTimeBetweenBoosts = eval(this.SpaceGeneralMinTimeBetweenBoosts);
                obj.SpaceGeneralCombatStrafing = eval(this.SpaceGeneralCombatStrafing);
                obj.SpaceGeneralRollsDuringBoost = eval(this.SpaceGeneralRollsDuringBoost);
                obj.UnknownCSSG = eval(this.UnknownCSSG);
                obj.SpaceGeneralPowerWeighting = this.SpaceGeneralPowerWeighting == null ? null : new MaskItem<R, CombatStylePowerWeighting.Mask<R>?>(eval(this.SpaceGeneralPowerWeighting.Overall), this.SpaceGeneralPowerWeighting.Specific?.Translate(eval));
                obj.SpaceManeuverTypesMaxTime = this.SpaceManeuverTypesMaxTime == null ? null : new MaskItem<R, CombatStyleManeuverTiming.Mask<R>?>(eval(this.SpaceManeuverTypesMaxTime.Overall), this.SpaceManeuverTypesMaxTime.Specific?.Translate(eval));
                obj.SpaceManeuverTypesReentryDelays = this.SpaceManeuverTypesReentryDelays == null ? null : new MaskItem<R, CombatStyleManeuverTiming.Mask<R>?>(eval(this.SpaceManeuverTypesReentryDelays.Overall), this.SpaceManeuverTypesReentryDelays.Specific?.Translate(eval));
                obj.SpaceRepairDamageThreshold = eval(this.SpaceRepairDamageThreshold);
                obj.SpaceRepairFarawayDistance = eval(this.SpaceRepairFarawayDistance);
                obj.SpaceRepairPowerToUse = eval(this.SpaceRepairPowerToUse);
                obj.SpaceRepairInClosePowerWeightingTables = this.SpaceRepairInClosePowerWeightingTables == null ? null : new MaskItem<R, CombatStylePowerWeighting.Mask<R>?>(eval(this.SpaceRepairInClosePowerWeightingTables.Overall), this.SpaceRepairInClosePowerWeightingTables.Specific?.Translate(eval));
                obj.SpaceRepairFarawayPowerWeightingTables = this.SpaceRepairFarawayPowerWeightingTables == null ? null : new MaskItem<R, CombatStylePowerWeighting.Mask<R>?>(eval(this.SpaceRepairFarawayPowerWeightingTables.Overall), this.SpaceRepairFarawayPowerWeightingTables.Specific?.Translate(eval));
                obj.SpaceApproachingMinDistance = eval(this.SpaceApproachingMinDistance);
                obj.SpaceApproachingWeighting = this.SpaceApproachingWeighting == null ? null : new MaskItem<R, CombatStylePowerWeighting.Mask<R>?>(eval(this.SpaceApproachingWeighting.Overall), this.SpaceApproachingWeighting.Specific?.Translate(eval));
                obj.SpaceDetectionRating1 = eval(this.SpaceDetectionRating1);
                obj.SpaceDetectionRating2 = eval(this.SpaceDetectionRating2);
                obj.SpaceDetectionRating3 = eval(this.SpaceDetectionRating3);
                obj.Flags = eval(this.Flags);
                obj.FNAM = eval(this.FNAM);
                obj.TemplateDefaultCombatStyle = eval(this.TemplateDefaultCombatStyle);
                obj.Templates = this.Templates == null ? null : new MaskItem<R, CombatStyleTemplates.Mask<R>?>(eval(this.Templates.Overall), this.Templates.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CombatStyle.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CombatStyle.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CombatStyle.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.OffensiveMult ?? true)
                    {
                        sb.AppendItem(OffensiveMult, "OffensiveMult");
                    }
                    if (printMask?.DefensiveMult ?? true)
                    {
                        sb.AppendItem(DefensiveMult, "DefensiveMult");
                    }
                    if (printMask?.GroupOffensiveMult ?? true)
                    {
                        sb.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                    }
                    if (printMask?.EquipmentScoreMultMelee ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                    }
                    if (printMask?.EquipmentScoreMultMagic ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                    }
                    if (printMask?.EquipmentScoreMultRanged ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                    }
                    if (printMask?.EquipmentScoreMultShout ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                    }
                    if (printMask?.EquipmentScoreMultUnarmed ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                    }
                    if (printMask?.EquipmentScoreMultStaff ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                    }
                    if (printMask?.AvoidThreatChance ?? true)
                    {
                        sb.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                    }
                    if (printMask?.DodgeThreadChance ?? true)
                    {
                        sb.AppendItem(DodgeThreadChance, "DodgeThreadChance");
                    }
                    if (printMask?.EvadeThreatChance ?? true)
                    {
                        sb.AppendItem(EvadeThreatChance, "EvadeThreatChance");
                    }
                    if (printMask?.HealAllyDistance ?? true)
                    {
                        sb.AppendItem(HealAllyDistance, "HealAllyDistance");
                    }
                    if (printMask?.JumpCostMult ?? true)
                    {
                        sb.AppendItem(JumpCostMult, "JumpCostMult");
                    }
                    if (printMask?.TauntDelayMult ?? true)
                    {
                        sb.AppendItem(TauntDelayMult, "TauntDelayMult");
                    }
                    if (printMask?.MeleeAttackStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
                    }
                    if (printMask?.MeleePowerAttackStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
                    }
                    if (printMask?.MeleePowerAttackBlockingMult ?? true)
                    {
                        sb.AppendItem(MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
                    }
                    if (printMask?.MeleeBashMult ?? true)
                    {
                        sb.AppendItem(MeleeBashMult, "MeleeBashMult");
                    }
                    if (printMask?.MeleeBashRecoilMult ?? true)
                    {
                        sb.AppendItem(MeleeBashRecoilMult, "MeleeBashRecoilMult");
                    }
                    if (printMask?.MeleeBashAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeBashAttackMult, "MeleeBashAttackMult");
                    }
                    if (printMask?.MeleeBashPowerAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
                    }
                    if (printMask?.MeleeSpecialAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
                    }
                    if (printMask?.MeleeBlockWhenStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
                    }
                    if (printMask?.MeleeAttackWhenStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
                    }
                    if (printMask?.RangedAccuracyMult ?? true)
                    {
                        sb.AppendItem(RangedAccuracyMult, "RangedAccuracyMult");
                    }
                    if (printMask?.RangedThrowMult ?? true)
                    {
                        sb.AppendItem(RangedThrowMult, "RangedThrowMult");
                    }
                    if (printMask?.RangedGrenadeAdvancedThrowingMult ?? true)
                    {
                        sb.AppendItem(RangedGrenadeAdvancedThrowingMult, "RangedGrenadeAdvancedThrowingMult");
                    }
                    if (printMask?.RangedGrenadeFlashTargetMult ?? true)
                    {
                        sb.AppendItem(RangedGrenadeFlashTargetMult, "RangedGrenadeFlashTargetMult");
                    }
                    if (printMask?.RangedGrenadeThrowAtGroupMult ?? true)
                    {
                        sb.AppendItem(RangedGrenadeThrowAtGroupMult, "RangedGrenadeThrowAtGroupMult");
                    }
                    if (printMask?.RangedGrenadeCloseRangeAttackChanceMult ?? true)
                    {
                        sb.AppendItem(RangedGrenadeCloseRangeAttackChanceMult, "RangedGrenadeCloseRangeAttackChanceMult");
                    }
                    if (printMask?.CloseRangeDuelingCircleMult ?? true)
                    {
                        sb.AppendItem(CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
                    }
                    if (printMask?.CloseRangeDuelingFallbackMult ?? true)
                    {
                        sb.AppendItem(CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
                    }
                    if (printMask?.CloseRangeFlankDistance ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankDistance, "CloseRangeFlankDistance");
                    }
                    if (printMask?.CloseRangeFlankingStalkTime ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
                    }
                    if (printMask?.CloseRangeChargeDistance ?? true)
                    {
                        sb.AppendItem(CloseRangeChargeDistance, "CloseRangeChargeDistance");
                    }
                    if (printMask?.CloseRangeChargingThrowProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
                    }
                    if (printMask?.CloseRangeChargingSprintFastProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
                    }
                    if (printMask?.CloseRangeChargingSideswipeProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
                    }
                    if (printMask?.CloseRangeChargingDisengageProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
                    }
                    if (printMask?.CloseRangeChargingThrowMaxTargets ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
                    }
                    if (printMask?.CloseRangeFlankingVariance ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
                    }
                    if (printMask?.CloseRangeRetreatChance ?? true)
                    {
                        sb.AppendItem(CloseRangeRetreatChance, "CloseRangeRetreatChance");
                    }
                    if (printMask?.CloseRangeRetreatDistanceMult ?? true)
                    {
                        sb.AppendItem(CloseRangeRetreatDistanceMult, "CloseRangeRetreatDistanceMult");
                    }
                    if (printMask?.LongRangeStrafeMult ?? true)
                    {
                        sb.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                    }
                    if (printMask?.LongRangeAdjustRangeMult ?? true)
                    {
                        sb.AppendItem(LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
                    }
                    if (printMask?.LongRangeCrouchMult ?? true)
                    {
                        sb.AppendItem(LongRangeCrouchMult, "LongRangeCrouchMult");
                    }
                    if (printMask?.LongRangeWaitMult ?? true)
                    {
                        sb.AppendItem(LongRangeWaitMult, "LongRangeWaitMult");
                    }
                    if (printMask?.LongRangeRangeMult ?? true)
                    {
                        sb.AppendItem(LongRangeRangeMult, "LongRangeRangeMult");
                    }
                    if (printMask?.LongRangeProvideSuppressiveFireMult ?? true)
                    {
                        sb.AppendItem(LongRangeProvideSuppressiveFireMult, "LongRangeProvideSuppressiveFireMult");
                    }
                    if (printMask?.LongRangeRetreatChance ?? true)
                    {
                        sb.AppendItem(LongRangeRetreatChance, "LongRangeRetreatChance");
                    }
                    if (printMask?.LongRangeRetreatHideTimeMult ?? true)
                    {
                        sb.AppendItem(LongRangeRetreatHideTimeMult, "LongRangeRetreatHideTimeMult");
                    }
                    if (printMask?.LongRangeRetreatDistanceMult ?? true)
                    {
                        sb.AppendItem(LongRangeRetreatDistanceMult, "LongRangeRetreatDistanceMult");
                    }
                    if (printMask?.CoverSearchDistanceMult ?? true)
                    {
                        sb.AppendItem(CoverSearchDistanceMult, "CoverSearchDistanceMult");
                    }
                    if (printMask?.CoverSearchSuppressionSensitivity ?? true)
                    {
                        sb.AppendItem(CoverSearchSuppressionSensitivity, "CoverSearchSuppressionSensitivity");
                    }
                    if (printMask?.FlightHoverChance ?? true)
                    {
                        sb.AppendItem(FlightHoverChance, "FlightHoverChance");
                    }
                    if (printMask?.FlightDiveBombChance ?? true)
                    {
                        sb.AppendItem(FlightDiveBombChance, "FlightDiveBombChance");
                    }
                    if (printMask?.FlightGroundAttackChance ?? true)
                    {
                        sb.AppendItem(FlightGroundAttackChance, "FlightGroundAttackChance");
                    }
                    if (printMask?.FlightHoverTime ?? true)
                    {
                        sb.AppendItem(FlightHoverTime, "FlightHoverTime");
                    }
                    if (printMask?.FlightGroundAttackTime ?? true)
                    {
                        sb.AppendItem(FlightGroundAttackTime, "FlightGroundAttackTime");
                    }
                    if (printMask?.FlightPerchAttackChance ?? true)
                    {
                        sb.AppendItem(FlightPerchAttackChance, "FlightPerchAttackChance");
                    }
                    if (printMask?.FlightPerchAttackTime ?? true)
                    {
                        sb.AppendItem(FlightPerchAttackTime, "FlightPerchAttackTime");
                    }
                    if (printMask?.FlightFlyingAttackChance ?? true)
                    {
                        sb.AppendItem(FlightFlyingAttackChance, "FlightFlyingAttackChance");
                    }
                    if (printMask?.TunnelCostMult ?? true)
                    {
                        sb.AppendItem(TunnelCostMult, "TunnelCostMult");
                    }
                    if (printMask?.TunnelChance ?? true)
                    {
                        sb.AppendItem(TunnelChance, "TunnelChance");
                    }
                    if (printMask?.TunnelMaxDistance ?? true)
                    {
                        sb.AppendItem(TunnelMaxDistance, "TunnelMaxDistance");
                    }
                    if (printMask?.TunnelSpeedMult ?? true)
                    {
                        sb.AppendItem(TunnelSpeedMult, "TunnelSpeedMult");
                    }
                    if (printMask?.TunnelMinTime ?? true)
                    {
                        sb.AppendItem(TunnelMinTime, "TunnelMinTime");
                    }
                    if (printMask?.TunnelMaxTime ?? true)
                    {
                        sb.AppendItem(TunnelMaxTime, "TunnelMaxTime");
                    }
                    if (printMask?.TunnelMaximumTime ?? true)
                    {
                        sb.AppendItem(TunnelMaximumTime, "TunnelMaximumTime");
                    }
                    if (printMask?.TunnelCooldown ?? true)
                    {
                        sb.AppendItem(TunnelCooldown, "TunnelCooldown");
                    }
                    if (printMask?.SpaceGeneralPilotSkill ?? true)
                    {
                        sb.AppendItem(SpaceGeneralPilotSkill, "SpaceGeneralPilotSkill");
                    }
                    if (printMask?.SpaceGeneralAccuracy ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAccuracy, "SpaceGeneralAccuracy");
                    }
                    if (printMask?.SpaceGeneralTargetShield ?? true)
                    {
                        sb.AppendItem(SpaceGeneralTargetShield, "SpaceGeneralTargetShield");
                    }
                    if (printMask?.SpaceGeneralAdjustment ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAdjustment, "SpaceGeneralAdjustment");
                    }
                    if (printMask?.SpaceGeneralEngageManeuverChanceDirectAttack ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEngageManeuverChanceDirectAttack, "SpaceGeneralEngageManeuverChanceDirectAttack");
                    }
                    if (printMask?.SpaceGeneralEngageManeuverChancePass ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEngageManeuverChancePass, "SpaceGeneralEngageManeuverChancePass");
                    }
                    if (printMask?.SpaceGeneralEngageManeuverChanceLeadTurn ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEngageManeuverChanceLeadTurn, "SpaceGeneralEngageManeuverChanceLeadTurn");
                    }
                    if (printMask?.SpaceGeneralEngageManeuverChanceSlideTurn ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEngageManeuverChanceSlideTurn, "SpaceGeneralEngageManeuverChanceSlideTurn");
                    }
                    if (printMask?.SpaceGeneralEngageManeuverChanceBarrelRoll ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEngageManeuverChanceBarrelRoll, "SpaceGeneralEngageManeuverChanceBarrelRoll");
                    }
                    if (printMask?.SpaceGeneralEvadeManeuverChanceBreak ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEvadeManeuverChanceBreak, "SpaceGeneralEvadeManeuverChanceBreak");
                    }
                    if (printMask?.SpaceGeneralEvadeManeuverChanceScissors ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEvadeManeuverChanceScissors, "SpaceGeneralEvadeManeuverChanceScissors");
                    }
                    if (printMask?.SpaceGeneralEvadeManeuverChanceCut ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEvadeManeuverChanceCut, "SpaceGeneralEvadeManeuverChanceCut");
                    }
                    if (printMask?.SpaceGeneralEvadeManeuverChanceBoost ?? true)
                    {
                        sb.AppendItem(SpaceGeneralEvadeManeuverChanceBoost, "SpaceGeneralEvadeManeuverChanceBoost");
                    }
                    if (printMask?.SpaceGeneralAcquireManeuverChanceSliceback ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAcquireManeuverChanceSliceback, "SpaceGeneralAcquireManeuverChanceSliceback");
                    }
                    if (printMask?.SpaceGeneralAcquireManeuverChanceStrafeTurn ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAcquireManeuverChanceStrafeTurn, "SpaceGeneralAcquireManeuverChanceStrafeTurn");
                    }
                    if (printMask?.SpaceGeneralAcquireManeuverChanceAcquire ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAcquireManeuverChanceAcquire, "SpaceGeneralAcquireManeuverChanceAcquire");
                    }
                    if (printMask?.SpaceGeneralAcquireManeuverChanceTurn ?? true)
                    {
                        sb.AppendItem(SpaceGeneralAcquireManeuverChanceTurn, "SpaceGeneralAcquireManeuverChanceTurn");
                    }
                    if (printMask?.SpaceGeneralDisengageManeuverChance ?? true)
                    {
                        sb.AppendItem(SpaceGeneralDisengageManeuverChance, "SpaceGeneralDisengageManeuverChance");
                    }
                    if (printMask?.SpaceGeneralMissileSeekingStrength ?? true)
                    {
                        sb.AppendItem(SpaceGeneralMissileSeekingStrength, "SpaceGeneralMissileSeekingStrength");
                    }
                    if (printMask?.SpaceGeneralMinTimeBetweenBoosts ?? true)
                    {
                        sb.AppendItem(SpaceGeneralMinTimeBetweenBoosts, "SpaceGeneralMinTimeBetweenBoosts");
                    }
                    if (printMask?.SpaceGeneralCombatStrafing ?? true)
                    {
                        sb.AppendItem(SpaceGeneralCombatStrafing, "SpaceGeneralCombatStrafing");
                    }
                    if (printMask?.SpaceGeneralRollsDuringBoost ?? true)
                    {
                        sb.AppendItem(SpaceGeneralRollsDuringBoost, "SpaceGeneralRollsDuringBoost");
                    }
                    if (printMask?.UnknownCSSG ?? true)
                    {
                        sb.AppendItem(UnknownCSSG, "UnknownCSSG");
                    }
                    if (printMask?.SpaceGeneralPowerWeighting?.Overall ?? true)
                    {
                        SpaceGeneralPowerWeighting?.Print(sb);
                    }
                    if (printMask?.SpaceManeuverTypesMaxTime?.Overall ?? true)
                    {
                        SpaceManeuverTypesMaxTime?.Print(sb);
                    }
                    if (printMask?.SpaceManeuverTypesReentryDelays?.Overall ?? true)
                    {
                        SpaceManeuverTypesReentryDelays?.Print(sb);
                    }
                    if (printMask?.SpaceRepairDamageThreshold ?? true)
                    {
                        sb.AppendItem(SpaceRepairDamageThreshold, "SpaceRepairDamageThreshold");
                    }
                    if (printMask?.SpaceRepairFarawayDistance ?? true)
                    {
                        sb.AppendItem(SpaceRepairFarawayDistance, "SpaceRepairFarawayDistance");
                    }
                    if (printMask?.SpaceRepairPowerToUse ?? true)
                    {
                        sb.AppendItem(SpaceRepairPowerToUse, "SpaceRepairPowerToUse");
                    }
                    if (printMask?.SpaceRepairInClosePowerWeightingTables?.Overall ?? true)
                    {
                        SpaceRepairInClosePowerWeightingTables?.Print(sb);
                    }
                    if (printMask?.SpaceRepairFarawayPowerWeightingTables?.Overall ?? true)
                    {
                        SpaceRepairFarawayPowerWeightingTables?.Print(sb);
                    }
                    if (printMask?.SpaceApproachingMinDistance ?? true)
                    {
                        sb.AppendItem(SpaceApproachingMinDistance, "SpaceApproachingMinDistance");
                    }
                    if (printMask?.SpaceApproachingWeighting?.Overall ?? true)
                    {
                        SpaceApproachingWeighting?.Print(sb);
                    }
                    if (printMask?.SpaceDetectionRating1 ?? true)
                    {
                        sb.AppendItem(SpaceDetectionRating1, "SpaceDetectionRating1");
                    }
                    if (printMask?.SpaceDetectionRating2 ?? true)
                    {
                        sb.AppendItem(SpaceDetectionRating2, "SpaceDetectionRating2");
                    }
                    if (printMask?.SpaceDetectionRating3 ?? true)
                    {
                        sb.AppendItem(SpaceDetectionRating3, "SpaceDetectionRating3");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.TemplateDefaultCombatStyle ?? true)
                    {
                        sb.AppendItem(TemplateDefaultCombatStyle, "TemplateDefaultCombatStyle");
                    }
                    if (printMask?.Templates?.Overall ?? true)
                    {
                        Templates?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? OffensiveMult;
            public Exception? DefensiveMult;
            public Exception? GroupOffensiveMult;
            public Exception? EquipmentScoreMultMelee;
            public Exception? EquipmentScoreMultMagic;
            public Exception? EquipmentScoreMultRanged;
            public Exception? EquipmentScoreMultShout;
            public Exception? EquipmentScoreMultUnarmed;
            public Exception? EquipmentScoreMultStaff;
            public Exception? AvoidThreatChance;
            public Exception? DodgeThreadChance;
            public Exception? EvadeThreatChance;
            public Exception? HealAllyDistance;
            public Exception? JumpCostMult;
            public Exception? TauntDelayMult;
            public Exception? MeleeAttackStaggeredMult;
            public Exception? MeleePowerAttackStaggeredMult;
            public Exception? MeleePowerAttackBlockingMult;
            public Exception? MeleeBashMult;
            public Exception? MeleeBashRecoilMult;
            public Exception? MeleeBashAttackMult;
            public Exception? MeleeBashPowerAttackMult;
            public Exception? MeleeSpecialAttackMult;
            public Exception? MeleeBlockWhenStaggeredMult;
            public Exception? MeleeAttackWhenStaggeredMult;
            public Exception? RangedAccuracyMult;
            public Exception? RangedThrowMult;
            public Exception? RangedGrenadeAdvancedThrowingMult;
            public Exception? RangedGrenadeFlashTargetMult;
            public Exception? RangedGrenadeThrowAtGroupMult;
            public Exception? RangedGrenadeCloseRangeAttackChanceMult;
            public Exception? CloseRangeDuelingCircleMult;
            public Exception? CloseRangeDuelingFallbackMult;
            public Exception? CloseRangeFlankDistance;
            public Exception? CloseRangeFlankingStalkTime;
            public Exception? CloseRangeChargeDistance;
            public Exception? CloseRangeChargingThrowProbability;
            public Exception? CloseRangeChargingSprintFastProbability;
            public Exception? CloseRangeChargingSideswipeProbability;
            public Exception? CloseRangeChargingDisengageProbability;
            public Exception? CloseRangeChargingThrowMaxTargets;
            public Exception? CloseRangeFlankingVariance;
            public Exception? CloseRangeRetreatChance;
            public Exception? CloseRangeRetreatDistanceMult;
            public Exception? LongRangeStrafeMult;
            public Exception? LongRangeAdjustRangeMult;
            public Exception? LongRangeCrouchMult;
            public Exception? LongRangeWaitMult;
            public Exception? LongRangeRangeMult;
            public Exception? LongRangeProvideSuppressiveFireMult;
            public Exception? LongRangeRetreatChance;
            public Exception? LongRangeRetreatHideTimeMult;
            public Exception? LongRangeRetreatDistanceMult;
            public Exception? CoverSearchDistanceMult;
            public Exception? CoverSearchSuppressionSensitivity;
            public Exception? FlightHoverChance;
            public Exception? FlightDiveBombChance;
            public Exception? FlightGroundAttackChance;
            public Exception? FlightHoverTime;
            public Exception? FlightGroundAttackTime;
            public Exception? FlightPerchAttackChance;
            public Exception? FlightPerchAttackTime;
            public Exception? FlightFlyingAttackChance;
            public Exception? TunnelCostMult;
            public Exception? TunnelChance;
            public Exception? TunnelMaxDistance;
            public Exception? TunnelSpeedMult;
            public Exception? TunnelMinTime;
            public Exception? TunnelMaxTime;
            public Exception? TunnelMaximumTime;
            public Exception? TunnelCooldown;
            public Exception? SpaceGeneralPilotSkill;
            public Exception? SpaceGeneralAccuracy;
            public Exception? SpaceGeneralTargetShield;
            public Exception? SpaceGeneralAdjustment;
            public Exception? SpaceGeneralEngageManeuverChanceDirectAttack;
            public Exception? SpaceGeneralEngageManeuverChancePass;
            public Exception? SpaceGeneralEngageManeuverChanceLeadTurn;
            public Exception? SpaceGeneralEngageManeuverChanceSlideTurn;
            public Exception? SpaceGeneralEngageManeuverChanceBarrelRoll;
            public Exception? SpaceGeneralEvadeManeuverChanceBreak;
            public Exception? SpaceGeneralEvadeManeuverChanceScissors;
            public Exception? SpaceGeneralEvadeManeuverChanceCut;
            public Exception? SpaceGeneralEvadeManeuverChanceBoost;
            public Exception? SpaceGeneralAcquireManeuverChanceSliceback;
            public Exception? SpaceGeneralAcquireManeuverChanceStrafeTurn;
            public Exception? SpaceGeneralAcquireManeuverChanceAcquire;
            public Exception? SpaceGeneralAcquireManeuverChanceTurn;
            public Exception? SpaceGeneralDisengageManeuverChance;
            public Exception? SpaceGeneralMissileSeekingStrength;
            public Exception? SpaceGeneralMinTimeBetweenBoosts;
            public Exception? SpaceGeneralCombatStrafing;
            public Exception? SpaceGeneralRollsDuringBoost;
            public Exception? UnknownCSSG;
            public MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>? SpaceGeneralPowerWeighting;
            public MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>? SpaceManeuverTypesMaxTime;
            public MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>? SpaceManeuverTypesReentryDelays;
            public Exception? SpaceRepairDamageThreshold;
            public Exception? SpaceRepairFarawayDistance;
            public Exception? SpaceRepairPowerToUse;
            public MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>? SpaceRepairInClosePowerWeightingTables;
            public MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>? SpaceRepairFarawayPowerWeightingTables;
            public Exception? SpaceApproachingMinDistance;
            public MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>? SpaceApproachingWeighting;
            public Exception? SpaceDetectionRating1;
            public Exception? SpaceDetectionRating2;
            public Exception? SpaceDetectionRating3;
            public Exception? Flags;
            public Exception? FNAM;
            public Exception? TemplateDefaultCombatStyle;
            public MaskItem<Exception?, CombatStyleTemplates.ErrorMask?>? Templates;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        return OffensiveMult;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        return DefensiveMult;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        return GroupOffensiveMult;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        return EquipmentScoreMultMelee;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        return EquipmentScoreMultMagic;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        return EquipmentScoreMultRanged;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        return EquipmentScoreMultShout;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        return EquipmentScoreMultUnarmed;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        return EquipmentScoreMultStaff;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        return AvoidThreatChance;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        return DodgeThreadChance;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        return EvadeThreatChance;
                    case CombatStyle_FieldIndex.HealAllyDistance:
                        return HealAllyDistance;
                    case CombatStyle_FieldIndex.JumpCostMult:
                        return JumpCostMult;
                    case CombatStyle_FieldIndex.TauntDelayMult:
                        return TauntDelayMult;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        return MeleeAttackStaggeredMult;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        return MeleePowerAttackStaggeredMult;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        return MeleePowerAttackBlockingMult;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        return MeleeBashMult;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        return MeleeBashRecoilMult;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        return MeleeBashAttackMult;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        return MeleeBashPowerAttackMult;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        return MeleeSpecialAttackMult;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        return MeleeBlockWhenStaggeredMult;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        return MeleeAttackWhenStaggeredMult;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        return RangedAccuracyMult;
                    case CombatStyle_FieldIndex.RangedThrowMult:
                        return RangedThrowMult;
                    case CombatStyle_FieldIndex.RangedGrenadeAdvancedThrowingMult:
                        return RangedGrenadeAdvancedThrowingMult;
                    case CombatStyle_FieldIndex.RangedGrenadeFlashTargetMult:
                        return RangedGrenadeFlashTargetMult;
                    case CombatStyle_FieldIndex.RangedGrenadeThrowAtGroupMult:
                        return RangedGrenadeThrowAtGroupMult;
                    case CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult:
                        return RangedGrenadeCloseRangeAttackChanceMult;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        return CloseRangeDuelingCircleMult;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        return CloseRangeDuelingFallbackMult;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        return CloseRangeFlankDistance;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        return CloseRangeFlankingStalkTime;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        return CloseRangeChargeDistance;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        return CloseRangeChargingThrowProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        return CloseRangeChargingSprintFastProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        return CloseRangeChargingSideswipeProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        return CloseRangeChargingDisengageProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        return CloseRangeChargingThrowMaxTargets;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        return CloseRangeFlankingVariance;
                    case CombatStyle_FieldIndex.CloseRangeRetreatChance:
                        return CloseRangeRetreatChance;
                    case CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult:
                        return CloseRangeRetreatDistanceMult;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        return LongRangeStrafeMult;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        return LongRangeAdjustRangeMult;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        return LongRangeCrouchMult;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        return LongRangeWaitMult;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        return LongRangeRangeMult;
                    case CombatStyle_FieldIndex.LongRangeProvideSuppressiveFireMult:
                        return LongRangeProvideSuppressiveFireMult;
                    case CombatStyle_FieldIndex.LongRangeRetreatChance:
                        return LongRangeRetreatChance;
                    case CombatStyle_FieldIndex.LongRangeRetreatHideTimeMult:
                        return LongRangeRetreatHideTimeMult;
                    case CombatStyle_FieldIndex.LongRangeRetreatDistanceMult:
                        return LongRangeRetreatDistanceMult;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        return CoverSearchDistanceMult;
                    case CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity:
                        return CoverSearchSuppressionSensitivity;
                    case CombatStyle_FieldIndex.FlightHoverChance:
                        return FlightHoverChance;
                    case CombatStyle_FieldIndex.FlightDiveBombChance:
                        return FlightDiveBombChance;
                    case CombatStyle_FieldIndex.FlightGroundAttackChance:
                        return FlightGroundAttackChance;
                    case CombatStyle_FieldIndex.FlightHoverTime:
                        return FlightHoverTime;
                    case CombatStyle_FieldIndex.FlightGroundAttackTime:
                        return FlightGroundAttackTime;
                    case CombatStyle_FieldIndex.FlightPerchAttackChance:
                        return FlightPerchAttackChance;
                    case CombatStyle_FieldIndex.FlightPerchAttackTime:
                        return FlightPerchAttackTime;
                    case CombatStyle_FieldIndex.FlightFlyingAttackChance:
                        return FlightFlyingAttackChance;
                    case CombatStyle_FieldIndex.TunnelCostMult:
                        return TunnelCostMult;
                    case CombatStyle_FieldIndex.TunnelChance:
                        return TunnelChance;
                    case CombatStyle_FieldIndex.TunnelMaxDistance:
                        return TunnelMaxDistance;
                    case CombatStyle_FieldIndex.TunnelSpeedMult:
                        return TunnelSpeedMult;
                    case CombatStyle_FieldIndex.TunnelMinTime:
                        return TunnelMinTime;
                    case CombatStyle_FieldIndex.TunnelMaxTime:
                        return TunnelMaxTime;
                    case CombatStyle_FieldIndex.TunnelMaximumTime:
                        return TunnelMaximumTime;
                    case CombatStyle_FieldIndex.TunnelCooldown:
                        return TunnelCooldown;
                    case CombatStyle_FieldIndex.SpaceGeneralPilotSkill:
                        return SpaceGeneralPilotSkill;
                    case CombatStyle_FieldIndex.SpaceGeneralAccuracy:
                        return SpaceGeneralAccuracy;
                    case CombatStyle_FieldIndex.SpaceGeneralTargetShield:
                        return SpaceGeneralTargetShield;
                    case CombatStyle_FieldIndex.SpaceGeneralAdjustment:
                        return SpaceGeneralAdjustment;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceDirectAttack:
                        return SpaceGeneralEngageManeuverChanceDirectAttack;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChancePass:
                        return SpaceGeneralEngageManeuverChancePass;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceLeadTurn:
                        return SpaceGeneralEngageManeuverChanceLeadTurn;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceSlideTurn:
                        return SpaceGeneralEngageManeuverChanceSlideTurn;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceBarrelRoll:
                        return SpaceGeneralEngageManeuverChanceBarrelRoll;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBreak:
                        return SpaceGeneralEvadeManeuverChanceBreak;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceScissors:
                        return SpaceGeneralEvadeManeuverChanceScissors;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceCut:
                        return SpaceGeneralEvadeManeuverChanceCut;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBoost:
                        return SpaceGeneralEvadeManeuverChanceBoost;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceSliceback:
                        return SpaceGeneralAcquireManeuverChanceSliceback;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceStrafeTurn:
                        return SpaceGeneralAcquireManeuverChanceStrafeTurn;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceAcquire:
                        return SpaceGeneralAcquireManeuverChanceAcquire;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceTurn:
                        return SpaceGeneralAcquireManeuverChanceTurn;
                    case CombatStyle_FieldIndex.SpaceGeneralDisengageManeuverChance:
                        return SpaceGeneralDisengageManeuverChance;
                    case CombatStyle_FieldIndex.SpaceGeneralMissileSeekingStrength:
                        return SpaceGeneralMissileSeekingStrength;
                    case CombatStyle_FieldIndex.SpaceGeneralMinTimeBetweenBoosts:
                        return SpaceGeneralMinTimeBetweenBoosts;
                    case CombatStyle_FieldIndex.SpaceGeneralCombatStrafing:
                        return SpaceGeneralCombatStrafing;
                    case CombatStyle_FieldIndex.SpaceGeneralRollsDuringBoost:
                        return SpaceGeneralRollsDuringBoost;
                    case CombatStyle_FieldIndex.UnknownCSSG:
                        return UnknownCSSG;
                    case CombatStyle_FieldIndex.SpaceGeneralPowerWeighting:
                        return SpaceGeneralPowerWeighting;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime:
                        return SpaceManeuverTypesMaxTime;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays:
                        return SpaceManeuverTypesReentryDelays;
                    case CombatStyle_FieldIndex.SpaceRepairDamageThreshold:
                        return SpaceRepairDamageThreshold;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayDistance:
                        return SpaceRepairFarawayDistance;
                    case CombatStyle_FieldIndex.SpaceRepairPowerToUse:
                        return SpaceRepairPowerToUse;
                    case CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables:
                        return SpaceRepairInClosePowerWeightingTables;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables:
                        return SpaceRepairFarawayPowerWeightingTables;
                    case CombatStyle_FieldIndex.SpaceApproachingMinDistance:
                        return SpaceApproachingMinDistance;
                    case CombatStyle_FieldIndex.SpaceApproachingWeighting:
                        return SpaceApproachingWeighting;
                    case CombatStyle_FieldIndex.SpaceDetectionRating1:
                        return SpaceDetectionRating1;
                    case CombatStyle_FieldIndex.SpaceDetectionRating2:
                        return SpaceDetectionRating2;
                    case CombatStyle_FieldIndex.SpaceDetectionRating3:
                        return SpaceDetectionRating3;
                    case CombatStyle_FieldIndex.Flags:
                        return Flags;
                    case CombatStyle_FieldIndex.FNAM:
                        return FNAM;
                    case CombatStyle_FieldIndex.TemplateDefaultCombatStyle:
                        return TemplateDefaultCombatStyle;
                    case CombatStyle_FieldIndex.Templates:
                        return Templates;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = ex;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        this.DodgeThreadChance = ex;
                        break;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        this.EvadeThreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.HealAllyDistance:
                        this.HealAllyDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.JumpCostMult:
                        this.JumpCostMult = ex;
                        break;
                    case CombatStyle_FieldIndex.TauntDelayMult:
                        this.TauntDelayMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        this.MeleeAttackStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        this.MeleePowerAttackStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        this.MeleePowerAttackBlockingMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        this.MeleeBashMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        this.MeleeBashRecoilMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        this.MeleeBashAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        this.MeleeBashPowerAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        this.MeleeSpecialAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        this.MeleeBlockWhenStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        this.MeleeAttackWhenStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        this.RangedAccuracyMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedThrowMult:
                        this.RangedThrowMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeAdvancedThrowingMult:
                        this.RangedGrenadeAdvancedThrowingMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeFlashTargetMult:
                        this.RangedGrenadeFlashTargetMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeThrowAtGroupMult:
                        this.RangedGrenadeThrowAtGroupMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult:
                        this.RangedGrenadeCloseRangeAttackChanceMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        this.CloseRangeDuelingCircleMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        this.CloseRangeDuelingFallbackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        this.CloseRangeFlankDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        this.CloseRangeFlankingStalkTime = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        this.CloseRangeChargeDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        this.CloseRangeChargingThrowProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        this.CloseRangeChargingSprintFastProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        this.CloseRangeChargingSideswipeProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        this.CloseRangeChargingDisengageProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        this.CloseRangeChargingThrowMaxTargets = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        this.CloseRangeFlankingVariance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeRetreatChance:
                        this.CloseRangeRetreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult:
                        this.CloseRangeRetreatDistanceMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        this.LongRangeAdjustRangeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        this.LongRangeCrouchMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        this.LongRangeWaitMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        this.LongRangeRangeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeProvideSuppressiveFireMult:
                        this.LongRangeProvideSuppressiveFireMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatChance:
                        this.LongRangeRetreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatHideTimeMult:
                        this.LongRangeRetreatHideTimeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatDistanceMult:
                        this.LongRangeRetreatDistanceMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        this.CoverSearchDistanceMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity:
                        this.CoverSearchSuppressionSensitivity = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightHoverChance:
                        this.FlightHoverChance = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightDiveBombChance:
                        this.FlightDiveBombChance = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightGroundAttackChance:
                        this.FlightGroundAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightHoverTime:
                        this.FlightHoverTime = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightGroundAttackTime:
                        this.FlightGroundAttackTime = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightPerchAttackChance:
                        this.FlightPerchAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightPerchAttackTime:
                        this.FlightPerchAttackTime = ex;
                        break;
                    case CombatStyle_FieldIndex.FlightFlyingAttackChance:
                        this.FlightFlyingAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelCostMult:
                        this.TunnelCostMult = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelChance:
                        this.TunnelChance = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaxDistance:
                        this.TunnelMaxDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelSpeedMult:
                        this.TunnelSpeedMult = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelMinTime:
                        this.TunnelMinTime = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaxTime:
                        this.TunnelMaxTime = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaximumTime:
                        this.TunnelMaximumTime = ex;
                        break;
                    case CombatStyle_FieldIndex.TunnelCooldown:
                        this.TunnelCooldown = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralPilotSkill:
                        this.SpaceGeneralPilotSkill = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAccuracy:
                        this.SpaceGeneralAccuracy = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralTargetShield:
                        this.SpaceGeneralTargetShield = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAdjustment:
                        this.SpaceGeneralAdjustment = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceDirectAttack:
                        this.SpaceGeneralEngageManeuverChanceDirectAttack = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChancePass:
                        this.SpaceGeneralEngageManeuverChancePass = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceLeadTurn:
                        this.SpaceGeneralEngageManeuverChanceLeadTurn = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceSlideTurn:
                        this.SpaceGeneralEngageManeuverChanceSlideTurn = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceBarrelRoll:
                        this.SpaceGeneralEngageManeuverChanceBarrelRoll = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBreak:
                        this.SpaceGeneralEvadeManeuverChanceBreak = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceScissors:
                        this.SpaceGeneralEvadeManeuverChanceScissors = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceCut:
                        this.SpaceGeneralEvadeManeuverChanceCut = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBoost:
                        this.SpaceGeneralEvadeManeuverChanceBoost = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceSliceback:
                        this.SpaceGeneralAcquireManeuverChanceSliceback = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceStrafeTurn:
                        this.SpaceGeneralAcquireManeuverChanceStrafeTurn = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceAcquire:
                        this.SpaceGeneralAcquireManeuverChanceAcquire = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceTurn:
                        this.SpaceGeneralAcquireManeuverChanceTurn = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralDisengageManeuverChance:
                        this.SpaceGeneralDisengageManeuverChance = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralMissileSeekingStrength:
                        this.SpaceGeneralMissileSeekingStrength = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralMinTimeBetweenBoosts:
                        this.SpaceGeneralMinTimeBetweenBoosts = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralCombatStrafing:
                        this.SpaceGeneralCombatStrafing = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralRollsDuringBoost:
                        this.SpaceGeneralRollsDuringBoost = ex;
                        break;
                    case CombatStyle_FieldIndex.UnknownCSSG:
                        this.UnknownCSSG = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralPowerWeighting:
                        this.SpaceGeneralPowerWeighting = new MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime:
                        this.SpaceManeuverTypesMaxTime = new MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays:
                        this.SpaceManeuverTypesReentryDelays = new MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairDamageThreshold:
                        this.SpaceRepairDamageThreshold = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayDistance:
                        this.SpaceRepairFarawayDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairPowerToUse:
                        this.SpaceRepairPowerToUse = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables:
                        this.SpaceRepairInClosePowerWeightingTables = new MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables:
                        this.SpaceRepairFarawayPowerWeightingTables = new MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceApproachingMinDistance:
                        this.SpaceApproachingMinDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceApproachingWeighting:
                        this.SpaceApproachingWeighting = new MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating1:
                        this.SpaceDetectionRating1 = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating2:
                        this.SpaceDetectionRating2 = ex;
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating3:
                        this.SpaceDetectionRating3 = ex;
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CombatStyle_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case CombatStyle_FieldIndex.TemplateDefaultCombatStyle:
                        this.TemplateDefaultCombatStyle = ex;
                        break;
                    case CombatStyle_FieldIndex.Templates:
                        this.Templates = new MaskItem<Exception?, CombatStyleTemplates.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        this.DodgeThreadChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        this.EvadeThreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.HealAllyDistance:
                        this.HealAllyDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.JumpCostMult:
                        this.JumpCostMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TauntDelayMult:
                        this.TauntDelayMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        this.MeleeAttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        this.MeleePowerAttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        this.MeleePowerAttackBlockingMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        this.MeleeBashMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        this.MeleeBashRecoilMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        this.MeleeBashAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        this.MeleeBashPowerAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        this.MeleeSpecialAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        this.MeleeBlockWhenStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        this.MeleeAttackWhenStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        this.RangedAccuracyMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedThrowMult:
                        this.RangedThrowMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeAdvancedThrowingMult:
                        this.RangedGrenadeAdvancedThrowingMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeFlashTargetMult:
                        this.RangedGrenadeFlashTargetMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeThrowAtGroupMult:
                        this.RangedGrenadeThrowAtGroupMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult:
                        this.RangedGrenadeCloseRangeAttackChanceMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        this.CloseRangeDuelingCircleMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        this.CloseRangeDuelingFallbackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        this.CloseRangeFlankDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        this.CloseRangeFlankingStalkTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        this.CloseRangeChargeDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        this.CloseRangeChargingThrowProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        this.CloseRangeChargingSprintFastProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        this.CloseRangeChargingSideswipeProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        this.CloseRangeChargingDisengageProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        this.CloseRangeChargingThrowMaxTargets = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        this.CloseRangeFlankingVariance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeRetreatChance:
                        this.CloseRangeRetreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult:
                        this.CloseRangeRetreatDistanceMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        this.LongRangeAdjustRangeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        this.LongRangeCrouchMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        this.LongRangeWaitMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        this.LongRangeRangeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeProvideSuppressiveFireMult:
                        this.LongRangeProvideSuppressiveFireMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatChance:
                        this.LongRangeRetreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatHideTimeMult:
                        this.LongRangeRetreatHideTimeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRetreatDistanceMult:
                        this.LongRangeRetreatDistanceMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        this.CoverSearchDistanceMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity:
                        this.CoverSearchSuppressionSensitivity = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightHoverChance:
                        this.FlightHoverChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightDiveBombChance:
                        this.FlightDiveBombChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightGroundAttackChance:
                        this.FlightGroundAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightHoverTime:
                        this.FlightHoverTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightGroundAttackTime:
                        this.FlightGroundAttackTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightPerchAttackChance:
                        this.FlightPerchAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightPerchAttackTime:
                        this.FlightPerchAttackTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlightFlyingAttackChance:
                        this.FlightFlyingAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelCostMult:
                        this.TunnelCostMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelChance:
                        this.TunnelChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaxDistance:
                        this.TunnelMaxDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelSpeedMult:
                        this.TunnelSpeedMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelMinTime:
                        this.TunnelMinTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaxTime:
                        this.TunnelMaxTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelMaximumTime:
                        this.TunnelMaximumTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TunnelCooldown:
                        this.TunnelCooldown = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralPilotSkill:
                        this.SpaceGeneralPilotSkill = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAccuracy:
                        this.SpaceGeneralAccuracy = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralTargetShield:
                        this.SpaceGeneralTargetShield = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAdjustment:
                        this.SpaceGeneralAdjustment = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceDirectAttack:
                        this.SpaceGeneralEngageManeuverChanceDirectAttack = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChancePass:
                        this.SpaceGeneralEngageManeuverChancePass = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceLeadTurn:
                        this.SpaceGeneralEngageManeuverChanceLeadTurn = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceSlideTurn:
                        this.SpaceGeneralEngageManeuverChanceSlideTurn = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceBarrelRoll:
                        this.SpaceGeneralEngageManeuverChanceBarrelRoll = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBreak:
                        this.SpaceGeneralEvadeManeuverChanceBreak = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceScissors:
                        this.SpaceGeneralEvadeManeuverChanceScissors = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceCut:
                        this.SpaceGeneralEvadeManeuverChanceCut = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBoost:
                        this.SpaceGeneralEvadeManeuverChanceBoost = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceSliceback:
                        this.SpaceGeneralAcquireManeuverChanceSliceback = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceStrafeTurn:
                        this.SpaceGeneralAcquireManeuverChanceStrafeTurn = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceAcquire:
                        this.SpaceGeneralAcquireManeuverChanceAcquire = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceTurn:
                        this.SpaceGeneralAcquireManeuverChanceTurn = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralDisengageManeuverChance:
                        this.SpaceGeneralDisengageManeuverChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralMissileSeekingStrength:
                        this.SpaceGeneralMissileSeekingStrength = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralMinTimeBetweenBoosts:
                        this.SpaceGeneralMinTimeBetweenBoosts = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralCombatStrafing:
                        this.SpaceGeneralCombatStrafing = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralRollsDuringBoost:
                        this.SpaceGeneralRollsDuringBoost = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.UnknownCSSG:
                        this.UnknownCSSG = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceGeneralPowerWeighting:
                        this.SpaceGeneralPowerWeighting = (MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime:
                        this.SpaceManeuverTypesMaxTime = (MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays:
                        this.SpaceManeuverTypesReentryDelays = (MaskItem<Exception?, CombatStyleManeuverTiming.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairDamageThreshold:
                        this.SpaceRepairDamageThreshold = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayDistance:
                        this.SpaceRepairFarawayDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairPowerToUse:
                        this.SpaceRepairPowerToUse = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables:
                        this.SpaceRepairInClosePowerWeightingTables = (MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables:
                        this.SpaceRepairFarawayPowerWeightingTables = (MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceApproachingMinDistance:
                        this.SpaceApproachingMinDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceApproachingWeighting:
                        this.SpaceApproachingWeighting = (MaskItem<Exception?, CombatStylePowerWeighting.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating1:
                        this.SpaceDetectionRating1 = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating2:
                        this.SpaceDetectionRating2 = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.SpaceDetectionRating3:
                        this.SpaceDetectionRating3 = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.TemplateDefaultCombatStyle:
                        this.TemplateDefaultCombatStyle = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.Templates:
                        this.Templates = (MaskItem<Exception?, CombatStyleTemplates.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (OffensiveMult != null) return true;
                if (DefensiveMult != null) return true;
                if (GroupOffensiveMult != null) return true;
                if (EquipmentScoreMultMelee != null) return true;
                if (EquipmentScoreMultMagic != null) return true;
                if (EquipmentScoreMultRanged != null) return true;
                if (EquipmentScoreMultShout != null) return true;
                if (EquipmentScoreMultUnarmed != null) return true;
                if (EquipmentScoreMultStaff != null) return true;
                if (AvoidThreatChance != null) return true;
                if (DodgeThreadChance != null) return true;
                if (EvadeThreatChance != null) return true;
                if (HealAllyDistance != null) return true;
                if (JumpCostMult != null) return true;
                if (TauntDelayMult != null) return true;
                if (MeleeAttackStaggeredMult != null) return true;
                if (MeleePowerAttackStaggeredMult != null) return true;
                if (MeleePowerAttackBlockingMult != null) return true;
                if (MeleeBashMult != null) return true;
                if (MeleeBashRecoilMult != null) return true;
                if (MeleeBashAttackMult != null) return true;
                if (MeleeBashPowerAttackMult != null) return true;
                if (MeleeSpecialAttackMult != null) return true;
                if (MeleeBlockWhenStaggeredMult != null) return true;
                if (MeleeAttackWhenStaggeredMult != null) return true;
                if (RangedAccuracyMult != null) return true;
                if (RangedThrowMult != null) return true;
                if (RangedGrenadeAdvancedThrowingMult != null) return true;
                if (RangedGrenadeFlashTargetMult != null) return true;
                if (RangedGrenadeThrowAtGroupMult != null) return true;
                if (RangedGrenadeCloseRangeAttackChanceMult != null) return true;
                if (CloseRangeDuelingCircleMult != null) return true;
                if (CloseRangeDuelingFallbackMult != null) return true;
                if (CloseRangeFlankDistance != null) return true;
                if (CloseRangeFlankingStalkTime != null) return true;
                if (CloseRangeChargeDistance != null) return true;
                if (CloseRangeChargingThrowProbability != null) return true;
                if (CloseRangeChargingSprintFastProbability != null) return true;
                if (CloseRangeChargingSideswipeProbability != null) return true;
                if (CloseRangeChargingDisengageProbability != null) return true;
                if (CloseRangeChargingThrowMaxTargets != null) return true;
                if (CloseRangeFlankingVariance != null) return true;
                if (CloseRangeRetreatChance != null) return true;
                if (CloseRangeRetreatDistanceMult != null) return true;
                if (LongRangeStrafeMult != null) return true;
                if (LongRangeAdjustRangeMult != null) return true;
                if (LongRangeCrouchMult != null) return true;
                if (LongRangeWaitMult != null) return true;
                if (LongRangeRangeMult != null) return true;
                if (LongRangeProvideSuppressiveFireMult != null) return true;
                if (LongRangeRetreatChance != null) return true;
                if (LongRangeRetreatHideTimeMult != null) return true;
                if (LongRangeRetreatDistanceMult != null) return true;
                if (CoverSearchDistanceMult != null) return true;
                if (CoverSearchSuppressionSensitivity != null) return true;
                if (FlightHoverChance != null) return true;
                if (FlightDiveBombChance != null) return true;
                if (FlightGroundAttackChance != null) return true;
                if (FlightHoverTime != null) return true;
                if (FlightGroundAttackTime != null) return true;
                if (FlightPerchAttackChance != null) return true;
                if (FlightPerchAttackTime != null) return true;
                if (FlightFlyingAttackChance != null) return true;
                if (TunnelCostMult != null) return true;
                if (TunnelChance != null) return true;
                if (TunnelMaxDistance != null) return true;
                if (TunnelSpeedMult != null) return true;
                if (TunnelMinTime != null) return true;
                if (TunnelMaxTime != null) return true;
                if (TunnelMaximumTime != null) return true;
                if (TunnelCooldown != null) return true;
                if (SpaceGeneralPilotSkill != null) return true;
                if (SpaceGeneralAccuracy != null) return true;
                if (SpaceGeneralTargetShield != null) return true;
                if (SpaceGeneralAdjustment != null) return true;
                if (SpaceGeneralEngageManeuverChanceDirectAttack != null) return true;
                if (SpaceGeneralEngageManeuverChancePass != null) return true;
                if (SpaceGeneralEngageManeuverChanceLeadTurn != null) return true;
                if (SpaceGeneralEngageManeuverChanceSlideTurn != null) return true;
                if (SpaceGeneralEngageManeuverChanceBarrelRoll != null) return true;
                if (SpaceGeneralEvadeManeuverChanceBreak != null) return true;
                if (SpaceGeneralEvadeManeuverChanceScissors != null) return true;
                if (SpaceGeneralEvadeManeuverChanceCut != null) return true;
                if (SpaceGeneralEvadeManeuverChanceBoost != null) return true;
                if (SpaceGeneralAcquireManeuverChanceSliceback != null) return true;
                if (SpaceGeneralAcquireManeuverChanceStrafeTurn != null) return true;
                if (SpaceGeneralAcquireManeuverChanceAcquire != null) return true;
                if (SpaceGeneralAcquireManeuverChanceTurn != null) return true;
                if (SpaceGeneralDisengageManeuverChance != null) return true;
                if (SpaceGeneralMissileSeekingStrength != null) return true;
                if (SpaceGeneralMinTimeBetweenBoosts != null) return true;
                if (SpaceGeneralCombatStrafing != null) return true;
                if (SpaceGeneralRollsDuringBoost != null) return true;
                if (UnknownCSSG != null) return true;
                if (SpaceGeneralPowerWeighting != null) return true;
                if (SpaceManeuverTypesMaxTime != null) return true;
                if (SpaceManeuverTypesReentryDelays != null) return true;
                if (SpaceRepairDamageThreshold != null) return true;
                if (SpaceRepairFarawayDistance != null) return true;
                if (SpaceRepairPowerToUse != null) return true;
                if (SpaceRepairInClosePowerWeightingTables != null) return true;
                if (SpaceRepairFarawayPowerWeightingTables != null) return true;
                if (SpaceApproachingMinDistance != null) return true;
                if (SpaceApproachingWeighting != null) return true;
                if (SpaceDetectionRating1 != null) return true;
                if (SpaceDetectionRating2 != null) return true;
                if (SpaceDetectionRating3 != null) return true;
                if (Flags != null) return true;
                if (FNAM != null) return true;
                if (TemplateDefaultCombatStyle != null) return true;
                if (Templates != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(OffensiveMult, "OffensiveMult");
                }
                {
                    sb.AppendItem(DefensiveMult, "DefensiveMult");
                }
                {
                    sb.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                }
                {
                    sb.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                }
                {
                    sb.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                }
                {
                    sb.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                }
                {
                    sb.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                }
                {
                    sb.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                }
                {
                    sb.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                }
                {
                    sb.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                }
                {
                    sb.AppendItem(DodgeThreadChance, "DodgeThreadChance");
                }
                {
                    sb.AppendItem(EvadeThreatChance, "EvadeThreatChance");
                }
                {
                    sb.AppendItem(HealAllyDistance, "HealAllyDistance");
                }
                {
                    sb.AppendItem(JumpCostMult, "JumpCostMult");
                }
                {
                    sb.AppendItem(TauntDelayMult, "TauntDelayMult");
                }
                {
                    sb.AppendItem(MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
                }
                {
                    sb.AppendItem(MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
                }
                {
                    sb.AppendItem(MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
                }
                {
                    sb.AppendItem(MeleeBashMult, "MeleeBashMult");
                }
                {
                    sb.AppendItem(MeleeBashRecoilMult, "MeleeBashRecoilMult");
                }
                {
                    sb.AppendItem(MeleeBashAttackMult, "MeleeBashAttackMult");
                }
                {
                    sb.AppendItem(MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
                }
                {
                    sb.AppendItem(MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
                }
                {
                    sb.AppendItem(MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
                }
                {
                    sb.AppendItem(MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
                }
                {
                    sb.AppendItem(RangedAccuracyMult, "RangedAccuracyMult");
                }
                {
                    sb.AppendItem(RangedThrowMult, "RangedThrowMult");
                }
                {
                    sb.AppendItem(RangedGrenadeAdvancedThrowingMult, "RangedGrenadeAdvancedThrowingMult");
                }
                {
                    sb.AppendItem(RangedGrenadeFlashTargetMult, "RangedGrenadeFlashTargetMult");
                }
                {
                    sb.AppendItem(RangedGrenadeThrowAtGroupMult, "RangedGrenadeThrowAtGroupMult");
                }
                {
                    sb.AppendItem(RangedGrenadeCloseRangeAttackChanceMult, "RangedGrenadeCloseRangeAttackChanceMult");
                }
                {
                    sb.AppendItem(CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
                }
                {
                    sb.AppendItem(CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
                }
                {
                    sb.AppendItem(CloseRangeFlankDistance, "CloseRangeFlankDistance");
                }
                {
                    sb.AppendItem(CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
                }
                {
                    sb.AppendItem(CloseRangeChargeDistance, "CloseRangeChargeDistance");
                }
                {
                    sb.AppendItem(CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
                }
                {
                    sb.AppendItem(CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
                }
                {
                    sb.AppendItem(CloseRangeRetreatChance, "CloseRangeRetreatChance");
                }
                {
                    sb.AppendItem(CloseRangeRetreatDistanceMult, "CloseRangeRetreatDistanceMult");
                }
                {
                    sb.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                }
                {
                    sb.AppendItem(LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
                }
                {
                    sb.AppendItem(LongRangeCrouchMult, "LongRangeCrouchMult");
                }
                {
                    sb.AppendItem(LongRangeWaitMult, "LongRangeWaitMult");
                }
                {
                    sb.AppendItem(LongRangeRangeMult, "LongRangeRangeMult");
                }
                {
                    sb.AppendItem(LongRangeProvideSuppressiveFireMult, "LongRangeProvideSuppressiveFireMult");
                }
                {
                    sb.AppendItem(LongRangeRetreatChance, "LongRangeRetreatChance");
                }
                {
                    sb.AppendItem(LongRangeRetreatHideTimeMult, "LongRangeRetreatHideTimeMult");
                }
                {
                    sb.AppendItem(LongRangeRetreatDistanceMult, "LongRangeRetreatDistanceMult");
                }
                {
                    sb.AppendItem(CoverSearchDistanceMult, "CoverSearchDistanceMult");
                }
                {
                    sb.AppendItem(CoverSearchSuppressionSensitivity, "CoverSearchSuppressionSensitivity");
                }
                {
                    sb.AppendItem(FlightHoverChance, "FlightHoverChance");
                }
                {
                    sb.AppendItem(FlightDiveBombChance, "FlightDiveBombChance");
                }
                {
                    sb.AppendItem(FlightGroundAttackChance, "FlightGroundAttackChance");
                }
                {
                    sb.AppendItem(FlightHoverTime, "FlightHoverTime");
                }
                {
                    sb.AppendItem(FlightGroundAttackTime, "FlightGroundAttackTime");
                }
                {
                    sb.AppendItem(FlightPerchAttackChance, "FlightPerchAttackChance");
                }
                {
                    sb.AppendItem(FlightPerchAttackTime, "FlightPerchAttackTime");
                }
                {
                    sb.AppendItem(FlightFlyingAttackChance, "FlightFlyingAttackChance");
                }
                {
                    sb.AppendItem(TunnelCostMult, "TunnelCostMult");
                }
                {
                    sb.AppendItem(TunnelChance, "TunnelChance");
                }
                {
                    sb.AppendItem(TunnelMaxDistance, "TunnelMaxDistance");
                }
                {
                    sb.AppendItem(TunnelSpeedMult, "TunnelSpeedMult");
                }
                {
                    sb.AppendItem(TunnelMinTime, "TunnelMinTime");
                }
                {
                    sb.AppendItem(TunnelMaxTime, "TunnelMaxTime");
                }
                {
                    sb.AppendItem(TunnelMaximumTime, "TunnelMaximumTime");
                }
                {
                    sb.AppendItem(TunnelCooldown, "TunnelCooldown");
                }
                {
                    sb.AppendItem(SpaceGeneralPilotSkill, "SpaceGeneralPilotSkill");
                }
                {
                    sb.AppendItem(SpaceGeneralAccuracy, "SpaceGeneralAccuracy");
                }
                {
                    sb.AppendItem(SpaceGeneralTargetShield, "SpaceGeneralTargetShield");
                }
                {
                    sb.AppendItem(SpaceGeneralAdjustment, "SpaceGeneralAdjustment");
                }
                {
                    sb.AppendItem(SpaceGeneralEngageManeuverChanceDirectAttack, "SpaceGeneralEngageManeuverChanceDirectAttack");
                }
                {
                    sb.AppendItem(SpaceGeneralEngageManeuverChancePass, "SpaceGeneralEngageManeuverChancePass");
                }
                {
                    sb.AppendItem(SpaceGeneralEngageManeuverChanceLeadTurn, "SpaceGeneralEngageManeuverChanceLeadTurn");
                }
                {
                    sb.AppendItem(SpaceGeneralEngageManeuverChanceSlideTurn, "SpaceGeneralEngageManeuverChanceSlideTurn");
                }
                {
                    sb.AppendItem(SpaceGeneralEngageManeuverChanceBarrelRoll, "SpaceGeneralEngageManeuverChanceBarrelRoll");
                }
                {
                    sb.AppendItem(SpaceGeneralEvadeManeuverChanceBreak, "SpaceGeneralEvadeManeuverChanceBreak");
                }
                {
                    sb.AppendItem(SpaceGeneralEvadeManeuverChanceScissors, "SpaceGeneralEvadeManeuverChanceScissors");
                }
                {
                    sb.AppendItem(SpaceGeneralEvadeManeuverChanceCut, "SpaceGeneralEvadeManeuverChanceCut");
                }
                {
                    sb.AppendItem(SpaceGeneralEvadeManeuverChanceBoost, "SpaceGeneralEvadeManeuverChanceBoost");
                }
                {
                    sb.AppendItem(SpaceGeneralAcquireManeuverChanceSliceback, "SpaceGeneralAcquireManeuverChanceSliceback");
                }
                {
                    sb.AppendItem(SpaceGeneralAcquireManeuverChanceStrafeTurn, "SpaceGeneralAcquireManeuverChanceStrafeTurn");
                }
                {
                    sb.AppendItem(SpaceGeneralAcquireManeuverChanceAcquire, "SpaceGeneralAcquireManeuverChanceAcquire");
                }
                {
                    sb.AppendItem(SpaceGeneralAcquireManeuverChanceTurn, "SpaceGeneralAcquireManeuverChanceTurn");
                }
                {
                    sb.AppendItem(SpaceGeneralDisengageManeuverChance, "SpaceGeneralDisengageManeuverChance");
                }
                {
                    sb.AppendItem(SpaceGeneralMissileSeekingStrength, "SpaceGeneralMissileSeekingStrength");
                }
                {
                    sb.AppendItem(SpaceGeneralMinTimeBetweenBoosts, "SpaceGeneralMinTimeBetweenBoosts");
                }
                {
                    sb.AppendItem(SpaceGeneralCombatStrafing, "SpaceGeneralCombatStrafing");
                }
                {
                    sb.AppendItem(SpaceGeneralRollsDuringBoost, "SpaceGeneralRollsDuringBoost");
                }
                {
                    sb.AppendItem(UnknownCSSG, "UnknownCSSG");
                }
                SpaceGeneralPowerWeighting?.Print(sb);
                SpaceManeuverTypesMaxTime?.Print(sb);
                SpaceManeuverTypesReentryDelays?.Print(sb);
                {
                    sb.AppendItem(SpaceRepairDamageThreshold, "SpaceRepairDamageThreshold");
                }
                {
                    sb.AppendItem(SpaceRepairFarawayDistance, "SpaceRepairFarawayDistance");
                }
                {
                    sb.AppendItem(SpaceRepairPowerToUse, "SpaceRepairPowerToUse");
                }
                SpaceRepairInClosePowerWeightingTables?.Print(sb);
                SpaceRepairFarawayPowerWeightingTables?.Print(sb);
                {
                    sb.AppendItem(SpaceApproachingMinDistance, "SpaceApproachingMinDistance");
                }
                SpaceApproachingWeighting?.Print(sb);
                {
                    sb.AppendItem(SpaceDetectionRating1, "SpaceDetectionRating1");
                }
                {
                    sb.AppendItem(SpaceDetectionRating2, "SpaceDetectionRating2");
                }
                {
                    sb.AppendItem(SpaceDetectionRating3, "SpaceDetectionRating3");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(TemplateDefaultCombatStyle, "TemplateDefaultCombatStyle");
                }
                Templates?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.OffensiveMult = this.OffensiveMult.Combine(rhs.OffensiveMult);
                ret.DefensiveMult = this.DefensiveMult.Combine(rhs.DefensiveMult);
                ret.GroupOffensiveMult = this.GroupOffensiveMult.Combine(rhs.GroupOffensiveMult);
                ret.EquipmentScoreMultMelee = this.EquipmentScoreMultMelee.Combine(rhs.EquipmentScoreMultMelee);
                ret.EquipmentScoreMultMagic = this.EquipmentScoreMultMagic.Combine(rhs.EquipmentScoreMultMagic);
                ret.EquipmentScoreMultRanged = this.EquipmentScoreMultRanged.Combine(rhs.EquipmentScoreMultRanged);
                ret.EquipmentScoreMultShout = this.EquipmentScoreMultShout.Combine(rhs.EquipmentScoreMultShout);
                ret.EquipmentScoreMultUnarmed = this.EquipmentScoreMultUnarmed.Combine(rhs.EquipmentScoreMultUnarmed);
                ret.EquipmentScoreMultStaff = this.EquipmentScoreMultStaff.Combine(rhs.EquipmentScoreMultStaff);
                ret.AvoidThreatChance = this.AvoidThreatChance.Combine(rhs.AvoidThreatChance);
                ret.DodgeThreadChance = this.DodgeThreadChance.Combine(rhs.DodgeThreadChance);
                ret.EvadeThreatChance = this.EvadeThreatChance.Combine(rhs.EvadeThreatChance);
                ret.HealAllyDistance = this.HealAllyDistance.Combine(rhs.HealAllyDistance);
                ret.JumpCostMult = this.JumpCostMult.Combine(rhs.JumpCostMult);
                ret.TauntDelayMult = this.TauntDelayMult.Combine(rhs.TauntDelayMult);
                ret.MeleeAttackStaggeredMult = this.MeleeAttackStaggeredMult.Combine(rhs.MeleeAttackStaggeredMult);
                ret.MeleePowerAttackStaggeredMult = this.MeleePowerAttackStaggeredMult.Combine(rhs.MeleePowerAttackStaggeredMult);
                ret.MeleePowerAttackBlockingMult = this.MeleePowerAttackBlockingMult.Combine(rhs.MeleePowerAttackBlockingMult);
                ret.MeleeBashMult = this.MeleeBashMult.Combine(rhs.MeleeBashMult);
                ret.MeleeBashRecoilMult = this.MeleeBashRecoilMult.Combine(rhs.MeleeBashRecoilMult);
                ret.MeleeBashAttackMult = this.MeleeBashAttackMult.Combine(rhs.MeleeBashAttackMult);
                ret.MeleeBashPowerAttackMult = this.MeleeBashPowerAttackMult.Combine(rhs.MeleeBashPowerAttackMult);
                ret.MeleeSpecialAttackMult = this.MeleeSpecialAttackMult.Combine(rhs.MeleeSpecialAttackMult);
                ret.MeleeBlockWhenStaggeredMult = this.MeleeBlockWhenStaggeredMult.Combine(rhs.MeleeBlockWhenStaggeredMult);
                ret.MeleeAttackWhenStaggeredMult = this.MeleeAttackWhenStaggeredMult.Combine(rhs.MeleeAttackWhenStaggeredMult);
                ret.RangedAccuracyMult = this.RangedAccuracyMult.Combine(rhs.RangedAccuracyMult);
                ret.RangedThrowMult = this.RangedThrowMult.Combine(rhs.RangedThrowMult);
                ret.RangedGrenadeAdvancedThrowingMult = this.RangedGrenadeAdvancedThrowingMult.Combine(rhs.RangedGrenadeAdvancedThrowingMult);
                ret.RangedGrenadeFlashTargetMult = this.RangedGrenadeFlashTargetMult.Combine(rhs.RangedGrenadeFlashTargetMult);
                ret.RangedGrenadeThrowAtGroupMult = this.RangedGrenadeThrowAtGroupMult.Combine(rhs.RangedGrenadeThrowAtGroupMult);
                ret.RangedGrenadeCloseRangeAttackChanceMult = this.RangedGrenadeCloseRangeAttackChanceMult.Combine(rhs.RangedGrenadeCloseRangeAttackChanceMult);
                ret.CloseRangeDuelingCircleMult = this.CloseRangeDuelingCircleMult.Combine(rhs.CloseRangeDuelingCircleMult);
                ret.CloseRangeDuelingFallbackMult = this.CloseRangeDuelingFallbackMult.Combine(rhs.CloseRangeDuelingFallbackMult);
                ret.CloseRangeFlankDistance = this.CloseRangeFlankDistance.Combine(rhs.CloseRangeFlankDistance);
                ret.CloseRangeFlankingStalkTime = this.CloseRangeFlankingStalkTime.Combine(rhs.CloseRangeFlankingStalkTime);
                ret.CloseRangeChargeDistance = this.CloseRangeChargeDistance.Combine(rhs.CloseRangeChargeDistance);
                ret.CloseRangeChargingThrowProbability = this.CloseRangeChargingThrowProbability.Combine(rhs.CloseRangeChargingThrowProbability);
                ret.CloseRangeChargingSprintFastProbability = this.CloseRangeChargingSprintFastProbability.Combine(rhs.CloseRangeChargingSprintFastProbability);
                ret.CloseRangeChargingSideswipeProbability = this.CloseRangeChargingSideswipeProbability.Combine(rhs.CloseRangeChargingSideswipeProbability);
                ret.CloseRangeChargingDisengageProbability = this.CloseRangeChargingDisengageProbability.Combine(rhs.CloseRangeChargingDisengageProbability);
                ret.CloseRangeChargingThrowMaxTargets = this.CloseRangeChargingThrowMaxTargets.Combine(rhs.CloseRangeChargingThrowMaxTargets);
                ret.CloseRangeFlankingVariance = this.CloseRangeFlankingVariance.Combine(rhs.CloseRangeFlankingVariance);
                ret.CloseRangeRetreatChance = this.CloseRangeRetreatChance.Combine(rhs.CloseRangeRetreatChance);
                ret.CloseRangeRetreatDistanceMult = this.CloseRangeRetreatDistanceMult.Combine(rhs.CloseRangeRetreatDistanceMult);
                ret.LongRangeStrafeMult = this.LongRangeStrafeMult.Combine(rhs.LongRangeStrafeMult);
                ret.LongRangeAdjustRangeMult = this.LongRangeAdjustRangeMult.Combine(rhs.LongRangeAdjustRangeMult);
                ret.LongRangeCrouchMult = this.LongRangeCrouchMult.Combine(rhs.LongRangeCrouchMult);
                ret.LongRangeWaitMult = this.LongRangeWaitMult.Combine(rhs.LongRangeWaitMult);
                ret.LongRangeRangeMult = this.LongRangeRangeMult.Combine(rhs.LongRangeRangeMult);
                ret.LongRangeProvideSuppressiveFireMult = this.LongRangeProvideSuppressiveFireMult.Combine(rhs.LongRangeProvideSuppressiveFireMult);
                ret.LongRangeRetreatChance = this.LongRangeRetreatChance.Combine(rhs.LongRangeRetreatChance);
                ret.LongRangeRetreatHideTimeMult = this.LongRangeRetreatHideTimeMult.Combine(rhs.LongRangeRetreatHideTimeMult);
                ret.LongRangeRetreatDistanceMult = this.LongRangeRetreatDistanceMult.Combine(rhs.LongRangeRetreatDistanceMult);
                ret.CoverSearchDistanceMult = this.CoverSearchDistanceMult.Combine(rhs.CoverSearchDistanceMult);
                ret.CoverSearchSuppressionSensitivity = this.CoverSearchSuppressionSensitivity.Combine(rhs.CoverSearchSuppressionSensitivity);
                ret.FlightHoverChance = this.FlightHoverChance.Combine(rhs.FlightHoverChance);
                ret.FlightDiveBombChance = this.FlightDiveBombChance.Combine(rhs.FlightDiveBombChance);
                ret.FlightGroundAttackChance = this.FlightGroundAttackChance.Combine(rhs.FlightGroundAttackChance);
                ret.FlightHoverTime = this.FlightHoverTime.Combine(rhs.FlightHoverTime);
                ret.FlightGroundAttackTime = this.FlightGroundAttackTime.Combine(rhs.FlightGroundAttackTime);
                ret.FlightPerchAttackChance = this.FlightPerchAttackChance.Combine(rhs.FlightPerchAttackChance);
                ret.FlightPerchAttackTime = this.FlightPerchAttackTime.Combine(rhs.FlightPerchAttackTime);
                ret.FlightFlyingAttackChance = this.FlightFlyingAttackChance.Combine(rhs.FlightFlyingAttackChance);
                ret.TunnelCostMult = this.TunnelCostMult.Combine(rhs.TunnelCostMult);
                ret.TunnelChance = this.TunnelChance.Combine(rhs.TunnelChance);
                ret.TunnelMaxDistance = this.TunnelMaxDistance.Combine(rhs.TunnelMaxDistance);
                ret.TunnelSpeedMult = this.TunnelSpeedMult.Combine(rhs.TunnelSpeedMult);
                ret.TunnelMinTime = this.TunnelMinTime.Combine(rhs.TunnelMinTime);
                ret.TunnelMaxTime = this.TunnelMaxTime.Combine(rhs.TunnelMaxTime);
                ret.TunnelMaximumTime = this.TunnelMaximumTime.Combine(rhs.TunnelMaximumTime);
                ret.TunnelCooldown = this.TunnelCooldown.Combine(rhs.TunnelCooldown);
                ret.SpaceGeneralPilotSkill = this.SpaceGeneralPilotSkill.Combine(rhs.SpaceGeneralPilotSkill);
                ret.SpaceGeneralAccuracy = this.SpaceGeneralAccuracy.Combine(rhs.SpaceGeneralAccuracy);
                ret.SpaceGeneralTargetShield = this.SpaceGeneralTargetShield.Combine(rhs.SpaceGeneralTargetShield);
                ret.SpaceGeneralAdjustment = this.SpaceGeneralAdjustment.Combine(rhs.SpaceGeneralAdjustment);
                ret.SpaceGeneralEngageManeuverChanceDirectAttack = this.SpaceGeneralEngageManeuverChanceDirectAttack.Combine(rhs.SpaceGeneralEngageManeuverChanceDirectAttack);
                ret.SpaceGeneralEngageManeuverChancePass = this.SpaceGeneralEngageManeuverChancePass.Combine(rhs.SpaceGeneralEngageManeuverChancePass);
                ret.SpaceGeneralEngageManeuverChanceLeadTurn = this.SpaceGeneralEngageManeuverChanceLeadTurn.Combine(rhs.SpaceGeneralEngageManeuverChanceLeadTurn);
                ret.SpaceGeneralEngageManeuverChanceSlideTurn = this.SpaceGeneralEngageManeuverChanceSlideTurn.Combine(rhs.SpaceGeneralEngageManeuverChanceSlideTurn);
                ret.SpaceGeneralEngageManeuverChanceBarrelRoll = this.SpaceGeneralEngageManeuverChanceBarrelRoll.Combine(rhs.SpaceGeneralEngageManeuverChanceBarrelRoll);
                ret.SpaceGeneralEvadeManeuverChanceBreak = this.SpaceGeneralEvadeManeuverChanceBreak.Combine(rhs.SpaceGeneralEvadeManeuverChanceBreak);
                ret.SpaceGeneralEvadeManeuverChanceScissors = this.SpaceGeneralEvadeManeuverChanceScissors.Combine(rhs.SpaceGeneralEvadeManeuverChanceScissors);
                ret.SpaceGeneralEvadeManeuverChanceCut = this.SpaceGeneralEvadeManeuverChanceCut.Combine(rhs.SpaceGeneralEvadeManeuverChanceCut);
                ret.SpaceGeneralEvadeManeuverChanceBoost = this.SpaceGeneralEvadeManeuverChanceBoost.Combine(rhs.SpaceGeneralEvadeManeuverChanceBoost);
                ret.SpaceGeneralAcquireManeuverChanceSliceback = this.SpaceGeneralAcquireManeuverChanceSliceback.Combine(rhs.SpaceGeneralAcquireManeuverChanceSliceback);
                ret.SpaceGeneralAcquireManeuverChanceStrafeTurn = this.SpaceGeneralAcquireManeuverChanceStrafeTurn.Combine(rhs.SpaceGeneralAcquireManeuverChanceStrafeTurn);
                ret.SpaceGeneralAcquireManeuverChanceAcquire = this.SpaceGeneralAcquireManeuverChanceAcquire.Combine(rhs.SpaceGeneralAcquireManeuverChanceAcquire);
                ret.SpaceGeneralAcquireManeuverChanceTurn = this.SpaceGeneralAcquireManeuverChanceTurn.Combine(rhs.SpaceGeneralAcquireManeuverChanceTurn);
                ret.SpaceGeneralDisengageManeuverChance = this.SpaceGeneralDisengageManeuverChance.Combine(rhs.SpaceGeneralDisengageManeuverChance);
                ret.SpaceGeneralMissileSeekingStrength = this.SpaceGeneralMissileSeekingStrength.Combine(rhs.SpaceGeneralMissileSeekingStrength);
                ret.SpaceGeneralMinTimeBetweenBoosts = this.SpaceGeneralMinTimeBetweenBoosts.Combine(rhs.SpaceGeneralMinTimeBetweenBoosts);
                ret.SpaceGeneralCombatStrafing = this.SpaceGeneralCombatStrafing.Combine(rhs.SpaceGeneralCombatStrafing);
                ret.SpaceGeneralRollsDuringBoost = this.SpaceGeneralRollsDuringBoost.Combine(rhs.SpaceGeneralRollsDuringBoost);
                ret.UnknownCSSG = this.UnknownCSSG.Combine(rhs.UnknownCSSG);
                ret.SpaceGeneralPowerWeighting = this.SpaceGeneralPowerWeighting.Combine(rhs.SpaceGeneralPowerWeighting, (l, r) => l.Combine(r));
                ret.SpaceManeuverTypesMaxTime = this.SpaceManeuverTypesMaxTime.Combine(rhs.SpaceManeuverTypesMaxTime, (l, r) => l.Combine(r));
                ret.SpaceManeuverTypesReentryDelays = this.SpaceManeuverTypesReentryDelays.Combine(rhs.SpaceManeuverTypesReentryDelays, (l, r) => l.Combine(r));
                ret.SpaceRepairDamageThreshold = this.SpaceRepairDamageThreshold.Combine(rhs.SpaceRepairDamageThreshold);
                ret.SpaceRepairFarawayDistance = this.SpaceRepairFarawayDistance.Combine(rhs.SpaceRepairFarawayDistance);
                ret.SpaceRepairPowerToUse = this.SpaceRepairPowerToUse.Combine(rhs.SpaceRepairPowerToUse);
                ret.SpaceRepairInClosePowerWeightingTables = this.SpaceRepairInClosePowerWeightingTables.Combine(rhs.SpaceRepairInClosePowerWeightingTables, (l, r) => l.Combine(r));
                ret.SpaceRepairFarawayPowerWeightingTables = this.SpaceRepairFarawayPowerWeightingTables.Combine(rhs.SpaceRepairFarawayPowerWeightingTables, (l, r) => l.Combine(r));
                ret.SpaceApproachingMinDistance = this.SpaceApproachingMinDistance.Combine(rhs.SpaceApproachingMinDistance);
                ret.SpaceApproachingWeighting = this.SpaceApproachingWeighting.Combine(rhs.SpaceApproachingWeighting, (l, r) => l.Combine(r));
                ret.SpaceDetectionRating1 = this.SpaceDetectionRating1.Combine(rhs.SpaceDetectionRating1);
                ret.SpaceDetectionRating2 = this.SpaceDetectionRating2.Combine(rhs.SpaceDetectionRating2);
                ret.SpaceDetectionRating3 = this.SpaceDetectionRating3.Combine(rhs.SpaceDetectionRating3);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.TemplateDefaultCombatStyle = this.TemplateDefaultCombatStyle.Combine(rhs.TemplateDefaultCombatStyle);
                ret.Templates = this.Templates.Combine(rhs.Templates, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool OffensiveMult;
            public bool DefensiveMult;
            public bool GroupOffensiveMult;
            public bool EquipmentScoreMultMelee;
            public bool EquipmentScoreMultMagic;
            public bool EquipmentScoreMultRanged;
            public bool EquipmentScoreMultShout;
            public bool EquipmentScoreMultUnarmed;
            public bool EquipmentScoreMultStaff;
            public bool AvoidThreatChance;
            public bool DodgeThreadChance;
            public bool EvadeThreatChance;
            public bool HealAllyDistance;
            public bool JumpCostMult;
            public bool TauntDelayMult;
            public bool MeleeAttackStaggeredMult;
            public bool MeleePowerAttackStaggeredMult;
            public bool MeleePowerAttackBlockingMult;
            public bool MeleeBashMult;
            public bool MeleeBashRecoilMult;
            public bool MeleeBashAttackMult;
            public bool MeleeBashPowerAttackMult;
            public bool MeleeSpecialAttackMult;
            public bool MeleeBlockWhenStaggeredMult;
            public bool MeleeAttackWhenStaggeredMult;
            public bool RangedAccuracyMult;
            public bool RangedThrowMult;
            public bool RangedGrenadeAdvancedThrowingMult;
            public bool RangedGrenadeFlashTargetMult;
            public bool RangedGrenadeThrowAtGroupMult;
            public bool RangedGrenadeCloseRangeAttackChanceMult;
            public bool CloseRangeDuelingCircleMult;
            public bool CloseRangeDuelingFallbackMult;
            public bool CloseRangeFlankDistance;
            public bool CloseRangeFlankingStalkTime;
            public bool CloseRangeChargeDistance;
            public bool CloseRangeChargingThrowProbability;
            public bool CloseRangeChargingSprintFastProbability;
            public bool CloseRangeChargingSideswipeProbability;
            public bool CloseRangeChargingDisengageProbability;
            public bool CloseRangeChargingThrowMaxTargets;
            public bool CloseRangeFlankingVariance;
            public bool CloseRangeRetreatChance;
            public bool CloseRangeRetreatDistanceMult;
            public bool LongRangeStrafeMult;
            public bool LongRangeAdjustRangeMult;
            public bool LongRangeCrouchMult;
            public bool LongRangeWaitMult;
            public bool LongRangeRangeMult;
            public bool LongRangeProvideSuppressiveFireMult;
            public bool LongRangeRetreatChance;
            public bool LongRangeRetreatHideTimeMult;
            public bool LongRangeRetreatDistanceMult;
            public bool CoverSearchDistanceMult;
            public bool CoverSearchSuppressionSensitivity;
            public bool FlightHoverChance;
            public bool FlightDiveBombChance;
            public bool FlightGroundAttackChance;
            public bool FlightHoverTime;
            public bool FlightGroundAttackTime;
            public bool FlightPerchAttackChance;
            public bool FlightPerchAttackTime;
            public bool FlightFlyingAttackChance;
            public bool TunnelCostMult;
            public bool TunnelChance;
            public bool TunnelMaxDistance;
            public bool TunnelSpeedMult;
            public bool TunnelMinTime;
            public bool TunnelMaxTime;
            public bool TunnelMaximumTime;
            public bool TunnelCooldown;
            public bool SpaceGeneralPilotSkill;
            public bool SpaceGeneralAccuracy;
            public bool SpaceGeneralTargetShield;
            public bool SpaceGeneralAdjustment;
            public bool SpaceGeneralEngageManeuverChanceDirectAttack;
            public bool SpaceGeneralEngageManeuverChancePass;
            public bool SpaceGeneralEngageManeuverChanceLeadTurn;
            public bool SpaceGeneralEngageManeuverChanceSlideTurn;
            public bool SpaceGeneralEngageManeuverChanceBarrelRoll;
            public bool SpaceGeneralEvadeManeuverChanceBreak;
            public bool SpaceGeneralEvadeManeuverChanceScissors;
            public bool SpaceGeneralEvadeManeuverChanceCut;
            public bool SpaceGeneralEvadeManeuverChanceBoost;
            public bool SpaceGeneralAcquireManeuverChanceSliceback;
            public bool SpaceGeneralAcquireManeuverChanceStrafeTurn;
            public bool SpaceGeneralAcquireManeuverChanceAcquire;
            public bool SpaceGeneralAcquireManeuverChanceTurn;
            public bool SpaceGeneralDisengageManeuverChance;
            public bool SpaceGeneralMissileSeekingStrength;
            public bool SpaceGeneralMinTimeBetweenBoosts;
            public bool SpaceGeneralCombatStrafing;
            public bool SpaceGeneralRollsDuringBoost;
            public bool UnknownCSSG;
            public CombatStylePowerWeighting.TranslationMask? SpaceGeneralPowerWeighting;
            public CombatStyleManeuverTiming.TranslationMask? SpaceManeuverTypesMaxTime;
            public CombatStyleManeuverTiming.TranslationMask? SpaceManeuverTypesReentryDelays;
            public bool SpaceRepairDamageThreshold;
            public bool SpaceRepairFarawayDistance;
            public bool SpaceRepairPowerToUse;
            public CombatStylePowerWeighting.TranslationMask? SpaceRepairInClosePowerWeightingTables;
            public CombatStylePowerWeighting.TranslationMask? SpaceRepairFarawayPowerWeightingTables;
            public bool SpaceApproachingMinDistance;
            public CombatStylePowerWeighting.TranslationMask? SpaceApproachingWeighting;
            public bool SpaceDetectionRating1;
            public bool SpaceDetectionRating2;
            public bool SpaceDetectionRating3;
            public bool Flags;
            public bool FNAM;
            public bool TemplateDefaultCombatStyle;
            public CombatStyleTemplates.TranslationMask? Templates;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.OffensiveMult = defaultOn;
                this.DefensiveMult = defaultOn;
                this.GroupOffensiveMult = defaultOn;
                this.EquipmentScoreMultMelee = defaultOn;
                this.EquipmentScoreMultMagic = defaultOn;
                this.EquipmentScoreMultRanged = defaultOn;
                this.EquipmentScoreMultShout = defaultOn;
                this.EquipmentScoreMultUnarmed = defaultOn;
                this.EquipmentScoreMultStaff = defaultOn;
                this.AvoidThreatChance = defaultOn;
                this.DodgeThreadChance = defaultOn;
                this.EvadeThreatChance = defaultOn;
                this.HealAllyDistance = defaultOn;
                this.JumpCostMult = defaultOn;
                this.TauntDelayMult = defaultOn;
                this.MeleeAttackStaggeredMult = defaultOn;
                this.MeleePowerAttackStaggeredMult = defaultOn;
                this.MeleePowerAttackBlockingMult = defaultOn;
                this.MeleeBashMult = defaultOn;
                this.MeleeBashRecoilMult = defaultOn;
                this.MeleeBashAttackMult = defaultOn;
                this.MeleeBashPowerAttackMult = defaultOn;
                this.MeleeSpecialAttackMult = defaultOn;
                this.MeleeBlockWhenStaggeredMult = defaultOn;
                this.MeleeAttackWhenStaggeredMult = defaultOn;
                this.RangedAccuracyMult = defaultOn;
                this.RangedThrowMult = defaultOn;
                this.RangedGrenadeAdvancedThrowingMult = defaultOn;
                this.RangedGrenadeFlashTargetMult = defaultOn;
                this.RangedGrenadeThrowAtGroupMult = defaultOn;
                this.RangedGrenadeCloseRangeAttackChanceMult = defaultOn;
                this.CloseRangeDuelingCircleMult = defaultOn;
                this.CloseRangeDuelingFallbackMult = defaultOn;
                this.CloseRangeFlankDistance = defaultOn;
                this.CloseRangeFlankingStalkTime = defaultOn;
                this.CloseRangeChargeDistance = defaultOn;
                this.CloseRangeChargingThrowProbability = defaultOn;
                this.CloseRangeChargingSprintFastProbability = defaultOn;
                this.CloseRangeChargingSideswipeProbability = defaultOn;
                this.CloseRangeChargingDisengageProbability = defaultOn;
                this.CloseRangeChargingThrowMaxTargets = defaultOn;
                this.CloseRangeFlankingVariance = defaultOn;
                this.CloseRangeRetreatChance = defaultOn;
                this.CloseRangeRetreatDistanceMult = defaultOn;
                this.LongRangeStrafeMult = defaultOn;
                this.LongRangeAdjustRangeMult = defaultOn;
                this.LongRangeCrouchMult = defaultOn;
                this.LongRangeWaitMult = defaultOn;
                this.LongRangeRangeMult = defaultOn;
                this.LongRangeProvideSuppressiveFireMult = defaultOn;
                this.LongRangeRetreatChance = defaultOn;
                this.LongRangeRetreatHideTimeMult = defaultOn;
                this.LongRangeRetreatDistanceMult = defaultOn;
                this.CoverSearchDistanceMult = defaultOn;
                this.CoverSearchSuppressionSensitivity = defaultOn;
                this.FlightHoverChance = defaultOn;
                this.FlightDiveBombChance = defaultOn;
                this.FlightGroundAttackChance = defaultOn;
                this.FlightHoverTime = defaultOn;
                this.FlightGroundAttackTime = defaultOn;
                this.FlightPerchAttackChance = defaultOn;
                this.FlightPerchAttackTime = defaultOn;
                this.FlightFlyingAttackChance = defaultOn;
                this.TunnelCostMult = defaultOn;
                this.TunnelChance = defaultOn;
                this.TunnelMaxDistance = defaultOn;
                this.TunnelSpeedMult = defaultOn;
                this.TunnelMinTime = defaultOn;
                this.TunnelMaxTime = defaultOn;
                this.TunnelMaximumTime = defaultOn;
                this.TunnelCooldown = defaultOn;
                this.SpaceGeneralPilotSkill = defaultOn;
                this.SpaceGeneralAccuracy = defaultOn;
                this.SpaceGeneralTargetShield = defaultOn;
                this.SpaceGeneralAdjustment = defaultOn;
                this.SpaceGeneralEngageManeuverChanceDirectAttack = defaultOn;
                this.SpaceGeneralEngageManeuverChancePass = defaultOn;
                this.SpaceGeneralEngageManeuverChanceLeadTurn = defaultOn;
                this.SpaceGeneralEngageManeuverChanceSlideTurn = defaultOn;
                this.SpaceGeneralEngageManeuverChanceBarrelRoll = defaultOn;
                this.SpaceGeneralEvadeManeuverChanceBreak = defaultOn;
                this.SpaceGeneralEvadeManeuverChanceScissors = defaultOn;
                this.SpaceGeneralEvadeManeuverChanceCut = defaultOn;
                this.SpaceGeneralEvadeManeuverChanceBoost = defaultOn;
                this.SpaceGeneralAcquireManeuverChanceSliceback = defaultOn;
                this.SpaceGeneralAcquireManeuverChanceStrafeTurn = defaultOn;
                this.SpaceGeneralAcquireManeuverChanceAcquire = defaultOn;
                this.SpaceGeneralAcquireManeuverChanceTurn = defaultOn;
                this.SpaceGeneralDisengageManeuverChance = defaultOn;
                this.SpaceGeneralMissileSeekingStrength = defaultOn;
                this.SpaceGeneralMinTimeBetweenBoosts = defaultOn;
                this.SpaceGeneralCombatStrafing = defaultOn;
                this.SpaceGeneralRollsDuringBoost = defaultOn;
                this.UnknownCSSG = defaultOn;
                this.SpaceRepairDamageThreshold = defaultOn;
                this.SpaceRepairFarawayDistance = defaultOn;
                this.SpaceRepairPowerToUse = defaultOn;
                this.SpaceApproachingMinDistance = defaultOn;
                this.SpaceDetectionRating1 = defaultOn;
                this.SpaceDetectionRating2 = defaultOn;
                this.SpaceDetectionRating3 = defaultOn;
                this.Flags = defaultOn;
                this.FNAM = defaultOn;
                this.TemplateDefaultCombatStyle = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((OffensiveMult, null));
                ret.Add((DefensiveMult, null));
                ret.Add((GroupOffensiveMult, null));
                ret.Add((EquipmentScoreMultMelee, null));
                ret.Add((EquipmentScoreMultMagic, null));
                ret.Add((EquipmentScoreMultRanged, null));
                ret.Add((EquipmentScoreMultShout, null));
                ret.Add((EquipmentScoreMultUnarmed, null));
                ret.Add((EquipmentScoreMultStaff, null));
                ret.Add((AvoidThreatChance, null));
                ret.Add((DodgeThreadChance, null));
                ret.Add((EvadeThreatChance, null));
                ret.Add((HealAllyDistance, null));
                ret.Add((JumpCostMult, null));
                ret.Add((TauntDelayMult, null));
                ret.Add((MeleeAttackStaggeredMult, null));
                ret.Add((MeleePowerAttackStaggeredMult, null));
                ret.Add((MeleePowerAttackBlockingMult, null));
                ret.Add((MeleeBashMult, null));
                ret.Add((MeleeBashRecoilMult, null));
                ret.Add((MeleeBashAttackMult, null));
                ret.Add((MeleeBashPowerAttackMult, null));
                ret.Add((MeleeSpecialAttackMult, null));
                ret.Add((MeleeBlockWhenStaggeredMult, null));
                ret.Add((MeleeAttackWhenStaggeredMult, null));
                ret.Add((RangedAccuracyMult, null));
                ret.Add((RangedThrowMult, null));
                ret.Add((RangedGrenadeAdvancedThrowingMult, null));
                ret.Add((RangedGrenadeFlashTargetMult, null));
                ret.Add((RangedGrenadeThrowAtGroupMult, null));
                ret.Add((RangedGrenadeCloseRangeAttackChanceMult, null));
                ret.Add((CloseRangeDuelingCircleMult, null));
                ret.Add((CloseRangeDuelingFallbackMult, null));
                ret.Add((CloseRangeFlankDistance, null));
                ret.Add((CloseRangeFlankingStalkTime, null));
                ret.Add((CloseRangeChargeDistance, null));
                ret.Add((CloseRangeChargingThrowProbability, null));
                ret.Add((CloseRangeChargingSprintFastProbability, null));
                ret.Add((CloseRangeChargingSideswipeProbability, null));
                ret.Add((CloseRangeChargingDisengageProbability, null));
                ret.Add((CloseRangeChargingThrowMaxTargets, null));
                ret.Add((CloseRangeFlankingVariance, null));
                ret.Add((CloseRangeRetreatChance, null));
                ret.Add((CloseRangeRetreatDistanceMult, null));
                ret.Add((LongRangeStrafeMult, null));
                ret.Add((LongRangeAdjustRangeMult, null));
                ret.Add((LongRangeCrouchMult, null));
                ret.Add((LongRangeWaitMult, null));
                ret.Add((LongRangeRangeMult, null));
                ret.Add((LongRangeProvideSuppressiveFireMult, null));
                ret.Add((LongRangeRetreatChance, null));
                ret.Add((LongRangeRetreatHideTimeMult, null));
                ret.Add((LongRangeRetreatDistanceMult, null));
                ret.Add((CoverSearchDistanceMult, null));
                ret.Add((CoverSearchSuppressionSensitivity, null));
                ret.Add((FlightHoverChance, null));
                ret.Add((FlightDiveBombChance, null));
                ret.Add((FlightGroundAttackChance, null));
                ret.Add((FlightHoverTime, null));
                ret.Add((FlightGroundAttackTime, null));
                ret.Add((FlightPerchAttackChance, null));
                ret.Add((FlightPerchAttackTime, null));
                ret.Add((FlightFlyingAttackChance, null));
                ret.Add((TunnelCostMult, null));
                ret.Add((TunnelChance, null));
                ret.Add((TunnelMaxDistance, null));
                ret.Add((TunnelSpeedMult, null));
                ret.Add((TunnelMinTime, null));
                ret.Add((TunnelMaxTime, null));
                ret.Add((TunnelMaximumTime, null));
                ret.Add((TunnelCooldown, null));
                ret.Add((SpaceGeneralPilotSkill, null));
                ret.Add((SpaceGeneralAccuracy, null));
                ret.Add((SpaceGeneralTargetShield, null));
                ret.Add((SpaceGeneralAdjustment, null));
                ret.Add((SpaceGeneralEngageManeuverChanceDirectAttack, null));
                ret.Add((SpaceGeneralEngageManeuverChancePass, null));
                ret.Add((SpaceGeneralEngageManeuverChanceLeadTurn, null));
                ret.Add((SpaceGeneralEngageManeuverChanceSlideTurn, null));
                ret.Add((SpaceGeneralEngageManeuverChanceBarrelRoll, null));
                ret.Add((SpaceGeneralEvadeManeuverChanceBreak, null));
                ret.Add((SpaceGeneralEvadeManeuverChanceScissors, null));
                ret.Add((SpaceGeneralEvadeManeuverChanceCut, null));
                ret.Add((SpaceGeneralEvadeManeuverChanceBoost, null));
                ret.Add((SpaceGeneralAcquireManeuverChanceSliceback, null));
                ret.Add((SpaceGeneralAcquireManeuverChanceStrafeTurn, null));
                ret.Add((SpaceGeneralAcquireManeuverChanceAcquire, null));
                ret.Add((SpaceGeneralAcquireManeuverChanceTurn, null));
                ret.Add((SpaceGeneralDisengageManeuverChance, null));
                ret.Add((SpaceGeneralMissileSeekingStrength, null));
                ret.Add((SpaceGeneralMinTimeBetweenBoosts, null));
                ret.Add((SpaceGeneralCombatStrafing, null));
                ret.Add((SpaceGeneralRollsDuringBoost, null));
                ret.Add((UnknownCSSG, null));
                ret.Add((SpaceGeneralPowerWeighting != null ? SpaceGeneralPowerWeighting.OnOverall : DefaultOn, SpaceGeneralPowerWeighting?.GetCrystal()));
                ret.Add((SpaceManeuverTypesMaxTime != null ? SpaceManeuverTypesMaxTime.OnOverall : DefaultOn, SpaceManeuverTypesMaxTime?.GetCrystal()));
                ret.Add((SpaceManeuverTypesReentryDelays != null ? SpaceManeuverTypesReentryDelays.OnOverall : DefaultOn, SpaceManeuverTypesReentryDelays?.GetCrystal()));
                ret.Add((SpaceRepairDamageThreshold, null));
                ret.Add((SpaceRepairFarawayDistance, null));
                ret.Add((SpaceRepairPowerToUse, null));
                ret.Add((SpaceRepairInClosePowerWeightingTables != null ? SpaceRepairInClosePowerWeightingTables.OnOverall : DefaultOn, SpaceRepairInClosePowerWeightingTables?.GetCrystal()));
                ret.Add((SpaceRepairFarawayPowerWeightingTables != null ? SpaceRepairFarawayPowerWeightingTables.OnOverall : DefaultOn, SpaceRepairFarawayPowerWeightingTables?.GetCrystal()));
                ret.Add((SpaceApproachingMinDistance, null));
                ret.Add((SpaceApproachingWeighting != null ? SpaceApproachingWeighting.OnOverall : DefaultOn, SpaceApproachingWeighting?.GetCrystal()));
                ret.Add((SpaceDetectionRating1, null));
                ret.Add((SpaceDetectionRating2, null));
                ret.Add((SpaceDetectionRating3, null));
                ret.Add((Flags, null));
                ret.Add((FNAM, null));
                ret.Add((TemplateDefaultCombatStyle, null));
                ret.Add((Templates != null ? Templates.OnOverall : DefaultOn, Templates?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyle_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CombatStyleCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CombatStyleSetterCommon.Instance.RemapLinks(this, mapping);
        public CombatStyle(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private CombatStyle(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal CombatStyle(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CombatStyle(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public CombatStyle(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<CombatStyle>.ToString(this);
        }

        protected override Type LinkType => typeof(ICombatStyle);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICombatStyleGetter rhs) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static CombatStyle CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CombatStyle();
            ((CombatStyleSetterCommon)((ICombatStyleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyle item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CombatStyle GetNew()
        {
            return new CombatStyle();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyle :
        ICombatStyleGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICombatStyleInternal>,
        IStarfieldMajorRecordInternal
    {
        new Percent OffensiveMult { get; set; }
        new Percent DefensiveMult { get; set; }
        new Percent GroupOffensiveMult { get; set; }
        new Single EquipmentScoreMultMelee { get; set; }
        new Single EquipmentScoreMultMagic { get; set; }
        new Single EquipmentScoreMultRanged { get; set; }
        new Single EquipmentScoreMultShout { get; set; }
        new Single EquipmentScoreMultUnarmed { get; set; }
        new Single EquipmentScoreMultStaff { get; set; }
        new Percent AvoidThreatChance { get; set; }
        new Percent DodgeThreadChance { get; set; }
        new Percent EvadeThreatChance { get; set; }
        new Single HealAllyDistance { get; set; }
        new Single JumpCostMult { get; set; }
        new Single TauntDelayMult { get; set; }
        new Single MeleeAttackStaggeredMult { get; set; }
        new Single MeleePowerAttackStaggeredMult { get; set; }
        new Single MeleePowerAttackBlockingMult { get; set; }
        new Single MeleeBashMult { get; set; }
        new Single MeleeBashRecoilMult { get; set; }
        new Single MeleeBashAttackMult { get; set; }
        new Single MeleeBashPowerAttackMult { get; set; }
        new Single MeleeSpecialAttackMult { get; set; }
        new Single MeleeBlockWhenStaggeredMult { get; set; }
        new Single MeleeAttackWhenStaggeredMult { get; set; }
        new Percent RangedAccuracyMult { get; set; }
        new Percent RangedThrowMult { get; set; }
        new Percent RangedGrenadeAdvancedThrowingMult { get; set; }
        new Percent RangedGrenadeFlashTargetMult { get; set; }
        new Percent RangedGrenadeThrowAtGroupMult { get; set; }
        new Percent RangedGrenadeCloseRangeAttackChanceMult { get; set; }
        new Percent CloseRangeDuelingCircleMult { get; set; }
        new Percent CloseRangeDuelingFallbackMult { get; set; }
        new Percent CloseRangeFlankDistance { get; set; }
        new Percent CloseRangeFlankingStalkTime { get; set; }
        new Percent CloseRangeChargeDistance { get; set; }
        new Percent CloseRangeChargingThrowProbability { get; set; }
        new Percent CloseRangeChargingSprintFastProbability { get; set; }
        new Percent CloseRangeChargingSideswipeProbability { get; set; }
        new Percent CloseRangeChargingDisengageProbability { get; set; }
        new UInt32 CloseRangeChargingThrowMaxTargets { get; set; }
        new Percent CloseRangeFlankingVariance { get; set; }
        new Percent CloseRangeRetreatChance { get; set; }
        new Percent CloseRangeRetreatDistanceMult { get; set; }
        new Percent LongRangeStrafeMult { get; set; }
        new Percent LongRangeAdjustRangeMult { get; set; }
        new Percent LongRangeCrouchMult { get; set; }
        new Percent LongRangeWaitMult { get; set; }
        new Percent LongRangeRangeMult { get; set; }
        new Percent LongRangeProvideSuppressiveFireMult { get; set; }
        new Percent LongRangeRetreatChance { get; set; }
        new Percent LongRangeRetreatHideTimeMult { get; set; }
        new Percent LongRangeRetreatDistanceMult { get; set; }
        new Percent CoverSearchDistanceMult { get; set; }
        new Percent CoverSearchSuppressionSensitivity { get; set; }
        new Percent FlightHoverChance { get; set; }
        new Percent FlightDiveBombChance { get; set; }
        new Percent FlightGroundAttackChance { get; set; }
        new Percent FlightHoverTime { get; set; }
        new Percent FlightGroundAttackTime { get; set; }
        new Percent FlightPerchAttackChance { get; set; }
        new Percent FlightPerchAttackTime { get; set; }
        new Percent FlightFlyingAttackChance { get; set; }
        new Single TunnelCostMult { get; set; }
        new Percent TunnelChance { get; set; }
        new Single TunnelMaxDistance { get; set; }
        new Single TunnelSpeedMult { get; set; }
        new Single TunnelMinTime { get; set; }
        new Single TunnelMaxTime { get; set; }
        new Single TunnelMaximumTime { get; set; }
        new Single TunnelCooldown { get; set; }
        new Percent SpaceGeneralPilotSkill { get; set; }
        new Percent SpaceGeneralAccuracy { get; set; }
        new Percent SpaceGeneralTargetShield { get; set; }
        new Single SpaceGeneralAdjustment { get; set; }
        new Percent SpaceGeneralEngageManeuverChanceDirectAttack { get; set; }
        new Percent SpaceGeneralEngageManeuverChancePass { get; set; }
        new Percent SpaceGeneralEngageManeuverChanceLeadTurn { get; set; }
        new Percent SpaceGeneralEngageManeuverChanceSlideTurn { get; set; }
        new Percent SpaceGeneralEngageManeuverChanceBarrelRoll { get; set; }
        new Percent SpaceGeneralEvadeManeuverChanceBreak { get; set; }
        new Percent SpaceGeneralEvadeManeuverChanceScissors { get; set; }
        new Percent SpaceGeneralEvadeManeuverChanceCut { get; set; }
        new Percent SpaceGeneralEvadeManeuverChanceBoost { get; set; }
        new Percent SpaceGeneralAcquireManeuverChanceSliceback { get; set; }
        new Percent SpaceGeneralAcquireManeuverChanceStrafeTurn { get; set; }
        new Percent SpaceGeneralAcquireManeuverChanceAcquire { get; set; }
        new Percent SpaceGeneralAcquireManeuverChanceTurn { get; set; }
        new Percent SpaceGeneralDisengageManeuverChance { get; set; }
        new Single SpaceGeneralMissileSeekingStrength { get; set; }
        new Single SpaceGeneralMinTimeBetweenBoosts { get; set; }
        new Boolean SpaceGeneralCombatStrafing { get; set; }
        new Boolean SpaceGeneralRollsDuringBoost { get; set; }
        new Int16 UnknownCSSG { get; set; }
        new CombatStylePowerWeighting SpaceGeneralPowerWeighting { get; set; }
        new CombatStyleManeuverTiming SpaceManeuverTypesMaxTime { get; set; }
        new CombatStyleManeuverTiming SpaceManeuverTypesReentryDelays { get; set; }
        new Percent SpaceRepairDamageThreshold { get; set; }
        new Percent SpaceRepairFarawayDistance { get; set; }
        new Percent SpaceRepairPowerToUse { get; set; }
        new CombatStylePowerWeighting SpaceRepairInClosePowerWeightingTables { get; set; }
        new CombatStylePowerWeighting SpaceRepairFarawayPowerWeightingTables { get; set; }
        new Percent SpaceApproachingMinDistance { get; set; }
        new CombatStylePowerWeighting SpaceApproachingWeighting { get; set; }
        new Single SpaceDetectionRating1 { get; set; }
        new Single SpaceDetectionRating2 { get; set; }
        new Single SpaceDetectionRating3 { get; set; }
        new CombatStyle.Flag? Flags { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new IFormLinkNullable<ICombatStyleGetter> TemplateDefaultCombatStyle { get; set; }
        new CombatStyleTemplates? Templates { get; set; }
        #region Mutagen
        new CombatStyle.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ICombatStyleInternal :
        IStarfieldMajorRecordInternal,
        ICombatStyle,
        ICombatStyleGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.CSTY)]
    public partial interface ICombatStyleGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICombatStyleGetter>,
        IMapsToGetter<ICombatStyleGetter>
    {
        static new ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        Percent OffensiveMult { get; }
        Percent DefensiveMult { get; }
        Percent GroupOffensiveMult { get; }
        Single EquipmentScoreMultMelee { get; }
        Single EquipmentScoreMultMagic { get; }
        Single EquipmentScoreMultRanged { get; }
        Single EquipmentScoreMultShout { get; }
        Single EquipmentScoreMultUnarmed { get; }
        Single EquipmentScoreMultStaff { get; }
        Percent AvoidThreatChance { get; }
        Percent DodgeThreadChance { get; }
        Percent EvadeThreatChance { get; }
        Single HealAllyDistance { get; }
        Single JumpCostMult { get; }
        Single TauntDelayMult { get; }
        Single MeleeAttackStaggeredMult { get; }
        Single MeleePowerAttackStaggeredMult { get; }
        Single MeleePowerAttackBlockingMult { get; }
        Single MeleeBashMult { get; }
        Single MeleeBashRecoilMult { get; }
        Single MeleeBashAttackMult { get; }
        Single MeleeBashPowerAttackMult { get; }
        Single MeleeSpecialAttackMult { get; }
        Single MeleeBlockWhenStaggeredMult { get; }
        Single MeleeAttackWhenStaggeredMult { get; }
        Percent RangedAccuracyMult { get; }
        Percent RangedThrowMult { get; }
        Percent RangedGrenadeAdvancedThrowingMult { get; }
        Percent RangedGrenadeFlashTargetMult { get; }
        Percent RangedGrenadeThrowAtGroupMult { get; }
        Percent RangedGrenadeCloseRangeAttackChanceMult { get; }
        Percent CloseRangeDuelingCircleMult { get; }
        Percent CloseRangeDuelingFallbackMult { get; }
        Percent CloseRangeFlankDistance { get; }
        Percent CloseRangeFlankingStalkTime { get; }
        Percent CloseRangeChargeDistance { get; }
        Percent CloseRangeChargingThrowProbability { get; }
        Percent CloseRangeChargingSprintFastProbability { get; }
        Percent CloseRangeChargingSideswipeProbability { get; }
        Percent CloseRangeChargingDisengageProbability { get; }
        UInt32 CloseRangeChargingThrowMaxTargets { get; }
        Percent CloseRangeFlankingVariance { get; }
        Percent CloseRangeRetreatChance { get; }
        Percent CloseRangeRetreatDistanceMult { get; }
        Percent LongRangeStrafeMult { get; }
        Percent LongRangeAdjustRangeMult { get; }
        Percent LongRangeCrouchMult { get; }
        Percent LongRangeWaitMult { get; }
        Percent LongRangeRangeMult { get; }
        Percent LongRangeProvideSuppressiveFireMult { get; }
        Percent LongRangeRetreatChance { get; }
        Percent LongRangeRetreatHideTimeMult { get; }
        Percent LongRangeRetreatDistanceMult { get; }
        Percent CoverSearchDistanceMult { get; }
        Percent CoverSearchSuppressionSensitivity { get; }
        Percent FlightHoverChance { get; }
        Percent FlightDiveBombChance { get; }
        Percent FlightGroundAttackChance { get; }
        Percent FlightHoverTime { get; }
        Percent FlightGroundAttackTime { get; }
        Percent FlightPerchAttackChance { get; }
        Percent FlightPerchAttackTime { get; }
        Percent FlightFlyingAttackChance { get; }
        Single TunnelCostMult { get; }
        Percent TunnelChance { get; }
        Single TunnelMaxDistance { get; }
        Single TunnelSpeedMult { get; }
        Single TunnelMinTime { get; }
        Single TunnelMaxTime { get; }
        Single TunnelMaximumTime { get; }
        Single TunnelCooldown { get; }
        Percent SpaceGeneralPilotSkill { get; }
        Percent SpaceGeneralAccuracy { get; }
        Percent SpaceGeneralTargetShield { get; }
        Single SpaceGeneralAdjustment { get; }
        Percent SpaceGeneralEngageManeuverChanceDirectAttack { get; }
        Percent SpaceGeneralEngageManeuverChancePass { get; }
        Percent SpaceGeneralEngageManeuverChanceLeadTurn { get; }
        Percent SpaceGeneralEngageManeuverChanceSlideTurn { get; }
        Percent SpaceGeneralEngageManeuverChanceBarrelRoll { get; }
        Percent SpaceGeneralEvadeManeuverChanceBreak { get; }
        Percent SpaceGeneralEvadeManeuverChanceScissors { get; }
        Percent SpaceGeneralEvadeManeuverChanceCut { get; }
        Percent SpaceGeneralEvadeManeuverChanceBoost { get; }
        Percent SpaceGeneralAcquireManeuverChanceSliceback { get; }
        Percent SpaceGeneralAcquireManeuverChanceStrafeTurn { get; }
        Percent SpaceGeneralAcquireManeuverChanceAcquire { get; }
        Percent SpaceGeneralAcquireManeuverChanceTurn { get; }
        Percent SpaceGeneralDisengageManeuverChance { get; }
        Single SpaceGeneralMissileSeekingStrength { get; }
        Single SpaceGeneralMinTimeBetweenBoosts { get; }
        Boolean SpaceGeneralCombatStrafing { get; }
        Boolean SpaceGeneralRollsDuringBoost { get; }
        Int16 UnknownCSSG { get; }
        ICombatStylePowerWeightingGetter SpaceGeneralPowerWeighting { get; }
        ICombatStyleManeuverTimingGetter SpaceManeuverTypesMaxTime { get; }
        ICombatStyleManeuverTimingGetter SpaceManeuverTypesReentryDelays { get; }
        Percent SpaceRepairDamageThreshold { get; }
        Percent SpaceRepairFarawayDistance { get; }
        Percent SpaceRepairPowerToUse { get; }
        ICombatStylePowerWeightingGetter SpaceRepairInClosePowerWeightingTables { get; }
        ICombatStylePowerWeightingGetter SpaceRepairFarawayPowerWeightingTables { get; }
        Percent SpaceApproachingMinDistance { get; }
        ICombatStylePowerWeightingGetter SpaceApproachingWeighting { get; }
        Single SpaceDetectionRating1 { get; }
        Single SpaceDetectionRating2 { get; }
        Single SpaceDetectionRating3 { get; }
        CombatStyle.Flag? Flags { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> TemplateDefaultCombatStyle { get; }
        ICombatStyleTemplatesGetter? Templates { get; }

        #region Mutagen
        CombatStyle.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleMixIn
    {
        public static void Clear(this ICombatStyleInternal item)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyle.Mask<bool> GetEqualsMask(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICombatStyleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle.TranslationMask? equalsMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CombatStyle Duplicate(
            this ICombatStyleGetter item,
            FormKey formKey,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static CombatStyle Duplicate(
            this ICombatStyleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CombatStyle_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        OffensiveMult = 7,
        DefensiveMult = 8,
        GroupOffensiveMult = 9,
        EquipmentScoreMultMelee = 10,
        EquipmentScoreMultMagic = 11,
        EquipmentScoreMultRanged = 12,
        EquipmentScoreMultShout = 13,
        EquipmentScoreMultUnarmed = 14,
        EquipmentScoreMultStaff = 15,
        AvoidThreatChance = 16,
        DodgeThreadChance = 17,
        EvadeThreatChance = 18,
        HealAllyDistance = 19,
        JumpCostMult = 20,
        TauntDelayMult = 21,
        MeleeAttackStaggeredMult = 22,
        MeleePowerAttackStaggeredMult = 23,
        MeleePowerAttackBlockingMult = 24,
        MeleeBashMult = 25,
        MeleeBashRecoilMult = 26,
        MeleeBashAttackMult = 27,
        MeleeBashPowerAttackMult = 28,
        MeleeSpecialAttackMult = 29,
        MeleeBlockWhenStaggeredMult = 30,
        MeleeAttackWhenStaggeredMult = 31,
        RangedAccuracyMult = 32,
        RangedThrowMult = 33,
        RangedGrenadeAdvancedThrowingMult = 34,
        RangedGrenadeFlashTargetMult = 35,
        RangedGrenadeThrowAtGroupMult = 36,
        RangedGrenadeCloseRangeAttackChanceMult = 37,
        CloseRangeDuelingCircleMult = 38,
        CloseRangeDuelingFallbackMult = 39,
        CloseRangeFlankDistance = 40,
        CloseRangeFlankingStalkTime = 41,
        CloseRangeChargeDistance = 42,
        CloseRangeChargingThrowProbability = 43,
        CloseRangeChargingSprintFastProbability = 44,
        CloseRangeChargingSideswipeProbability = 45,
        CloseRangeChargingDisengageProbability = 46,
        CloseRangeChargingThrowMaxTargets = 47,
        CloseRangeFlankingVariance = 48,
        CloseRangeRetreatChance = 49,
        CloseRangeRetreatDistanceMult = 50,
        LongRangeStrafeMult = 51,
        LongRangeAdjustRangeMult = 52,
        LongRangeCrouchMult = 53,
        LongRangeWaitMult = 54,
        LongRangeRangeMult = 55,
        LongRangeProvideSuppressiveFireMult = 56,
        LongRangeRetreatChance = 57,
        LongRangeRetreatHideTimeMult = 58,
        LongRangeRetreatDistanceMult = 59,
        CoverSearchDistanceMult = 60,
        CoverSearchSuppressionSensitivity = 61,
        FlightHoverChance = 62,
        FlightDiveBombChance = 63,
        FlightGroundAttackChance = 64,
        FlightHoverTime = 65,
        FlightGroundAttackTime = 66,
        FlightPerchAttackChance = 67,
        FlightPerchAttackTime = 68,
        FlightFlyingAttackChance = 69,
        TunnelCostMult = 70,
        TunnelChance = 71,
        TunnelMaxDistance = 72,
        TunnelSpeedMult = 73,
        TunnelMinTime = 74,
        TunnelMaxTime = 75,
        TunnelMaximumTime = 76,
        TunnelCooldown = 77,
        SpaceGeneralPilotSkill = 78,
        SpaceGeneralAccuracy = 79,
        SpaceGeneralTargetShield = 80,
        SpaceGeneralAdjustment = 81,
        SpaceGeneralEngageManeuverChanceDirectAttack = 82,
        SpaceGeneralEngageManeuverChancePass = 83,
        SpaceGeneralEngageManeuverChanceLeadTurn = 84,
        SpaceGeneralEngageManeuverChanceSlideTurn = 85,
        SpaceGeneralEngageManeuverChanceBarrelRoll = 86,
        SpaceGeneralEvadeManeuverChanceBreak = 87,
        SpaceGeneralEvadeManeuverChanceScissors = 88,
        SpaceGeneralEvadeManeuverChanceCut = 89,
        SpaceGeneralEvadeManeuverChanceBoost = 90,
        SpaceGeneralAcquireManeuverChanceSliceback = 91,
        SpaceGeneralAcquireManeuverChanceStrafeTurn = 92,
        SpaceGeneralAcquireManeuverChanceAcquire = 93,
        SpaceGeneralAcquireManeuverChanceTurn = 94,
        SpaceGeneralDisengageManeuverChance = 95,
        SpaceGeneralMissileSeekingStrength = 96,
        SpaceGeneralMinTimeBetweenBoosts = 97,
        SpaceGeneralCombatStrafing = 98,
        SpaceGeneralRollsDuringBoost = 99,
        UnknownCSSG = 100,
        SpaceGeneralPowerWeighting = 101,
        SpaceManeuverTypesMaxTime = 102,
        SpaceManeuverTypesReentryDelays = 103,
        SpaceRepairDamageThreshold = 104,
        SpaceRepairFarawayDistance = 105,
        SpaceRepairPowerToUse = 106,
        SpaceRepairInClosePowerWeightingTables = 107,
        SpaceRepairFarawayPowerWeightingTables = 108,
        SpaceApproachingMinDistance = 109,
        SpaceApproachingWeighting = 110,
        SpaceDetectionRating1 = 111,
        SpaceDetectionRating2 = 112,
        SpaceDetectionRating3 = 113,
        Flags = 114,
        FNAM = 115,
        TemplateDefaultCombatStyle = 116,
        Templates = 117,
    }
    #endregion

    #region Registration
    internal partial class CombatStyle_Registration : ILoquiRegistration
    {
        public static readonly CombatStyle_Registration Instance = new CombatStyle_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 111;

        public const ushort FieldCount = 118;

        public static readonly Type MaskType = typeof(CombatStyle.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyle.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyle);

        public static readonly Type GetterType = typeof(ICombatStyleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyle);

        public static readonly Type? InternalSetterType = typeof(ICombatStyleInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.CombatStyle";

        public const string Name = "CombatStyle";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSTY;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CSTY);
            var all = RecordCollection.Factory(
                RecordTypes.CSTY,
                RecordTypes.CSGD,
                RecordTypes.CSME,
                RecordTypes.CSRA,
                RecordTypes.CSCR,
                RecordTypes.CSLR,
                RecordTypes.CSCV,
                RecordTypes.CSFL,
                RecordTypes.CSTN,
                RecordTypes.CSSG,
                RecordTypes.CSSM,
                RecordTypes.CSSR,
                RecordTypes.CSSA,
                RecordTypes.CSSD,
                RecordTypes.DATA,
                RecordTypes.FNAM,
                RecordTypes.TNAM,
                RecordTypes.UNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CombatStyleSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly CombatStyleSetterCommon Instance = new CombatStyleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleInternal item)
        {
            ClearPartial();
            item.OffensiveMult = default(Percent);
            item.DefensiveMult = default(Percent);
            item.GroupOffensiveMult = default(Percent);
            item.EquipmentScoreMultMelee = default(Single);
            item.EquipmentScoreMultMagic = default(Single);
            item.EquipmentScoreMultRanged = default(Single);
            item.EquipmentScoreMultShout = default(Single);
            item.EquipmentScoreMultUnarmed = default(Single);
            item.EquipmentScoreMultStaff = default(Single);
            item.AvoidThreatChance = default(Percent);
            item.DodgeThreadChance = default(Percent);
            item.EvadeThreatChance = default(Percent);
            item.HealAllyDistance = default(Single);
            item.JumpCostMult = default(Single);
            item.TauntDelayMult = default(Single);
            item.MeleeAttackStaggeredMult = default(Single);
            item.MeleePowerAttackStaggeredMult = default(Single);
            item.MeleePowerAttackBlockingMult = default(Single);
            item.MeleeBashMult = default(Single);
            item.MeleeBashRecoilMult = default(Single);
            item.MeleeBashAttackMult = default(Single);
            item.MeleeBashPowerAttackMult = default(Single);
            item.MeleeSpecialAttackMult = default(Single);
            item.MeleeBlockWhenStaggeredMult = default(Single);
            item.MeleeAttackWhenStaggeredMult = default(Single);
            item.RangedAccuracyMult = default(Percent);
            item.RangedThrowMult = default(Percent);
            item.RangedGrenadeAdvancedThrowingMult = default(Percent);
            item.RangedGrenadeFlashTargetMult = default(Percent);
            item.RangedGrenadeThrowAtGroupMult = default(Percent);
            item.RangedGrenadeCloseRangeAttackChanceMult = default(Percent);
            item.CloseRangeDuelingCircleMult = default(Percent);
            item.CloseRangeDuelingFallbackMult = default(Percent);
            item.CloseRangeFlankDistance = default(Percent);
            item.CloseRangeFlankingStalkTime = default(Percent);
            item.CloseRangeChargeDistance = default(Percent);
            item.CloseRangeChargingThrowProbability = default(Percent);
            item.CloseRangeChargingSprintFastProbability = default(Percent);
            item.CloseRangeChargingSideswipeProbability = default(Percent);
            item.CloseRangeChargingDisengageProbability = default(Percent);
            item.CloseRangeChargingThrowMaxTargets = default(UInt32);
            item.CloseRangeFlankingVariance = default(Percent);
            item.CloseRangeRetreatChance = default(Percent);
            item.CloseRangeRetreatDistanceMult = default(Percent);
            item.LongRangeStrafeMult = default(Percent);
            item.LongRangeAdjustRangeMult = default(Percent);
            item.LongRangeCrouchMult = default(Percent);
            item.LongRangeWaitMult = default(Percent);
            item.LongRangeRangeMult = default(Percent);
            item.LongRangeProvideSuppressiveFireMult = default(Percent);
            item.LongRangeRetreatChance = default(Percent);
            item.LongRangeRetreatHideTimeMult = default(Percent);
            item.LongRangeRetreatDistanceMult = default(Percent);
            item.CoverSearchDistanceMult = default(Percent);
            item.CoverSearchSuppressionSensitivity = default(Percent);
            item.FlightHoverChance = default(Percent);
            item.FlightDiveBombChance = default(Percent);
            item.FlightGroundAttackChance = default(Percent);
            item.FlightHoverTime = default(Percent);
            item.FlightGroundAttackTime = default(Percent);
            item.FlightPerchAttackChance = default(Percent);
            item.FlightPerchAttackTime = default(Percent);
            item.FlightFlyingAttackChance = default(Percent);
            item.TunnelCostMult = default(Single);
            item.TunnelChance = default(Percent);
            item.TunnelMaxDistance = default(Single);
            item.TunnelSpeedMult = default(Single);
            item.TunnelMinTime = default(Single);
            item.TunnelMaxTime = default(Single);
            item.TunnelMaximumTime = default(Single);
            item.TunnelCooldown = default(Single);
            item.SpaceGeneralPilotSkill = default(Percent);
            item.SpaceGeneralAccuracy = default(Percent);
            item.SpaceGeneralTargetShield = default(Percent);
            item.SpaceGeneralAdjustment = default(Single);
            item.SpaceGeneralEngageManeuverChanceDirectAttack = default(Percent);
            item.SpaceGeneralEngageManeuverChancePass = default(Percent);
            item.SpaceGeneralEngageManeuverChanceLeadTurn = default(Percent);
            item.SpaceGeneralEngageManeuverChanceSlideTurn = default(Percent);
            item.SpaceGeneralEngageManeuverChanceBarrelRoll = default(Percent);
            item.SpaceGeneralEvadeManeuverChanceBreak = default(Percent);
            item.SpaceGeneralEvadeManeuverChanceScissors = default(Percent);
            item.SpaceGeneralEvadeManeuverChanceCut = default(Percent);
            item.SpaceGeneralEvadeManeuverChanceBoost = default(Percent);
            item.SpaceGeneralAcquireManeuverChanceSliceback = default(Percent);
            item.SpaceGeneralAcquireManeuverChanceStrafeTurn = default(Percent);
            item.SpaceGeneralAcquireManeuverChanceAcquire = default(Percent);
            item.SpaceGeneralAcquireManeuverChanceTurn = default(Percent);
            item.SpaceGeneralDisengageManeuverChance = default(Percent);
            item.SpaceGeneralMissileSeekingStrength = default(Single);
            item.SpaceGeneralMinTimeBetweenBoosts = default(Single);
            item.SpaceGeneralCombatStrafing = default(Boolean);
            item.SpaceGeneralRollsDuringBoost = default(Boolean);
            item.UnknownCSSG = default(Int16);
            item.SpaceGeneralPowerWeighting.Clear();
            item.SpaceManeuverTypesMaxTime.Clear();
            item.SpaceManeuverTypesReentryDelays.Clear();
            item.SpaceRepairDamageThreshold = default(Percent);
            item.SpaceRepairFarawayDistance = default(Percent);
            item.SpaceRepairPowerToUse = default(Percent);
            item.SpaceRepairInClosePowerWeightingTables.Clear();
            item.SpaceRepairFarawayPowerWeightingTables.Clear();
            item.SpaceApproachingMinDistance = default(Percent);
            item.SpaceApproachingWeighting.Clear();
            item.SpaceDetectionRating1 = default(Single);
            item.SpaceDetectionRating2 = default(Single);
            item.SpaceDetectionRating3 = default(Single);
            item.Flags = default;
            item.FNAM = default;
            item.TemplateDefaultCombatStyle.Clear();
            item.Templates = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyle obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.TemplateDefaultCombatStyle.Relink(mapping);
            obj.Templates?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICombatStyleInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStyleBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CombatStyleBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CombatStyleCommon : StarfieldMajorRecordCommon
    {
        public new static readonly CombatStyleCommon Instance = new CombatStyleCommon();

        public CombatStyle.Mask<bool> GetEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyle.Mask<bool>(false);
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.OffensiveMult = item.OffensiveMult.Equals(rhs.OffensiveMult);
            ret.DefensiveMult = item.DefensiveMult.Equals(rhs.DefensiveMult);
            ret.GroupOffensiveMult = item.GroupOffensiveMult.Equals(rhs.GroupOffensiveMult);
            ret.EquipmentScoreMultMelee = item.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee);
            ret.EquipmentScoreMultMagic = item.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic);
            ret.EquipmentScoreMultRanged = item.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged);
            ret.EquipmentScoreMultShout = item.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout);
            ret.EquipmentScoreMultUnarmed = item.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed);
            ret.EquipmentScoreMultStaff = item.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff);
            ret.AvoidThreatChance = item.AvoidThreatChance.Equals(rhs.AvoidThreatChance);
            ret.DodgeThreadChance = item.DodgeThreadChance.Equals(rhs.DodgeThreadChance);
            ret.EvadeThreatChance = item.EvadeThreatChance.Equals(rhs.EvadeThreatChance);
            ret.HealAllyDistance = item.HealAllyDistance.EqualsWithin(rhs.HealAllyDistance);
            ret.JumpCostMult = item.JumpCostMult.EqualsWithin(rhs.JumpCostMult);
            ret.TauntDelayMult = item.TauntDelayMult.EqualsWithin(rhs.TauntDelayMult);
            ret.MeleeAttackStaggeredMult = item.MeleeAttackStaggeredMult.EqualsWithin(rhs.MeleeAttackStaggeredMult);
            ret.MeleePowerAttackStaggeredMult = item.MeleePowerAttackStaggeredMult.EqualsWithin(rhs.MeleePowerAttackStaggeredMult);
            ret.MeleePowerAttackBlockingMult = item.MeleePowerAttackBlockingMult.EqualsWithin(rhs.MeleePowerAttackBlockingMult);
            ret.MeleeBashMult = item.MeleeBashMult.EqualsWithin(rhs.MeleeBashMult);
            ret.MeleeBashRecoilMult = item.MeleeBashRecoilMult.EqualsWithin(rhs.MeleeBashRecoilMult);
            ret.MeleeBashAttackMult = item.MeleeBashAttackMult.EqualsWithin(rhs.MeleeBashAttackMult);
            ret.MeleeBashPowerAttackMult = item.MeleeBashPowerAttackMult.EqualsWithin(rhs.MeleeBashPowerAttackMult);
            ret.MeleeSpecialAttackMult = item.MeleeSpecialAttackMult.EqualsWithin(rhs.MeleeSpecialAttackMult);
            ret.MeleeBlockWhenStaggeredMult = item.MeleeBlockWhenStaggeredMult.EqualsWithin(rhs.MeleeBlockWhenStaggeredMult);
            ret.MeleeAttackWhenStaggeredMult = item.MeleeAttackWhenStaggeredMult.EqualsWithin(rhs.MeleeAttackWhenStaggeredMult);
            ret.RangedAccuracyMult = item.RangedAccuracyMult.Equals(rhs.RangedAccuracyMult);
            ret.RangedThrowMult = item.RangedThrowMult.Equals(rhs.RangedThrowMult);
            ret.RangedGrenadeAdvancedThrowingMult = item.RangedGrenadeAdvancedThrowingMult.Equals(rhs.RangedGrenadeAdvancedThrowingMult);
            ret.RangedGrenadeFlashTargetMult = item.RangedGrenadeFlashTargetMult.Equals(rhs.RangedGrenadeFlashTargetMult);
            ret.RangedGrenadeThrowAtGroupMult = item.RangedGrenadeThrowAtGroupMult.Equals(rhs.RangedGrenadeThrowAtGroupMult);
            ret.RangedGrenadeCloseRangeAttackChanceMult = item.RangedGrenadeCloseRangeAttackChanceMult.Equals(rhs.RangedGrenadeCloseRangeAttackChanceMult);
            ret.CloseRangeDuelingCircleMult = item.CloseRangeDuelingCircleMult.Equals(rhs.CloseRangeDuelingCircleMult);
            ret.CloseRangeDuelingFallbackMult = item.CloseRangeDuelingFallbackMult.Equals(rhs.CloseRangeDuelingFallbackMult);
            ret.CloseRangeFlankDistance = item.CloseRangeFlankDistance.Equals(rhs.CloseRangeFlankDistance);
            ret.CloseRangeFlankingStalkTime = item.CloseRangeFlankingStalkTime.Equals(rhs.CloseRangeFlankingStalkTime);
            ret.CloseRangeChargeDistance = item.CloseRangeChargeDistance.Equals(rhs.CloseRangeChargeDistance);
            ret.CloseRangeChargingThrowProbability = item.CloseRangeChargingThrowProbability.Equals(rhs.CloseRangeChargingThrowProbability);
            ret.CloseRangeChargingSprintFastProbability = item.CloseRangeChargingSprintFastProbability.Equals(rhs.CloseRangeChargingSprintFastProbability);
            ret.CloseRangeChargingSideswipeProbability = item.CloseRangeChargingSideswipeProbability.Equals(rhs.CloseRangeChargingSideswipeProbability);
            ret.CloseRangeChargingDisengageProbability = item.CloseRangeChargingDisengageProbability.Equals(rhs.CloseRangeChargingDisengageProbability);
            ret.CloseRangeChargingThrowMaxTargets = item.CloseRangeChargingThrowMaxTargets == rhs.CloseRangeChargingThrowMaxTargets;
            ret.CloseRangeFlankingVariance = item.CloseRangeFlankingVariance.Equals(rhs.CloseRangeFlankingVariance);
            ret.CloseRangeRetreatChance = item.CloseRangeRetreatChance.Equals(rhs.CloseRangeRetreatChance);
            ret.CloseRangeRetreatDistanceMult = item.CloseRangeRetreatDistanceMult.Equals(rhs.CloseRangeRetreatDistanceMult);
            ret.LongRangeStrafeMult = item.LongRangeStrafeMult.Equals(rhs.LongRangeStrafeMult);
            ret.LongRangeAdjustRangeMult = item.LongRangeAdjustRangeMult.Equals(rhs.LongRangeAdjustRangeMult);
            ret.LongRangeCrouchMult = item.LongRangeCrouchMult.Equals(rhs.LongRangeCrouchMult);
            ret.LongRangeWaitMult = item.LongRangeWaitMult.Equals(rhs.LongRangeWaitMult);
            ret.LongRangeRangeMult = item.LongRangeRangeMult.Equals(rhs.LongRangeRangeMult);
            ret.LongRangeProvideSuppressiveFireMult = item.LongRangeProvideSuppressiveFireMult.Equals(rhs.LongRangeProvideSuppressiveFireMult);
            ret.LongRangeRetreatChance = item.LongRangeRetreatChance.Equals(rhs.LongRangeRetreatChance);
            ret.LongRangeRetreatHideTimeMult = item.LongRangeRetreatHideTimeMult.Equals(rhs.LongRangeRetreatHideTimeMult);
            ret.LongRangeRetreatDistanceMult = item.LongRangeRetreatDistanceMult.Equals(rhs.LongRangeRetreatDistanceMult);
            ret.CoverSearchDistanceMult = item.CoverSearchDistanceMult.Equals(rhs.CoverSearchDistanceMult);
            ret.CoverSearchSuppressionSensitivity = item.CoverSearchSuppressionSensitivity.Equals(rhs.CoverSearchSuppressionSensitivity);
            ret.FlightHoverChance = item.FlightHoverChance.Equals(rhs.FlightHoverChance);
            ret.FlightDiveBombChance = item.FlightDiveBombChance.Equals(rhs.FlightDiveBombChance);
            ret.FlightGroundAttackChance = item.FlightGroundAttackChance.Equals(rhs.FlightGroundAttackChance);
            ret.FlightHoverTime = item.FlightHoverTime.Equals(rhs.FlightHoverTime);
            ret.FlightGroundAttackTime = item.FlightGroundAttackTime.Equals(rhs.FlightGroundAttackTime);
            ret.FlightPerchAttackChance = item.FlightPerchAttackChance.Equals(rhs.FlightPerchAttackChance);
            ret.FlightPerchAttackTime = item.FlightPerchAttackTime.Equals(rhs.FlightPerchAttackTime);
            ret.FlightFlyingAttackChance = item.FlightFlyingAttackChance.Equals(rhs.FlightFlyingAttackChance);
            ret.TunnelCostMult = item.TunnelCostMult.EqualsWithin(rhs.TunnelCostMult);
            ret.TunnelChance = item.TunnelChance.Equals(rhs.TunnelChance);
            ret.TunnelMaxDistance = item.TunnelMaxDistance.EqualsWithin(rhs.TunnelMaxDistance);
            ret.TunnelSpeedMult = item.TunnelSpeedMult.EqualsWithin(rhs.TunnelSpeedMult);
            ret.TunnelMinTime = item.TunnelMinTime.EqualsWithin(rhs.TunnelMinTime);
            ret.TunnelMaxTime = item.TunnelMaxTime.EqualsWithin(rhs.TunnelMaxTime);
            ret.TunnelMaximumTime = item.TunnelMaximumTime.EqualsWithin(rhs.TunnelMaximumTime);
            ret.TunnelCooldown = item.TunnelCooldown.EqualsWithin(rhs.TunnelCooldown);
            ret.SpaceGeneralPilotSkill = item.SpaceGeneralPilotSkill.Equals(rhs.SpaceGeneralPilotSkill);
            ret.SpaceGeneralAccuracy = item.SpaceGeneralAccuracy.Equals(rhs.SpaceGeneralAccuracy);
            ret.SpaceGeneralTargetShield = item.SpaceGeneralTargetShield.Equals(rhs.SpaceGeneralTargetShield);
            ret.SpaceGeneralAdjustment = item.SpaceGeneralAdjustment.EqualsWithin(rhs.SpaceGeneralAdjustment);
            ret.SpaceGeneralEngageManeuverChanceDirectAttack = item.SpaceGeneralEngageManeuverChanceDirectAttack.Equals(rhs.SpaceGeneralEngageManeuverChanceDirectAttack);
            ret.SpaceGeneralEngageManeuverChancePass = item.SpaceGeneralEngageManeuverChancePass.Equals(rhs.SpaceGeneralEngageManeuverChancePass);
            ret.SpaceGeneralEngageManeuverChanceLeadTurn = item.SpaceGeneralEngageManeuverChanceLeadTurn.Equals(rhs.SpaceGeneralEngageManeuverChanceLeadTurn);
            ret.SpaceGeneralEngageManeuverChanceSlideTurn = item.SpaceGeneralEngageManeuverChanceSlideTurn.Equals(rhs.SpaceGeneralEngageManeuverChanceSlideTurn);
            ret.SpaceGeneralEngageManeuverChanceBarrelRoll = item.SpaceGeneralEngageManeuverChanceBarrelRoll.Equals(rhs.SpaceGeneralEngageManeuverChanceBarrelRoll);
            ret.SpaceGeneralEvadeManeuverChanceBreak = item.SpaceGeneralEvadeManeuverChanceBreak.Equals(rhs.SpaceGeneralEvadeManeuverChanceBreak);
            ret.SpaceGeneralEvadeManeuverChanceScissors = item.SpaceGeneralEvadeManeuverChanceScissors.Equals(rhs.SpaceGeneralEvadeManeuverChanceScissors);
            ret.SpaceGeneralEvadeManeuverChanceCut = item.SpaceGeneralEvadeManeuverChanceCut.Equals(rhs.SpaceGeneralEvadeManeuverChanceCut);
            ret.SpaceGeneralEvadeManeuverChanceBoost = item.SpaceGeneralEvadeManeuverChanceBoost.Equals(rhs.SpaceGeneralEvadeManeuverChanceBoost);
            ret.SpaceGeneralAcquireManeuverChanceSliceback = item.SpaceGeneralAcquireManeuverChanceSliceback.Equals(rhs.SpaceGeneralAcquireManeuverChanceSliceback);
            ret.SpaceGeneralAcquireManeuverChanceStrafeTurn = item.SpaceGeneralAcquireManeuverChanceStrafeTurn.Equals(rhs.SpaceGeneralAcquireManeuverChanceStrafeTurn);
            ret.SpaceGeneralAcquireManeuverChanceAcquire = item.SpaceGeneralAcquireManeuverChanceAcquire.Equals(rhs.SpaceGeneralAcquireManeuverChanceAcquire);
            ret.SpaceGeneralAcquireManeuverChanceTurn = item.SpaceGeneralAcquireManeuverChanceTurn.Equals(rhs.SpaceGeneralAcquireManeuverChanceTurn);
            ret.SpaceGeneralDisengageManeuverChance = item.SpaceGeneralDisengageManeuverChance.Equals(rhs.SpaceGeneralDisengageManeuverChance);
            ret.SpaceGeneralMissileSeekingStrength = item.SpaceGeneralMissileSeekingStrength.EqualsWithin(rhs.SpaceGeneralMissileSeekingStrength);
            ret.SpaceGeneralMinTimeBetweenBoosts = item.SpaceGeneralMinTimeBetweenBoosts.EqualsWithin(rhs.SpaceGeneralMinTimeBetweenBoosts);
            ret.SpaceGeneralCombatStrafing = item.SpaceGeneralCombatStrafing == rhs.SpaceGeneralCombatStrafing;
            ret.SpaceGeneralRollsDuringBoost = item.SpaceGeneralRollsDuringBoost == rhs.SpaceGeneralRollsDuringBoost;
            ret.UnknownCSSG = item.UnknownCSSG == rhs.UnknownCSSG;
            ret.SpaceGeneralPowerWeighting = MaskItemExt.Factory(item.SpaceGeneralPowerWeighting.GetEqualsMask(rhs.SpaceGeneralPowerWeighting, include), include);
            ret.SpaceManeuverTypesMaxTime = MaskItemExt.Factory(item.SpaceManeuverTypesMaxTime.GetEqualsMask(rhs.SpaceManeuverTypesMaxTime, include), include);
            ret.SpaceManeuverTypesReentryDelays = MaskItemExt.Factory(item.SpaceManeuverTypesReentryDelays.GetEqualsMask(rhs.SpaceManeuverTypesReentryDelays, include), include);
            ret.SpaceRepairDamageThreshold = item.SpaceRepairDamageThreshold.Equals(rhs.SpaceRepairDamageThreshold);
            ret.SpaceRepairFarawayDistance = item.SpaceRepairFarawayDistance.Equals(rhs.SpaceRepairFarawayDistance);
            ret.SpaceRepairPowerToUse = item.SpaceRepairPowerToUse.Equals(rhs.SpaceRepairPowerToUse);
            ret.SpaceRepairInClosePowerWeightingTables = MaskItemExt.Factory(item.SpaceRepairInClosePowerWeightingTables.GetEqualsMask(rhs.SpaceRepairInClosePowerWeightingTables, include), include);
            ret.SpaceRepairFarawayPowerWeightingTables = MaskItemExt.Factory(item.SpaceRepairFarawayPowerWeightingTables.GetEqualsMask(rhs.SpaceRepairFarawayPowerWeightingTables, include), include);
            ret.SpaceApproachingMinDistance = item.SpaceApproachingMinDistance.Equals(rhs.SpaceApproachingMinDistance);
            ret.SpaceApproachingWeighting = MaskItemExt.Factory(item.SpaceApproachingWeighting.GetEqualsMask(rhs.SpaceApproachingWeighting, include), include);
            ret.SpaceDetectionRating1 = item.SpaceDetectionRating1.EqualsWithin(rhs.SpaceDetectionRating1);
            ret.SpaceDetectionRating2 = item.SpaceDetectionRating2.EqualsWithin(rhs.SpaceDetectionRating2);
            ret.SpaceDetectionRating3 = item.SpaceDetectionRating3.EqualsWithin(rhs.SpaceDetectionRating3);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.TemplateDefaultCombatStyle = item.TemplateDefaultCombatStyle.Equals(rhs.TemplateDefaultCombatStyle);
            ret.Templates = EqualsMaskHelper.EqualsHelper(
                item.Templates,
                rhs.Templates,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICombatStyleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CombatStyle =>");
            }
            else
            {
                sb.AppendLine($"{name} (CombatStyle) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICombatStyleGetter item,
            StructuredStringBuilder sb,
            CombatStyle.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.OffensiveMult ?? true)
            {
                sb.AppendItem(item.OffensiveMult, "OffensiveMult");
            }
            if (printMask?.DefensiveMult ?? true)
            {
                sb.AppendItem(item.DefensiveMult, "DefensiveMult");
            }
            if (printMask?.GroupOffensiveMult ?? true)
            {
                sb.AppendItem(item.GroupOffensiveMult, "GroupOffensiveMult");
            }
            if (printMask?.EquipmentScoreMultMelee ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
            }
            if (printMask?.EquipmentScoreMultMagic ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
            }
            if (printMask?.EquipmentScoreMultRanged ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
            }
            if (printMask?.EquipmentScoreMultShout ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultShout, "EquipmentScoreMultShout");
            }
            if (printMask?.EquipmentScoreMultUnarmed ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
            }
            if (printMask?.EquipmentScoreMultStaff ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
            }
            if (printMask?.AvoidThreatChance ?? true)
            {
                sb.AppendItem(item.AvoidThreatChance, "AvoidThreatChance");
            }
            if (printMask?.DodgeThreadChance ?? true)
            {
                sb.AppendItem(item.DodgeThreadChance, "DodgeThreadChance");
            }
            if (printMask?.EvadeThreatChance ?? true)
            {
                sb.AppendItem(item.EvadeThreatChance, "EvadeThreatChance");
            }
            if (printMask?.HealAllyDistance ?? true)
            {
                sb.AppendItem(item.HealAllyDistance, "HealAllyDistance");
            }
            if (printMask?.JumpCostMult ?? true)
            {
                sb.AppendItem(item.JumpCostMult, "JumpCostMult");
            }
            if (printMask?.TauntDelayMult ?? true)
            {
                sb.AppendItem(item.TauntDelayMult, "TauntDelayMult");
            }
            if (printMask?.MeleeAttackStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
            }
            if (printMask?.MeleePowerAttackStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
            }
            if (printMask?.MeleePowerAttackBlockingMult ?? true)
            {
                sb.AppendItem(item.MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
            }
            if (printMask?.MeleeBashMult ?? true)
            {
                sb.AppendItem(item.MeleeBashMult, "MeleeBashMult");
            }
            if (printMask?.MeleeBashRecoilMult ?? true)
            {
                sb.AppendItem(item.MeleeBashRecoilMult, "MeleeBashRecoilMult");
            }
            if (printMask?.MeleeBashAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeBashAttackMult, "MeleeBashAttackMult");
            }
            if (printMask?.MeleeBashPowerAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
            }
            if (printMask?.MeleeSpecialAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
            }
            if (printMask?.MeleeBlockWhenStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
            }
            if (printMask?.MeleeAttackWhenStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
            }
            if (printMask?.RangedAccuracyMult ?? true)
            {
                sb.AppendItem(item.RangedAccuracyMult, "RangedAccuracyMult");
            }
            if (printMask?.RangedThrowMult ?? true)
            {
                sb.AppendItem(item.RangedThrowMult, "RangedThrowMult");
            }
            if (printMask?.RangedGrenadeAdvancedThrowingMult ?? true)
            {
                sb.AppendItem(item.RangedGrenadeAdvancedThrowingMult, "RangedGrenadeAdvancedThrowingMult");
            }
            if (printMask?.RangedGrenadeFlashTargetMult ?? true)
            {
                sb.AppendItem(item.RangedGrenadeFlashTargetMult, "RangedGrenadeFlashTargetMult");
            }
            if (printMask?.RangedGrenadeThrowAtGroupMult ?? true)
            {
                sb.AppendItem(item.RangedGrenadeThrowAtGroupMult, "RangedGrenadeThrowAtGroupMult");
            }
            if (printMask?.RangedGrenadeCloseRangeAttackChanceMult ?? true)
            {
                sb.AppendItem(item.RangedGrenadeCloseRangeAttackChanceMult, "RangedGrenadeCloseRangeAttackChanceMult");
            }
            if (printMask?.CloseRangeDuelingCircleMult ?? true)
            {
                sb.AppendItem(item.CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
            }
            if (printMask?.CloseRangeDuelingFallbackMult ?? true)
            {
                sb.AppendItem(item.CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
            }
            if (printMask?.CloseRangeFlankDistance ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankDistance, "CloseRangeFlankDistance");
            }
            if (printMask?.CloseRangeFlankingStalkTime ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
            }
            if (printMask?.CloseRangeChargeDistance ?? true)
            {
                sb.AppendItem(item.CloseRangeChargeDistance, "CloseRangeChargeDistance");
            }
            if (printMask?.CloseRangeChargingThrowProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
            }
            if (printMask?.CloseRangeChargingSprintFastProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
            }
            if (printMask?.CloseRangeChargingSideswipeProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
            }
            if (printMask?.CloseRangeChargingDisengageProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
            }
            if (printMask?.CloseRangeChargingThrowMaxTargets ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
            }
            if (printMask?.CloseRangeFlankingVariance ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
            }
            if (printMask?.CloseRangeRetreatChance ?? true)
            {
                sb.AppendItem(item.CloseRangeRetreatChance, "CloseRangeRetreatChance");
            }
            if (printMask?.CloseRangeRetreatDistanceMult ?? true)
            {
                sb.AppendItem(item.CloseRangeRetreatDistanceMult, "CloseRangeRetreatDistanceMult");
            }
            if (printMask?.LongRangeStrafeMult ?? true)
            {
                sb.AppendItem(item.LongRangeStrafeMult, "LongRangeStrafeMult");
            }
            if (printMask?.LongRangeAdjustRangeMult ?? true)
            {
                sb.AppendItem(item.LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
            }
            if (printMask?.LongRangeCrouchMult ?? true)
            {
                sb.AppendItem(item.LongRangeCrouchMult, "LongRangeCrouchMult");
            }
            if (printMask?.LongRangeWaitMult ?? true)
            {
                sb.AppendItem(item.LongRangeWaitMult, "LongRangeWaitMult");
            }
            if (printMask?.LongRangeRangeMult ?? true)
            {
                sb.AppendItem(item.LongRangeRangeMult, "LongRangeRangeMult");
            }
            if (printMask?.LongRangeProvideSuppressiveFireMult ?? true)
            {
                sb.AppendItem(item.LongRangeProvideSuppressiveFireMult, "LongRangeProvideSuppressiveFireMult");
            }
            if (printMask?.LongRangeRetreatChance ?? true)
            {
                sb.AppendItem(item.LongRangeRetreatChance, "LongRangeRetreatChance");
            }
            if (printMask?.LongRangeRetreatHideTimeMult ?? true)
            {
                sb.AppendItem(item.LongRangeRetreatHideTimeMult, "LongRangeRetreatHideTimeMult");
            }
            if (printMask?.LongRangeRetreatDistanceMult ?? true)
            {
                sb.AppendItem(item.LongRangeRetreatDistanceMult, "LongRangeRetreatDistanceMult");
            }
            if (printMask?.CoverSearchDistanceMult ?? true)
            {
                sb.AppendItem(item.CoverSearchDistanceMult, "CoverSearchDistanceMult");
            }
            if (printMask?.CoverSearchSuppressionSensitivity ?? true)
            {
                sb.AppendItem(item.CoverSearchSuppressionSensitivity, "CoverSearchSuppressionSensitivity");
            }
            if (printMask?.FlightHoverChance ?? true)
            {
                sb.AppendItem(item.FlightHoverChance, "FlightHoverChance");
            }
            if (printMask?.FlightDiveBombChance ?? true)
            {
                sb.AppendItem(item.FlightDiveBombChance, "FlightDiveBombChance");
            }
            if (printMask?.FlightGroundAttackChance ?? true)
            {
                sb.AppendItem(item.FlightGroundAttackChance, "FlightGroundAttackChance");
            }
            if (printMask?.FlightHoverTime ?? true)
            {
                sb.AppendItem(item.FlightHoverTime, "FlightHoverTime");
            }
            if (printMask?.FlightGroundAttackTime ?? true)
            {
                sb.AppendItem(item.FlightGroundAttackTime, "FlightGroundAttackTime");
            }
            if (printMask?.FlightPerchAttackChance ?? true)
            {
                sb.AppendItem(item.FlightPerchAttackChance, "FlightPerchAttackChance");
            }
            if (printMask?.FlightPerchAttackTime ?? true)
            {
                sb.AppendItem(item.FlightPerchAttackTime, "FlightPerchAttackTime");
            }
            if (printMask?.FlightFlyingAttackChance ?? true)
            {
                sb.AppendItem(item.FlightFlyingAttackChance, "FlightFlyingAttackChance");
            }
            if (printMask?.TunnelCostMult ?? true)
            {
                sb.AppendItem(item.TunnelCostMult, "TunnelCostMult");
            }
            if (printMask?.TunnelChance ?? true)
            {
                sb.AppendItem(item.TunnelChance, "TunnelChance");
            }
            if (printMask?.TunnelMaxDistance ?? true)
            {
                sb.AppendItem(item.TunnelMaxDistance, "TunnelMaxDistance");
            }
            if (printMask?.TunnelSpeedMult ?? true)
            {
                sb.AppendItem(item.TunnelSpeedMult, "TunnelSpeedMult");
            }
            if (printMask?.TunnelMinTime ?? true)
            {
                sb.AppendItem(item.TunnelMinTime, "TunnelMinTime");
            }
            if (printMask?.TunnelMaxTime ?? true)
            {
                sb.AppendItem(item.TunnelMaxTime, "TunnelMaxTime");
            }
            if (printMask?.TunnelMaximumTime ?? true)
            {
                sb.AppendItem(item.TunnelMaximumTime, "TunnelMaximumTime");
            }
            if (printMask?.TunnelCooldown ?? true)
            {
                sb.AppendItem(item.TunnelCooldown, "TunnelCooldown");
            }
            if (printMask?.SpaceGeneralPilotSkill ?? true)
            {
                sb.AppendItem(item.SpaceGeneralPilotSkill, "SpaceGeneralPilotSkill");
            }
            if (printMask?.SpaceGeneralAccuracy ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAccuracy, "SpaceGeneralAccuracy");
            }
            if (printMask?.SpaceGeneralTargetShield ?? true)
            {
                sb.AppendItem(item.SpaceGeneralTargetShield, "SpaceGeneralTargetShield");
            }
            if (printMask?.SpaceGeneralAdjustment ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAdjustment, "SpaceGeneralAdjustment");
            }
            if (printMask?.SpaceGeneralEngageManeuverChanceDirectAttack ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEngageManeuverChanceDirectAttack, "SpaceGeneralEngageManeuverChanceDirectAttack");
            }
            if (printMask?.SpaceGeneralEngageManeuverChancePass ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEngageManeuverChancePass, "SpaceGeneralEngageManeuverChancePass");
            }
            if (printMask?.SpaceGeneralEngageManeuverChanceLeadTurn ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEngageManeuverChanceLeadTurn, "SpaceGeneralEngageManeuverChanceLeadTurn");
            }
            if (printMask?.SpaceGeneralEngageManeuverChanceSlideTurn ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEngageManeuverChanceSlideTurn, "SpaceGeneralEngageManeuverChanceSlideTurn");
            }
            if (printMask?.SpaceGeneralEngageManeuverChanceBarrelRoll ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEngageManeuverChanceBarrelRoll, "SpaceGeneralEngageManeuverChanceBarrelRoll");
            }
            if (printMask?.SpaceGeneralEvadeManeuverChanceBreak ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEvadeManeuverChanceBreak, "SpaceGeneralEvadeManeuverChanceBreak");
            }
            if (printMask?.SpaceGeneralEvadeManeuverChanceScissors ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEvadeManeuverChanceScissors, "SpaceGeneralEvadeManeuverChanceScissors");
            }
            if (printMask?.SpaceGeneralEvadeManeuverChanceCut ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEvadeManeuverChanceCut, "SpaceGeneralEvadeManeuverChanceCut");
            }
            if (printMask?.SpaceGeneralEvadeManeuverChanceBoost ?? true)
            {
                sb.AppendItem(item.SpaceGeneralEvadeManeuverChanceBoost, "SpaceGeneralEvadeManeuverChanceBoost");
            }
            if (printMask?.SpaceGeneralAcquireManeuverChanceSliceback ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAcquireManeuverChanceSliceback, "SpaceGeneralAcquireManeuverChanceSliceback");
            }
            if (printMask?.SpaceGeneralAcquireManeuverChanceStrafeTurn ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAcquireManeuverChanceStrafeTurn, "SpaceGeneralAcquireManeuverChanceStrafeTurn");
            }
            if (printMask?.SpaceGeneralAcquireManeuverChanceAcquire ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAcquireManeuverChanceAcquire, "SpaceGeneralAcquireManeuverChanceAcquire");
            }
            if (printMask?.SpaceGeneralAcquireManeuverChanceTurn ?? true)
            {
                sb.AppendItem(item.SpaceGeneralAcquireManeuverChanceTurn, "SpaceGeneralAcquireManeuverChanceTurn");
            }
            if (printMask?.SpaceGeneralDisengageManeuverChance ?? true)
            {
                sb.AppendItem(item.SpaceGeneralDisengageManeuverChance, "SpaceGeneralDisengageManeuverChance");
            }
            if (printMask?.SpaceGeneralMissileSeekingStrength ?? true)
            {
                sb.AppendItem(item.SpaceGeneralMissileSeekingStrength, "SpaceGeneralMissileSeekingStrength");
            }
            if (printMask?.SpaceGeneralMinTimeBetweenBoosts ?? true)
            {
                sb.AppendItem(item.SpaceGeneralMinTimeBetweenBoosts, "SpaceGeneralMinTimeBetweenBoosts");
            }
            if (printMask?.SpaceGeneralCombatStrafing ?? true)
            {
                sb.AppendItem(item.SpaceGeneralCombatStrafing, "SpaceGeneralCombatStrafing");
            }
            if (printMask?.SpaceGeneralRollsDuringBoost ?? true)
            {
                sb.AppendItem(item.SpaceGeneralRollsDuringBoost, "SpaceGeneralRollsDuringBoost");
            }
            if (printMask?.UnknownCSSG ?? true)
            {
                sb.AppendItem(item.UnknownCSSG, "UnknownCSSG");
            }
            if (printMask?.SpaceGeneralPowerWeighting?.Overall ?? true)
            {
                item.SpaceGeneralPowerWeighting?.Print(sb, "SpaceGeneralPowerWeighting");
            }
            if (printMask?.SpaceManeuverTypesMaxTime?.Overall ?? true)
            {
                item.SpaceManeuverTypesMaxTime?.Print(sb, "SpaceManeuverTypesMaxTime");
            }
            if (printMask?.SpaceManeuverTypesReentryDelays?.Overall ?? true)
            {
                item.SpaceManeuverTypesReentryDelays?.Print(sb, "SpaceManeuverTypesReentryDelays");
            }
            if (printMask?.SpaceRepairDamageThreshold ?? true)
            {
                sb.AppendItem(item.SpaceRepairDamageThreshold, "SpaceRepairDamageThreshold");
            }
            if (printMask?.SpaceRepairFarawayDistance ?? true)
            {
                sb.AppendItem(item.SpaceRepairFarawayDistance, "SpaceRepairFarawayDistance");
            }
            if (printMask?.SpaceRepairPowerToUse ?? true)
            {
                sb.AppendItem(item.SpaceRepairPowerToUse, "SpaceRepairPowerToUse");
            }
            if (printMask?.SpaceRepairInClosePowerWeightingTables?.Overall ?? true)
            {
                item.SpaceRepairInClosePowerWeightingTables?.Print(sb, "SpaceRepairInClosePowerWeightingTables");
            }
            if (printMask?.SpaceRepairFarawayPowerWeightingTables?.Overall ?? true)
            {
                item.SpaceRepairFarawayPowerWeightingTables?.Print(sb, "SpaceRepairFarawayPowerWeightingTables");
            }
            if (printMask?.SpaceApproachingMinDistance ?? true)
            {
                sb.AppendItem(item.SpaceApproachingMinDistance, "SpaceApproachingMinDistance");
            }
            if (printMask?.SpaceApproachingWeighting?.Overall ?? true)
            {
                item.SpaceApproachingWeighting?.Print(sb, "SpaceApproachingWeighting");
            }
            if (printMask?.SpaceDetectionRating1 ?? true)
            {
                sb.AppendItem(item.SpaceDetectionRating1, "SpaceDetectionRating1");
            }
            if (printMask?.SpaceDetectionRating2 ?? true)
            {
                sb.AppendItem(item.SpaceDetectionRating2, "SpaceDetectionRating2");
            }
            if (printMask?.SpaceDetectionRating3 ?? true)
            {
                sb.AppendItem(item.SpaceDetectionRating3, "SpaceDetectionRating3");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if (printMask?.TemplateDefaultCombatStyle ?? true)
            {
                sb.AppendItem(item.TemplateDefaultCombatStyle.FormKeyNullable, "TemplateDefaultCombatStyle");
            }
            if ((printMask?.Templates?.Overall ?? true)
                && item.Templates is {} TemplatesItem)
            {
                TemplatesItem?.Print(sb, "Templates");
            }
        }
        
        public static CombatStyle_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (CombatStyle_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new CombatStyle_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleGetter? lhs,
            ICombatStyleGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.OffensiveMult) ?? true))
            {
                if (!lhs.OffensiveMult.Equals(rhs.OffensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DefensiveMult) ?? true))
            {
                if (!lhs.DefensiveMult.Equals(rhs.DefensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupOffensiveMult) ?? true))
            {
                if (!lhs.GroupOffensiveMult.Equals(rhs.GroupOffensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMelee) ?? true))
            {
                if (!lhs.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMagic) ?? true))
            {
                if (!lhs.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultRanged) ?? true))
            {
                if (!lhs.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultShout) ?? true))
            {
                if (!lhs.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed) ?? true))
            {
                if (!lhs.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultStaff) ?? true))
            {
                if (!lhs.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AvoidThreatChance) ?? true))
            {
                if (!lhs.AvoidThreatChance.Equals(rhs.AvoidThreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeThreadChance) ?? true))
            {
                if (!lhs.DodgeThreadChance.Equals(rhs.DodgeThreadChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EvadeThreatChance) ?? true))
            {
                if (!lhs.EvadeThreatChance.Equals(rhs.EvadeThreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HealAllyDistance) ?? true))
            {
                if (!lhs.HealAllyDistance.EqualsWithin(rhs.HealAllyDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.JumpCostMult) ?? true))
            {
                if (!lhs.JumpCostMult.EqualsWithin(rhs.JumpCostMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TauntDelayMult) ?? true))
            {
                if (!lhs.TauntDelayMult.EqualsWithin(rhs.TauntDelayMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackStaggeredMult) ?? true))
            {
                if (!lhs.MeleeAttackStaggeredMult.EqualsWithin(rhs.MeleeAttackStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult) ?? true))
            {
                if (!lhs.MeleePowerAttackStaggeredMult.EqualsWithin(rhs.MeleePowerAttackStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackBlockingMult) ?? true))
            {
                if (!lhs.MeleePowerAttackBlockingMult.EqualsWithin(rhs.MeleePowerAttackBlockingMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashMult) ?? true))
            {
                if (!lhs.MeleeBashMult.EqualsWithin(rhs.MeleeBashMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashRecoilMult) ?? true))
            {
                if (!lhs.MeleeBashRecoilMult.EqualsWithin(rhs.MeleeBashRecoilMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashAttackMult) ?? true))
            {
                if (!lhs.MeleeBashAttackMult.EqualsWithin(rhs.MeleeBashAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashPowerAttackMult) ?? true))
            {
                if (!lhs.MeleeBashPowerAttackMult.EqualsWithin(rhs.MeleeBashPowerAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeSpecialAttackMult) ?? true))
            {
                if (!lhs.MeleeSpecialAttackMult.EqualsWithin(rhs.MeleeSpecialAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult) ?? true))
            {
                if (!lhs.MeleeBlockWhenStaggeredMult.EqualsWithin(rhs.MeleeBlockWhenStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult) ?? true))
            {
                if (!lhs.MeleeAttackWhenStaggeredMult.EqualsWithin(rhs.MeleeAttackWhenStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedAccuracyMult) ?? true))
            {
                if (!lhs.RangedAccuracyMult.Equals(rhs.RangedAccuracyMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedThrowMult) ?? true))
            {
                if (!lhs.RangedThrowMult.Equals(rhs.RangedThrowMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeAdvancedThrowingMult) ?? true))
            {
                if (!lhs.RangedGrenadeAdvancedThrowingMult.Equals(rhs.RangedGrenadeAdvancedThrowingMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeFlashTargetMult) ?? true))
            {
                if (!lhs.RangedGrenadeFlashTargetMult.Equals(rhs.RangedGrenadeFlashTargetMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeThrowAtGroupMult) ?? true))
            {
                if (!lhs.RangedGrenadeThrowAtGroupMult.Equals(rhs.RangedGrenadeThrowAtGroupMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult) ?? true))
            {
                if (!lhs.RangedGrenadeCloseRangeAttackChanceMult.Equals(rhs.RangedGrenadeCloseRangeAttackChanceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingCircleMult) ?? true))
            {
                if (!lhs.CloseRangeDuelingCircleMult.Equals(rhs.CloseRangeDuelingCircleMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult) ?? true))
            {
                if (!lhs.CloseRangeDuelingFallbackMult.Equals(rhs.CloseRangeDuelingFallbackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankDistance) ?? true))
            {
                if (!lhs.CloseRangeFlankDistance.Equals(rhs.CloseRangeFlankDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingStalkTime) ?? true))
            {
                if (!lhs.CloseRangeFlankingStalkTime.Equals(rhs.CloseRangeFlankingStalkTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargeDistance) ?? true))
            {
                if (!lhs.CloseRangeChargeDistance.Equals(rhs.CloseRangeChargeDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingThrowProbability.Equals(rhs.CloseRangeChargingThrowProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingSprintFastProbability.Equals(rhs.CloseRangeChargingSprintFastProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingSideswipeProbability.Equals(rhs.CloseRangeChargingSideswipeProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingDisengageProbability.Equals(rhs.CloseRangeChargingDisengageProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets) ?? true))
            {
                if (lhs.CloseRangeChargingThrowMaxTargets != rhs.CloseRangeChargingThrowMaxTargets) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingVariance) ?? true))
            {
                if (!lhs.CloseRangeFlankingVariance.Equals(rhs.CloseRangeFlankingVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeRetreatChance) ?? true))
            {
                if (!lhs.CloseRangeRetreatChance.Equals(rhs.CloseRangeRetreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult) ?? true))
            {
                if (!lhs.CloseRangeRetreatDistanceMult.Equals(rhs.CloseRangeRetreatDistanceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeStrafeMult) ?? true))
            {
                if (!lhs.LongRangeStrafeMult.Equals(rhs.LongRangeStrafeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeAdjustRangeMult) ?? true))
            {
                if (!lhs.LongRangeAdjustRangeMult.Equals(rhs.LongRangeAdjustRangeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeCrouchMult) ?? true))
            {
                if (!lhs.LongRangeCrouchMult.Equals(rhs.LongRangeCrouchMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeWaitMult) ?? true))
            {
                if (!lhs.LongRangeWaitMult.Equals(rhs.LongRangeWaitMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRangeMult) ?? true))
            {
                if (!lhs.LongRangeRangeMult.Equals(rhs.LongRangeRangeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeProvideSuppressiveFireMult) ?? true))
            {
                if (!lhs.LongRangeProvideSuppressiveFireMult.Equals(rhs.LongRangeProvideSuppressiveFireMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatChance) ?? true))
            {
                if (!lhs.LongRangeRetreatChance.Equals(rhs.LongRangeRetreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatHideTimeMult) ?? true))
            {
                if (!lhs.LongRangeRetreatHideTimeMult.Equals(rhs.LongRangeRetreatHideTimeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatDistanceMult) ?? true))
            {
                if (!lhs.LongRangeRetreatDistanceMult.Equals(rhs.LongRangeRetreatDistanceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchDistanceMult) ?? true))
            {
                if (!lhs.CoverSearchDistanceMult.Equals(rhs.CoverSearchDistanceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity) ?? true))
            {
                if (!lhs.CoverSearchSuppressionSensitivity.Equals(rhs.CoverSearchSuppressionSensitivity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightHoverChance) ?? true))
            {
                if (!lhs.FlightHoverChance.Equals(rhs.FlightHoverChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightDiveBombChance) ?? true))
            {
                if (!lhs.FlightDiveBombChance.Equals(rhs.FlightDiveBombChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightGroundAttackChance) ?? true))
            {
                if (!lhs.FlightGroundAttackChance.Equals(rhs.FlightGroundAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightHoverTime) ?? true))
            {
                if (!lhs.FlightHoverTime.Equals(rhs.FlightHoverTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightGroundAttackTime) ?? true))
            {
                if (!lhs.FlightGroundAttackTime.Equals(rhs.FlightGroundAttackTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightPerchAttackChance) ?? true))
            {
                if (!lhs.FlightPerchAttackChance.Equals(rhs.FlightPerchAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightPerchAttackTime) ?? true))
            {
                if (!lhs.FlightPerchAttackTime.Equals(rhs.FlightPerchAttackTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightFlyingAttackChance) ?? true))
            {
                if (!lhs.FlightFlyingAttackChance.Equals(rhs.FlightFlyingAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelCostMult) ?? true))
            {
                if (!lhs.TunnelCostMult.EqualsWithin(rhs.TunnelCostMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelChance) ?? true))
            {
                if (!lhs.TunnelChance.Equals(rhs.TunnelChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaxDistance) ?? true))
            {
                if (!lhs.TunnelMaxDistance.EqualsWithin(rhs.TunnelMaxDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelSpeedMult) ?? true))
            {
                if (!lhs.TunnelSpeedMult.EqualsWithin(rhs.TunnelSpeedMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMinTime) ?? true))
            {
                if (!lhs.TunnelMinTime.EqualsWithin(rhs.TunnelMinTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaxTime) ?? true))
            {
                if (!lhs.TunnelMaxTime.EqualsWithin(rhs.TunnelMaxTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaximumTime) ?? true))
            {
                if (!lhs.TunnelMaximumTime.EqualsWithin(rhs.TunnelMaximumTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelCooldown) ?? true))
            {
                if (!lhs.TunnelCooldown.EqualsWithin(rhs.TunnelCooldown)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralPilotSkill) ?? true))
            {
                if (!lhs.SpaceGeneralPilotSkill.Equals(rhs.SpaceGeneralPilotSkill)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAccuracy) ?? true))
            {
                if (!lhs.SpaceGeneralAccuracy.Equals(rhs.SpaceGeneralAccuracy)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralTargetShield) ?? true))
            {
                if (!lhs.SpaceGeneralTargetShield.Equals(rhs.SpaceGeneralTargetShield)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAdjustment) ?? true))
            {
                if (!lhs.SpaceGeneralAdjustment.EqualsWithin(rhs.SpaceGeneralAdjustment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceDirectAttack) ?? true))
            {
                if (!lhs.SpaceGeneralEngageManeuverChanceDirectAttack.Equals(rhs.SpaceGeneralEngageManeuverChanceDirectAttack)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChancePass) ?? true))
            {
                if (!lhs.SpaceGeneralEngageManeuverChancePass.Equals(rhs.SpaceGeneralEngageManeuverChancePass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceLeadTurn) ?? true))
            {
                if (!lhs.SpaceGeneralEngageManeuverChanceLeadTurn.Equals(rhs.SpaceGeneralEngageManeuverChanceLeadTurn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceSlideTurn) ?? true))
            {
                if (!lhs.SpaceGeneralEngageManeuverChanceSlideTurn.Equals(rhs.SpaceGeneralEngageManeuverChanceSlideTurn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceBarrelRoll) ?? true))
            {
                if (!lhs.SpaceGeneralEngageManeuverChanceBarrelRoll.Equals(rhs.SpaceGeneralEngageManeuverChanceBarrelRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBreak) ?? true))
            {
                if (!lhs.SpaceGeneralEvadeManeuverChanceBreak.Equals(rhs.SpaceGeneralEvadeManeuverChanceBreak)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceScissors) ?? true))
            {
                if (!lhs.SpaceGeneralEvadeManeuverChanceScissors.Equals(rhs.SpaceGeneralEvadeManeuverChanceScissors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceCut) ?? true))
            {
                if (!lhs.SpaceGeneralEvadeManeuverChanceCut.Equals(rhs.SpaceGeneralEvadeManeuverChanceCut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBoost) ?? true))
            {
                if (!lhs.SpaceGeneralEvadeManeuverChanceBoost.Equals(rhs.SpaceGeneralEvadeManeuverChanceBoost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceSliceback) ?? true))
            {
                if (!lhs.SpaceGeneralAcquireManeuverChanceSliceback.Equals(rhs.SpaceGeneralAcquireManeuverChanceSliceback)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceStrafeTurn) ?? true))
            {
                if (!lhs.SpaceGeneralAcquireManeuverChanceStrafeTurn.Equals(rhs.SpaceGeneralAcquireManeuverChanceStrafeTurn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceAcquire) ?? true))
            {
                if (!lhs.SpaceGeneralAcquireManeuverChanceAcquire.Equals(rhs.SpaceGeneralAcquireManeuverChanceAcquire)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceTurn) ?? true))
            {
                if (!lhs.SpaceGeneralAcquireManeuverChanceTurn.Equals(rhs.SpaceGeneralAcquireManeuverChanceTurn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralDisengageManeuverChance) ?? true))
            {
                if (!lhs.SpaceGeneralDisengageManeuverChance.Equals(rhs.SpaceGeneralDisengageManeuverChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralMissileSeekingStrength) ?? true))
            {
                if (!lhs.SpaceGeneralMissileSeekingStrength.EqualsWithin(rhs.SpaceGeneralMissileSeekingStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralMinTimeBetweenBoosts) ?? true))
            {
                if (!lhs.SpaceGeneralMinTimeBetweenBoosts.EqualsWithin(rhs.SpaceGeneralMinTimeBetweenBoosts)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralCombatStrafing) ?? true))
            {
                if (lhs.SpaceGeneralCombatStrafing != rhs.SpaceGeneralCombatStrafing) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralRollsDuringBoost) ?? true))
            {
                if (lhs.SpaceGeneralRollsDuringBoost != rhs.SpaceGeneralRollsDuringBoost) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnknownCSSG) ?? true))
            {
                if (lhs.UnknownCSSG != rhs.UnknownCSSG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceGeneralPowerWeighting, rhs.SpaceGeneralPowerWeighting, out var lhsSpaceGeneralPowerWeighting, out var rhsSpaceGeneralPowerWeighting, out var isSpaceGeneralPowerWeightingEqual))
                {
                    if (!((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)lhsSpaceGeneralPowerWeighting).CommonInstance()!).Equals(lhsSpaceGeneralPowerWeighting, rhsSpaceGeneralPowerWeighting, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting))) return false;
                }
                else if (!isSpaceGeneralPowerWeightingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceManeuverTypesMaxTime, rhs.SpaceManeuverTypesMaxTime, out var lhsSpaceManeuverTypesMaxTime, out var rhsSpaceManeuverTypesMaxTime, out var isSpaceManeuverTypesMaxTimeEqual))
                {
                    if (!((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)lhsSpaceManeuverTypesMaxTime).CommonInstance()!).Equals(lhsSpaceManeuverTypesMaxTime, rhsSpaceManeuverTypesMaxTime, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime))) return false;
                }
                else if (!isSpaceManeuverTypesMaxTimeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceManeuverTypesReentryDelays, rhs.SpaceManeuverTypesReentryDelays, out var lhsSpaceManeuverTypesReentryDelays, out var rhsSpaceManeuverTypesReentryDelays, out var isSpaceManeuverTypesReentryDelaysEqual))
                {
                    if (!((CombatStyleManeuverTimingCommon)((ICombatStyleManeuverTimingGetter)lhsSpaceManeuverTypesReentryDelays).CommonInstance()!).Equals(lhsSpaceManeuverTypesReentryDelays, rhsSpaceManeuverTypesReentryDelays, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays))) return false;
                }
                else if (!isSpaceManeuverTypesReentryDelaysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairDamageThreshold) ?? true))
            {
                if (!lhs.SpaceRepairDamageThreshold.Equals(rhs.SpaceRepairDamageThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairFarawayDistance) ?? true))
            {
                if (!lhs.SpaceRepairFarawayDistance.Equals(rhs.SpaceRepairFarawayDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairPowerToUse) ?? true))
            {
                if (!lhs.SpaceRepairPowerToUse.Equals(rhs.SpaceRepairPowerToUse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceRepairInClosePowerWeightingTables, rhs.SpaceRepairInClosePowerWeightingTables, out var lhsSpaceRepairInClosePowerWeightingTables, out var rhsSpaceRepairInClosePowerWeightingTables, out var isSpaceRepairInClosePowerWeightingTablesEqual))
                {
                    if (!((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)lhsSpaceRepairInClosePowerWeightingTables).CommonInstance()!).Equals(lhsSpaceRepairInClosePowerWeightingTables, rhsSpaceRepairInClosePowerWeightingTables, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables))) return false;
                }
                else if (!isSpaceRepairInClosePowerWeightingTablesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceRepairFarawayPowerWeightingTables, rhs.SpaceRepairFarawayPowerWeightingTables, out var lhsSpaceRepairFarawayPowerWeightingTables, out var rhsSpaceRepairFarawayPowerWeightingTables, out var isSpaceRepairFarawayPowerWeightingTablesEqual))
                {
                    if (!((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)lhsSpaceRepairFarawayPowerWeightingTables).CommonInstance()!).Equals(lhsSpaceRepairFarawayPowerWeightingTables, rhsSpaceRepairFarawayPowerWeightingTables, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables))) return false;
                }
                else if (!isSpaceRepairFarawayPowerWeightingTablesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceApproachingMinDistance) ?? true))
            {
                if (!lhs.SpaceApproachingMinDistance.Equals(rhs.SpaceApproachingMinDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceApproachingWeighting) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpaceApproachingWeighting, rhs.SpaceApproachingWeighting, out var lhsSpaceApproachingWeighting, out var rhsSpaceApproachingWeighting, out var isSpaceApproachingWeightingEqual))
                {
                    if (!((CombatStylePowerWeightingCommon)((ICombatStylePowerWeightingGetter)lhsSpaceApproachingWeighting).CommonInstance()!).Equals(lhsSpaceApproachingWeighting, rhsSpaceApproachingWeighting, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceApproachingWeighting))) return false;
                }
                else if (!isSpaceApproachingWeightingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating1) ?? true))
            {
                if (!lhs.SpaceDetectionRating1.EqualsWithin(rhs.SpaceDetectionRating1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating2) ?? true))
            {
                if (!lhs.SpaceDetectionRating2.EqualsWithin(rhs.SpaceDetectionRating2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating3) ?? true))
            {
                if (!lhs.SpaceDetectionRating3.EqualsWithin(rhs.SpaceDetectionRating3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TemplateDefaultCombatStyle) ?? true))
            {
                if (!lhs.TemplateDefaultCombatStyle.Equals(rhs.TemplateDefaultCombatStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Templates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Templates, rhs.Templates, out var lhsTemplates, out var rhsTemplates, out var isTemplatesEqual))
                {
                    if (!((CombatStyleTemplatesCommon)((ICombatStyleTemplatesGetter)lhsTemplates).CommonInstance()!).Equals(lhsTemplates, rhsTemplates, equalsMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Templates))) return false;
                }
                else if (!isTemplatesEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICombatStyleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.OffensiveMult);
            hash.Add(item.DefensiveMult);
            hash.Add(item.GroupOffensiveMult);
            hash.Add(item.EquipmentScoreMultMelee);
            hash.Add(item.EquipmentScoreMultMagic);
            hash.Add(item.EquipmentScoreMultRanged);
            hash.Add(item.EquipmentScoreMultShout);
            hash.Add(item.EquipmentScoreMultUnarmed);
            hash.Add(item.EquipmentScoreMultStaff);
            hash.Add(item.AvoidThreatChance);
            hash.Add(item.DodgeThreadChance);
            hash.Add(item.EvadeThreatChance);
            hash.Add(item.HealAllyDistance);
            hash.Add(item.JumpCostMult);
            hash.Add(item.TauntDelayMult);
            hash.Add(item.MeleeAttackStaggeredMult);
            hash.Add(item.MeleePowerAttackStaggeredMult);
            hash.Add(item.MeleePowerAttackBlockingMult);
            hash.Add(item.MeleeBashMult);
            hash.Add(item.MeleeBashRecoilMult);
            hash.Add(item.MeleeBashAttackMult);
            hash.Add(item.MeleeBashPowerAttackMult);
            hash.Add(item.MeleeSpecialAttackMult);
            hash.Add(item.MeleeBlockWhenStaggeredMult);
            hash.Add(item.MeleeAttackWhenStaggeredMult);
            hash.Add(item.RangedAccuracyMult);
            hash.Add(item.RangedThrowMult);
            hash.Add(item.RangedGrenadeAdvancedThrowingMult);
            hash.Add(item.RangedGrenadeFlashTargetMult);
            hash.Add(item.RangedGrenadeThrowAtGroupMult);
            hash.Add(item.RangedGrenadeCloseRangeAttackChanceMult);
            hash.Add(item.CloseRangeDuelingCircleMult);
            hash.Add(item.CloseRangeDuelingFallbackMult);
            hash.Add(item.CloseRangeFlankDistance);
            hash.Add(item.CloseRangeFlankingStalkTime);
            hash.Add(item.CloseRangeChargeDistance);
            hash.Add(item.CloseRangeChargingThrowProbability);
            hash.Add(item.CloseRangeChargingSprintFastProbability);
            hash.Add(item.CloseRangeChargingSideswipeProbability);
            hash.Add(item.CloseRangeChargingDisengageProbability);
            hash.Add(item.CloseRangeChargingThrowMaxTargets);
            hash.Add(item.CloseRangeFlankingVariance);
            hash.Add(item.CloseRangeRetreatChance);
            hash.Add(item.CloseRangeRetreatDistanceMult);
            hash.Add(item.LongRangeStrafeMult);
            hash.Add(item.LongRangeAdjustRangeMult);
            hash.Add(item.LongRangeCrouchMult);
            hash.Add(item.LongRangeWaitMult);
            hash.Add(item.LongRangeRangeMult);
            hash.Add(item.LongRangeProvideSuppressiveFireMult);
            hash.Add(item.LongRangeRetreatChance);
            hash.Add(item.LongRangeRetreatHideTimeMult);
            hash.Add(item.LongRangeRetreatDistanceMult);
            hash.Add(item.CoverSearchDistanceMult);
            hash.Add(item.CoverSearchSuppressionSensitivity);
            hash.Add(item.FlightHoverChance);
            hash.Add(item.FlightDiveBombChance);
            hash.Add(item.FlightGroundAttackChance);
            hash.Add(item.FlightHoverTime);
            hash.Add(item.FlightGroundAttackTime);
            hash.Add(item.FlightPerchAttackChance);
            hash.Add(item.FlightPerchAttackTime);
            hash.Add(item.FlightFlyingAttackChance);
            hash.Add(item.TunnelCostMult);
            hash.Add(item.TunnelChance);
            hash.Add(item.TunnelMaxDistance);
            hash.Add(item.TunnelSpeedMult);
            hash.Add(item.TunnelMinTime);
            hash.Add(item.TunnelMaxTime);
            hash.Add(item.TunnelMaximumTime);
            hash.Add(item.TunnelCooldown);
            hash.Add(item.SpaceGeneralPilotSkill);
            hash.Add(item.SpaceGeneralAccuracy);
            hash.Add(item.SpaceGeneralTargetShield);
            hash.Add(item.SpaceGeneralAdjustment);
            hash.Add(item.SpaceGeneralEngageManeuverChanceDirectAttack);
            hash.Add(item.SpaceGeneralEngageManeuverChancePass);
            hash.Add(item.SpaceGeneralEngageManeuverChanceLeadTurn);
            hash.Add(item.SpaceGeneralEngageManeuverChanceSlideTurn);
            hash.Add(item.SpaceGeneralEngageManeuverChanceBarrelRoll);
            hash.Add(item.SpaceGeneralEvadeManeuverChanceBreak);
            hash.Add(item.SpaceGeneralEvadeManeuverChanceScissors);
            hash.Add(item.SpaceGeneralEvadeManeuverChanceCut);
            hash.Add(item.SpaceGeneralEvadeManeuverChanceBoost);
            hash.Add(item.SpaceGeneralAcquireManeuverChanceSliceback);
            hash.Add(item.SpaceGeneralAcquireManeuverChanceStrafeTurn);
            hash.Add(item.SpaceGeneralAcquireManeuverChanceAcquire);
            hash.Add(item.SpaceGeneralAcquireManeuverChanceTurn);
            hash.Add(item.SpaceGeneralDisengageManeuverChance);
            hash.Add(item.SpaceGeneralMissileSeekingStrength);
            hash.Add(item.SpaceGeneralMinTimeBetweenBoosts);
            hash.Add(item.SpaceGeneralCombatStrafing);
            hash.Add(item.SpaceGeneralRollsDuringBoost);
            hash.Add(item.UnknownCSSG);
            hash.Add(item.SpaceGeneralPowerWeighting);
            hash.Add(item.SpaceManeuverTypesMaxTime);
            hash.Add(item.SpaceManeuverTypesReentryDelays);
            hash.Add(item.SpaceRepairDamageThreshold);
            hash.Add(item.SpaceRepairFarawayDistance);
            hash.Add(item.SpaceRepairPowerToUse);
            hash.Add(item.SpaceRepairInClosePowerWeightingTables);
            hash.Add(item.SpaceRepairFarawayPowerWeightingTables);
            hash.Add(item.SpaceApproachingMinDistance);
            hash.Add(item.SpaceApproachingWeighting);
            hash.Add(item.SpaceDetectionRating1);
            hash.Add(item.SpaceDetectionRating2);
            hash.Add(item.SpaceDetectionRating3);
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            hash.Add(item.TemplateDefaultCombatStyle);
            if (item.Templates is {} Templatesitem)
            {
                hash.Add(Templatesitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CombatStyle.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICombatStyleGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.TemplateDefaultCombatStyle, out var TemplateDefaultCombatStyleInfo))
            {
                yield return TemplateDefaultCombatStyleInfo;
            }
            if (obj.Templates is {} TemplatesItems)
            {
                foreach (var item in TemplatesItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public CombatStyle Duplicate(
            ICombatStyleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CombatStyle(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CombatStyleSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly CombatStyleSetterTranslationCommon Instance = new CombatStyleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleInternal item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.OffensiveMult) ?? true))
            {
                item.OffensiveMult = rhs.OffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DefensiveMult) ?? true))
            {
                item.DefensiveMult = rhs.DefensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupOffensiveMult) ?? true))
            {
                item.GroupOffensiveMult = rhs.GroupOffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMelee) ?? true))
            {
                item.EquipmentScoreMultMelee = rhs.EquipmentScoreMultMelee;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMagic) ?? true))
            {
                item.EquipmentScoreMultMagic = rhs.EquipmentScoreMultMagic;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultRanged) ?? true))
            {
                item.EquipmentScoreMultRanged = rhs.EquipmentScoreMultRanged;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultShout) ?? true))
            {
                item.EquipmentScoreMultShout = rhs.EquipmentScoreMultShout;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed) ?? true))
            {
                item.EquipmentScoreMultUnarmed = rhs.EquipmentScoreMultUnarmed;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultStaff) ?? true))
            {
                item.EquipmentScoreMultStaff = rhs.EquipmentScoreMultStaff;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AvoidThreatChance) ?? true))
            {
                item.AvoidThreatChance = rhs.AvoidThreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeThreadChance) ?? true))
            {
                item.DodgeThreadChance = rhs.DodgeThreadChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EvadeThreatChance) ?? true))
            {
                item.EvadeThreatChance = rhs.EvadeThreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HealAllyDistance) ?? true))
            {
                item.HealAllyDistance = rhs.HealAllyDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.JumpCostMult) ?? true))
            {
                item.JumpCostMult = rhs.JumpCostMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TauntDelayMult) ?? true))
            {
                item.TauntDelayMult = rhs.TauntDelayMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackStaggeredMult) ?? true))
            {
                item.MeleeAttackStaggeredMult = rhs.MeleeAttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult) ?? true))
            {
                item.MeleePowerAttackStaggeredMult = rhs.MeleePowerAttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackBlockingMult) ?? true))
            {
                item.MeleePowerAttackBlockingMult = rhs.MeleePowerAttackBlockingMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashMult) ?? true))
            {
                item.MeleeBashMult = rhs.MeleeBashMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashRecoilMult) ?? true))
            {
                item.MeleeBashRecoilMult = rhs.MeleeBashRecoilMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashAttackMult) ?? true))
            {
                item.MeleeBashAttackMult = rhs.MeleeBashAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashPowerAttackMult) ?? true))
            {
                item.MeleeBashPowerAttackMult = rhs.MeleeBashPowerAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeSpecialAttackMult) ?? true))
            {
                item.MeleeSpecialAttackMult = rhs.MeleeSpecialAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult) ?? true))
            {
                item.MeleeBlockWhenStaggeredMult = rhs.MeleeBlockWhenStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult) ?? true))
            {
                item.MeleeAttackWhenStaggeredMult = rhs.MeleeAttackWhenStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedAccuracyMult) ?? true))
            {
                item.RangedAccuracyMult = rhs.RangedAccuracyMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedThrowMult) ?? true))
            {
                item.RangedThrowMult = rhs.RangedThrowMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeAdvancedThrowingMult) ?? true))
            {
                item.RangedGrenadeAdvancedThrowingMult = rhs.RangedGrenadeAdvancedThrowingMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeFlashTargetMult) ?? true))
            {
                item.RangedGrenadeFlashTargetMult = rhs.RangedGrenadeFlashTargetMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeThrowAtGroupMult) ?? true))
            {
                item.RangedGrenadeThrowAtGroupMult = rhs.RangedGrenadeThrowAtGroupMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult) ?? true))
            {
                item.RangedGrenadeCloseRangeAttackChanceMult = rhs.RangedGrenadeCloseRangeAttackChanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingCircleMult) ?? true))
            {
                item.CloseRangeDuelingCircleMult = rhs.CloseRangeDuelingCircleMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult) ?? true))
            {
                item.CloseRangeDuelingFallbackMult = rhs.CloseRangeDuelingFallbackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankDistance) ?? true))
            {
                item.CloseRangeFlankDistance = rhs.CloseRangeFlankDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingStalkTime) ?? true))
            {
                item.CloseRangeFlankingStalkTime = rhs.CloseRangeFlankingStalkTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargeDistance) ?? true))
            {
                item.CloseRangeChargeDistance = rhs.CloseRangeChargeDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowProbability) ?? true))
            {
                item.CloseRangeChargingThrowProbability = rhs.CloseRangeChargingThrowProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability) ?? true))
            {
                item.CloseRangeChargingSprintFastProbability = rhs.CloseRangeChargingSprintFastProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability) ?? true))
            {
                item.CloseRangeChargingSideswipeProbability = rhs.CloseRangeChargingSideswipeProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability) ?? true))
            {
                item.CloseRangeChargingDisengageProbability = rhs.CloseRangeChargingDisengageProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets) ?? true))
            {
                item.CloseRangeChargingThrowMaxTargets = rhs.CloseRangeChargingThrowMaxTargets;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingVariance) ?? true))
            {
                item.CloseRangeFlankingVariance = rhs.CloseRangeFlankingVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeRetreatChance) ?? true))
            {
                item.CloseRangeRetreatChance = rhs.CloseRangeRetreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult) ?? true))
            {
                item.CloseRangeRetreatDistanceMult = rhs.CloseRangeRetreatDistanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeStrafeMult) ?? true))
            {
                item.LongRangeStrafeMult = rhs.LongRangeStrafeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeAdjustRangeMult) ?? true))
            {
                item.LongRangeAdjustRangeMult = rhs.LongRangeAdjustRangeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeCrouchMult) ?? true))
            {
                item.LongRangeCrouchMult = rhs.LongRangeCrouchMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeWaitMult) ?? true))
            {
                item.LongRangeWaitMult = rhs.LongRangeWaitMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRangeMult) ?? true))
            {
                item.LongRangeRangeMult = rhs.LongRangeRangeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeProvideSuppressiveFireMult) ?? true))
            {
                item.LongRangeProvideSuppressiveFireMult = rhs.LongRangeProvideSuppressiveFireMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatChance) ?? true))
            {
                item.LongRangeRetreatChance = rhs.LongRangeRetreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatHideTimeMult) ?? true))
            {
                item.LongRangeRetreatHideTimeMult = rhs.LongRangeRetreatHideTimeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRetreatDistanceMult) ?? true))
            {
                item.LongRangeRetreatDistanceMult = rhs.LongRangeRetreatDistanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchDistanceMult) ?? true))
            {
                item.CoverSearchDistanceMult = rhs.CoverSearchDistanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity) ?? true))
            {
                item.CoverSearchSuppressionSensitivity = rhs.CoverSearchSuppressionSensitivity;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightHoverChance) ?? true))
            {
                item.FlightHoverChance = rhs.FlightHoverChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightDiveBombChance) ?? true))
            {
                item.FlightDiveBombChance = rhs.FlightDiveBombChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightGroundAttackChance) ?? true))
            {
                item.FlightGroundAttackChance = rhs.FlightGroundAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightHoverTime) ?? true))
            {
                item.FlightHoverTime = rhs.FlightHoverTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightGroundAttackTime) ?? true))
            {
                item.FlightGroundAttackTime = rhs.FlightGroundAttackTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightPerchAttackChance) ?? true))
            {
                item.FlightPerchAttackChance = rhs.FlightPerchAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightPerchAttackTime) ?? true))
            {
                item.FlightPerchAttackTime = rhs.FlightPerchAttackTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlightFlyingAttackChance) ?? true))
            {
                item.FlightFlyingAttackChance = rhs.FlightFlyingAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelCostMult) ?? true))
            {
                item.TunnelCostMult = rhs.TunnelCostMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelChance) ?? true))
            {
                item.TunnelChance = rhs.TunnelChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaxDistance) ?? true))
            {
                item.TunnelMaxDistance = rhs.TunnelMaxDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelSpeedMult) ?? true))
            {
                item.TunnelSpeedMult = rhs.TunnelSpeedMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMinTime) ?? true))
            {
                item.TunnelMinTime = rhs.TunnelMinTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaxTime) ?? true))
            {
                item.TunnelMaxTime = rhs.TunnelMaxTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelMaximumTime) ?? true))
            {
                item.TunnelMaximumTime = rhs.TunnelMaximumTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TunnelCooldown) ?? true))
            {
                item.TunnelCooldown = rhs.TunnelCooldown;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralPilotSkill) ?? true))
            {
                item.SpaceGeneralPilotSkill = rhs.SpaceGeneralPilotSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAccuracy) ?? true))
            {
                item.SpaceGeneralAccuracy = rhs.SpaceGeneralAccuracy;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralTargetShield) ?? true))
            {
                item.SpaceGeneralTargetShield = rhs.SpaceGeneralTargetShield;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAdjustment) ?? true))
            {
                item.SpaceGeneralAdjustment = rhs.SpaceGeneralAdjustment;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceDirectAttack) ?? true))
            {
                item.SpaceGeneralEngageManeuverChanceDirectAttack = rhs.SpaceGeneralEngageManeuverChanceDirectAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChancePass) ?? true))
            {
                item.SpaceGeneralEngageManeuverChancePass = rhs.SpaceGeneralEngageManeuverChancePass;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceLeadTurn) ?? true))
            {
                item.SpaceGeneralEngageManeuverChanceLeadTurn = rhs.SpaceGeneralEngageManeuverChanceLeadTurn;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceSlideTurn) ?? true))
            {
                item.SpaceGeneralEngageManeuverChanceSlideTurn = rhs.SpaceGeneralEngageManeuverChanceSlideTurn;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEngageManeuverChanceBarrelRoll) ?? true))
            {
                item.SpaceGeneralEngageManeuverChanceBarrelRoll = rhs.SpaceGeneralEngageManeuverChanceBarrelRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBreak) ?? true))
            {
                item.SpaceGeneralEvadeManeuverChanceBreak = rhs.SpaceGeneralEvadeManeuverChanceBreak;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceScissors) ?? true))
            {
                item.SpaceGeneralEvadeManeuverChanceScissors = rhs.SpaceGeneralEvadeManeuverChanceScissors;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceCut) ?? true))
            {
                item.SpaceGeneralEvadeManeuverChanceCut = rhs.SpaceGeneralEvadeManeuverChanceCut;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralEvadeManeuverChanceBoost) ?? true))
            {
                item.SpaceGeneralEvadeManeuverChanceBoost = rhs.SpaceGeneralEvadeManeuverChanceBoost;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceSliceback) ?? true))
            {
                item.SpaceGeneralAcquireManeuverChanceSliceback = rhs.SpaceGeneralAcquireManeuverChanceSliceback;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceStrafeTurn) ?? true))
            {
                item.SpaceGeneralAcquireManeuverChanceStrafeTurn = rhs.SpaceGeneralAcquireManeuverChanceStrafeTurn;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceAcquire) ?? true))
            {
                item.SpaceGeneralAcquireManeuverChanceAcquire = rhs.SpaceGeneralAcquireManeuverChanceAcquire;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralAcquireManeuverChanceTurn) ?? true))
            {
                item.SpaceGeneralAcquireManeuverChanceTurn = rhs.SpaceGeneralAcquireManeuverChanceTurn;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralDisengageManeuverChance) ?? true))
            {
                item.SpaceGeneralDisengageManeuverChance = rhs.SpaceGeneralDisengageManeuverChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralMissileSeekingStrength) ?? true))
            {
                item.SpaceGeneralMissileSeekingStrength = rhs.SpaceGeneralMissileSeekingStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralMinTimeBetweenBoosts) ?? true))
            {
                item.SpaceGeneralMinTimeBetweenBoosts = rhs.SpaceGeneralMinTimeBetweenBoosts;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralCombatStrafing) ?? true))
            {
                item.SpaceGeneralCombatStrafing = rhs.SpaceGeneralCombatStrafing;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralRollsDuringBoost) ?? true))
            {
                item.SpaceGeneralRollsDuringBoost = rhs.SpaceGeneralRollsDuringBoost;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.UnknownCSSG) ?? true))
            {
                item.UnknownCSSG = rhs.UnknownCSSG;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting) ?? true))
                    {
                        item.SpaceGeneralPowerWeighting = rhs.SpaceGeneralPowerWeighting.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime) ?? true))
                    {
                        item.SpaceManeuverTypesMaxTime = rhs.SpaceManeuverTypesMaxTime.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceManeuverTypesMaxTime),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays) ?? true))
                    {
                        item.SpaceManeuverTypesReentryDelays = rhs.SpaceManeuverTypesReentryDelays.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairDamageThreshold) ?? true))
            {
                item.SpaceRepairDamageThreshold = rhs.SpaceRepairDamageThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairFarawayDistance) ?? true))
            {
                item.SpaceRepairFarawayDistance = rhs.SpaceRepairFarawayDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairPowerToUse) ?? true))
            {
                item.SpaceRepairPowerToUse = rhs.SpaceRepairPowerToUse;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables) ?? true))
                    {
                        item.SpaceRepairInClosePowerWeightingTables = rhs.SpaceRepairInClosePowerWeightingTables.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceRepairInClosePowerWeightingTables),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables) ?? true))
                    {
                        item.SpaceRepairFarawayPowerWeightingTables = rhs.SpaceRepairFarawayPowerWeightingTables.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceApproachingMinDistance) ?? true))
            {
                item.SpaceApproachingMinDistance = rhs.SpaceApproachingMinDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceApproachingWeighting) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.SpaceApproachingWeighting);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceApproachingWeighting) ?? true))
                    {
                        item.SpaceApproachingWeighting = rhs.SpaceApproachingWeighting.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.SpaceApproachingWeighting),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating1) ?? true))
            {
                item.SpaceDetectionRating1 = rhs.SpaceDetectionRating1;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating2) ?? true))
            {
                item.SpaceDetectionRating2 = rhs.SpaceDetectionRating2;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.SpaceDetectionRating3) ?? true))
            {
                item.SpaceDetectionRating3 = rhs.SpaceDetectionRating3;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.TemplateDefaultCombatStyle) ?? true))
            {
                item.TemplateDefaultCombatStyle.SetTo(rhs.TemplateDefaultCombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Templates) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Templates);
                try
                {
                    if(rhs.Templates is {} rhsTemplates)
                    {
                        item.Templates = rhsTemplates.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Templates));
                    }
                    else
                    {
                        item.Templates = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyle
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CombatStyleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CombatStyleBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CombatStyleBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICombatStyleGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSGD)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.OffensiveMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DefensiveMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.GroupOffensiveMult,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultMelee);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultMagic);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultRanged);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultShout);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultUnarmed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultStaff);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.AvoidThreatChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DodgeThreadChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.EvadeThreatChance,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HealAllyDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.JumpCostMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TauntDelayMult);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSME)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeAttackStaggeredMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleePowerAttackStaggeredMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleePowerAttackBlockingMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashRecoilMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashPowerAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeSpecialAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBlockWhenStaggeredMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeAttackWhenStaggeredMult);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSRA)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedAccuracyMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedThrowMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedGrenadeAdvancedThrowingMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedGrenadeFlashTargetMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedGrenadeThrowAtGroupMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.RangedGrenadeCloseRangeAttackChanceMult,
                    integerType: FloatIntegerType.UInt);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSCR)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeDuelingCircleMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeDuelingFallbackMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeFlankDistance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeFlankingStalkTime,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeChargeDistance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeChargingThrowProbability,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeChargingSprintFastProbability,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeChargingSideswipeProbability,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeChargingDisengageProbability,
                    integerType: FloatIntegerType.UInt);
                writer.Write(item.CloseRangeChargingThrowMaxTargets);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeFlankingVariance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeRetreatChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CloseRangeRetreatDistanceMult,
                    integerType: FloatIntegerType.UInt);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSLR)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeStrafeMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeAdjustRangeMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeCrouchMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeWaitMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeRangeMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeProvideSuppressiveFireMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeRetreatChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeRetreatHideTimeMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.LongRangeRetreatDistanceMult,
                    integerType: FloatIntegerType.UInt);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSCV)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CoverSearchDistanceMult,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.CoverSearchSuppressionSensitivity,
                    integerType: FloatIntegerType.UInt);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSFL)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightHoverChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightDiveBombChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightGroundAttackChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightHoverTime,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightGroundAttackTime,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightPerchAttackChance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightPerchAttackTime,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.FlightFlyingAttackChance,
                    integerType: FloatIntegerType.UInt);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSTN)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelCostMult);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.TunnelChance,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelMaxDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelSpeedMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelMinTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelMaxTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelMaximumTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TunnelCooldown);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSSG)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralPilotSkill,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralAccuracy,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralTargetShield,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceGeneralAdjustment);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEngageManeuverChanceDirectAttack,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEngageManeuverChancePass,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEngageManeuverChanceLeadTurn,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEngageManeuverChanceSlideTurn,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEngageManeuverChanceBarrelRoll,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEvadeManeuverChanceBreak,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEvadeManeuverChanceScissors,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEvadeManeuverChanceCut,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralEvadeManeuverChanceBoost,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralAcquireManeuverChanceSliceback,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralAcquireManeuverChanceStrafeTurn,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralAcquireManeuverChanceAcquire,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralAcquireManeuverChanceTurn,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceGeneralDisengageManeuverChance,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceGeneralMissileSeekingStrength);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceGeneralMinTimeBetweenBoosts);
                writer.Write(item.SpaceGeneralCombatStrafing);
                writer.Write(item.SpaceGeneralRollsDuringBoost);
                writer.Write(item.UnknownCSSG);
                var SpaceGeneralPowerWeightingItem = item.SpaceGeneralPowerWeighting;
                ((CombatStylePowerWeightingBinaryWriteTranslation)((IBinaryItem)SpaceGeneralPowerWeightingItem).BinaryWriteTranslator).Write(
                    item: SpaceGeneralPowerWeightingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSSM)))
            {
                var SpaceManeuverTypesMaxTimeItem = item.SpaceManeuverTypesMaxTime;
                ((CombatStyleManeuverTimingBinaryWriteTranslation)((IBinaryItem)SpaceManeuverTypesMaxTimeItem).BinaryWriteTranslator).Write(
                    item: SpaceManeuverTypesMaxTimeItem,
                    writer: writer,
                    translationParams: translationParams);
                var SpaceManeuverTypesReentryDelaysItem = item.SpaceManeuverTypesReentryDelays;
                ((CombatStyleManeuverTimingBinaryWriteTranslation)((IBinaryItem)SpaceManeuverTypesReentryDelaysItem).BinaryWriteTranslator).Write(
                    item: SpaceManeuverTypesReentryDelaysItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSSR)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceRepairDamageThreshold,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceRepairFarawayDistance,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceRepairPowerToUse,
                    integerType: FloatIntegerType.UInt);
                var SpaceRepairInClosePowerWeightingTablesItem = item.SpaceRepairInClosePowerWeightingTables;
                ((CombatStylePowerWeightingBinaryWriteTranslation)((IBinaryItem)SpaceRepairInClosePowerWeightingTablesItem).BinaryWriteTranslator).Write(
                    item: SpaceRepairInClosePowerWeightingTablesItem,
                    writer: writer,
                    translationParams: translationParams);
                var SpaceRepairFarawayPowerWeightingTablesItem = item.SpaceRepairFarawayPowerWeightingTables;
                ((CombatStylePowerWeightingBinaryWriteTranslation)((IBinaryItem)SpaceRepairFarawayPowerWeightingTablesItem).BinaryWriteTranslator).Write(
                    item: SpaceRepairFarawayPowerWeightingTablesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSSA)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SpaceApproachingMinDistance,
                    integerType: FloatIntegerType.UInt);
                var SpaceApproachingWeightingItem = item.SpaceApproachingWeighting;
                ((CombatStylePowerWeightingBinaryWriteTranslation)((IBinaryItem)SpaceApproachingWeightingItem).BinaryWriteTranslator).Write(
                    item: SpaceApproachingWeightingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSSD)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceDetectionRating1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceDetectionRating2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SpaceDetectionRating3);
            }
            EnumBinaryTranslation<CombatStyle.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TemplateDefaultCombatStyle,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            if (item.Templates is {} TemplatesItem)
            {
                ((CombatStyleTemplatesBinaryWriteTranslation)((IBinaryItem)TemplatesItem).BinaryWriteTranslator).Write(
                    item: TemplatesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CSTY,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CombatStyleBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly CombatStyleBinaryCreateTranslation Instance = new CombatStyleBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CSTY;
        public static ParseResult FillBinaryRecordTypes(
            ICombatStyleInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.OffensiveMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.DefensiveMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.GroupOffensiveMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultMelee = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultMagic = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultRanged = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultShout = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultUnarmed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultStaff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AvoidThreatChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.DodgeThreadChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.EvadeThreatChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.HealAllyDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.JumpCostMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TauntDelayMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.TauntDelayMult;
                }
                case RecordTypeInts.CSME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeAttackStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleePowerAttackStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleePowerAttackBlockingMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashRecoilMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashPowerAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeSpecialAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBlockWhenStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeAttackWhenStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult;
                }
                case RecordTypeInts.CSRA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedAccuracyMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedThrowMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedGrenadeAdvancedThrowingMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedGrenadeFlashTargetMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedGrenadeThrowAtGroupMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.RangedGrenadeCloseRangeAttackChanceMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    return (int)CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult;
                }
                case RecordTypeInts.CSCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeDuelingCircleMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeDuelingFallbackMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankDistance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankingStalkTime = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargeDistance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingThrowProbability = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingSprintFastProbability = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingSideswipeProbability = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingDisengageProbability = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingThrowMaxTargets = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankingVariance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeRetreatChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeRetreatDistanceMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    return (int)CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult;
                }
                case RecordTypeInts.CSLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeStrafeMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeAdjustRangeMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeCrouchMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeWaitMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeRangeMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeProvideSuppressiveFireMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeRetreatChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeRetreatHideTimeMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeRetreatDistanceMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    return (int)CombatStyle_FieldIndex.LongRangeRetreatDistanceMult;
                }
                case RecordTypeInts.CSCV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.CoverSearchDistanceMult = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.CoverSearchSuppressionSensitivity = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    return (int)CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity;
                }
                case RecordTypeInts.CSFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightHoverChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightDiveBombChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightGroundAttackChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightHoverTime = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightGroundAttackTime = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightPerchAttackChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightPerchAttackTime = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightFlyingAttackChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    return (int)CombatStyle_FieldIndex.FlightFlyingAttackChance;
                }
                case RecordTypeInts.CSTN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelCostMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelMaxDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelSpeedMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelMinTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelMaxTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelMaximumTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TunnelCooldown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.TunnelCooldown;
                }
                case RecordTypeInts.CSSG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralPilotSkill = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAccuracy = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralTargetShield = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAdjustment = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEngageManeuverChanceDirectAttack = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEngageManeuverChancePass = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEngageManeuverChanceLeadTurn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEngageManeuverChanceSlideTurn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEngageManeuverChanceBarrelRoll = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEvadeManeuverChanceBreak = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEvadeManeuverChanceScissors = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEvadeManeuverChanceCut = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralEvadeManeuverChanceBoost = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAcquireManeuverChanceSliceback = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAcquireManeuverChanceStrafeTurn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAcquireManeuverChanceAcquire = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralAcquireManeuverChanceTurn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralDisengageManeuverChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralMissileSeekingStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceGeneralMinTimeBetweenBoosts = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.SpaceGeneralCombatStrafing = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.SpaceGeneralRollsDuringBoost = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 2) return null;
                    item.UnknownCSSG = dataFrame.ReadInt16();
                    if (dataFrame.Complete) return null;
                    item.SpaceGeneralPowerWeighting = Mutagen.Bethesda.Starfield.CombatStylePowerWeighting.CreateFromBinary(frame: dataFrame);
                    return (int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting;
                }
                case RecordTypeInts.CSSM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Complete) return null;
                    item.SpaceManeuverTypesMaxTime = Mutagen.Bethesda.Starfield.CombatStyleManeuverTiming.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SpaceManeuverTypesReentryDelays = Mutagen.Bethesda.Starfield.CombatStyleManeuverTiming.CreateFromBinary(frame: dataFrame);
                    return (int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays;
                }
                case RecordTypeInts.CSSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceRepairDamageThreshold = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceRepairFarawayDistance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceRepairPowerToUse = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Complete) return null;
                    item.SpaceRepairInClosePowerWeightingTables = Mutagen.Bethesda.Starfield.CombatStylePowerWeighting.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SpaceRepairFarawayPowerWeightingTables = Mutagen.Bethesda.Starfield.CombatStylePowerWeighting.CreateFromBinary(frame: dataFrame);
                    return (int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables;
                }
                case RecordTypeInts.CSSA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceApproachingMinDistance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Complete) return null;
                    item.SpaceApproachingWeighting = Mutagen.Bethesda.Starfield.CombatStylePowerWeighting.CreateFromBinary(frame: dataFrame);
                    return (int)CombatStyle_FieldIndex.SpaceApproachingWeighting;
                }
                case RecordTypeInts.CSSD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceDetectionRating1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceDetectionRating2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SpaceDetectionRating3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.SpaceDetectionRating3;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<CombatStyle.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.FNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TemplateDefaultCombatStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)CombatStyle_FieldIndex.TemplateDefaultCombatStyle;
                }
                case RecordTypeInts.UNAM:
                {
                    item.Templates = Mutagen.Bethesda.Starfield.CombatStyleTemplates.CreateFromBinary(frame: frame);
                    return (int)CombatStyle_FieldIndex.Templates;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CombatStyleBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CombatStyleBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ICombatStyleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CombatStyleCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICombatStyle);

        public CombatStyle.MajorFlag MajorFlags => (CombatStyle.MajorFlag)this.MajorRecordFlagsRaw;

        private RangeInt32? _CSGDLocation;
        #region OffensiveMult
        private int _OffensiveMultLocation => _CSGDLocation!.Value.Min;
        private bool _OffensiveMult_IsSet => _CSGDLocation.HasValue;
        public Percent OffensiveMult => _OffensiveMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_OffensiveMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region DefensiveMult
        private int _DefensiveMultLocation => _CSGDLocation!.Value.Min + 0x4;
        private bool _DefensiveMult_IsSet => _CSGDLocation.HasValue;
        public Percent DefensiveMult => _DefensiveMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DefensiveMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region GroupOffensiveMult
        private int _GroupOffensiveMultLocation => _CSGDLocation!.Value.Min + 0x8;
        private bool _GroupOffensiveMult_IsSet => _CSGDLocation.HasValue;
        public Percent GroupOffensiveMult => _GroupOffensiveMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_GroupOffensiveMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region EquipmentScoreMultMelee
        private int _EquipmentScoreMultMeleeLocation => _CSGDLocation!.Value.Min + 0xC;
        private bool _EquipmentScoreMultMelee_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultMelee => _EquipmentScoreMultMelee_IsSet ? _recordData.Slice(_EquipmentScoreMultMeleeLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultMagic
        private int _EquipmentScoreMultMagicLocation => _CSGDLocation!.Value.Min + 0x10;
        private bool _EquipmentScoreMultMagic_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultMagic => _EquipmentScoreMultMagic_IsSet ? _recordData.Slice(_EquipmentScoreMultMagicLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultRanged
        private int _EquipmentScoreMultRangedLocation => _CSGDLocation!.Value.Min + 0x14;
        private bool _EquipmentScoreMultRanged_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultRanged => _EquipmentScoreMultRanged_IsSet ? _recordData.Slice(_EquipmentScoreMultRangedLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultShout
        private int _EquipmentScoreMultShoutLocation => _CSGDLocation!.Value.Min + 0x18;
        private bool _EquipmentScoreMultShout_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultShout => _EquipmentScoreMultShout_IsSet ? _recordData.Slice(_EquipmentScoreMultShoutLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultUnarmed
        private int _EquipmentScoreMultUnarmedLocation => _CSGDLocation!.Value.Min + 0x1C;
        private bool _EquipmentScoreMultUnarmed_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultUnarmed => _EquipmentScoreMultUnarmed_IsSet ? _recordData.Slice(_EquipmentScoreMultUnarmedLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultStaff
        private int _EquipmentScoreMultStaffLocation => _CSGDLocation!.Value.Min + 0x20;
        private bool _EquipmentScoreMultStaff_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultStaff => _EquipmentScoreMultStaff_IsSet ? _recordData.Slice(_EquipmentScoreMultStaffLocation, 4).Float() : default(Single);
        #endregion
        #region AvoidThreatChance
        private int _AvoidThreatChanceLocation => _CSGDLocation!.Value.Min + 0x24;
        private bool _AvoidThreatChance_IsSet => _CSGDLocation.HasValue;
        public Percent AvoidThreatChance => _AvoidThreatChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_AvoidThreatChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region DodgeThreadChance
        private int _DodgeThreadChanceLocation => _CSGDLocation!.Value.Min + 0x28;
        private bool _DodgeThreadChance_IsSet => _CSGDLocation.HasValue;
        public Percent DodgeThreadChance => _DodgeThreadChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DodgeThreadChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region EvadeThreatChance
        private int _EvadeThreatChanceLocation => _CSGDLocation!.Value.Min + 0x2C;
        private bool _EvadeThreatChance_IsSet => _CSGDLocation.HasValue;
        public Percent EvadeThreatChance => _EvadeThreatChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_EvadeThreatChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region HealAllyDistance
        private int _HealAllyDistanceLocation => _CSGDLocation!.Value.Min + 0x30;
        private bool _HealAllyDistance_IsSet => _CSGDLocation.HasValue;
        public Single HealAllyDistance => _HealAllyDistance_IsSet ? _recordData.Slice(_HealAllyDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region JumpCostMult
        private int _JumpCostMultLocation => _CSGDLocation!.Value.Min + 0x34;
        private bool _JumpCostMult_IsSet => _CSGDLocation.HasValue;
        public Single JumpCostMult => _JumpCostMult_IsSet ? _recordData.Slice(_JumpCostMultLocation, 4).Float() : default(Single);
        #endregion
        #region TauntDelayMult
        private int _TauntDelayMultLocation => _CSGDLocation!.Value.Min + 0x38;
        private bool _TauntDelayMult_IsSet => _CSGDLocation.HasValue;
        public Single TauntDelayMult => _TauntDelayMult_IsSet ? _recordData.Slice(_TauntDelayMultLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _CSMELocation;
        #region MeleeAttackStaggeredMult
        private int _MeleeAttackStaggeredMultLocation => _CSMELocation!.Value.Min;
        private bool _MeleeAttackStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeAttackStaggeredMult => _MeleeAttackStaggeredMult_IsSet ? _recordData.Slice(_MeleeAttackStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleePowerAttackStaggeredMult
        private int _MeleePowerAttackStaggeredMultLocation => _CSMELocation!.Value.Min + 0x4;
        private bool _MeleePowerAttackStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleePowerAttackStaggeredMult => _MeleePowerAttackStaggeredMult_IsSet ? _recordData.Slice(_MeleePowerAttackStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleePowerAttackBlockingMult
        private int _MeleePowerAttackBlockingMultLocation => _CSMELocation!.Value.Min + 0x8;
        private bool _MeleePowerAttackBlockingMult_IsSet => _CSMELocation.HasValue;
        public Single MeleePowerAttackBlockingMult => _MeleePowerAttackBlockingMult_IsSet ? _recordData.Slice(_MeleePowerAttackBlockingMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashMult
        private int _MeleeBashMultLocation => _CSMELocation!.Value.Min + 0xC;
        private bool _MeleeBashMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashMult => _MeleeBashMult_IsSet ? _recordData.Slice(_MeleeBashMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashRecoilMult
        private int _MeleeBashRecoilMultLocation => _CSMELocation!.Value.Min + 0x10;
        private bool _MeleeBashRecoilMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashRecoilMult => _MeleeBashRecoilMult_IsSet ? _recordData.Slice(_MeleeBashRecoilMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashAttackMult
        private int _MeleeBashAttackMultLocation => _CSMELocation!.Value.Min + 0x14;
        private bool _MeleeBashAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashAttackMult => _MeleeBashAttackMult_IsSet ? _recordData.Slice(_MeleeBashAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashPowerAttackMult
        private int _MeleeBashPowerAttackMultLocation => _CSMELocation!.Value.Min + 0x18;
        private bool _MeleeBashPowerAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashPowerAttackMult => _MeleeBashPowerAttackMult_IsSet ? _recordData.Slice(_MeleeBashPowerAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeSpecialAttackMult
        private int _MeleeSpecialAttackMultLocation => _CSMELocation!.Value.Min + 0x1C;
        private bool _MeleeSpecialAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeSpecialAttackMult => _MeleeSpecialAttackMult_IsSet ? _recordData.Slice(_MeleeSpecialAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBlockWhenStaggeredMult
        private int _MeleeBlockWhenStaggeredMultLocation => _CSMELocation!.Value.Min + 0x20;
        private bool _MeleeBlockWhenStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBlockWhenStaggeredMult => _MeleeBlockWhenStaggeredMult_IsSet ? _recordData.Slice(_MeleeBlockWhenStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeAttackWhenStaggeredMult
        private int _MeleeAttackWhenStaggeredMultLocation => _CSMELocation!.Value.Min + 0x24;
        private bool _MeleeAttackWhenStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeAttackWhenStaggeredMult => _MeleeAttackWhenStaggeredMult_IsSet ? _recordData.Slice(_MeleeAttackWhenStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _CSRALocation;
        #region RangedAccuracyMult
        private int _RangedAccuracyMultLocation => _CSRALocation!.Value.Min;
        private bool _RangedAccuracyMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedAccuracyMult => _RangedAccuracyMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedAccuracyMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region RangedThrowMult
        private int _RangedThrowMultLocation => _CSRALocation!.Value.Min + 0x4;
        private bool _RangedThrowMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedThrowMult => _RangedThrowMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedThrowMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region RangedGrenadeAdvancedThrowingMult
        private int _RangedGrenadeAdvancedThrowingMultLocation => _CSRALocation!.Value.Min + 0x8;
        private bool _RangedGrenadeAdvancedThrowingMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedGrenadeAdvancedThrowingMult => _RangedGrenadeAdvancedThrowingMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedGrenadeAdvancedThrowingMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region RangedGrenadeFlashTargetMult
        private int _RangedGrenadeFlashTargetMultLocation => _CSRALocation!.Value.Min + 0xC;
        private bool _RangedGrenadeFlashTargetMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedGrenadeFlashTargetMult => _RangedGrenadeFlashTargetMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedGrenadeFlashTargetMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region RangedGrenadeThrowAtGroupMult
        private int _RangedGrenadeThrowAtGroupMultLocation => _CSRALocation!.Value.Min + 0x10;
        private bool _RangedGrenadeThrowAtGroupMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedGrenadeThrowAtGroupMult => _RangedGrenadeThrowAtGroupMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedGrenadeThrowAtGroupMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region RangedGrenadeCloseRangeAttackChanceMult
        private int _RangedGrenadeCloseRangeAttackChanceMultLocation => _CSRALocation!.Value.Min + 0x14;
        private bool _RangedGrenadeCloseRangeAttackChanceMult_IsSet => _CSRALocation.HasValue;
        public Percent RangedGrenadeCloseRangeAttackChanceMult => _RangedGrenadeCloseRangeAttackChanceMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_RangedGrenadeCloseRangeAttackChanceMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        private RangeInt32? _CSCRLocation;
        #region CloseRangeDuelingCircleMult
        private int _CloseRangeDuelingCircleMultLocation => _CSCRLocation!.Value.Min;
        private bool _CloseRangeDuelingCircleMult_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeDuelingCircleMult => _CloseRangeDuelingCircleMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeDuelingCircleMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeDuelingFallbackMult
        private int _CloseRangeDuelingFallbackMultLocation => _CSCRLocation!.Value.Min + 0x4;
        private bool _CloseRangeDuelingFallbackMult_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeDuelingFallbackMult => _CloseRangeDuelingFallbackMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeDuelingFallbackMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeFlankDistance
        private int _CloseRangeFlankDistanceLocation => _CSCRLocation!.Value.Min + 0x8;
        private bool _CloseRangeFlankDistance_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeFlankDistance => _CloseRangeFlankDistance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeFlankDistanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeFlankingStalkTime
        private int _CloseRangeFlankingStalkTimeLocation => _CSCRLocation!.Value.Min + 0xC;
        private bool _CloseRangeFlankingStalkTime_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeFlankingStalkTime => _CloseRangeFlankingStalkTime_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeFlankingStalkTimeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargeDistance
        private int _CloseRangeChargeDistanceLocation => _CSCRLocation!.Value.Min + 0x10;
        private bool _CloseRangeChargeDistance_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeChargeDistance => _CloseRangeChargeDistance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeChargeDistanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargingThrowProbability
        private int _CloseRangeChargingThrowProbabilityLocation => _CSCRLocation!.Value.Min + 0x14;
        private bool _CloseRangeChargingThrowProbability_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeChargingThrowProbability => _CloseRangeChargingThrowProbability_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeChargingThrowProbabilityLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargingSprintFastProbability
        private int _CloseRangeChargingSprintFastProbabilityLocation => _CSCRLocation!.Value.Min + 0x18;
        private bool _CloseRangeChargingSprintFastProbability_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeChargingSprintFastProbability => _CloseRangeChargingSprintFastProbability_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeChargingSprintFastProbabilityLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargingSideswipeProbability
        private int _CloseRangeChargingSideswipeProbabilityLocation => _CSCRLocation!.Value.Min + 0x1C;
        private bool _CloseRangeChargingSideswipeProbability_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeChargingSideswipeProbability => _CloseRangeChargingSideswipeProbability_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeChargingSideswipeProbabilityLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargingDisengageProbability
        private int _CloseRangeChargingDisengageProbabilityLocation => _CSCRLocation!.Value.Min + 0x20;
        private bool _CloseRangeChargingDisengageProbability_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeChargingDisengageProbability => _CloseRangeChargingDisengageProbability_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeChargingDisengageProbabilityLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeChargingThrowMaxTargets
        private int _CloseRangeChargingThrowMaxTargetsLocation => _CSCRLocation!.Value.Min + 0x24;
        private bool _CloseRangeChargingThrowMaxTargets_IsSet => _CSCRLocation.HasValue;
        public UInt32 CloseRangeChargingThrowMaxTargets => _CloseRangeChargingThrowMaxTargets_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_CloseRangeChargingThrowMaxTargetsLocation, 4)) : default(UInt32);
        #endregion
        #region CloseRangeFlankingVariance
        private int _CloseRangeFlankingVarianceLocation => _CSCRLocation!.Value.Min + 0x28;
        private bool _CloseRangeFlankingVariance_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeFlankingVariance => _CloseRangeFlankingVariance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeFlankingVarianceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeRetreatChance
        private int _CloseRangeRetreatChanceLocation => _CSCRLocation!.Value.Min + 0x2C;
        private bool _CloseRangeRetreatChance_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeRetreatChance => _CloseRangeRetreatChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeRetreatChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CloseRangeRetreatDistanceMult
        private int _CloseRangeRetreatDistanceMultLocation => _CSCRLocation!.Value.Min + 0x30;
        private bool _CloseRangeRetreatDistanceMult_IsSet => _CSCRLocation.HasValue;
        public Percent CloseRangeRetreatDistanceMult => _CloseRangeRetreatDistanceMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CloseRangeRetreatDistanceMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        private RangeInt32? _CSLRLocation;
        #region LongRangeStrafeMult
        private int _LongRangeStrafeMultLocation => _CSLRLocation!.Value.Min;
        private bool _LongRangeStrafeMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeStrafeMult => _LongRangeStrafeMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeStrafeMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeAdjustRangeMult
        private int _LongRangeAdjustRangeMultLocation => _CSLRLocation!.Value.Min + 0x4;
        private bool _LongRangeAdjustRangeMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeAdjustRangeMult => _LongRangeAdjustRangeMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeAdjustRangeMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeCrouchMult
        private int _LongRangeCrouchMultLocation => _CSLRLocation!.Value.Min + 0x8;
        private bool _LongRangeCrouchMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeCrouchMult => _LongRangeCrouchMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeCrouchMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeWaitMult
        private int _LongRangeWaitMultLocation => _CSLRLocation!.Value.Min + 0xC;
        private bool _LongRangeWaitMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeWaitMult => _LongRangeWaitMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeWaitMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeRangeMult
        private int _LongRangeRangeMultLocation => _CSLRLocation!.Value.Min + 0x10;
        private bool _LongRangeRangeMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeRangeMult => _LongRangeRangeMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeRangeMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeProvideSuppressiveFireMult
        private int _LongRangeProvideSuppressiveFireMultLocation => _CSLRLocation!.Value.Min + 0x14;
        private bool _LongRangeProvideSuppressiveFireMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeProvideSuppressiveFireMult => _LongRangeProvideSuppressiveFireMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeProvideSuppressiveFireMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeRetreatChance
        private int _LongRangeRetreatChanceLocation => _CSLRLocation!.Value.Min + 0x18;
        private bool _LongRangeRetreatChance_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeRetreatChance => _LongRangeRetreatChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeRetreatChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeRetreatHideTimeMult
        private int _LongRangeRetreatHideTimeMultLocation => _CSLRLocation!.Value.Min + 0x1C;
        private bool _LongRangeRetreatHideTimeMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeRetreatHideTimeMult => _LongRangeRetreatHideTimeMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeRetreatHideTimeMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region LongRangeRetreatDistanceMult
        private int _LongRangeRetreatDistanceMultLocation => _CSLRLocation!.Value.Min + 0x20;
        private bool _LongRangeRetreatDistanceMult_IsSet => _CSLRLocation.HasValue;
        public Percent LongRangeRetreatDistanceMult => _LongRangeRetreatDistanceMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_LongRangeRetreatDistanceMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        private RangeInt32? _CSCVLocation;
        #region CoverSearchDistanceMult
        private int _CoverSearchDistanceMultLocation => _CSCVLocation!.Value.Min;
        private bool _CoverSearchDistanceMult_IsSet => _CSCVLocation.HasValue;
        public Percent CoverSearchDistanceMult => _CoverSearchDistanceMult_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CoverSearchDistanceMultLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region CoverSearchSuppressionSensitivity
        private int _CoverSearchSuppressionSensitivityLocation => _CSCVLocation!.Value.Min + 0x4;
        private bool _CoverSearchSuppressionSensitivity_IsSet => _CSCVLocation.HasValue;
        public Percent CoverSearchSuppressionSensitivity => _CoverSearchSuppressionSensitivity_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_CoverSearchSuppressionSensitivityLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        private RangeInt32? _CSFLLocation;
        #region FlightHoverChance
        private int _FlightHoverChanceLocation => _CSFLLocation!.Value.Min;
        private bool _FlightHoverChance_IsSet => _CSFLLocation.HasValue;
        public Percent FlightHoverChance => _FlightHoverChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightHoverChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightDiveBombChance
        private int _FlightDiveBombChanceLocation => _CSFLLocation!.Value.Min + 0x4;
        private bool _FlightDiveBombChance_IsSet => _CSFLLocation.HasValue;
        public Percent FlightDiveBombChance => _FlightDiveBombChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightDiveBombChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightGroundAttackChance
        private int _FlightGroundAttackChanceLocation => _CSFLLocation!.Value.Min + 0x8;
        private bool _FlightGroundAttackChance_IsSet => _CSFLLocation.HasValue;
        public Percent FlightGroundAttackChance => _FlightGroundAttackChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightGroundAttackChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightHoverTime
        private int _FlightHoverTimeLocation => _CSFLLocation!.Value.Min + 0xC;
        private bool _FlightHoverTime_IsSet => _CSFLLocation.HasValue;
        public Percent FlightHoverTime => _FlightHoverTime_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightHoverTimeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightGroundAttackTime
        private int _FlightGroundAttackTimeLocation => _CSFLLocation!.Value.Min + 0x10;
        private bool _FlightGroundAttackTime_IsSet => _CSFLLocation.HasValue;
        public Percent FlightGroundAttackTime => _FlightGroundAttackTime_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightGroundAttackTimeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightPerchAttackChance
        private int _FlightPerchAttackChanceLocation => _CSFLLocation!.Value.Min + 0x14;
        private bool _FlightPerchAttackChance_IsSet => _CSFLLocation.HasValue;
        public Percent FlightPerchAttackChance => _FlightPerchAttackChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightPerchAttackChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightPerchAttackTime
        private int _FlightPerchAttackTimeLocation => _CSFLLocation!.Value.Min + 0x18;
        private bool _FlightPerchAttackTime_IsSet => _CSFLLocation.HasValue;
        public Percent FlightPerchAttackTime => _FlightPerchAttackTime_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightPerchAttackTimeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region FlightFlyingAttackChance
        private int _FlightFlyingAttackChanceLocation => _CSFLLocation!.Value.Min + 0x1C;
        private bool _FlightFlyingAttackChance_IsSet => _CSFLLocation.HasValue;
        public Percent FlightFlyingAttackChance => _FlightFlyingAttackChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_FlightFlyingAttackChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        private RangeInt32? _CSTNLocation;
        #region TunnelCostMult
        private int _TunnelCostMultLocation => _CSTNLocation!.Value.Min;
        private bool _TunnelCostMult_IsSet => _CSTNLocation.HasValue;
        public Single TunnelCostMult => _TunnelCostMult_IsSet ? _recordData.Slice(_TunnelCostMultLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelChance
        private int _TunnelChanceLocation => _CSTNLocation!.Value.Min + 0x4;
        private bool _TunnelChance_IsSet => _CSTNLocation.HasValue;
        public Percent TunnelChance => _TunnelChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_TunnelChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region TunnelMaxDistance
        private int _TunnelMaxDistanceLocation => _CSTNLocation!.Value.Min + 0x8;
        private bool _TunnelMaxDistance_IsSet => _CSTNLocation.HasValue;
        public Single TunnelMaxDistance => _TunnelMaxDistance_IsSet ? _recordData.Slice(_TunnelMaxDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelSpeedMult
        private int _TunnelSpeedMultLocation => _CSTNLocation!.Value.Min + 0xC;
        private bool _TunnelSpeedMult_IsSet => _CSTNLocation.HasValue;
        public Single TunnelSpeedMult => _TunnelSpeedMult_IsSet ? _recordData.Slice(_TunnelSpeedMultLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelMinTime
        private int _TunnelMinTimeLocation => _CSTNLocation!.Value.Min + 0x10;
        private bool _TunnelMinTime_IsSet => _CSTNLocation.HasValue;
        public Single TunnelMinTime => _TunnelMinTime_IsSet ? _recordData.Slice(_TunnelMinTimeLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelMaxTime
        private int _TunnelMaxTimeLocation => _CSTNLocation!.Value.Min + 0x14;
        private bool _TunnelMaxTime_IsSet => _CSTNLocation.HasValue;
        public Single TunnelMaxTime => _TunnelMaxTime_IsSet ? _recordData.Slice(_TunnelMaxTimeLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelMaximumTime
        private int _TunnelMaximumTimeLocation => _CSTNLocation!.Value.Min + 0x18;
        private bool _TunnelMaximumTime_IsSet => _CSTNLocation.HasValue;
        public Single TunnelMaximumTime => _TunnelMaximumTime_IsSet ? _recordData.Slice(_TunnelMaximumTimeLocation, 4).Float() : default(Single);
        #endregion
        #region TunnelCooldown
        private int _TunnelCooldownLocation => _CSTNLocation!.Value.Min + 0x1C;
        private bool _TunnelCooldown_IsSet => _CSTNLocation.HasValue;
        public Single TunnelCooldown => _TunnelCooldown_IsSet ? _recordData.Slice(_TunnelCooldownLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _CSSGLocation;
        #region SpaceGeneralPilotSkill
        private int _SpaceGeneralPilotSkillLocation => _CSSGLocation!.Value.Min;
        private bool _SpaceGeneralPilotSkill_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralPilotSkill => _SpaceGeneralPilotSkill_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralPilotSkillLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAccuracy
        private int _SpaceGeneralAccuracyLocation => _CSSGLocation!.Value.Min + 0x4;
        private bool _SpaceGeneralAccuracy_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralAccuracy => _SpaceGeneralAccuracy_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralAccuracyLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralTargetShield
        private int _SpaceGeneralTargetShieldLocation => _CSSGLocation!.Value.Min + 0x8;
        private bool _SpaceGeneralTargetShield_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralTargetShield => _SpaceGeneralTargetShield_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralTargetShieldLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAdjustment
        private int _SpaceGeneralAdjustmentLocation => _CSSGLocation!.Value.Min + 0xC;
        private bool _SpaceGeneralAdjustment_IsSet => _CSSGLocation.HasValue;
        public Single SpaceGeneralAdjustment => _SpaceGeneralAdjustment_IsSet ? _recordData.Slice(_SpaceGeneralAdjustmentLocation, 4).Float() : default(Single);
        #endregion
        #region SpaceGeneralEngageManeuverChanceDirectAttack
        private int _SpaceGeneralEngageManeuverChanceDirectAttackLocation => _CSSGLocation!.Value.Min + 0x10;
        private bool _SpaceGeneralEngageManeuverChanceDirectAttack_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEngageManeuverChanceDirectAttack => _SpaceGeneralEngageManeuverChanceDirectAttack_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEngageManeuverChanceDirectAttackLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChancePass
        private int _SpaceGeneralEngageManeuverChancePassLocation => _CSSGLocation!.Value.Min + 0x14;
        private bool _SpaceGeneralEngageManeuverChancePass_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEngageManeuverChancePass => _SpaceGeneralEngageManeuverChancePass_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEngageManeuverChancePassLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceLeadTurn
        private int _SpaceGeneralEngageManeuverChanceLeadTurnLocation => _CSSGLocation!.Value.Min + 0x18;
        private bool _SpaceGeneralEngageManeuverChanceLeadTurn_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEngageManeuverChanceLeadTurn => _SpaceGeneralEngageManeuverChanceLeadTurn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEngageManeuverChanceLeadTurnLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceSlideTurn
        private int _SpaceGeneralEngageManeuverChanceSlideTurnLocation => _CSSGLocation!.Value.Min + 0x1C;
        private bool _SpaceGeneralEngageManeuverChanceSlideTurn_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEngageManeuverChanceSlideTurn => _SpaceGeneralEngageManeuverChanceSlideTurn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEngageManeuverChanceSlideTurnLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEngageManeuverChanceBarrelRoll
        private int _SpaceGeneralEngageManeuverChanceBarrelRollLocation => _CSSGLocation!.Value.Min + 0x20;
        private bool _SpaceGeneralEngageManeuverChanceBarrelRoll_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEngageManeuverChanceBarrelRoll => _SpaceGeneralEngageManeuverChanceBarrelRoll_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEngageManeuverChanceBarrelRollLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceBreak
        private int _SpaceGeneralEvadeManeuverChanceBreakLocation => _CSSGLocation!.Value.Min + 0x24;
        private bool _SpaceGeneralEvadeManeuverChanceBreak_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEvadeManeuverChanceBreak => _SpaceGeneralEvadeManeuverChanceBreak_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEvadeManeuverChanceBreakLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceScissors
        private int _SpaceGeneralEvadeManeuverChanceScissorsLocation => _CSSGLocation!.Value.Min + 0x28;
        private bool _SpaceGeneralEvadeManeuverChanceScissors_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEvadeManeuverChanceScissors => _SpaceGeneralEvadeManeuverChanceScissors_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEvadeManeuverChanceScissorsLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceCut
        private int _SpaceGeneralEvadeManeuverChanceCutLocation => _CSSGLocation!.Value.Min + 0x2C;
        private bool _SpaceGeneralEvadeManeuverChanceCut_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEvadeManeuverChanceCut => _SpaceGeneralEvadeManeuverChanceCut_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEvadeManeuverChanceCutLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralEvadeManeuverChanceBoost
        private int _SpaceGeneralEvadeManeuverChanceBoostLocation => _CSSGLocation!.Value.Min + 0x30;
        private bool _SpaceGeneralEvadeManeuverChanceBoost_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralEvadeManeuverChanceBoost => _SpaceGeneralEvadeManeuverChanceBoost_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralEvadeManeuverChanceBoostLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceSliceback
        private int _SpaceGeneralAcquireManeuverChanceSlicebackLocation => _CSSGLocation!.Value.Min + 0x34;
        private bool _SpaceGeneralAcquireManeuverChanceSliceback_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralAcquireManeuverChanceSliceback => _SpaceGeneralAcquireManeuverChanceSliceback_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralAcquireManeuverChanceSlicebackLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceStrafeTurn
        private int _SpaceGeneralAcquireManeuverChanceStrafeTurnLocation => _CSSGLocation!.Value.Min + 0x38;
        private bool _SpaceGeneralAcquireManeuverChanceStrafeTurn_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralAcquireManeuverChanceStrafeTurn => _SpaceGeneralAcquireManeuverChanceStrafeTurn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralAcquireManeuverChanceStrafeTurnLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceAcquire
        private int _SpaceGeneralAcquireManeuverChanceAcquireLocation => _CSSGLocation!.Value.Min + 0x3C;
        private bool _SpaceGeneralAcquireManeuverChanceAcquire_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralAcquireManeuverChanceAcquire => _SpaceGeneralAcquireManeuverChanceAcquire_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralAcquireManeuverChanceAcquireLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralAcquireManeuverChanceTurn
        private int _SpaceGeneralAcquireManeuverChanceTurnLocation => _CSSGLocation!.Value.Min + 0x40;
        private bool _SpaceGeneralAcquireManeuverChanceTurn_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralAcquireManeuverChanceTurn => _SpaceGeneralAcquireManeuverChanceTurn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralAcquireManeuverChanceTurnLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralDisengageManeuverChance
        private int _SpaceGeneralDisengageManeuverChanceLocation => _CSSGLocation!.Value.Min + 0x44;
        private bool _SpaceGeneralDisengageManeuverChance_IsSet => _CSSGLocation.HasValue;
        public Percent SpaceGeneralDisengageManeuverChance => _SpaceGeneralDisengageManeuverChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceGeneralDisengageManeuverChanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceGeneralMissileSeekingStrength
        private int _SpaceGeneralMissileSeekingStrengthLocation => _CSSGLocation!.Value.Min + 0x48;
        private bool _SpaceGeneralMissileSeekingStrength_IsSet => _CSSGLocation.HasValue;
        public Single SpaceGeneralMissileSeekingStrength => _SpaceGeneralMissileSeekingStrength_IsSet ? _recordData.Slice(_SpaceGeneralMissileSeekingStrengthLocation, 4).Float() : default(Single);
        #endregion
        #region SpaceGeneralMinTimeBetweenBoosts
        private int _SpaceGeneralMinTimeBetweenBoostsLocation => _CSSGLocation!.Value.Min + 0x4C;
        private bool _SpaceGeneralMinTimeBetweenBoosts_IsSet => _CSSGLocation.HasValue;
        public Single SpaceGeneralMinTimeBetweenBoosts => _SpaceGeneralMinTimeBetweenBoosts_IsSet ? _recordData.Slice(_SpaceGeneralMinTimeBetweenBoostsLocation, 4).Float() : default(Single);
        #endregion
        #region SpaceGeneralCombatStrafing
        private int _SpaceGeneralCombatStrafingLocation => _CSSGLocation!.Value.Min + 0x50;
        private bool _SpaceGeneralCombatStrafing_IsSet => _CSSGLocation.HasValue;
        public Boolean SpaceGeneralCombatStrafing => _SpaceGeneralCombatStrafing_IsSet ? _recordData.Slice(_SpaceGeneralCombatStrafingLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region SpaceGeneralRollsDuringBoost
        private int _SpaceGeneralRollsDuringBoostLocation => _CSSGLocation!.Value.Min + 0x51;
        private bool _SpaceGeneralRollsDuringBoost_IsSet => _CSSGLocation.HasValue;
        public Boolean SpaceGeneralRollsDuringBoost => _SpaceGeneralRollsDuringBoost_IsSet ? _recordData.Slice(_SpaceGeneralRollsDuringBoostLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region UnknownCSSG
        private int _UnknownCSSGLocation => _CSSGLocation!.Value.Min + 0x52;
        private bool _UnknownCSSG_IsSet => _CSSGLocation.HasValue;
        public Int16 UnknownCSSG => _UnknownCSSG_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_UnknownCSSGLocation, 2)) : default(Int16);
        #endregion
        #region SpaceGeneralPowerWeighting
        private int _SpaceGeneralPowerWeightingLocation => _CSSGLocation!.Value.Min + 0x54;
        private bool _SpaceGeneralPowerWeighting_IsSet => _CSSGLocation.HasValue;
        private ICombatStylePowerWeightingGetter? _SpaceGeneralPowerWeighting => _SpaceGeneralPowerWeighting_IsSet ? CombatStylePowerWeightingBinaryOverlay.CombatStylePowerWeightingFactory(_recordData.Slice(_SpaceGeneralPowerWeightingLocation), _package) : default;
        public ICombatStylePowerWeightingGetter SpaceGeneralPowerWeighting => _SpaceGeneralPowerWeighting ?? new CombatStylePowerWeighting();
        #endregion
        private RangeInt32? _CSSMLocation;
        #region SpaceManeuverTypesMaxTime
        private int _SpaceManeuverTypesMaxTimeLocation => _CSSMLocation!.Value.Min;
        private bool _SpaceManeuverTypesMaxTime_IsSet => _CSSMLocation.HasValue;
        private ICombatStyleManeuverTimingGetter? _SpaceManeuverTypesMaxTime => _SpaceManeuverTypesMaxTime_IsSet ? CombatStyleManeuverTimingBinaryOverlay.CombatStyleManeuverTimingFactory(_recordData.Slice(_SpaceManeuverTypesMaxTimeLocation), _package) : default;
        public ICombatStyleManeuverTimingGetter SpaceManeuverTypesMaxTime => _SpaceManeuverTypesMaxTime ?? new CombatStyleManeuverTiming();
        #endregion
        #region SpaceManeuverTypesReentryDelays
        private int _SpaceManeuverTypesReentryDelaysLocation => _CSSMLocation!.Value.Min + 0x20;
        private bool _SpaceManeuverTypesReentryDelays_IsSet => _CSSMLocation.HasValue;
        private ICombatStyleManeuverTimingGetter? _SpaceManeuverTypesReentryDelays => _SpaceManeuverTypesReentryDelays_IsSet ? CombatStyleManeuverTimingBinaryOverlay.CombatStyleManeuverTimingFactory(_recordData.Slice(_SpaceManeuverTypesReentryDelaysLocation), _package) : default;
        public ICombatStyleManeuverTimingGetter SpaceManeuverTypesReentryDelays => _SpaceManeuverTypesReentryDelays ?? new CombatStyleManeuverTiming();
        #endregion
        private RangeInt32? _CSSRLocation;
        #region SpaceRepairDamageThreshold
        private int _SpaceRepairDamageThresholdLocation => _CSSRLocation!.Value.Min;
        private bool _SpaceRepairDamageThreshold_IsSet => _CSSRLocation.HasValue;
        public Percent SpaceRepairDamageThreshold => _SpaceRepairDamageThreshold_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceRepairDamageThresholdLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceRepairFarawayDistance
        private int _SpaceRepairFarawayDistanceLocation => _CSSRLocation!.Value.Min + 0x4;
        private bool _SpaceRepairFarawayDistance_IsSet => _CSSRLocation.HasValue;
        public Percent SpaceRepairFarawayDistance => _SpaceRepairFarawayDistance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceRepairFarawayDistanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceRepairPowerToUse
        private int _SpaceRepairPowerToUseLocation => _CSSRLocation!.Value.Min + 0x8;
        private bool _SpaceRepairPowerToUse_IsSet => _CSSRLocation.HasValue;
        public Percent SpaceRepairPowerToUse => _SpaceRepairPowerToUse_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceRepairPowerToUseLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceRepairInClosePowerWeightingTables
        private int _SpaceRepairInClosePowerWeightingTablesLocation => _CSSRLocation!.Value.Min + 0xC;
        private bool _SpaceRepairInClosePowerWeightingTables_IsSet => _CSSRLocation.HasValue;
        private ICombatStylePowerWeightingGetter? _SpaceRepairInClosePowerWeightingTables => _SpaceRepairInClosePowerWeightingTables_IsSet ? CombatStylePowerWeightingBinaryOverlay.CombatStylePowerWeightingFactory(_recordData.Slice(_SpaceRepairInClosePowerWeightingTablesLocation), _package) : default;
        public ICombatStylePowerWeightingGetter SpaceRepairInClosePowerWeightingTables => _SpaceRepairInClosePowerWeightingTables ?? new CombatStylePowerWeighting();
        #endregion
        #region SpaceRepairFarawayPowerWeightingTables
        private int _SpaceRepairFarawayPowerWeightingTablesLocation => _CSSRLocation!.Value.Min + 0x30;
        private bool _SpaceRepairFarawayPowerWeightingTables_IsSet => _CSSRLocation.HasValue;
        private ICombatStylePowerWeightingGetter? _SpaceRepairFarawayPowerWeightingTables => _SpaceRepairFarawayPowerWeightingTables_IsSet ? CombatStylePowerWeightingBinaryOverlay.CombatStylePowerWeightingFactory(_recordData.Slice(_SpaceRepairFarawayPowerWeightingTablesLocation), _package) : default;
        public ICombatStylePowerWeightingGetter SpaceRepairFarawayPowerWeightingTables => _SpaceRepairFarawayPowerWeightingTables ?? new CombatStylePowerWeighting();
        #endregion
        private RangeInt32? _CSSALocation;
        #region SpaceApproachingMinDistance
        private int _SpaceApproachingMinDistanceLocation => _CSSALocation!.Value.Min;
        private bool _SpaceApproachingMinDistance_IsSet => _CSSALocation.HasValue;
        public Percent SpaceApproachingMinDistance => _SpaceApproachingMinDistance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SpaceApproachingMinDistanceLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region SpaceApproachingWeighting
        private int _SpaceApproachingWeightingLocation => _CSSALocation!.Value.Min + 0x4;
        private bool _SpaceApproachingWeighting_IsSet => _CSSALocation.HasValue;
        private ICombatStylePowerWeightingGetter? _SpaceApproachingWeighting => _SpaceApproachingWeighting_IsSet ? CombatStylePowerWeightingBinaryOverlay.CombatStylePowerWeightingFactory(_recordData.Slice(_SpaceApproachingWeightingLocation), _package) : default;
        public ICombatStylePowerWeightingGetter SpaceApproachingWeighting => _SpaceApproachingWeighting ?? new CombatStylePowerWeighting();
        #endregion
        private RangeInt32? _CSSDLocation;
        #region SpaceDetectionRating1
        private int _SpaceDetectionRating1Location => _CSSDLocation!.Value.Min;
        private bool _SpaceDetectionRating1_IsSet => _CSSDLocation.HasValue;
        public Single SpaceDetectionRating1 => _SpaceDetectionRating1_IsSet ? _recordData.Slice(_SpaceDetectionRating1Location, 4).Float() : default(Single);
        #endregion
        #region SpaceDetectionRating2
        private int _SpaceDetectionRating2Location => _CSSDLocation!.Value.Min + 0x4;
        private bool _SpaceDetectionRating2_IsSet => _CSSDLocation.HasValue;
        public Single SpaceDetectionRating2 => _SpaceDetectionRating2_IsSet ? _recordData.Slice(_SpaceDetectionRating2Location, 4).Float() : default(Single);
        #endregion
        #region SpaceDetectionRating3
        private int _SpaceDetectionRating3Location => _CSSDLocation!.Value.Min + 0x8;
        private bool _SpaceDetectionRating3_IsSet => _CSSDLocation.HasValue;
        public Single SpaceDetectionRating3 => _SpaceDetectionRating3_IsSet ? _recordData.Slice(_SpaceDetectionRating3Location, 4).Float() : default(Single);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public CombatStyle.Flag? Flags => _FlagsLocation.HasValue ? (CombatStyle.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(CombatStyle.Flag?);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region TemplateDefaultCombatStyle
        private int? _TemplateDefaultCombatStyleLocation;
        public IFormLinkNullableGetter<ICombatStyleGetter> TemplateDefaultCombatStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICombatStyleGetter>(_package, _recordData, _TemplateDefaultCombatStyleLocation);
        #endregion
        #region Templates
        private RangeInt32? _TemplatesLocation;
        public ICombatStyleTemplatesGetter? Templates => _TemplatesLocation.HasValue ? CombatStyleTemplatesBinaryOverlay.CombatStyleTemplatesFactory(_recordData.Slice(_TemplatesLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICombatStyleGetter CombatStyleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CombatStyleBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICombatStyleGetter CombatStyleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CombatStyleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    _CSGDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.TauntDelayMult;
                }
                case RecordTypeInts.CSME:
                {
                    _CSMELocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult;
                }
                case RecordTypeInts.CSRA:
                {
                    _CSRALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.RangedGrenadeCloseRangeAttackChanceMult;
                }
                case RecordTypeInts.CSCR:
                {
                    _CSCRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.CloseRangeRetreatDistanceMult;
                }
                case RecordTypeInts.CSLR:
                {
                    _CSLRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.LongRangeRetreatDistanceMult;
                }
                case RecordTypeInts.CSCV:
                {
                    _CSCVLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.CoverSearchSuppressionSensitivity;
                }
                case RecordTypeInts.CSFL:
                {
                    _CSFLLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.FlightFlyingAttackChance;
                }
                case RecordTypeInts.CSTN:
                {
                    _CSTNLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.TunnelCooldown;
                }
                case RecordTypeInts.CSSG:
                {
                    _CSSGLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.SpaceGeneralPowerWeighting;
                }
                case RecordTypeInts.CSSM:
                {
                    _CSSMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.SpaceManeuverTypesReentryDelays;
                }
                case RecordTypeInts.CSSR:
                {
                    _CSSRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.SpaceRepairFarawayPowerWeightingTables;
                }
                case RecordTypeInts.CSSA:
                {
                    _CSSALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.SpaceApproachingWeighting;
                }
                case RecordTypeInts.CSSD:
                {
                    _CSSDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.SpaceDetectionRating3;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.FNAM;
                }
                case RecordTypeInts.TNAM:
                {
                    _TemplateDefaultCombatStyleLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.TemplateDefaultCombatStyle;
                }
                case RecordTypeInts.UNAM:
                {
                    _TemplatesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)CombatStyle_FieldIndex.Templates;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<CombatStyle>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICombatStyleGetter rhs) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

