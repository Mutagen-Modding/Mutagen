/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SnapTemplate :
        StarfieldMajorRecord,
        IEquatable<ISnapTemplateGetter>,
        ILoquiObjectSetter<SnapTemplate>,
        ISnapTemplateInternal
    {
        #region Ctor
        protected SnapTemplate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ISnapTemplateGetter.Components => _Components;
        #endregion

        #endregion
        #region Parent
        private readonly IFormLinkNullable<ISnapTemplateGetter> _Parent = new FormLinkNullable<ISnapTemplateGetter>();
        public IFormLinkNullable<ISnapTemplateGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateGetter> ISnapTemplateGetter.Parent => this.Parent;
        #endregion
        #region Nodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SnapNodeEntry> _Nodes = new ExtendedList<SnapNodeEntry>();
        public ExtendedList<SnapNodeEntry> Nodes
        {
            get => this._Nodes;
            init => this._Nodes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISnapNodeEntryGetter> ISnapTemplateGetter.Nodes => _Nodes;
        #endregion

        #endregion
        #region ParentNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SnapParentNodeEntry> _ParentNodes = new ExtendedList<SnapParentNodeEntry>();
        public ExtendedList<SnapParentNodeEntry> ParentNodes
        {
            get => this._ParentNodes;
            init => this._ParentNodes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISnapParentNodeEntryGetter> ISnapTemplateGetter.ParentNodes => _ParentNodes;
        #endregion

        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single[]? _BNAM;
        public Single[]? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Single>? ISnapTemplateGetter.BNAM => _BNAM;
        #endregion

        #endregion
        #region NextNodeID
        public UInt32? NextNodeID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISnapTemplateGetter.NextNodeID => this.NextNodeID;
        #endregion
        #region STPT
        public UInt32? STPT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISnapTemplateGetter.STPT => this.STPT;
        #endregion
        #region CNAM
        public String? CNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISnapTemplateGetter.CNAM => this.CNAM;
        #endregion
        #region SnapTemplateRnamTraversal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SnapTemplateRnamTraversal> _SnapTemplateRnamTraversal = new ExtendedList<SnapTemplateRnamTraversal>();
        public ExtendedList<SnapTemplateRnamTraversal> SnapTemplateRnamTraversal
        {
            get => this._SnapTemplateRnamTraversal;
            init => this._SnapTemplateRnamTraversal = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISnapTemplateRnamTraversalGetter> ISnapTemplateGetter.SnapTemplateRnamTraversal => _SnapTemplateRnamTraversal;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SnapTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Parent = initialValue;
                this.Nodes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapNodeEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SnapNodeEntry.Mask<TItem>?>>());
                this.ParentNodes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapParentNodeEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SnapParentNodeEntry.Mask<TItem>?>>());
                this.BNAM = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NextNodeID = initialValue;
                this.STPT = initialValue;
                this.CNAM = initialValue;
                this.SnapTemplateRnamTraversal = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapTemplateRnamTraversal.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SnapTemplateRnamTraversal.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Parent,
                TItem Nodes,
                TItem ParentNodes,
                TItem BNAM,
                TItem NextNodeID,
                TItem STPT,
                TItem CNAM,
                TItem SnapTemplateRnamTraversal)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Parent = Parent;
                this.Nodes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapNodeEntry.Mask<TItem>?>>?>(Nodes, Enumerable.Empty<MaskItemIndexed<TItem, SnapNodeEntry.Mask<TItem>?>>());
                this.ParentNodes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapParentNodeEntry.Mask<TItem>?>>?>(ParentNodes, Enumerable.Empty<MaskItemIndexed<TItem, SnapParentNodeEntry.Mask<TItem>?>>());
                this.BNAM = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(BNAM, Enumerable.Empty<(int Index, TItem Value)>());
                this.NextNodeID = NextNodeID;
                this.STPT = STPT;
                this.CNAM = CNAM;
                this.SnapTemplateRnamTraversal = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapTemplateRnamTraversal.Mask<TItem>?>>?>(SnapTemplateRnamTraversal, Enumerable.Empty<MaskItemIndexed<TItem, SnapTemplateRnamTraversal.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Parent;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapNodeEntry.Mask<TItem>?>>?>? Nodes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapParentNodeEntry.Mask<TItem>?>>?>? ParentNodes;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? BNAM;
            public TItem NextNodeID;
            public TItem STPT;
            public TItem CNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SnapTemplateRnamTraversal.Mask<TItem>?>>?>? SnapTemplateRnamTraversal;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Nodes, rhs.Nodes)) return false;
                if (!object.Equals(this.ParentNodes, rhs.ParentNodes)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.NextNodeID, rhs.NextNodeID)) return false;
                if (!object.Equals(this.STPT, rhs.STPT)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.SnapTemplateRnamTraversal, rhs.SnapTemplateRnamTraversal)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Parent);
                hash.Add(this.Nodes);
                hash.Add(this.ParentNodes);
                hash.Add(this.BNAM);
                hash.Add(this.NextNodeID);
                hash.Add(this.STPT);
                hash.Add(this.CNAM);
                hash.Add(this.SnapTemplateRnamTraversal);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Parent)) return false;
                if (this.Nodes != null)
                {
                    if (!eval(this.Nodes.Overall)) return false;
                    if (this.Nodes.Specific != null)
                    {
                        foreach (var item in this.Nodes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ParentNodes != null)
                {
                    if (!eval(this.ParentNodes.Overall)) return false;
                    if (this.ParentNodes.Specific != null)
                    {
                        foreach (var item in this.ParentNodes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BNAM != null)
                {
                    if (!eval(this.BNAM.Overall)) return false;
                    if (this.BNAM.Specific != null)
                    {
                        foreach (var item in this.BNAM.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NextNodeID)) return false;
                if (!eval(this.STPT)) return false;
                if (!eval(this.CNAM)) return false;
                if (this.SnapTemplateRnamTraversal != null)
                {
                    if (!eval(this.SnapTemplateRnamTraversal.Overall)) return false;
                    if (this.SnapTemplateRnamTraversal.Specific != null)
                    {
                        foreach (var item in this.SnapTemplateRnamTraversal.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Parent)) return true;
                if (this.Nodes != null)
                {
                    if (eval(this.Nodes.Overall)) return true;
                    if (this.Nodes.Specific != null)
                    {
                        foreach (var item in this.Nodes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ParentNodes != null)
                {
                    if (eval(this.ParentNodes.Overall)) return true;
                    if (this.ParentNodes.Specific != null)
                    {
                        foreach (var item in this.ParentNodes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BNAM != null)
                {
                    if (eval(this.BNAM.Overall)) return true;
                    if (this.BNAM.Specific != null)
                    {
                        foreach (var item in this.BNAM.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NextNodeID)) return true;
                if (eval(this.STPT)) return true;
                if (eval(this.CNAM)) return true;
                if (this.SnapTemplateRnamTraversal != null)
                {
                    if (eval(this.SnapTemplateRnamTraversal.Overall)) return true;
                    if (this.SnapTemplateRnamTraversal.Specific != null)
                    {
                        foreach (var item in this.SnapTemplateRnamTraversal.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SnapTemplate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Parent = eval(this.Parent);
                if (Nodes != null)
                {
                    obj.Nodes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SnapNodeEntry.Mask<R>?>>?>(eval(this.Nodes.Overall), Enumerable.Empty<MaskItemIndexed<R, SnapNodeEntry.Mask<R>?>>());
                    if (Nodes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SnapNodeEntry.Mask<R>?>>();
                        obj.Nodes.Specific = l;
                        foreach (var item in Nodes.Specific)
                        {
                            MaskItemIndexed<R, SnapNodeEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SnapNodeEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ParentNodes != null)
                {
                    obj.ParentNodes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SnapParentNodeEntry.Mask<R>?>>?>(eval(this.ParentNodes.Overall), Enumerable.Empty<MaskItemIndexed<R, SnapParentNodeEntry.Mask<R>?>>());
                    if (ParentNodes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SnapParentNodeEntry.Mask<R>?>>();
                        obj.ParentNodes.Specific = l;
                        foreach (var item in ParentNodes.Specific)
                        {
                            MaskItemIndexed<R, SnapParentNodeEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SnapParentNodeEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (BNAM != null)
                {
                    obj.BNAM = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.BNAM.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (BNAM.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.BNAM.Specific = l;
                        foreach (var item in BNAM.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NextNodeID = eval(this.NextNodeID);
                obj.STPT = eval(this.STPT);
                obj.CNAM = eval(this.CNAM);
                if (SnapTemplateRnamTraversal != null)
                {
                    obj.SnapTemplateRnamTraversal = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SnapTemplateRnamTraversal.Mask<R>?>>?>(eval(this.SnapTemplateRnamTraversal.Overall), Enumerable.Empty<MaskItemIndexed<R, SnapTemplateRnamTraversal.Mask<R>?>>());
                    if (SnapTemplateRnamTraversal.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SnapTemplateRnamTraversal.Mask<R>?>>();
                        obj.SnapTemplateRnamTraversal.Specific = l;
                        foreach (var item in SnapTemplateRnamTraversal.Specific)
                        {
                            MaskItemIndexed<R, SnapTemplateRnamTraversal.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SnapTemplateRnamTraversal.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SnapTemplate.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SnapTemplate.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SnapTemplate.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Parent ?? true)
                    {
                        sb.AppendItem(Parent, "Parent");
                    }
                    if ((printMask?.Nodes?.Overall ?? true)
                        && Nodes is {} NodesItem)
                    {
                        sb.AppendLine("Nodes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NodesItem.Overall);
                            if (NodesItem.Specific != null)
                            {
                                foreach (var subItem in NodesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ParentNodes?.Overall ?? true)
                        && ParentNodes is {} ParentNodesItem)
                    {
                        sb.AppendLine("ParentNodes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ParentNodesItem.Overall);
                            if (ParentNodesItem.Specific != null)
                            {
                                foreach (var subItem in ParentNodesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.BNAM?.Overall ?? true)
                        && BNAM is {} BNAMItem)
                    {
                        sb.AppendLine("BNAM =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BNAMItem.Overall);
                            if (BNAMItem.Specific != null)
                            {
                                foreach (var subItem in BNAMItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NextNodeID ?? true)
                    {
                        sb.AppendItem(NextNodeID, "NextNodeID");
                    }
                    if (printMask?.STPT ?? true)
                    {
                        sb.AppendItem(STPT, "STPT");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if ((printMask?.SnapTemplateRnamTraversal?.Overall ?? true)
                        && SnapTemplateRnamTraversal is {} SnapTemplateRnamTraversalItem)
                    {
                        sb.AppendLine("SnapTemplateRnamTraversal =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SnapTemplateRnamTraversalItem.Overall);
                            if (SnapTemplateRnamTraversalItem.Specific != null)
                            {
                                foreach (var subItem in SnapTemplateRnamTraversalItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Parent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapNodeEntry.ErrorMask?>>?>? Nodes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapParentNodeEntry.ErrorMask?>>?>? ParentNodes;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? BNAM;
            public Exception? NextNodeID;
            public Exception? STPT;
            public Exception? CNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapTemplateRnamTraversal.ErrorMask?>>?>? SnapTemplateRnamTraversal;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SnapTemplate_FieldIndex enu = (SnapTemplate_FieldIndex)index;
                switch (enu)
                {
                    case SnapTemplate_FieldIndex.Components:
                        return Components;
                    case SnapTemplate_FieldIndex.Parent:
                        return Parent;
                    case SnapTemplate_FieldIndex.Nodes:
                        return Nodes;
                    case SnapTemplate_FieldIndex.ParentNodes:
                        return ParentNodes;
                    case SnapTemplate_FieldIndex.BNAM:
                        return BNAM;
                    case SnapTemplate_FieldIndex.NextNodeID:
                        return NextNodeID;
                    case SnapTemplate_FieldIndex.STPT:
                        return STPT;
                    case SnapTemplate_FieldIndex.CNAM:
                        return CNAM;
                    case SnapTemplate_FieldIndex.SnapTemplateRnamTraversal:
                        return SnapTemplateRnamTraversal;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SnapTemplate_FieldIndex enu = (SnapTemplate_FieldIndex)index;
                switch (enu)
                {
                    case SnapTemplate_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case SnapTemplate_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case SnapTemplate_FieldIndex.Nodes:
                        this.Nodes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapNodeEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case SnapTemplate_FieldIndex.ParentNodes:
                        this.ParentNodes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapParentNodeEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case SnapTemplate_FieldIndex.BNAM:
                        this.BNAM = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SnapTemplate_FieldIndex.NextNodeID:
                        this.NextNodeID = ex;
                        break;
                    case SnapTemplate_FieldIndex.STPT:
                        this.STPT = ex;
                        break;
                    case SnapTemplate_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case SnapTemplate_FieldIndex.SnapTemplateRnamTraversal:
                        this.SnapTemplateRnamTraversal = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapTemplateRnamTraversal.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SnapTemplate_FieldIndex enu = (SnapTemplate_FieldIndex)index;
                switch (enu)
                {
                    case SnapTemplate_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case SnapTemplate_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case SnapTemplate_FieldIndex.Nodes:
                        this.Nodes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapNodeEntry.ErrorMask?>>?>)obj;
                        break;
                    case SnapTemplate_FieldIndex.ParentNodes:
                        this.ParentNodes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapParentNodeEntry.ErrorMask?>>?>)obj;
                        break;
                    case SnapTemplate_FieldIndex.BNAM:
                        this.BNAM = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SnapTemplate_FieldIndex.NextNodeID:
                        this.NextNodeID = (Exception?)obj;
                        break;
                    case SnapTemplate_FieldIndex.STPT:
                        this.STPT = (Exception?)obj;
                        break;
                    case SnapTemplate_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case SnapTemplate_FieldIndex.SnapTemplateRnamTraversal:
                        this.SnapTemplateRnamTraversal = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapTemplateRnamTraversal.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Parent != null) return true;
                if (Nodes != null) return true;
                if (ParentNodes != null) return true;
                if (BNAM != null) return true;
                if (NextNodeID != null) return true;
                if (STPT != null) return true;
                if (CNAM != null) return true;
                if (SnapTemplateRnamTraversal != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Parent, "Parent");
                }
                if (Nodes is {} NodesItem)
                {
                    sb.AppendLine("Nodes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NodesItem.Overall);
                        if (NodesItem.Specific != null)
                        {
                            foreach (var subItem in NodesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ParentNodes is {} ParentNodesItem)
                {
                    sb.AppendLine("ParentNodes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ParentNodesItem.Overall);
                        if (ParentNodesItem.Specific != null)
                        {
                            foreach (var subItem in ParentNodesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (BNAM is {} BNAMItem)
                {
                    sb.AppendLine("BNAM =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BNAMItem.Overall);
                        if (BNAMItem.Specific != null)
                        {
                            foreach (var subItem in BNAMItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NextNodeID, "NextNodeID");
                }
                {
                    sb.AppendItem(STPT, "STPT");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                if (SnapTemplateRnamTraversal is {} SnapTemplateRnamTraversalItem)
                {
                    sb.AppendLine("SnapTemplateRnamTraversal =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SnapTemplateRnamTraversalItem.Overall);
                        if (SnapTemplateRnamTraversalItem.Specific != null)
                        {
                            foreach (var subItem in SnapTemplateRnamTraversalItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Nodes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapNodeEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Nodes?.Overall, rhs.Nodes?.Overall), Noggog.ExceptionExt.Combine(this.Nodes?.Specific, rhs.Nodes?.Specific));
                ret.ParentNodes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapParentNodeEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ParentNodes?.Overall, rhs.ParentNodes?.Overall), Noggog.ExceptionExt.Combine(this.ParentNodes?.Specific, rhs.ParentNodes?.Specific));
                ret.BNAM = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.BNAM?.Overall, rhs.BNAM?.Overall), Noggog.ExceptionExt.Combine(this.BNAM?.Specific, rhs.BNAM?.Specific));
                ret.NextNodeID = this.NextNodeID.Combine(rhs.NextNodeID);
                ret.STPT = this.STPT.Combine(rhs.STPT);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.SnapTemplateRnamTraversal = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SnapTemplateRnamTraversal.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.SnapTemplateRnamTraversal?.Overall, rhs.SnapTemplateRnamTraversal?.Overall), Noggog.ExceptionExt.Combine(this.SnapTemplateRnamTraversal?.Specific, rhs.SnapTemplateRnamTraversal?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Parent;
            public SnapNodeEntry.TranslationMask? Nodes;
            public SnapParentNodeEntry.TranslationMask? ParentNodes;
            public bool BNAM;
            public bool NextNodeID;
            public bool STPT;
            public bool CNAM;
            public SnapTemplateRnamTraversal.TranslationMask? SnapTemplateRnamTraversal;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Parent = defaultOn;
                this.BNAM = defaultOn;
                this.NextNodeID = defaultOn;
                this.STPT = defaultOn;
                this.CNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Parent, null));
                ret.Add((Nodes == null ? DefaultOn : !Nodes.GetCrystal().CopyNothing, Nodes?.GetCrystal()));
                ret.Add((ParentNodes == null ? DefaultOn : !ParentNodes.GetCrystal().CopyNothing, ParentNodes?.GetCrystal()));
                ret.Add((BNAM, null));
                ret.Add((NextNodeID, null));
                ret.Add((STPT, null));
                ret.Add((CNAM, null));
                ret.Add((SnapTemplateRnamTraversal == null ? DefaultOn : !SnapTemplateRnamTraversal.GetCrystal().CopyNothing, SnapTemplateRnamTraversal?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SnapTemplate_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SnapTemplateCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SnapTemplateSetterCommon.Instance.RemapLinks(this, mapping);
        public SnapTemplate(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SnapTemplate(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SnapTemplate(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SnapTemplate(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SnapTemplate(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SnapTemplate>.ToString(this);
        }

        protected override Type LinkType => typeof(ISnapTemplate);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SnapTemplateCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SnapTemplateSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SnapTemplateSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SnapTemplateSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISnapTemplateGetter rhs) return false;
            return ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISnapTemplateGetter? obj)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SnapTemplateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SnapTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SnapTemplate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SnapTemplate();
            ((SnapTemplateSetterCommon)((ISnapTemplateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SnapTemplate item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SnapTemplateSetterCommon)((ISnapTemplateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SnapTemplate GetNew()
        {
            return new SnapTemplate();
        }

    }
    #endregion

    #region Interface
    public partial interface ISnapTemplate :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISnapTemplateInternal>,
        ISnapTemplateGetter,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new IFormLinkNullable<ISnapTemplateGetter> Parent { get; set; }
        new ExtendedList<SnapNodeEntry> Nodes { get; }
        new ExtendedList<SnapParentNodeEntry> ParentNodes { get; }
        new Single[]? BNAM { get; set; }
        new UInt32? NextNodeID { get; set; }
        new UInt32? STPT { get; set; }
        new String? CNAM { get; set; }
        new ExtendedList<SnapTemplateRnamTraversal> SnapTemplateRnamTraversal { get; }
    }

    public partial interface ISnapTemplateInternal :
        IStarfieldMajorRecordInternal,
        ISnapTemplate,
        ISnapTemplateGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.STMP)]
    public partial interface ISnapTemplateGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISnapTemplateGetter>,
        IMapsToGetter<ISnapTemplateGetter>
    {
        static new ILoquiRegistration StaticRegistration => SnapTemplate_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        IFormLinkNullableGetter<ISnapTemplateGetter> Parent { get; }
        IReadOnlyList<ISnapNodeEntryGetter> Nodes { get; }
        IReadOnlyList<ISnapParentNodeEntryGetter> ParentNodes { get; }
        ReadOnlyMemorySlice<Single>? BNAM { get; }
        UInt32? NextNodeID { get; }
        UInt32? STPT { get; }
        String? CNAM { get; }
        IReadOnlyList<ISnapTemplateRnamTraversalGetter> SnapTemplateRnamTraversal { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SnapTemplateMixIn
    {
        public static void Clear(this ISnapTemplateInternal item)
        {
            ((SnapTemplateSetterCommon)((ISnapTemplateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SnapTemplate.Mask<bool> GetEqualsMask(
            this ISnapTemplateGetter item,
            ISnapTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISnapTemplateGetter item,
            string? name = null,
            SnapTemplate.Mask<bool>? printMask = null)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISnapTemplateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SnapTemplate.Mask<bool>? printMask = null)
        {
            ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISnapTemplateGetter item,
            ISnapTemplateGetter rhs,
            SnapTemplate.TranslationMask? equalsMask = null)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISnapTemplateInternal lhs,
            ISnapTemplateGetter rhs,
            out SnapTemplate.ErrorMask errorMask,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SnapTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISnapTemplateInternal lhs,
            ISnapTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SnapTemplate DeepCopy(
            this ISnapTemplateGetter item,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            return ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SnapTemplate DeepCopy(
            this ISnapTemplateGetter item,
            out SnapTemplate.ErrorMask errorMask,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            return ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SnapTemplate DeepCopy(
            this ISnapTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SnapTemplate Duplicate(
            this ISnapTemplateGetter item,
            FormKey formKey,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SnapTemplate Duplicate(
            this ISnapTemplateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISnapTemplateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SnapTemplateSetterCommon)((ISnapTemplateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SnapTemplate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Parent = 8,
        Nodes = 9,
        ParentNodes = 10,
        BNAM = 11,
        NextNodeID = 12,
        STPT = 13,
        CNAM = 14,
        SnapTemplateRnamTraversal = 15,
    }
    #endregion

    #region Registration
    internal partial class SnapTemplate_Registration : ILoquiRegistration
    {
        public static readonly SnapTemplate_Registration Instance = new SnapTemplate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(SnapTemplate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SnapTemplate.ErrorMask);

        public static readonly Type ClassType = typeof(SnapTemplate);

        public static readonly Type GetterType = typeof(ISnapTemplateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISnapTemplate);

        public static readonly Type? InternalSetterType = typeof(ISnapTemplateInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SnapTemplate";

        public const string Name = "SnapTemplate";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.STMP;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.STMP);
            var all = RecordCollection.Factory(
                RecordTypes.STMP,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.PNAM,
                RecordTypes.ENAM,
                RecordTypes.ONAM,
                RecordTypes.TNAM,
                RecordTypes.BNAM,
                RecordTypes.INAM,
                RecordTypes.STPT,
                RecordTypes.CNAM,
                RecordTypes.RNAM,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SnapTemplateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SnapTemplateSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SnapTemplateSetterCommon Instance = new SnapTemplateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISnapTemplateInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Parent.Clear();
            item.Nodes.Clear();
            item.ParentNodes.Clear();
            item.BNAM = null;
            item.NextNodeID = default;
            item.STPT = default;
            item.CNAM = default;
            item.SnapTemplateRnamTraversal.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISnapTemplateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISnapTemplateInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISnapTemplate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Parent.Relink(mapping);
            obj.Nodes.RemapLinks(mapping);
            obj.SnapTemplateRnamTraversal.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISnapTemplate obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISnapTemplate obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISnapTemplateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISnapTemplateInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SnapTemplateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SnapTemplateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SnapTemplate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SnapTemplate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SnapTemplateCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SnapTemplateCommon Instance = new SnapTemplateCommon();

        public SnapTemplate.Mask<bool> GetEqualsMask(
            ISnapTemplateGetter item,
            ISnapTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SnapTemplate.Mask<bool>(false);
            ((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISnapTemplateGetter item,
            ISnapTemplateGetter rhs,
            SnapTemplate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.Nodes = item.Nodes.CollectionEqualsHelper(
                rhs.Nodes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ParentNodes = item.ParentNodes.CollectionEqualsHelper(
                rhs.ParentNodes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BNAM = EqualsMaskHelper.SpanEqualsHelper<Single>(
                item.BNAM,
                rhs.BNAM,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.NextNodeID = item.NextNodeID == rhs.NextNodeID;
            ret.STPT = item.STPT == rhs.STPT;
            ret.CNAM = string.Equals(item.CNAM, rhs.CNAM);
            ret.SnapTemplateRnamTraversal = item.SnapTemplateRnamTraversal.CollectionEqualsHelper(
                rhs.SnapTemplateRnamTraversal,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISnapTemplateGetter item,
            string? name = null,
            SnapTemplate.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISnapTemplateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SnapTemplate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SnapTemplate =>");
            }
            else
            {
                sb.AppendLine($"{name} (SnapTemplate) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISnapTemplateGetter item,
            StructuredStringBuilder sb,
            SnapTemplate.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Parent ?? true)
            {
                sb.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if (printMask?.Nodes?.Overall ?? true)
            {
                sb.AppendLine("Nodes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Nodes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ParentNodes?.Overall ?? true)
            {
                sb.AppendLine("ParentNodes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ParentNodes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BNAM?.Overall ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendLine("BNAM =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BNAMItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.NextNodeID ?? true)
                && item.NextNodeID is {} NextNodeIDItem)
            {
                sb.AppendItem(NextNodeIDItem, "NextNodeID");
            }
            if ((printMask?.STPT ?? true)
                && item.STPT is {} STPTItem)
            {
                sb.AppendItem(STPTItem, "STPT");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendItem(CNAMItem, "CNAM");
            }
            if (printMask?.SnapTemplateRnamTraversal?.Overall ?? true)
            {
                sb.AppendLine("SnapTemplateRnamTraversal =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SnapTemplateRnamTraversal)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static SnapTemplate_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SnapTemplate_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SnapTemplate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SnapTemplate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SnapTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SnapTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SnapTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SnapTemplate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISnapTemplateGetter? lhs,
            ISnapTemplateGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SnapTemplate_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Nodes) ?? true))
            {
                if (!lhs.Nodes.SequenceEqual(rhs.Nodes, (l, r) => ((SnapNodeEntryCommon)((ISnapNodeEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SnapTemplate_FieldIndex.Nodes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.ParentNodes) ?? true))
            {
                if (!lhs.ParentNodes.SequenceEqual(rhs.ParentNodes, (l, r) => ((SnapParentNodeEntryCommon)((ISnapParentNodeEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SnapTemplate_FieldIndex.ParentNodes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.BNAM) ?? true))
            {
                if (!ObjectExt.NullSame(lhs.BNAM, rhs.BNAM)) return false;
                if (!MemoryExtensions.SequenceEqual<Single>(lhs.BNAM!.Value.Span!, rhs.BNAM!.Value.Span!)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.NextNodeID) ?? true))
            {
                if (lhs.NextNodeID != rhs.NextNodeID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.STPT) ?? true))
            {
                if (lhs.STPT != rhs.STPT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.CNAM) ?? true))
            {
                if (!string.Equals(lhs.CNAM, rhs.CNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal) ?? true))
            {
                if (!lhs.SnapTemplateRnamTraversal.SequenceEqual(rhs.SnapTemplateRnamTraversal, (l, r) => ((SnapTemplateRnamTraversalCommon)((ISnapTemplateRnamTraversalGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISnapTemplateGetter?)lhs,
                rhs: rhs as ISnapTemplateGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISnapTemplateGetter?)lhs,
                rhs: rhs as ISnapTemplateGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISnapTemplateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.Parent);
            hash.Add(item.Nodes);
            hash.Add(item.ParentNodes);
            hash.Add(item.BNAM);
            if (item.NextNodeID is {} NextNodeIDitem)
            {
                hash.Add(NextNodeIDitem);
            }
            if (item.STPT is {} STPTitem)
            {
                hash.Add(STPTitem);
            }
            if (item.CNAM is {} CNAMitem)
            {
                hash.Add(CNAMitem);
            }
            hash.Add(item.SnapTemplateRnamTraversal);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISnapTemplateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISnapTemplateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SnapTemplate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISnapTemplateGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Parent, out var ParentInfo))
            {
                yield return ParentInfo;
            }
            foreach (var item in obj.Nodes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.SnapTemplateRnamTraversal.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISnapTemplateGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public SnapTemplate Duplicate(
            ISnapTemplateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SnapTemplate(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISnapTemplateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISnapTemplateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SnapTemplateSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SnapTemplateSetterTranslationCommon Instance = new SnapTemplateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISnapTemplateInternal item,
            ISnapTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISnapTemplate item,
            ISnapTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)SnapTemplate_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.Nodes) ?? true))
            {
                errorMask?.PushIndex((int)SnapTemplate_FieldIndex.Nodes);
                try
                {
                    item.Nodes.SetTo(
                        rhs.Nodes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.ParentNodes) ?? true))
            {
                errorMask?.PushIndex((int)SnapTemplate_FieldIndex.ParentNodes);
                try
                {
                    item.ParentNodes.SetTo(
                        rhs.ParentNodes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.BNAM) ?? true))
            {
                item.BNAM = rhs.BNAM?.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.NextNodeID) ?? true))
            {
                item.NextNodeID = rhs.NextNodeID;
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.STPT) ?? true))
            {
                item.STPT = rhs.STPT;
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.CNAM) ?? true))
            {
                item.CNAM = rhs.CNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal) ?? true))
            {
                errorMask?.PushIndex((int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal);
                try
                {
                    item.SnapTemplateRnamTraversal.SetTo(
                        rhs.SnapTemplateRnamTraversal
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISnapTemplate item,
            ISnapTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISnapTemplateInternal)item,
                rhs: (ISnapTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISnapTemplate)item,
                rhs: (ISnapTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISnapTemplateInternal)item,
                rhs: (ISnapTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISnapTemplate)item,
                rhs: (ISnapTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SnapTemplate DeepCopy(
            ISnapTemplateGetter item,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            SnapTemplate ret = (SnapTemplate)((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).GetNew();
            ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SnapTemplate DeepCopy(
            ISnapTemplateGetter item,
            out SnapTemplate.ErrorMask errorMask,
            SnapTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SnapTemplate ret = (SnapTemplate)((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).GetNew();
            ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SnapTemplate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SnapTemplate DeepCopy(
            ISnapTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SnapTemplate ret = (SnapTemplate)((SnapTemplateCommon)((ISnapTemplateGetter)item).CommonInstance()!).GetNew();
            ((SnapTemplateSetterTranslationCommon)((ISnapTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SnapTemplate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SnapTemplate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SnapTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SnapTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SnapTemplateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SnapTemplateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SnapTemplateBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SnapTemplateBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISnapTemplateGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISnapNodeEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Nodes,
                transl: (MutagenWriter subWriter, ISnapNodeEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SnapNodeEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISnapParentNodeEntryGetter>.Instance.Write(
                writer: writer,
                items: item.ParentNodes,
                transl: (MutagenWriter subWriter, ISnapParentNodeEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SnapParentNodeEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.BNAM,
                recordType: translationParams.ConvertToCustom(RecordTypes.BNAM),
                transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NextNodeID,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.STPT,
                header: translationParams.ConvertToCustom(RecordTypes.STPT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISnapTemplateRnamTraversalGetter>.Instance.Write(
                writer: writer,
                items: item.SnapTemplateRnamTraversal,
                transl: (MutagenWriter subWriter, ISnapTemplateRnamTraversalGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SnapTemplateRnamTraversalBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISnapTemplateGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.STMP,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISnapTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISnapTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISnapTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SnapTemplateBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SnapTemplateBinaryCreateTranslation Instance = new SnapTemplateBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.STMP;
        public static ParseResult FillBinaryRecordTypes(
            ISnapTemplateInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)SnapTemplate_FieldIndex.Components;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SnapTemplate_FieldIndex.Parent;
                }
                case RecordTypeInts.ENAM:
                {
                    item.Nodes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SnapNodeEntry>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SnapNodeEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SnapNodeEntry.TryCreateFromBinary));
                    return (int)SnapTemplate_FieldIndex.Nodes;
                }
                case RecordTypeInts.ONAM:
                case RecordTypeInts.TNAM:
                {
                    item.ParentNodes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SnapParentNodeEntry>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SnapParentNodeEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SnapParentNodeEntry.TryCreateFromBinary));
                    return (int)SnapTemplate_FieldIndex.ParentNodes;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = BinaryOverlayArrayHelper.FloatSliceFromFixedSize(frame.ReadBytes(4 * 6), 6).ToArray();
                    return (int)SnapTemplate_FieldIndex.BNAM;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NextNodeID = frame.ReadUInt32();
                    return (int)SnapTemplate_FieldIndex.NextNodeID;
                }
                case RecordTypeInts.STPT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.STPT = frame.ReadUInt32();
                    return (int)SnapTemplate_FieldIndex.STPT;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SnapTemplate_FieldIndex.CNAM;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.SNAM:
                {
                    item.SnapTemplateRnamTraversal.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SnapTemplateRnamTraversal>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SnapTemplateRnamTraversal_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SnapTemplateRnamTraversal.TryCreateFromBinary));
                    return (int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SnapTemplateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SnapTemplateBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISnapTemplateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SnapTemplate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SnapTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SnapTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SnapTemplateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SnapTemplateCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SnapTemplateCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SnapTemplateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SnapTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISnapTemplate);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<ISnapTemplateGetter> Parent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateGetter>(_package, _recordData, _ParentLocation);
        #endregion
        public IReadOnlyList<ISnapNodeEntryGetter> Nodes { get; private set; } = [];
        public IReadOnlyList<ISnapParentNodeEntryGetter> ParentNodes { get; private set; } = [];
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Single>? BNAM => _BNAMLocation.HasValue ? BinaryOverlayArrayHelper.FloatSliceFromFixedSize(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants), amount: 6) : default(ReadOnlyMemorySlice<Single>?);
        #endregion
        #region NextNodeID
        private int? _NextNodeIDLocation;
        public UInt32? NextNodeID => _NextNodeIDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NextNodeIDLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region STPT
        private int? _STPTLocation;
        public UInt32? STPT => _STPTLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _STPTLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public String? CNAM => _CNAMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<ISnapTemplateRnamTraversalGetter> SnapTemplateRnamTraversal { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SnapTemplateBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISnapTemplateGetter SnapTemplateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SnapTemplateBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISnapTemplateGetter SnapTemplateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SnapTemplateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)SnapTemplate_FieldIndex.Components;
                }
                case RecordTypeInts.PNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)SnapTemplate_FieldIndex.Parent;
                }
                case RecordTypeInts.ENAM:
                {
                    this.Nodes = BinaryOverlayList.FactoryByArray<ISnapNodeEntryGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => SnapNodeEntryBinaryOverlay.SnapNodeEntryFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: SnapNodeEntry_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)SnapTemplate_FieldIndex.Nodes;
                }
                case RecordTypeInts.ONAM:
                case RecordTypeInts.TNAM:
                {
                    this.ParentNodes = this.ParseRepeatedTypelessSubrecord<ISnapParentNodeEntryGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SnapParentNodeEntry_Registration.TriggerSpecs,
                        factory: SnapParentNodeEntryBinaryOverlay.SnapParentNodeEntryFactory);
                    return (int)SnapTemplate_FieldIndex.ParentNodes;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)SnapTemplate_FieldIndex.BNAM;
                }
                case RecordTypeInts.INAM:
                {
                    _NextNodeIDLocation = (stream.Position - offset);
                    return (int)SnapTemplate_FieldIndex.NextNodeID;
                }
                case RecordTypeInts.STPT:
                {
                    _STPTLocation = (stream.Position - offset);
                    return (int)SnapTemplate_FieldIndex.STPT;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)SnapTemplate_FieldIndex.CNAM;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.SNAM:
                {
                    this.SnapTemplateRnamTraversal = this.ParseRepeatedTypelessSubrecord<ISnapTemplateRnamTraversalGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SnapTemplateRnamTraversal_Registration.TriggerSpecs,
                        factory: SnapTemplateRnamTraversalBinaryOverlay.SnapTemplateRnamTraversalFactory);
                    return (int)SnapTemplate_FieldIndex.SnapTemplateRnamTraversal;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SnapTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SnapTemplate>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISnapTemplateGetter rhs) return false;
            return ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISnapTemplateGetter? obj)
        {
            return ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SnapTemplateCommon)((ISnapTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

