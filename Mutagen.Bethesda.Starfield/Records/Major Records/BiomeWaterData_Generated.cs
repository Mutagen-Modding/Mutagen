/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeWaterData :
        IBiomeWaterData,
        IEquatable<IBiomeWaterDataGetter>,
        ILoquiObjectSetter<BiomeWaterData>
    {
        #region Ctor
        public BiomeWaterData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HasWater
        public Boolean? HasWater { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? IBiomeWaterDataGetter.HasWater => this.HasWater;
        #endregion
        #region Water
        private readonly IFormLinkNullable<IWaterGetter> _Water = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> Water
        {
            get => _Water;
            set => _Water.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> IBiomeWaterDataGetter.Water => this.Water;
        #endregion
        #region WaterMaterial
        public String? WaterMaterial { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeWaterDataGetter.WaterMaterial => this.WaterMaterial;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeWaterDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeWaterDataGetter rhs) return false;
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeWaterDataGetter? obj)
        {
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.HasWater = initialValue;
                this.Water = initialValue;
                this.WaterMaterial = initialValue;
            }

            public Mask(
                TItem HasWater,
                TItem Water,
                TItem WaterMaterial)
            {
                this.HasWater = HasWater;
                this.Water = Water;
                this.WaterMaterial = WaterMaterial;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem HasWater;
            public TItem Water;
            public TItem WaterMaterial;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.HasWater, rhs.HasWater)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.WaterMaterial, rhs.WaterMaterial)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.HasWater);
                hash.Add(this.Water);
                hash.Add(this.WaterMaterial);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.HasWater)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.WaterMaterial)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.HasWater)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.WaterMaterial)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeWaterData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.HasWater = eval(this.HasWater);
                obj.Water = eval(this.Water);
                obj.WaterMaterial = eval(this.WaterMaterial);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeWaterData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeWaterData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeWaterData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.HasWater ?? true)
                    {
                        sb.AppendItem(HasWater, "HasWater");
                    }
                    if (printMask?.Water ?? true)
                    {
                        sb.AppendItem(Water, "Water");
                    }
                    if (printMask?.WaterMaterial ?? true)
                    {
                        sb.AppendItem(WaterMaterial, "WaterMaterial");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? HasWater;
            public Exception? Water;
            public Exception? WaterMaterial;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeWaterData_FieldIndex enu = (BiomeWaterData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeWaterData_FieldIndex.HasWater:
                        return HasWater;
                    case BiomeWaterData_FieldIndex.Water:
                        return Water;
                    case BiomeWaterData_FieldIndex.WaterMaterial:
                        return WaterMaterial;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeWaterData_FieldIndex enu = (BiomeWaterData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeWaterData_FieldIndex.HasWater:
                        this.HasWater = ex;
                        break;
                    case BiomeWaterData_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case BiomeWaterData_FieldIndex.WaterMaterial:
                        this.WaterMaterial = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeWaterData_FieldIndex enu = (BiomeWaterData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeWaterData_FieldIndex.HasWater:
                        this.HasWater = (Exception?)obj;
                        break;
                    case BiomeWaterData_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case BiomeWaterData_FieldIndex.WaterMaterial:
                        this.WaterMaterial = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (HasWater != null) return true;
                if (Water != null) return true;
                if (WaterMaterial != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(HasWater, "HasWater");
                }
                {
                    sb.AppendItem(Water, "Water");
                }
                {
                    sb.AppendItem(WaterMaterial, "WaterMaterial");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HasWater = this.HasWater.Combine(rhs.HasWater);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.WaterMaterial = this.WaterMaterial.Combine(rhs.WaterMaterial);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool HasWater;
            public bool Water;
            public bool WaterMaterial;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.HasWater = defaultOn;
                this.Water = defaultOn;
                this.WaterMaterial = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((HasWater, null));
                ret.Add((Water, null));
                ret.Add((WaterMaterial, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeWaterDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeWaterDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeWaterDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeWaterDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeWaterData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeWaterData();
            ((BiomeWaterDataSetterCommon)((IBiomeWaterDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeWaterData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeWaterDataSetterCommon)((IBiomeWaterDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeWaterData GetNew()
        {
            return new BiomeWaterData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeWaterData :
        IBiomeWaterDataGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBiomeWaterData>
    {
        new Boolean? HasWater { get; set; }
        new IFormLinkNullable<IWaterGetter> Water { get; set; }
        new String? WaterMaterial { get; set; }
    }

    public partial interface IBiomeWaterDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBiomeWaterDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeWaterData_Registration.Instance;
        Boolean? HasWater { get; }
        IFormLinkNullableGetter<IWaterGetter> Water { get; }
        String? WaterMaterial { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeWaterDataMixIn
    {
        public static void Clear(this IBiomeWaterData item)
        {
            ((BiomeWaterDataSetterCommon)((IBiomeWaterDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeWaterData.Mask<bool> GetEqualsMask(
            this IBiomeWaterDataGetter item,
            IBiomeWaterDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeWaterDataGetter item,
            string? name = null,
            BiomeWaterData.Mask<bool>? printMask = null)
        {
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeWaterDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeWaterData.Mask<bool>? printMask = null)
        {
            ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeWaterDataGetter item,
            IBiomeWaterDataGetter rhs,
            BiomeWaterData.TranslationMask? equalsMask = null)
        {
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeWaterData lhs,
            IBiomeWaterDataGetter rhs)
        {
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeWaterData lhs,
            IBiomeWaterDataGetter rhs,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeWaterData lhs,
            IBiomeWaterDataGetter rhs,
            out BiomeWaterData.ErrorMask errorMask,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeWaterData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeWaterData lhs,
            IBiomeWaterDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeWaterData DeepCopy(
            this IBiomeWaterDataGetter item,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            return ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeWaterData DeepCopy(
            this IBiomeWaterDataGetter item,
            out BiomeWaterData.ErrorMask errorMask,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            return ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeWaterData DeepCopy(
            this IBiomeWaterDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeWaterData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeWaterDataSetterCommon)((IBiomeWaterDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeWaterData_FieldIndex
    {
        HasWater = 0,
        Water = 1,
        WaterMaterial = 2,
    }
    #endregion

    #region Registration
    internal partial class BiomeWaterData_Registration : ILoquiRegistration
    {
        public static readonly BiomeWaterData_Registration Instance = new BiomeWaterData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(BiomeWaterData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeWaterData.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeWaterData);

        public static readonly Type GetterType = typeof(IBiomeWaterDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeWaterData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeWaterData";

        public const string Name = "BiomeWaterData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.MNAM,
                RecordTypes.INAM,
                RecordTypes.JNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BiomeWaterDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeWaterDataSetterCommon
    {
        public static readonly BiomeWaterDataSetterCommon Instance = new BiomeWaterDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeWaterData item)
        {
            ClearPartial();
            item.HasWater = default;
            item.Water.Clear();
            item.WaterMaterial = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeWaterData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Water.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeWaterData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BiomeWaterDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BiomeWaterDataCommon
    {
        public static readonly BiomeWaterDataCommon Instance = new BiomeWaterDataCommon();

        public BiomeWaterData.Mask<bool> GetEqualsMask(
            IBiomeWaterDataGetter item,
            IBiomeWaterDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeWaterData.Mask<bool>(false);
            ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeWaterDataGetter item,
            IBiomeWaterDataGetter rhs,
            BiomeWaterData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.HasWater = item.HasWater == rhs.HasWater;
            ret.Water = item.Water.Equals(rhs.Water);
            ret.WaterMaterial = string.Equals(item.WaterMaterial, rhs.WaterMaterial);
        }
        
        public string Print(
            IBiomeWaterDataGetter item,
            string? name = null,
            BiomeWaterData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeWaterDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeWaterData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeWaterData =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeWaterData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeWaterDataGetter item,
            StructuredStringBuilder sb,
            BiomeWaterData.Mask<bool>? printMask = null)
        {
            if ((printMask?.HasWater ?? true)
                && item.HasWater is {} HasWaterItem)
            {
                sb.AppendItem(HasWaterItem, "HasWater");
            }
            if (printMask?.Water ?? true)
            {
                sb.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if ((printMask?.WaterMaterial ?? true)
                && item.WaterMaterial is {} WaterMaterialItem)
            {
                sb.AppendItem(WaterMaterialItem, "WaterMaterial");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeWaterDataGetter? lhs,
            IBiomeWaterDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.HasWater) ?? true))
            {
                if (lhs.HasWater != rhs.HasWater) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.Water) ?? true))
            {
                if (!lhs.Water.Equals(rhs.Water)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.WaterMaterial) ?? true))
            {
                if (!string.Equals(lhs.WaterMaterial, rhs.WaterMaterial)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeWaterDataGetter item)
        {
            var hash = new HashCode();
            if (item.HasWater is {} HasWateritem)
            {
                hash.Add(HasWateritem);
            }
            hash.Add(item.Water);
            if (item.WaterMaterial is {} WaterMaterialitem)
            {
                hash.Add(WaterMaterialitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeWaterData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeWaterDataGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Water, out var WaterInfo))
            {
                yield return WaterInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeWaterDataSetterTranslationCommon
    {
        public static readonly BiomeWaterDataSetterTranslationCommon Instance = new BiomeWaterDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeWaterData item,
            IBiomeWaterDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.HasWater) ?? true))
            {
                item.HasWater = rhs.HasWater;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.Water) ?? true))
            {
                item.Water.SetTo(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeWaterData_FieldIndex.WaterMaterial) ?? true))
            {
                item.WaterMaterial = rhs.WaterMaterial;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeWaterData item,
            IBiomeWaterDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeWaterData DeepCopy(
            IBiomeWaterDataGetter item,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            BiomeWaterData ret = (BiomeWaterData)((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeWaterData DeepCopy(
            IBiomeWaterDataGetter item,
            out BiomeWaterData.ErrorMask errorMask,
            BiomeWaterData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeWaterData ret = (BiomeWaterData)((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeWaterData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeWaterData DeepCopy(
            IBiomeWaterDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeWaterData ret = (BiomeWaterData)((BiomeWaterDataCommon)((IBiomeWaterDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeWaterDataSetterTranslationCommon)((IBiomeWaterDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeWaterData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeWaterData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeWaterData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeWaterDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeWaterDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeWaterDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeWaterDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeWaterDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeWaterDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeWaterDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeWaterDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBiomeWaterDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteNullable(
                writer: writer,
                item: item.HasWater,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeWaterDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeWaterDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeWaterDataBinaryCreateTranslation
    {
        public static readonly BiomeWaterDataBinaryCreateTranslation Instance = new BiomeWaterDataBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBiomeWaterData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.HasWater, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HasWater = frame.ReadBoolean();
                    return (int)BiomeWaterData_FieldIndex.HasWater;
                }
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.Water, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BiomeWaterData_FieldIndex.Water;
                }
                case RecordTypeInts.JNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.WaterMaterial, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterMaterial = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BiomeWaterData_FieldIndex.WaterMaterial;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeWaterDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeWaterDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeWaterDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeWaterDataBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeWaterDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeWaterData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeWaterData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeWaterDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeWaterDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeWaterDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeWaterDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeWaterDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeWaterDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeWaterDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeWaterDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region HasWater
        private int? _HasWaterLocation;
        public Boolean? HasWater => _HasWaterLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HasWaterLocation.Value, _package.MetaData.Constants)[0] >= 1 : default(Boolean?);
        #endregion
        #region Water
        private int? _WaterLocation;
        public IFormLinkNullableGetter<IWaterGetter> Water => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWaterGetter>(_package, _recordData, _WaterLocation);
        #endregion
        #region WaterMaterial
        private int? _WaterMaterialLocation;
        public String? WaterMaterial => _WaterMaterialLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterMaterialLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeWaterDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeWaterDataGetter BiomeWaterDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BiomeWaterDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBiomeWaterDataGetter BiomeWaterDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeWaterDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.HasWater, translationParams)) return ParseResult.Stop;
                    _HasWaterLocation = (stream.Position - offset);
                    return (int)BiomeWaterData_FieldIndex.HasWater;
                }
                case RecordTypeInts.INAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.Water, translationParams)) return ParseResult.Stop;
                    _WaterLocation = (stream.Position - offset);
                    return (int)BiomeWaterData_FieldIndex.Water;
                }
                case RecordTypeInts.JNAM:
                {
                    if (lastParsed.ShortCircuit((int)BiomeWaterData_FieldIndex.WaterMaterial, translationParams)) return ParseResult.Stop;
                    _WaterMaterialLocation = (stream.Position - offset);
                    return (int)BiomeWaterData_FieldIndex.WaterMaterial;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeWaterDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeWaterDataGetter rhs) return false;
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeWaterDataGetter? obj)
        {
            return ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeWaterDataCommon)((IBiomeWaterDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

