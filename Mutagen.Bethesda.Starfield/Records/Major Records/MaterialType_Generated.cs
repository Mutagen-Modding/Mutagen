/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MaterialType :
        StarfieldMajorRecord,
        IEquatable<IMaterialTypeGetter>,
        ILoquiObjectSetter<MaterialType>,
        IMaterialTypeInternal
    {
        #region Ctor
        protected MaterialType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Parent
        private readonly IFormLinkNullable<IMaterialTypeGetter> _Parent = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IMaterialTypeGetter.Parent => this.Parent;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMaterialTypeGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region HavokDisplayColor
        public Color? HavokDisplayColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IMaterialTypeGetter.HavokDisplayColor => this.HavokDisplayColor;
        #endregion
        #region Buoyancy
        public Single? Buoyancy { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IMaterialTypeGetter.Buoyancy => this.Buoyancy;
        #endregion
        #region Flags
        public MaterialType.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MaterialType.Flag? IMaterialTypeGetter.Flags => this.Flags;
        #endregion
        #region HavokImpactDataSet
        private readonly IFormLinkNullable<IImpactDataSetGetter> _HavokImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>();
        public IFormLinkNullable<IImpactDataSetGetter> HavokImpactDataSet
        {
            get => _HavokImpactDataSet;
            set => _HavokImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IMaterialTypeGetter.HavokImpactDataSet => this.HavokImpactDataSet;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IMaterialTypeGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region BreakableFX
        public String? BreakableFX { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMaterialTypeGetter.BreakableFX => this.BreakableFX;
        #endregion
        #region ModelData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ModelData;
        public MemorySlice<Byte>? ModelData
        {
            get => this._ModelData;
            set => this._ModelData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMaterialTypeGetter.ModelData => this.ModelData;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MaterialTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Parent = initialValue;
                this.Name = initialValue;
                this.HavokDisplayColor = initialValue;
                this.Buoyancy = initialValue;
                this.Flags = initialValue;
                this.HavokImpactDataSet = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.BreakableFX = initialValue;
                this.ModelData = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Parent,
                TItem Name,
                TItem HavokDisplayColor,
                TItem Buoyancy,
                TItem Flags,
                TItem HavokImpactDataSet,
                TItem Model,
                TItem BreakableFX,
                TItem ModelData)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Parent = Parent;
                this.Name = Name;
                this.HavokDisplayColor = HavokDisplayColor;
                this.Buoyancy = Buoyancy;
                this.Flags = Flags;
                this.HavokImpactDataSet = HavokImpactDataSet;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.BreakableFX = BreakableFX;
                this.ModelData = ModelData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Parent;
            public TItem Name;
            public TItem HavokDisplayColor;
            public TItem Buoyancy;
            public TItem Flags;
            public TItem HavokImpactDataSet;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem BreakableFX;
            public TItem ModelData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.HavokDisplayColor, rhs.HavokDisplayColor)) return false;
                if (!object.Equals(this.Buoyancy, rhs.Buoyancy)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.HavokImpactDataSet, rhs.HavokImpactDataSet)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.BreakableFX, rhs.BreakableFX)) return false;
                if (!object.Equals(this.ModelData, rhs.ModelData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Parent);
                hash.Add(this.Name);
                hash.Add(this.HavokDisplayColor);
                hash.Add(this.Buoyancy);
                hash.Add(this.Flags);
                hash.Add(this.HavokImpactDataSet);
                hash.Add(this.Model);
                hash.Add(this.BreakableFX);
                hash.Add(this.ModelData);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.HavokDisplayColor)) return false;
                if (!eval(this.Buoyancy)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.HavokImpactDataSet)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.BreakableFX)) return false;
                if (!eval(this.ModelData)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.HavokDisplayColor)) return true;
                if (eval(this.Buoyancy)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.HavokImpactDataSet)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.BreakableFX)) return true;
                if (eval(this.ModelData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MaterialType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Parent = eval(this.Parent);
                obj.Name = eval(this.Name);
                obj.HavokDisplayColor = eval(this.HavokDisplayColor);
                obj.Buoyancy = eval(this.Buoyancy);
                obj.Flags = eval(this.Flags);
                obj.HavokImpactDataSet = eval(this.HavokImpactDataSet);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.BreakableFX = eval(this.BreakableFX);
                obj.ModelData = eval(this.ModelData);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MaterialType.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MaterialType.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MaterialType.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Parent ?? true)
                    {
                        sb.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.HavokDisplayColor ?? true)
                    {
                        sb.AppendItem(HavokDisplayColor, "HavokDisplayColor");
                    }
                    if (printMask?.Buoyancy ?? true)
                    {
                        sb.AppendItem(Buoyancy, "Buoyancy");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.HavokImpactDataSet ?? true)
                    {
                        sb.AppendItem(HavokImpactDataSet, "HavokImpactDataSet");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.BreakableFX ?? true)
                    {
                        sb.AppendItem(BreakableFX, "BreakableFX");
                    }
                    if (printMask?.ModelData ?? true)
                    {
                        sb.AppendItem(ModelData, "ModelData");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Parent;
            public Exception? Name;
            public Exception? HavokDisplayColor;
            public Exception? Buoyancy;
            public Exception? Flags;
            public Exception? HavokImpactDataSet;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? BreakableFX;
            public Exception? ModelData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MaterialType_FieldIndex enu = (MaterialType_FieldIndex)index;
                switch (enu)
                {
                    case MaterialType_FieldIndex.Parent:
                        return Parent;
                    case MaterialType_FieldIndex.Name:
                        return Name;
                    case MaterialType_FieldIndex.HavokDisplayColor:
                        return HavokDisplayColor;
                    case MaterialType_FieldIndex.Buoyancy:
                        return Buoyancy;
                    case MaterialType_FieldIndex.Flags:
                        return Flags;
                    case MaterialType_FieldIndex.HavokImpactDataSet:
                        return HavokImpactDataSet;
                    case MaterialType_FieldIndex.Model:
                        return Model;
                    case MaterialType_FieldIndex.BreakableFX:
                        return BreakableFX;
                    case MaterialType_FieldIndex.ModelData:
                        return ModelData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MaterialType_FieldIndex enu = (MaterialType_FieldIndex)index;
                switch (enu)
                {
                    case MaterialType_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case MaterialType_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MaterialType_FieldIndex.HavokDisplayColor:
                        this.HavokDisplayColor = ex;
                        break;
                    case MaterialType_FieldIndex.Buoyancy:
                        this.Buoyancy = ex;
                        break;
                    case MaterialType_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MaterialType_FieldIndex.HavokImpactDataSet:
                        this.HavokImpactDataSet = ex;
                        break;
                    case MaterialType_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case MaterialType_FieldIndex.BreakableFX:
                        this.BreakableFX = ex;
                        break;
                    case MaterialType_FieldIndex.ModelData:
                        this.ModelData = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MaterialType_FieldIndex enu = (MaterialType_FieldIndex)index;
                switch (enu)
                {
                    case MaterialType_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.HavokDisplayColor:
                        this.HavokDisplayColor = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.Buoyancy:
                        this.Buoyancy = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.HavokImpactDataSet:
                        this.HavokImpactDataSet = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case MaterialType_FieldIndex.BreakableFX:
                        this.BreakableFX = (Exception?)obj;
                        break;
                    case MaterialType_FieldIndex.ModelData:
                        this.ModelData = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Parent != null) return true;
                if (Name != null) return true;
                if (HavokDisplayColor != null) return true;
                if (Buoyancy != null) return true;
                if (Flags != null) return true;
                if (HavokImpactDataSet != null) return true;
                if (Model != null) return true;
                if (BreakableFX != null) return true;
                if (ModelData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Parent, "Parent");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(HavokDisplayColor, "HavokDisplayColor");
                }
                {
                    sb.AppendItem(Buoyancy, "Buoyancy");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(HavokImpactDataSet, "HavokImpactDataSet");
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(BreakableFX, "BreakableFX");
                }
                {
                    sb.AppendItem(ModelData, "ModelData");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.HavokDisplayColor = this.HavokDisplayColor.Combine(rhs.HavokDisplayColor);
                ret.Buoyancy = this.Buoyancy.Combine(rhs.Buoyancy);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.HavokImpactDataSet = this.HavokImpactDataSet.Combine(rhs.HavokImpactDataSet);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.BreakableFX = this.BreakableFX.Combine(rhs.BreakableFX);
                ret.ModelData = this.ModelData.Combine(rhs.ModelData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Parent;
            public bool Name;
            public bool HavokDisplayColor;
            public bool Buoyancy;
            public bool Flags;
            public bool HavokImpactDataSet;
            public Model.TranslationMask? Model;
            public bool BreakableFX;
            public bool ModelData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Parent = defaultOn;
                this.Name = defaultOn;
                this.HavokDisplayColor = defaultOn;
                this.Buoyancy = defaultOn;
                this.Flags = defaultOn;
                this.HavokImpactDataSet = defaultOn;
                this.BreakableFX = defaultOn;
                this.ModelData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Parent, null));
                ret.Add((Name, null));
                ret.Add((HavokDisplayColor, null));
                ret.Add((Buoyancy, null));
                ret.Add((Flags, null));
                ret.Add((HavokImpactDataSet, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((BreakableFX, null));
                ret.Add((ModelData, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MaterialType_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MaterialTypeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MaterialTypeSetterCommon.Instance.RemapLinks(this, mapping);
        public MaterialType(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MaterialType(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal MaterialType(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MaterialType(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public MaterialType(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MaterialType>.ToString(this);
        }

        protected override Type LinkType => typeof(IMaterialType);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => MaterialTypeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => MaterialTypeSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => MaterialTypeSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => MaterialTypeSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMaterialTypeGetter rhs) return false;
            return ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMaterialTypeGetter? obj)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MaterialTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MaterialTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MaterialType CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MaterialType();
            ((MaterialTypeSetterCommon)((IMaterialTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MaterialType item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MaterialTypeSetterCommon)((IMaterialTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MaterialType GetNew()
        {
            return new MaterialType();
        }

    }
    #endregion

    #region Interface
    public partial interface IMaterialType :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IMaterialTypeInternal>,
        IMaterialTypeGetter,
        IModeled,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal
    {
        new IFormLinkNullable<IMaterialTypeGetter> Parent { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new Color? HavokDisplayColor { get; set; }
        new Single? Buoyancy { get; set; }
        new MaterialType.Flag? Flags { get; set; }
        new IFormLinkNullable<IImpactDataSetGetter> HavokImpactDataSet { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new String? BreakableFX { get; set; }
        new MemorySlice<Byte>? ModelData { get; set; }
    }

    public partial interface IMaterialTypeInternal :
        IStarfieldMajorRecordInternal,
        IMaterialType,
        IMaterialTypeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.MATT)]
    public partial interface IMaterialTypeGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMaterialTypeGetter>,
        IMapsToGetter<IMaterialTypeGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => MaterialType_Registration.Instance;
        IFormLinkNullableGetter<IMaterialTypeGetter> Parent { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        Color? HavokDisplayColor { get; }
        Single? Buoyancy { get; }
        MaterialType.Flag? Flags { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> HavokImpactDataSet { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        String? BreakableFX { get; }
        ReadOnlyMemorySlice<Byte>? ModelData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MaterialTypeMixIn
    {
        public static void Clear(this IMaterialTypeInternal item)
        {
            ((MaterialTypeSetterCommon)((IMaterialTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MaterialType.Mask<bool> GetEqualsMask(
            this IMaterialTypeGetter item,
            IMaterialTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMaterialTypeGetter item,
            string? name = null,
            MaterialType.Mask<bool>? printMask = null)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMaterialTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MaterialType.Mask<bool>? printMask = null)
        {
            ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMaterialTypeGetter item,
            IMaterialTypeGetter rhs,
            MaterialType.TranslationMask? equalsMask = null)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMaterialTypeInternal lhs,
            IMaterialTypeGetter rhs,
            out MaterialType.ErrorMask errorMask,
            MaterialType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MaterialType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMaterialTypeInternal lhs,
            IMaterialTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MaterialType DeepCopy(
            this IMaterialTypeGetter item,
            MaterialType.TranslationMask? copyMask = null)
        {
            return ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MaterialType DeepCopy(
            this IMaterialTypeGetter item,
            out MaterialType.ErrorMask errorMask,
            MaterialType.TranslationMask? copyMask = null)
        {
            return ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MaterialType DeepCopy(
            this IMaterialTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MaterialType Duplicate(
            this IMaterialTypeGetter item,
            FormKey formKey,
            MaterialType.TranslationMask? copyMask = null)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MaterialType Duplicate(
            this IMaterialTypeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMaterialTypeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MaterialTypeSetterCommon)((IMaterialTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MaterialType_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Parent = 7,
        Name = 8,
        HavokDisplayColor = 9,
        Buoyancy = 10,
        Flags = 11,
        HavokImpactDataSet = 12,
        Model = 13,
        BreakableFX = 14,
        ModelData = 15,
    }
    #endregion

    #region Registration
    internal partial class MaterialType_Registration : ILoquiRegistration
    {
        public static readonly MaterialType_Registration Instance = new MaterialType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(MaterialType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MaterialType.ErrorMask);

        public static readonly Type ClassType = typeof(MaterialType);

        public static readonly Type GetterType = typeof(IMaterialTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMaterialType);

        public static readonly Type? InternalSetterType = typeof(IMaterialTypeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.MaterialType";

        public const string Name = "MaterialType";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MATT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MATT);
            var all = RecordCollection.Factory(
                RecordTypes.MATT,
                RecordTypes.PNAM,
                RecordTypes.MNAM,
                RecordTypes.CNAM,
                RecordTypes.BNAM,
                RecordTypes.FNAM,
                RecordTypes.HNAM,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.ANAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MaterialTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MaterialTypeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly MaterialTypeSetterCommon Instance = new MaterialTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMaterialTypeInternal item)
        {
            ClearPartial();
            item.Parent.Clear();
            item.Name = default;
            item.HavokDisplayColor = default;
            item.Buoyancy = default;
            item.Flags = default;
            item.HavokImpactDataSet.Clear();
            item.Model = null;
            item.BreakableFX = default;
            item.ModelData = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IMaterialTypeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMaterialTypeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMaterialType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent.Relink(mapping);
            obj.HavokImpactDataSet.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IMaterialType obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IMaterialType obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMaterialTypeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMaterialTypeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MaterialTypeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MaterialTypeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MaterialType)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MaterialType)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MaterialTypeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly MaterialTypeCommon Instance = new MaterialTypeCommon();

        public MaterialType.Mask<bool> GetEqualsMask(
            IMaterialTypeGetter item,
            IMaterialTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MaterialType.Mask<bool>(false);
            ((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMaterialTypeGetter item,
            IMaterialTypeGetter rhs,
            MaterialType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.HavokDisplayColor = item.HavokDisplayColor.ColorOnlyEquals(rhs.HavokDisplayColor);
            ret.Buoyancy = item.Buoyancy.EqualsWithin(rhs.Buoyancy);
            ret.Flags = item.Flags == rhs.Flags;
            ret.HavokImpactDataSet = item.HavokImpactDataSet.Equals(rhs.HavokImpactDataSet);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BreakableFX = string.Equals(item.BreakableFX, rhs.BreakableFX);
            ret.ModelData = MemorySliceExt.SequenceEqual(item.ModelData, rhs.ModelData);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMaterialTypeGetter item,
            string? name = null,
            MaterialType.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMaterialTypeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MaterialType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MaterialType =>");
            }
            else
            {
                sb.AppendLine($"{name} (MaterialType) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMaterialTypeGetter item,
            StructuredStringBuilder sb,
            MaterialType.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Parent ?? true)
            {
                sb.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.HavokDisplayColor ?? true)
                && item.HavokDisplayColor is {} HavokDisplayColorItem)
            {
                sb.AppendItem(HavokDisplayColorItem, "HavokDisplayColor");
            }
            if ((printMask?.Buoyancy ?? true)
                && item.Buoyancy is {} BuoyancyItem)
            {
                sb.AppendItem(BuoyancyItem, "Buoyancy");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.HavokImpactDataSet ?? true)
            {
                sb.AppendItem(item.HavokImpactDataSet.FormKeyNullable, "HavokImpactDataSet");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.BreakableFX ?? true)
                && item.BreakableFX is {} BreakableFXItem)
            {
                sb.AppendItem(BreakableFXItem, "BreakableFX");
            }
            if ((printMask?.ModelData ?? true)
                && item.ModelData is {} ModelDataItem)
            {
                sb.AppendLine($"ModelData => {SpanExt.ToHexString(ModelDataItem)}");
            }
        }
        
        public static MaterialType_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (MaterialType_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (MaterialType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new MaterialType_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MaterialType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MaterialType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MaterialType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MaterialType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMaterialTypeGetter? lhs,
            IMaterialTypeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.HavokDisplayColor) ?? true))
            {
                if (!lhs.HavokDisplayColor.ColorOnlyEquals(rhs.HavokDisplayColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Buoyancy) ?? true))
            {
                if (!lhs.Buoyancy.EqualsWithin(rhs.Buoyancy)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.HavokImpactDataSet) ?? true))
            {
                if (!lhs.HavokImpactDataSet.Equals(rhs.HavokImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)MaterialType_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.BreakableFX) ?? true))
            {
                if (!string.Equals(lhs.BreakableFX, rhs.BreakableFX)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialType_FieldIndex.ModelData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ModelData, rhs.ModelData)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMaterialTypeGetter?)lhs,
                rhs: rhs as IMaterialTypeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMaterialTypeGetter?)lhs,
                rhs: rhs as IMaterialTypeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMaterialTypeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Parent);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.HavokDisplayColor is {} HavokDisplayColoritem)
            {
                hash.Add(HavokDisplayColoritem);
            }
            if (item.Buoyancy is {} Buoyancyitem)
            {
                hash.Add(Buoyancyitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.HavokImpactDataSet);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.BreakableFX is {} BreakableFXitem)
            {
                hash.Add(BreakableFXitem);
            }
            if (item.ModelData is {} ModelDataItem)
            {
                hash.Add(ModelDataItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IMaterialTypeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMaterialTypeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MaterialType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMaterialTypeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Parent, out var ParentInfo))
            {
                yield return ParentInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HavokImpactDataSet, out var HavokImpactDataSetInfo))
            {
                yield return HavokImpactDataSetInfo;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IMaterialTypeGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public MaterialType Duplicate(
            IMaterialTypeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MaterialType(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMaterialTypeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMaterialTypeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MaterialTypeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly MaterialTypeSetterTranslationCommon Instance = new MaterialTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMaterialTypeInternal item,
            IMaterialTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMaterialType item,
            IMaterialTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.HavokDisplayColor) ?? true))
            {
                item.HavokDisplayColor = rhs.HavokDisplayColor;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Buoyancy) ?? true))
            {
                item.Buoyancy = rhs.Buoyancy;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.HavokImpactDataSet) ?? true))
            {
                item.HavokImpactDataSet.SetTo(rhs.HavokImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)MaterialType_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MaterialType_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.BreakableFX) ?? true))
            {
                item.BreakableFX = rhs.BreakableFX;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialType_FieldIndex.ModelData) ?? true))
            {
                if(rhs.ModelData is {} ModelDatarhs)
                {
                    item.ModelData = ModelDatarhs.ToArray();
                }
                else
                {
                    item.ModelData = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMaterialType item,
            IMaterialTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialTypeInternal)item,
                rhs: (IMaterialTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialType)item,
                rhs: (IMaterialTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialTypeInternal)item,
                rhs: (IMaterialTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialType)item,
                rhs: (IMaterialTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MaterialType DeepCopy(
            IMaterialTypeGetter item,
            MaterialType.TranslationMask? copyMask = null)
        {
            MaterialType ret = (MaterialType)((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).GetNew();
            ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MaterialType DeepCopy(
            IMaterialTypeGetter item,
            out MaterialType.ErrorMask errorMask,
            MaterialType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MaterialType ret = (MaterialType)((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).GetNew();
            ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MaterialType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MaterialType DeepCopy(
            IMaterialTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MaterialType ret = (MaterialType)((MaterialTypeCommon)((IMaterialTypeGetter)item).CommonInstance()!).GetNew();
            ((MaterialTypeSetterTranslationCommon)((IMaterialTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MaterialType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MaterialType_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MaterialType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MaterialTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MaterialTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MaterialTypeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MaterialTypeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MaterialTypeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMaterialTypeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HavokDisplayColor,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: ColorBinaryType.NoAlphaFloat);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Buoyancy,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            EnumBinaryTranslation<MaterialType.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HavokImpactDataSet,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BreakableFX,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ModelData,
                header: translationParams.ConvertToCustom(RecordTypes.FLLD));
        }

        public void Write(
            MutagenWriter writer,
            IMaterialTypeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.MATT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMaterialTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMaterialTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMaterialTypeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MaterialTypeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly MaterialTypeBinaryCreateTranslation Instance = new MaterialTypeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MATT;
        public static ParseResult FillBinaryRecordTypes(
            IMaterialTypeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)MaterialType_FieldIndex.Parent;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MaterialType_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HavokDisplayColor = frame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    return (int)MaterialType_FieldIndex.HavokDisplayColor;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Buoyancy = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MaterialType_FieldIndex.Buoyancy;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<MaterialType.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)MaterialType_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HavokImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)MaterialType_FieldIndex.HavokImpactDataSet;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                case RecordTypeInts.FLLD:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)MaterialType_FieldIndex.HavokImpactDataSet)
                    {
                        item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                            frame: frame,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)MaterialType_FieldIndex.Model, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)MaterialType_FieldIndex.BreakableFX)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.ModelData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                        return new ParseResult((int)MaterialType_FieldIndex.ModelData, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                                    frame: frame,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)MaterialType_FieldIndex.Model, nextRecordType);
                            case 1:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.ModelData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                                return new ParseResult((int)MaterialType_FieldIndex.ModelData, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BreakableFX = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MaterialType_FieldIndex.BreakableFX;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MaterialTypeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MaterialTypeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IMaterialTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MaterialType_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MaterialType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MaterialTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MaterialTypeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MaterialTypeCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => MaterialTypeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MaterialTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MaterialTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMaterialType);


        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> Parent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _ParentLocation);
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region HavokDisplayColor
        private int? _HavokDisplayColorLocation;
        public Color? HavokDisplayColor => _HavokDisplayColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HavokDisplayColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color?);
        #endregion
        #region Buoyancy
        private int? _BuoyancyLocation;
        public Single? Buoyancy => _BuoyancyLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BuoyancyLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public MaterialType.Flag? Flags => _FlagsLocation.HasValue ? (MaterialType.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(MaterialType.Flag?);
        #endregion
        #region HavokImpactDataSet
        private int? _HavokImpactDataSetLocation;
        public IFormLinkNullableGetter<IImpactDataSetGetter> HavokImpactDataSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImpactDataSetGetter>(_package, _recordData, _HavokImpactDataSetLocation);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region BreakableFX
        private int? _BreakableFXLocation;
        public String? BreakableFX => _BreakableFXLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BreakableFXLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ModelData
        private int? _ModelDataLocation;
        public ReadOnlyMemorySlice<Byte>? ModelData => _ModelDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ModelDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MaterialTypeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMaterialTypeGetter MaterialTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MaterialTypeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMaterialTypeGetter MaterialTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MaterialTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.Parent;
                }
                case RecordTypeInts.MNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    _HavokDisplayColorLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.HavokDisplayColor;
                }
                case RecordTypeInts.BNAM:
                {
                    _BuoyancyLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.Buoyancy;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    _HavokImpactDataSetLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.HavokImpactDataSet;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                case RecordTypeInts.FLLD:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)MaterialType_FieldIndex.HavokImpactDataSet)
                    {
                        this.Model = ModelBinaryOverlay.ModelFactory(
                            stream: stream,
                            package: _package,
                            translationParams: translationParams.DoNotShortCircuit());
                        return new ParseResult((int)MaterialType_FieldIndex.Model, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)MaterialType_FieldIndex.BreakableFX)
                    {
                        _ModelDataLocation = (stream.Position - offset);
                        return new ParseResult((int)MaterialType_FieldIndex.ModelData, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.Model = ModelBinaryOverlay.ModelFactory(
                                    stream: stream,
                                    package: _package,
                                    translationParams: translationParams.DoNotShortCircuit());
                                return new ParseResult((int)MaterialType_FieldIndex.Model, type);
                            }
                            case 1:
                            {
                                _ModelDataLocation = (stream.Position - offset);
                                return new ParseResult((int)MaterialType_FieldIndex.ModelData, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ANAM:
                {
                    _BreakableFXLocation = (stream.Position - offset);
                    return (int)MaterialType_FieldIndex.BreakableFX;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MaterialTypeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MaterialType>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMaterialTypeGetter rhs) return false;
            return ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMaterialTypeGetter? obj)
        {
            return ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MaterialTypeCommon)((IMaterialTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

