/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Ingestible :
        StarfieldMajorRecord,
        IEquatable<IIngestibleGetter>,
        IIngestibleInternal,
        ILoquiObjectSetter<Ingestible>
    {
        #region Ctor
        protected Ingestible()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IIngestibleGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IIngestibleGetter.ODTY => this.ODTY;
        #endregion
        #region ObjectPlacementDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPlacementDefaults? _ObjectPlacementDefaults;
        public ObjectPlacementDefaults? ObjectPlacementDefaults
        {
            get => _ObjectPlacementDefaults;
            set => _ObjectPlacementDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPlacementDefaultsGetter? IIngestibleGetter.ObjectPlacementDefaults => this.ObjectPlacementDefaults;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? IIngestibleGetter.Transforms => this.Transforms;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IIngestibleGetter.Components => _Components;
        #endregion

        #endregion
        #region XALG
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XALG;
        public MemorySlice<Byte>? XALG
        {
            get => this._XALG;
            set => this._XALG = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IIngestibleGetter.XALG => this.XALG;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IIngestibleGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IIngestibleGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IIngestibleGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region PickupSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _PickupSound;
        public SoundReference? PickupSound
        {
            get => _PickupSound;
            set => _PickupSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IIngestibleGetter.PickupSound => this.PickupSound;
        #endregion
        #region DropdownSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _DropdownSound;
        public SoundReference? DropdownSound
        {
            get => _DropdownSound;
            set => _DropdownSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IIngestibleGetter.DropdownSound => this.DropdownSound;
        #endregion
        #region CraftingSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _CraftingSound;
        public SoundReference? CraftingSound
        {
            get => _CraftingSound;
            set => _CraftingSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IIngestibleGetter.CraftingSound => this.CraftingSound;
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IIngestibleGetter.Description => this.Description;
        #endregion
        #region Resources
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemResource>? _Resources;
        public ExtendedList<ItemResource>? Resources
        {
            get => this._Resources;
            set => this._Resources = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemResourceGetter>? IIngestibleGetter.Resources => _Resources;
        #endregion

        #endregion
        #region ComponentDisplayIndices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Byte>? _ComponentDisplayIndices;
        public ExtendedList<Byte>? ComponentDisplayIndices
        {
            get => this._ComponentDisplayIndices;
            set => this._ComponentDisplayIndices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Byte>? IIngestibleGetter.ComponentDisplayIndices => _ComponentDisplayIndices;
        #endregion

        #endregion
        #region Weight
        public Single Weight { get; set; } = default(Single);
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default(UInt32);
        #endregion
        #region Flags
        public Ingestible.Flag Flags { get; set; } = default(Ingestible.Flag);
        #endregion
        #region Addiction
        private readonly IFormLink<ISpellGetter> _Addiction = new FormLink<ISpellGetter>();
        public IFormLink<ISpellGetter> Addiction
        {
            get => _Addiction;
            set => _Addiction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISpellGetter> IIngestibleGetter.Addiction => this.Addiction;
        #endregion
        #region AddictionChance
        public Single AddictionChance { get; set; } = default(Single);
        #endregion
        #region ConsumeSound
        public SoundReference ConsumeSound { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IIngestibleGetter.ConsumeSound => ConsumeSound;
        #endregion
        #region AddictionName
        public TranslatedString? AddictionName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IIngestibleGetter.AddictionName => this.AddictionName;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            init => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IIngestibleGetter.Effects => _Effects;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IngestibleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(initialValue, new ObjectPlacementDefaults.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.XALG = initialValue;
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.CraftingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Description = initialValue;
                this.Resources = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemResource.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemResource.Mask<TItem>?>>());
                this.ComponentDisplayIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Weight = initialValue;
                this.Value = initialValue;
                this.Flags = initialValue;
                this.Addiction = initialValue;
                this.AddictionChance = initialValue;
                this.ConsumeSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.AddictionName = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem ODTY,
                TItem ObjectPlacementDefaults,
                TItem Transforms,
                TItem Components,
                TItem XALG,
                TItem Name,
                TItem Keywords,
                TItem Model,
                TItem PickupSound,
                TItem DropdownSound,
                TItem CraftingSound,
                TItem Description,
                TItem Resources,
                TItem ComponentDisplayIndices,
                TItem Weight,
                TItem Value,
                TItem Flags,
                TItem Addiction,
                TItem AddictionChance,
                TItem ConsumeSound,
                TItem AddictionName,
                TItem Effects)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(ObjectPlacementDefaults, new ObjectPlacementDefaults.Mask<TItem>(ObjectPlacementDefaults));
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.XALG = XALG;
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(PickupSound, new SoundReference.Mask<TItem>(PickupSound));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(DropdownSound, new SoundReference.Mask<TItem>(DropdownSound));
                this.CraftingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(CraftingSound, new SoundReference.Mask<TItem>(CraftingSound));
                this.Description = Description;
                this.Resources = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemResource.Mask<TItem>?>>?>(Resources, Enumerable.Empty<MaskItemIndexed<TItem, ItemResource.Mask<TItem>?>>());
                this.ComponentDisplayIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ComponentDisplayIndices, Enumerable.Empty<(int Index, TItem Value)>());
                this.Weight = Weight;
                this.Value = Value;
                this.Flags = Flags;
                this.Addiction = Addiction;
                this.AddictionChance = AddictionChance;
                this.ConsumeSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(ConsumeSound, new SoundReference.Mask<TItem>(ConsumeSound));
                this.AddictionName = AddictionName;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>? ObjectPlacementDefaults { get; set; }
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem XALG;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? PickupSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? DropdownSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? CraftingSound { get; set; }
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemResource.Mask<TItem>?>>?>? Resources;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ComponentDisplayIndices;
            public TItem Weight;
            public TItem Value;
            public TItem Flags;
            public TItem Addiction;
            public TItem AddictionChance;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? ConsumeSound { get; set; }
            public TItem AddictionName;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.PickupSound, rhs.PickupSound)) return false;
                if (!object.Equals(this.DropdownSound, rhs.DropdownSound)) return false;
                if (!object.Equals(this.CraftingSound, rhs.CraftingSound)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Resources, rhs.Resources)) return false;
                if (!object.Equals(this.ComponentDisplayIndices, rhs.ComponentDisplayIndices)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Addiction, rhs.Addiction)) return false;
                if (!object.Equals(this.AddictionChance, rhs.AddictionChance)) return false;
                if (!object.Equals(this.ConsumeSound, rhs.ConsumeSound)) return false;
                if (!object.Equals(this.AddictionName, rhs.AddictionName)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.ObjectPlacementDefaults);
                hash.Add(this.Transforms);
                hash.Add(this.Components);
                hash.Add(this.XALG);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.Model);
                hash.Add(this.PickupSound);
                hash.Add(this.DropdownSound);
                hash.Add(this.CraftingSound);
                hash.Add(this.Description);
                hash.Add(this.Resources);
                hash.Add(this.ComponentDisplayIndices);
                hash.Add(this.Weight);
                hash.Add(this.Value);
                hash.Add(this.Flags);
                hash.Add(this.Addiction);
                hash.Add(this.AddictionChance);
                hash.Add(this.ConsumeSound);
                hash.Add(this.AddictionName);
                hash.Add(this.Effects);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (ObjectPlacementDefaults != null)
                {
                    if (!eval(this.ObjectPlacementDefaults.Overall)) return false;
                    if (this.ObjectPlacementDefaults.Specific != null && !this.ObjectPlacementDefaults.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.XALG)) return false;
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (PickupSound != null)
                {
                    if (!eval(this.PickupSound.Overall)) return false;
                    if (this.PickupSound.Specific != null && !this.PickupSound.Specific.All(eval)) return false;
                }
                if (DropdownSound != null)
                {
                    if (!eval(this.DropdownSound.Overall)) return false;
                    if (this.DropdownSound.Specific != null && !this.DropdownSound.Specific.All(eval)) return false;
                }
                if (CraftingSound != null)
                {
                    if (!eval(this.CraftingSound.Overall)) return false;
                    if (this.CraftingSound.Specific != null && !this.CraftingSound.Specific.All(eval)) return false;
                }
                if (!eval(this.Description)) return false;
                if (this.Resources != null)
                {
                    if (!eval(this.Resources.Overall)) return false;
                    if (this.Resources.Specific != null)
                    {
                        foreach (var item in this.Resources.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ComponentDisplayIndices != null)
                {
                    if (!eval(this.ComponentDisplayIndices.Overall)) return false;
                    if (this.ComponentDisplayIndices.Specific != null)
                    {
                        foreach (var item in this.ComponentDisplayIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Weight)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Addiction)) return false;
                if (!eval(this.AddictionChance)) return false;
                if (ConsumeSound != null)
                {
                    if (!eval(this.ConsumeSound.Overall)) return false;
                    if (this.ConsumeSound.Specific != null && !this.ConsumeSound.Specific.All(eval)) return false;
                }
                if (!eval(this.AddictionName)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (ObjectPlacementDefaults != null)
                {
                    if (eval(this.ObjectPlacementDefaults.Overall)) return true;
                    if (this.ObjectPlacementDefaults.Specific != null && this.ObjectPlacementDefaults.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.XALG)) return true;
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (PickupSound != null)
                {
                    if (eval(this.PickupSound.Overall)) return true;
                    if (this.PickupSound.Specific != null && this.PickupSound.Specific.Any(eval)) return true;
                }
                if (DropdownSound != null)
                {
                    if (eval(this.DropdownSound.Overall)) return true;
                    if (this.DropdownSound.Specific != null && this.DropdownSound.Specific.Any(eval)) return true;
                }
                if (CraftingSound != null)
                {
                    if (eval(this.CraftingSound.Overall)) return true;
                    if (this.CraftingSound.Specific != null && this.CraftingSound.Specific.Any(eval)) return true;
                }
                if (eval(this.Description)) return true;
                if (this.Resources != null)
                {
                    if (eval(this.Resources.Overall)) return true;
                    if (this.Resources.Specific != null)
                    {
                        foreach (var item in this.Resources.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ComponentDisplayIndices != null)
                {
                    if (eval(this.ComponentDisplayIndices.Overall)) return true;
                    if (this.ComponentDisplayIndices.Specific != null)
                    {
                        foreach (var item in this.ComponentDisplayIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Weight)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Addiction)) return true;
                if (eval(this.AddictionChance)) return true;
                if (ConsumeSound != null)
                {
                    if (eval(this.ConsumeSound.Overall)) return true;
                    if (this.ConsumeSound.Specific != null && this.ConsumeSound.Specific.Any(eval)) return true;
                }
                if (eval(this.AddictionName)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Ingestible.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.ObjectPlacementDefaults = this.ObjectPlacementDefaults == null ? null : new MaskItem<R, ObjectPlacementDefaults.Mask<R>?>(eval(this.ObjectPlacementDefaults.Overall), this.ObjectPlacementDefaults.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.XALG = eval(this.XALG);
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.PickupSound = this.PickupSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.PickupSound.Overall), this.PickupSound.Specific?.Translate(eval));
                obj.DropdownSound = this.DropdownSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.DropdownSound.Overall), this.DropdownSound.Specific?.Translate(eval));
                obj.CraftingSound = this.CraftingSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.CraftingSound.Overall), this.CraftingSound.Specific?.Translate(eval));
                obj.Description = eval(this.Description);
                if (Resources != null)
                {
                    obj.Resources = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemResource.Mask<R>?>>?>(eval(this.Resources.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemResource.Mask<R>?>>());
                    if (Resources.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemResource.Mask<R>?>>();
                        obj.Resources.Specific = l;
                        foreach (var item in Resources.Specific)
                        {
                            MaskItemIndexed<R, ItemResource.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ItemResource.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ComponentDisplayIndices != null)
                {
                    obj.ComponentDisplayIndices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ComponentDisplayIndices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ComponentDisplayIndices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ComponentDisplayIndices.Specific = l;
                        foreach (var item in ComponentDisplayIndices.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Weight = eval(this.Weight);
                obj.Value = eval(this.Value);
                obj.Flags = eval(this.Flags);
                obj.Addiction = eval(this.Addiction);
                obj.AddictionChance = eval(this.AddictionChance);
                obj.ConsumeSound = this.ConsumeSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.ConsumeSound.Overall), this.ConsumeSound.Specific?.Translate(eval));
                obj.AddictionName = eval(this.AddictionName);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific)
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Ingestible.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Ingestible.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Ingestible.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.ObjectPlacementDefaults?.Overall ?? true)
                    {
                        ObjectPlacementDefaults?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.PickupSound?.Overall ?? true)
                    {
                        PickupSound?.Print(sb);
                    }
                    if (printMask?.DropdownSound?.Overall ?? true)
                    {
                        DropdownSound?.Print(sb);
                    }
                    if (printMask?.CraftingSound?.Overall ?? true)
                    {
                        CraftingSound?.Print(sb);
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Resources?.Overall ?? true)
                        && Resources is {} ResourcesItem)
                    {
                        sb.AppendLine("Resources =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ResourcesItem.Overall);
                            if (ResourcesItem.Specific != null)
                            {
                                foreach (var subItem in ResourcesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ComponentDisplayIndices?.Overall ?? true)
                        && ComponentDisplayIndices is {} ComponentDisplayIndicesItem)
                    {
                        sb.AppendLine("ComponentDisplayIndices =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentDisplayIndicesItem.Overall);
                            if (ComponentDisplayIndicesItem.Specific != null)
                            {
                                foreach (var subItem in ComponentDisplayIndicesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Weight ?? true)
                    {
                        sb.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Addiction ?? true)
                    {
                        sb.AppendItem(Addiction, "Addiction");
                    }
                    if (printMask?.AddictionChance ?? true)
                    {
                        sb.AppendItem(AddictionChance, "AddictionChance");
                    }
                    if (printMask?.ConsumeSound?.Overall ?? true)
                    {
                        ConsumeSound?.Print(sb);
                    }
                    if (printMask?.AddictionName ?? true)
                    {
                        sb.AppendItem(AddictionName, "AddictionName");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects is {} EffectsItem)
                    {
                        sb.AppendLine("Effects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>? ObjectPlacementDefaults;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? XALG;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? PickupSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? DropdownSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? CraftingSound;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemResource.ErrorMask?>>?>? Resources;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ComponentDisplayIndices;
            public Exception? Weight;
            public Exception? Value;
            public Exception? Flags;
            public Exception? Addiction;
            public Exception? AddictionChance;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? ConsumeSound;
            public Exception? AddictionName;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Ingestible_FieldIndex enu = (Ingestible_FieldIndex)index;
                switch (enu)
                {
                    case Ingestible_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Ingestible_FieldIndex.ODTY:
                        return ODTY;
                    case Ingestible_FieldIndex.ObjectPlacementDefaults:
                        return ObjectPlacementDefaults;
                    case Ingestible_FieldIndex.Transforms:
                        return Transforms;
                    case Ingestible_FieldIndex.Components:
                        return Components;
                    case Ingestible_FieldIndex.XALG:
                        return XALG;
                    case Ingestible_FieldIndex.Name:
                        return Name;
                    case Ingestible_FieldIndex.Keywords:
                        return Keywords;
                    case Ingestible_FieldIndex.Model:
                        return Model;
                    case Ingestible_FieldIndex.PickupSound:
                        return PickupSound;
                    case Ingestible_FieldIndex.DropdownSound:
                        return DropdownSound;
                    case Ingestible_FieldIndex.CraftingSound:
                        return CraftingSound;
                    case Ingestible_FieldIndex.Description:
                        return Description;
                    case Ingestible_FieldIndex.Resources:
                        return Resources;
                    case Ingestible_FieldIndex.ComponentDisplayIndices:
                        return ComponentDisplayIndices;
                    case Ingestible_FieldIndex.Weight:
                        return Weight;
                    case Ingestible_FieldIndex.Value:
                        return Value;
                    case Ingestible_FieldIndex.Flags:
                        return Flags;
                    case Ingestible_FieldIndex.Addiction:
                        return Addiction;
                    case Ingestible_FieldIndex.AddictionChance:
                        return AddictionChance;
                    case Ingestible_FieldIndex.ConsumeSound:
                        return ConsumeSound;
                    case Ingestible_FieldIndex.AddictionName:
                        return AddictionName;
                    case Ingestible_FieldIndex.Effects:
                        return Effects;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Ingestible_FieldIndex enu = (Ingestible_FieldIndex)index;
                switch (enu)
                {
                    case Ingestible_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case Ingestible_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = new MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case Ingestible_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Ingestible_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.PickupSound:
                        this.PickupSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.DropdownSound:
                        this.DropdownSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.CraftingSound:
                        this.CraftingSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Ingestible_FieldIndex.Resources:
                        this.Resources = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemResource.ErrorMask?>>?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.ComponentDisplayIndices:
                        this.ComponentDisplayIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Ingestible_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Ingestible_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Ingestible_FieldIndex.Addiction:
                        this.Addiction = ex;
                        break;
                    case Ingestible_FieldIndex.AddictionChance:
                        this.AddictionChance = ex;
                        break;
                    case Ingestible_FieldIndex.ConsumeSound:
                        this.ConsumeSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Ingestible_FieldIndex.AddictionName:
                        this.AddictionName = ex;
                        break;
                    case Ingestible_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Ingestible_FieldIndex enu = (Ingestible_FieldIndex)index;
                switch (enu)
                {
                    case Ingestible_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = (MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Ingestible_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Ingestible_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.PickupSound:
                        this.PickupSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.DropdownSound:
                        this.DropdownSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.CraftingSound:
                        this.CraftingSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Resources:
                        this.Resources = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemResource.ErrorMask?>>?>)obj;
                        break;
                    case Ingestible_FieldIndex.ComponentDisplayIndices:
                        this.ComponentDisplayIndices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Ingestible_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Addiction:
                        this.Addiction = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.AddictionChance:
                        this.AddictionChance = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.ConsumeSound:
                        this.ConsumeSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Ingestible_FieldIndex.AddictionName:
                        this.AddictionName = (Exception?)obj;
                        break;
                    case Ingestible_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (ObjectPlacementDefaults != null) return true;
                if (Transforms != null) return true;
                if (Components != null) return true;
                if (XALG != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (Model != null) return true;
                if (PickupSound != null) return true;
                if (DropdownSound != null) return true;
                if (CraftingSound != null) return true;
                if (Description != null) return true;
                if (Resources != null) return true;
                if (ComponentDisplayIndices != null) return true;
                if (Weight != null) return true;
                if (Value != null) return true;
                if (Flags != null) return true;
                if (Addiction != null) return true;
                if (AddictionChance != null) return true;
                if (ConsumeSound != null) return true;
                if (AddictionName != null) return true;
                if (Effects != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                ObjectPlacementDefaults?.Print(sb);
                Transforms?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(XALG, "XALG");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Model?.Print(sb);
                PickupSound?.Print(sb);
                DropdownSound?.Print(sb);
                CraftingSound?.Print(sb);
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Resources is {} ResourcesItem)
                {
                    sb.AppendLine("Resources =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ResourcesItem.Overall);
                        if (ResourcesItem.Specific != null)
                        {
                            foreach (var subItem in ResourcesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ComponentDisplayIndices is {} ComponentDisplayIndicesItem)
                {
                    sb.AppendLine("ComponentDisplayIndices =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentDisplayIndicesItem.Overall);
                        if (ComponentDisplayIndicesItem.Specific != null)
                        {
                            foreach (var subItem in ComponentDisplayIndicesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Weight, "Weight");
                }
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Addiction, "Addiction");
                }
                {
                    sb.AppendItem(AddictionChance, "AddictionChance");
                }
                ConsumeSound?.Print(sb);
                {
                    sb.AppendItem(AddictionName, "AddictionName");
                }
                if (Effects is {} EffectsItem)
                {
                    sb.AppendLine("Effects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.ObjectPlacementDefaults = this.ObjectPlacementDefaults.Combine(rhs.ObjectPlacementDefaults, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.PickupSound = this.PickupSound.Combine(rhs.PickupSound, (l, r) => l.Combine(r));
                ret.DropdownSound = this.DropdownSound.Combine(rhs.DropdownSound, (l, r) => l.Combine(r));
                ret.CraftingSound = this.CraftingSound.Combine(rhs.CraftingSound, (l, r) => l.Combine(r));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Resources = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemResource.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Resources?.Overall, rhs.Resources?.Overall), Noggog.ExceptionExt.Combine(this.Resources?.Specific, rhs.Resources?.Specific));
                ret.ComponentDisplayIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ComponentDisplayIndices?.Overall, rhs.ComponentDisplayIndices?.Overall), Noggog.ExceptionExt.Combine(this.ComponentDisplayIndices?.Specific, rhs.ComponentDisplayIndices?.Specific));
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Addiction = this.Addiction.Combine(rhs.Addiction);
                ret.AddictionChance = this.AddictionChance.Combine(rhs.AddictionChance);
                ret.ConsumeSound = this.ConsumeSound.Combine(rhs.ConsumeSound, (l, r) => l.Combine(r));
                ret.AddictionName = this.AddictionName.Combine(rhs.AddictionName);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), Noggog.ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public ObjectPlacementDefaults.TranslationMask? ObjectPlacementDefaults;
            public Transforms.TranslationMask? Transforms;
            public AComponent.TranslationMask? Components;
            public bool XALG;
            public bool Name;
            public bool Keywords;
            public Model.TranslationMask? Model;
            public SoundReference.TranslationMask? PickupSound;
            public SoundReference.TranslationMask? DropdownSound;
            public SoundReference.TranslationMask? CraftingSound;
            public bool Description;
            public ItemResource.TranslationMask? Resources;
            public bool ComponentDisplayIndices;
            public bool Weight;
            public bool Value;
            public bool Flags;
            public bool Addiction;
            public bool AddictionChance;
            public SoundReference.TranslationMask? ConsumeSound;
            public bool AddictionName;
            public Effect.TranslationMask? Effects;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.XALG = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.Description = defaultOn;
                this.ComponentDisplayIndices = defaultOn;
                this.Weight = defaultOn;
                this.Value = defaultOn;
                this.Flags = defaultOn;
                this.Addiction = defaultOn;
                this.AddictionChance = defaultOn;
                this.AddictionName = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((ObjectPlacementDefaults != null ? ObjectPlacementDefaults.OnOverall : DefaultOn, ObjectPlacementDefaults?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((XALG, null));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((PickupSound != null ? PickupSound.OnOverall : DefaultOn, PickupSound?.GetCrystal()));
                ret.Add((DropdownSound != null ? DropdownSound.OnOverall : DefaultOn, DropdownSound?.GetCrystal()));
                ret.Add((CraftingSound != null ? CraftingSound.OnOverall : DefaultOn, CraftingSound?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Resources == null ? DefaultOn : !Resources.GetCrystal().CopyNothing, Resources?.GetCrystal()));
                ret.Add((ComponentDisplayIndices, null));
                ret.Add((Weight, null));
                ret.Add((Value, null));
                ret.Add((Flags, null));
                ret.Add((Addiction, null));
                ret.Add((AddictionChance, null));
                ret.Add((ConsumeSound != null ? ConsumeSound.OnOverall : DefaultOn, ConsumeSound?.GetCrystal()));
                ret.Add((AddictionName, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Ingestible_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IngestibleCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IngestibleSetterCommon.Instance.RemapLinks(this, mapping);
        public Ingestible(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Ingestible(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Ingestible(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Ingestible(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Ingestible(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Ingestible>.ToString(this);
        }

        protected override Type LinkType => typeof(IIngestible);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => IngestibleCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => IngestibleSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => IngestibleSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => IngestibleSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIngestibleGetter rhs) return false;
            return ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIngestibleGetter? obj)
        {
            return ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IngestibleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IngestibleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Ingestible CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Ingestible();
            ((IngestibleSetterCommon)((IIngestibleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Ingestible item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((IngestibleSetterCommon)((IIngestibleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Ingestible GetNew()
        {
            return new Ingestible();
        }

    }
    #endregion

    #region Interface
    public partial interface IIngestible :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectTarget,
        IFormLinkContainer,
        IIngestibleGetter,
        IItem,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IIngestibleInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IResearchResourceTarget,
        IStarfieldMajorRecordInternal,
        IStaticTarget,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeightValue
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        new ObjectPlacementDefaults? ObjectPlacementDefaults { get; set; }
        new Transforms? Transforms { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new MemorySlice<Byte>? XALG { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new SoundReference? PickupSound { get; set; }
        new SoundReference? DropdownSound { get; set; }
        new SoundReference? CraftingSound { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<ItemResource>? Resources { get; set; }
        new ExtendedList<Byte>? ComponentDisplayIndices { get; set; }
        new Single Weight { get; set; }
        new UInt32 Value { get; set; }
        new Ingestible.Flag Flags { get; set; }
        new IFormLink<ISpellGetter> Addiction { get; set; }
        new Single AddictionChance { get; set; }
        new SoundReference ConsumeSound { get; set; }
        new TranslatedString? AddictionName { get; set; }
        new ExtendedList<Effect> Effects { get; }
        #region Mutagen
        new Ingestible.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IIngestibleInternal :
        IStarfieldMajorRecordInternal,
        IIngestible,
        IIngestibleGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.ALCH)]
    public partial interface IIngestibleGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IFormLinkContainerGetter,
        IItemGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IIngestibleGetter>,
        IMapsToGetter<IIngestibleGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IResearchResourceTargetGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter,
        IWeightValueGetter
    {
        static new ILoquiRegistration StaticRegistration => Ingestible_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        IObjectPlacementDefaultsGetter? ObjectPlacementDefaults { get; }
        ITransformsGetter? Transforms { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        ReadOnlyMemorySlice<Byte>? XALG { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        ISoundReferenceGetter? PickupSound { get; }
        ISoundReferenceGetter? DropdownSound { get; }
        ISoundReferenceGetter? CraftingSound { get; }
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IItemResourceGetter>? Resources { get; }
        IReadOnlyList<Byte>? ComponentDisplayIndices { get; }
        Single Weight { get; }
        UInt32 Value { get; }
        Ingestible.Flag Flags { get; }
        IFormLinkGetter<ISpellGetter> Addiction { get; }
        Single AddictionChance { get; }
        ISoundReferenceGetter ConsumeSound { get; }
        ITranslatedStringGetter? AddictionName { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }

        #region Mutagen
        Ingestible.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class IngestibleMixIn
    {
        public static void Clear(this IIngestibleInternal item)
        {
            ((IngestibleSetterCommon)((IIngestibleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Ingestible.Mask<bool> GetEqualsMask(
            this IIngestibleGetter item,
            IIngestibleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IIngestibleGetter item,
            string? name = null,
            Ingestible.Mask<bool>? printMask = null)
        {
            return ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IIngestibleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Ingestible.Mask<bool>? printMask = null)
        {
            ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IIngestibleGetter item,
            IIngestibleGetter rhs,
            Ingestible.TranslationMask? equalsMask = null)
        {
            return ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIngestibleInternal lhs,
            IIngestibleGetter rhs,
            out Ingestible.ErrorMask errorMask,
            Ingestible.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IngestibleSetterTranslationCommon)((IIngestibleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Ingestible.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIngestibleInternal lhs,
            IIngestibleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IngestibleSetterTranslationCommon)((IIngestibleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Ingestible DeepCopy(
            this IIngestibleGetter item,
            Ingestible.TranslationMask? copyMask = null)
        {
            return ((IngestibleSetterTranslationCommon)((IIngestibleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Ingestible DeepCopy(
            this IIngestibleGetter item,
            out Ingestible.ErrorMask errorMask,
            Ingestible.TranslationMask? copyMask = null)
        {
            return ((IngestibleSetterTranslationCommon)((IIngestibleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Ingestible DeepCopy(
            this IIngestibleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IngestibleSetterTranslationCommon)((IIngestibleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Ingestible Duplicate(
            this IIngestibleGetter item,
            FormKey formKey,
            Ingestible.TranslationMask? copyMask = null)
        {
            return ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Ingestible Duplicate(
            this IIngestibleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IIngestibleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((IngestibleSetterCommon)((IIngestibleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Ingestible_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        ODTY = 8,
        ObjectPlacementDefaults = 9,
        Transforms = 10,
        Components = 11,
        XALG = 12,
        Name = 13,
        Keywords = 14,
        Model = 15,
        PickupSound = 16,
        DropdownSound = 17,
        CraftingSound = 18,
        Description = 19,
        Resources = 20,
        ComponentDisplayIndices = 21,
        Weight = 22,
        Value = 23,
        Flags = 24,
        Addiction = 25,
        AddictionChance = 26,
        ConsumeSound = 27,
        AddictionName = 28,
        Effects = 29,
    }
    #endregion

    #region Registration
    internal partial class Ingestible_Registration : ILoquiRegistration
    {
        public static readonly Ingestible_Registration Instance = new Ingestible_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(Ingestible.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Ingestible.ErrorMask);

        public static readonly Type ClassType = typeof(Ingestible);

        public static readonly Type GetterType = typeof(IIngestibleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIngestible);

        public static readonly Type? InternalSetterType = typeof(IIngestibleInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Ingestible";

        public const string Name = "Ingestible";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ALCH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ALCH);
            var all = RecordCollection.Factory(
                RecordTypes.ALCH,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.OPDS,
                RecordTypes.PTT2,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.XALG,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.PUSH,
                RecordTypes.PDSH,
                RecordTypes.CUSH,
                RecordTypes.DESC,
                RecordTypes.CVPA,
                RecordTypes.CDIX,
                RecordTypes.DATA,
                RecordTypes.ENIT,
                RecordTypes.DNAM,
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.MNAM,
                RecordTypes.ANAM,
                RecordTypes.ZNAM,
                RecordTypes.MAGF,
                RecordTypes.EFIF,
                RecordTypes.MUID,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(IngestibleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class IngestibleSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly IngestibleSetterCommon Instance = new IngestibleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIngestibleInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.ObjectPlacementDefaults = null;
            item.Transforms = null;
            item.Components.Clear();
            item.XALG = default;
            item.Name = default;
            item.Keywords = null;
            item.Model = null;
            item.PickupSound = null;
            item.DropdownSound = null;
            item.CraftingSound = null;
            item.Description.Clear();
            item.Resources = null;
            item.ComponentDisplayIndices = null;
            item.Weight = default(Single);
            item.Value = default(UInt32);
            item.Flags = default(Ingestible.Flag);
            item.Addiction.Clear();
            item.AddictionChance = default(Single);
            item.ConsumeSound.Clear();
            item.AddictionName = default;
            item.Effects.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IIngestibleInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIngestibleInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IIngestible obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.PickupSound?.RemapLinks(mapping);
            obj.DropdownSound?.RemapLinks(mapping);
            obj.CraftingSound?.RemapLinks(mapping);
            obj.Resources?.RemapLinks(mapping);
            obj.Addiction.Relink(mapping);
            obj.ConsumeSound.RemapLinks(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IIngestible obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IIngestible obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIngestibleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IIngestibleInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: IngestibleBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IngestibleBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Ingestible)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Ingestible)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class IngestibleCommon : StarfieldMajorRecordCommon
    {
        public new static readonly IngestibleCommon Instance = new IngestibleCommon();

        public Ingestible.Mask<bool> GetEqualsMask(
            IIngestibleGetter item,
            IIngestibleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Ingestible.Mask<bool>(false);
            ((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIngestibleGetter item,
            IIngestibleGetter rhs,
            Ingestible.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.ObjectPlacementDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPlacementDefaults,
                rhs.ObjectPlacementDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.XALG = MemorySliceExt.SequenceEqual(item.XALG, rhs.XALG);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickupSound = EqualsMaskHelper.EqualsHelper(
                item.PickupSound,
                rhs.PickupSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DropdownSound = EqualsMaskHelper.EqualsHelper(
                item.DropdownSound,
                rhs.DropdownSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CraftingSound = EqualsMaskHelper.EqualsHelper(
                item.CraftingSound,
                rhs.CraftingSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Resources = item.Resources.CollectionEqualsHelper(
                rhs.Resources,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ComponentDisplayIndices = item.ComponentDisplayIndices.CollectionEqualsHelper(
                rhs.ComponentDisplayIndices,
                (l, r) => l == r,
                include);
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.Value = item.Value == rhs.Value;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Addiction = item.Addiction.Equals(rhs.Addiction);
            ret.AddictionChance = item.AddictionChance.EqualsWithin(rhs.AddictionChance);
            ret.ConsumeSound = MaskItemExt.Factory(item.ConsumeSound.GetEqualsMask(rhs.ConsumeSound, include), include);
            ret.AddictionName = object.Equals(item.AddictionName, rhs.AddictionName);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IIngestibleGetter item,
            string? name = null,
            Ingestible.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IIngestibleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Ingestible.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Ingestible =>");
            }
            else
            {
                sb.AppendLine($"{name} (Ingestible) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IIngestibleGetter item,
            StructuredStringBuilder sb,
            Ingestible.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.ObjectPlacementDefaults?.Overall ?? true)
                && item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ObjectPlacementDefaultsItem?.Print(sb, "ObjectPlacementDefaults");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendLine($"XALG => {SpanExt.ToHexString(XALGItem)}");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.PickupSound?.Overall ?? true)
                && item.PickupSound is {} PickupSoundItem)
            {
                PickupSoundItem?.Print(sb, "PickupSound");
            }
            if ((printMask?.DropdownSound?.Overall ?? true)
                && item.DropdownSound is {} DropdownSoundItem)
            {
                DropdownSoundItem?.Print(sb, "DropdownSound");
            }
            if ((printMask?.CraftingSound?.Overall ?? true)
                && item.CraftingSound is {} CraftingSoundItem)
            {
                CraftingSoundItem?.Print(sb, "CraftingSound");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if ((printMask?.Resources?.Overall ?? true)
                && item.Resources is {} ResourcesItem)
            {
                sb.AppendLine("Resources =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ResourcesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ComponentDisplayIndices?.Overall ?? true)
                && item.ComponentDisplayIndices is {} ComponentDisplayIndicesItem)
            {
                sb.AppendLine("ComponentDisplayIndices =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ComponentDisplayIndicesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Weight ?? true)
            {
                sb.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Addiction ?? true)
            {
                sb.AppendItem(item.Addiction.FormKey, "Addiction");
            }
            if (printMask?.AddictionChance ?? true)
            {
                sb.AppendItem(item.AddictionChance, "AddictionChance");
            }
            if (printMask?.ConsumeSound?.Overall ?? true)
            {
                item.ConsumeSound?.Print(sb, "ConsumeSound");
            }
            if ((printMask?.AddictionName ?? true)
                && item.AddictionName is {} AddictionNameItem)
            {
                sb.AppendItem(AddictionNameItem, "AddictionName");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                sb.AppendLine("Effects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Effects)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Ingestible_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Ingestible_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Ingestible_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Ingestible_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Ingestible_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Ingestible_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Ingestible_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Ingestible_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIngestibleGetter? lhs,
            IIngestibleGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults, out var lhsObjectPlacementDefaults, out var rhsObjectPlacementDefaults, out var isObjectPlacementDefaultsEqual))
                {
                    if (!((ObjectPlacementDefaultsCommon)((IObjectPlacementDefaultsGetter)lhsObjectPlacementDefaults).CommonInstance()!).Equals(lhsObjectPlacementDefaults, rhsObjectPlacementDefaults, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.ObjectPlacementDefaults))) return false;
                }
                else if (!isObjectPlacementDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.XALG) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XALG, rhs.XALG)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.PickupSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PickupSound, rhs.PickupSound, out var lhsPickupSound, out var rhsPickupSound, out var isPickupSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsPickupSound).CommonInstance()!).Equals(lhsPickupSound, rhsPickupSound, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.PickupSound))) return false;
                }
                else if (!isPickupSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.DropdownSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DropdownSound, rhs.DropdownSound, out var lhsDropdownSound, out var rhsDropdownSound, out var isDropdownSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsDropdownSound).CommonInstance()!).Equals(lhsDropdownSound, rhsDropdownSound, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.DropdownSound))) return false;
                }
                else if (!isDropdownSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.CraftingSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CraftingSound, rhs.CraftingSound, out var lhsCraftingSound, out var rhsCraftingSound, out var isCraftingSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsCraftingSound).CommonInstance()!).Equals(lhsCraftingSound, rhsCraftingSound, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.CraftingSound))) return false;
                }
                else if (!isCraftingSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Resources) ?? true))
            {
                if (!lhs.Resources.SequenceEqualNullable(rhs.Resources, (l, r) => ((ItemResourceCommon)((IItemResourceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.Resources)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ComponentDisplayIndices) ?? true))
            {
                if (!lhs.ComponentDisplayIndices.SequenceEqualNullable(rhs.ComponentDisplayIndices)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Addiction) ?? true))
            {
                if (!lhs.Addiction.Equals(rhs.Addiction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.AddictionChance) ?? true))
            {
                if (!lhs.AddictionChance.EqualsWithin(rhs.AddictionChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ConsumeSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ConsumeSound, rhs.ConsumeSound, out var lhsConsumeSound, out var rhsConsumeSound, out var isConsumeSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsConsumeSound).CommonInstance()!).Equals(lhsConsumeSound, rhsConsumeSound, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.ConsumeSound))) return false;
                }
                else if (!isConsumeSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.AddictionName) ?? true))
            {
                if (!object.Equals(lhs.AddictionName, rhs.AddictionName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Effects) ?? true))
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects, (l, r) => ((EffectCommon)((IEffectGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Ingestible_FieldIndex.Effects)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIngestibleGetter?)lhs,
                rhs: rhs as IIngestibleGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIngestibleGetter?)lhs,
                rhs: rhs as IIngestibleGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IIngestibleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsitem)
            {
                hash.Add(ObjectPlacementDefaultsitem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            hash.Add(item.Components);
            if (item.XALG is {} XALGItem)
            {
                hash.Add(XALGItem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.PickupSound is {} PickupSounditem)
            {
                hash.Add(PickupSounditem);
            }
            if (item.DropdownSound is {} DropdownSounditem)
            {
                hash.Add(DropdownSounditem);
            }
            if (item.CraftingSound is {} CraftingSounditem)
            {
                hash.Add(CraftingSounditem);
            }
            hash.Add(item.Description);
            hash.Add(item.Resources);
            hash.Add(item.ComponentDisplayIndices);
            hash.Add(item.Weight);
            hash.Add(item.Value);
            hash.Add(item.Flags);
            hash.Add(item.Addiction);
            hash.Add(item.AddictionChance);
            hash.Add(item.ConsumeSound);
            if (item.AddictionName is {} AddictionNameitem)
            {
                hash.Add(AddictionNameitem);
            }
            hash.Add(item.Effects);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IIngestibleGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIngestibleGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Ingestible.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IIngestibleGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.PickupSound is {} PickupSoundItems)
            {
                foreach (var item in PickupSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.DropdownSound is {} DropdownSoundItems)
            {
                foreach (var item in DropdownSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.CraftingSound is {} CraftingSoundItems)
            {
                foreach (var item in CraftingSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Resources is {} ResourcesItem)
            {
                foreach (var item in ResourcesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.Addiction);
            foreach (var item in obj.ConsumeSound.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Effects.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IIngestibleGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Ingestible Duplicate(
            IIngestibleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Ingestible(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIngestibleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIngestibleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class IngestibleSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly IngestibleSetterTranslationCommon Instance = new IngestibleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IIngestibleInternal item,
            IIngestibleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IIngestible item,
            IIngestibleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.ObjectPlacementDefaults);
                try
                {
                    if(rhs.ObjectPlacementDefaults is {} rhsObjectPlacementDefaults)
                    {
                        item.ObjectPlacementDefaults = rhsObjectPlacementDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.ObjectPlacementDefaults));
                    }
                    else
                    {
                        item.ObjectPlacementDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.XALG) ?? true))
            {
                if(rhs.XALG is {} XALGrhs)
                {
                    item.XALG = XALGrhs.ToArray();
                }
                else
                {
                    item.XALG = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.PickupSound) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.PickupSound);
                try
                {
                    if(rhs.PickupSound is {} rhsPickupSound)
                    {
                        item.PickupSound = rhsPickupSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.PickupSound));
                    }
                    else
                    {
                        item.PickupSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.DropdownSound) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.DropdownSound);
                try
                {
                    if(rhs.DropdownSound is {} rhsDropdownSound)
                    {
                        item.DropdownSound = rhsDropdownSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.DropdownSound));
                    }
                    else
                    {
                        item.DropdownSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.CraftingSound) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.CraftingSound);
                try
                {
                    if(rhs.CraftingSound is {} rhsCraftingSound)
                    {
                        item.CraftingSound = rhsCraftingSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.CraftingSound));
                    }
                    else
                    {
                        item.CraftingSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Resources) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Resources);
                try
                {
                    if ((rhs.Resources != null))
                    {
                        item.Resources = 
                            rhs.Resources
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ItemResource>();
                    }
                    else
                    {
                        item.Resources = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ComponentDisplayIndices) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.ComponentDisplayIndices);
                try
                {
                    if ((rhs.ComponentDisplayIndices != null))
                    {
                        item.ComponentDisplayIndices = 
                            rhs.ComponentDisplayIndices
                            .ToExtendedList<Byte>();
                    }
                    else
                    {
                        item.ComponentDisplayIndices = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Addiction) ?? true))
            {
                item.Addiction.SetTo(rhs.Addiction.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.AddictionChance) ?? true))
            {
                item.AddictionChance = rhs.AddictionChance;
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ConsumeSound) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.ConsumeSound);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.ConsumeSound) ?? true))
                    {
                        item.ConsumeSound = rhs.ConsumeSound.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Ingestible_FieldIndex.ConsumeSound),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.AddictionName) ?? true))
            {
                item.AddictionName = rhs.AddictionName?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Ingestible_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Ingestible_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IIngestible item,
            IIngestibleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIngestibleInternal)item,
                rhs: (IIngestibleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIngestible)item,
                rhs: (IIngestibleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIngestibleInternal)item,
                rhs: (IIngestibleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIngestible)item,
                rhs: (IIngestibleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Ingestible DeepCopy(
            IIngestibleGetter item,
            Ingestible.TranslationMask? copyMask = null)
        {
            Ingestible ret = (Ingestible)((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).GetNew();
            ((IngestibleSetterTranslationCommon)((IIngestibleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Ingestible DeepCopy(
            IIngestibleGetter item,
            out Ingestible.ErrorMask errorMask,
            Ingestible.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Ingestible ret = (Ingestible)((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).GetNew();
            ((IngestibleSetterTranslationCommon)((IIngestibleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Ingestible.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Ingestible DeepCopy(
            IIngestibleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Ingestible ret = (Ingestible)((IngestibleCommon)((IIngestibleGetter)item).CommonInstance()!).GetNew();
            ((IngestibleSetterTranslationCommon)((IIngestibleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Ingestible
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Ingestible_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Ingestible_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IngestibleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IngestibleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IngestibleSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class IngestibleBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly IngestibleBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IIngestibleGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ((ObjectPlacementDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPlacementDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPlacementDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.PickupSound is {} PickupSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)PickupSoundItem).BinaryWriteTranslator).Write(
                        item: PickupSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.DropdownSound is {} DropdownSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PDSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)DropdownSoundItem).BinaryWriteTranslator).Write(
                        item: DropdownSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.CraftingSound is {} CraftingSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.CUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)CraftingSoundItem).BinaryWriteTranslator).Write(
                        item: CraftingSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IItemResourceGetter>.Instance.Write(
                writer: writer,
                items: item.Resources,
                recordType: translationParams.ConvertToCustom(RecordTypes.CVPA),
                transl: (MutagenWriter subWriter, IItemResourceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ItemResourceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.ComponentDisplayIndices,
                recordType: translationParams.ConvertToCustom(RecordTypes.CDIX),
                transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Weight,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ENIT)))
            {
                writer.Write(item.Value);
                EnumBinaryTranslation<Ingestible.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Addiction);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddictionChance);
                var ConsumeSoundItem = item.ConsumeSound;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)ConsumeSoundItem).BinaryWriteTranslator).Write(
                    item: ConsumeSoundItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AddictionName,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IIngestibleGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ALCH,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IIngestibleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIngestibleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIngestibleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class IngestibleBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly IngestibleBinaryCreateTranslation Instance = new IngestibleBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ALCH;
        public static ParseResult FillBinaryRecordTypes(
            IIngestibleInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Ingestible_FieldIndex.ODTY;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPlacementDefaults = Mutagen.Bethesda.Starfield.ObjectPlacementDefaults.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.Transforms;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Ingestible_FieldIndex.Components;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Ingestible_FieldIndex.XALG;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Ingestible_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Ingestible_FieldIndex.Keywords;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Ingestible_FieldIndex.Model;
                }
                case RecordTypeInts.PUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.PickupSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DropdownSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.CUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.CraftingSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Ingestible_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Ingestible_FieldIndex.Description;
                }
                case RecordTypeInts.CVPA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Resources = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ItemResource>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ItemResource.TryCreateFromBinary)
                        .CastExtendedList<ItemResource>();
                    return (int)Ingestible_FieldIndex.Resources;
                }
                case RecordTypeInts.CDIX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ComponentDisplayIndices = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Byte>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        .CastExtendedList<Byte>();
                    return (int)Ingestible_FieldIndex.ComponentDisplayIndices;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Ingestible_FieldIndex.Weight;
                }
                case RecordTypeInts.ENIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Value = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<Ingestible.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.Addiction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.AddictionChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.ConsumeSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    return (int)Ingestible_FieldIndex.ConsumeSound;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddictionName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Ingestible_FieldIndex.AddictionName;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.MAGF:
                case RecordTypeInts.EFIF:
                case RecordTypeInts.MUID:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Effect_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Effect.TryCreateFromBinary));
                    return (int)Ingestible_FieldIndex.Effects;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class IngestibleBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class IngestibleBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IIngestibleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Ingestible_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Ingestible_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IngestibleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IngestibleSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IngestibleCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => IngestibleCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IngestibleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IngestibleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IIngestible);

        public Ingestible.MajorFlag MajorFlags => (Ingestible.MajorFlag)this.MajorRecordFlagsRaw;

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ObjectPlacementDefaults
        private RangeInt32? _ObjectPlacementDefaultsLocation;
        public IObjectPlacementDefaultsGetter? ObjectPlacementDefaults => _ObjectPlacementDefaultsLocation.HasValue ? ObjectPlacementDefaultsBinaryOverlay.ObjectPlacementDefaultsFactory(_recordData.Slice(_ObjectPlacementDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region XALG
        private int? _XALGLocation;
        public ReadOnlyMemorySlice<Byte>? XALG => _XALGLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IModelGetter? Model { get; private set; }
        public ISoundReferenceGetter? PickupSound { get; private set; }
        public ISoundReferenceGetter? DropdownSound { get; private set; }
        public ISoundReferenceGetter? CraftingSound { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IItemResourceGetter>? Resources { get; private set; }
        public IReadOnlyList<Byte>? ComponentDisplayIndices { get; private set; }
        #region Weight
        private int? _WeightLocation;
        public Single Weight => _WeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WeightLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        private RangeInt32? _ENITLocation;
        #region Value
        private int _ValueLocation => _ENITLocation!.Value.Min;
        private bool _Value_IsSet => _ENITLocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ValueLocation, 4)) : default(UInt32);
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation!.Value.Min + 0x4;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public Ingestible.Flag Flags => _Flags_IsSet ? (Ingestible.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Addiction
        private int _AddictionLocation => _ENITLocation!.Value.Min + 0x8;
        private bool _Addiction_IsSet => _ENITLocation.HasValue;
        public IFormLinkGetter<ISpellGetter> Addiction => _Addiction_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(_package, _recordData.Span.Slice(_AddictionLocation, 0x4), isSet: _Addiction_IsSet) : FormLink<ISpellGetter>.Null;
        #endregion
        #region AddictionChance
        private int _AddictionChanceLocation => _ENITLocation!.Value.Min + 0xC;
        private bool _AddictionChance_IsSet => _ENITLocation.HasValue;
        public Single AddictionChance => _AddictionChance_IsSet ? _recordData.Slice(_AddictionChanceLocation, 4).Float() : default(Single);
        #endregion
        #region ConsumeSound
        private int _ConsumeSoundLocation => _ENITLocation!.Value.Min + 0x10;
        private bool _ConsumeSound_IsSet => _ENITLocation.HasValue;
        private ISoundReferenceGetter? _ConsumeSound => _ConsumeSound_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_ConsumeSoundLocation), _package) : default;
        public ISoundReferenceGetter ConsumeSound => _ConsumeSound ?? new SoundReference();
        #endregion
        #region AddictionName
        private int? _AddictionNameLocation;
        public ITranslatedStringGetter? AddictionName => _AddictionNameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AddictionNameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = Array.Empty<IEffectGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IngestibleBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IIngestibleGetter IngestibleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new IngestibleBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IIngestibleGetter IngestibleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return IngestibleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Ingestible_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.ODTY;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPlacementDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Ingestible_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Ingestible_FieldIndex.Transforms;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Ingestible_FieldIndex.Components;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.XALG;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Ingestible_FieldIndex.Keywords;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Ingestible_FieldIndex.Model;
                }
                case RecordTypeInts.PUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.PickupSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Ingestible_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.DropdownSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Ingestible_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.CUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.CraftingSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Ingestible_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.Description;
                }
                case RecordTypeInts.CVPA:
                {
                    this.Resources = BinaryOverlayList.FactoryByStartIndexWithTrigger<IItemResourceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ItemResourceBinaryOverlay.ItemResourceFactory(s, p));
                    return (int)Ingestible_FieldIndex.Resources;
                }
                case RecordTypeInts.CDIX:
                {
                    this.ComponentDisplayIndices = BinaryOverlayList.FactoryByStartIndexWithTrigger<Byte>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 1,
                        getter: (s, p) => s[0]);
                    return (int)Ingestible_FieldIndex.ComponentDisplayIndices;
                }
                case RecordTypeInts.DATA:
                {
                    _WeightLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.Weight;
                }
                case RecordTypeInts.ENIT:
                {
                    _ENITLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Ingestible_FieldIndex.ConsumeSound;
                }
                case RecordTypeInts.DNAM:
                {
                    _AddictionNameLocation = (stream.Position - offset);
                    return (int)Ingestible_FieldIndex.AddictionName;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.MAGF:
                case RecordTypeInts.EFIF:
                case RecordTypeInts.MUID:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Effect_Registration.TriggerSpecs,
                        factory: EffectBinaryOverlay.EffectFactory);
                    return (int)Ingestible_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IngestibleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Ingestible>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIngestibleGetter rhs) return false;
            return ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIngestibleGetter? obj)
        {
            return ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IngestibleCommon)((IIngestibleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

