/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ObjectEffect :
        StarfieldMajorRecord,
        IEquatable<IObjectEffectGetter>,
        ILoquiObjectSetter<ObjectEffect>,
        IObjectEffectInternal
    {
        #region Ctor
        protected ObjectEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectEffectGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IObjectEffectGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region MAGF
        public Int32? MAGF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IObjectEffectGetter.MAGF => this.MAGF;
        #endregion
        #region MUID
        public Int32? MUID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IObjectEffectGetter.MUID => this.MUID;
        #endregion
        #region UnknownENIT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _UnknownENIT = new byte[27];
        public MemorySlice<Byte> UnknownENIT
        {
            get => _UnknownENIT;
            set => this._UnknownENIT = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IObjectEffectGetter.UnknownENIT => this.UnknownENIT;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            init => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IObjectEffectGetter.Effects => _Effects;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.Name = initialValue;
                this.MAGF = initialValue;
                this.MUID = initialValue;
                this.UnknownENIT = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem Name,
                TItem MAGF,
                TItem MUID,
                TItem UnknownENIT,
                TItem Effects)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.Name = Name;
                this.MAGF = MAGF;
                this.MUID = MUID;
                this.UnknownENIT = UnknownENIT;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public TItem Name;
            public TItem MAGF;
            public TItem MUID;
            public TItem UnknownENIT;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.MAGF, rhs.MAGF)) return false;
                if (!object.Equals(this.MUID, rhs.MUID)) return false;
                if (!object.Equals(this.UnknownENIT, rhs.UnknownENIT)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.Name);
                hash.Add(this.MAGF);
                hash.Add(this.MUID);
                hash.Add(this.UnknownENIT);
                hash.Add(this.Effects);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.MAGF)) return false;
                if (!eval(this.MUID)) return false;
                if (!eval(this.UnknownENIT)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.MAGF)) return true;
                if (eval(this.MUID)) return true;
                if (eval(this.UnknownENIT)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.Name = eval(this.Name);
                obj.MAGF = eval(this.MAGF);
                obj.MUID = eval(this.MUID);
                obj.UnknownENIT = eval(this.UnknownENIT);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific)
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ObjectEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ObjectEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.MAGF ?? true)
                    {
                        sb.AppendItem(MAGF, "MAGF");
                    }
                    if (printMask?.MUID ?? true)
                    {
                        sb.AppendItem(MUID, "MUID");
                    }
                    if (printMask?.UnknownENIT ?? true)
                    {
                        sb.AppendItem(UnknownENIT, "UnknownENIT");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects is {} EffectsItem)
                    {
                        sb.AppendLine("Effects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public Exception? Name;
            public Exception? MAGF;
            public Exception? MUID;
            public Exception? UnknownENIT;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case ObjectEffect_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case ObjectEffect_FieldIndex.Name:
                        return Name;
                    case ObjectEffect_FieldIndex.MAGF:
                        return MAGF;
                    case ObjectEffect_FieldIndex.MUID:
                        return MUID;
                    case ObjectEffect_FieldIndex.UnknownENIT:
                        return UnknownENIT;
                    case ObjectEffect_FieldIndex.Effects:
                        return Effects;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectEffect_FieldIndex.MAGF:
                        this.MAGF = ex;
                        break;
                    case ObjectEffect_FieldIndex.MUID:
                        this.MUID = ex;
                        break;
                    case ObjectEffect_FieldIndex.UnknownENIT:
                        this.UnknownENIT = ex;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case ObjectEffect_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.MAGF:
                        this.MAGF = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.MUID:
                        this.MUID = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.UnknownENIT:
                        this.UnknownENIT = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (Name != null) return true;
                if (MAGF != null) return true;
                if (MUID != null) return true;
                if (UnknownENIT != null) return true;
                if (Effects != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(MAGF, "MAGF");
                }
                {
                    sb.AppendItem(MUID, "MUID");
                }
                {
                    sb.AppendItem(UnknownENIT, "UnknownENIT");
                }
                if (Effects is {} EffectsItem)
                {
                    sb.AppendLine("Effects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.MAGF = this.MAGF.Combine(rhs.MAGF);
                ret.MUID = this.MUID.Combine(rhs.MUID);
                ret.UnknownENIT = this.UnknownENIT.Combine(rhs.UnknownENIT);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), Noggog.ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public bool Name;
            public bool MAGF;
            public bool MUID;
            public bool UnknownENIT;
            public Effect.TranslationMask? Effects;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.Name = defaultOn;
                this.MAGF = defaultOn;
                this.MUID = defaultOn;
                this.UnknownENIT = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((Name, null));
                ret.Add((MAGF, null));
                ret.Add((MUID, null));
                ret.Add((UnknownENIT, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ObjectEffect_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectEffectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectSetterCommon.Instance.RemapLinks(this, mapping);
        public ObjectEffect(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ObjectEffect(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ObjectEffect(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ObjectEffect(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ObjectEffect(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectEffect>.ToString(this);
        }

        protected override Type LinkType => typeof(IObjectEffect);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectEffectGetter rhs) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ObjectEffect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectEffect();
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectEffect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ObjectEffect GetNew()
        {
            return new ObjectEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectEffect :
        IBaseObject,
        IEffectRecord,
        IFormLinkContainer,
        IHasEffects,
        ILoquiObjectSetter<IObjectEffectInternal>,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectEffectGetter,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Int32? MAGF { get; set; }
        new Int32? MUID { get; set; }
        new MemorySlice<Byte> UnknownENIT { get; set; }
        new ExtendedList<Effect> Effects { get; }
    }

    public partial interface IObjectEffectInternal :
        IStarfieldMajorRecordInternal,
        IObjectEffect,
        IObjectEffectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.ENCH)]
    public partial interface IObjectEffectGetter :
        IStarfieldMajorRecordGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IEffectRecordGetter,
        IFormLinkContainerGetter,
        IHasEffectsGetter,
        ILoquiObject<IObjectEffectGetter>,
        IMapsToGetter<IObjectEffectGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Int32? MAGF { get; }
        Int32? MUID { get; }
        ReadOnlyMemorySlice<Byte> UnknownENIT { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectEffectMixIn
    {
        public static void Clear(this IObjectEffectInternal item)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectEffect.Mask<bool> GetEqualsMask(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IObjectEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.TranslationMask? equalsMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ObjectEffect Duplicate(
            this IObjectEffectGetter item,
            FormKey formKey,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ObjectEffect Duplicate(
            this IObjectEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ObjectEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        DirtinessScale = 8,
        Name = 9,
        MAGF = 10,
        MUID = 11,
        UnknownENIT = 12,
        Effects = 13,
    }
    #endregion

    #region Registration
    internal partial class ObjectEffect_Registration : ILoquiRegistration
    {
        public static readonly ObjectEffect_Registration Instance = new ObjectEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(ObjectEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectEffect.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectEffect);

        public static readonly Type GetterType = typeof(IObjectEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectEffect);

        public static readonly Type? InternalSetterType = typeof(IObjectEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ObjectEffect";

        public const string Name = "ObjectEffect";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ENCH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ENCH);
            var all = RecordCollection.Factory(
                RecordTypes.ENCH,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.FULL,
                RecordTypes.MAGF,
                RecordTypes.MUID,
                RecordTypes.ENIT,
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.MNAM,
                RecordTypes.ANAM,
                RecordTypes.ZNAM,
                RecordTypes.EFIF,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ObjectEffectSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ObjectEffectSetterCommon Instance = new ObjectEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectEffectInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.Name = default;
            item.MAGF = default;
            item.MUID = default;
            item.UnknownENIT = new byte[27];
            item.Effects.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IObjectEffectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ObjectEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ObjectEffectCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ObjectEffectCommon Instance = new ObjectEffectCommon();

        public ObjectEffect.Mask<bool> GetEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectEffect.Mask<bool>(false);
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.MAGF = item.MAGF == rhs.MAGF;
            ret.MUID = item.MUID == rhs.MUID;
            ret.UnknownENIT = MemoryExtensions.SequenceEqual(item.UnknownENIT.Span, rhs.UnknownENIT.Span);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectEffectGetter item,
            StructuredStringBuilder sb,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.MAGF ?? true)
                && item.MAGF is {} MAGFItem)
            {
                sb.AppendItem(MAGFItem, "MAGF");
            }
            if ((printMask?.MUID ?? true)
                && item.MUID is {} MUIDItem)
            {
                sb.AppendItem(MUIDItem, "MUID");
            }
            if (printMask?.UnknownENIT ?? true)
            {
                sb.AppendLine($"UnknownENIT => {SpanExt.ToHexString(item.UnknownENIT)}");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                sb.AppendLine("Effects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Effects)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static ObjectEffect_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ObjectEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ObjectEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectEffectGetter? lhs,
            IObjectEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.MAGF) ?? true))
            {
                if (lhs.MAGF != rhs.MAGF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.MUID) ?? true))
            {
                if (lhs.MUID != rhs.MUID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.UnknownENIT) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.UnknownENIT.Span, rhs.UnknownENIT.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects, (l, r) => ((EffectCommon)((IEffectGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Effects)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IObjectEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.MAGF is {} MAGFitem)
            {
                hash.Add(MAGFitem);
            }
            if (item.MUID is {} MUIDitem)
            {
                hash.Add(MUIDitem);
            }
            hash.Add(item.UnknownENIT);
            hash.Add(item.Effects);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ObjectEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectEffectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Effects.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ObjectEffect Duplicate(
            IObjectEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ObjectEffect(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ObjectEffectSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ObjectEffectSetterTranslationCommon Instance = new ObjectEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectEffectInternal item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.MAGF) ?? true))
            {
                item.MAGF = rhs.MAGF;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.MUID) ?? true))
            {
                item.MUID = rhs.MUID;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.UnknownENIT) ?? true))
            {
                item.UnknownENIT = rhs.UnknownENIT.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ObjectEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectEffectBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ObjectEffectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IObjectEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MAGF,
                header: translationParams.ConvertToCustom(RecordTypes.MAGF));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MUID,
                header: translationParams.ConvertToCustom(RecordTypes.MUID));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ENIT)))
            {
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownENIT);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IObjectEffectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ENCH,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectEffectBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ObjectEffectBinaryCreateTranslation Instance = new ObjectEffectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ENCH;
        public static ParseResult FillBinaryRecordTypes(
            IObjectEffectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)ObjectEffect_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.MAGF:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.Name)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.MAGF = frame.ReadInt32();
                        return new ParseResult((int)ObjectEffect_FieldIndex.MAGF, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.UnknownENIT)
                    {
                        item.Effects.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: Effect_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: Effect.TryCreateFromBinary));
                        return new ParseResult((int)ObjectEffect_FieldIndex.Effects, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.MAGF = frame.ReadInt32();
                                return new ParseResult((int)ObjectEffect_FieldIndex.MAGF, nextRecordType);
                            case 1:
                                item.Effects.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: Effect_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: Effect.TryCreateFromBinary));
                                return new ParseResult((int)ObjectEffect_FieldIndex.Effects, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MUID:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.MAGF)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.MUID = frame.ReadInt32();
                        return new ParseResult((int)ObjectEffect_FieldIndex.MUID, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.UnknownENIT)
                    {
                        item.Effects.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: Effect_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: Effect.TryCreateFromBinary));
                        return new ParseResult((int)ObjectEffect_FieldIndex.Effects, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.MUID = frame.ReadInt32();
                                return new ParseResult((int)ObjectEffect_FieldIndex.MUID, nextRecordType);
                            case 1:
                                item.Effects.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: Effect_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: Effect.TryCreateFromBinary));
                                return new ParseResult((int)ObjectEffect_FieldIndex.Effects, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ENIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.UnknownENIT = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(27));
                    return (int)ObjectEffect_FieldIndex.UnknownENIT;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.EFIF:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Effect_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Effect.TryCreateFromBinary));
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ObjectEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ObjectEffectBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IObjectEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectEffectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IObjectEffect);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region MAGF
        private int? _MAGFLocation;
        public Int32? MAGF => _MAGFLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MAGFLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region MUID
        private int? _MUIDLocation;
        public Int32? MUID => _MUIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MUIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        private RangeInt32? _ENITLocation;
        #region UnknownENIT
        private int _UnknownENITLocation => _ENITLocation!.Value.Min;
        private bool _UnknownENIT_IsSet => _ENITLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> UnknownENIT => _UnknownENIT_IsSet ? _recordData.Span.Slice(_UnknownENITLocation, 27).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectEffectGetter ObjectEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ObjectEffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IObjectEffectGetter ObjectEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)ObjectEffect_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.MAGF:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.Name)
                    {
                        _MAGFLocation = (stream.Position - offset);
                        return new ParseResult((int)ObjectEffect_FieldIndex.MAGF, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.UnknownENIT)
                    {
                        this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: Effect_Registration.TriggerSpecs,
                            factory: EffectBinaryOverlay.EffectFactory);
                        return new ParseResult((int)ObjectEffect_FieldIndex.Effects, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _MAGFLocation = (stream.Position - offset);
                                return new ParseResult((int)ObjectEffect_FieldIndex.MAGF, type);
                            }
                            case 1:
                            {
                                this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: Effect_Registration.TriggerSpecs,
                                    factory: EffectBinaryOverlay.EffectFactory);
                                return new ParseResult((int)ObjectEffect_FieldIndex.Effects, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MUID:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.MAGF)
                    {
                        _MUIDLocation = (stream.Position - offset);
                        return new ParseResult((int)ObjectEffect_FieldIndex.MUID, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ObjectEffect_FieldIndex.UnknownENIT)
                    {
                        this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: Effect_Registration.TriggerSpecs,
                            factory: EffectBinaryOverlay.EffectFactory);
                        return new ParseResult((int)ObjectEffect_FieldIndex.Effects, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _MUIDLocation = (stream.Position - offset);
                                return new ParseResult((int)ObjectEffect_FieldIndex.MUID, type);
                            }
                            case 1:
                            {
                                this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: Effect_Registration.TriggerSpecs,
                                    factory: EffectBinaryOverlay.EffectFactory);
                                return new ParseResult((int)ObjectEffect_FieldIndex.Effects, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ENIT:
                {
                    _ENITLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ObjectEffect_FieldIndex.UnknownENIT;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.EFIF:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Effect_Registration.TriggerSpecs,
                        factory: EffectBinaryOverlay.EffectFactory);
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectEffect>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectEffectGetter rhs) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

