/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DialogResponse :
        IDialogResponse,
        IEquatable<IDialogResponseGetter>,
        ILoquiObjectSetter<DialogResponse>
    {
        #region Ctor
        public DialogResponse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        private readonly IFormLink<IKeywordGetter> _Emotion = new FormLink<IKeywordGetter>();
        public IFormLink<IKeywordGetter> Emotion
        {
            get => _Emotion;
            set => _Emotion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IKeywordGetter> IDialogResponseGetter.Emotion => this.Emotion;
        #endregion
        #region WEMFile
        public UInt32 WEMFile { get; set; } = default(UInt32);
        #endregion
        #region EmotionOut
        public Single EmotionOut { get; set; } = default(Single);
        #endregion
        #region TROTs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponseTROT> _TROTs = new ExtendedList<DialogResponseTROT>();
        public ExtendedList<DialogResponseTROT> TROTs
        {
            get => this._TROTs;
            init => this._TROTs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseTROTGetter> IDialogResponseGetter.TROTs => _TROTs;
        #endregion

        #endregion
        #region ResponseText
        public TranslatedString ResponseText { get; set; } = string.Empty;
        ITranslatedStringGetter IDialogResponseGetter.ResponseText => this.ResponseText;
        #endregion
        #region ScriptNotes
        public String ScriptNotes { get; set; } = string.Empty;
        #endregion
        #region Edits
        public String Edits { get; set; } = string.Empty;
        #endregion
        #region AlternateLipText
        public String AlternateLipText { get; set; } = string.Empty;
        #endregion
        #region TextHash
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextHash;
        public MemorySlice<Byte>? TextHash
        {
            get => this._TextHash;
            set => this._TextHash = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.TextHash => this.TextHash;
        #endregion
        #region Animation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Animation? _Animation;
        public Animation? Animation
        {
            get => _Animation;
            set => _Animation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAnimationGetter? IDialogResponseGetter.Animation => this.Animation;
        #endregion
        #region HeadTracking
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeadTracking? _HeadTracking;
        public HeadTracking? HeadTracking
        {
            get => _HeadTracking;
            set => _HeadTracking = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHeadTrackingGetter? IDialogResponseGetter.HeadTracking => this.HeadTracking;
        #endregion
        #region RVSH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _RVSH;
        public SoundReference? RVSH
        {
            get => _RVSH;
            set => _RVSH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IDialogResponseGetter.RVSH => this.RVSH;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.WEMFile = initialValue;
                this.EmotionOut = initialValue;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.ResponseText = initialValue;
                this.ScriptNotes = initialValue;
                this.Edits = initialValue;
                this.AlternateLipText = initialValue;
                this.TextHash = initialValue;
                this.Animation = new MaskItem<TItem, Animation.Mask<TItem>?>(initialValue, new Animation.Mask<TItem>(initialValue));
                this.HeadTracking = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(initialValue, new HeadTracking.Mask<TItem>(initialValue));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Emotion,
                TItem WEMFile,
                TItem EmotionOut,
                TItem TROTs,
                TItem ResponseText,
                TItem ScriptNotes,
                TItem Edits,
                TItem AlternateLipText,
                TItem TextHash,
                TItem Animation,
                TItem HeadTracking,
                TItem RVSH)
            {
                this.Emotion = Emotion;
                this.WEMFile = WEMFile;
                this.EmotionOut = EmotionOut;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(TROTs, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.ResponseText = ResponseText;
                this.ScriptNotes = ScriptNotes;
                this.Edits = Edits;
                this.AlternateLipText = AlternateLipText;
                this.TextHash = TextHash;
                this.Animation = new MaskItem<TItem, Animation.Mask<TItem>?>(Animation, new Animation.Mask<TItem>(Animation));
                this.HeadTracking = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(HeadTracking, new HeadTracking.Mask<TItem>(HeadTracking));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(RVSH, new SoundReference.Mask<TItem>(RVSH));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem WEMFile;
            public TItem EmotionOut;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>? TROTs;
            public TItem ResponseText;
            public TItem ScriptNotes;
            public TItem Edits;
            public TItem AlternateLipText;
            public TItem TextHash;
            public MaskItem<TItem, Animation.Mask<TItem>?>? Animation { get; set; }
            public MaskItem<TItem, HeadTracking.Mask<TItem>?>? HeadTracking { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? RVSH { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.WEMFile, rhs.WEMFile)) return false;
                if (!object.Equals(this.EmotionOut, rhs.EmotionOut)) return false;
                if (!object.Equals(this.TROTs, rhs.TROTs)) return false;
                if (!object.Equals(this.ResponseText, rhs.ResponseText)) return false;
                if (!object.Equals(this.ScriptNotes, rhs.ScriptNotes)) return false;
                if (!object.Equals(this.Edits, rhs.Edits)) return false;
                if (!object.Equals(this.AlternateLipText, rhs.AlternateLipText)) return false;
                if (!object.Equals(this.TextHash, rhs.TextHash)) return false;
                if (!object.Equals(this.Animation, rhs.Animation)) return false;
                if (!object.Equals(this.HeadTracking, rhs.HeadTracking)) return false;
                if (!object.Equals(this.RVSH, rhs.RVSH)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.WEMFile);
                hash.Add(this.EmotionOut);
                hash.Add(this.TROTs);
                hash.Add(this.ResponseText);
                hash.Add(this.ScriptNotes);
                hash.Add(this.Edits);
                hash.Add(this.AlternateLipText);
                hash.Add(this.TextHash);
                hash.Add(this.Animation);
                hash.Add(this.HeadTracking);
                hash.Add(this.RVSH);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.WEMFile)) return false;
                if (!eval(this.EmotionOut)) return false;
                if (this.TROTs != null)
                {
                    if (!eval(this.TROTs.Overall)) return false;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ResponseText)) return false;
                if (!eval(this.ScriptNotes)) return false;
                if (!eval(this.Edits)) return false;
                if (!eval(this.AlternateLipText)) return false;
                if (!eval(this.TextHash)) return false;
                if (Animation != null)
                {
                    if (!eval(this.Animation.Overall)) return false;
                    if (this.Animation.Specific != null && !this.Animation.Specific.All(eval)) return false;
                }
                if (HeadTracking != null)
                {
                    if (!eval(this.HeadTracking.Overall)) return false;
                    if (this.HeadTracking.Specific != null && !this.HeadTracking.Specific.All(eval)) return false;
                }
                if (RVSH != null)
                {
                    if (!eval(this.RVSH.Overall)) return false;
                    if (this.RVSH.Specific != null && !this.RVSH.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.WEMFile)) return true;
                if (eval(this.EmotionOut)) return true;
                if (this.TROTs != null)
                {
                    if (eval(this.TROTs.Overall)) return true;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ResponseText)) return true;
                if (eval(this.ScriptNotes)) return true;
                if (eval(this.Edits)) return true;
                if (eval(this.AlternateLipText)) return true;
                if (eval(this.TextHash)) return true;
                if (Animation != null)
                {
                    if (eval(this.Animation.Overall)) return true;
                    if (this.Animation.Specific != null && this.Animation.Specific.Any(eval)) return true;
                }
                if (HeadTracking != null)
                {
                    if (eval(this.HeadTracking.Overall)) return true;
                    if (this.HeadTracking.Specific != null && this.HeadTracking.Specific.Any(eval)) return true;
                }
                if (RVSH != null)
                {
                    if (eval(this.RVSH.Overall)) return true;
                    if (this.RVSH.Specific != null && this.RVSH.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.WEMFile = eval(this.WEMFile);
                obj.EmotionOut = eval(this.EmotionOut);
                if (TROTs != null)
                {
                    obj.TROTs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>?>(eval(this.TROTs.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>());
                    if (TROTs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>();
                        obj.TROTs.Specific = l;
                        foreach (var item in TROTs.Specific)
                        {
                            MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ResponseText = eval(this.ResponseText);
                obj.ScriptNotes = eval(this.ScriptNotes);
                obj.Edits = eval(this.Edits);
                obj.AlternateLipText = eval(this.AlternateLipText);
                obj.TextHash = eval(this.TextHash);
                obj.Animation = this.Animation == null ? null : new MaskItem<R, Animation.Mask<R>?>(eval(this.Animation.Overall), this.Animation.Specific?.Translate(eval));
                obj.HeadTracking = this.HeadTracking == null ? null : new MaskItem<R, HeadTracking.Mask<R>?>(eval(this.HeadTracking.Overall), this.HeadTracking.Specific?.Translate(eval));
                obj.RVSH = this.RVSH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.RVSH.Overall), this.RVSH.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponse.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponse.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponse.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Emotion ?? true)
                    {
                        sb.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.WEMFile ?? true)
                    {
                        sb.AppendItem(WEMFile, "WEMFile");
                    }
                    if (printMask?.EmotionOut ?? true)
                    {
                        sb.AppendItem(EmotionOut, "EmotionOut");
                    }
                    if ((printMask?.TROTs?.Overall ?? true)
                        && TROTs is {} TROTsItem)
                    {
                        sb.AppendLine("TROTs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TROTsItem.Overall);
                            if (TROTsItem.Specific != null)
                            {
                                foreach (var subItem in TROTsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ResponseText ?? true)
                    {
                        sb.AppendItem(ResponseText, "ResponseText");
                    }
                    if (printMask?.ScriptNotes ?? true)
                    {
                        sb.AppendItem(ScriptNotes, "ScriptNotes");
                    }
                    if (printMask?.Edits ?? true)
                    {
                        sb.AppendItem(Edits, "Edits");
                    }
                    if (printMask?.AlternateLipText ?? true)
                    {
                        sb.AppendItem(AlternateLipText, "AlternateLipText");
                    }
                    if (printMask?.TextHash ?? true)
                    {
                        sb.AppendItem(TextHash, "TextHash");
                    }
                    if (printMask?.Animation?.Overall ?? true)
                    {
                        Animation?.Print(sb);
                    }
                    if (printMask?.HeadTracking?.Overall ?? true)
                    {
                        HeadTracking?.Print(sb);
                    }
                    if (printMask?.RVSH?.Overall ?? true)
                    {
                        RVSH?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? WEMFile;
            public Exception? EmotionOut;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>? TROTs;
            public Exception? ResponseText;
            public Exception? ScriptNotes;
            public Exception? Edits;
            public Exception? AlternateLipText;
            public Exception? TextHash;
            public MaskItem<Exception?, Animation.ErrorMask?>? Animation;
            public MaskItem<Exception?, HeadTracking.ErrorMask?>? HeadTracking;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? RVSH;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponse_FieldIndex.WEMFile:
                        return WEMFile;
                    case DialogResponse_FieldIndex.EmotionOut:
                        return EmotionOut;
                    case DialogResponse_FieldIndex.TROTs:
                        return TROTs;
                    case DialogResponse_FieldIndex.ResponseText:
                        return ResponseText;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        return ScriptNotes;
                    case DialogResponse_FieldIndex.Edits:
                        return Edits;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        return AlternateLipText;
                    case DialogResponse_FieldIndex.TextHash:
                        return TextHash;
                    case DialogResponse_FieldIndex.Animation:
                        return Animation;
                    case DialogResponse_FieldIndex.HeadTracking:
                        return HeadTracking;
                    case DialogResponse_FieldIndex.RVSH:
                        return RVSH;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = ex;
                        break;
                    case DialogResponse_FieldIndex.EmotionOut:
                        this.EmotionOut = ex;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.ResponseText:
                        this.ResponseText = ex;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = ex;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = ex;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = ex;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = ex;
                        break;
                    case DialogResponse_FieldIndex.Animation:
                        this.Animation = new MaskItem<Exception?, Animation.ErrorMask?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.HeadTracking:
                        this.HeadTracking = new MaskItem<Exception?, HeadTracking.ErrorMask?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.EmotionOut:
                        this.EmotionOut = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponse_FieldIndex.ResponseText:
                        this.ResponseText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Animation:
                        this.Animation = (MaskItem<Exception?, Animation.ErrorMask?>?)obj;
                        break;
                    case DialogResponse_FieldIndex.HeadTracking:
                        this.HeadTracking = (MaskItem<Exception?, HeadTracking.ErrorMask?>?)obj;
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (WEMFile != null) return true;
                if (EmotionOut != null) return true;
                if (TROTs != null) return true;
                if (ResponseText != null) return true;
                if (ScriptNotes != null) return true;
                if (Edits != null) return true;
                if (AlternateLipText != null) return true;
                if (TextHash != null) return true;
                if (Animation != null) return true;
                if (HeadTracking != null) return true;
                if (RVSH != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Emotion, "Emotion");
                }
                {
                    sb.AppendItem(WEMFile, "WEMFile");
                }
                {
                    sb.AppendItem(EmotionOut, "EmotionOut");
                }
                if (TROTs is {} TROTsItem)
                {
                    sb.AppendLine("TROTs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TROTsItem.Overall);
                        if (TROTsItem.Specific != null)
                        {
                            foreach (var subItem in TROTsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ResponseText, "ResponseText");
                }
                {
                    sb.AppendItem(ScriptNotes, "ScriptNotes");
                }
                {
                    sb.AppendItem(Edits, "Edits");
                }
                {
                    sb.AppendItem(AlternateLipText, "AlternateLipText");
                }
                {
                    sb.AppendItem(TextHash, "TextHash");
                }
                Animation?.Print(sb);
                HeadTracking?.Print(sb);
                RVSH?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.WEMFile = this.WEMFile.Combine(rhs.WEMFile);
                ret.EmotionOut = this.EmotionOut.Combine(rhs.EmotionOut);
                ret.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TROTs?.Overall, rhs.TROTs?.Overall), Noggog.ExceptionExt.Combine(this.TROTs?.Specific, rhs.TROTs?.Specific));
                ret.ResponseText = this.ResponseText.Combine(rhs.ResponseText);
                ret.ScriptNotes = this.ScriptNotes.Combine(rhs.ScriptNotes);
                ret.Edits = this.Edits.Combine(rhs.Edits);
                ret.AlternateLipText = this.AlternateLipText.Combine(rhs.AlternateLipText);
                ret.TextHash = this.TextHash.Combine(rhs.TextHash);
                ret.Animation = this.Animation.Combine(rhs.Animation, (l, r) => l.Combine(r));
                ret.HeadTracking = this.HeadTracking.Combine(rhs.HeadTracking, (l, r) => l.Combine(r));
                ret.RVSH = this.RVSH.Combine(rhs.RVSH, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Emotion;
            public bool WEMFile;
            public bool EmotionOut;
            public DialogResponseTROT.TranslationMask? TROTs;
            public bool ResponseText;
            public bool ScriptNotes;
            public bool Edits;
            public bool AlternateLipText;
            public bool TextHash;
            public Animation.TranslationMask? Animation;
            public HeadTracking.TranslationMask? HeadTracking;
            public SoundReference.TranslationMask? RVSH;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Emotion = defaultOn;
                this.WEMFile = defaultOn;
                this.EmotionOut = defaultOn;
                this.ResponseText = defaultOn;
                this.ScriptNotes = defaultOn;
                this.Edits = defaultOn;
                this.AlternateLipText = defaultOn;
                this.TextHash = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((WEMFile, null));
                ret.Add((EmotionOut, null));
                ret.Add((TROTs == null ? DefaultOn : !TROTs.GetCrystal().CopyNothing, TROTs?.GetCrystal()));
                ret.Add((ResponseText, null));
                ret.Add((ScriptNotes, null));
                ret.Add((Edits, null));
                ret.Add((AlternateLipText, null));
                ret.Add((TextHash, null));
                ret.Add((Animation != null ? Animation.OnOverall : DefaultOn, Animation?.GetCrystal()));
                ret.Add((HeadTracking != null ? HeadTracking.OnOverall : DefaultOn, HeadTracking?.GetCrystal()));
                ret.Add((RVSH != null ? RVSH.OnOverall : DefaultOn, RVSH?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponse();
            ((DialogResponseSetterCommon)((IDialogResponseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponse item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponse GetNew()
        {
            return new DialogResponse();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponse>
    {
        new IFormLink<IKeywordGetter> Emotion { get; set; }
        new UInt32 WEMFile { get; set; }
        new Single EmotionOut { get; set; }
        new ExtendedList<DialogResponseTROT> TROTs { get; }
        new TranslatedString ResponseText { get; set; }
        new String ScriptNotes { get; set; }
        new String Edits { get; set; }
        new String AlternateLipText { get; set; }
        new MemorySlice<Byte>? TextHash { get; set; }
        new Animation? Animation { get; set; }
        new HeadTracking? HeadTracking { get; set; }
        new SoundReference? RVSH { get; set; }
    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponseGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        IFormLinkGetter<IKeywordGetter> Emotion { get; }
        UInt32 WEMFile { get; }
        Single EmotionOut { get; }
        IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; }
        ITranslatedStringGetter ResponseText { get; }
        String ScriptNotes { get; }
        String Edits { get; }
        String AlternateLipText { get; }
        ReadOnlyMemorySlice<Byte>? TextHash { get; }
        IAnimationGetter? Animation { get; }
        IHeadTrackingGetter? HeadTracking { get; }
        ISoundReferenceGetter? RVSH { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponse item)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponse.Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? equalsMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? copyMask = null)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        WEMFile = 1,
        EmotionOut = 2,
        TROTs = 3,
        ResponseText = 4,
        ScriptNotes = 5,
        Edits = 6,
        AlternateLipText = 7,
        TextHash = 8,
        Animation = 9,
        HeadTracking = 10,
        RVSH = 11,
    }
    #endregion

    #region Registration
    internal partial class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(DialogResponse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRDA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TRDA);
            var all = RecordCollection.Factory(
                RecordTypes.TRDA,
                RecordTypes.TROT,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM9,
                RecordTypes.BNAM,
                RecordTypes.HNAM,
                RecordTypes.RVSH);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponseSetterCommon
    {
        public static readonly DialogResponseSetterCommon Instance = new DialogResponseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponse item)
        {
            ClearPartial();
            item.Emotion.Clear();
            item.WEMFile = default(UInt32);
            item.EmotionOut = default(Single);
            item.TROTs.Clear();
            item.ResponseText.Clear();
            item.ScriptNotes = string.Empty;
            item.Edits = string.Empty;
            item.AlternateLipText = string.Empty;
            item.TextHash = default;
            item.Animation = null;
            item.HeadTracking = null;
            item.RVSH = null;
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponse obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Emotion.Relink(mapping);
            obj.TROTs.RemapLinks(mapping);
            obj.Animation?.RemapLinks(mapping);
            obj.RVSH?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DialogResponseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        public DialogResponse.Mask<bool> GetEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse.Mask<bool>(false);
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Emotion = item.Emotion.Equals(rhs.Emotion);
            ret.WEMFile = item.WEMFile == rhs.WEMFile;
            ret.EmotionOut = item.EmotionOut.EqualsWithin(rhs.EmotionOut);
            ret.TROTs = item.TROTs.CollectionEqualsHelper(
                rhs.TROTs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ResponseText = object.Equals(item.ResponseText, rhs.ResponseText);
            ret.ScriptNotes = string.Equals(item.ScriptNotes, rhs.ScriptNotes);
            ret.Edits = string.Equals(item.Edits, rhs.Edits);
            ret.AlternateLipText = string.Equals(item.AlternateLipText, rhs.AlternateLipText);
            ret.TextHash = MemorySliceExt.SequenceEqual(item.TextHash, rhs.TextHash);
            ret.Animation = EqualsMaskHelper.EqualsHelper(
                item.Animation,
                rhs.Animation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadTracking = EqualsMaskHelper.EqualsHelper(
                item.HeadTracking,
                rhs.HeadTracking,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RVSH = EqualsMaskHelper.EqualsHelper(
                item.RVSH,
                rhs.RVSH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponse =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponse) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                sb.AppendItem(item.Emotion.FormKey, "Emotion");
            }
            if (printMask?.WEMFile ?? true)
            {
                sb.AppendItem(item.WEMFile, "WEMFile");
            }
            if (printMask?.EmotionOut ?? true)
            {
                sb.AppendItem(item.EmotionOut, "EmotionOut");
            }
            if (printMask?.TROTs?.Overall ?? true)
            {
                sb.AppendLine("TROTs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TROTs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ResponseText ?? true)
            {
                sb.AppendItem(item.ResponseText, "ResponseText");
            }
            if (printMask?.ScriptNotes ?? true)
            {
                sb.AppendItem(item.ScriptNotes, "ScriptNotes");
            }
            if (printMask?.Edits ?? true)
            {
                sb.AppendItem(item.Edits, "Edits");
            }
            if (printMask?.AlternateLipText ?? true)
            {
                sb.AppendItem(item.AlternateLipText, "AlternateLipText");
            }
            if ((printMask?.TextHash ?? true)
                && item.TextHash is {} TextHashItem)
            {
                sb.AppendLine($"TextHash => {SpanExt.ToHexString(TextHashItem)}");
            }
            if ((printMask?.Animation?.Overall ?? true)
                && item.Animation is {} AnimationItem)
            {
                AnimationItem?.Print(sb, "Animation");
            }
            if ((printMask?.HeadTracking?.Overall ?? true)
                && item.HeadTracking is {} HeadTrackingItem)
            {
                HeadTrackingItem?.Print(sb, "HeadTracking");
            }
            if ((printMask?.RVSH?.Overall ?? true)
                && item.RVSH is {} RVSHItem)
            {
                RVSHItem?.Print(sb, "RVSH");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseGetter? lhs,
            IDialogResponseGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                if (!lhs.Emotion.Equals(rhs.Emotion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                if (lhs.WEMFile != rhs.WEMFile) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionOut) ?? true))
            {
                if (!lhs.EmotionOut.EqualsWithin(rhs.EmotionOut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                if (!lhs.TROTs.SequenceEqual(rhs.TROTs, (l, r) => ((DialogResponseTROTCommon)((IDialogResponseTROTGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.TROTs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                if (!object.Equals(lhs.ResponseText, rhs.ResponseText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                if (!string.Equals(lhs.ScriptNotes, rhs.ScriptNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                if (!string.Equals(lhs.Edits, rhs.Edits)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                if (!string.Equals(lhs.AlternateLipText, rhs.AlternateLipText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextHash, rhs.TextHash)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Animation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Animation, rhs.Animation, out var lhsAnimation, out var rhsAnimation, out var isAnimationEqual))
                {
                    if (!((AnimationCommon)((IAnimationGetter)lhsAnimation).CommonInstance()!).Equals(lhsAnimation, rhsAnimation, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.Animation))) return false;
                }
                else if (!isAnimationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HeadTracking) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadTracking, rhs.HeadTracking, out var lhsHeadTracking, out var rhsHeadTracking, out var isHeadTrackingEqual))
                {
                    if (!((HeadTrackingCommon)((IHeadTrackingGetter)lhsHeadTracking).CommonInstance()!).Equals(lhsHeadTracking, rhsHeadTracking, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HeadTracking))) return false;
                }
                else if (!isHeadTrackingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RVSH, rhs.RVSH, out var lhsRVSH, out var rhsRVSH, out var isRVSHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsRVSH).CommonInstance()!).Equals(lhsRVSH, rhsRVSH, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH))) return false;
                }
                else if (!isRVSHEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.WEMFile);
            hash.Add(item.EmotionOut);
            hash.Add(item.TROTs);
            hash.Add(item.ResponseText);
            hash.Add(item.ScriptNotes);
            hash.Add(item.Edits);
            hash.Add(item.AlternateLipText);
            if (item.TextHash is {} TextHashItem)
            {
                hash.Add(TextHashItem);
            }
            if (item.Animation is {} Animationitem)
            {
                hash.Add(Animationitem);
            }
            if (item.HeadTracking is {} HeadTrackingitem)
            {
                hash.Add(HeadTrackingitem);
            }
            if (item.RVSH is {} RVSHitem)
            {
                hash.Add(RVSHitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponse.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponseGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Emotion);
            foreach (var item in obj.TROTs.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Animation is {} AnimationItems)
            {
                foreach (var item in AnimationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.RVSH is {} RVSHItems)
            {
                foreach (var item in RVSHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogResponseSetterTranslationCommon
    {
        public static readonly DialogResponseSetterTranslationCommon Instance = new DialogResponseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                item.Emotion.SetTo(rhs.Emotion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                item.WEMFile = rhs.WEMFile;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionOut) ?? true))
            {
                item.EmotionOut = rhs.EmotionOut;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.TROTs);
                try
                {
                    item.TROTs.SetTo(
                        rhs.TROTs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                item.ResponseText = rhs.ResponseText.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                item.ScriptNotes = rhs.ScriptNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                item.Edits = rhs.Edits;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                item.AlternateLipText = rhs.AlternateLipText;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if(rhs.TextHash is {} TextHashrhs)
                {
                    item.TextHash = TextHashrhs.ToArray();
                }
                else
                {
                    item.TextHash = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Animation) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.Animation);
                try
                {
                    if(rhs.Animation is {} rhsAnimation)
                    {
                        item.Animation = rhsAnimation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.Animation));
                    }
                    else
                    {
                        item.Animation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HeadTracking) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.HeadTracking);
                try
                {
                    if(rhs.HeadTracking is {} rhsHeadTracking)
                    {
                        item.HeadTracking = rhsHeadTracking.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HeadTracking));
                    }
                    else
                    {
                        item.HeadTracking = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.RVSH);
                try
                {
                    if(rhs.RVSH is {} rhsRVSH)
                    {
                        item.RVSH = rhsRVSH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH));
                    }
                    else
                    {
                        item.RVSH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DialogResponseBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TRDA)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Emotion);
                writer.Write(item.WEMFile);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EmotionOut);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseTROTGetter>.Instance.Write(
                writer: writer,
                items: item.TROTs,
                transl: (MutagenWriter subWriter, IDialogResponseTROTGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseTROTBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ResponseText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.IL);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptNotes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Edits,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlternateLipText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextHash,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            if (item.Animation is {} AnimationItem)
            {
                ((AnimationBinaryWriteTranslation)((IBinaryItem)AnimationItem).BinaryWriteTranslator).Write(
                    item: AnimationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.HeadTracking is {} HeadTrackingItem)
            {
                ((HeadTrackingBinaryWriteTranslation)((IBinaryItem)HeadTrackingItem).BinaryWriteTranslator).Write(
                    item: HeadTrackingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.RVSH is {} RVSHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.RVSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)RVSHItem).BinaryWriteTranslator).Write(
                        item: RVSHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponseGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponseBinaryCreateTranslation
    {
        public static readonly DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponse item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.EmotionOut, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Emotion.SetTo(
                        FormLinkBinaryTranslation.Instance.Parse(
                            reader: frame,
                            maxIsNone: true));
                    if (dataFrame.Remaining < 4) return null;
                    item.WEMFile = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.EmotionOut = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)DialogResponse_FieldIndex.EmotionOut;
                }
                case RecordTypeInts.TROT:
                {
                    item.TROTs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponseTROT>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponseTROT_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponseTROT.TryCreateFromBinary));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResponseText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.IL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ResponseText;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Edits = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateLipText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextHash = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    item.Animation = Mutagen.Bethesda.Starfield.Animation.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.Animation;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HeadTracking = Mutagen.Bethesda.Starfield.HeadTracking.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HeadTracking;
                }
                case RecordTypeInts.RVSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RVSH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DialogResponseBinaryOverlay :
        PluginBinaryOverlay,
        IDialogResponseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TRDALocation;
        #region Emotion
        private int _EmotionLocation => _TRDALocation!.Value.Min;
        private bool _Emotion_IsSet => _TRDALocation.HasValue;
        public IFormLinkGetter<IKeywordGetter> Emotion => _Emotion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(_package, _recordData.Span.Slice(_EmotionLocation, 0x4), isSet: _Emotion_IsSet, maxIsNull: true) : FormLink<IKeywordGetter>.Null;
        #endregion
        #region WEMFile
        private int _WEMFileLocation => _TRDALocation!.Value.Min + 0x4;
        private bool _WEMFile_IsSet => _TRDALocation.HasValue;
        public UInt32 WEMFile => _WEMFile_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WEMFileLocation, 4)) : default(UInt32);
        #endregion
        #region EmotionOut
        private int _EmotionOutLocation => _TRDALocation!.Value.Min + 0x8;
        private bool _EmotionOut_IsSet => _TRDALocation.HasValue;
        public Single EmotionOut => _EmotionOut_IsSet ? _recordData.Slice(_EmotionOutLocation, 4).Float() : default(Single);
        #endregion
        public IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; private set; } = Array.Empty<IDialogResponseTROTGetter>();
        #region ResponseText
        private int? _ResponseTextLocation;
        public ITranslatedStringGetter ResponseText => _ResponseTextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ResponseTextLocation.Value, _package.MetaData.Constants), StringsSource.IL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        #region ScriptNotes
        private int? _ScriptNotesLocation;
        public String ScriptNotes => _ScriptNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Edits
        private int? _EditsLocation;
        public String Edits => _EditsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EditsLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region AlternateLipText
        private int? _AlternateLipTextLocation;
        public String AlternateLipText => _AlternateLipTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AlternateLipTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TextHash
        private int? _TextHashLocation;
        public ReadOnlyMemorySlice<Byte>? TextHash => _TextHashLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextHashLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IAnimationGetter? Animation { get; private set; }
        public IHeadTrackingGetter? HeadTracking { get; private set; }
        public ISoundReferenceGetter? RVSH { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponseBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponseGetter DialogResponseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponseBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponseGetter DialogResponseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.EmotionOut, translationParams)) return ParseResult.Stop;
                    _TRDALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DialogResponse_FieldIndex.EmotionOut;
                }
                case RecordTypeInts.TROT:
                {
                    this.TROTs = BinaryOverlayList.FactoryByArray<IDialogResponseTROTGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => DialogResponseTROTBinaryOverlay.DialogResponseTROTFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: DialogResponseTROT_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    _ResponseTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ResponseText;
                }
                case RecordTypeInts.NAM2:
                {
                    _ScriptNotesLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    _EditsLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    _AlternateLipTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    _TextHashLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    this.Animation = AnimationBinaryOverlay.AnimationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.Animation;
                }
                case RecordTypeInts.HNAM:
                {
                    this.HeadTracking = HeadTrackingBinaryOverlay.HeadTrackingFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HeadTracking;
                }
                case RecordTypeInts.RVSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RVSH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

