/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DialogResponse :
        IDialogResponse,
        IEquatable<IDialogResponseGetter>,
        ILoquiObjectSetter<DialogResponse>
    {
        #region Ctor
        public DialogResponse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        private readonly IFormLink<IKeywordGetter> _Emotion = new FormLink<IKeywordGetter>();
        public IFormLink<IKeywordGetter> Emotion
        {
            get => _Emotion;
            set => _Emotion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IKeywordGetter> IDialogResponseGetter.Emotion => this.Emotion;
        #endregion
        #region WEMFile
        public UInt32 WEMFile { get; set; } = default(UInt32);
        #endregion
        #region EmotionOut
        public Single EmotionOut { get; set; } = default(Single);
        #endregion
        #region TROTs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponseTROT> _TROTs = new ExtendedList<DialogResponseTROT>();
        public ExtendedList<DialogResponseTROT> TROTs
        {
            get => this._TROTs;
            init => this._TROTs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseTROTGetter> IDialogResponseGetter.TROTs => _TROTs;
        #endregion

        #endregion
        #region ResponseText
        public TranslatedString ResponseText { get; set; } = string.Empty;
        ITranslatedStringGetter IDialogResponseGetter.ResponseText => this.ResponseText;
        #endregion
        #region ScriptNotes
        public String ScriptNotes { get; set; } = string.Empty;
        #endregion
        #region Edits
        public String Edits { get; set; } = string.Empty;
        #endregion
        #region AlternateLipText
        public String AlternateLipText { get; set; } = string.Empty;
        #endregion
        #region TextHash
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextHash;
        public MemorySlice<Byte>? TextHash
        {
            get => this._TextHash;
            set => this._TextHash = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.TextHash => this.TextHash;
        #endregion
        #region NpcAnimation
        private readonly IFormLinkNullable<IIdleAnimationGetter> _NpcAnimation = new FormLinkNullable<IIdleAnimationGetter>();
        public IFormLinkNullable<IIdleAnimationGetter> NpcAnimation
        {
            get => _NpcAnimation;
            set => _NpcAnimation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IIdleAnimationGetter> IDialogResponseGetter.NpcAnimation => this.NpcAnimation;
        #endregion
        #region AnimationSubgraph
        public String? AnimationSubgraph { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogResponseGetter.AnimationSubgraph => this.AnimationSubgraph;
        #endregion
        #region AnimationBodyArchetype
        private readonly IFormLinkNullable<IKeywordGetter> _AnimationBodyArchetype = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> AnimationBodyArchetype
        {
            get => _AnimationBodyArchetype;
            set => _AnimationBodyArchetype.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IDialogResponseGetter.AnimationBodyArchetype => this.AnimationBodyArchetype;
        #endregion
        #region AnimationFaceArchetype
        private readonly IFormLinkNullable<IKeywordGetter> _AnimationFaceArchetype = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> AnimationFaceArchetype
        {
            get => _AnimationFaceArchetype;
            set => _AnimationFaceArchetype.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IDialogResponseGetter.AnimationFaceArchetype => this.AnimationFaceArchetype;
        #endregion
        #region AnimationFlavor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _AnimationFlavor;
        public MemorySlice<Byte>? AnimationFlavor
        {
            get => this._AnimationFlavor;
            set => this._AnimationFlavor = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.AnimationFlavor => this.AnimationFlavor;
        #endregion
        #region UseDialogueAnimation
        public Boolean UseDialogueAnimation { get; set; } = default(Boolean);
        #endregion
        #region UseAnimationBodyArchetype
        public Boolean UseAnimationBodyArchetype { get; set; } = default(Boolean);
        #endregion
        #region AnimationCompleteEndsPhase
        public Boolean AnimationCompleteEndsPhase { get; set; } = default(Boolean);
        #endregion
        #region AnimationOnlyMovement
        public Boolean AnimationOnlyMovement { get; set; } = default(Boolean);
        #endregion
        #region UseFlavorAnimation
        public Boolean UseFlavorAnimation { get; set; } = default(Boolean);
        #endregion
        #region DelayStartTimeAction
        public Single? DelayStartTimeAction { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IDialogResponseGetter.DelayStartTimeAction => this.DelayStartTimeAction;
        #endregion
        #region Action
        private readonly IFormLinkNullable<IActionRecordGetter> _Action = new FormLinkNullable<IActionRecordGetter>();
        public IFormLinkNullable<IActionRecordGetter> Action
        {
            get => _Action;
            set => _Action.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IActionRecordGetter> IDialogResponseGetter.Action => this.Action;
        #endregion
        #region UseActorAnimationAction
        public Boolean UseActorAnimationAction { get; set; } = default(Boolean);
        #endregion
        #region AnimationHoldEvent
        public Boolean AnimationHoldEvent { get; set; } = default(Boolean);
        #endregion
        #region DTGT
        public Int32? DTGT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IDialogResponseGetter.DTGT => this.DTGT;
        #endregion
        #region ACEP
        public Boolean ACEP { get; set; } = default(Boolean);
        #endregion
        #region XNAM
        public Boolean XNAM { get; set; } = default(Boolean);
        #endregion
        #region HeadTracking
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeadTracking? _HeadTracking;
        public HeadTracking? HeadTracking
        {
            get => _HeadTracking;
            set => _HeadTracking = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHeadTrackingGetter? IDialogResponseGetter.HeadTracking => this.HeadTracking;
        #endregion
        #region RVSH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _RVSH;
        public SoundReference? RVSH
        {
            get => _RVSH;
            set => _RVSH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IDialogResponseGetter.RVSH => this.RVSH;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.WEMFile = initialValue;
                this.EmotionOut = initialValue;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.ResponseText = initialValue;
                this.ScriptNotes = initialValue;
                this.Edits = initialValue;
                this.AlternateLipText = initialValue;
                this.TextHash = initialValue;
                this.NpcAnimation = initialValue;
                this.AnimationSubgraph = initialValue;
                this.AnimationBodyArchetype = initialValue;
                this.AnimationFaceArchetype = initialValue;
                this.AnimationFlavor = initialValue;
                this.UseDialogueAnimation = initialValue;
                this.UseAnimationBodyArchetype = initialValue;
                this.AnimationCompleteEndsPhase = initialValue;
                this.AnimationOnlyMovement = initialValue;
                this.UseFlavorAnimation = initialValue;
                this.DelayStartTimeAction = initialValue;
                this.Action = initialValue;
                this.UseActorAnimationAction = initialValue;
                this.AnimationHoldEvent = initialValue;
                this.DTGT = initialValue;
                this.ACEP = initialValue;
                this.XNAM = initialValue;
                this.HeadTracking = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(initialValue, new HeadTracking.Mask<TItem>(initialValue));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Emotion,
                TItem WEMFile,
                TItem EmotionOut,
                TItem TROTs,
                TItem ResponseText,
                TItem ScriptNotes,
                TItem Edits,
                TItem AlternateLipText,
                TItem TextHash,
                TItem NpcAnimation,
                TItem AnimationSubgraph,
                TItem AnimationBodyArchetype,
                TItem AnimationFaceArchetype,
                TItem AnimationFlavor,
                TItem UseDialogueAnimation,
                TItem UseAnimationBodyArchetype,
                TItem AnimationCompleteEndsPhase,
                TItem AnimationOnlyMovement,
                TItem UseFlavorAnimation,
                TItem DelayStartTimeAction,
                TItem Action,
                TItem UseActorAnimationAction,
                TItem AnimationHoldEvent,
                TItem DTGT,
                TItem ACEP,
                TItem XNAM,
                TItem HeadTracking,
                TItem RVSH)
            {
                this.Emotion = Emotion;
                this.WEMFile = WEMFile;
                this.EmotionOut = EmotionOut;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(TROTs, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.ResponseText = ResponseText;
                this.ScriptNotes = ScriptNotes;
                this.Edits = Edits;
                this.AlternateLipText = AlternateLipText;
                this.TextHash = TextHash;
                this.NpcAnimation = NpcAnimation;
                this.AnimationSubgraph = AnimationSubgraph;
                this.AnimationBodyArchetype = AnimationBodyArchetype;
                this.AnimationFaceArchetype = AnimationFaceArchetype;
                this.AnimationFlavor = AnimationFlavor;
                this.UseDialogueAnimation = UseDialogueAnimation;
                this.UseAnimationBodyArchetype = UseAnimationBodyArchetype;
                this.AnimationCompleteEndsPhase = AnimationCompleteEndsPhase;
                this.AnimationOnlyMovement = AnimationOnlyMovement;
                this.UseFlavorAnimation = UseFlavorAnimation;
                this.DelayStartTimeAction = DelayStartTimeAction;
                this.Action = Action;
                this.UseActorAnimationAction = UseActorAnimationAction;
                this.AnimationHoldEvent = AnimationHoldEvent;
                this.DTGT = DTGT;
                this.ACEP = ACEP;
                this.XNAM = XNAM;
                this.HeadTracking = new MaskItem<TItem, HeadTracking.Mask<TItem>?>(HeadTracking, new HeadTracking.Mask<TItem>(HeadTracking));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(RVSH, new SoundReference.Mask<TItem>(RVSH));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem WEMFile;
            public TItem EmotionOut;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>? TROTs;
            public TItem ResponseText;
            public TItem ScriptNotes;
            public TItem Edits;
            public TItem AlternateLipText;
            public TItem TextHash;
            public TItem NpcAnimation;
            public TItem AnimationSubgraph;
            public TItem AnimationBodyArchetype;
            public TItem AnimationFaceArchetype;
            public TItem AnimationFlavor;
            public TItem UseDialogueAnimation;
            public TItem UseAnimationBodyArchetype;
            public TItem AnimationCompleteEndsPhase;
            public TItem AnimationOnlyMovement;
            public TItem UseFlavorAnimation;
            public TItem DelayStartTimeAction;
            public TItem Action;
            public TItem UseActorAnimationAction;
            public TItem AnimationHoldEvent;
            public TItem DTGT;
            public TItem ACEP;
            public TItem XNAM;
            public MaskItem<TItem, HeadTracking.Mask<TItem>?>? HeadTracking { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? RVSH { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.WEMFile, rhs.WEMFile)) return false;
                if (!object.Equals(this.EmotionOut, rhs.EmotionOut)) return false;
                if (!object.Equals(this.TROTs, rhs.TROTs)) return false;
                if (!object.Equals(this.ResponseText, rhs.ResponseText)) return false;
                if (!object.Equals(this.ScriptNotes, rhs.ScriptNotes)) return false;
                if (!object.Equals(this.Edits, rhs.Edits)) return false;
                if (!object.Equals(this.AlternateLipText, rhs.AlternateLipText)) return false;
                if (!object.Equals(this.TextHash, rhs.TextHash)) return false;
                if (!object.Equals(this.NpcAnimation, rhs.NpcAnimation)) return false;
                if (!object.Equals(this.AnimationSubgraph, rhs.AnimationSubgraph)) return false;
                if (!object.Equals(this.AnimationBodyArchetype, rhs.AnimationBodyArchetype)) return false;
                if (!object.Equals(this.AnimationFaceArchetype, rhs.AnimationFaceArchetype)) return false;
                if (!object.Equals(this.AnimationFlavor, rhs.AnimationFlavor)) return false;
                if (!object.Equals(this.UseDialogueAnimation, rhs.UseDialogueAnimation)) return false;
                if (!object.Equals(this.UseAnimationBodyArchetype, rhs.UseAnimationBodyArchetype)) return false;
                if (!object.Equals(this.AnimationCompleteEndsPhase, rhs.AnimationCompleteEndsPhase)) return false;
                if (!object.Equals(this.AnimationOnlyMovement, rhs.AnimationOnlyMovement)) return false;
                if (!object.Equals(this.UseFlavorAnimation, rhs.UseFlavorAnimation)) return false;
                if (!object.Equals(this.DelayStartTimeAction, rhs.DelayStartTimeAction)) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.UseActorAnimationAction, rhs.UseActorAnimationAction)) return false;
                if (!object.Equals(this.AnimationHoldEvent, rhs.AnimationHoldEvent)) return false;
                if (!object.Equals(this.DTGT, rhs.DTGT)) return false;
                if (!object.Equals(this.ACEP, rhs.ACEP)) return false;
                if (!object.Equals(this.XNAM, rhs.XNAM)) return false;
                if (!object.Equals(this.HeadTracking, rhs.HeadTracking)) return false;
                if (!object.Equals(this.RVSH, rhs.RVSH)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.WEMFile);
                hash.Add(this.EmotionOut);
                hash.Add(this.TROTs);
                hash.Add(this.ResponseText);
                hash.Add(this.ScriptNotes);
                hash.Add(this.Edits);
                hash.Add(this.AlternateLipText);
                hash.Add(this.TextHash);
                hash.Add(this.NpcAnimation);
                hash.Add(this.AnimationSubgraph);
                hash.Add(this.AnimationBodyArchetype);
                hash.Add(this.AnimationFaceArchetype);
                hash.Add(this.AnimationFlavor);
                hash.Add(this.UseDialogueAnimation);
                hash.Add(this.UseAnimationBodyArchetype);
                hash.Add(this.AnimationCompleteEndsPhase);
                hash.Add(this.AnimationOnlyMovement);
                hash.Add(this.UseFlavorAnimation);
                hash.Add(this.DelayStartTimeAction);
                hash.Add(this.Action);
                hash.Add(this.UseActorAnimationAction);
                hash.Add(this.AnimationHoldEvent);
                hash.Add(this.DTGT);
                hash.Add(this.ACEP);
                hash.Add(this.XNAM);
                hash.Add(this.HeadTracking);
                hash.Add(this.RVSH);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.WEMFile)) return false;
                if (!eval(this.EmotionOut)) return false;
                if (this.TROTs != null)
                {
                    if (!eval(this.TROTs.Overall)) return false;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ResponseText)) return false;
                if (!eval(this.ScriptNotes)) return false;
                if (!eval(this.Edits)) return false;
                if (!eval(this.AlternateLipText)) return false;
                if (!eval(this.TextHash)) return false;
                if (!eval(this.NpcAnimation)) return false;
                if (!eval(this.AnimationSubgraph)) return false;
                if (!eval(this.AnimationBodyArchetype)) return false;
                if (!eval(this.AnimationFaceArchetype)) return false;
                if (!eval(this.AnimationFlavor)) return false;
                if (!eval(this.UseDialogueAnimation)) return false;
                if (!eval(this.UseAnimationBodyArchetype)) return false;
                if (!eval(this.AnimationCompleteEndsPhase)) return false;
                if (!eval(this.AnimationOnlyMovement)) return false;
                if (!eval(this.UseFlavorAnimation)) return false;
                if (!eval(this.DelayStartTimeAction)) return false;
                if (!eval(this.Action)) return false;
                if (!eval(this.UseActorAnimationAction)) return false;
                if (!eval(this.AnimationHoldEvent)) return false;
                if (!eval(this.DTGT)) return false;
                if (!eval(this.ACEP)) return false;
                if (!eval(this.XNAM)) return false;
                if (HeadTracking != null)
                {
                    if (!eval(this.HeadTracking.Overall)) return false;
                    if (this.HeadTracking.Specific != null && !this.HeadTracking.Specific.All(eval)) return false;
                }
                if (RVSH != null)
                {
                    if (!eval(this.RVSH.Overall)) return false;
                    if (this.RVSH.Specific != null && !this.RVSH.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.WEMFile)) return true;
                if (eval(this.EmotionOut)) return true;
                if (this.TROTs != null)
                {
                    if (eval(this.TROTs.Overall)) return true;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ResponseText)) return true;
                if (eval(this.ScriptNotes)) return true;
                if (eval(this.Edits)) return true;
                if (eval(this.AlternateLipText)) return true;
                if (eval(this.TextHash)) return true;
                if (eval(this.NpcAnimation)) return true;
                if (eval(this.AnimationSubgraph)) return true;
                if (eval(this.AnimationBodyArchetype)) return true;
                if (eval(this.AnimationFaceArchetype)) return true;
                if (eval(this.AnimationFlavor)) return true;
                if (eval(this.UseDialogueAnimation)) return true;
                if (eval(this.UseAnimationBodyArchetype)) return true;
                if (eval(this.AnimationCompleteEndsPhase)) return true;
                if (eval(this.AnimationOnlyMovement)) return true;
                if (eval(this.UseFlavorAnimation)) return true;
                if (eval(this.DelayStartTimeAction)) return true;
                if (eval(this.Action)) return true;
                if (eval(this.UseActorAnimationAction)) return true;
                if (eval(this.AnimationHoldEvent)) return true;
                if (eval(this.DTGT)) return true;
                if (eval(this.ACEP)) return true;
                if (eval(this.XNAM)) return true;
                if (HeadTracking != null)
                {
                    if (eval(this.HeadTracking.Overall)) return true;
                    if (this.HeadTracking.Specific != null && this.HeadTracking.Specific.Any(eval)) return true;
                }
                if (RVSH != null)
                {
                    if (eval(this.RVSH.Overall)) return true;
                    if (this.RVSH.Specific != null && this.RVSH.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.WEMFile = eval(this.WEMFile);
                obj.EmotionOut = eval(this.EmotionOut);
                if (TROTs != null)
                {
                    obj.TROTs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>?>(eval(this.TROTs.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>());
                    if (TROTs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>();
                        obj.TROTs.Specific = l;
                        foreach (var item in TROTs.Specific)
                        {
                            MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ResponseText = eval(this.ResponseText);
                obj.ScriptNotes = eval(this.ScriptNotes);
                obj.Edits = eval(this.Edits);
                obj.AlternateLipText = eval(this.AlternateLipText);
                obj.TextHash = eval(this.TextHash);
                obj.NpcAnimation = eval(this.NpcAnimation);
                obj.AnimationSubgraph = eval(this.AnimationSubgraph);
                obj.AnimationBodyArchetype = eval(this.AnimationBodyArchetype);
                obj.AnimationFaceArchetype = eval(this.AnimationFaceArchetype);
                obj.AnimationFlavor = eval(this.AnimationFlavor);
                obj.UseDialogueAnimation = eval(this.UseDialogueAnimation);
                obj.UseAnimationBodyArchetype = eval(this.UseAnimationBodyArchetype);
                obj.AnimationCompleteEndsPhase = eval(this.AnimationCompleteEndsPhase);
                obj.AnimationOnlyMovement = eval(this.AnimationOnlyMovement);
                obj.UseFlavorAnimation = eval(this.UseFlavorAnimation);
                obj.DelayStartTimeAction = eval(this.DelayStartTimeAction);
                obj.Action = eval(this.Action);
                obj.UseActorAnimationAction = eval(this.UseActorAnimationAction);
                obj.AnimationHoldEvent = eval(this.AnimationHoldEvent);
                obj.DTGT = eval(this.DTGT);
                obj.ACEP = eval(this.ACEP);
                obj.XNAM = eval(this.XNAM);
                obj.HeadTracking = this.HeadTracking == null ? null : new MaskItem<R, HeadTracking.Mask<R>?>(eval(this.HeadTracking.Overall), this.HeadTracking.Specific?.Translate(eval));
                obj.RVSH = this.RVSH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.RVSH.Overall), this.RVSH.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponse.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponse.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponse.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Emotion ?? true)
                    {
                        sb.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.WEMFile ?? true)
                    {
                        sb.AppendItem(WEMFile, "WEMFile");
                    }
                    if (printMask?.EmotionOut ?? true)
                    {
                        sb.AppendItem(EmotionOut, "EmotionOut");
                    }
                    if ((printMask?.TROTs?.Overall ?? true)
                        && TROTs is {} TROTsItem)
                    {
                        sb.AppendLine("TROTs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TROTsItem.Overall);
                            if (TROTsItem.Specific != null)
                            {
                                foreach (var subItem in TROTsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ResponseText ?? true)
                    {
                        sb.AppendItem(ResponseText, "ResponseText");
                    }
                    if (printMask?.ScriptNotes ?? true)
                    {
                        sb.AppendItem(ScriptNotes, "ScriptNotes");
                    }
                    if (printMask?.Edits ?? true)
                    {
                        sb.AppendItem(Edits, "Edits");
                    }
                    if (printMask?.AlternateLipText ?? true)
                    {
                        sb.AppendItem(AlternateLipText, "AlternateLipText");
                    }
                    if (printMask?.TextHash ?? true)
                    {
                        sb.AppendItem(TextHash, "TextHash");
                    }
                    if (printMask?.NpcAnimation ?? true)
                    {
                        sb.AppendItem(NpcAnimation, "NpcAnimation");
                    }
                    if (printMask?.AnimationSubgraph ?? true)
                    {
                        sb.AppendItem(AnimationSubgraph, "AnimationSubgraph");
                    }
                    if (printMask?.AnimationBodyArchetype ?? true)
                    {
                        sb.AppendItem(AnimationBodyArchetype, "AnimationBodyArchetype");
                    }
                    if (printMask?.AnimationFaceArchetype ?? true)
                    {
                        sb.AppendItem(AnimationFaceArchetype, "AnimationFaceArchetype");
                    }
                    if (printMask?.AnimationFlavor ?? true)
                    {
                        sb.AppendItem(AnimationFlavor, "AnimationFlavor");
                    }
                    if (printMask?.UseDialogueAnimation ?? true)
                    {
                        sb.AppendItem(UseDialogueAnimation, "UseDialogueAnimation");
                    }
                    if (printMask?.UseAnimationBodyArchetype ?? true)
                    {
                        sb.AppendItem(UseAnimationBodyArchetype, "UseAnimationBodyArchetype");
                    }
                    if (printMask?.AnimationCompleteEndsPhase ?? true)
                    {
                        sb.AppendItem(AnimationCompleteEndsPhase, "AnimationCompleteEndsPhase");
                    }
                    if (printMask?.AnimationOnlyMovement ?? true)
                    {
                        sb.AppendItem(AnimationOnlyMovement, "AnimationOnlyMovement");
                    }
                    if (printMask?.UseFlavorAnimation ?? true)
                    {
                        sb.AppendItem(UseFlavorAnimation, "UseFlavorAnimation");
                    }
                    if (printMask?.DelayStartTimeAction ?? true)
                    {
                        sb.AppendItem(DelayStartTimeAction, "DelayStartTimeAction");
                    }
                    if (printMask?.Action ?? true)
                    {
                        sb.AppendItem(Action, "Action");
                    }
                    if (printMask?.UseActorAnimationAction ?? true)
                    {
                        sb.AppendItem(UseActorAnimationAction, "UseActorAnimationAction");
                    }
                    if (printMask?.AnimationHoldEvent ?? true)
                    {
                        sb.AppendItem(AnimationHoldEvent, "AnimationHoldEvent");
                    }
                    if (printMask?.DTGT ?? true)
                    {
                        sb.AppendItem(DTGT, "DTGT");
                    }
                    if (printMask?.ACEP ?? true)
                    {
                        sb.AppendItem(ACEP, "ACEP");
                    }
                    if (printMask?.XNAM ?? true)
                    {
                        sb.AppendItem(XNAM, "XNAM");
                    }
                    if (printMask?.HeadTracking?.Overall ?? true)
                    {
                        HeadTracking?.Print(sb);
                    }
                    if (printMask?.RVSH?.Overall ?? true)
                    {
                        RVSH?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? WEMFile;
            public Exception? EmotionOut;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>? TROTs;
            public Exception? ResponseText;
            public Exception? ScriptNotes;
            public Exception? Edits;
            public Exception? AlternateLipText;
            public Exception? TextHash;
            public Exception? NpcAnimation;
            public Exception? AnimationSubgraph;
            public Exception? AnimationBodyArchetype;
            public Exception? AnimationFaceArchetype;
            public Exception? AnimationFlavor;
            public Exception? UseDialogueAnimation;
            public Exception? UseAnimationBodyArchetype;
            public Exception? AnimationCompleteEndsPhase;
            public Exception? AnimationOnlyMovement;
            public Exception? UseFlavorAnimation;
            public Exception? DelayStartTimeAction;
            public Exception? Action;
            public Exception? UseActorAnimationAction;
            public Exception? AnimationHoldEvent;
            public Exception? DTGT;
            public Exception? ACEP;
            public Exception? XNAM;
            public MaskItem<Exception?, HeadTracking.ErrorMask?>? HeadTracking;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? RVSH;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponse_FieldIndex.WEMFile:
                        return WEMFile;
                    case DialogResponse_FieldIndex.EmotionOut:
                        return EmotionOut;
                    case DialogResponse_FieldIndex.TROTs:
                        return TROTs;
                    case DialogResponse_FieldIndex.ResponseText:
                        return ResponseText;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        return ScriptNotes;
                    case DialogResponse_FieldIndex.Edits:
                        return Edits;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        return AlternateLipText;
                    case DialogResponse_FieldIndex.TextHash:
                        return TextHash;
                    case DialogResponse_FieldIndex.NpcAnimation:
                        return NpcAnimation;
                    case DialogResponse_FieldIndex.AnimationSubgraph:
                        return AnimationSubgraph;
                    case DialogResponse_FieldIndex.AnimationBodyArchetype:
                        return AnimationBodyArchetype;
                    case DialogResponse_FieldIndex.AnimationFaceArchetype:
                        return AnimationFaceArchetype;
                    case DialogResponse_FieldIndex.AnimationFlavor:
                        return AnimationFlavor;
                    case DialogResponse_FieldIndex.UseDialogueAnimation:
                        return UseDialogueAnimation;
                    case DialogResponse_FieldIndex.UseAnimationBodyArchetype:
                        return UseAnimationBodyArchetype;
                    case DialogResponse_FieldIndex.AnimationCompleteEndsPhase:
                        return AnimationCompleteEndsPhase;
                    case DialogResponse_FieldIndex.AnimationOnlyMovement:
                        return AnimationOnlyMovement;
                    case DialogResponse_FieldIndex.UseFlavorAnimation:
                        return UseFlavorAnimation;
                    case DialogResponse_FieldIndex.DelayStartTimeAction:
                        return DelayStartTimeAction;
                    case DialogResponse_FieldIndex.Action:
                        return Action;
                    case DialogResponse_FieldIndex.UseActorAnimationAction:
                        return UseActorAnimationAction;
                    case DialogResponse_FieldIndex.AnimationHoldEvent:
                        return AnimationHoldEvent;
                    case DialogResponse_FieldIndex.DTGT:
                        return DTGT;
                    case DialogResponse_FieldIndex.ACEP:
                        return ACEP;
                    case DialogResponse_FieldIndex.XNAM:
                        return XNAM;
                    case DialogResponse_FieldIndex.HeadTracking:
                        return HeadTracking;
                    case DialogResponse_FieldIndex.RVSH:
                        return RVSH;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = ex;
                        break;
                    case DialogResponse_FieldIndex.EmotionOut:
                        this.EmotionOut = ex;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.ResponseText:
                        this.ResponseText = ex;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = ex;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = ex;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = ex;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = ex;
                        break;
                    case DialogResponse_FieldIndex.NpcAnimation:
                        this.NpcAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationSubgraph:
                        this.AnimationSubgraph = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationBodyArchetype:
                        this.AnimationBodyArchetype = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationFaceArchetype:
                        this.AnimationFaceArchetype = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationFlavor:
                        this.AnimationFlavor = ex;
                        break;
                    case DialogResponse_FieldIndex.UseDialogueAnimation:
                        this.UseDialogueAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.UseAnimationBodyArchetype:
                        this.UseAnimationBodyArchetype = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationCompleteEndsPhase:
                        this.AnimationCompleteEndsPhase = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationOnlyMovement:
                        this.AnimationOnlyMovement = ex;
                        break;
                    case DialogResponse_FieldIndex.UseFlavorAnimation:
                        this.UseFlavorAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.DelayStartTimeAction:
                        this.DelayStartTimeAction = ex;
                        break;
                    case DialogResponse_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case DialogResponse_FieldIndex.UseActorAnimationAction:
                        this.UseActorAnimationAction = ex;
                        break;
                    case DialogResponse_FieldIndex.AnimationHoldEvent:
                        this.AnimationHoldEvent = ex;
                        break;
                    case DialogResponse_FieldIndex.DTGT:
                        this.DTGT = ex;
                        break;
                    case DialogResponse_FieldIndex.ACEP:
                        this.ACEP = ex;
                        break;
                    case DialogResponse_FieldIndex.XNAM:
                        this.XNAM = ex;
                        break;
                    case DialogResponse_FieldIndex.HeadTracking:
                        this.HeadTracking = new MaskItem<Exception?, HeadTracking.ErrorMask?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.EmotionOut:
                        this.EmotionOut = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponse_FieldIndex.ResponseText:
                        this.ResponseText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.NpcAnimation:
                        this.NpcAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationSubgraph:
                        this.AnimationSubgraph = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationBodyArchetype:
                        this.AnimationBodyArchetype = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationFaceArchetype:
                        this.AnimationFaceArchetype = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationFlavor:
                        this.AnimationFlavor = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.UseDialogueAnimation:
                        this.UseDialogueAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.UseAnimationBodyArchetype:
                        this.UseAnimationBodyArchetype = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationCompleteEndsPhase:
                        this.AnimationCompleteEndsPhase = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationOnlyMovement:
                        this.AnimationOnlyMovement = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.UseFlavorAnimation:
                        this.UseFlavorAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.DelayStartTimeAction:
                        this.DelayStartTimeAction = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.UseActorAnimationAction:
                        this.UseActorAnimationAction = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AnimationHoldEvent:
                        this.AnimationHoldEvent = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.DTGT:
                        this.DTGT = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ACEP:
                        this.ACEP = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.XNAM:
                        this.XNAM = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.HeadTracking:
                        this.HeadTracking = (MaskItem<Exception?, HeadTracking.ErrorMask?>?)obj;
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (WEMFile != null) return true;
                if (EmotionOut != null) return true;
                if (TROTs != null) return true;
                if (ResponseText != null) return true;
                if (ScriptNotes != null) return true;
                if (Edits != null) return true;
                if (AlternateLipText != null) return true;
                if (TextHash != null) return true;
                if (NpcAnimation != null) return true;
                if (AnimationSubgraph != null) return true;
                if (AnimationBodyArchetype != null) return true;
                if (AnimationFaceArchetype != null) return true;
                if (AnimationFlavor != null) return true;
                if (UseDialogueAnimation != null) return true;
                if (UseAnimationBodyArchetype != null) return true;
                if (AnimationCompleteEndsPhase != null) return true;
                if (AnimationOnlyMovement != null) return true;
                if (UseFlavorAnimation != null) return true;
                if (DelayStartTimeAction != null) return true;
                if (Action != null) return true;
                if (UseActorAnimationAction != null) return true;
                if (AnimationHoldEvent != null) return true;
                if (DTGT != null) return true;
                if (ACEP != null) return true;
                if (XNAM != null) return true;
                if (HeadTracking != null) return true;
                if (RVSH != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Emotion, "Emotion");
                }
                {
                    sb.AppendItem(WEMFile, "WEMFile");
                }
                {
                    sb.AppendItem(EmotionOut, "EmotionOut");
                }
                if (TROTs is {} TROTsItem)
                {
                    sb.AppendLine("TROTs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TROTsItem.Overall);
                        if (TROTsItem.Specific != null)
                        {
                            foreach (var subItem in TROTsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ResponseText, "ResponseText");
                }
                {
                    sb.AppendItem(ScriptNotes, "ScriptNotes");
                }
                {
                    sb.AppendItem(Edits, "Edits");
                }
                {
                    sb.AppendItem(AlternateLipText, "AlternateLipText");
                }
                {
                    sb.AppendItem(TextHash, "TextHash");
                }
                {
                    sb.AppendItem(NpcAnimation, "NpcAnimation");
                }
                {
                    sb.AppendItem(AnimationSubgraph, "AnimationSubgraph");
                }
                {
                    sb.AppendItem(AnimationBodyArchetype, "AnimationBodyArchetype");
                }
                {
                    sb.AppendItem(AnimationFaceArchetype, "AnimationFaceArchetype");
                }
                {
                    sb.AppendItem(AnimationFlavor, "AnimationFlavor");
                }
                {
                    sb.AppendItem(UseDialogueAnimation, "UseDialogueAnimation");
                }
                {
                    sb.AppendItem(UseAnimationBodyArchetype, "UseAnimationBodyArchetype");
                }
                {
                    sb.AppendItem(AnimationCompleteEndsPhase, "AnimationCompleteEndsPhase");
                }
                {
                    sb.AppendItem(AnimationOnlyMovement, "AnimationOnlyMovement");
                }
                {
                    sb.AppendItem(UseFlavorAnimation, "UseFlavorAnimation");
                }
                {
                    sb.AppendItem(DelayStartTimeAction, "DelayStartTimeAction");
                }
                {
                    sb.AppendItem(Action, "Action");
                }
                {
                    sb.AppendItem(UseActorAnimationAction, "UseActorAnimationAction");
                }
                {
                    sb.AppendItem(AnimationHoldEvent, "AnimationHoldEvent");
                }
                {
                    sb.AppendItem(DTGT, "DTGT");
                }
                {
                    sb.AppendItem(ACEP, "ACEP");
                }
                {
                    sb.AppendItem(XNAM, "XNAM");
                }
                HeadTracking?.Print(sb);
                RVSH?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.WEMFile = this.WEMFile.Combine(rhs.WEMFile);
                ret.EmotionOut = this.EmotionOut.Combine(rhs.EmotionOut);
                ret.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TROTs?.Overall, rhs.TROTs?.Overall), Noggog.ExceptionExt.Combine(this.TROTs?.Specific, rhs.TROTs?.Specific));
                ret.ResponseText = this.ResponseText.Combine(rhs.ResponseText);
                ret.ScriptNotes = this.ScriptNotes.Combine(rhs.ScriptNotes);
                ret.Edits = this.Edits.Combine(rhs.Edits);
                ret.AlternateLipText = this.AlternateLipText.Combine(rhs.AlternateLipText);
                ret.TextHash = this.TextHash.Combine(rhs.TextHash);
                ret.NpcAnimation = this.NpcAnimation.Combine(rhs.NpcAnimation);
                ret.AnimationSubgraph = this.AnimationSubgraph.Combine(rhs.AnimationSubgraph);
                ret.AnimationBodyArchetype = this.AnimationBodyArchetype.Combine(rhs.AnimationBodyArchetype);
                ret.AnimationFaceArchetype = this.AnimationFaceArchetype.Combine(rhs.AnimationFaceArchetype);
                ret.AnimationFlavor = this.AnimationFlavor.Combine(rhs.AnimationFlavor);
                ret.UseDialogueAnimation = this.UseDialogueAnimation.Combine(rhs.UseDialogueAnimation);
                ret.UseAnimationBodyArchetype = this.UseAnimationBodyArchetype.Combine(rhs.UseAnimationBodyArchetype);
                ret.AnimationCompleteEndsPhase = this.AnimationCompleteEndsPhase.Combine(rhs.AnimationCompleteEndsPhase);
                ret.AnimationOnlyMovement = this.AnimationOnlyMovement.Combine(rhs.AnimationOnlyMovement);
                ret.UseFlavorAnimation = this.UseFlavorAnimation.Combine(rhs.UseFlavorAnimation);
                ret.DelayStartTimeAction = this.DelayStartTimeAction.Combine(rhs.DelayStartTimeAction);
                ret.Action = this.Action.Combine(rhs.Action);
                ret.UseActorAnimationAction = this.UseActorAnimationAction.Combine(rhs.UseActorAnimationAction);
                ret.AnimationHoldEvent = this.AnimationHoldEvent.Combine(rhs.AnimationHoldEvent);
                ret.DTGT = this.DTGT.Combine(rhs.DTGT);
                ret.ACEP = this.ACEP.Combine(rhs.ACEP);
                ret.XNAM = this.XNAM.Combine(rhs.XNAM);
                ret.HeadTracking = this.HeadTracking.Combine(rhs.HeadTracking, (l, r) => l.Combine(r));
                ret.RVSH = this.RVSH.Combine(rhs.RVSH, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Emotion;
            public bool WEMFile;
            public bool EmotionOut;
            public DialogResponseTROT.TranslationMask? TROTs;
            public bool ResponseText;
            public bool ScriptNotes;
            public bool Edits;
            public bool AlternateLipText;
            public bool TextHash;
            public bool NpcAnimation;
            public bool AnimationSubgraph;
            public bool AnimationBodyArchetype;
            public bool AnimationFaceArchetype;
            public bool AnimationFlavor;
            public bool UseDialogueAnimation;
            public bool UseAnimationBodyArchetype;
            public bool AnimationCompleteEndsPhase;
            public bool AnimationOnlyMovement;
            public bool UseFlavorAnimation;
            public bool DelayStartTimeAction;
            public bool Action;
            public bool UseActorAnimationAction;
            public bool AnimationHoldEvent;
            public bool DTGT;
            public bool ACEP;
            public bool XNAM;
            public HeadTracking.TranslationMask? HeadTracking;
            public SoundReference.TranslationMask? RVSH;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Emotion = defaultOn;
                this.WEMFile = defaultOn;
                this.EmotionOut = defaultOn;
                this.ResponseText = defaultOn;
                this.ScriptNotes = defaultOn;
                this.Edits = defaultOn;
                this.AlternateLipText = defaultOn;
                this.TextHash = defaultOn;
                this.NpcAnimation = defaultOn;
                this.AnimationSubgraph = defaultOn;
                this.AnimationBodyArchetype = defaultOn;
                this.AnimationFaceArchetype = defaultOn;
                this.AnimationFlavor = defaultOn;
                this.UseDialogueAnimation = defaultOn;
                this.UseAnimationBodyArchetype = defaultOn;
                this.AnimationCompleteEndsPhase = defaultOn;
                this.AnimationOnlyMovement = defaultOn;
                this.UseFlavorAnimation = defaultOn;
                this.DelayStartTimeAction = defaultOn;
                this.Action = defaultOn;
                this.UseActorAnimationAction = defaultOn;
                this.AnimationHoldEvent = defaultOn;
                this.DTGT = defaultOn;
                this.ACEP = defaultOn;
                this.XNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((WEMFile, null));
                ret.Add((EmotionOut, null));
                ret.Add((TROTs == null ? DefaultOn : !TROTs.GetCrystal().CopyNothing, TROTs?.GetCrystal()));
                ret.Add((ResponseText, null));
                ret.Add((ScriptNotes, null));
                ret.Add((Edits, null));
                ret.Add((AlternateLipText, null));
                ret.Add((TextHash, null));
                ret.Add((NpcAnimation, null));
                ret.Add((AnimationSubgraph, null));
                ret.Add((AnimationBodyArchetype, null));
                ret.Add((AnimationFaceArchetype, null));
                ret.Add((AnimationFlavor, null));
                ret.Add((UseDialogueAnimation, null));
                ret.Add((UseAnimationBodyArchetype, null));
                ret.Add((AnimationCompleteEndsPhase, null));
                ret.Add((AnimationOnlyMovement, null));
                ret.Add((UseFlavorAnimation, null));
                ret.Add((DelayStartTimeAction, null));
                ret.Add((Action, null));
                ret.Add((UseActorAnimationAction, null));
                ret.Add((AnimationHoldEvent, null));
                ret.Add((DTGT, null));
                ret.Add((ACEP, null));
                ret.Add((XNAM, null));
                ret.Add((HeadTracking != null ? HeadTracking.OnOverall : DefaultOn, HeadTracking?.GetCrystal()));
                ret.Add((RVSH != null ? RVSH.OnOverall : DefaultOn, RVSH?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponse();
            ((DialogResponseSetterCommon)((IDialogResponseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponse item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponse GetNew()
        {
            return new DialogResponse();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponse>
    {
        new IFormLink<IKeywordGetter> Emotion { get; set; }
        new UInt32 WEMFile { get; set; }
        new Single EmotionOut { get; set; }
        new ExtendedList<DialogResponseTROT> TROTs { get; }
        new TranslatedString ResponseText { get; set; }
        new String ScriptNotes { get; set; }
        new String Edits { get; set; }
        new String AlternateLipText { get; set; }
        new MemorySlice<Byte>? TextHash { get; set; }
        new IFormLinkNullable<IIdleAnimationGetter> NpcAnimation { get; set; }
        new String? AnimationSubgraph { get; set; }
        new IFormLinkNullable<IKeywordGetter> AnimationBodyArchetype { get; set; }
        new IFormLinkNullable<IKeywordGetter> AnimationFaceArchetype { get; set; }
        new MemorySlice<Byte>? AnimationFlavor { get; set; }
        new Boolean UseDialogueAnimation { get; set; }
        new Boolean UseAnimationBodyArchetype { get; set; }
        new Boolean AnimationCompleteEndsPhase { get; set; }
        new Boolean AnimationOnlyMovement { get; set; }
        new Boolean UseFlavorAnimation { get; set; }
        new Single? DelayStartTimeAction { get; set; }
        new IFormLinkNullable<IActionRecordGetter> Action { get; set; }
        new Boolean UseActorAnimationAction { get; set; }
        new Boolean AnimationHoldEvent { get; set; }
        new Int32? DTGT { get; set; }
        new Boolean ACEP { get; set; }
        new Boolean XNAM { get; set; }
        new HeadTracking? HeadTracking { get; set; }
        new SoundReference? RVSH { get; set; }
    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponseGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        IFormLinkGetter<IKeywordGetter> Emotion { get; }
        UInt32 WEMFile { get; }
        Single EmotionOut { get; }
        IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; }
        ITranslatedStringGetter ResponseText { get; }
        String ScriptNotes { get; }
        String Edits { get; }
        String AlternateLipText { get; }
        ReadOnlyMemorySlice<Byte>? TextHash { get; }
        IFormLinkNullableGetter<IIdleAnimationGetter> NpcAnimation { get; }
        String? AnimationSubgraph { get; }
        IFormLinkNullableGetter<IKeywordGetter> AnimationBodyArchetype { get; }
        IFormLinkNullableGetter<IKeywordGetter> AnimationFaceArchetype { get; }
        ReadOnlyMemorySlice<Byte>? AnimationFlavor { get; }
        Boolean UseDialogueAnimation { get; }
        Boolean UseAnimationBodyArchetype { get; }
        Boolean AnimationCompleteEndsPhase { get; }
        Boolean AnimationOnlyMovement { get; }
        Boolean UseFlavorAnimation { get; }
        Single? DelayStartTimeAction { get; }
        IFormLinkNullableGetter<IActionRecordGetter> Action { get; }
        Boolean UseActorAnimationAction { get; }
        Boolean AnimationHoldEvent { get; }
        Int32? DTGT { get; }
        Boolean ACEP { get; }
        Boolean XNAM { get; }
        IHeadTrackingGetter? HeadTracking { get; }
        ISoundReferenceGetter? RVSH { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponse item)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponse.Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? equalsMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? copyMask = null)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        WEMFile = 1,
        EmotionOut = 2,
        TROTs = 3,
        ResponseText = 4,
        ScriptNotes = 5,
        Edits = 6,
        AlternateLipText = 7,
        TextHash = 8,
        NpcAnimation = 9,
        AnimationSubgraph = 10,
        AnimationBodyArchetype = 11,
        AnimationFaceArchetype = 12,
        AnimationFlavor = 13,
        UseDialogueAnimation = 14,
        UseAnimationBodyArchetype = 15,
        AnimationCompleteEndsPhase = 16,
        AnimationOnlyMovement = 17,
        UseFlavorAnimation = 18,
        DelayStartTimeAction = 19,
        Action = 20,
        UseActorAnimationAction = 21,
        AnimationHoldEvent = 22,
        DTGT = 23,
        ACEP = 24,
        XNAM = 25,
        HeadTracking = 26,
        RVSH = 27,
    }
    #endregion

    #region Registration
    internal partial class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 28;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(DialogResponse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRDA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TRDA);
            var all = RecordCollection.Factory(
                RecordTypes.TRDA,
                RecordTypes.TROT,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM9,
                RecordTypes.BNAM,
                RecordTypes.STRV,
                RecordTypes.VCLR,
                RecordTypes.FLMV,
                RecordTypes.FLAV,
                RecordTypes.QUAL,
                RecordTypes.DOFT,
                RecordTypes.DPLT,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.LVCR,
                RecordTypes.ATAC,
                RecordTypes.SHRT,
                RecordTypes.PLRL,
                RecordTypes.DTGT,
                RecordTypes.ACEP,
                RecordTypes.XNAM,
                RecordTypes.HNAM,
                RecordTypes.RVSH);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponseSetterCommon
    {
        public static readonly DialogResponseSetterCommon Instance = new DialogResponseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponse item)
        {
            ClearPartial();
            item.Emotion.Clear();
            item.WEMFile = default(UInt32);
            item.EmotionOut = default(Single);
            item.TROTs.Clear();
            item.ResponseText.Clear();
            item.ScriptNotes = string.Empty;
            item.Edits = string.Empty;
            item.AlternateLipText = string.Empty;
            item.TextHash = default;
            item.NpcAnimation.Clear();
            item.AnimationSubgraph = default;
            item.AnimationBodyArchetype.Clear();
            item.AnimationFaceArchetype.Clear();
            item.AnimationFlavor = default;
            item.UseDialogueAnimation = default(Boolean);
            item.UseAnimationBodyArchetype = default(Boolean);
            item.AnimationCompleteEndsPhase = default(Boolean);
            item.AnimationOnlyMovement = default(Boolean);
            item.UseFlavorAnimation = default(Boolean);
            item.DelayStartTimeAction = default;
            item.Action.Clear();
            item.UseActorAnimationAction = default(Boolean);
            item.AnimationHoldEvent = default(Boolean);
            item.DTGT = default;
            item.ACEP = default(Boolean);
            item.XNAM = default(Boolean);
            item.HeadTracking = null;
            item.RVSH = null;
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponse obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Emotion.Relink(mapping);
            obj.TROTs.RemapLinks(mapping);
            obj.NpcAnimation.Relink(mapping);
            obj.AnimationBodyArchetype.Relink(mapping);
            obj.AnimationFaceArchetype.Relink(mapping);
            obj.Action.Relink(mapping);
            obj.RVSH?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DialogResponseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        public DialogResponse.Mask<bool> GetEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse.Mask<bool>(false);
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Emotion = item.Emotion.Equals(rhs.Emotion);
            ret.WEMFile = item.WEMFile == rhs.WEMFile;
            ret.EmotionOut = item.EmotionOut.EqualsWithin(rhs.EmotionOut);
            ret.TROTs = item.TROTs.CollectionEqualsHelper(
                rhs.TROTs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ResponseText = object.Equals(item.ResponseText, rhs.ResponseText);
            ret.ScriptNotes = string.Equals(item.ScriptNotes, rhs.ScriptNotes);
            ret.Edits = string.Equals(item.Edits, rhs.Edits);
            ret.AlternateLipText = string.Equals(item.AlternateLipText, rhs.AlternateLipText);
            ret.TextHash = MemorySliceExt.SequenceEqual(item.TextHash, rhs.TextHash);
            ret.NpcAnimation = item.NpcAnimation.Equals(rhs.NpcAnimation);
            ret.AnimationSubgraph = string.Equals(item.AnimationSubgraph, rhs.AnimationSubgraph);
            ret.AnimationBodyArchetype = item.AnimationBodyArchetype.Equals(rhs.AnimationBodyArchetype);
            ret.AnimationFaceArchetype = item.AnimationFaceArchetype.Equals(rhs.AnimationFaceArchetype);
            ret.AnimationFlavor = MemorySliceExt.SequenceEqual(item.AnimationFlavor, rhs.AnimationFlavor);
            ret.UseDialogueAnimation = item.UseDialogueAnimation == rhs.UseDialogueAnimation;
            ret.UseAnimationBodyArchetype = item.UseAnimationBodyArchetype == rhs.UseAnimationBodyArchetype;
            ret.AnimationCompleteEndsPhase = item.AnimationCompleteEndsPhase == rhs.AnimationCompleteEndsPhase;
            ret.AnimationOnlyMovement = item.AnimationOnlyMovement == rhs.AnimationOnlyMovement;
            ret.UseFlavorAnimation = item.UseFlavorAnimation == rhs.UseFlavorAnimation;
            ret.DelayStartTimeAction = item.DelayStartTimeAction.EqualsWithin(rhs.DelayStartTimeAction);
            ret.Action = item.Action.Equals(rhs.Action);
            ret.UseActorAnimationAction = item.UseActorAnimationAction == rhs.UseActorAnimationAction;
            ret.AnimationHoldEvent = item.AnimationHoldEvent == rhs.AnimationHoldEvent;
            ret.DTGT = item.DTGT == rhs.DTGT;
            ret.ACEP = item.ACEP == rhs.ACEP;
            ret.XNAM = item.XNAM == rhs.XNAM;
            ret.HeadTracking = EqualsMaskHelper.EqualsHelper(
                item.HeadTracking,
                rhs.HeadTracking,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RVSH = EqualsMaskHelper.EqualsHelper(
                item.RVSH,
                rhs.RVSH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponse =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponse) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                sb.AppendItem(item.Emotion.FormKey, "Emotion");
            }
            if (printMask?.WEMFile ?? true)
            {
                sb.AppendItem(item.WEMFile, "WEMFile");
            }
            if (printMask?.EmotionOut ?? true)
            {
                sb.AppendItem(item.EmotionOut, "EmotionOut");
            }
            if (printMask?.TROTs?.Overall ?? true)
            {
                sb.AppendLine("TROTs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TROTs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ResponseText ?? true)
            {
                sb.AppendItem(item.ResponseText, "ResponseText");
            }
            if (printMask?.ScriptNotes ?? true)
            {
                sb.AppendItem(item.ScriptNotes, "ScriptNotes");
            }
            if (printMask?.Edits ?? true)
            {
                sb.AppendItem(item.Edits, "Edits");
            }
            if (printMask?.AlternateLipText ?? true)
            {
                sb.AppendItem(item.AlternateLipText, "AlternateLipText");
            }
            if ((printMask?.TextHash ?? true)
                && item.TextHash is {} TextHashItem)
            {
                sb.AppendLine($"TextHash => {SpanExt.ToHexString(TextHashItem)}");
            }
            if (printMask?.NpcAnimation ?? true)
            {
                sb.AppendItem(item.NpcAnimation.FormKeyNullable, "NpcAnimation");
            }
            if ((printMask?.AnimationSubgraph ?? true)
                && item.AnimationSubgraph is {} AnimationSubgraphItem)
            {
                sb.AppendItem(AnimationSubgraphItem, "AnimationSubgraph");
            }
            if (printMask?.AnimationBodyArchetype ?? true)
            {
                sb.AppendItem(item.AnimationBodyArchetype.FormKeyNullable, "AnimationBodyArchetype");
            }
            if (printMask?.AnimationFaceArchetype ?? true)
            {
                sb.AppendItem(item.AnimationFaceArchetype.FormKeyNullable, "AnimationFaceArchetype");
            }
            if ((printMask?.AnimationFlavor ?? true)
                && item.AnimationFlavor is {} AnimationFlavorItem)
            {
                sb.AppendLine($"AnimationFlavor => {SpanExt.ToHexString(AnimationFlavorItem)}");
            }
            if (printMask?.UseDialogueAnimation ?? true)
            {
                sb.AppendItem(item.UseDialogueAnimation, "UseDialogueAnimation");
            }
            if (printMask?.UseAnimationBodyArchetype ?? true)
            {
                sb.AppendItem(item.UseAnimationBodyArchetype, "UseAnimationBodyArchetype");
            }
            if (printMask?.AnimationCompleteEndsPhase ?? true)
            {
                sb.AppendItem(item.AnimationCompleteEndsPhase, "AnimationCompleteEndsPhase");
            }
            if (printMask?.AnimationOnlyMovement ?? true)
            {
                sb.AppendItem(item.AnimationOnlyMovement, "AnimationOnlyMovement");
            }
            if (printMask?.UseFlavorAnimation ?? true)
            {
                sb.AppendItem(item.UseFlavorAnimation, "UseFlavorAnimation");
            }
            if ((printMask?.DelayStartTimeAction ?? true)
                && item.DelayStartTimeAction is {} DelayStartTimeActionItem)
            {
                sb.AppendItem(DelayStartTimeActionItem, "DelayStartTimeAction");
            }
            if (printMask?.Action ?? true)
            {
                sb.AppendItem(item.Action.FormKeyNullable, "Action");
            }
            if (printMask?.UseActorAnimationAction ?? true)
            {
                sb.AppendItem(item.UseActorAnimationAction, "UseActorAnimationAction");
            }
            if (printMask?.AnimationHoldEvent ?? true)
            {
                sb.AppendItem(item.AnimationHoldEvent, "AnimationHoldEvent");
            }
            if ((printMask?.DTGT ?? true)
                && item.DTGT is {} DTGTItem)
            {
                sb.AppendItem(DTGTItem, "DTGT");
            }
            if (printMask?.ACEP ?? true)
            {
                sb.AppendItem(item.ACEP, "ACEP");
            }
            if (printMask?.XNAM ?? true)
            {
                sb.AppendItem(item.XNAM, "XNAM");
            }
            if ((printMask?.HeadTracking?.Overall ?? true)
                && item.HeadTracking is {} HeadTrackingItem)
            {
                HeadTrackingItem?.Print(sb, "HeadTracking");
            }
            if ((printMask?.RVSH?.Overall ?? true)
                && item.RVSH is {} RVSHItem)
            {
                RVSHItem?.Print(sb, "RVSH");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseGetter? lhs,
            IDialogResponseGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                if (!lhs.Emotion.Equals(rhs.Emotion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                if (lhs.WEMFile != rhs.WEMFile) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionOut) ?? true))
            {
                if (!lhs.EmotionOut.EqualsWithin(rhs.EmotionOut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                if (!lhs.TROTs.SequenceEqual(rhs.TROTs, (l, r) => ((DialogResponseTROTCommon)((IDialogResponseTROTGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.TROTs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                if (!object.Equals(lhs.ResponseText, rhs.ResponseText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                if (!string.Equals(lhs.ScriptNotes, rhs.ScriptNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                if (!string.Equals(lhs.Edits, rhs.Edits)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                if (!string.Equals(lhs.AlternateLipText, rhs.AlternateLipText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextHash, rhs.TextHash)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.NpcAnimation) ?? true))
            {
                if (!lhs.NpcAnimation.Equals(rhs.NpcAnimation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationSubgraph) ?? true))
            {
                if (!string.Equals(lhs.AnimationSubgraph, rhs.AnimationSubgraph)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationBodyArchetype) ?? true))
            {
                if (!lhs.AnimationBodyArchetype.Equals(rhs.AnimationBodyArchetype)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationFaceArchetype) ?? true))
            {
                if (!lhs.AnimationFaceArchetype.Equals(rhs.AnimationFaceArchetype)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationFlavor) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.AnimationFlavor, rhs.AnimationFlavor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseDialogueAnimation) ?? true))
            {
                if (lhs.UseDialogueAnimation != rhs.UseDialogueAnimation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseAnimationBodyArchetype) ?? true))
            {
                if (lhs.UseAnimationBodyArchetype != rhs.UseAnimationBodyArchetype) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationCompleteEndsPhase) ?? true))
            {
                if (lhs.AnimationCompleteEndsPhase != rhs.AnimationCompleteEndsPhase) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationOnlyMovement) ?? true))
            {
                if (lhs.AnimationOnlyMovement != rhs.AnimationOnlyMovement) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseFlavorAnimation) ?? true))
            {
                if (lhs.UseFlavorAnimation != rhs.UseFlavorAnimation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DelayStartTimeAction) ?? true))
            {
                if (!lhs.DelayStartTimeAction.EqualsWithin(rhs.DelayStartTimeAction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Action) ?? true))
            {
                if (!lhs.Action.Equals(rhs.Action)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseActorAnimationAction) ?? true))
            {
                if (lhs.UseActorAnimationAction != rhs.UseActorAnimationAction) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationHoldEvent) ?? true))
            {
                if (lhs.AnimationHoldEvent != rhs.AnimationHoldEvent) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DTGT) ?? true))
            {
                if (lhs.DTGT != rhs.DTGT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ACEP) ?? true))
            {
                if (lhs.ACEP != rhs.ACEP) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.XNAM) ?? true))
            {
                if (lhs.XNAM != rhs.XNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HeadTracking) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadTracking, rhs.HeadTracking, out var lhsHeadTracking, out var rhsHeadTracking, out var isHeadTrackingEqual))
                {
                    if (!((HeadTrackingCommon)((IHeadTrackingGetter)lhsHeadTracking).CommonInstance()!).Equals(lhsHeadTracking, rhsHeadTracking, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HeadTracking))) return false;
                }
                else if (!isHeadTrackingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RVSH, rhs.RVSH, out var lhsRVSH, out var rhsRVSH, out var isRVSHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsRVSH).CommonInstance()!).Equals(lhsRVSH, rhsRVSH, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH))) return false;
                }
                else if (!isRVSHEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.WEMFile);
            hash.Add(item.EmotionOut);
            hash.Add(item.TROTs);
            hash.Add(item.ResponseText);
            hash.Add(item.ScriptNotes);
            hash.Add(item.Edits);
            hash.Add(item.AlternateLipText);
            if (item.TextHash is {} TextHashItem)
            {
                hash.Add(TextHashItem);
            }
            hash.Add(item.NpcAnimation);
            if (item.AnimationSubgraph is {} AnimationSubgraphitem)
            {
                hash.Add(AnimationSubgraphitem);
            }
            hash.Add(item.AnimationBodyArchetype);
            hash.Add(item.AnimationFaceArchetype);
            if (item.AnimationFlavor is {} AnimationFlavorItem)
            {
                hash.Add(AnimationFlavorItem);
            }
            hash.Add(item.UseDialogueAnimation);
            hash.Add(item.UseAnimationBodyArchetype);
            hash.Add(item.AnimationCompleteEndsPhase);
            hash.Add(item.AnimationOnlyMovement);
            hash.Add(item.UseFlavorAnimation);
            if (item.DelayStartTimeAction is {} DelayStartTimeActionitem)
            {
                hash.Add(DelayStartTimeActionitem);
            }
            hash.Add(item.Action);
            hash.Add(item.UseActorAnimationAction);
            hash.Add(item.AnimationHoldEvent);
            if (item.DTGT is {} DTGTitem)
            {
                hash.Add(DTGTitem);
            }
            hash.Add(item.ACEP);
            hash.Add(item.XNAM);
            if (item.HeadTracking is {} HeadTrackingitem)
            {
                hash.Add(HeadTrackingitem);
            }
            if (item.RVSH is {} RVSHitem)
            {
                hash.Add(RVSHitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponse.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponseGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Emotion);
            foreach (var item in obj.TROTs.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.NpcAnimation, out var NpcAnimationInfo))
            {
                yield return NpcAnimationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AnimationBodyArchetype, out var AnimationBodyArchetypeInfo))
            {
                yield return AnimationBodyArchetypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AnimationFaceArchetype, out var AnimationFaceArchetypeInfo))
            {
                yield return AnimationFaceArchetypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Action, out var ActionInfo))
            {
                yield return ActionInfo;
            }
            if (obj.RVSH is {} RVSHItems)
            {
                foreach (var item in RVSHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogResponseSetterTranslationCommon
    {
        public static readonly DialogResponseSetterTranslationCommon Instance = new DialogResponseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                item.Emotion.SetTo(rhs.Emotion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                item.WEMFile = rhs.WEMFile;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionOut) ?? true))
            {
                item.EmotionOut = rhs.EmotionOut;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.TROTs);
                try
                {
                    item.TROTs.SetTo(
                        rhs.TROTs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseText) ?? true))
            {
                item.ResponseText = rhs.ResponseText.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                item.ScriptNotes = rhs.ScriptNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                item.Edits = rhs.Edits;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                item.AlternateLipText = rhs.AlternateLipText;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if(rhs.TextHash is {} TextHashrhs)
                {
                    item.TextHash = TextHashrhs.ToArray();
                }
                else
                {
                    item.TextHash = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.NpcAnimation) ?? true))
            {
                item.NpcAnimation.SetTo(rhs.NpcAnimation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationSubgraph) ?? true))
            {
                item.AnimationSubgraph = rhs.AnimationSubgraph;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationBodyArchetype) ?? true))
            {
                item.AnimationBodyArchetype.SetTo(rhs.AnimationBodyArchetype.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationFaceArchetype) ?? true))
            {
                item.AnimationFaceArchetype.SetTo(rhs.AnimationFaceArchetype.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationFlavor) ?? true))
            {
                if(rhs.AnimationFlavor is {} AnimationFlavorrhs)
                {
                    item.AnimationFlavor = AnimationFlavorrhs.ToArray();
                }
                else
                {
                    item.AnimationFlavor = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseDialogueAnimation) ?? true))
            {
                item.UseDialogueAnimation = rhs.UseDialogueAnimation;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseAnimationBodyArchetype) ?? true))
            {
                item.UseAnimationBodyArchetype = rhs.UseAnimationBodyArchetype;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationCompleteEndsPhase) ?? true))
            {
                item.AnimationCompleteEndsPhase = rhs.AnimationCompleteEndsPhase;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationOnlyMovement) ?? true))
            {
                item.AnimationOnlyMovement = rhs.AnimationOnlyMovement;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseFlavorAnimation) ?? true))
            {
                item.UseFlavorAnimation = rhs.UseFlavorAnimation;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DelayStartTimeAction) ?? true))
            {
                item.DelayStartTimeAction = rhs.DelayStartTimeAction;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Action) ?? true))
            {
                item.Action.SetTo(rhs.Action.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.UseActorAnimationAction) ?? true))
            {
                item.UseActorAnimationAction = rhs.UseActorAnimationAction;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AnimationHoldEvent) ?? true))
            {
                item.AnimationHoldEvent = rhs.AnimationHoldEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DTGT) ?? true))
            {
                item.DTGT = rhs.DTGT;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ACEP) ?? true))
            {
                item.ACEP = rhs.ACEP;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.XNAM) ?? true))
            {
                item.XNAM = rhs.XNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HeadTracking) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.HeadTracking);
                try
                {
                    if(rhs.HeadTracking is {} rhsHeadTracking)
                    {
                        item.HeadTracking = rhsHeadTracking.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HeadTracking));
                    }
                    else
                    {
                        item.HeadTracking = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.RVSH);
                try
                {
                    if(rhs.RVSH is {} rhsRVSH)
                    {
                        item.RVSH = rhsRVSH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH));
                    }
                    else
                    {
                        item.RVSH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DialogResponseBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TRDA)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Emotion);
                writer.Write(item.WEMFile);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EmotionOut);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseTROTGetter>.Instance.Write(
                writer: writer,
                items: item.TROTs,
                transl: (MutagenWriter subWriter, IDialogResponseTROTGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseTROTBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ResponseText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.IL);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptNotes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Edits,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlternateLipText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextHash,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NpcAnimation,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationSubgraph,
                header: translationParams.ConvertToCustom(RecordTypes.STRV),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationBodyArchetype,
                header: translationParams.ConvertToCustom(RecordTypes.VCLR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationFaceArchetype,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AnimationFlavor,
                header: translationParams.ConvertToCustom(RecordTypes.FLAV));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.UseDialogueAnimation,
                header: translationParams.ConvertToCustom(RecordTypes.QUAL));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.UseAnimationBodyArchetype,
                header: translationParams.ConvertToCustom(RecordTypes.DOFT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.AnimationCompleteEndsPhase,
                header: translationParams.ConvertToCustom(RecordTypes.DPLT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.AnimationOnlyMovement,
                header: translationParams.ConvertToCustom(RecordTypes.SPOR));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.UseFlavorAnimation,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DelayStartTimeAction,
                header: translationParams.ConvertToCustom(RecordTypes.LVCR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Action,
                header: translationParams.ConvertToCustom(RecordTypes.ATAC));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.UseActorAnimationAction,
                header: translationParams.ConvertToCustom(RecordTypes.SHRT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.AnimationHoldEvent,
                header: translationParams.ConvertToCustom(RecordTypes.PLRL));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DTGT,
                header: translationParams.ConvertToCustom(RecordTypes.DTGT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.ACEP,
                header: translationParams.ConvertToCustom(RecordTypes.ACEP));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.XNAM,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            if (item.HeadTracking is {} HeadTrackingItem)
            {
                ((HeadTrackingBinaryWriteTranslation)((IBinaryItem)HeadTrackingItem).BinaryWriteTranslator).Write(
                    item: HeadTrackingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.RVSH is {} RVSHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.RVSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)RVSHItem).BinaryWriteTranslator).Write(
                        item: RVSHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponseGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponseBinaryCreateTranslation
    {
        public static readonly DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponse item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.EmotionOut, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Emotion.SetTo(
                        FormLinkBinaryTranslation.Instance.Parse(
                            reader: frame,
                            maxIsNone: true));
                    if (dataFrame.Remaining < 4) return null;
                    item.WEMFile = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.EmotionOut = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)DialogResponse_FieldIndex.EmotionOut;
                }
                case RecordTypeInts.TROT:
                {
                    item.TROTs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponseTROT>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponseTROT_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponseTROT.TryCreateFromBinary));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResponseText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.IL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ResponseText;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Edits = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateLipText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextHash = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NpcAnimation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.NpcAnimation;
                }
                case RecordTypeInts.STRV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationSubgraph = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.AnimationSubgraph;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationBodyArchetype.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.AnimationBodyArchetype;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationFaceArchetype.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.AnimationFaceArchetype;
                }
                case RecordTypeInts.FLAV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationFlavor = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.AnimationFlavor;
                }
                case RecordTypeInts.QUAL:
                {
                    item.UseDialogueAnimation = true;
                    return (int)DialogResponse_FieldIndex.UseDialogueAnimation;
                }
                case RecordTypeInts.DOFT:
                {
                    item.UseAnimationBodyArchetype = true;
                    return (int)DialogResponse_FieldIndex.UseAnimationBodyArchetype;
                }
                case RecordTypeInts.DPLT:
                {
                    item.AnimationCompleteEndsPhase = true;
                    return (int)DialogResponse_FieldIndex.AnimationCompleteEndsPhase;
                }
                case RecordTypeInts.SPOR:
                {
                    item.AnimationOnlyMovement = true;
                    return (int)DialogResponse_FieldIndex.AnimationOnlyMovement;
                }
                case RecordTypeInts.OCOR:
                {
                    item.UseFlavorAnimation = true;
                    return (int)DialogResponse_FieldIndex.UseFlavorAnimation;
                }
                case RecordTypeInts.LVCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DelayStartTimeAction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.DelayStartTimeAction;
                }
                case RecordTypeInts.ATAC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Action.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.Action;
                }
                case RecordTypeInts.SHRT:
                {
                    item.UseActorAnimationAction = true;
                    return (int)DialogResponse_FieldIndex.UseActorAnimationAction;
                }
                case RecordTypeInts.PLRL:
                {
                    item.AnimationHoldEvent = true;
                    return (int)DialogResponse_FieldIndex.AnimationHoldEvent;
                }
                case RecordTypeInts.DTGT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DTGT = frame.ReadInt32();
                    return (int)DialogResponse_FieldIndex.DTGT;
                }
                case RecordTypeInts.ACEP:
                {
                    item.ACEP = true;
                    return (int)DialogResponse_FieldIndex.ACEP;
                }
                case RecordTypeInts.XNAM:
                {
                    item.XNAM = true;
                    return (int)DialogResponse_FieldIndex.XNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HeadTracking = Mutagen.Bethesda.Starfield.HeadTracking.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HeadTracking;
                }
                case RecordTypeInts.RVSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RVSH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DialogResponseBinaryOverlay :
        PluginBinaryOverlay,
        IDialogResponseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TRDALocation;
        #region Emotion
        private int _EmotionLocation => _TRDALocation!.Value.Min;
        private bool _Emotion_IsSet => _TRDALocation.HasValue;
        public IFormLinkGetter<IKeywordGetter> Emotion => _Emotion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(_package, _recordData.Span.Slice(_EmotionLocation, 0x4), isSet: _Emotion_IsSet, maxIsNull: true) : FormLink<IKeywordGetter>.Null;
        #endregion
        #region WEMFile
        private int _WEMFileLocation => _TRDALocation!.Value.Min + 0x4;
        private bool _WEMFile_IsSet => _TRDALocation.HasValue;
        public UInt32 WEMFile => _WEMFile_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WEMFileLocation, 4)) : default(UInt32);
        #endregion
        #region EmotionOut
        private int _EmotionOutLocation => _TRDALocation!.Value.Min + 0x8;
        private bool _EmotionOut_IsSet => _TRDALocation.HasValue;
        public Single EmotionOut => _EmotionOut_IsSet ? _recordData.Slice(_EmotionOutLocation, 4).Float() : default(Single);
        #endregion
        public IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; private set; } = Array.Empty<IDialogResponseTROTGetter>();
        #region ResponseText
        private int? _ResponseTextLocation;
        public ITranslatedStringGetter ResponseText => _ResponseTextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ResponseTextLocation.Value, _package.MetaData.Constants), StringsSource.IL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        #region ScriptNotes
        private int? _ScriptNotesLocation;
        public String ScriptNotes => _ScriptNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Edits
        private int? _EditsLocation;
        public String Edits => _EditsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EditsLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region AlternateLipText
        private int? _AlternateLipTextLocation;
        public String AlternateLipText => _AlternateLipTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AlternateLipTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TextHash
        private int? _TextHashLocation;
        public ReadOnlyMemorySlice<Byte>? TextHash => _TextHashLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextHashLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NpcAnimation
        private int? _NpcAnimationLocation;
        public IFormLinkNullableGetter<IIdleAnimationGetter> NpcAnimation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IIdleAnimationGetter>(_package, _recordData, _NpcAnimationLocation);
        #endregion
        #region AnimationSubgraph
        private int? _AnimationSubgraphLocation;
        public String? AnimationSubgraph => _AnimationSubgraphLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationSubgraphLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region AnimationBodyArchetype
        private int? _AnimationBodyArchetypeLocation;
        public IFormLinkNullableGetter<IKeywordGetter> AnimationBodyArchetype => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _AnimationBodyArchetypeLocation);
        #endregion
        #region AnimationFaceArchetype
        private int? _AnimationFaceArchetypeLocation;
        public IFormLinkNullableGetter<IKeywordGetter> AnimationFaceArchetype => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _AnimationFaceArchetypeLocation);
        #endregion
        #region AnimationFlavor
        private int? _AnimationFlavorLocation;
        public ReadOnlyMemorySlice<Byte>? AnimationFlavor => _AnimationFlavorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationFlavorLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region UseDialogueAnimation
        private int? _UseDialogueAnimationLocation;
        public Boolean UseDialogueAnimation => _UseDialogueAnimationLocation.HasValue ? true : default(Boolean);
        #endregion
        #region UseAnimationBodyArchetype
        private int? _UseAnimationBodyArchetypeLocation;
        public Boolean UseAnimationBodyArchetype => _UseAnimationBodyArchetypeLocation.HasValue ? true : default(Boolean);
        #endregion
        #region AnimationCompleteEndsPhase
        private int? _AnimationCompleteEndsPhaseLocation;
        public Boolean AnimationCompleteEndsPhase => _AnimationCompleteEndsPhaseLocation.HasValue ? true : default(Boolean);
        #endregion
        #region AnimationOnlyMovement
        private int? _AnimationOnlyMovementLocation;
        public Boolean AnimationOnlyMovement => _AnimationOnlyMovementLocation.HasValue ? true : default(Boolean);
        #endregion
        #region UseFlavorAnimation
        private int? _UseFlavorAnimationLocation;
        public Boolean UseFlavorAnimation => _UseFlavorAnimationLocation.HasValue ? true : default(Boolean);
        #endregion
        #region DelayStartTimeAction
        private int? _DelayStartTimeActionLocation;
        public Single? DelayStartTimeAction => _DelayStartTimeActionLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DelayStartTimeActionLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Action
        private int? _ActionLocation;
        public IFormLinkNullableGetter<IActionRecordGetter> Action => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IActionRecordGetter>(_package, _recordData, _ActionLocation);
        #endregion
        #region UseActorAnimationAction
        private int? _UseActorAnimationActionLocation;
        public Boolean UseActorAnimationAction => _UseActorAnimationActionLocation.HasValue ? true : default(Boolean);
        #endregion
        #region AnimationHoldEvent
        private int? _AnimationHoldEventLocation;
        public Boolean AnimationHoldEvent => _AnimationHoldEventLocation.HasValue ? true : default(Boolean);
        #endregion
        #region DTGT
        private int? _DTGTLocation;
        public Int32? DTGT => _DTGTLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DTGTLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region ACEP
        private int? _ACEPLocation;
        public Boolean ACEP => _ACEPLocation.HasValue ? true : default(Boolean);
        #endregion
        #region XNAM
        private int? _XNAMLocation;
        public Boolean XNAM => _XNAMLocation.HasValue ? true : default(Boolean);
        #endregion
        public IHeadTrackingGetter? HeadTracking { get; private set; }
        public ISoundReferenceGetter? RVSH { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponseBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponseGetter DialogResponseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponseBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponseGetter DialogResponseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.EmotionOut, translationParams)) return ParseResult.Stop;
                    _TRDALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DialogResponse_FieldIndex.EmotionOut;
                }
                case RecordTypeInts.TROT:
                {
                    this.TROTs = BinaryOverlayList.FactoryByArray<IDialogResponseTROTGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => DialogResponseTROTBinaryOverlay.DialogResponseTROTFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: DialogResponseTROT_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    _ResponseTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ResponseText;
                }
                case RecordTypeInts.NAM2:
                {
                    _ScriptNotesLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    _EditsLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    _AlternateLipTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    _TextHashLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    _NpcAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.NpcAnimation;
                }
                case RecordTypeInts.STRV:
                {
                    _AnimationSubgraphLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationSubgraph;
                }
                case RecordTypeInts.VCLR:
                {
                    _AnimationBodyArchetypeLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationBodyArchetype;
                }
                case RecordTypeInts.FLMV:
                {
                    _AnimationFaceArchetypeLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationFaceArchetype;
                }
                case RecordTypeInts.FLAV:
                {
                    _AnimationFlavorLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationFlavor;
                }
                case RecordTypeInts.QUAL:
                {
                    _UseDialogueAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.UseDialogueAnimation;
                }
                case RecordTypeInts.DOFT:
                {
                    _UseAnimationBodyArchetypeLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.UseAnimationBodyArchetype;
                }
                case RecordTypeInts.DPLT:
                {
                    _AnimationCompleteEndsPhaseLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationCompleteEndsPhase;
                }
                case RecordTypeInts.SPOR:
                {
                    _AnimationOnlyMovementLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationOnlyMovement;
                }
                case RecordTypeInts.OCOR:
                {
                    _UseFlavorAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.UseFlavorAnimation;
                }
                case RecordTypeInts.LVCR:
                {
                    _DelayStartTimeActionLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.DelayStartTimeAction;
                }
                case RecordTypeInts.ATAC:
                {
                    _ActionLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Action;
                }
                case RecordTypeInts.SHRT:
                {
                    _UseActorAnimationActionLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.UseActorAnimationAction;
                }
                case RecordTypeInts.PLRL:
                {
                    _AnimationHoldEventLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AnimationHoldEvent;
                }
                case RecordTypeInts.DTGT:
                {
                    _DTGTLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.DTGT;
                }
                case RecordTypeInts.ACEP:
                {
                    _ACEPLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ACEP;
                }
                case RecordTypeInts.XNAM:
                {
                    _XNAMLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.XNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    this.HeadTracking = HeadTrackingBinaryOverlay.HeadTrackingFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HeadTracking;
                }
                case RecordTypeInts.RVSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RVSH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

