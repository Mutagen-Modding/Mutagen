/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class DialogResponse :
        IDialogResponse,
        IEquatable<IDialogResponseGetter>,
        ILoquiObjectSetter<DialogResponse>
    {
        #region Ctor
        public DialogResponse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        private readonly IFormLink<IKeywordGetter> _Emotion = new FormLink<IKeywordGetter>();
        public IFormLink<IKeywordGetter> Emotion
        {
            get => _Emotion;
            set => _Emotion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IKeywordGetter> IDialogResponseGetter.Emotion => this.Emotion;
        #endregion
        #region WEMFile
        public UInt32 WEMFile { get; set; } = default(UInt32);
        #endregion
        #region TRDAUnknown
        public Single TRDAUnknown { get; set; } = default(Single);
        #endregion
        #region TROTs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponseTROT> _TROTs = new ExtendedList<DialogResponseTROT>();
        public ExtendedList<DialogResponseTROT> TROTs
        {
            get => this._TROTs;
            init => this._TROTs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseTROTGetter> IDialogResponseGetter.TROTs => _TROTs;
        #endregion

        #endregion
        #region Text
        public TranslatedString Text { get; set; } = string.Empty;
        ITranslatedStringGetter IDialogResponseGetter.Text => this.Text;
        #endregion
        #region ScriptNotes
        public String ScriptNotes { get; set; } = string.Empty;
        #endregion
        #region Edits
        public String Edits { get; set; } = string.Empty;
        #endregion
        #region AlternateLipText
        public String AlternateLipText { get; set; } = string.Empty;
        #endregion
        #region TextHash
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextHash;
        public MemorySlice<Byte>? TextHash
        {
            get => this._TextHash;
            set => this._TextHash = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.TextHash => this.TextHash;
        #endregion
        #region BNAM
        private readonly IFormLinkNullable<IIdleAnimationGetter> _BNAM = new FormLinkNullable<IIdleAnimationGetter>();
        public IFormLinkNullable<IIdleAnimationGetter> BNAM
        {
            get => _BNAM;
            set => _BNAM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IIdleAnimationGetter> IDialogResponseGetter.BNAM => this.BNAM;
        #endregion
        #region STRV
        public String? STRV { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogResponseGetter.STRV => this.STRV;
        #endregion
        #region VCLR
        private readonly IFormLinkNullable<IKeywordGetter> _VCLR = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> VCLR
        {
            get => _VCLR;
            set => _VCLR.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IDialogResponseGetter.VCLR => this.VCLR;
        #endregion
        #region FLMV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLMV;
        public MemorySlice<Byte>? FLMV
        {
            get => this._FLMV;
            set => this._FLMV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.FLMV => this.FLMV;
        #endregion
        #region FLAV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLAV;
        public MemorySlice<Byte>? FLAV
        {
            get => this._FLAV;
            set => this._FLAV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.FLAV => this.FLAV;
        #endregion
        #region QUAL
        public Boolean QUAL { get; set; } = default(Boolean);
        #endregion
        #region DOFT
        public Boolean DOFT { get; set; } = default(Boolean);
        #endregion
        #region DPLT
        public Boolean DPLT { get; set; } = default(Boolean);
        #endregion
        #region OCOR
        public Boolean OCOR { get; set; } = default(Boolean);
        #endregion
        #region LVCR
        public Single? LVCR { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IDialogResponseGetter.LVCR => this.LVCR;
        #endregion
        #region ATAC
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ATAC;
        public MemorySlice<Byte>? ATAC
        {
            get => this._ATAC;
            set => this._ATAC = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.ATAC => this.ATAC;
        #endregion
        #region PLRL
        public Boolean PLRL { get; set; } = default(Boolean);
        #endregion
        #region XNAM
        public Boolean XNAM { get; set; } = default(Boolean);
        #endregion
        #region HNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HnamHnam? _HNAM;
        public HnamHnam? HNAM
        {
            get => _HNAM;
            set => _HNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHnamHnamGetter? IDialogResponseGetter.HNAM => this.HNAM;
        #endregion
        #region RVSH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _RVSH;
        public SoundReference? RVSH
        {
            get => _RVSH;
            set => _RVSH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IDialogResponseGetter.RVSH => this.RVSH;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.WEMFile = initialValue;
                this.TRDAUnknown = initialValue;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.Text = initialValue;
                this.ScriptNotes = initialValue;
                this.Edits = initialValue;
                this.AlternateLipText = initialValue;
                this.TextHash = initialValue;
                this.BNAM = initialValue;
                this.STRV = initialValue;
                this.VCLR = initialValue;
                this.FLMV = initialValue;
                this.FLAV = initialValue;
                this.QUAL = initialValue;
                this.DOFT = initialValue;
                this.DPLT = initialValue;
                this.OCOR = initialValue;
                this.LVCR = initialValue;
                this.ATAC = initialValue;
                this.PLRL = initialValue;
                this.XNAM = initialValue;
                this.HNAM = new MaskItem<TItem, HnamHnam.Mask<TItem>?>(initialValue, new HnamHnam.Mask<TItem>(initialValue));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Emotion,
                TItem WEMFile,
                TItem TRDAUnknown,
                TItem TROTs,
                TItem Text,
                TItem ScriptNotes,
                TItem Edits,
                TItem AlternateLipText,
                TItem TextHash,
                TItem BNAM,
                TItem STRV,
                TItem VCLR,
                TItem FLMV,
                TItem FLAV,
                TItem QUAL,
                TItem DOFT,
                TItem DPLT,
                TItem OCOR,
                TItem LVCR,
                TItem ATAC,
                TItem PLRL,
                TItem XNAM,
                TItem HNAM,
                TItem RVSH)
            {
                this.Emotion = Emotion;
                this.WEMFile = WEMFile;
                this.TRDAUnknown = TRDAUnknown;
                this.TROTs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>(TROTs, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>());
                this.Text = Text;
                this.ScriptNotes = ScriptNotes;
                this.Edits = Edits;
                this.AlternateLipText = AlternateLipText;
                this.TextHash = TextHash;
                this.BNAM = BNAM;
                this.STRV = STRV;
                this.VCLR = VCLR;
                this.FLMV = FLMV;
                this.FLAV = FLAV;
                this.QUAL = QUAL;
                this.DOFT = DOFT;
                this.DPLT = DPLT;
                this.OCOR = OCOR;
                this.LVCR = LVCR;
                this.ATAC = ATAC;
                this.PLRL = PLRL;
                this.XNAM = XNAM;
                this.HNAM = new MaskItem<TItem, HnamHnam.Mask<TItem>?>(HNAM, new HnamHnam.Mask<TItem>(HNAM));
                this.RVSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(RVSH, new SoundReference.Mask<TItem>(RVSH));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem WEMFile;
            public TItem TRDAUnknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponseTROT.Mask<TItem>?>>?>? TROTs;
            public TItem Text;
            public TItem ScriptNotes;
            public TItem Edits;
            public TItem AlternateLipText;
            public TItem TextHash;
            public TItem BNAM;
            public TItem STRV;
            public TItem VCLR;
            public TItem FLMV;
            public TItem FLAV;
            public TItem QUAL;
            public TItem DOFT;
            public TItem DPLT;
            public TItem OCOR;
            public TItem LVCR;
            public TItem ATAC;
            public TItem PLRL;
            public TItem XNAM;
            public MaskItem<TItem, HnamHnam.Mask<TItem>?>? HNAM { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? RVSH { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.WEMFile, rhs.WEMFile)) return false;
                if (!object.Equals(this.TRDAUnknown, rhs.TRDAUnknown)) return false;
                if (!object.Equals(this.TROTs, rhs.TROTs)) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.ScriptNotes, rhs.ScriptNotes)) return false;
                if (!object.Equals(this.Edits, rhs.Edits)) return false;
                if (!object.Equals(this.AlternateLipText, rhs.AlternateLipText)) return false;
                if (!object.Equals(this.TextHash, rhs.TextHash)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.STRV, rhs.STRV)) return false;
                if (!object.Equals(this.VCLR, rhs.VCLR)) return false;
                if (!object.Equals(this.FLMV, rhs.FLMV)) return false;
                if (!object.Equals(this.FLAV, rhs.FLAV)) return false;
                if (!object.Equals(this.QUAL, rhs.QUAL)) return false;
                if (!object.Equals(this.DOFT, rhs.DOFT)) return false;
                if (!object.Equals(this.DPLT, rhs.DPLT)) return false;
                if (!object.Equals(this.OCOR, rhs.OCOR)) return false;
                if (!object.Equals(this.LVCR, rhs.LVCR)) return false;
                if (!object.Equals(this.ATAC, rhs.ATAC)) return false;
                if (!object.Equals(this.PLRL, rhs.PLRL)) return false;
                if (!object.Equals(this.XNAM, rhs.XNAM)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.RVSH, rhs.RVSH)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.WEMFile);
                hash.Add(this.TRDAUnknown);
                hash.Add(this.TROTs);
                hash.Add(this.Text);
                hash.Add(this.ScriptNotes);
                hash.Add(this.Edits);
                hash.Add(this.AlternateLipText);
                hash.Add(this.TextHash);
                hash.Add(this.BNAM);
                hash.Add(this.STRV);
                hash.Add(this.VCLR);
                hash.Add(this.FLMV);
                hash.Add(this.FLAV);
                hash.Add(this.QUAL);
                hash.Add(this.DOFT);
                hash.Add(this.DPLT);
                hash.Add(this.OCOR);
                hash.Add(this.LVCR);
                hash.Add(this.ATAC);
                hash.Add(this.PLRL);
                hash.Add(this.XNAM);
                hash.Add(this.HNAM);
                hash.Add(this.RVSH);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.WEMFile)) return false;
                if (!eval(this.TRDAUnknown)) return false;
                if (this.TROTs != null)
                {
                    if (!eval(this.TROTs.Overall)) return false;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Text)) return false;
                if (!eval(this.ScriptNotes)) return false;
                if (!eval(this.Edits)) return false;
                if (!eval(this.AlternateLipText)) return false;
                if (!eval(this.TextHash)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.STRV)) return false;
                if (!eval(this.VCLR)) return false;
                if (!eval(this.FLMV)) return false;
                if (!eval(this.FLAV)) return false;
                if (!eval(this.QUAL)) return false;
                if (!eval(this.DOFT)) return false;
                if (!eval(this.DPLT)) return false;
                if (!eval(this.OCOR)) return false;
                if (!eval(this.LVCR)) return false;
                if (!eval(this.ATAC)) return false;
                if (!eval(this.PLRL)) return false;
                if (!eval(this.XNAM)) return false;
                if (HNAM != null)
                {
                    if (!eval(this.HNAM.Overall)) return false;
                    if (this.HNAM.Specific != null && !this.HNAM.Specific.All(eval)) return false;
                }
                if (RVSH != null)
                {
                    if (!eval(this.RVSH.Overall)) return false;
                    if (this.RVSH.Specific != null && !this.RVSH.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.WEMFile)) return true;
                if (eval(this.TRDAUnknown)) return true;
                if (this.TROTs != null)
                {
                    if (eval(this.TROTs.Overall)) return true;
                    if (this.TROTs.Specific != null)
                    {
                        foreach (var item in this.TROTs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Text)) return true;
                if (eval(this.ScriptNotes)) return true;
                if (eval(this.Edits)) return true;
                if (eval(this.AlternateLipText)) return true;
                if (eval(this.TextHash)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.STRV)) return true;
                if (eval(this.VCLR)) return true;
                if (eval(this.FLMV)) return true;
                if (eval(this.FLAV)) return true;
                if (eval(this.QUAL)) return true;
                if (eval(this.DOFT)) return true;
                if (eval(this.DPLT)) return true;
                if (eval(this.OCOR)) return true;
                if (eval(this.LVCR)) return true;
                if (eval(this.ATAC)) return true;
                if (eval(this.PLRL)) return true;
                if (eval(this.XNAM)) return true;
                if (HNAM != null)
                {
                    if (eval(this.HNAM.Overall)) return true;
                    if (this.HNAM.Specific != null && this.HNAM.Specific.Any(eval)) return true;
                }
                if (RVSH != null)
                {
                    if (eval(this.RVSH.Overall)) return true;
                    if (this.RVSH.Specific != null && this.RVSH.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.WEMFile = eval(this.WEMFile);
                obj.TRDAUnknown = eval(this.TRDAUnknown);
                if (TROTs != null)
                {
                    obj.TROTs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>?>(eval(this.TROTs.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>());
                    if (TROTs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>>();
                        obj.TROTs.Specific = l;
                        foreach (var item in TROTs.Specific)
                        {
                            MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponseTROT.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Text = eval(this.Text);
                obj.ScriptNotes = eval(this.ScriptNotes);
                obj.Edits = eval(this.Edits);
                obj.AlternateLipText = eval(this.AlternateLipText);
                obj.TextHash = eval(this.TextHash);
                obj.BNAM = eval(this.BNAM);
                obj.STRV = eval(this.STRV);
                obj.VCLR = eval(this.VCLR);
                obj.FLMV = eval(this.FLMV);
                obj.FLAV = eval(this.FLAV);
                obj.QUAL = eval(this.QUAL);
                obj.DOFT = eval(this.DOFT);
                obj.DPLT = eval(this.DPLT);
                obj.OCOR = eval(this.OCOR);
                obj.LVCR = eval(this.LVCR);
                obj.ATAC = eval(this.ATAC);
                obj.PLRL = eval(this.PLRL);
                obj.XNAM = eval(this.XNAM);
                obj.HNAM = this.HNAM == null ? null : new MaskItem<R, HnamHnam.Mask<R>?>(eval(this.HNAM.Overall), this.HNAM.Specific?.Translate(eval));
                obj.RVSH = this.RVSH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.RVSH.Overall), this.RVSH.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponse.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponse.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponse.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Emotion ?? true)
                    {
                        sb.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.WEMFile ?? true)
                    {
                        sb.AppendItem(WEMFile, "WEMFile");
                    }
                    if (printMask?.TRDAUnknown ?? true)
                    {
                        sb.AppendItem(TRDAUnknown, "TRDAUnknown");
                    }
                    if ((printMask?.TROTs?.Overall ?? true)
                        && TROTs is {} TROTsItem)
                    {
                        sb.AppendLine("TROTs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TROTsItem.Overall);
                            if (TROTsItem.Specific != null)
                            {
                                foreach (var subItem in TROTsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Text ?? true)
                    {
                        sb.AppendItem(Text, "Text");
                    }
                    if (printMask?.ScriptNotes ?? true)
                    {
                        sb.AppendItem(ScriptNotes, "ScriptNotes");
                    }
                    if (printMask?.Edits ?? true)
                    {
                        sb.AppendItem(Edits, "Edits");
                    }
                    if (printMask?.AlternateLipText ?? true)
                    {
                        sb.AppendItem(AlternateLipText, "AlternateLipText");
                    }
                    if (printMask?.TextHash ?? true)
                    {
                        sb.AppendItem(TextHash, "TextHash");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.STRV ?? true)
                    {
                        sb.AppendItem(STRV, "STRV");
                    }
                    if (printMask?.VCLR ?? true)
                    {
                        sb.AppendItem(VCLR, "VCLR");
                    }
                    if (printMask?.FLMV ?? true)
                    {
                        sb.AppendItem(FLMV, "FLMV");
                    }
                    if (printMask?.FLAV ?? true)
                    {
                        sb.AppendItem(FLAV, "FLAV");
                    }
                    if (printMask?.QUAL ?? true)
                    {
                        sb.AppendItem(QUAL, "QUAL");
                    }
                    if (printMask?.DOFT ?? true)
                    {
                        sb.AppendItem(DOFT, "DOFT");
                    }
                    if (printMask?.DPLT ?? true)
                    {
                        sb.AppendItem(DPLT, "DPLT");
                    }
                    if (printMask?.OCOR ?? true)
                    {
                        sb.AppendItem(OCOR, "OCOR");
                    }
                    if (printMask?.LVCR ?? true)
                    {
                        sb.AppendItem(LVCR, "LVCR");
                    }
                    if (printMask?.ATAC ?? true)
                    {
                        sb.AppendItem(ATAC, "ATAC");
                    }
                    if (printMask?.PLRL ?? true)
                    {
                        sb.AppendItem(PLRL, "PLRL");
                    }
                    if (printMask?.XNAM ?? true)
                    {
                        sb.AppendItem(XNAM, "XNAM");
                    }
                    if (printMask?.HNAM?.Overall ?? true)
                    {
                        HNAM?.Print(sb);
                    }
                    if (printMask?.RVSH?.Overall ?? true)
                    {
                        RVSH?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? WEMFile;
            public Exception? TRDAUnknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>? TROTs;
            public Exception? Text;
            public Exception? ScriptNotes;
            public Exception? Edits;
            public Exception? AlternateLipText;
            public Exception? TextHash;
            public Exception? BNAM;
            public Exception? STRV;
            public Exception? VCLR;
            public Exception? FLMV;
            public Exception? FLAV;
            public Exception? QUAL;
            public Exception? DOFT;
            public Exception? DPLT;
            public Exception? OCOR;
            public Exception? LVCR;
            public Exception? ATAC;
            public Exception? PLRL;
            public Exception? XNAM;
            public MaskItem<Exception?, HnamHnam.ErrorMask?>? HNAM;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? RVSH;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponse_FieldIndex.WEMFile:
                        return WEMFile;
                    case DialogResponse_FieldIndex.TRDAUnknown:
                        return TRDAUnknown;
                    case DialogResponse_FieldIndex.TROTs:
                        return TROTs;
                    case DialogResponse_FieldIndex.Text:
                        return Text;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        return ScriptNotes;
                    case DialogResponse_FieldIndex.Edits:
                        return Edits;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        return AlternateLipText;
                    case DialogResponse_FieldIndex.TextHash:
                        return TextHash;
                    case DialogResponse_FieldIndex.BNAM:
                        return BNAM;
                    case DialogResponse_FieldIndex.STRV:
                        return STRV;
                    case DialogResponse_FieldIndex.VCLR:
                        return VCLR;
                    case DialogResponse_FieldIndex.FLMV:
                        return FLMV;
                    case DialogResponse_FieldIndex.FLAV:
                        return FLAV;
                    case DialogResponse_FieldIndex.QUAL:
                        return QUAL;
                    case DialogResponse_FieldIndex.DOFT:
                        return DOFT;
                    case DialogResponse_FieldIndex.DPLT:
                        return DPLT;
                    case DialogResponse_FieldIndex.OCOR:
                        return OCOR;
                    case DialogResponse_FieldIndex.LVCR:
                        return LVCR;
                    case DialogResponse_FieldIndex.ATAC:
                        return ATAC;
                    case DialogResponse_FieldIndex.PLRL:
                        return PLRL;
                    case DialogResponse_FieldIndex.XNAM:
                        return XNAM;
                    case DialogResponse_FieldIndex.HNAM:
                        return HNAM;
                    case DialogResponse_FieldIndex.RVSH:
                        return RVSH;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = ex;
                        break;
                    case DialogResponse_FieldIndex.TRDAUnknown:
                        this.TRDAUnknown = ex;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = ex;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = ex;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = ex;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = ex;
                        break;
                    case DialogResponse_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case DialogResponse_FieldIndex.STRV:
                        this.STRV = ex;
                        break;
                    case DialogResponse_FieldIndex.VCLR:
                        this.VCLR = ex;
                        break;
                    case DialogResponse_FieldIndex.FLMV:
                        this.FLMV = ex;
                        break;
                    case DialogResponse_FieldIndex.FLAV:
                        this.FLAV = ex;
                        break;
                    case DialogResponse_FieldIndex.QUAL:
                        this.QUAL = ex;
                        break;
                    case DialogResponse_FieldIndex.DOFT:
                        this.DOFT = ex;
                        break;
                    case DialogResponse_FieldIndex.DPLT:
                        this.DPLT = ex;
                        break;
                    case DialogResponse_FieldIndex.OCOR:
                        this.OCOR = ex;
                        break;
                    case DialogResponse_FieldIndex.LVCR:
                        this.LVCR = ex;
                        break;
                    case DialogResponse_FieldIndex.ATAC:
                        this.ATAC = ex;
                        break;
                    case DialogResponse_FieldIndex.PLRL:
                        this.PLRL = ex;
                        break;
                    case DialogResponse_FieldIndex.XNAM:
                        this.XNAM = ex;
                        break;
                    case DialogResponse_FieldIndex.HNAM:
                        this.HNAM = new MaskItem<Exception?, HnamHnam.ErrorMask?>(ex, null);
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.WEMFile:
                        this.WEMFile = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TRDAUnknown:
                        this.TRDAUnknown = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TROTs:
                        this.TROTs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.STRV:
                        this.STRV = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.VCLR:
                        this.VCLR = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.FLMV:
                        this.FLMV = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.FLAV:
                        this.FLAV = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.QUAL:
                        this.QUAL = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.DOFT:
                        this.DOFT = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.DPLT:
                        this.DPLT = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.OCOR:
                        this.OCOR = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.LVCR:
                        this.LVCR = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ATAC:
                        this.ATAC = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.PLRL:
                        this.PLRL = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.XNAM:
                        this.XNAM = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.HNAM:
                        this.HNAM = (MaskItem<Exception?, HnamHnam.ErrorMask?>?)obj;
                        break;
                    case DialogResponse_FieldIndex.RVSH:
                        this.RVSH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (WEMFile != null) return true;
                if (TRDAUnknown != null) return true;
                if (TROTs != null) return true;
                if (Text != null) return true;
                if (ScriptNotes != null) return true;
                if (Edits != null) return true;
                if (AlternateLipText != null) return true;
                if (TextHash != null) return true;
                if (BNAM != null) return true;
                if (STRV != null) return true;
                if (VCLR != null) return true;
                if (FLMV != null) return true;
                if (FLAV != null) return true;
                if (QUAL != null) return true;
                if (DOFT != null) return true;
                if (DPLT != null) return true;
                if (OCOR != null) return true;
                if (LVCR != null) return true;
                if (ATAC != null) return true;
                if (PLRL != null) return true;
                if (XNAM != null) return true;
                if (HNAM != null) return true;
                if (RVSH != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Emotion, "Emotion");
                }
                {
                    sb.AppendItem(WEMFile, "WEMFile");
                }
                {
                    sb.AppendItem(TRDAUnknown, "TRDAUnknown");
                }
                if (TROTs is {} TROTsItem)
                {
                    sb.AppendLine("TROTs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TROTsItem.Overall);
                        if (TROTsItem.Specific != null)
                        {
                            foreach (var subItem in TROTsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Text, "Text");
                }
                {
                    sb.AppendItem(ScriptNotes, "ScriptNotes");
                }
                {
                    sb.AppendItem(Edits, "Edits");
                }
                {
                    sb.AppendItem(AlternateLipText, "AlternateLipText");
                }
                {
                    sb.AppendItem(TextHash, "TextHash");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(STRV, "STRV");
                }
                {
                    sb.AppendItem(VCLR, "VCLR");
                }
                {
                    sb.AppendItem(FLMV, "FLMV");
                }
                {
                    sb.AppendItem(FLAV, "FLAV");
                }
                {
                    sb.AppendItem(QUAL, "QUAL");
                }
                {
                    sb.AppendItem(DOFT, "DOFT");
                }
                {
                    sb.AppendItem(DPLT, "DPLT");
                }
                {
                    sb.AppendItem(OCOR, "OCOR");
                }
                {
                    sb.AppendItem(LVCR, "LVCR");
                }
                {
                    sb.AppendItem(ATAC, "ATAC");
                }
                {
                    sb.AppendItem(PLRL, "PLRL");
                }
                {
                    sb.AppendItem(XNAM, "XNAM");
                }
                HNAM?.Print(sb);
                RVSH?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.WEMFile = this.WEMFile.Combine(rhs.WEMFile);
                ret.TRDAUnknown = this.TRDAUnknown.Combine(rhs.TRDAUnknown);
                ret.TROTs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponseTROT.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TROTs?.Overall, rhs.TROTs?.Overall), Noggog.ExceptionExt.Combine(this.TROTs?.Specific, rhs.TROTs?.Specific));
                ret.Text = this.Text.Combine(rhs.Text);
                ret.ScriptNotes = this.ScriptNotes.Combine(rhs.ScriptNotes);
                ret.Edits = this.Edits.Combine(rhs.Edits);
                ret.AlternateLipText = this.AlternateLipText.Combine(rhs.AlternateLipText);
                ret.TextHash = this.TextHash.Combine(rhs.TextHash);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.STRV = this.STRV.Combine(rhs.STRV);
                ret.VCLR = this.VCLR.Combine(rhs.VCLR);
                ret.FLMV = this.FLMV.Combine(rhs.FLMV);
                ret.FLAV = this.FLAV.Combine(rhs.FLAV);
                ret.QUAL = this.QUAL.Combine(rhs.QUAL);
                ret.DOFT = this.DOFT.Combine(rhs.DOFT);
                ret.DPLT = this.DPLT.Combine(rhs.DPLT);
                ret.OCOR = this.OCOR.Combine(rhs.OCOR);
                ret.LVCR = this.LVCR.Combine(rhs.LVCR);
                ret.ATAC = this.ATAC.Combine(rhs.ATAC);
                ret.PLRL = this.PLRL.Combine(rhs.PLRL);
                ret.XNAM = this.XNAM.Combine(rhs.XNAM);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM, (l, r) => l.Combine(r));
                ret.RVSH = this.RVSH.Combine(rhs.RVSH, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Emotion;
            public bool WEMFile;
            public bool TRDAUnknown;
            public DialogResponseTROT.TranslationMask? TROTs;
            public bool Text;
            public bool ScriptNotes;
            public bool Edits;
            public bool AlternateLipText;
            public bool TextHash;
            public bool BNAM;
            public bool STRV;
            public bool VCLR;
            public bool FLMV;
            public bool FLAV;
            public bool QUAL;
            public bool DOFT;
            public bool DPLT;
            public bool OCOR;
            public bool LVCR;
            public bool ATAC;
            public bool PLRL;
            public bool XNAM;
            public HnamHnam.TranslationMask? HNAM;
            public SoundReference.TranslationMask? RVSH;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Emotion = defaultOn;
                this.WEMFile = defaultOn;
                this.TRDAUnknown = defaultOn;
                this.Text = defaultOn;
                this.ScriptNotes = defaultOn;
                this.Edits = defaultOn;
                this.AlternateLipText = defaultOn;
                this.TextHash = defaultOn;
                this.BNAM = defaultOn;
                this.STRV = defaultOn;
                this.VCLR = defaultOn;
                this.FLMV = defaultOn;
                this.FLAV = defaultOn;
                this.QUAL = defaultOn;
                this.DOFT = defaultOn;
                this.DPLT = defaultOn;
                this.OCOR = defaultOn;
                this.LVCR = defaultOn;
                this.ATAC = defaultOn;
                this.PLRL = defaultOn;
                this.XNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((WEMFile, null));
                ret.Add((TRDAUnknown, null));
                ret.Add((TROTs == null ? DefaultOn : !TROTs.GetCrystal().CopyNothing, TROTs?.GetCrystal()));
                ret.Add((Text, null));
                ret.Add((ScriptNotes, null));
                ret.Add((Edits, null));
                ret.Add((AlternateLipText, null));
                ret.Add((TextHash, null));
                ret.Add((BNAM, null));
                ret.Add((STRV, null));
                ret.Add((VCLR, null));
                ret.Add((FLMV, null));
                ret.Add((FLAV, null));
                ret.Add((QUAL, null));
                ret.Add((DOFT, null));
                ret.Add((DPLT, null));
                ret.Add((OCOR, null));
                ret.Add((LVCR, null));
                ret.Add((ATAC, null));
                ret.Add((PLRL, null));
                ret.Add((XNAM, null));
                ret.Add((HNAM != null ? HNAM.OnOverall : DefaultOn, HNAM?.GetCrystal()));
                ret.Add((RVSH != null ? RVSH.OnOverall : DefaultOn, RVSH?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponse();
            ((DialogResponseSetterCommon)((IDialogResponseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponse item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponse GetNew()
        {
            return new DialogResponse();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponse>
    {
        new IFormLink<IKeywordGetter> Emotion { get; set; }
        new UInt32 WEMFile { get; set; }
        new Single TRDAUnknown { get; set; }
        new ExtendedList<DialogResponseTROT> TROTs { get; }
        new TranslatedString Text { get; set; }
        new String ScriptNotes { get; set; }
        new String Edits { get; set; }
        new String AlternateLipText { get; set; }
        new MemorySlice<Byte>? TextHash { get; set; }
        new IFormLinkNullable<IIdleAnimationGetter> BNAM { get; set; }
        new String? STRV { get; set; }
        new IFormLinkNullable<IKeywordGetter> VCLR { get; set; }
        new MemorySlice<Byte>? FLMV { get; set; }
        new MemorySlice<Byte>? FLAV { get; set; }
        new Boolean QUAL { get; set; }
        new Boolean DOFT { get; set; }
        new Boolean DPLT { get; set; }
        new Boolean OCOR { get; set; }
        new Single? LVCR { get; set; }
        new MemorySlice<Byte>? ATAC { get; set; }
        new Boolean PLRL { get; set; }
        new Boolean XNAM { get; set; }
        new HnamHnam? HNAM { get; set; }
        new SoundReference? RVSH { get; set; }
    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponseGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        IFormLinkGetter<IKeywordGetter> Emotion { get; }
        UInt32 WEMFile { get; }
        Single TRDAUnknown { get; }
        IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; }
        ITranslatedStringGetter Text { get; }
        String ScriptNotes { get; }
        String Edits { get; }
        String AlternateLipText { get; }
        ReadOnlyMemorySlice<Byte>? TextHash { get; }
        IFormLinkNullableGetter<IIdleAnimationGetter> BNAM { get; }
        String? STRV { get; }
        IFormLinkNullableGetter<IKeywordGetter> VCLR { get; }
        ReadOnlyMemorySlice<Byte>? FLMV { get; }
        ReadOnlyMemorySlice<Byte>? FLAV { get; }
        Boolean QUAL { get; }
        Boolean DOFT { get; }
        Boolean DPLT { get; }
        Boolean OCOR { get; }
        Single? LVCR { get; }
        ReadOnlyMemorySlice<Byte>? ATAC { get; }
        Boolean PLRL { get; }
        Boolean XNAM { get; }
        IHnamHnamGetter? HNAM { get; }
        ISoundReferenceGetter? RVSH { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponse item)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponse.Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? equalsMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? copyMask = null)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        WEMFile = 1,
        TRDAUnknown = 2,
        TROTs = 3,
        Text = 4,
        ScriptNotes = 5,
        Edits = 6,
        AlternateLipText = 7,
        TextHash = 8,
        BNAM = 9,
        STRV = 10,
        VCLR = 11,
        FLMV = 12,
        FLAV = 13,
        QUAL = 14,
        DOFT = 15,
        DPLT = 16,
        OCOR = 17,
        LVCR = 18,
        ATAC = 19,
        PLRL = 20,
        XNAM = 21,
        HNAM = 22,
        RVSH = 23,
    }
    #endregion

    #region Registration
    internal partial class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(DialogResponse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRDA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TRDA);
            var all = RecordCollection.Factory(
                RecordTypes.TRDA,
                RecordTypes.TROT,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM9,
                RecordTypes.BNAM,
                RecordTypes.STRV,
                RecordTypes.VCLR,
                RecordTypes.FLMV,
                RecordTypes.FLAV,
                RecordTypes.QUAL,
                RecordTypes.DOFT,
                RecordTypes.DPLT,
                RecordTypes.OCOR,
                RecordTypes.LVCR,
                RecordTypes.ATAC,
                RecordTypes.PLRL,
                RecordTypes.XNAM,
                RecordTypes.HNAM,
                RecordTypes.RVSH);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponseSetterCommon
    {
        public static readonly DialogResponseSetterCommon Instance = new DialogResponseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponse item)
        {
            ClearPartial();
            item.Emotion.Clear();
            item.WEMFile = default(UInt32);
            item.TRDAUnknown = default(Single);
            item.TROTs.Clear();
            item.Text.Clear();
            item.ScriptNotes = string.Empty;
            item.Edits = string.Empty;
            item.AlternateLipText = string.Empty;
            item.TextHash = default;
            item.BNAM.Clear();
            item.STRV = default;
            item.VCLR.Clear();
            item.FLMV = default;
            item.FLAV = default;
            item.QUAL = default(Boolean);
            item.DOFT = default(Boolean);
            item.DPLT = default(Boolean);
            item.OCOR = default(Boolean);
            item.LVCR = default;
            item.ATAC = default;
            item.PLRL = default(Boolean);
            item.XNAM = default(Boolean);
            item.HNAM = null;
            item.RVSH = null;
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponse obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Emotion.Relink(mapping);
            obj.TROTs.RemapLinks(mapping);
            obj.BNAM.Relink(mapping);
            obj.VCLR.Relink(mapping);
            obj.RVSH?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DialogResponseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        public DialogResponse.Mask<bool> GetEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse.Mask<bool>(false);
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Emotion = item.Emotion.Equals(rhs.Emotion);
            ret.WEMFile = item.WEMFile == rhs.WEMFile;
            ret.TRDAUnknown = item.TRDAUnknown.EqualsWithin(rhs.TRDAUnknown);
            ret.TROTs = item.TROTs.CollectionEqualsHelper(
                rhs.TROTs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.ScriptNotes = string.Equals(item.ScriptNotes, rhs.ScriptNotes);
            ret.Edits = string.Equals(item.Edits, rhs.Edits);
            ret.AlternateLipText = string.Equals(item.AlternateLipText, rhs.AlternateLipText);
            ret.TextHash = MemorySliceExt.SequenceEqual(item.TextHash, rhs.TextHash);
            ret.BNAM = item.BNAM.Equals(rhs.BNAM);
            ret.STRV = string.Equals(item.STRV, rhs.STRV);
            ret.VCLR = item.VCLR.Equals(rhs.VCLR);
            ret.FLMV = MemorySliceExt.SequenceEqual(item.FLMV, rhs.FLMV);
            ret.FLAV = MemorySliceExt.SequenceEqual(item.FLAV, rhs.FLAV);
            ret.QUAL = item.QUAL == rhs.QUAL;
            ret.DOFT = item.DOFT == rhs.DOFT;
            ret.DPLT = item.DPLT == rhs.DPLT;
            ret.OCOR = item.OCOR == rhs.OCOR;
            ret.LVCR = item.LVCR.EqualsWithin(rhs.LVCR);
            ret.ATAC = MemorySliceExt.SequenceEqual(item.ATAC, rhs.ATAC);
            ret.PLRL = item.PLRL == rhs.PLRL;
            ret.XNAM = item.XNAM == rhs.XNAM;
            ret.HNAM = EqualsMaskHelper.EqualsHelper(
                item.HNAM,
                rhs.HNAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RVSH = EqualsMaskHelper.EqualsHelper(
                item.RVSH,
                rhs.RVSH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponse =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponse) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                sb.AppendItem(item.Emotion.FormKey, "Emotion");
            }
            if (printMask?.WEMFile ?? true)
            {
                sb.AppendItem(item.WEMFile, "WEMFile");
            }
            if (printMask?.TRDAUnknown ?? true)
            {
                sb.AppendItem(item.TRDAUnknown, "TRDAUnknown");
            }
            if (printMask?.TROTs?.Overall ?? true)
            {
                sb.AppendLine("TROTs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TROTs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Text ?? true)
            {
                sb.AppendItem(item.Text, "Text");
            }
            if (printMask?.ScriptNotes ?? true)
            {
                sb.AppendItem(item.ScriptNotes, "ScriptNotes");
            }
            if (printMask?.Edits ?? true)
            {
                sb.AppendItem(item.Edits, "Edits");
            }
            if (printMask?.AlternateLipText ?? true)
            {
                sb.AppendItem(item.AlternateLipText, "AlternateLipText");
            }
            if ((printMask?.TextHash ?? true)
                && item.TextHash is {} TextHashItem)
            {
                sb.AppendLine($"TextHash => {SpanExt.ToHexString(TextHashItem)}");
            }
            if (printMask?.BNAM ?? true)
            {
                sb.AppendItem(item.BNAM.FormKeyNullable, "BNAM");
            }
            if ((printMask?.STRV ?? true)
                && item.STRV is {} STRVItem)
            {
                sb.AppendItem(STRVItem, "STRV");
            }
            if (printMask?.VCLR ?? true)
            {
                sb.AppendItem(item.VCLR.FormKeyNullable, "VCLR");
            }
            if ((printMask?.FLMV ?? true)
                && item.FLMV is {} FLMVItem)
            {
                sb.AppendLine($"FLMV => {SpanExt.ToHexString(FLMVItem)}");
            }
            if ((printMask?.FLAV ?? true)
                && item.FLAV is {} FLAVItem)
            {
                sb.AppendLine($"FLAV => {SpanExt.ToHexString(FLAVItem)}");
            }
            if (printMask?.QUAL ?? true)
            {
                sb.AppendItem(item.QUAL, "QUAL");
            }
            if (printMask?.DOFT ?? true)
            {
                sb.AppendItem(item.DOFT, "DOFT");
            }
            if (printMask?.DPLT ?? true)
            {
                sb.AppendItem(item.DPLT, "DPLT");
            }
            if (printMask?.OCOR ?? true)
            {
                sb.AppendItem(item.OCOR, "OCOR");
            }
            if ((printMask?.LVCR ?? true)
                && item.LVCR is {} LVCRItem)
            {
                sb.AppendItem(LVCRItem, "LVCR");
            }
            if ((printMask?.ATAC ?? true)
                && item.ATAC is {} ATACItem)
            {
                sb.AppendLine($"ATAC => {SpanExt.ToHexString(ATACItem)}");
            }
            if (printMask?.PLRL ?? true)
            {
                sb.AppendItem(item.PLRL, "PLRL");
            }
            if (printMask?.XNAM ?? true)
            {
                sb.AppendItem(item.XNAM, "XNAM");
            }
            if ((printMask?.HNAM?.Overall ?? true)
                && item.HNAM is {} HNAMItem)
            {
                HNAMItem?.Print(sb, "HNAM");
            }
            if ((printMask?.RVSH?.Overall ?? true)
                && item.RVSH is {} RVSHItem)
            {
                RVSHItem?.Print(sb, "RVSH");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseGetter? lhs,
            IDialogResponseGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                if (!lhs.Emotion.Equals(rhs.Emotion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                if (lhs.WEMFile != rhs.WEMFile) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TRDAUnknown) ?? true))
            {
                if (!lhs.TRDAUnknown.EqualsWithin(rhs.TRDAUnknown)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                if (!lhs.TROTs.SequenceEqual(rhs.TROTs, (l, r) => ((DialogResponseTROTCommon)((IDialogResponseTROTGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.TROTs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Text) ?? true))
            {
                if (!object.Equals(lhs.Text, rhs.Text)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                if (!string.Equals(lhs.ScriptNotes, rhs.ScriptNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                if (!string.Equals(lhs.Edits, rhs.Edits)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                if (!string.Equals(lhs.AlternateLipText, rhs.AlternateLipText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextHash, rhs.TextHash)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.BNAM) ?? true))
            {
                if (!lhs.BNAM.Equals(rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.STRV) ?? true))
            {
                if (!string.Equals(lhs.STRV, rhs.STRV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.VCLR) ?? true))
            {
                if (!lhs.VCLR.Equals(rhs.VCLR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.FLMV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLMV, rhs.FLMV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.FLAV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLAV, rhs.FLAV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.QUAL) ?? true))
            {
                if (lhs.QUAL != rhs.QUAL) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DOFT) ?? true))
            {
                if (lhs.DOFT != rhs.DOFT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DPLT) ?? true))
            {
                if (lhs.DPLT != rhs.DPLT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.OCOR) ?? true))
            {
                if (lhs.OCOR != rhs.OCOR) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.LVCR) ?? true))
            {
                if (!lhs.LVCR.EqualsWithin(rhs.LVCR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ATAC) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ATAC, rhs.ATAC)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.PLRL) ?? true))
            {
                if (lhs.PLRL != rhs.PLRL) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.XNAM) ?? true))
            {
                if (lhs.XNAM != rhs.XNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HNAM, rhs.HNAM, out var lhsHNAM, out var rhsHNAM, out var isHNAMEqual))
                {
                    if (!((HnamHnamCommon)((IHnamHnamGetter)lhsHNAM).CommonInstance()!).Equals(lhsHNAM, rhsHNAM, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HNAM))) return false;
                }
                else if (!isHNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RVSH, rhs.RVSH, out var lhsRVSH, out var rhsRVSH, out var isRVSHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsRVSH).CommonInstance()!).Equals(lhsRVSH, rhsRVSH, equalsMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH))) return false;
                }
                else if (!isRVSHEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.WEMFile);
            hash.Add(item.TRDAUnknown);
            hash.Add(item.TROTs);
            hash.Add(item.Text);
            hash.Add(item.ScriptNotes);
            hash.Add(item.Edits);
            hash.Add(item.AlternateLipText);
            if (item.TextHash is {} TextHashItem)
            {
                hash.Add(TextHashItem);
            }
            hash.Add(item.BNAM);
            if (item.STRV is {} STRVitem)
            {
                hash.Add(STRVitem);
            }
            hash.Add(item.VCLR);
            if (item.FLMV is {} FLMVItem)
            {
                hash.Add(FLMVItem);
            }
            if (item.FLAV is {} FLAVItem)
            {
                hash.Add(FLAVItem);
            }
            hash.Add(item.QUAL);
            hash.Add(item.DOFT);
            hash.Add(item.DPLT);
            hash.Add(item.OCOR);
            if (item.LVCR is {} LVCRitem)
            {
                hash.Add(LVCRitem);
            }
            if (item.ATAC is {} ATACItem)
            {
                hash.Add(ATACItem);
            }
            hash.Add(item.PLRL);
            hash.Add(item.XNAM);
            if (item.HNAM is {} HNAMitem)
            {
                hash.Add(HNAMitem);
            }
            if (item.RVSH is {} RVSHitem)
            {
                hash.Add(RVSHitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponse.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponseGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Emotion);
            foreach (var item in obj.TROTs.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.BNAM, out var BNAMInfo))
            {
                yield return BNAMInfo;
            }
            if (FormLinkInformation.TryFactory(obj.VCLR, out var VCLRInfo))
            {
                yield return VCLRInfo;
            }
            if (obj.RVSH is {} RVSHItems)
            {
                foreach (var item in RVSHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogResponseSetterTranslationCommon
    {
        public static readonly DialogResponseSetterTranslationCommon Instance = new DialogResponseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                item.Emotion.SetTo(rhs.Emotion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.WEMFile) ?? true))
            {
                item.WEMFile = rhs.WEMFile;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TRDAUnknown) ?? true))
            {
                item.TRDAUnknown = rhs.TRDAUnknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TROTs) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.TROTs);
                try
                {
                    item.TROTs.SetTo(
                        rhs.TROTs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                item.ScriptNotes = rhs.ScriptNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                item.Edits = rhs.Edits;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                item.AlternateLipText = rhs.AlternateLipText;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if(rhs.TextHash is {} TextHashrhs)
                {
                    item.TextHash = TextHashrhs.ToArray();
                }
                else
                {
                    item.TextHash = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.BNAM) ?? true))
            {
                item.BNAM.SetTo(rhs.BNAM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.STRV) ?? true))
            {
                item.STRV = rhs.STRV;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.VCLR) ?? true))
            {
                item.VCLR.SetTo(rhs.VCLR.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.FLMV) ?? true))
            {
                if(rhs.FLMV is {} FLMVrhs)
                {
                    item.FLMV = FLMVrhs.ToArray();
                }
                else
                {
                    item.FLMV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.FLAV) ?? true))
            {
                if(rhs.FLAV is {} FLAVrhs)
                {
                    item.FLAV = FLAVrhs.ToArray();
                }
                else
                {
                    item.FLAV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.QUAL) ?? true))
            {
                item.QUAL = rhs.QUAL;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DOFT) ?? true))
            {
                item.DOFT = rhs.DOFT;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.DPLT) ?? true))
            {
                item.DPLT = rhs.DPLT;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.OCOR) ?? true))
            {
                item.OCOR = rhs.OCOR;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.LVCR) ?? true))
            {
                item.LVCR = rhs.LVCR;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ATAC) ?? true))
            {
                if(rhs.ATAC is {} ATACrhs)
                {
                    item.ATAC = ATACrhs.ToArray();
                }
                else
                {
                    item.ATAC = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.PLRL) ?? true))
            {
                item.PLRL = rhs.PLRL;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.XNAM) ?? true))
            {
                item.XNAM = rhs.XNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.HNAM) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.HNAM);
                try
                {
                    if(rhs.HNAM is {} rhsHNAM)
                    {
                        item.HNAM = rhsHNAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.HNAM));
                    }
                    else
                    {
                        item.HNAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.RVSH) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponse_FieldIndex.RVSH);
                try
                {
                    if(rhs.RVSH is {} rhsRVSH)
                    {
                        item.RVSH = rhsRVSH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponse_FieldIndex.RVSH));
                    }
                    else
                    {
                        item.RVSH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DialogResponseBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TRDA)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Emotion);
                writer.Write(item.WEMFile);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TRDAUnknown);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseTROTGetter>.Instance.Write(
                writer: writer,
                items: item.TROTs,
                transl: (MutagenWriter subWriter, IDialogResponseTROTGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseTROTBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Text,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.IL);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptNotes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Edits,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlternateLipText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextHash,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.STRV,
                header: translationParams.ConvertToCustom(RecordTypes.STRV),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VCLR,
                header: translationParams.ConvertToCustom(RecordTypes.VCLR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLMV,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLAV,
                header: translationParams.ConvertToCustom(RecordTypes.FLAV));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.QUAL,
                header: translationParams.ConvertToCustom(RecordTypes.QUAL));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.DOFT,
                header: translationParams.ConvertToCustom(RecordTypes.DOFT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.DPLT,
                header: translationParams.ConvertToCustom(RecordTypes.DPLT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.OCOR,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LVCR,
                header: translationParams.ConvertToCustom(RecordTypes.LVCR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ATAC,
                header: translationParams.ConvertToCustom(RecordTypes.ATAC));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.PLRL,
                header: translationParams.ConvertToCustom(RecordTypes.PLRL));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.XNAM,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            if (item.HNAM is {} HNAMItem)
            {
                ((HnamHnamBinaryWriteTranslation)((IBinaryItem)HNAMItem).BinaryWriteTranslator).Write(
                    item: HNAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.RVSH is {} RVSHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.RVSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)RVSHItem).BinaryWriteTranslator).Write(
                        item: RVSHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponseGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponseBinaryCreateTranslation
    {
        public static readonly DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponse item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.TRDAUnknown, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Emotion.SetTo(
                        FormLinkBinaryTranslation.Instance.Parse(
                            reader: frame,
                            maxIsNone: true));
                    if (dataFrame.Remaining < 4) return null;
                    item.WEMFile = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.TRDAUnknown = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)DialogResponse_FieldIndex.TRDAUnknown;
                }
                case RecordTypeInts.TROT:
                {
                    item.TROTs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponseTROT>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponseTROT_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponseTROT.TryCreateFromBinary));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.IL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Edits = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateLipText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextHash = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.BNAM;
                }
                case RecordTypeInts.STRV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.STRV = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.STRV;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VCLR.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.VCLR;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLMV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.FLMV;
                }
                case RecordTypeInts.FLAV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLAV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.FLAV;
                }
                case RecordTypeInts.QUAL:
                {
                    item.QUAL = true;
                    return (int)DialogResponse_FieldIndex.QUAL;
                }
                case RecordTypeInts.DOFT:
                {
                    item.DOFT = true;
                    return (int)DialogResponse_FieldIndex.DOFT;
                }
                case RecordTypeInts.DPLT:
                {
                    item.DPLT = true;
                    return (int)DialogResponse_FieldIndex.DPLT;
                }
                case RecordTypeInts.OCOR:
                {
                    item.OCOR = true;
                    return (int)DialogResponse_FieldIndex.OCOR;
                }
                case RecordTypeInts.LVCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LVCR = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.LVCR;
                }
                case RecordTypeInts.ATAC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ATAC = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.ATAC;
                }
                case RecordTypeInts.PLRL:
                {
                    item.PLRL = true;
                    return (int)DialogResponse_FieldIndex.PLRL;
                }
                case RecordTypeInts.XNAM:
                {
                    item.XNAM = true;
                    return (int)DialogResponse_FieldIndex.XNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HNAM = Mutagen.Bethesda.Starfield.HnamHnam.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HNAM;
                }
                case RecordTypeInts.RVSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RVSH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class DialogResponseBinaryOverlay :
        PluginBinaryOverlay,
        IDialogResponseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TRDALocation;
        #region Emotion
        private int _EmotionLocation => _TRDALocation!.Value.Min;
        private bool _Emotion_IsSet => _TRDALocation.HasValue;
        public IFormLinkGetter<IKeywordGetter> Emotion => _Emotion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(_package, _recordData.Span.Slice(_EmotionLocation, 0x4), isSet: _Emotion_IsSet, maxIsNull: true) : FormLink<IKeywordGetter>.Null;
        #endregion
        #region WEMFile
        private int _WEMFileLocation => _TRDALocation!.Value.Min + 0x4;
        private bool _WEMFile_IsSet => _TRDALocation.HasValue;
        public UInt32 WEMFile => _WEMFile_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_WEMFileLocation, 4)) : default(UInt32);
        #endregion
        #region TRDAUnknown
        private int _TRDAUnknownLocation => _TRDALocation!.Value.Min + 0x8;
        private bool _TRDAUnknown_IsSet => _TRDALocation.HasValue;
        public Single TRDAUnknown => _TRDAUnknown_IsSet ? _recordData.Slice(_TRDAUnknownLocation, 4).Float() : default(Single);
        #endregion
        public IReadOnlyList<IDialogResponseTROTGetter> TROTs { get; private set; } = Array.Empty<IDialogResponseTROTGetter>();
        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextLocation.Value, _package.MetaData.Constants), StringsSource.IL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        #region ScriptNotes
        private int? _ScriptNotesLocation;
        public String ScriptNotes => _ScriptNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Edits
        private int? _EditsLocation;
        public String Edits => _EditsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EditsLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region AlternateLipText
        private int? _AlternateLipTextLocation;
        public String AlternateLipText => _AlternateLipTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AlternateLipTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TextHash
        private int? _TextHashLocation;
        public ReadOnlyMemorySlice<Byte>? TextHash => _TextHashLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextHashLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public IFormLinkNullableGetter<IIdleAnimationGetter> BNAM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IIdleAnimationGetter>(_package, _recordData, _BNAMLocation);
        #endregion
        #region STRV
        private int? _STRVLocation;
        public String? STRV => _STRVLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _STRVLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region VCLR
        private int? _VCLRLocation;
        public IFormLinkNullableGetter<IKeywordGetter> VCLR => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _VCLRLocation);
        #endregion
        #region FLMV
        private int? _FLMVLocation;
        public ReadOnlyMemorySlice<Byte>? FLMV => _FLMVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLMVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FLAV
        private int? _FLAVLocation;
        public ReadOnlyMemorySlice<Byte>? FLAV => _FLAVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLAVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region QUAL
        private int? _QUALLocation;
        public Boolean QUAL => _QUALLocation.HasValue ? true : default(Boolean);
        #endregion
        #region DOFT
        private int? _DOFTLocation;
        public Boolean DOFT => _DOFTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region DPLT
        private int? _DPLTLocation;
        public Boolean DPLT => _DPLTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region OCOR
        private int? _OCORLocation;
        public Boolean OCOR => _OCORLocation.HasValue ? true : default(Boolean);
        #endregion
        #region LVCR
        private int? _LVCRLocation;
        public Single? LVCR => _LVCRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LVCRLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ATAC
        private int? _ATACLocation;
        public ReadOnlyMemorySlice<Byte>? ATAC => _ATACLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ATACLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region PLRL
        private int? _PLRLLocation;
        public Boolean PLRL => _PLRLLocation.HasValue ? true : default(Boolean);
        #endregion
        #region XNAM
        private int? _XNAMLocation;
        public Boolean XNAM => _XNAMLocation.HasValue ? true : default(Boolean);
        #endregion
        public IHnamHnamGetter? HNAM { get; private set; }
        public ISoundReferenceGetter? RVSH { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponseBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponseGetter DialogResponseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponseBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponseGetter DialogResponseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.TRDAUnknown, translationParams)) return ParseResult.Stop;
                    _TRDALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DialogResponse_FieldIndex.TRDAUnknown;
                }
                case RecordTypeInts.TROT:
                {
                    this.TROTs = BinaryOverlayList.FactoryByArray<IDialogResponseTROTGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => DialogResponseTROTBinaryOverlay.DialogResponseTROTFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: DialogResponseTROT_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogResponse_FieldIndex.TROTs;
                }
                case RecordTypeInts.NAM1:
                {
                    _TextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    _ScriptNotesLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    _EditsLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    _AlternateLipTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.NAM9:
                {
                    _TextHashLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.BNAM;
                }
                case RecordTypeInts.STRV:
                {
                    _STRVLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.STRV;
                }
                case RecordTypeInts.VCLR:
                {
                    _VCLRLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.VCLR;
                }
                case RecordTypeInts.FLMV:
                {
                    _FLMVLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.FLMV;
                }
                case RecordTypeInts.FLAV:
                {
                    _FLAVLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.FLAV;
                }
                case RecordTypeInts.QUAL:
                {
                    _QUALLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.QUAL;
                }
                case RecordTypeInts.DOFT:
                {
                    _DOFTLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.DOFT;
                }
                case RecordTypeInts.DPLT:
                {
                    _DPLTLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.DPLT;
                }
                case RecordTypeInts.OCOR:
                {
                    _OCORLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.OCOR;
                }
                case RecordTypeInts.LVCR:
                {
                    _LVCRLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.LVCR;
                }
                case RecordTypeInts.ATAC:
                {
                    _ATACLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ATAC;
                }
                case RecordTypeInts.PLRL:
                {
                    _PLRLLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.PLRL;
                }
                case RecordTypeInts.XNAM:
                {
                    _XNAMLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.XNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    this.HNAM = HnamHnamBinaryOverlay.HnamHnamFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.HNAM;
                }
                case RecordTypeInts.RVSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RVSH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)DialogResponse_FieldIndex.RVSH;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

