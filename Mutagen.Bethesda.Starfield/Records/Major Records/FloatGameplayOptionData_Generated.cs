/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class FloatGameplayOptionData :
        AGameplayOptionData,
        IEquatable<IFloatGameplayOptionDataGetter>,
        IFloatGameplayOptionData,
        ILoquiObjectSetter<FloatGameplayOptionData>
    {
        #region Ctor
        public FloatGameplayOptionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Value1
        public Single? Value1 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IFloatGameplayOptionDataGetter.Value1 => this.Value1;
        #endregion
        #region Value2
        public Single? Value2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IFloatGameplayOptionDataGetter.Value2 => this.Value2;
        #endregion
        #region Min
        public Single Min { get; set; } = default(Single);
        #endregion
        #region Max
        public Single Max { get; set; } = default(Single);
        #endregion
        #region Step
        public Single Step { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloatGameplayOptionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFloatGameplayOptionDataGetter rhs) return false;
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloatGameplayOptionDataGetter? obj)
        {
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AGameplayOptionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Value1 = initialValue;
                this.Value2 = initialValue;
                this.Min = initialValue;
                this.Max = initialValue;
                this.Step = initialValue;
            }

            public Mask(
                TItem Value1,
                TItem Value2,
                TItem Min,
                TItem Max,
                TItem Step)
            : base()
            {
                this.Value1 = Value1;
                this.Value2 = Value2;
                this.Min = Min;
                this.Max = Max;
                this.Step = Step;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Value1;
            public TItem Value2;
            public TItem Min;
            public TItem Max;
            public TItem Step;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Value1, rhs.Value1)) return false;
                if (!object.Equals(this.Value2, rhs.Value2)) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                if (!object.Equals(this.Step, rhs.Step)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Value1);
                hash.Add(this.Value2);
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(this.Step);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Value1)) return false;
                if (!eval(this.Value2)) return false;
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                if (!eval(this.Step)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Value1)) return true;
                if (eval(this.Value2)) return true;
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                if (eval(this.Step)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FloatGameplayOptionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Value1 = eval(this.Value1);
                obj.Value2 = eval(this.Value2);
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
                obj.Step = eval(this.Step);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FloatGameplayOptionData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FloatGameplayOptionData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FloatGameplayOptionData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Value1 ?? true)
                    {
                        sb.AppendItem(Value1, "Value1");
                    }
                    if (printMask?.Value2 ?? true)
                    {
                        sb.AppendItem(Value2, "Value2");
                    }
                    if (printMask?.Min ?? true)
                    {
                        sb.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        sb.AppendItem(Max, "Max");
                    }
                    if (printMask?.Step ?? true)
                    {
                        sb.AppendItem(Step, "Step");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AGameplayOptionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Value1;
            public Exception? Value2;
            public Exception? Min;
            public Exception? Max;
            public Exception? Step;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FloatGameplayOptionData_FieldIndex enu = (FloatGameplayOptionData_FieldIndex)index;
                switch (enu)
                {
                    case FloatGameplayOptionData_FieldIndex.Value1:
                        return Value1;
                    case FloatGameplayOptionData_FieldIndex.Value2:
                        return Value2;
                    case FloatGameplayOptionData_FieldIndex.Min:
                        return Min;
                    case FloatGameplayOptionData_FieldIndex.Max:
                        return Max;
                    case FloatGameplayOptionData_FieldIndex.Step:
                        return Step;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FloatGameplayOptionData_FieldIndex enu = (FloatGameplayOptionData_FieldIndex)index;
                switch (enu)
                {
                    case FloatGameplayOptionData_FieldIndex.Value1:
                        this.Value1 = ex;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Value2:
                        this.Value2 = ex;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Step:
                        this.Step = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FloatGameplayOptionData_FieldIndex enu = (FloatGameplayOptionData_FieldIndex)index;
                switch (enu)
                {
                    case FloatGameplayOptionData_FieldIndex.Value1:
                        this.Value1 = (Exception?)obj;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Value2:
                        this.Value2 = (Exception?)obj;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    case FloatGameplayOptionData_FieldIndex.Step:
                        this.Step = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Value1 != null) return true;
                if (Value2 != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                if (Step != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Value1, "Value1");
                }
                {
                    sb.AppendItem(Value2, "Value2");
                }
                {
                    sb.AppendItem(Min, "Min");
                }
                {
                    sb.AppendItem(Max, "Max");
                }
                {
                    sb.AppendItem(Step, "Step");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Value1 = this.Value1.Combine(rhs.Value1);
                ret.Value2 = this.Value2.Combine(rhs.Value2);
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                ret.Step = this.Step.Combine(rhs.Step);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AGameplayOptionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Value1;
            public bool Value2;
            public bool Min;
            public bool Max;
            public bool Step;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Value1 = defaultOn;
                this.Value2 = defaultOn;
                this.Min = defaultOn;
                this.Max = defaultOn;
                this.Step = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Value1, null));
                ret.Add((Value2, null));
                ret.Add((Min, null));
                ret.Add((Max, null));
                ret.Add((Step, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloatGameplayOptionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloatGameplayOptionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FloatGameplayOptionData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FloatGameplayOptionData();
            ((FloatGameplayOptionDataSetterCommon)((IFloatGameplayOptionDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FloatGameplayOptionData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FloatGameplayOptionDataSetterCommon)((IFloatGameplayOptionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FloatGameplayOptionData GetNew()
        {
            return new FloatGameplayOptionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFloatGameplayOptionData :
        IAGameplayOptionData,
        IFloatGameplayOptionDataGetter,
        ILoquiObjectSetter<IFloatGameplayOptionData>
    {
        new Single? Value1 { get; set; }
        new Single? Value2 { get; set; }
        new Single Min { get; set; }
        new Single Max { get; set; }
        new Single Step { get; set; }
    }

    public partial interface IFloatGameplayOptionDataGetter :
        IAGameplayOptionDataGetter,
        IBinaryItem,
        ILoquiObject<IFloatGameplayOptionDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => FloatGameplayOptionData_Registration.Instance;
        Single? Value1 { get; }
        Single? Value2 { get; }
        Single Min { get; }
        Single Max { get; }
        Single Step { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FloatGameplayOptionDataMixIn
    {
        public static void Clear(this IFloatGameplayOptionData item)
        {
            ((FloatGameplayOptionDataSetterCommon)((IFloatGameplayOptionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FloatGameplayOptionData.Mask<bool> GetEqualsMask(
            this IFloatGameplayOptionDataGetter item,
            IFloatGameplayOptionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFloatGameplayOptionDataGetter item,
            string? name = null,
            FloatGameplayOptionData.Mask<bool>? printMask = null)
        {
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFloatGameplayOptionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FloatGameplayOptionData.Mask<bool>? printMask = null)
        {
            ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFloatGameplayOptionDataGetter item,
            IFloatGameplayOptionDataGetter rhs,
            FloatGameplayOptionData.TranslationMask? equalsMask = null)
        {
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFloatGameplayOptionData lhs,
            IFloatGameplayOptionDataGetter rhs,
            out FloatGameplayOptionData.ErrorMask errorMask,
            FloatGameplayOptionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FloatGameplayOptionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFloatGameplayOptionData lhs,
            IFloatGameplayOptionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FloatGameplayOptionData DeepCopy(
            this IFloatGameplayOptionDataGetter item,
            FloatGameplayOptionData.TranslationMask? copyMask = null)
        {
            return ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FloatGameplayOptionData DeepCopy(
            this IFloatGameplayOptionDataGetter item,
            out FloatGameplayOptionData.ErrorMask errorMask,
            FloatGameplayOptionData.TranslationMask? copyMask = null)
        {
            return ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FloatGameplayOptionData DeepCopy(
            this IFloatGameplayOptionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFloatGameplayOptionData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FloatGameplayOptionDataSetterCommon)((IFloatGameplayOptionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum FloatGameplayOptionData_FieldIndex
    {
        Value1 = 0,
        Value2 = 1,
        Min = 2,
        Max = 3,
        Step = 4,
    }
    #endregion

    #region Registration
    internal partial class FloatGameplayOptionData_Registration : ILoquiRegistration
    {
        public static readonly FloatGameplayOptionData_Registration Instance = new FloatGameplayOptionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(FloatGameplayOptionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FloatGameplayOptionData.ErrorMask);

        public static readonly Type ClassType = typeof(FloatGameplayOptionData);

        public static readonly Type GetterType = typeof(IFloatGameplayOptionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFloatGameplayOptionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.FloatGameplayOptionData";

        public const string Name = "FloatGameplayOptionData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.VNAM,
                RecordTypes.WNAM,
                RecordTypes.GPOD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FloatGameplayOptionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FloatGameplayOptionDataSetterCommon : AGameplayOptionDataSetterCommon
    {
        public new static readonly FloatGameplayOptionDataSetterCommon Instance = new FloatGameplayOptionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFloatGameplayOptionData item)
        {
            ClearPartial();
            item.Value1 = default;
            item.Value2 = default;
            item.Min = default(Single);
            item.Max = default(Single);
            item.Step = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IAGameplayOptionData item)
        {
            Clear(item: (IFloatGameplayOptionData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFloatGameplayOptionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFloatGameplayOptionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: FloatGameplayOptionDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAGameplayOptionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FloatGameplayOptionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FloatGameplayOptionDataCommon : AGameplayOptionDataCommon
    {
        public new static readonly FloatGameplayOptionDataCommon Instance = new FloatGameplayOptionDataCommon();

        public FloatGameplayOptionData.Mask<bool> GetEqualsMask(
            IFloatGameplayOptionDataGetter item,
            IFloatGameplayOptionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FloatGameplayOptionData.Mask<bool>(false);
            ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFloatGameplayOptionDataGetter item,
            IFloatGameplayOptionDataGetter rhs,
            FloatGameplayOptionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Value1 = item.Value1.EqualsWithin(rhs.Value1);
            ret.Value2 = item.Value2.EqualsWithin(rhs.Value2);
            ret.Min = item.Min.EqualsWithin(rhs.Min);
            ret.Max = item.Max.EqualsWithin(rhs.Max);
            ret.Step = item.Step.EqualsWithin(rhs.Step);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFloatGameplayOptionDataGetter item,
            string? name = null,
            FloatGameplayOptionData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFloatGameplayOptionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FloatGameplayOptionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FloatGameplayOptionData =>");
            }
            else
            {
                sb.AppendLine($"{name} (FloatGameplayOptionData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFloatGameplayOptionDataGetter item,
            StructuredStringBuilder sb,
            FloatGameplayOptionData.Mask<bool>? printMask = null)
        {
            AGameplayOptionDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Value1 ?? true)
                && item.Value1 is {} Value1Item)
            {
                sb.AppendItem(Value1Item, "Value1");
            }
            if ((printMask?.Value2 ?? true)
                && item.Value2 is {} Value2Item)
            {
                sb.AppendItem(Value2Item, "Value2");
            }
            if (printMask?.Min ?? true)
            {
                sb.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                sb.AppendItem(item.Max, "Max");
            }
            if (printMask?.Step ?? true)
            {
                sb.AppendItem(item.Step, "Step");
            }
        }
        
        public static FloatGameplayOptionData_FieldIndex ConvertFieldIndex(AGameplayOptionData_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFloatGameplayOptionDataGetter? lhs,
            IFloatGameplayOptionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAGameplayOptionDataGetter)lhs, (IAGameplayOptionDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Value1) ?? true))
            {
                if (!lhs.Value1.EqualsWithin(rhs.Value1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Value2) ?? true))
            {
                if (!lhs.Value2.EqualsWithin(rhs.Value2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Min) ?? true))
            {
                if (!lhs.Min.EqualsWithin(rhs.Min)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Max) ?? true))
            {
                if (!lhs.Max.EqualsWithin(rhs.Max)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Step) ?? true))
            {
                if (!lhs.Step.EqualsWithin(rhs.Step)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAGameplayOptionDataGetter? lhs,
            IAGameplayOptionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloatGameplayOptionDataGetter?)lhs,
                rhs: rhs as IFloatGameplayOptionDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFloatGameplayOptionDataGetter item)
        {
            var hash = new HashCode();
            if (item.Value1 is {} Value1item)
            {
                hash.Add(Value1item);
            }
            if (item.Value2 is {} Value2item)
            {
                hash.Add(Value2item);
            }
            hash.Add(item.Min);
            hash.Add(item.Max);
            hash.Add(item.Step);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAGameplayOptionDataGetter item)
        {
            return GetHashCode(item: (IFloatGameplayOptionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FloatGameplayOptionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFloatGameplayOptionDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FloatGameplayOptionDataSetterTranslationCommon : AGameplayOptionDataSetterTranslationCommon
    {
        public new static readonly FloatGameplayOptionDataSetterTranslationCommon Instance = new FloatGameplayOptionDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFloatGameplayOptionData item,
            IFloatGameplayOptionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAGameplayOptionData)item,
                (IAGameplayOptionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Value1) ?? true))
            {
                item.Value1 = rhs.Value1;
            }
            if ((copyMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Value2) ?? true))
            {
                item.Value2 = rhs.Value2;
            }
            if ((copyMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            if ((copyMask?.GetShouldTranslate((int)FloatGameplayOptionData_FieldIndex.Step) ?? true))
            {
                item.Step = rhs.Step;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFloatGameplayOptionData item,
            IFloatGameplayOptionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAGameplayOptionData item,
            IAGameplayOptionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloatGameplayOptionData)item,
                rhs: (IFloatGameplayOptionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FloatGameplayOptionData DeepCopy(
            IFloatGameplayOptionDataGetter item,
            FloatGameplayOptionData.TranslationMask? copyMask = null)
        {
            FloatGameplayOptionData ret = (FloatGameplayOptionData)((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).GetNew();
            ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FloatGameplayOptionData DeepCopy(
            IFloatGameplayOptionDataGetter item,
            out FloatGameplayOptionData.ErrorMask errorMask,
            FloatGameplayOptionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FloatGameplayOptionData ret = (FloatGameplayOptionData)((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).GetNew();
            ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FloatGameplayOptionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FloatGameplayOptionData DeepCopy(
            IFloatGameplayOptionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FloatGameplayOptionData ret = (FloatGameplayOptionData)((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)item).CommonInstance()!).GetNew();
            ((FloatGameplayOptionDataSetterTranslationCommon)((IFloatGameplayOptionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class FloatGameplayOptionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FloatGameplayOptionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FloatGameplayOptionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloatGameplayOptionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FloatGameplayOptionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloatGameplayOptionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FloatGameplayOptionDataBinaryWriteTranslation :
        AGameplayOptionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FloatGameplayOptionDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFloatGameplayOptionDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Value1,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Value2,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.GPOD)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Min);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Max);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Step);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFloatGameplayOptionDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFloatGameplayOptionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAGameplayOptionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloatGameplayOptionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FloatGameplayOptionDataBinaryCreateTranslation : AGameplayOptionDataBinaryCreateTranslation
    {
        public new static readonly FloatGameplayOptionDataBinaryCreateTranslation Instance = new FloatGameplayOptionDataBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFloatGameplayOptionData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VNAM:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Value1, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Value1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FloatGameplayOptionData_FieldIndex.Value1;
                }
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Value2, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Value2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FloatGameplayOptionData_FieldIndex.Value2;
                }
                case RecordTypeInts.GPOD:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Step, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Min = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Max = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Step = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)FloatGameplayOptionData_FieldIndex.Step;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FloatGameplayOptionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FloatGameplayOptionDataBinaryOverlay :
        AGameplayOptionDataBinaryOverlay,
        IFloatGameplayOptionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FloatGameplayOptionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FloatGameplayOptionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloatGameplayOptionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloatGameplayOptionDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloatGameplayOptionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloatGameplayOptionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Value1
        private int? _Value1Location;
        public Single? Value1 => _Value1Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _Value1Location.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Value2
        private int? _Value2Location;
        public Single? Value2 => _Value2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _Value2Location.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        private RangeInt32? _GPODLocation;
        #region Min
        private int _MinLocation => _GPODLocation!.Value.Min;
        private bool _Min_IsSet => _GPODLocation.HasValue;
        public Single Min => _Min_IsSet ? _recordData.Slice(_MinLocation, 4).Float() : default(Single);
        #endregion
        #region Max
        private int _MaxLocation => _GPODLocation!.Value.Min + 0x4;
        private bool _Max_IsSet => _GPODLocation.HasValue;
        public Single Max => _Max_IsSet ? _recordData.Slice(_MaxLocation, 4).Float() : default(Single);
        #endregion
        #region Step
        private int _StepLocation => _GPODLocation!.Value.Min + 0x8;
        private bool _Step_IsSet => _GPODLocation.HasValue;
        public Single Step => _Step_IsSet ? _recordData.Slice(_StepLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FloatGameplayOptionDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFloatGameplayOptionDataGetter FloatGameplayOptionDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FloatGameplayOptionDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFloatGameplayOptionDataGetter FloatGameplayOptionDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FloatGameplayOptionDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VNAM:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Value1, translationParams)) return ParseResult.Stop;
                    _Value1Location = (stream.Position - offset);
                    return (int)FloatGameplayOptionData_FieldIndex.Value1;
                }
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Value2, translationParams)) return ParseResult.Stop;
                    _Value2Location = (stream.Position - offset);
                    return (int)FloatGameplayOptionData_FieldIndex.Value2;
                }
                case RecordTypeInts.GPOD:
                {
                    if (lastParsed.ShortCircuit((int)FloatGameplayOptionData_FieldIndex.Step, translationParams)) return ParseResult.Stop;
                    _GPODLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)FloatGameplayOptionData_FieldIndex.Step;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloatGameplayOptionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFloatGameplayOptionDataGetter rhs) return false;
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloatGameplayOptionDataGetter? obj)
        {
            return ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloatGameplayOptionDataCommon)((IFloatGameplayOptionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

