/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AffinityEvent :
        StarfieldMajorRecord,
        IAffinityEventInternal,
        IEquatable<IAffinityEventGetter>,
        ILoquiObjectSetter<AffinityEvent>
    {
        #region Ctor
        protected AffinityEvent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public AffinityEvent.Flag Flags { get; set; } = default(AffinityEvent.Flag);
        #endregion
        #region ContextNotes
        public String? ContextNotes { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAffinityEventGetter.ContextNotes => this.ContextNotes;
        #endregion
        #region ActorReactions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ActorReaction> _ActorReactions = new ExtendedList<ActorReaction>();
        public ExtendedList<ActorReaction> ActorReactions
        {
            get => this._ActorReactions;
            init => this._ActorReactions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IActorReactionGetter> IAffinityEventGetter.ActorReactions => _ActorReactions;
        #endregion

        #endregion
        #region ActorValue
        private readonly IFormLinkNullable<IActorValueInformationGetter> _ActorValue = new FormLinkNullable<IActorValueInformationGetter>();
        public IFormLinkNullable<IActorValueInformationGetter> ActorValue
        {
            get => _ActorValue;
            set => _ActorValue.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IActorValueInformationGetter> IAffinityEventGetter.ActorValue => this.ActorValue;
        #endregion
        #region EventSize
        private readonly IFormLinkNullable<IGlobalGetter> _EventSize = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> EventSize
        {
            get => _EventSize;
            set => _EventSize.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IAffinityEventGetter.EventSize => this.EventSize;
        #endregion
        #region DistanceToPlayer
        private readonly IFormLinkNullable<IGlobalGetter> _DistanceToPlayer = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> DistanceToPlayer
        {
            get => _DistanceToPlayer;
            set => _DistanceToPlayer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IAffinityEventGetter.DistanceToPlayer => this.DistanceToPlayer;
        #endregion
        #region CooldownInMinutes
        private readonly IFormLinkNullable<IGlobalGetter> _CooldownInMinutes = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> CooldownInMinutes
        {
            get => _CooldownInMinutes;
            set => _CooldownInMinutes.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IAffinityEventGetter.CooldownInMinutes => this.CooldownInMinutes;
        #endregion
        #region RequiredFaction
        private readonly IFormLinkNullable<IFactionGetter> _RequiredFaction = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> RequiredFaction
        {
            get => _RequiredFaction;
            set => _RequiredFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> IAffinityEventGetter.RequiredFaction => this.RequiredFaction;
        #endregion
        #region AddToEvent
        private readonly IFormLinkNullable<IAffinityEventGetter> _AddToEvent = new FormLinkNullable<IAffinityEventGetter>();
        public IFormLinkNullable<IAffinityEventGetter> AddToEvent
        {
            get => _AddToEvent;
            set => _AddToEvent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAffinityEventGetter> IAffinityEventGetter.AddToEvent => this.AddToEvent;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AffinityEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.ContextNotes = initialValue;
                this.ActorReactions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorReaction.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ActorReaction.Mask<TItem>?>>());
                this.ActorValue = initialValue;
                this.EventSize = initialValue;
                this.DistanceToPlayer = initialValue;
                this.CooldownInMinutes = initialValue;
                this.RequiredFaction = initialValue;
                this.AddToEvent = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Flags,
                TItem ContextNotes,
                TItem ActorReactions,
                TItem ActorValue,
                TItem EventSize,
                TItem DistanceToPlayer,
                TItem CooldownInMinutes,
                TItem RequiredFaction,
                TItem AddToEvent)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Flags = Flags;
                this.ContextNotes = ContextNotes;
                this.ActorReactions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorReaction.Mask<TItem>?>>?>(ActorReactions, Enumerable.Empty<MaskItemIndexed<TItem, ActorReaction.Mask<TItem>?>>());
                this.ActorValue = ActorValue;
                this.EventSize = EventSize;
                this.DistanceToPlayer = DistanceToPlayer;
                this.CooldownInMinutes = CooldownInMinutes;
                this.RequiredFaction = RequiredFaction;
                this.AddToEvent = AddToEvent;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem ContextNotes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorReaction.Mask<TItem>?>>?>? ActorReactions;
            public TItem ActorValue;
            public TItem EventSize;
            public TItem DistanceToPlayer;
            public TItem CooldownInMinutes;
            public TItem RequiredFaction;
            public TItem AddToEvent;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ContextNotes, rhs.ContextNotes)) return false;
                if (!object.Equals(this.ActorReactions, rhs.ActorReactions)) return false;
                if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
                if (!object.Equals(this.EventSize, rhs.EventSize)) return false;
                if (!object.Equals(this.DistanceToPlayer, rhs.DistanceToPlayer)) return false;
                if (!object.Equals(this.CooldownInMinutes, rhs.CooldownInMinutes)) return false;
                if (!object.Equals(this.RequiredFaction, rhs.RequiredFaction)) return false;
                if (!object.Equals(this.AddToEvent, rhs.AddToEvent)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.ContextNotes);
                hash.Add(this.ActorReactions);
                hash.Add(this.ActorValue);
                hash.Add(this.EventSize);
                hash.Add(this.DistanceToPlayer);
                hash.Add(this.CooldownInMinutes);
                hash.Add(this.RequiredFaction);
                hash.Add(this.AddToEvent);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.ContextNotes)) return false;
                if (this.ActorReactions != null)
                {
                    if (!eval(this.ActorReactions.Overall)) return false;
                    if (this.ActorReactions.Specific != null)
                    {
                        foreach (var item in this.ActorReactions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ActorValue)) return false;
                if (!eval(this.EventSize)) return false;
                if (!eval(this.DistanceToPlayer)) return false;
                if (!eval(this.CooldownInMinutes)) return false;
                if (!eval(this.RequiredFaction)) return false;
                if (!eval(this.AddToEvent)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.ContextNotes)) return true;
                if (this.ActorReactions != null)
                {
                    if (eval(this.ActorReactions.Overall)) return true;
                    if (this.ActorReactions.Specific != null)
                    {
                        foreach (var item in this.ActorReactions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ActorValue)) return true;
                if (eval(this.EventSize)) return true;
                if (eval(this.DistanceToPlayer)) return true;
                if (eval(this.CooldownInMinutes)) return true;
                if (eval(this.RequiredFaction)) return true;
                if (eval(this.AddToEvent)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AffinityEvent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                obj.ContextNotes = eval(this.ContextNotes);
                if (ActorReactions != null)
                {
                    obj.ActorReactions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ActorReaction.Mask<R>?>>?>(eval(this.ActorReactions.Overall), Enumerable.Empty<MaskItemIndexed<R, ActorReaction.Mask<R>?>>());
                    if (ActorReactions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ActorReaction.Mask<R>?>>();
                        obj.ActorReactions.Specific = l;
                        foreach (var item in ActorReactions.Specific)
                        {
                            MaskItemIndexed<R, ActorReaction.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ActorReaction.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActorValue = eval(this.ActorValue);
                obj.EventSize = eval(this.EventSize);
                obj.DistanceToPlayer = eval(this.DistanceToPlayer);
                obj.CooldownInMinutes = eval(this.CooldownInMinutes);
                obj.RequiredFaction = eval(this.RequiredFaction);
                obj.AddToEvent = eval(this.AddToEvent);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AffinityEvent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AffinityEvent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AffinityEvent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ContextNotes ?? true)
                    {
                        sb.AppendItem(ContextNotes, "ContextNotes");
                    }
                    if ((printMask?.ActorReactions?.Overall ?? true)
                        && ActorReactions is {} ActorReactionsItem)
                    {
                        sb.AppendLine("ActorReactions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorReactionsItem.Overall);
                            if (ActorReactionsItem.Specific != null)
                            {
                                foreach (var subItem in ActorReactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ActorValue ?? true)
                    {
                        sb.AppendItem(ActorValue, "ActorValue");
                    }
                    if (printMask?.EventSize ?? true)
                    {
                        sb.AppendItem(EventSize, "EventSize");
                    }
                    if (printMask?.DistanceToPlayer ?? true)
                    {
                        sb.AppendItem(DistanceToPlayer, "DistanceToPlayer");
                    }
                    if (printMask?.CooldownInMinutes ?? true)
                    {
                        sb.AppendItem(CooldownInMinutes, "CooldownInMinutes");
                    }
                    if (printMask?.RequiredFaction ?? true)
                    {
                        sb.AppendItem(RequiredFaction, "RequiredFaction");
                    }
                    if (printMask?.AddToEvent ?? true)
                    {
                        sb.AppendItem(AddToEvent, "AddToEvent");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public Exception? ContextNotes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorReaction.ErrorMask?>>?>? ActorReactions;
            public Exception? ActorValue;
            public Exception? EventSize;
            public Exception? DistanceToPlayer;
            public Exception? CooldownInMinutes;
            public Exception? RequiredFaction;
            public Exception? AddToEvent;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AffinityEvent_FieldIndex enu = (AffinityEvent_FieldIndex)index;
                switch (enu)
                {
                    case AffinityEvent_FieldIndex.Flags:
                        return Flags;
                    case AffinityEvent_FieldIndex.ContextNotes:
                        return ContextNotes;
                    case AffinityEvent_FieldIndex.ActorReactions:
                        return ActorReactions;
                    case AffinityEvent_FieldIndex.ActorValue:
                        return ActorValue;
                    case AffinityEvent_FieldIndex.EventSize:
                        return EventSize;
                    case AffinityEvent_FieldIndex.DistanceToPlayer:
                        return DistanceToPlayer;
                    case AffinityEvent_FieldIndex.CooldownInMinutes:
                        return CooldownInMinutes;
                    case AffinityEvent_FieldIndex.RequiredFaction:
                        return RequiredFaction;
                    case AffinityEvent_FieldIndex.AddToEvent:
                        return AddToEvent;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AffinityEvent_FieldIndex enu = (AffinityEvent_FieldIndex)index;
                switch (enu)
                {
                    case AffinityEvent_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case AffinityEvent_FieldIndex.ContextNotes:
                        this.ContextNotes = ex;
                        break;
                    case AffinityEvent_FieldIndex.ActorReactions:
                        this.ActorReactions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorReaction.ErrorMask?>>?>(ex, null);
                        break;
                    case AffinityEvent_FieldIndex.ActorValue:
                        this.ActorValue = ex;
                        break;
                    case AffinityEvent_FieldIndex.EventSize:
                        this.EventSize = ex;
                        break;
                    case AffinityEvent_FieldIndex.DistanceToPlayer:
                        this.DistanceToPlayer = ex;
                        break;
                    case AffinityEvent_FieldIndex.CooldownInMinutes:
                        this.CooldownInMinutes = ex;
                        break;
                    case AffinityEvent_FieldIndex.RequiredFaction:
                        this.RequiredFaction = ex;
                        break;
                    case AffinityEvent_FieldIndex.AddToEvent:
                        this.AddToEvent = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AffinityEvent_FieldIndex enu = (AffinityEvent_FieldIndex)index;
                switch (enu)
                {
                    case AffinityEvent_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.ContextNotes:
                        this.ContextNotes = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.ActorReactions:
                        this.ActorReactions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorReaction.ErrorMask?>>?>)obj;
                        break;
                    case AffinityEvent_FieldIndex.ActorValue:
                        this.ActorValue = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.EventSize:
                        this.EventSize = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.DistanceToPlayer:
                        this.DistanceToPlayer = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.CooldownInMinutes:
                        this.CooldownInMinutes = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.RequiredFaction:
                        this.RequiredFaction = (Exception?)obj;
                        break;
                    case AffinityEvent_FieldIndex.AddToEvent:
                        this.AddToEvent = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (ContextNotes != null) return true;
                if (ActorReactions != null) return true;
                if (ActorValue != null) return true;
                if (EventSize != null) return true;
                if (DistanceToPlayer != null) return true;
                if (CooldownInMinutes != null) return true;
                if (RequiredFaction != null) return true;
                if (AddToEvent != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(ContextNotes, "ContextNotes");
                }
                if (ActorReactions is {} ActorReactionsItem)
                {
                    sb.AppendLine("ActorReactions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorReactionsItem.Overall);
                        if (ActorReactionsItem.Specific != null)
                        {
                            foreach (var subItem in ActorReactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ActorValue, "ActorValue");
                }
                {
                    sb.AppendItem(EventSize, "EventSize");
                }
                {
                    sb.AppendItem(DistanceToPlayer, "DistanceToPlayer");
                }
                {
                    sb.AppendItem(CooldownInMinutes, "CooldownInMinutes");
                }
                {
                    sb.AppendItem(RequiredFaction, "RequiredFaction");
                }
                {
                    sb.AppendItem(AddToEvent, "AddToEvent");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ContextNotes = this.ContextNotes.Combine(rhs.ContextNotes);
                ret.ActorReactions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorReaction.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorReactions?.Overall, rhs.ActorReactions?.Overall), Noggog.ExceptionExt.Combine(this.ActorReactions?.Specific, rhs.ActorReactions?.Specific));
                ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
                ret.EventSize = this.EventSize.Combine(rhs.EventSize);
                ret.DistanceToPlayer = this.DistanceToPlayer.Combine(rhs.DistanceToPlayer);
                ret.CooldownInMinutes = this.CooldownInMinutes.Combine(rhs.CooldownInMinutes);
                ret.RequiredFaction = this.RequiredFaction.Combine(rhs.RequiredFaction);
                ret.AddToEvent = this.AddToEvent.Combine(rhs.AddToEvent);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public bool ContextNotes;
            public ActorReaction.TranslationMask? ActorReactions;
            public bool ActorValue;
            public bool EventSize;
            public bool DistanceToPlayer;
            public bool CooldownInMinutes;
            public bool RequiredFaction;
            public bool AddToEvent;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.ContextNotes = defaultOn;
                this.ActorValue = defaultOn;
                this.EventSize = defaultOn;
                this.DistanceToPlayer = defaultOn;
                this.CooldownInMinutes = defaultOn;
                this.RequiredFaction = defaultOn;
                this.AddToEvent = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((ContextNotes, null));
                ret.Add((ActorReactions == null ? DefaultOn : !ActorReactions.GetCrystal().CopyNothing, ActorReactions?.GetCrystal()));
                ret.Add((ActorValue, null));
                ret.Add((EventSize, null));
                ret.Add((DistanceToPlayer, null));
                ret.Add((CooldownInMinutes, null));
                ret.Add((RequiredFaction, null));
                ret.Add((AddToEvent, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AffinityEvent_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AffinityEventCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AffinityEventSetterCommon.Instance.RemapLinks(this, mapping);
        public AffinityEvent(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AffinityEvent(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AffinityEvent(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AffinityEvent(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AffinityEvent(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AffinityEvent>.ToString(this);
        }

        protected override Type LinkType => typeof(IAffinityEvent);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAffinityEventGetter rhs) return false;
            return ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAffinityEventGetter? obj)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AffinityEventBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AffinityEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AffinityEvent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AffinityEvent();
            ((AffinityEventSetterCommon)((IAffinityEventGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AffinityEvent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AffinityEventSetterCommon)((IAffinityEventGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AffinityEvent GetNew()
        {
            return new AffinityEvent();
        }

    }
    #endregion

    #region Interface
    public partial interface IAffinityEvent :
        IAffinityEventGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAffinityEventInternal>,
        IStarfieldMajorRecordInternal
    {
        new AffinityEvent.Flag Flags { get; set; }
        new String? ContextNotes { get; set; }
        new ExtendedList<ActorReaction> ActorReactions { get; }
        new IFormLinkNullable<IActorValueInformationGetter> ActorValue { get; set; }
        new IFormLinkNullable<IGlobalGetter> EventSize { get; set; }
        new IFormLinkNullable<IGlobalGetter> DistanceToPlayer { get; set; }
        new IFormLinkNullable<IGlobalGetter> CooldownInMinutes { get; set; }
        new IFormLinkNullable<IFactionGetter> RequiredFaction { get; set; }
        new IFormLinkNullable<IAffinityEventGetter> AddToEvent { get; set; }
    }

    public partial interface IAffinityEventInternal :
        IStarfieldMajorRecordInternal,
        IAffinityEvent,
        IAffinityEventGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AFFE)]
    public partial interface IAffinityEventGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAffinityEventGetter>,
        IMapsToGetter<IAffinityEventGetter>
    {
        static new ILoquiRegistration StaticRegistration => AffinityEvent_Registration.Instance;
        AffinityEvent.Flag Flags { get; }
        String? ContextNotes { get; }
        IReadOnlyList<IActorReactionGetter> ActorReactions { get; }
        IFormLinkNullableGetter<IActorValueInformationGetter> ActorValue { get; }
        IFormLinkNullableGetter<IGlobalGetter> EventSize { get; }
        IFormLinkNullableGetter<IGlobalGetter> DistanceToPlayer { get; }
        IFormLinkNullableGetter<IGlobalGetter> CooldownInMinutes { get; }
        IFormLinkNullableGetter<IFactionGetter> RequiredFaction { get; }
        IFormLinkNullableGetter<IAffinityEventGetter> AddToEvent { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AffinityEventMixIn
    {
        public static void Clear(this IAffinityEventInternal item)
        {
            ((AffinityEventSetterCommon)((IAffinityEventGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AffinityEvent.Mask<bool> GetEqualsMask(
            this IAffinityEventGetter item,
            IAffinityEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAffinityEventGetter item,
            string? name = null,
            AffinityEvent.Mask<bool>? printMask = null)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAffinityEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AffinityEvent.Mask<bool>? printMask = null)
        {
            ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAffinityEventGetter item,
            IAffinityEventGetter rhs,
            AffinityEvent.TranslationMask? equalsMask = null)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAffinityEventInternal lhs,
            IAffinityEventGetter rhs,
            out AffinityEvent.ErrorMask errorMask,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AffinityEvent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAffinityEventInternal lhs,
            IAffinityEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AffinityEvent DeepCopy(
            this IAffinityEventGetter item,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            return ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AffinityEvent DeepCopy(
            this IAffinityEventGetter item,
            out AffinityEvent.ErrorMask errorMask,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            return ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AffinityEvent DeepCopy(
            this IAffinityEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AffinityEvent Duplicate(
            this IAffinityEventGetter item,
            FormKey formKey,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AffinityEvent Duplicate(
            this IAffinityEventGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAffinityEventInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AffinityEventSetterCommon)((IAffinityEventGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AffinityEvent_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Flags = 7,
        ContextNotes = 8,
        ActorReactions = 9,
        ActorValue = 10,
        EventSize = 11,
        DistanceToPlayer = 12,
        CooldownInMinutes = 13,
        RequiredFaction = 14,
        AddToEvent = 15,
    }
    #endregion

    #region Registration
    internal partial class AffinityEvent_Registration : ILoquiRegistration
    {
        public static readonly AffinityEvent_Registration Instance = new AffinityEvent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(AffinityEvent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AffinityEvent.ErrorMask);

        public static readonly Type ClassType = typeof(AffinityEvent);

        public static readonly Type GetterType = typeof(IAffinityEventGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAffinityEvent);

        public static readonly Type? InternalSetterType = typeof(IAffinityEventInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AffinityEvent";

        public const string Name = "AffinityEvent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AFFE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AFFE);
            var all = RecordCollection.Factory(
                RecordTypes.AFFE,
                RecordTypes.FNAM,
                RecordTypes.NLDT,
                RecordTypes.NNAM,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.ENAM,
                RecordTypes.DNAM,
                RecordTypes.CNAM,
                RecordTypes.BNAM,
                RecordTypes.PNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AffinityEventBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AffinityEventSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AffinityEventSetterCommon Instance = new AffinityEventSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAffinityEventInternal item)
        {
            ClearPartial();
            item.Flags = default(AffinityEvent.Flag);
            item.ContextNotes = default;
            item.ActorReactions.Clear();
            item.ActorValue.Clear();
            item.EventSize.Clear();
            item.DistanceToPlayer.Clear();
            item.CooldownInMinutes.Clear();
            item.RequiredFaction.Clear();
            item.AddToEvent.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAffinityEventInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAffinityEventInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAffinityEvent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ActorReactions.RemapLinks(mapping);
            obj.ActorValue.Relink(mapping);
            obj.EventSize.Relink(mapping);
            obj.DistanceToPlayer.Relink(mapping);
            obj.CooldownInMinutes.Relink(mapping);
            obj.RequiredFaction.Relink(mapping);
            obj.AddToEvent.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAffinityEventInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAffinityEventInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AffinityEventBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AffinityEventBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AffinityEvent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AffinityEvent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AffinityEventCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AffinityEventCommon Instance = new AffinityEventCommon();

        public AffinityEvent.Mask<bool> GetEqualsMask(
            IAffinityEventGetter item,
            IAffinityEventGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AffinityEvent.Mask<bool>(false);
            ((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAffinityEventGetter item,
            IAffinityEventGetter rhs,
            AffinityEvent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.ContextNotes = string.Equals(item.ContextNotes, rhs.ContextNotes);
            ret.ActorReactions = item.ActorReactions.CollectionEqualsHelper(
                rhs.ActorReactions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActorValue = item.ActorValue.Equals(rhs.ActorValue);
            ret.EventSize = item.EventSize.Equals(rhs.EventSize);
            ret.DistanceToPlayer = item.DistanceToPlayer.Equals(rhs.DistanceToPlayer);
            ret.CooldownInMinutes = item.CooldownInMinutes.Equals(rhs.CooldownInMinutes);
            ret.RequiredFaction = item.RequiredFaction.Equals(rhs.RequiredFaction);
            ret.AddToEvent = item.AddToEvent.Equals(rhs.AddToEvent);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAffinityEventGetter item,
            string? name = null,
            AffinityEvent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAffinityEventGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AffinityEvent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AffinityEvent =>");
            }
            else
            {
                sb.AppendLine($"{name} (AffinityEvent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAffinityEventGetter item,
            StructuredStringBuilder sb,
            AffinityEvent.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.ContextNotes ?? true)
                && item.ContextNotes is {} ContextNotesItem)
            {
                sb.AppendItem(ContextNotesItem, "ContextNotes");
            }
            if (printMask?.ActorReactions?.Overall ?? true)
            {
                sb.AppendLine("ActorReactions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ActorReactions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ActorValue ?? true)
            {
                sb.AppendItem(item.ActorValue.FormKeyNullable, "ActorValue");
            }
            if (printMask?.EventSize ?? true)
            {
                sb.AppendItem(item.EventSize.FormKeyNullable, "EventSize");
            }
            if (printMask?.DistanceToPlayer ?? true)
            {
                sb.AppendItem(item.DistanceToPlayer.FormKeyNullable, "DistanceToPlayer");
            }
            if (printMask?.CooldownInMinutes ?? true)
            {
                sb.AppendItem(item.CooldownInMinutes.FormKeyNullable, "CooldownInMinutes");
            }
            if (printMask?.RequiredFaction ?? true)
            {
                sb.AppendItem(item.RequiredFaction.FormKeyNullable, "RequiredFaction");
            }
            if (printMask?.AddToEvent ?? true)
            {
                sb.AppendItem(item.AddToEvent.FormKeyNullable, "AddToEvent");
            }
        }
        
        public static AffinityEvent_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AffinityEvent_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AffinityEvent_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AffinityEvent_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AffinityEvent_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AffinityEvent_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AffinityEvent_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AffinityEvent_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAffinityEventGetter? lhs,
            IAffinityEventGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ContextNotes) ?? true))
            {
                if (!string.Equals(lhs.ContextNotes, rhs.ContextNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ActorReactions) ?? true))
            {
                if (!lhs.ActorReactions.SequenceEqual(rhs.ActorReactions, (l, r) => ((ActorReactionCommon)((IActorReactionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)AffinityEvent_FieldIndex.ActorReactions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ActorValue) ?? true))
            {
                if (!lhs.ActorValue.Equals(rhs.ActorValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.EventSize) ?? true))
            {
                if (!lhs.EventSize.Equals(rhs.EventSize)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.DistanceToPlayer) ?? true))
            {
                if (!lhs.DistanceToPlayer.Equals(rhs.DistanceToPlayer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.CooldownInMinutes) ?? true))
            {
                if (!lhs.CooldownInMinutes.Equals(rhs.CooldownInMinutes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.RequiredFaction) ?? true))
            {
                if (!lhs.RequiredFaction.Equals(rhs.RequiredFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.AddToEvent) ?? true))
            {
                if (!lhs.AddToEvent.Equals(rhs.AddToEvent)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAffinityEventGetter?)lhs,
                rhs: rhs as IAffinityEventGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAffinityEventGetter?)lhs,
                rhs: rhs as IAffinityEventGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAffinityEventGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            if (item.ContextNotes is {} ContextNotesitem)
            {
                hash.Add(ContextNotesitem);
            }
            hash.Add(item.ActorReactions);
            hash.Add(item.ActorValue);
            hash.Add(item.EventSize);
            hash.Add(item.DistanceToPlayer);
            hash.Add(item.CooldownInMinutes);
            hash.Add(item.RequiredFaction);
            hash.Add(item.AddToEvent);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAffinityEventGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAffinityEventGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AffinityEvent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAffinityEventGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.ActorReactions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.ActorValue, out var ActorValueInfo))
            {
                yield return ActorValueInfo;
            }
            if (FormLinkInformation.TryFactory(obj.EventSize, out var EventSizeInfo))
            {
                yield return EventSizeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DistanceToPlayer, out var DistanceToPlayerInfo))
            {
                yield return DistanceToPlayerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CooldownInMinutes, out var CooldownInMinutesInfo))
            {
                yield return CooldownInMinutesInfo;
            }
            if (FormLinkInformation.TryFactory(obj.RequiredFaction, out var RequiredFactionInfo))
            {
                yield return RequiredFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AddToEvent, out var AddToEventInfo))
            {
                yield return AddToEventInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public AffinityEvent Duplicate(
            IAffinityEventGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AffinityEvent(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAffinityEventGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAffinityEventGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AffinityEventSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AffinityEventSetterTranslationCommon Instance = new AffinityEventSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAffinityEventInternal item,
            IAffinityEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAffinityEvent item,
            IAffinityEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ContextNotes) ?? true))
            {
                item.ContextNotes = rhs.ContextNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ActorReactions) ?? true))
            {
                errorMask?.PushIndex((int)AffinityEvent_FieldIndex.ActorReactions);
                try
                {
                    item.ActorReactions.SetTo(
                        rhs.ActorReactions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.ActorValue) ?? true))
            {
                item.ActorValue.SetTo(rhs.ActorValue.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.EventSize) ?? true))
            {
                item.EventSize.SetTo(rhs.EventSize.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.DistanceToPlayer) ?? true))
            {
                item.DistanceToPlayer.SetTo(rhs.DistanceToPlayer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.CooldownInMinutes) ?? true))
            {
                item.CooldownInMinutes.SetTo(rhs.CooldownInMinutes.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.RequiredFaction) ?? true))
            {
                item.RequiredFaction.SetTo(rhs.RequiredFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AffinityEvent_FieldIndex.AddToEvent) ?? true))
            {
                item.AddToEvent.SetTo(rhs.AddToEvent.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAffinityEvent item,
            IAffinityEventGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAffinityEventInternal)item,
                rhs: (IAffinityEventGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAffinityEvent)item,
                rhs: (IAffinityEventGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAffinityEventInternal)item,
                rhs: (IAffinityEventGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAffinityEvent)item,
                rhs: (IAffinityEventGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AffinityEvent DeepCopy(
            IAffinityEventGetter item,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            AffinityEvent ret = (AffinityEvent)((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).GetNew();
            ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AffinityEvent DeepCopy(
            IAffinityEventGetter item,
            out AffinityEvent.ErrorMask errorMask,
            AffinityEvent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AffinityEvent ret = (AffinityEvent)((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).GetNew();
            ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AffinityEvent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AffinityEvent DeepCopy(
            IAffinityEventGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AffinityEvent ret = (AffinityEvent)((AffinityEventCommon)((IAffinityEventGetter)item).CommonInstance()!).GetNew();
            ((AffinityEventSetterTranslationCommon)((IAffinityEventGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AffinityEvent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AffinityEvent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AffinityEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AffinityEventCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AffinityEventSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AffinityEventSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AffinityEventBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AffinityEventBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAffinityEventGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<AffinityEvent.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ContextNotes,
                header: translationParams.ConvertToCustom(RecordTypes.NLDT),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IActorReactionGetter>.Instance.Write(
                writer: writer,
                items: item.ActorReactions,
                transl: (MutagenWriter subWriter, IActorReactionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ActorReactionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActorValue,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EventSize,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DistanceToPlayer,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CooldownInMinutes,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RequiredFaction,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AddToEvent,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
        }

        public void Write(
            MutagenWriter writer,
            IAffinityEventGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AFFE,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAffinityEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAffinityEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAffinityEventGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AffinityEventBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AffinityEventBinaryCreateTranslation Instance = new AffinityEventBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AFFE;
        public static ParseResult FillBinaryRecordTypes(
            IAffinityEventInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<AffinityEvent.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)AffinityEvent_FieldIndex.Flags;
                }
                case RecordTypeInts.NLDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ContextNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)AffinityEvent_FieldIndex.ContextNotes;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.RNAM:
                {
                    item.ActorReactions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorReaction>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: ActorReaction_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ActorReaction.TryCreateFromBinary));
                    return (int)AffinityEvent_FieldIndex.ActorReactions;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorValue.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.ActorValue;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EventSize.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.EventSize;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistanceToPlayer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.DistanceToPlayer;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CooldownInMinutes.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.CooldownInMinutes;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RequiredFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.RequiredFaction;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AddToEvent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AffinityEvent_FieldIndex.AddToEvent;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AffinityEventBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AffinityEventBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAffinityEventGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AffinityEvent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AffinityEvent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AffinityEventCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AffinityEventSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AffinityEventCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AffinityEventBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AffinityEventBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAffinityEvent);


        #region Flags
        private int? _FlagsLocation;
        public AffinityEvent.Flag Flags => EnumBinaryTranslation<AffinityEvent.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_FlagsLocation, _recordData, _package, 4);
        #endregion
        #region ContextNotes
        private int? _ContextNotesLocation;
        public String? ContextNotes => _ContextNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ContextNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IActorReactionGetter> ActorReactions { get; private set; } = [];
        #region ActorValue
        private int? _ActorValueLocation;
        public IFormLinkNullableGetter<IActorValueInformationGetter> ActorValue => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IActorValueInformationGetter>(_package, _recordData, _ActorValueLocation);
        #endregion
        #region EventSize
        private int? _EventSizeLocation;
        public IFormLinkNullableGetter<IGlobalGetter> EventSize => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _EventSizeLocation);
        #endregion
        #region DistanceToPlayer
        private int? _DistanceToPlayerLocation;
        public IFormLinkNullableGetter<IGlobalGetter> DistanceToPlayer => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _DistanceToPlayerLocation);
        #endregion
        #region CooldownInMinutes
        private int? _CooldownInMinutesLocation;
        public IFormLinkNullableGetter<IGlobalGetter> CooldownInMinutes => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _CooldownInMinutesLocation);
        #endregion
        #region RequiredFaction
        private int? _RequiredFactionLocation;
        public IFormLinkNullableGetter<IFactionGetter> RequiredFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _RequiredFactionLocation);
        #endregion
        #region AddToEvent
        private int? _AddToEventLocation;
        public IFormLinkNullableGetter<IAffinityEventGetter> AddToEvent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAffinityEventGetter>(_package, _recordData, _AddToEventLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AffinityEventBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAffinityEventGetter AffinityEventFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AffinityEventBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAffinityEventGetter AffinityEventFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AffinityEventFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.Flags;
                }
                case RecordTypeInts.NLDT:
                {
                    _ContextNotesLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.ContextNotes;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.RNAM:
                {
                    this.ActorReactions = this.ParseRepeatedTypelessSubrecord<IActorReactionGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: ActorReaction_Registration.TriggerSpecs,
                        factory: ActorReactionBinaryOverlay.ActorReactionFactory);
                    return (int)AffinityEvent_FieldIndex.ActorReactions;
                }
                case RecordTypeInts.ANAM:
                {
                    _ActorValueLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.ActorValue;
                }
                case RecordTypeInts.ENAM:
                {
                    _EventSizeLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.EventSize;
                }
                case RecordTypeInts.DNAM:
                {
                    _DistanceToPlayerLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.DistanceToPlayer;
                }
                case RecordTypeInts.CNAM:
                {
                    _CooldownInMinutesLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.CooldownInMinutes;
                }
                case RecordTypeInts.BNAM:
                {
                    _RequiredFactionLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.RequiredFaction;
                }
                case RecordTypeInts.PNAM:
                {
                    _AddToEventLocation = (stream.Position - offset);
                    return (int)AffinityEvent_FieldIndex.AddToEvent;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AffinityEventMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AffinityEvent>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAffinityEventGetter rhs) return false;
            return ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAffinityEventGetter? obj)
        {
            return ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AffinityEventCommon)((IAffinityEventGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

