/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Biome :
        StarfieldMajorRecord,
        IBiomeInternal,
        IEquatable<IBiomeGetter>,
        ILoquiObjectSetter<Biome>
    {
        #region Ctor
        protected Biome()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBiomeGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IBiomeGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region FilterString
        public String? FilterString { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeGetter.FilterString => this.FilterString;
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFloraGetter>>? _Flora;
        public ExtendedList<IFormLinkGetter<IFloraGetter>>? Flora
        {
            get => this._Flora;
            set => this._Flora = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFloraGetter>>? IBiomeGetter.Flora => _Flora;
        #endregion

        #endregion
        #region ResourceGeneration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IResourceGenerationDataGetter>> _ResourceGeneration = new ExtendedList<IFormLinkGetter<IResourceGenerationDataGetter>>();
        public ExtendedList<IFormLinkGetter<IResourceGenerationDataGetter>> ResourceGeneration
        {
            get => this._ResourceGeneration;
            init => this._ResourceGeneration = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IResourceGenerationDataGetter>> IBiomeGetter.ResourceGeneration => _ResourceGeneration;
        #endregion

        #endregion
        #region ProceduralObjectGeneration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BiomeProceduralObjectGeneration> _ProceduralObjectGeneration = new ExtendedList<BiomeProceduralObjectGeneration>();
        public ExtendedList<BiomeProceduralObjectGeneration> ProceduralObjectGeneration
        {
            get => this._ProceduralObjectGeneration;
            init => this._ProceduralObjectGeneration = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBiomeProceduralObjectGenerationGetter> IBiomeGetter.ProceduralObjectGeneration => _ProceduralObjectGeneration;
        #endregion

        #endregion
        #region ObjectSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IObjectSwapGetter>> _ObjectSwaps = new ExtendedList<IFormLinkGetter<IObjectSwapGetter>>();
        public ExtendedList<IFormLinkGetter<IObjectSwapGetter>> ObjectSwaps
        {
            get => this._ObjectSwaps;
            init => this._ObjectSwaps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IObjectSwapGetter>> IBiomeGetter.ObjectSwaps => _ObjectSwaps;
        #endregion

        #endregion
        #region MaterialSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>> _MaterialSwaps = new ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>();
        public ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>> MaterialSwaps
        {
            get => this._MaterialSwaps;
            init => this._MaterialSwaps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>> IBiomeGetter.MaterialSwaps => _MaterialSwaps;
        #endregion

        #endregion
        #region Climate
        private readonly IFormLinkNullable<IClimateGetter> _Climate = new FormLinkNullable<IClimateGetter>();
        public IFormLinkNullable<IClimateGetter> Climate
        {
            get => _Climate;
            set => _Climate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClimateGetter> IBiomeGetter.Climate => this.Climate;
        #endregion
        #region Water
        public BiomeWaterData Water { get; set; } = new BiomeWaterData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeWaterDataGetter IBiomeGetter.Water => Water;
        #endregion
        #region BlockDensityMult
        public Single? BlockDensityMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IBiomeGetter.BlockDensityMult => this.BlockDensityMult;
        #endregion
        #region CellDensityMult
        public Single? CellDensityMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IBiomeGetter.CellDensityMult => this.CellDensityMult;
        #endregion
        #region ScanWorldspaceMult
        public Single? ScanWorldspaceMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IBiomeGetter.ScanWorldspaceMult => this.ScanWorldspaceMult;
        #endregion
        #region Child
        private readonly IFormLinkNullable<IBiomeGetter> _Child = new FormLinkNullable<IBiomeGetter>();
        public IFormLinkNullable<IBiomeGetter> Child
        {
            get => _Child;
            set => _Child.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBiomeGetter> IBiomeGetter.Child => this.Child;
        #endregion
        #region AmbienceSet
        private readonly IFormLinkNullable<IAmbienceSetGetter> _AmbienceSet = new FormLinkNullable<IAmbienceSetGetter>();
        public IFormLinkNullable<IAmbienceSetGetter> AmbienceSet
        {
            get => _AmbienceSet;
            set => _AmbienceSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAmbienceSetGetter> IBiomeGetter.AmbienceSet => this.AmbienceSet;
        #endregion
        #region MusicType
        private readonly IFormLinkNullable<IMusicTypeGetter> _MusicType = new FormLinkNullable<IMusicTypeGetter>();
        public IFormLinkNullable<IMusicTypeGetter> MusicType
        {
            get => _MusicType;
            set => _MusicType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMusicTypeGetter> IBiomeGetter.MusicType => this.MusicType;
        #endregion
        #region TimeOfDay
        private readonly IFormLinkNullable<ITimeOfDayRecordGetter> _TimeOfDay = new FormLinkNullable<ITimeOfDayRecordGetter>();
        public IFormLinkNullable<ITimeOfDayRecordGetter> TimeOfDay
        {
            get => _TimeOfDay;
            set => _TimeOfDay.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITimeOfDayRecordGetter> IBiomeGetter.TimeOfDay => this.TimeOfDay;
        #endregion
        #region PatternStyle
        private readonly IFormLinkNullable<ISurfacePatternStyleGetter> _PatternStyle = new FormLinkNullable<ISurfacePatternStyleGetter>();
        public IFormLinkNullable<ISurfacePatternStyleGetter> PatternStyle
        {
            get => _PatternStyle;
            set => _PatternStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISurfacePatternStyleGetter> IBiomeGetter.PatternStyle => this.PatternStyle;
        #endregion
        #region Color
        public Color Color { get; set; } = default(Color);
        #endregion
        #region SurfaceColor1
        public Color SurfaceColor1 { get; set; } = default(Color);
        #endregion
        #region SurfaceColor2
        public Color SurfaceColor2 { get; set; } = default(Color);
        #endregion
        #region RockTint
        public Color RockTint { get; set; } = default(Color);
        #endregion
        #region Type
        public Biome.TypeEnum Type { get; set; } = default(Biome.TypeEnum);
        #endregion
        #region MarkerObjectKeywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BiomeMarkerType> _MarkerObjectKeywords = new ExtendedList<BiomeMarkerType>();
        public ExtendedList<BiomeMarkerType> MarkerObjectKeywords
        {
            get => this._MarkerObjectKeywords;
            init => this._MarkerObjectKeywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBiomeMarkerTypeGetter> IBiomeGetter.MarkerObjectKeywords => _MarkerObjectKeywords;
        #endregion

        #endregion
        #region Terrain
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BiomeTerrain> _Terrain = new ExtendedList<BiomeTerrain>();
        public ExtendedList<BiomeTerrain> Terrain
        {
            get => this._Terrain;
            init => this._Terrain = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBiomeTerrainGetter> IBiomeGetter.Terrain => _Terrain;
        #endregion

        #endregion
        #region GroundLayerNormal
        public String? GroundLayerNormal { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeGetter.GroundLayerNormal => this.GroundLayerNormal;
        #endregion
        #region BTPS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BTPS;
        public MemorySlice<Byte>? BTPS
        {
            get => this._BTPS;
            set => this._BTPS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IBiomeGetter.BTPS => this.BTPS;
        #endregion
        #region DistantView
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DistantView = new byte[0];
        public MemorySlice<Byte> DistantView
        {
            get => _DistantView;
            set => this._DistantView = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IBiomeGetter.DistantView => this.DistantView;
        #endregion
        #region GlobalLayerMaterial
        public String? GlobalLayerMaterial { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBiomeGetter.GlobalLayerMaterial => this.GlobalLayerMaterial;
        #endregion
        #region BlockDensityMultGlobal
        private readonly IFormLinkNullable<IGlobalGetter> _BlockDensityMultGlobal = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> BlockDensityMultGlobal
        {
            get => _BlockDensityMultGlobal;
            set => _BlockDensityMultGlobal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IBiomeGetter.BlockDensityMultGlobal => this.BlockDensityMultGlobal;
        #endregion
        #region CellDensityMultGlobal
        private readonly IFormLinkNullable<IGlobalGetter> _CellDensityMultGlobal = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> CellDensityMultGlobal
        {
            get => _CellDensityMultGlobal;
            set => _CellDensityMultGlobal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IBiomeGetter.CellDensityMultGlobal => this.CellDensityMultGlobal;
        #endregion
        #region ScanWorldspaceMultGlobal
        private readonly IFormLinkNullable<IGlobalGetter> _ScanWorldspaceMultGlobal = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> ScanWorldspaceMultGlobal
        {
            get => _ScanWorldspaceMultGlobal;
            set => _ScanWorldspaceMultGlobal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IBiomeGetter.ScanWorldspaceMultGlobal => this.ScanWorldspaceMultGlobal;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FilterString = initialValue;
                this.Flora = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResourceGeneration = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ProceduralObjectGeneration = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeProceduralObjectGeneration.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BiomeProceduralObjectGeneration.Mask<TItem>?>>());
                this.ObjectSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MaterialSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Climate = initialValue;
                this.Water = new MaskItem<TItem, BiomeWaterData.Mask<TItem>?>(initialValue, new BiomeWaterData.Mask<TItem>(initialValue));
                this.BlockDensityMult = initialValue;
                this.CellDensityMult = initialValue;
                this.ScanWorldspaceMult = initialValue;
                this.Child = initialValue;
                this.AmbienceSet = initialValue;
                this.MusicType = initialValue;
                this.TimeOfDay = initialValue;
                this.PatternStyle = initialValue;
                this.Color = initialValue;
                this.SurfaceColor1 = initialValue;
                this.SurfaceColor2 = initialValue;
                this.RockTint = initialValue;
                this.Type = initialValue;
                this.MarkerObjectKeywords = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeMarkerType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BiomeMarkerType.Mask<TItem>?>>());
                this.Terrain = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeTerrain.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BiomeTerrain.Mask<TItem>?>>());
                this.GroundLayerNormal = initialValue;
                this.BTPS = initialValue;
                this.DistantView = initialValue;
                this.GlobalLayerMaterial = initialValue;
                this.BlockDensityMultGlobal = initialValue;
                this.CellDensityMultGlobal = initialValue;
                this.ScanWorldspaceMultGlobal = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Name,
                TItem Keywords,
                TItem FilterString,
                TItem Flora,
                TItem ResourceGeneration,
                TItem ProceduralObjectGeneration,
                TItem ObjectSwaps,
                TItem MaterialSwaps,
                TItem Climate,
                TItem Water,
                TItem BlockDensityMult,
                TItem CellDensityMult,
                TItem ScanWorldspaceMult,
                TItem Child,
                TItem AmbienceSet,
                TItem MusicType,
                TItem TimeOfDay,
                TItem PatternStyle,
                TItem Color,
                TItem SurfaceColor1,
                TItem SurfaceColor2,
                TItem RockTint,
                TItem Type,
                TItem MarkerObjectKeywords,
                TItem Terrain,
                TItem GroundLayerNormal,
                TItem BTPS,
                TItem DistantView,
                TItem GlobalLayerMaterial,
                TItem BlockDensityMultGlobal,
                TItem CellDensityMultGlobal,
                TItem ScanWorldspaceMultGlobal)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.FilterString = FilterString;
                this.Flora = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Flora, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResourceGeneration = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ResourceGeneration, Enumerable.Empty<(int Index, TItem Value)>());
                this.ProceduralObjectGeneration = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeProceduralObjectGeneration.Mask<TItem>?>>?>(ProceduralObjectGeneration, Enumerable.Empty<MaskItemIndexed<TItem, BiomeProceduralObjectGeneration.Mask<TItem>?>>());
                this.ObjectSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ObjectSwaps, Enumerable.Empty<(int Index, TItem Value)>());
                this.MaterialSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MaterialSwaps, Enumerable.Empty<(int Index, TItem Value)>());
                this.Climate = Climate;
                this.Water = new MaskItem<TItem, BiomeWaterData.Mask<TItem>?>(Water, new BiomeWaterData.Mask<TItem>(Water));
                this.BlockDensityMult = BlockDensityMult;
                this.CellDensityMult = CellDensityMult;
                this.ScanWorldspaceMult = ScanWorldspaceMult;
                this.Child = Child;
                this.AmbienceSet = AmbienceSet;
                this.MusicType = MusicType;
                this.TimeOfDay = TimeOfDay;
                this.PatternStyle = PatternStyle;
                this.Color = Color;
                this.SurfaceColor1 = SurfaceColor1;
                this.SurfaceColor2 = SurfaceColor2;
                this.RockTint = RockTint;
                this.Type = Type;
                this.MarkerObjectKeywords = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeMarkerType.Mask<TItem>?>>?>(MarkerObjectKeywords, Enumerable.Empty<MaskItemIndexed<TItem, BiomeMarkerType.Mask<TItem>?>>());
                this.Terrain = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeTerrain.Mask<TItem>?>>?>(Terrain, Enumerable.Empty<MaskItemIndexed<TItem, BiomeTerrain.Mask<TItem>?>>());
                this.GroundLayerNormal = GroundLayerNormal;
                this.BTPS = BTPS;
                this.DistantView = DistantView;
                this.GlobalLayerMaterial = GlobalLayerMaterial;
                this.BlockDensityMultGlobal = BlockDensityMultGlobal;
                this.CellDensityMultGlobal = CellDensityMultGlobal;
                this.ScanWorldspaceMultGlobal = ScanWorldspaceMultGlobal;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem FilterString;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Flora;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ResourceGeneration;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeProceduralObjectGeneration.Mask<TItem>?>>?>? ProceduralObjectGeneration;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ObjectSwaps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MaterialSwaps;
            public TItem Climate;
            public MaskItem<TItem, BiomeWaterData.Mask<TItem>?>? Water { get; set; }
            public TItem BlockDensityMult;
            public TItem CellDensityMult;
            public TItem ScanWorldspaceMult;
            public TItem Child;
            public TItem AmbienceSet;
            public TItem MusicType;
            public TItem TimeOfDay;
            public TItem PatternStyle;
            public TItem Color;
            public TItem SurfaceColor1;
            public TItem SurfaceColor2;
            public TItem RockTint;
            public TItem Type;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeMarkerType.Mask<TItem>?>>?>? MarkerObjectKeywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BiomeTerrain.Mask<TItem>?>>?>? Terrain;
            public TItem GroundLayerNormal;
            public TItem BTPS;
            public TItem DistantView;
            public TItem GlobalLayerMaterial;
            public TItem BlockDensityMultGlobal;
            public TItem CellDensityMultGlobal;
            public TItem ScanWorldspaceMultGlobal;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.FilterString, rhs.FilterString)) return false;
                if (!object.Equals(this.Flora, rhs.Flora)) return false;
                if (!object.Equals(this.ResourceGeneration, rhs.ResourceGeneration)) return false;
                if (!object.Equals(this.ProceduralObjectGeneration, rhs.ProceduralObjectGeneration)) return false;
                if (!object.Equals(this.ObjectSwaps, rhs.ObjectSwaps)) return false;
                if (!object.Equals(this.MaterialSwaps, rhs.MaterialSwaps)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.BlockDensityMult, rhs.BlockDensityMult)) return false;
                if (!object.Equals(this.CellDensityMult, rhs.CellDensityMult)) return false;
                if (!object.Equals(this.ScanWorldspaceMult, rhs.ScanWorldspaceMult)) return false;
                if (!object.Equals(this.Child, rhs.Child)) return false;
                if (!object.Equals(this.AmbienceSet, rhs.AmbienceSet)) return false;
                if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
                if (!object.Equals(this.TimeOfDay, rhs.TimeOfDay)) return false;
                if (!object.Equals(this.PatternStyle, rhs.PatternStyle)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.SurfaceColor1, rhs.SurfaceColor1)) return false;
                if (!object.Equals(this.SurfaceColor2, rhs.SurfaceColor2)) return false;
                if (!object.Equals(this.RockTint, rhs.RockTint)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.MarkerObjectKeywords, rhs.MarkerObjectKeywords)) return false;
                if (!object.Equals(this.Terrain, rhs.Terrain)) return false;
                if (!object.Equals(this.GroundLayerNormal, rhs.GroundLayerNormal)) return false;
                if (!object.Equals(this.BTPS, rhs.BTPS)) return false;
                if (!object.Equals(this.DistantView, rhs.DistantView)) return false;
                if (!object.Equals(this.GlobalLayerMaterial, rhs.GlobalLayerMaterial)) return false;
                if (!object.Equals(this.BlockDensityMultGlobal, rhs.BlockDensityMultGlobal)) return false;
                if (!object.Equals(this.CellDensityMultGlobal, rhs.CellDensityMultGlobal)) return false;
                if (!object.Equals(this.ScanWorldspaceMultGlobal, rhs.ScanWorldspaceMultGlobal)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.FilterString);
                hash.Add(this.Flora);
                hash.Add(this.ResourceGeneration);
                hash.Add(this.ProceduralObjectGeneration);
                hash.Add(this.ObjectSwaps);
                hash.Add(this.MaterialSwaps);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.BlockDensityMult);
                hash.Add(this.CellDensityMult);
                hash.Add(this.ScanWorldspaceMult);
                hash.Add(this.Child);
                hash.Add(this.AmbienceSet);
                hash.Add(this.MusicType);
                hash.Add(this.TimeOfDay);
                hash.Add(this.PatternStyle);
                hash.Add(this.Color);
                hash.Add(this.SurfaceColor1);
                hash.Add(this.SurfaceColor2);
                hash.Add(this.RockTint);
                hash.Add(this.Type);
                hash.Add(this.MarkerObjectKeywords);
                hash.Add(this.Terrain);
                hash.Add(this.GroundLayerNormal);
                hash.Add(this.BTPS);
                hash.Add(this.DistantView);
                hash.Add(this.GlobalLayerMaterial);
                hash.Add(this.BlockDensityMultGlobal);
                hash.Add(this.CellDensityMultGlobal);
                hash.Add(this.ScanWorldspaceMultGlobal);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FilterString)) return false;
                if (this.Flora != null)
                {
                    if (!eval(this.Flora.Overall)) return false;
                    if (this.Flora.Specific != null)
                    {
                        foreach (var item in this.Flora.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ResourceGeneration != null)
                {
                    if (!eval(this.ResourceGeneration.Overall)) return false;
                    if (this.ResourceGeneration.Specific != null)
                    {
                        foreach (var item in this.ResourceGeneration.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ProceduralObjectGeneration != null)
                {
                    if (!eval(this.ProceduralObjectGeneration.Overall)) return false;
                    if (this.ProceduralObjectGeneration.Specific != null)
                    {
                        foreach (var item in this.ProceduralObjectGeneration.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ObjectSwaps != null)
                {
                    if (!eval(this.ObjectSwaps.Overall)) return false;
                    if (this.ObjectSwaps.Specific != null)
                    {
                        foreach (var item in this.ObjectSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MaterialSwaps != null)
                {
                    if (!eval(this.MaterialSwaps.Overall)) return false;
                    if (this.MaterialSwaps.Specific != null)
                    {
                        foreach (var item in this.MaterialSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Climate)) return false;
                if (Water != null)
                {
                    if (!eval(this.Water.Overall)) return false;
                    if (this.Water.Specific != null && !this.Water.Specific.All(eval)) return false;
                }
                if (!eval(this.BlockDensityMult)) return false;
                if (!eval(this.CellDensityMult)) return false;
                if (!eval(this.ScanWorldspaceMult)) return false;
                if (!eval(this.Child)) return false;
                if (!eval(this.AmbienceSet)) return false;
                if (!eval(this.MusicType)) return false;
                if (!eval(this.TimeOfDay)) return false;
                if (!eval(this.PatternStyle)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.SurfaceColor1)) return false;
                if (!eval(this.SurfaceColor2)) return false;
                if (!eval(this.RockTint)) return false;
                if (!eval(this.Type)) return false;
                if (this.MarkerObjectKeywords != null)
                {
                    if (!eval(this.MarkerObjectKeywords.Overall)) return false;
                    if (this.MarkerObjectKeywords.Specific != null)
                    {
                        foreach (var item in this.MarkerObjectKeywords.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Terrain != null)
                {
                    if (!eval(this.Terrain.Overall)) return false;
                    if (this.Terrain.Specific != null)
                    {
                        foreach (var item in this.Terrain.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.GroundLayerNormal)) return false;
                if (!eval(this.BTPS)) return false;
                if (!eval(this.DistantView)) return false;
                if (!eval(this.GlobalLayerMaterial)) return false;
                if (!eval(this.BlockDensityMultGlobal)) return false;
                if (!eval(this.CellDensityMultGlobal)) return false;
                if (!eval(this.ScanWorldspaceMultGlobal)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FilterString)) return true;
                if (this.Flora != null)
                {
                    if (eval(this.Flora.Overall)) return true;
                    if (this.Flora.Specific != null)
                    {
                        foreach (var item in this.Flora.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ResourceGeneration != null)
                {
                    if (eval(this.ResourceGeneration.Overall)) return true;
                    if (this.ResourceGeneration.Specific != null)
                    {
                        foreach (var item in this.ResourceGeneration.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ProceduralObjectGeneration != null)
                {
                    if (eval(this.ProceduralObjectGeneration.Overall)) return true;
                    if (this.ProceduralObjectGeneration.Specific != null)
                    {
                        foreach (var item in this.ProceduralObjectGeneration.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ObjectSwaps != null)
                {
                    if (eval(this.ObjectSwaps.Overall)) return true;
                    if (this.ObjectSwaps.Specific != null)
                    {
                        foreach (var item in this.ObjectSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MaterialSwaps != null)
                {
                    if (eval(this.MaterialSwaps.Overall)) return true;
                    if (this.MaterialSwaps.Specific != null)
                    {
                        foreach (var item in this.MaterialSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Climate)) return true;
                if (Water != null)
                {
                    if (eval(this.Water.Overall)) return true;
                    if (this.Water.Specific != null && this.Water.Specific.Any(eval)) return true;
                }
                if (eval(this.BlockDensityMult)) return true;
                if (eval(this.CellDensityMult)) return true;
                if (eval(this.ScanWorldspaceMult)) return true;
                if (eval(this.Child)) return true;
                if (eval(this.AmbienceSet)) return true;
                if (eval(this.MusicType)) return true;
                if (eval(this.TimeOfDay)) return true;
                if (eval(this.PatternStyle)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.SurfaceColor1)) return true;
                if (eval(this.SurfaceColor2)) return true;
                if (eval(this.RockTint)) return true;
                if (eval(this.Type)) return true;
                if (this.MarkerObjectKeywords != null)
                {
                    if (eval(this.MarkerObjectKeywords.Overall)) return true;
                    if (this.MarkerObjectKeywords.Specific != null)
                    {
                        foreach (var item in this.MarkerObjectKeywords.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Terrain != null)
                {
                    if (eval(this.Terrain.Overall)) return true;
                    if (this.Terrain.Specific != null)
                    {
                        foreach (var item in this.Terrain.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.GroundLayerNormal)) return true;
                if (eval(this.BTPS)) return true;
                if (eval(this.DistantView)) return true;
                if (eval(this.GlobalLayerMaterial)) return true;
                if (eval(this.BlockDensityMultGlobal)) return true;
                if (eval(this.CellDensityMultGlobal)) return true;
                if (eval(this.ScanWorldspaceMultGlobal)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Biome.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FilterString = eval(this.FilterString);
                if (Flora != null)
                {
                    obj.Flora = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Flora.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Flora.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Flora.Specific = l;
                        foreach (var item in Flora.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ResourceGeneration != null)
                {
                    obj.ResourceGeneration = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ResourceGeneration.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ResourceGeneration.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ResourceGeneration.Specific = l;
                        foreach (var item in ResourceGeneration.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ProceduralObjectGeneration != null)
                {
                    obj.ProceduralObjectGeneration = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BiomeProceduralObjectGeneration.Mask<R>?>>?>(eval(this.ProceduralObjectGeneration.Overall), Enumerable.Empty<MaskItemIndexed<R, BiomeProceduralObjectGeneration.Mask<R>?>>());
                    if (ProceduralObjectGeneration.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BiomeProceduralObjectGeneration.Mask<R>?>>();
                        obj.ProceduralObjectGeneration.Specific = l;
                        foreach (var item in ProceduralObjectGeneration.Specific)
                        {
                            MaskItemIndexed<R, BiomeProceduralObjectGeneration.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BiomeProceduralObjectGeneration.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ObjectSwaps != null)
                {
                    obj.ObjectSwaps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ObjectSwaps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ObjectSwaps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ObjectSwaps.Specific = l;
                        foreach (var item in ObjectSwaps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MaterialSwaps != null)
                {
                    obj.MaterialSwaps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MaterialSwaps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MaterialSwaps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MaterialSwaps.Specific = l;
                        foreach (var item in MaterialSwaps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Climate = eval(this.Climate);
                obj.Water = this.Water == null ? null : new MaskItem<R, BiomeWaterData.Mask<R>?>(eval(this.Water.Overall), this.Water.Specific?.Translate(eval));
                obj.BlockDensityMult = eval(this.BlockDensityMult);
                obj.CellDensityMult = eval(this.CellDensityMult);
                obj.ScanWorldspaceMult = eval(this.ScanWorldspaceMult);
                obj.Child = eval(this.Child);
                obj.AmbienceSet = eval(this.AmbienceSet);
                obj.MusicType = eval(this.MusicType);
                obj.TimeOfDay = eval(this.TimeOfDay);
                obj.PatternStyle = eval(this.PatternStyle);
                obj.Color = eval(this.Color);
                obj.SurfaceColor1 = eval(this.SurfaceColor1);
                obj.SurfaceColor2 = eval(this.SurfaceColor2);
                obj.RockTint = eval(this.RockTint);
                obj.Type = eval(this.Type);
                if (MarkerObjectKeywords != null)
                {
                    obj.MarkerObjectKeywords = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BiomeMarkerType.Mask<R>?>>?>(eval(this.MarkerObjectKeywords.Overall), Enumerable.Empty<MaskItemIndexed<R, BiomeMarkerType.Mask<R>?>>());
                    if (MarkerObjectKeywords.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BiomeMarkerType.Mask<R>?>>();
                        obj.MarkerObjectKeywords.Specific = l;
                        foreach (var item in MarkerObjectKeywords.Specific)
                        {
                            MaskItemIndexed<R, BiomeMarkerType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BiomeMarkerType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Terrain != null)
                {
                    obj.Terrain = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BiomeTerrain.Mask<R>?>>?>(eval(this.Terrain.Overall), Enumerable.Empty<MaskItemIndexed<R, BiomeTerrain.Mask<R>?>>());
                    if (Terrain.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BiomeTerrain.Mask<R>?>>();
                        obj.Terrain.Specific = l;
                        foreach (var item in Terrain.Specific)
                        {
                            MaskItemIndexed<R, BiomeTerrain.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BiomeTerrain.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.GroundLayerNormal = eval(this.GroundLayerNormal);
                obj.BTPS = eval(this.BTPS);
                obj.DistantView = eval(this.DistantView);
                obj.GlobalLayerMaterial = eval(this.GlobalLayerMaterial);
                obj.BlockDensityMultGlobal = eval(this.BlockDensityMultGlobal);
                obj.CellDensityMultGlobal = eval(this.CellDensityMultGlobal);
                obj.ScanWorldspaceMultGlobal = eval(this.ScanWorldspaceMultGlobal);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Biome.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Biome.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Biome.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FilterString ?? true)
                    {
                        sb.AppendItem(FilterString, "FilterString");
                    }
                    if ((printMask?.Flora?.Overall ?? true)
                        && Flora is {} FloraItem)
                    {
                        sb.AppendLine("Flora =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FloraItem.Overall);
                            if (FloraItem.Specific != null)
                            {
                                foreach (var subItem in FloraItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ResourceGeneration?.Overall ?? true)
                        && ResourceGeneration is {} ResourceGenerationItem)
                    {
                        sb.AppendLine("ResourceGeneration =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ResourceGenerationItem.Overall);
                            if (ResourceGenerationItem.Specific != null)
                            {
                                foreach (var subItem in ResourceGenerationItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ProceduralObjectGeneration?.Overall ?? true)
                        && ProceduralObjectGeneration is {} ProceduralObjectGenerationItem)
                    {
                        sb.AppendLine("ProceduralObjectGeneration =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ProceduralObjectGenerationItem.Overall);
                            if (ProceduralObjectGenerationItem.Specific != null)
                            {
                                foreach (var subItem in ProceduralObjectGenerationItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ObjectSwaps?.Overall ?? true)
                        && ObjectSwaps is {} ObjectSwapsItem)
                    {
                        sb.AppendLine("ObjectSwaps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectSwapsItem.Overall);
                            if (ObjectSwapsItem.Specific != null)
                            {
                                foreach (var subItem in ObjectSwapsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MaterialSwaps?.Overall ?? true)
                        && MaterialSwaps is {} MaterialSwapsItem)
                    {
                        sb.AppendLine("MaterialSwaps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MaterialSwapsItem.Overall);
                            if (MaterialSwapsItem.Specific != null)
                            {
                                foreach (var subItem in MaterialSwapsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Climate ?? true)
                    {
                        sb.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water?.Overall ?? true)
                    {
                        Water?.Print(sb);
                    }
                    if (printMask?.BlockDensityMult ?? true)
                    {
                        sb.AppendItem(BlockDensityMult, "BlockDensityMult");
                    }
                    if (printMask?.CellDensityMult ?? true)
                    {
                        sb.AppendItem(CellDensityMult, "CellDensityMult");
                    }
                    if (printMask?.ScanWorldspaceMult ?? true)
                    {
                        sb.AppendItem(ScanWorldspaceMult, "ScanWorldspaceMult");
                    }
                    if (printMask?.Child ?? true)
                    {
                        sb.AppendItem(Child, "Child");
                    }
                    if (printMask?.AmbienceSet ?? true)
                    {
                        sb.AppendItem(AmbienceSet, "AmbienceSet");
                    }
                    if (printMask?.MusicType ?? true)
                    {
                        sb.AppendItem(MusicType, "MusicType");
                    }
                    if (printMask?.TimeOfDay ?? true)
                    {
                        sb.AppendItem(TimeOfDay, "TimeOfDay");
                    }
                    if (printMask?.PatternStyle ?? true)
                    {
                        sb.AppendItem(PatternStyle, "PatternStyle");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.SurfaceColor1 ?? true)
                    {
                        sb.AppendItem(SurfaceColor1, "SurfaceColor1");
                    }
                    if (printMask?.SurfaceColor2 ?? true)
                    {
                        sb.AppendItem(SurfaceColor2, "SurfaceColor2");
                    }
                    if (printMask?.RockTint ?? true)
                    {
                        sb.AppendItem(RockTint, "RockTint");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if ((printMask?.MarkerObjectKeywords?.Overall ?? true)
                        && MarkerObjectKeywords is {} MarkerObjectKeywordsItem)
                    {
                        sb.AppendLine("MarkerObjectKeywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerObjectKeywordsItem.Overall);
                            if (MarkerObjectKeywordsItem.Specific != null)
                            {
                                foreach (var subItem in MarkerObjectKeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Terrain?.Overall ?? true)
                        && Terrain is {} TerrainItem)
                    {
                        sb.AppendLine("Terrain =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TerrainItem.Overall);
                            if (TerrainItem.Specific != null)
                            {
                                foreach (var subItem in TerrainItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.GroundLayerNormal ?? true)
                    {
                        sb.AppendItem(GroundLayerNormal, "GroundLayerNormal");
                    }
                    if (printMask?.BTPS ?? true)
                    {
                        sb.AppendItem(BTPS, "BTPS");
                    }
                    if (printMask?.DistantView ?? true)
                    {
                        sb.AppendItem(DistantView, "DistantView");
                    }
                    if (printMask?.GlobalLayerMaterial ?? true)
                    {
                        sb.AppendItem(GlobalLayerMaterial, "GlobalLayerMaterial");
                    }
                    if (printMask?.BlockDensityMultGlobal ?? true)
                    {
                        sb.AppendItem(BlockDensityMultGlobal, "BlockDensityMultGlobal");
                    }
                    if (printMask?.CellDensityMultGlobal ?? true)
                    {
                        sb.AppendItem(CellDensityMultGlobal, "CellDensityMultGlobal");
                    }
                    if (printMask?.ScanWorldspaceMultGlobal ?? true)
                    {
                        sb.AppendItem(ScanWorldspaceMultGlobal, "ScanWorldspaceMultGlobal");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? FilterString;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Flora;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ResourceGeneration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeProceduralObjectGeneration.ErrorMask?>>?>? ProceduralObjectGeneration;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ObjectSwaps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MaterialSwaps;
            public Exception? Climate;
            public MaskItem<Exception?, BiomeWaterData.ErrorMask?>? Water;
            public Exception? BlockDensityMult;
            public Exception? CellDensityMult;
            public Exception? ScanWorldspaceMult;
            public Exception? Child;
            public Exception? AmbienceSet;
            public Exception? MusicType;
            public Exception? TimeOfDay;
            public Exception? PatternStyle;
            public Exception? Color;
            public Exception? SurfaceColor1;
            public Exception? SurfaceColor2;
            public Exception? RockTint;
            public Exception? Type;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeMarkerType.ErrorMask?>>?>? MarkerObjectKeywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeTerrain.ErrorMask?>>?>? Terrain;
            public Exception? GroundLayerNormal;
            public Exception? BTPS;
            public Exception? DistantView;
            public Exception? GlobalLayerMaterial;
            public Exception? BlockDensityMultGlobal;
            public Exception? CellDensityMultGlobal;
            public Exception? ScanWorldspaceMultGlobal;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Biome_FieldIndex enu = (Biome_FieldIndex)index;
                switch (enu)
                {
                    case Biome_FieldIndex.Name:
                        return Name;
                    case Biome_FieldIndex.Keywords:
                        return Keywords;
                    case Biome_FieldIndex.FilterString:
                        return FilterString;
                    case Biome_FieldIndex.Flora:
                        return Flora;
                    case Biome_FieldIndex.ResourceGeneration:
                        return ResourceGeneration;
                    case Biome_FieldIndex.ProceduralObjectGeneration:
                        return ProceduralObjectGeneration;
                    case Biome_FieldIndex.ObjectSwaps:
                        return ObjectSwaps;
                    case Biome_FieldIndex.MaterialSwaps:
                        return MaterialSwaps;
                    case Biome_FieldIndex.Climate:
                        return Climate;
                    case Biome_FieldIndex.Water:
                        return Water;
                    case Biome_FieldIndex.BlockDensityMult:
                        return BlockDensityMult;
                    case Biome_FieldIndex.CellDensityMult:
                        return CellDensityMult;
                    case Biome_FieldIndex.ScanWorldspaceMult:
                        return ScanWorldspaceMult;
                    case Biome_FieldIndex.Child:
                        return Child;
                    case Biome_FieldIndex.AmbienceSet:
                        return AmbienceSet;
                    case Biome_FieldIndex.MusicType:
                        return MusicType;
                    case Biome_FieldIndex.TimeOfDay:
                        return TimeOfDay;
                    case Biome_FieldIndex.PatternStyle:
                        return PatternStyle;
                    case Biome_FieldIndex.Color:
                        return Color;
                    case Biome_FieldIndex.SurfaceColor1:
                        return SurfaceColor1;
                    case Biome_FieldIndex.SurfaceColor2:
                        return SurfaceColor2;
                    case Biome_FieldIndex.RockTint:
                        return RockTint;
                    case Biome_FieldIndex.Type:
                        return Type;
                    case Biome_FieldIndex.MarkerObjectKeywords:
                        return MarkerObjectKeywords;
                    case Biome_FieldIndex.Terrain:
                        return Terrain;
                    case Biome_FieldIndex.GroundLayerNormal:
                        return GroundLayerNormal;
                    case Biome_FieldIndex.BTPS:
                        return BTPS;
                    case Biome_FieldIndex.DistantView:
                        return DistantView;
                    case Biome_FieldIndex.GlobalLayerMaterial:
                        return GlobalLayerMaterial;
                    case Biome_FieldIndex.BlockDensityMultGlobal:
                        return BlockDensityMultGlobal;
                    case Biome_FieldIndex.CellDensityMultGlobal:
                        return CellDensityMultGlobal;
                    case Biome_FieldIndex.ScanWorldspaceMultGlobal:
                        return ScanWorldspaceMultGlobal;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Biome_FieldIndex enu = (Biome_FieldIndex)index;
                switch (enu)
                {
                    case Biome_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Biome_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Biome_FieldIndex.FilterString:
                        this.FilterString = ex;
                        break;
                    case Biome_FieldIndex.Flora:
                        this.Flora = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Biome_FieldIndex.ResourceGeneration:
                        this.ResourceGeneration = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Biome_FieldIndex.ProceduralObjectGeneration:
                        this.ProceduralObjectGeneration = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeProceduralObjectGeneration.ErrorMask?>>?>(ex, null);
                        break;
                    case Biome_FieldIndex.ObjectSwaps:
                        this.ObjectSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Biome_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Biome_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Biome_FieldIndex.Water:
                        this.Water = new MaskItem<Exception?, BiomeWaterData.ErrorMask?>(ex, null);
                        break;
                    case Biome_FieldIndex.BlockDensityMult:
                        this.BlockDensityMult = ex;
                        break;
                    case Biome_FieldIndex.CellDensityMult:
                        this.CellDensityMult = ex;
                        break;
                    case Biome_FieldIndex.ScanWorldspaceMult:
                        this.ScanWorldspaceMult = ex;
                        break;
                    case Biome_FieldIndex.Child:
                        this.Child = ex;
                        break;
                    case Biome_FieldIndex.AmbienceSet:
                        this.AmbienceSet = ex;
                        break;
                    case Biome_FieldIndex.MusicType:
                        this.MusicType = ex;
                        break;
                    case Biome_FieldIndex.TimeOfDay:
                        this.TimeOfDay = ex;
                        break;
                    case Biome_FieldIndex.PatternStyle:
                        this.PatternStyle = ex;
                        break;
                    case Biome_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Biome_FieldIndex.SurfaceColor1:
                        this.SurfaceColor1 = ex;
                        break;
                    case Biome_FieldIndex.SurfaceColor2:
                        this.SurfaceColor2 = ex;
                        break;
                    case Biome_FieldIndex.RockTint:
                        this.RockTint = ex;
                        break;
                    case Biome_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Biome_FieldIndex.MarkerObjectKeywords:
                        this.MarkerObjectKeywords = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeMarkerType.ErrorMask?>>?>(ex, null);
                        break;
                    case Biome_FieldIndex.Terrain:
                        this.Terrain = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeTerrain.ErrorMask?>>?>(ex, null);
                        break;
                    case Biome_FieldIndex.GroundLayerNormal:
                        this.GroundLayerNormal = ex;
                        break;
                    case Biome_FieldIndex.BTPS:
                        this.BTPS = ex;
                        break;
                    case Biome_FieldIndex.DistantView:
                        this.DistantView = ex;
                        break;
                    case Biome_FieldIndex.GlobalLayerMaterial:
                        this.GlobalLayerMaterial = ex;
                        break;
                    case Biome_FieldIndex.BlockDensityMultGlobal:
                        this.BlockDensityMultGlobal = ex;
                        break;
                    case Biome_FieldIndex.CellDensityMultGlobal:
                        this.CellDensityMultGlobal = ex;
                        break;
                    case Biome_FieldIndex.ScanWorldspaceMultGlobal:
                        this.ScanWorldspaceMultGlobal = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Biome_FieldIndex enu = (Biome_FieldIndex)index;
                switch (enu)
                {
                    case Biome_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Biome_FieldIndex.FilterString:
                        this.FilterString = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Flora:
                        this.Flora = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Biome_FieldIndex.ResourceGeneration:
                        this.ResourceGeneration = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Biome_FieldIndex.ProceduralObjectGeneration:
                        this.ProceduralObjectGeneration = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeProceduralObjectGeneration.ErrorMask?>>?>)obj;
                        break;
                    case Biome_FieldIndex.ObjectSwaps:
                        this.ObjectSwaps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Biome_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Biome_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Water:
                        this.Water = (MaskItem<Exception?, BiomeWaterData.ErrorMask?>?)obj;
                        break;
                    case Biome_FieldIndex.BlockDensityMult:
                        this.BlockDensityMult = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.CellDensityMult:
                        this.CellDensityMult = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.ScanWorldspaceMult:
                        this.ScanWorldspaceMult = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Child:
                        this.Child = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.AmbienceSet:
                        this.AmbienceSet = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.MusicType:
                        this.MusicType = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.TimeOfDay:
                        this.TimeOfDay = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.PatternStyle:
                        this.PatternStyle = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.SurfaceColor1:
                        this.SurfaceColor1 = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.SurfaceColor2:
                        this.SurfaceColor2 = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.RockTint:
                        this.RockTint = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.MarkerObjectKeywords:
                        this.MarkerObjectKeywords = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeMarkerType.ErrorMask?>>?>)obj;
                        break;
                    case Biome_FieldIndex.Terrain:
                        this.Terrain = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeTerrain.ErrorMask?>>?>)obj;
                        break;
                    case Biome_FieldIndex.GroundLayerNormal:
                        this.GroundLayerNormal = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.BTPS:
                        this.BTPS = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.DistantView:
                        this.DistantView = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.GlobalLayerMaterial:
                        this.GlobalLayerMaterial = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.BlockDensityMultGlobal:
                        this.BlockDensityMultGlobal = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.CellDensityMultGlobal:
                        this.CellDensityMultGlobal = (Exception?)obj;
                        break;
                    case Biome_FieldIndex.ScanWorldspaceMultGlobal:
                        this.ScanWorldspaceMultGlobal = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (FilterString != null) return true;
                if (Flora != null) return true;
                if (ResourceGeneration != null) return true;
                if (ProceduralObjectGeneration != null) return true;
                if (ObjectSwaps != null) return true;
                if (MaterialSwaps != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (BlockDensityMult != null) return true;
                if (CellDensityMult != null) return true;
                if (ScanWorldspaceMult != null) return true;
                if (Child != null) return true;
                if (AmbienceSet != null) return true;
                if (MusicType != null) return true;
                if (TimeOfDay != null) return true;
                if (PatternStyle != null) return true;
                if (Color != null) return true;
                if (SurfaceColor1 != null) return true;
                if (SurfaceColor2 != null) return true;
                if (RockTint != null) return true;
                if (Type != null) return true;
                if (MarkerObjectKeywords != null) return true;
                if (Terrain != null) return true;
                if (GroundLayerNormal != null) return true;
                if (BTPS != null) return true;
                if (DistantView != null) return true;
                if (GlobalLayerMaterial != null) return true;
                if (BlockDensityMultGlobal != null) return true;
                if (CellDensityMultGlobal != null) return true;
                if (ScanWorldspaceMultGlobal != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FilterString, "FilterString");
                }
                if (Flora is {} FloraItem)
                {
                    sb.AppendLine("Flora =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FloraItem.Overall);
                        if (FloraItem.Specific != null)
                        {
                            foreach (var subItem in FloraItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ResourceGeneration is {} ResourceGenerationItem)
                {
                    sb.AppendLine("ResourceGeneration =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ResourceGenerationItem.Overall);
                        if (ResourceGenerationItem.Specific != null)
                        {
                            foreach (var subItem in ResourceGenerationItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ProceduralObjectGeneration is {} ProceduralObjectGenerationItem)
                {
                    sb.AppendLine("ProceduralObjectGeneration =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ProceduralObjectGenerationItem.Overall);
                        if (ProceduralObjectGenerationItem.Specific != null)
                        {
                            foreach (var subItem in ProceduralObjectGenerationItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ObjectSwaps is {} ObjectSwapsItem)
                {
                    sb.AppendLine("ObjectSwaps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectSwapsItem.Overall);
                        if (ObjectSwapsItem.Specific != null)
                        {
                            foreach (var subItem in ObjectSwapsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MaterialSwaps is {} MaterialSwapsItem)
                {
                    sb.AppendLine("MaterialSwaps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MaterialSwapsItem.Overall);
                        if (MaterialSwapsItem.Specific != null)
                        {
                            foreach (var subItem in MaterialSwapsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Climate, "Climate");
                }
                Water?.Print(sb);
                {
                    sb.AppendItem(BlockDensityMult, "BlockDensityMult");
                }
                {
                    sb.AppendItem(CellDensityMult, "CellDensityMult");
                }
                {
                    sb.AppendItem(ScanWorldspaceMult, "ScanWorldspaceMult");
                }
                {
                    sb.AppendItem(Child, "Child");
                }
                {
                    sb.AppendItem(AmbienceSet, "AmbienceSet");
                }
                {
                    sb.AppendItem(MusicType, "MusicType");
                }
                {
                    sb.AppendItem(TimeOfDay, "TimeOfDay");
                }
                {
                    sb.AppendItem(PatternStyle, "PatternStyle");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(SurfaceColor1, "SurfaceColor1");
                }
                {
                    sb.AppendItem(SurfaceColor2, "SurfaceColor2");
                }
                {
                    sb.AppendItem(RockTint, "RockTint");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                if (MarkerObjectKeywords is {} MarkerObjectKeywordsItem)
                {
                    sb.AppendLine("MarkerObjectKeywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerObjectKeywordsItem.Overall);
                        if (MarkerObjectKeywordsItem.Specific != null)
                        {
                            foreach (var subItem in MarkerObjectKeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Terrain is {} TerrainItem)
                {
                    sb.AppendLine("Terrain =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TerrainItem.Overall);
                        if (TerrainItem.Specific != null)
                        {
                            foreach (var subItem in TerrainItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(GroundLayerNormal, "GroundLayerNormal");
                }
                {
                    sb.AppendItem(BTPS, "BTPS");
                }
                {
                    sb.AppendItem(DistantView, "DistantView");
                }
                {
                    sb.AppendItem(GlobalLayerMaterial, "GlobalLayerMaterial");
                }
                {
                    sb.AppendItem(BlockDensityMultGlobal, "BlockDensityMultGlobal");
                }
                {
                    sb.AppendItem(CellDensityMultGlobal, "CellDensityMultGlobal");
                }
                {
                    sb.AppendItem(ScanWorldspaceMultGlobal, "ScanWorldspaceMultGlobal");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.FilterString = this.FilterString.Combine(rhs.FilterString);
                ret.Flora = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Flora?.Overall, rhs.Flora?.Overall), Noggog.ExceptionExt.Combine(this.Flora?.Specific, rhs.Flora?.Specific));
                ret.ResourceGeneration = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ResourceGeneration?.Overall, rhs.ResourceGeneration?.Overall), Noggog.ExceptionExt.Combine(this.ResourceGeneration?.Specific, rhs.ResourceGeneration?.Specific));
                ret.ProceduralObjectGeneration = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeProceduralObjectGeneration.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ProceduralObjectGeneration?.Overall, rhs.ProceduralObjectGeneration?.Overall), Noggog.ExceptionExt.Combine(this.ProceduralObjectGeneration?.Specific, rhs.ProceduralObjectGeneration?.Specific));
                ret.ObjectSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ObjectSwaps?.Overall, rhs.ObjectSwaps?.Overall), Noggog.ExceptionExt.Combine(this.ObjectSwaps?.Specific, rhs.ObjectSwaps?.Specific));
                ret.MaterialSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MaterialSwaps?.Overall, rhs.MaterialSwaps?.Overall), Noggog.ExceptionExt.Combine(this.MaterialSwaps?.Specific, rhs.MaterialSwaps?.Specific));
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water, (l, r) => l.Combine(r));
                ret.BlockDensityMult = this.BlockDensityMult.Combine(rhs.BlockDensityMult);
                ret.CellDensityMult = this.CellDensityMult.Combine(rhs.CellDensityMult);
                ret.ScanWorldspaceMult = this.ScanWorldspaceMult.Combine(rhs.ScanWorldspaceMult);
                ret.Child = this.Child.Combine(rhs.Child);
                ret.AmbienceSet = this.AmbienceSet.Combine(rhs.AmbienceSet);
                ret.MusicType = this.MusicType.Combine(rhs.MusicType);
                ret.TimeOfDay = this.TimeOfDay.Combine(rhs.TimeOfDay);
                ret.PatternStyle = this.PatternStyle.Combine(rhs.PatternStyle);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.SurfaceColor1 = this.SurfaceColor1.Combine(rhs.SurfaceColor1);
                ret.SurfaceColor2 = this.SurfaceColor2.Combine(rhs.SurfaceColor2);
                ret.RockTint = this.RockTint.Combine(rhs.RockTint);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.MarkerObjectKeywords = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeMarkerType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerObjectKeywords?.Overall, rhs.MarkerObjectKeywords?.Overall), Noggog.ExceptionExt.Combine(this.MarkerObjectKeywords?.Specific, rhs.MarkerObjectKeywords?.Specific));
                ret.Terrain = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BiomeTerrain.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Terrain?.Overall, rhs.Terrain?.Overall), Noggog.ExceptionExt.Combine(this.Terrain?.Specific, rhs.Terrain?.Specific));
                ret.GroundLayerNormal = this.GroundLayerNormal.Combine(rhs.GroundLayerNormal);
                ret.BTPS = this.BTPS.Combine(rhs.BTPS);
                ret.DistantView = this.DistantView.Combine(rhs.DistantView);
                ret.GlobalLayerMaterial = this.GlobalLayerMaterial.Combine(rhs.GlobalLayerMaterial);
                ret.BlockDensityMultGlobal = this.BlockDensityMultGlobal.Combine(rhs.BlockDensityMultGlobal);
                ret.CellDensityMultGlobal = this.CellDensityMultGlobal.Combine(rhs.CellDensityMultGlobal);
                ret.ScanWorldspaceMultGlobal = this.ScanWorldspaceMultGlobal.Combine(rhs.ScanWorldspaceMultGlobal);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Keywords;
            public bool FilterString;
            public bool Flora;
            public bool ResourceGeneration;
            public BiomeProceduralObjectGeneration.TranslationMask? ProceduralObjectGeneration;
            public bool ObjectSwaps;
            public bool MaterialSwaps;
            public bool Climate;
            public BiomeWaterData.TranslationMask? Water;
            public bool BlockDensityMult;
            public bool CellDensityMult;
            public bool ScanWorldspaceMult;
            public bool Child;
            public bool AmbienceSet;
            public bool MusicType;
            public bool TimeOfDay;
            public bool PatternStyle;
            public bool Color;
            public bool SurfaceColor1;
            public bool SurfaceColor2;
            public bool RockTint;
            public bool Type;
            public BiomeMarkerType.TranslationMask? MarkerObjectKeywords;
            public BiomeTerrain.TranslationMask? Terrain;
            public bool GroundLayerNormal;
            public bool BTPS;
            public bool DistantView;
            public bool GlobalLayerMaterial;
            public bool BlockDensityMultGlobal;
            public bool CellDensityMultGlobal;
            public bool ScanWorldspaceMultGlobal;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.FilterString = defaultOn;
                this.Flora = defaultOn;
                this.ResourceGeneration = defaultOn;
                this.ObjectSwaps = defaultOn;
                this.MaterialSwaps = defaultOn;
                this.Climate = defaultOn;
                this.BlockDensityMult = defaultOn;
                this.CellDensityMult = defaultOn;
                this.ScanWorldspaceMult = defaultOn;
                this.Child = defaultOn;
                this.AmbienceSet = defaultOn;
                this.MusicType = defaultOn;
                this.TimeOfDay = defaultOn;
                this.PatternStyle = defaultOn;
                this.Color = defaultOn;
                this.SurfaceColor1 = defaultOn;
                this.SurfaceColor2 = defaultOn;
                this.RockTint = defaultOn;
                this.Type = defaultOn;
                this.GroundLayerNormal = defaultOn;
                this.BTPS = defaultOn;
                this.DistantView = defaultOn;
                this.GlobalLayerMaterial = defaultOn;
                this.BlockDensityMultGlobal = defaultOn;
                this.CellDensityMultGlobal = defaultOn;
                this.ScanWorldspaceMultGlobal = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((FilterString, null));
                ret.Add((Flora, null));
                ret.Add((ResourceGeneration, null));
                ret.Add((ProceduralObjectGeneration == null ? DefaultOn : !ProceduralObjectGeneration.GetCrystal().CopyNothing, ProceduralObjectGeneration?.GetCrystal()));
                ret.Add((ObjectSwaps, null));
                ret.Add((MaterialSwaps, null));
                ret.Add((Climate, null));
                ret.Add((Water != null ? Water.OnOverall : DefaultOn, Water?.GetCrystal()));
                ret.Add((BlockDensityMult, null));
                ret.Add((CellDensityMult, null));
                ret.Add((ScanWorldspaceMult, null));
                ret.Add((Child, null));
                ret.Add((AmbienceSet, null));
                ret.Add((MusicType, null));
                ret.Add((TimeOfDay, null));
                ret.Add((PatternStyle, null));
                ret.Add((Color, null));
                ret.Add((SurfaceColor1, null));
                ret.Add((SurfaceColor2, null));
                ret.Add((RockTint, null));
                ret.Add((Type, null));
                ret.Add((MarkerObjectKeywords == null ? DefaultOn : !MarkerObjectKeywords.GetCrystal().CopyNothing, MarkerObjectKeywords?.GetCrystal()));
                ret.Add((Terrain == null ? DefaultOn : !Terrain.GetCrystal().CopyNothing, Terrain?.GetCrystal()));
                ret.Add((GroundLayerNormal, null));
                ret.Add((BTPS, null));
                ret.Add((DistantView, null));
                ret.Add((GlobalLayerMaterial, null));
                ret.Add((BlockDensityMultGlobal, null));
                ret.Add((CellDensityMultGlobal, null));
                ret.Add((ScanWorldspaceMultGlobal, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Biome_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeSetterCommon.Instance.RemapLinks(this, mapping);
        public Biome(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Biome(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Biome(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Biome(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Biome(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Biome>.ToString(this);
        }

        protected override Type LinkType => typeof(IBiome);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IBiomeGetter rhs) return false;
            return ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeGetter? obj)
        {
            return ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BiomeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Biome CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Biome();
            ((BiomeSetterCommon)((IBiomeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Biome item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeSetterCommon)((IBiomeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Biome GetNew()
        {
            return new Biome();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiome :
        IBiomeGetter,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IBiomeInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new String? FilterString { get; set; }
        new ExtendedList<IFormLinkGetter<IFloraGetter>>? Flora { get; set; }
        new ExtendedList<IFormLinkGetter<IResourceGenerationDataGetter>> ResourceGeneration { get; }
        new ExtendedList<BiomeProceduralObjectGeneration> ProceduralObjectGeneration { get; }
        new ExtendedList<IFormLinkGetter<IObjectSwapGetter>> ObjectSwaps { get; }
        new ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>> MaterialSwaps { get; }
        new IFormLinkNullable<IClimateGetter> Climate { get; set; }
        new BiomeWaterData Water { get; set; }
        new Single? BlockDensityMult { get; set; }
        new Single? CellDensityMult { get; set; }
        new Single? ScanWorldspaceMult { get; set; }
        new IFormLinkNullable<IBiomeGetter> Child { get; set; }
        new IFormLinkNullable<IAmbienceSetGetter> AmbienceSet { get; set; }
        new IFormLinkNullable<IMusicTypeGetter> MusicType { get; set; }
        new IFormLinkNullable<ITimeOfDayRecordGetter> TimeOfDay { get; set; }
        new IFormLinkNullable<ISurfacePatternStyleGetter> PatternStyle { get; set; }
        new Color Color { get; set; }
        new Color SurfaceColor1 { get; set; }
        new Color SurfaceColor2 { get; set; }
        new Color RockTint { get; set; }
        new Biome.TypeEnum Type { get; set; }
        new ExtendedList<BiomeMarkerType> MarkerObjectKeywords { get; }
        new ExtendedList<BiomeTerrain> Terrain { get; }
        new String? GroundLayerNormal { get; set; }
        new MemorySlice<Byte>? BTPS { get; set; }
        new MemorySlice<Byte> DistantView { get; set; }
        new String? GlobalLayerMaterial { get; set; }
        new IFormLinkNullable<IGlobalGetter> BlockDensityMultGlobal { get; set; }
        new IFormLinkNullable<IGlobalGetter> CellDensityMultGlobal { get; set; }
        new IFormLinkNullable<IGlobalGetter> ScanWorldspaceMultGlobal { get; set; }
    }

    public partial interface IBiomeInternal :
        IStarfieldMajorRecordInternal,
        IBiome,
        IBiomeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.BIOM)]
    public partial interface IBiomeGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IBiomeGetter>,
        IMapsToGetter<IBiomeGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Biome_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        String? FilterString { get; }
        IReadOnlyList<IFormLinkGetter<IFloraGetter>>? Flora { get; }
        IReadOnlyList<IFormLinkGetter<IResourceGenerationDataGetter>> ResourceGeneration { get; }
        IReadOnlyList<IBiomeProceduralObjectGenerationGetter> ProceduralObjectGeneration { get; }
        IReadOnlyList<IFormLinkGetter<IObjectSwapGetter>> ObjectSwaps { get; }
        IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>> MaterialSwaps { get; }
        IFormLinkNullableGetter<IClimateGetter> Climate { get; }
        IBiomeWaterDataGetter Water { get; }
        Single? BlockDensityMult { get; }
        Single? CellDensityMult { get; }
        Single? ScanWorldspaceMult { get; }
        IFormLinkNullableGetter<IBiomeGetter> Child { get; }
        IFormLinkNullableGetter<IAmbienceSetGetter> AmbienceSet { get; }
        IFormLinkNullableGetter<IMusicTypeGetter> MusicType { get; }
        IFormLinkNullableGetter<ITimeOfDayRecordGetter> TimeOfDay { get; }
        IFormLinkNullableGetter<ISurfacePatternStyleGetter> PatternStyle { get; }
        Color Color { get; }
        Color SurfaceColor1 { get; }
        Color SurfaceColor2 { get; }
        Color RockTint { get; }
        Biome.TypeEnum Type { get; }
        IReadOnlyList<IBiomeMarkerTypeGetter> MarkerObjectKeywords { get; }
        IReadOnlyList<IBiomeTerrainGetter> Terrain { get; }
        String? GroundLayerNormal { get; }
        ReadOnlyMemorySlice<Byte>? BTPS { get; }
        ReadOnlyMemorySlice<Byte> DistantView { get; }
        String? GlobalLayerMaterial { get; }
        IFormLinkNullableGetter<IGlobalGetter> BlockDensityMultGlobal { get; }
        IFormLinkNullableGetter<IGlobalGetter> CellDensityMultGlobal { get; }
        IFormLinkNullableGetter<IGlobalGetter> ScanWorldspaceMultGlobal { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeMixIn
    {
        public static void Clear(this IBiomeInternal item)
        {
            ((BiomeSetterCommon)((IBiomeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Biome.Mask<bool> GetEqualsMask(
            this IBiomeGetter item,
            IBiomeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeGetter item,
            string? name = null,
            Biome.Mask<bool>? printMask = null)
        {
            return ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Biome.Mask<bool>? printMask = null)
        {
            ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeGetter item,
            IBiomeGetter rhs,
            Biome.TranslationMask? equalsMask = null)
        {
            return ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeInternal lhs,
            IBiomeGetter rhs,
            out Biome.ErrorMask errorMask,
            Biome.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeSetterTranslationCommon)((IBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Biome.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeInternal lhs,
            IBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeSetterTranslationCommon)((IBiomeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Biome DeepCopy(
            this IBiomeGetter item,
            Biome.TranslationMask? copyMask = null)
        {
            return ((BiomeSetterTranslationCommon)((IBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Biome DeepCopy(
            this IBiomeGetter item,
            out Biome.ErrorMask errorMask,
            Biome.TranslationMask? copyMask = null)
        {
            return ((BiomeSetterTranslationCommon)((IBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Biome DeepCopy(
            this IBiomeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeSetterTranslationCommon)((IBiomeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Biome Duplicate(
            this IBiomeGetter item,
            FormKey formKey,
            Biome.TranslationMask? copyMask = null)
        {
            return ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Biome Duplicate(
            this IBiomeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeSetterCommon)((IBiomeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Biome_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Name = 7,
        Keywords = 8,
        FilterString = 9,
        Flora = 10,
        ResourceGeneration = 11,
        ProceduralObjectGeneration = 12,
        ObjectSwaps = 13,
        MaterialSwaps = 14,
        Climate = 15,
        Water = 16,
        BlockDensityMult = 17,
        CellDensityMult = 18,
        ScanWorldspaceMult = 19,
        Child = 20,
        AmbienceSet = 21,
        MusicType = 22,
        TimeOfDay = 23,
        PatternStyle = 24,
        Color = 25,
        SurfaceColor1 = 26,
        SurfaceColor2 = 27,
        RockTint = 28,
        Type = 29,
        MarkerObjectKeywords = 30,
        Terrain = 31,
        GroundLayerNormal = 32,
        BTPS = 33,
        DistantView = 34,
        GlobalLayerMaterial = 35,
        BlockDensityMultGlobal = 36,
        CellDensityMultGlobal = 37,
        ScanWorldspaceMultGlobal = 38,
    }
    #endregion

    #region Registration
    internal partial class Biome_Registration : ILoquiRegistration
    {
        public static readonly Biome_Registration Instance = new Biome_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 39;

        public static readonly Type MaskType = typeof(Biome.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Biome.ErrorMask);

        public static readonly Type ClassType = typeof(Biome);

        public static readonly Type GetterType = typeof(IBiomeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiome);

        public static readonly Type? InternalSetterType = typeof(IBiomeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Biome";

        public const string Name = "Biome";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BIOM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BIOM);
            var all = RecordCollection.Factory(
                RecordTypes.BIOM,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.SNAM,
                RecordTypes.PNAM,
                RecordTypes.RNAM,
                RecordTypes.FNAM,
                RecordTypes.BNAM,
                RecordTypes.GNAM,
                RecordTypes.DNAM,
                RecordTypes.ONAM,
                RecordTypes.NAM1,
                RecordTypes.ENAM,
                RecordTypes.MNAM,
                RecordTypes.INAM,
                RecordTypes.JNAM,
                RecordTypes.WNAM,
                RecordTypes.YNAM,
                RecordTypes.UNAM,
                RecordTypes.ZNAM,
                RecordTypes.BIAS,
                RecordTypes.BIMT,
                RecordTypes.NAM0,
                RecordTypes.NNAM,
                RecordTypes.CNAM,
                RecordTypes.BMC1,
                RecordTypes.BMC2,
                RecordTypes.BMC3,
                RecordTypes.TNAM,
                RecordTypes.KNAM,
                RecordTypes.LNAM,
                RecordTypes.ANAM,
                RecordTypes.TX00,
                RecordTypes.UX00,
                RecordTypes.VX00,
                RecordTypes.WX00,
                RecordTypes.XX00,
                RecordTypes.YX00,
                RecordTypes.TX16,
                RecordTypes.BTPS,
                RecordTypes.BDFS,
                RecordTypes.EFSD,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BiomeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly BiomeSetterCommon Instance = new BiomeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Keywords = null;
            item.FilterString = default;
            item.Flora = null;
            item.ResourceGeneration.Clear();
            item.ProceduralObjectGeneration.Clear();
            item.ObjectSwaps.Clear();
            item.MaterialSwaps.Clear();
            item.Climate.Clear();
            item.Water.Clear();
            item.BlockDensityMult = default;
            item.CellDensityMult = default;
            item.ScanWorldspaceMult = default;
            item.Child.Clear();
            item.AmbienceSet.Clear();
            item.MusicType.Clear();
            item.TimeOfDay.Clear();
            item.PatternStyle.Clear();
            item.Color = default(Color);
            item.SurfaceColor1 = default(Color);
            item.SurfaceColor2 = default(Color);
            item.RockTint = default(Color);
            item.Type = default(Biome.TypeEnum);
            item.MarkerObjectKeywords.Clear();
            item.Terrain.Clear();
            item.GroundLayerNormal = default;
            item.BTPS = default;
            item.DistantView = Array.Empty<byte>();
            item.GlobalLayerMaterial = default;
            item.BlockDensityMultGlobal.Clear();
            item.CellDensityMultGlobal.Clear();
            item.ScanWorldspaceMultGlobal.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IBiomeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IBiomeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBiome obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Flora?.RemapLinks(mapping);
            obj.ResourceGeneration.RemapLinks(mapping);
            obj.ProceduralObjectGeneration.RemapLinks(mapping);
            obj.ObjectSwaps.RemapLinks(mapping);
            obj.MaterialSwaps.RemapLinks(mapping);
            obj.Climate.Relink(mapping);
            obj.Water.RemapLinks(mapping);
            obj.Child.Relink(mapping);
            obj.AmbienceSet.Relink(mapping);
            obj.MusicType.Relink(mapping);
            obj.TimeOfDay.Relink(mapping);
            obj.PatternStyle.Relink(mapping);
            obj.MarkerObjectKeywords.RemapLinks(mapping);
            obj.Terrain.RemapLinks(mapping);
            obj.BlockDensityMultGlobal.Relink(mapping);
            obj.CellDensityMultGlobal.Relink(mapping);
            obj.ScanWorldspaceMultGlobal.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IBiomeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BiomeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: BiomeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Biome)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Biome)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BiomeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly BiomeCommon Instance = new BiomeCommon();

        public Biome.Mask<bool> GetEqualsMask(
            IBiomeGetter item,
            IBiomeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Biome.Mask<bool>(false);
            ((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeGetter item,
            IBiomeGetter rhs,
            Biome.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.FilterString = string.Equals(item.FilterString, rhs.FilterString);
            ret.Flora = item.Flora.CollectionEqualsHelper(
                rhs.Flora,
                (l, r) => object.Equals(l, r),
                include);
            ret.ResourceGeneration = item.ResourceGeneration.CollectionEqualsHelper(
                rhs.ResourceGeneration,
                (l, r) => object.Equals(l, r),
                include);
            ret.ProceduralObjectGeneration = item.ProceduralObjectGeneration.CollectionEqualsHelper(
                rhs.ProceduralObjectGeneration,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ObjectSwaps = item.ObjectSwaps.CollectionEqualsHelper(
                rhs.ObjectSwaps,
                (l, r) => object.Equals(l, r),
                include);
            ret.MaterialSwaps = item.MaterialSwaps.CollectionEqualsHelper(
                rhs.MaterialSwaps,
                (l, r) => object.Equals(l, r),
                include);
            ret.Climate = item.Climate.Equals(rhs.Climate);
            ret.Water = MaskItemExt.Factory(item.Water.GetEqualsMask(rhs.Water, include), include);
            ret.BlockDensityMult = item.BlockDensityMult.EqualsWithin(rhs.BlockDensityMult);
            ret.CellDensityMult = item.CellDensityMult.EqualsWithin(rhs.CellDensityMult);
            ret.ScanWorldspaceMult = item.ScanWorldspaceMult.EqualsWithin(rhs.ScanWorldspaceMult);
            ret.Child = item.Child.Equals(rhs.Child);
            ret.AmbienceSet = item.AmbienceSet.Equals(rhs.AmbienceSet);
            ret.MusicType = item.MusicType.Equals(rhs.MusicType);
            ret.TimeOfDay = item.TimeOfDay.Equals(rhs.TimeOfDay);
            ret.PatternStyle = item.PatternStyle.Equals(rhs.PatternStyle);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.SurfaceColor1 = item.SurfaceColor1.ColorOnlyEquals(rhs.SurfaceColor1);
            ret.SurfaceColor2 = item.SurfaceColor2.ColorOnlyEquals(rhs.SurfaceColor2);
            ret.RockTint = item.RockTint.ColorOnlyEquals(rhs.RockTint);
            ret.Type = item.Type == rhs.Type;
            ret.MarkerObjectKeywords = item.MarkerObjectKeywords.CollectionEqualsHelper(
                rhs.MarkerObjectKeywords,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Terrain = item.Terrain.CollectionEqualsHelper(
                rhs.Terrain,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.GroundLayerNormal = string.Equals(item.GroundLayerNormal, rhs.GroundLayerNormal);
            ret.BTPS = MemorySliceExt.SequenceEqual(item.BTPS, rhs.BTPS);
            ret.DistantView = MemoryExtensions.SequenceEqual(item.DistantView.Span, rhs.DistantView.Span);
            ret.GlobalLayerMaterial = string.Equals(item.GlobalLayerMaterial, rhs.GlobalLayerMaterial);
            ret.BlockDensityMultGlobal = item.BlockDensityMultGlobal.Equals(rhs.BlockDensityMultGlobal);
            ret.CellDensityMultGlobal = item.CellDensityMultGlobal.Equals(rhs.CellDensityMultGlobal);
            ret.ScanWorldspaceMultGlobal = item.ScanWorldspaceMultGlobal.Equals(rhs.ScanWorldspaceMultGlobal);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBiomeGetter item,
            string? name = null,
            Biome.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Biome.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Biome =>");
            }
            else
            {
                sb.AppendLine($"{name} (Biome) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeGetter item,
            StructuredStringBuilder sb,
            Biome.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.FilterString ?? true)
                && item.FilterString is {} FilterStringItem)
            {
                sb.AppendItem(FilterStringItem, "FilterString");
            }
            if ((printMask?.Flora?.Overall ?? true)
                && item.Flora is {} FloraItem)
            {
                sb.AppendLine("Flora =>");
                using (sb.Brace())
                {
                    foreach (var subItem in FloraItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ResourceGeneration?.Overall ?? true)
            {
                sb.AppendLine("ResourceGeneration =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ResourceGeneration)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ProceduralObjectGeneration?.Overall ?? true)
            {
                sb.AppendLine("ProceduralObjectGeneration =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ProceduralObjectGeneration)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ObjectSwaps?.Overall ?? true)
            {
                sb.AppendLine("ObjectSwaps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ObjectSwaps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.MaterialSwaps?.Overall ?? true)
            {
                sb.AppendLine("MaterialSwaps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MaterialSwaps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Climate ?? true)
            {
                sb.AppendItem(item.Climate.FormKeyNullable, "Climate");
            }
            if (printMask?.Water?.Overall ?? true)
            {
                item.Water?.Print(sb, "Water");
            }
            if ((printMask?.BlockDensityMult ?? true)
                && item.BlockDensityMult is {} BlockDensityMultItem)
            {
                sb.AppendItem(BlockDensityMultItem, "BlockDensityMult");
            }
            if ((printMask?.CellDensityMult ?? true)
                && item.CellDensityMult is {} CellDensityMultItem)
            {
                sb.AppendItem(CellDensityMultItem, "CellDensityMult");
            }
            if ((printMask?.ScanWorldspaceMult ?? true)
                && item.ScanWorldspaceMult is {} ScanWorldspaceMultItem)
            {
                sb.AppendItem(ScanWorldspaceMultItem, "ScanWorldspaceMult");
            }
            if (printMask?.Child ?? true)
            {
                sb.AppendItem(item.Child.FormKeyNullable, "Child");
            }
            if (printMask?.AmbienceSet ?? true)
            {
                sb.AppendItem(item.AmbienceSet.FormKeyNullable, "AmbienceSet");
            }
            if (printMask?.MusicType ?? true)
            {
                sb.AppendItem(item.MusicType.FormKeyNullable, "MusicType");
            }
            if (printMask?.TimeOfDay ?? true)
            {
                sb.AppendItem(item.TimeOfDay.FormKeyNullable, "TimeOfDay");
            }
            if (printMask?.PatternStyle ?? true)
            {
                sb.AppendItem(item.PatternStyle.FormKeyNullable, "PatternStyle");
            }
            if (printMask?.Color ?? true)
            {
                sb.AppendItem(item.Color, "Color");
            }
            if (printMask?.SurfaceColor1 ?? true)
            {
                sb.AppendItem(item.SurfaceColor1, "SurfaceColor1");
            }
            if (printMask?.SurfaceColor2 ?? true)
            {
                sb.AppendItem(item.SurfaceColor2, "SurfaceColor2");
            }
            if (printMask?.RockTint ?? true)
            {
                sb.AppendItem(item.RockTint, "RockTint");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.MarkerObjectKeywords?.Overall ?? true)
            {
                sb.AppendLine("MarkerObjectKeywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MarkerObjectKeywords)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Terrain?.Overall ?? true)
            {
                sb.AppendLine("Terrain =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Terrain)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.GroundLayerNormal ?? true)
                && item.GroundLayerNormal is {} GroundLayerNormalItem)
            {
                sb.AppendItem(GroundLayerNormalItem, "GroundLayerNormal");
            }
            if ((printMask?.BTPS ?? true)
                && item.BTPS is {} BTPSItem)
            {
                sb.AppendLine($"BTPS => {SpanExt.ToHexString(BTPSItem)}");
            }
            if (printMask?.DistantView ?? true)
            {
                sb.AppendLine($"DistantView => {SpanExt.ToHexString(item.DistantView)}");
            }
            if ((printMask?.GlobalLayerMaterial ?? true)
                && item.GlobalLayerMaterial is {} GlobalLayerMaterialItem)
            {
                sb.AppendItem(GlobalLayerMaterialItem, "GlobalLayerMaterial");
            }
            if (printMask?.BlockDensityMultGlobal ?? true)
            {
                sb.AppendItem(item.BlockDensityMultGlobal.FormKeyNullable, "BlockDensityMultGlobal");
            }
            if (printMask?.CellDensityMultGlobal ?? true)
            {
                sb.AppendItem(item.CellDensityMultGlobal.FormKeyNullable, "CellDensityMultGlobal");
            }
            if (printMask?.ScanWorldspaceMultGlobal ?? true)
            {
                sb.AppendItem(item.ScanWorldspaceMultGlobal.FormKeyNullable, "ScanWorldspaceMultGlobal");
            }
        }
        
        public static Biome_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Biome_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Biome_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Biome_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Biome_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Biome_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Biome_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Biome_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeGetter? lhs,
            IBiomeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.FilterString) ?? true))
            {
                if (!string.Equals(lhs.FilterString, rhs.FilterString)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Flora) ?? true))
            {
                if (!lhs.Flora.SequenceEqualNullable(rhs.Flora)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.ResourceGeneration) ?? true))
            {
                if (!lhs.ResourceGeneration.SequenceEqualNullable(rhs.ResourceGeneration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.ProceduralObjectGeneration) ?? true))
            {
                if (!lhs.ProceduralObjectGeneration.SequenceEqual(rhs.ProceduralObjectGeneration, (l, r) => ((BiomeProceduralObjectGenerationCommon)((IBiomeProceduralObjectGenerationGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Biome_FieldIndex.ProceduralObjectGeneration)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.ObjectSwaps) ?? true))
            {
                if (!lhs.ObjectSwaps.SequenceEqualNullable(rhs.ObjectSwaps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.MaterialSwaps) ?? true))
            {
                if (!lhs.MaterialSwaps.SequenceEqualNullable(rhs.MaterialSwaps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Climate) ?? true))
            {
                if (!lhs.Climate.Equals(rhs.Climate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Water) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Water, rhs.Water, out var lhsWater, out var rhsWater, out var isWaterEqual))
                {
                    if (!((BiomeWaterDataCommon)((IBiomeWaterDataGetter)lhsWater).CommonInstance()!).Equals(lhsWater, rhsWater, equalsMask?.GetSubCrystal((int)Biome_FieldIndex.Water))) return false;
                }
                else if (!isWaterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.BlockDensityMult) ?? true))
            {
                if (!lhs.BlockDensityMult.EqualsWithin(rhs.BlockDensityMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.CellDensityMult) ?? true))
            {
                if (!lhs.CellDensityMult.EqualsWithin(rhs.CellDensityMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.ScanWorldspaceMult) ?? true))
            {
                if (!lhs.ScanWorldspaceMult.EqualsWithin(rhs.ScanWorldspaceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Child) ?? true))
            {
                if (!lhs.Child.Equals(rhs.Child)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.AmbienceSet) ?? true))
            {
                if (!lhs.AmbienceSet.Equals(rhs.AmbienceSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.MusicType) ?? true))
            {
                if (!lhs.MusicType.Equals(rhs.MusicType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.TimeOfDay) ?? true))
            {
                if (!lhs.TimeOfDay.Equals(rhs.TimeOfDay)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.PatternStyle) ?? true))
            {
                if (!lhs.PatternStyle.Equals(rhs.PatternStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.SurfaceColor1) ?? true))
            {
                if (!lhs.SurfaceColor1.ColorOnlyEquals(rhs.SurfaceColor1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.SurfaceColor2) ?? true))
            {
                if (!lhs.SurfaceColor2.ColorOnlyEquals(rhs.SurfaceColor2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.RockTint) ?? true))
            {
                if (!lhs.RockTint.ColorOnlyEquals(rhs.RockTint)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.MarkerObjectKeywords) ?? true))
            {
                if (!lhs.MarkerObjectKeywords.SequenceEqual(rhs.MarkerObjectKeywords, (l, r) => ((BiomeMarkerTypeCommon)((IBiomeMarkerTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Biome_FieldIndex.MarkerObjectKeywords)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.Terrain) ?? true))
            {
                if (!lhs.Terrain.SequenceEqual(rhs.Terrain, (l, r) => ((BiomeTerrainCommon)((IBiomeTerrainGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Biome_FieldIndex.Terrain)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.GroundLayerNormal) ?? true))
            {
                if (!string.Equals(lhs.GroundLayerNormal, rhs.GroundLayerNormal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.BTPS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BTPS, rhs.BTPS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.DistantView) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DistantView.Span, rhs.DistantView.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.GlobalLayerMaterial) ?? true))
            {
                if (!string.Equals(lhs.GlobalLayerMaterial, rhs.GlobalLayerMaterial)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.BlockDensityMultGlobal) ?? true))
            {
                if (!lhs.BlockDensityMultGlobal.Equals(rhs.BlockDensityMultGlobal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.CellDensityMultGlobal) ?? true))
            {
                if (!lhs.CellDensityMultGlobal.Equals(rhs.CellDensityMultGlobal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Biome_FieldIndex.ScanWorldspaceMultGlobal) ?? true))
            {
                if (!lhs.ScanWorldspaceMultGlobal.Equals(rhs.ScanWorldspaceMultGlobal)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBiomeGetter?)lhs,
                rhs: rhs as IBiomeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBiomeGetter?)lhs,
                rhs: rhs as IBiomeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBiomeGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            if (item.FilterString is {} FilterStringitem)
            {
                hash.Add(FilterStringitem);
            }
            hash.Add(item.Flora);
            hash.Add(item.ResourceGeneration);
            hash.Add(item.ProceduralObjectGeneration);
            hash.Add(item.ObjectSwaps);
            hash.Add(item.MaterialSwaps);
            hash.Add(item.Climate);
            hash.Add(item.Water);
            if (item.BlockDensityMult is {} BlockDensityMultitem)
            {
                hash.Add(BlockDensityMultitem);
            }
            if (item.CellDensityMult is {} CellDensityMultitem)
            {
                hash.Add(CellDensityMultitem);
            }
            if (item.ScanWorldspaceMult is {} ScanWorldspaceMultitem)
            {
                hash.Add(ScanWorldspaceMultitem);
            }
            hash.Add(item.Child);
            hash.Add(item.AmbienceSet);
            hash.Add(item.MusicType);
            hash.Add(item.TimeOfDay);
            hash.Add(item.PatternStyle);
            hash.Add(item.Color);
            hash.Add(item.SurfaceColor1);
            hash.Add(item.SurfaceColor2);
            hash.Add(item.RockTint);
            hash.Add(item.Type);
            hash.Add(item.MarkerObjectKeywords);
            hash.Add(item.Terrain);
            if (item.GroundLayerNormal is {} GroundLayerNormalitem)
            {
                hash.Add(GroundLayerNormalitem);
            }
            if (item.BTPS is {} BTPSItem)
            {
                hash.Add(BTPSItem);
            }
            hash.Add(item.DistantView);
            if (item.GlobalLayerMaterial is {} GlobalLayerMaterialitem)
            {
                hash.Add(GlobalLayerMaterialitem);
            }
            hash.Add(item.BlockDensityMultGlobal);
            hash.Add(item.CellDensityMultGlobal);
            hash.Add(item.ScanWorldspaceMultGlobal);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IBiomeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IBiomeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Biome.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Flora is {} FloraItem)
            {
                foreach (var item in FloraItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.ResourceGeneration)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.ProceduralObjectGeneration.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.ObjectSwaps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.MaterialSwaps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Climate, out var ClimateInfo))
            {
                yield return ClimateInfo;
            }
            foreach (var item in obj.Water.EnumerateFormLinks())
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Child, out var ChildInfo))
            {
                yield return ChildInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AmbienceSet, out var AmbienceSetInfo))
            {
                yield return AmbienceSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MusicType, out var MusicTypeInfo))
            {
                yield return MusicTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.TimeOfDay, out var TimeOfDayInfo))
            {
                yield return TimeOfDayInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PatternStyle, out var PatternStyleInfo))
            {
                yield return PatternStyleInfo;
            }
            foreach (var item in obj.MarkerObjectKeywords.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Terrain.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.BlockDensityMultGlobal, out var BlockDensityMultGlobalInfo))
            {
                yield return BlockDensityMultGlobalInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CellDensityMultGlobal, out var CellDensityMultGlobalInfo))
            {
                yield return CellDensityMultGlobalInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ScanWorldspaceMultGlobal, out var ScanWorldspaceMultGlobalInfo))
            {
                yield return ScanWorldspaceMultGlobalInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Biome Duplicate(
            IBiomeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Biome(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IBiomeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IBiomeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class BiomeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly BiomeSetterTranslationCommon Instance = new BiomeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeInternal item,
            IBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IBiome item,
            IBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.FilterString) ?? true))
            {
                item.FilterString = rhs.FilterString;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Flora) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.Flora);
                try
                {
                    if ((rhs.Flora != null))
                    {
                        item.Flora = 
                            rhs.Flora
                                .Select(b => (IFormLinkGetter<IFloraGetter>)new FormLink<IFloraGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IFloraGetter>>();
                    }
                    else
                    {
                        item.Flora = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.ResourceGeneration) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.ResourceGeneration);
                try
                {
                    item.ResourceGeneration.SetTo(
                        rhs.ResourceGeneration
                            .Select(b => (IFormLinkGetter<IResourceGenerationDataGetter>)new FormLink<IResourceGenerationDataGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.ProceduralObjectGeneration) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.ProceduralObjectGeneration);
                try
                {
                    item.ProceduralObjectGeneration.SetTo(
                        rhs.ProceduralObjectGeneration
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.ObjectSwaps) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.ObjectSwaps);
                try
                {
                    item.ObjectSwaps.SetTo(
                        rhs.ObjectSwaps
                            .Select(b => (IFormLinkGetter<IObjectSwapGetter>)new FormLink<IObjectSwapGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.MaterialSwaps) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.MaterialSwaps);
                try
                {
                    item.MaterialSwaps.SetTo(
                        rhs.MaterialSwaps
                            .Select(b => (IFormLinkGetter<ILayeredMaterialSwapGetter>)new FormLink<ILayeredMaterialSwapGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Climate) ?? true))
            {
                item.Climate.SetTo(rhs.Climate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Water) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.Water);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Water) ?? true))
                    {
                        item.Water = rhs.Water.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Biome_FieldIndex.Water),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.BlockDensityMult) ?? true))
            {
                item.BlockDensityMult = rhs.BlockDensityMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.CellDensityMult) ?? true))
            {
                item.CellDensityMult = rhs.CellDensityMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.ScanWorldspaceMult) ?? true))
            {
                item.ScanWorldspaceMult = rhs.ScanWorldspaceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Child) ?? true))
            {
                item.Child.SetTo(rhs.Child.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.AmbienceSet) ?? true))
            {
                item.AmbienceSet.SetTo(rhs.AmbienceSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.MusicType) ?? true))
            {
                item.MusicType.SetTo(rhs.MusicType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.TimeOfDay) ?? true))
            {
                item.TimeOfDay.SetTo(rhs.TimeOfDay.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.PatternStyle) ?? true))
            {
                item.PatternStyle.SetTo(rhs.PatternStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.SurfaceColor1) ?? true))
            {
                item.SurfaceColor1 = rhs.SurfaceColor1;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.SurfaceColor2) ?? true))
            {
                item.SurfaceColor2 = rhs.SurfaceColor2;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.RockTint) ?? true))
            {
                item.RockTint = rhs.RockTint;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.MarkerObjectKeywords) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.MarkerObjectKeywords);
                try
                {
                    item.MarkerObjectKeywords.SetTo(
                        rhs.MarkerObjectKeywords
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.Terrain) ?? true))
            {
                errorMask?.PushIndex((int)Biome_FieldIndex.Terrain);
                try
                {
                    item.Terrain.SetTo(
                        rhs.Terrain
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.GroundLayerNormal) ?? true))
            {
                item.GroundLayerNormal = rhs.GroundLayerNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.BTPS) ?? true))
            {
                if(rhs.BTPS is {} BTPSrhs)
                {
                    item.BTPS = BTPSrhs.ToArray();
                }
                else
                {
                    item.BTPS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.DistantView) ?? true))
            {
                item.DistantView = rhs.DistantView.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.GlobalLayerMaterial) ?? true))
            {
                item.GlobalLayerMaterial = rhs.GlobalLayerMaterial;
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.BlockDensityMultGlobal) ?? true))
            {
                item.BlockDensityMultGlobal.SetTo(rhs.BlockDensityMultGlobal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.CellDensityMultGlobal) ?? true))
            {
                item.CellDensityMultGlobal.SetTo(rhs.CellDensityMultGlobal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Biome_FieldIndex.ScanWorldspaceMultGlobal) ?? true))
            {
                item.ScanWorldspaceMultGlobal.SetTo(rhs.ScanWorldspaceMultGlobal.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiome item,
            IBiomeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBiomeInternal)item,
                rhs: (IBiomeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBiome)item,
                rhs: (IBiomeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBiomeInternal)item,
                rhs: (IBiomeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBiome)item,
                rhs: (IBiomeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Biome DeepCopy(
            IBiomeGetter item,
            Biome.TranslationMask? copyMask = null)
        {
            Biome ret = (Biome)((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).GetNew();
            ((BiomeSetterTranslationCommon)((IBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Biome DeepCopy(
            IBiomeGetter item,
            out Biome.ErrorMask errorMask,
            Biome.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Biome ret = (Biome)((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).GetNew();
            ((BiomeSetterTranslationCommon)((IBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Biome.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Biome DeepCopy(
            IBiomeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Biome ret = (Biome)((BiomeCommon)((IBiomeGetter)item).CommonInstance()!).GetNew();
            ((BiomeSetterTranslationCommon)((IBiomeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Biome
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Biome_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Biome_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BiomeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BiomeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BiomeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BiomeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBiomeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FilterString,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFloraGetter>>.Instance.Write(
                writer: writer,
                items: item.Flora,
                recordType: translationParams.ConvertToCustom(RecordTypes.PNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IFloraGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IResourceGenerationDataGetter>>.Instance.Write(
                writer: writer,
                items: item.ResourceGeneration,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IResourceGenerationDataGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.RNAM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBiomeProceduralObjectGenerationGetter>.Instance.Write(
                writer: writer,
                items: item.ProceduralObjectGeneration,
                transl: (MutagenWriter subWriter, IBiomeProceduralObjectGenerationGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BiomeProceduralObjectGenerationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IObjectSwapGetter>>.Instance.Write(
                writer: writer,
                items: item.ObjectSwaps,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IObjectSwapGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ONAM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILayeredMaterialSwapGetter>>.Instance.Write(
                writer: writer,
                items: item.MaterialSwaps,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILayeredMaterialSwapGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.NAM1));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            var WaterItem = item.Water;
            ((BiomeWaterDataBinaryWriteTranslation)((IBinaryItem)WaterItem).BinaryWriteTranslator).Write(
                item: WaterItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BlockDensityMult,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.CellDensityMult,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ScanWorldspaceMult,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Child,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AmbienceSet,
                header: translationParams.ConvertToCustom(RecordTypes.BIAS));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MusicType,
                header: translationParams.ConvertToCustom(RecordTypes.BIMT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TimeOfDay,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PatternStyle,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SurfaceColor1,
                header: translationParams.ConvertToCustom(RecordTypes.BMC1));
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SurfaceColor2,
                header: translationParams.ConvertToCustom(RecordTypes.BMC2));
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RockTint,
                header: translationParams.ConvertToCustom(RecordTypes.BMC3));
            EnumBinaryTranslation<Biome.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBiomeMarkerTypeGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerObjectKeywords,
                transl: (MutagenWriter subWriter, IBiomeMarkerTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BiomeMarkerTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBiomeTerrainGetter>.Instance.Write(
                writer: writer,
                items: item.Terrain,
                transl: (MutagenWriter subWriter, IBiomeTerrainGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BiomeTerrainBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GroundLayerNormal,
                header: translationParams.ConvertToCustom(RecordTypes.TX16),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BTPS,
                header: translationParams.ConvertToCustom(RecordTypes.BTPS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DistantView,
                header: translationParams.ConvertToCustom(RecordTypes.BDFS));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalLayerMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.EFSD),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BlockDensityMultGlobal,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CellDensityMultGlobal,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ScanWorldspaceMultGlobal,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
        }

        public void Write(
            MutagenWriter writer,
            IBiomeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.BIOM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBiomeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBiomeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly BiomeBinaryCreateTranslation Instance = new BiomeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.BIOM;
        public static ParseResult FillBinaryRecordTypes(
            IBiomeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Biome_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Biome_FieldIndex.Name)
                    {
                        item.Keywords = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                                reader: frame,
                                countLengthLength: 4,
                                countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                                triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                                transl: FormLinkBinaryTranslation.Instance.Parse)
                            .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                        return new ParseResult((int)Biome_FieldIndex.Keywords, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Biome_FieldIndex.Type)
                    {
                        item.MarkerObjectKeywords.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BiomeMarkerType>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: BiomeMarkerType_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: BiomeMarkerType.TryCreateFromBinary));
                        return new ParseResult((int)Biome_FieldIndex.MarkerObjectKeywords, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                item.Keywords = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                                        reader: frame,
                                        countLengthLength: 4,
                                        countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                                        triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                                        transl: FormLinkBinaryTranslation.Instance.Parse)
                                    .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                                return new ParseResult((int)Biome_FieldIndex.Keywords, nextRecordType);
                            case 1:
                                item.MarkerObjectKeywords.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BiomeMarkerType>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: BiomeMarkerType_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: BiomeMarkerType.TryCreateFromBinary));
                                return new ParseResult((int)Biome_FieldIndex.MarkerObjectKeywords, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FilterString = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Biome_FieldIndex.FilterString;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flora = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFloraGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IFloraGetter>>();
                    return (int)Biome_FieldIndex.Flora;
                }
                case RecordTypeInts.RNAM:
                {
                    item.ResourceGeneration.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IResourceGenerationDataGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.RNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Biome_FieldIndex.ResourceGeneration;
                }
                case RecordTypeInts.FNAM:
                case RecordTypeInts.BNAM:
                case RecordTypeInts.GNAM:
                case RecordTypeInts.DNAM:
                {
                    item.ProceduralObjectGeneration.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BiomeProceduralObjectGeneration>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: BiomeProceduralObjectGeneration_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: BiomeProceduralObjectGeneration.TryCreateFromBinary));
                    return (int)Biome_FieldIndex.ProceduralObjectGeneration;
                }
                case RecordTypeInts.ONAM:
                {
                    item.ObjectSwaps.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IObjectSwapGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ONAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Biome_FieldIndex.ObjectSwaps;
                }
                case RecordTypeInts.NAM1:
                {
                    item.MaterialSwaps.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILayeredMaterialSwapGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.NAM1),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Biome_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Climate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.Climate;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.INAM:
                case RecordTypeInts.JNAM:
                {
                    item.Water = Mutagen.Bethesda.Starfield.BiomeWaterData.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Biome_FieldIndex.Water;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BlockDensityMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Biome_FieldIndex.BlockDensityMult;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CellDensityMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Biome_FieldIndex.CellDensityMult;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScanWorldspaceMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Biome_FieldIndex.ScanWorldspaceMult;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Child.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.Child;
                }
                case RecordTypeInts.BIAS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AmbienceSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.AmbienceSet;
                }
                case RecordTypeInts.BIMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MusicType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.MusicType;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TimeOfDay.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.TimeOfDay;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PatternStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.PatternStyle;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Biome_FieldIndex.Color;
                }
                case RecordTypeInts.BMC1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SurfaceColor1 = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Biome_FieldIndex.SurfaceColor1;
                }
                case RecordTypeInts.BMC2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SurfaceColor2 = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Biome_FieldIndex.SurfaceColor2;
                }
                case RecordTypeInts.BMC3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RockTint = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Biome_FieldIndex.RockTint;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<Biome.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Biome_FieldIndex.Type;
                }
                case RecordTypeInts.KNAM:
                {
                    item.MarkerObjectKeywords.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BiomeMarkerType>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: BiomeMarkerType_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: BiomeMarkerType.TryCreateFromBinary));
                    return (int)Biome_FieldIndex.MarkerObjectKeywords;
                }
                case RecordTypeInts.LNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.TX00:
                case RecordTypeInts.UX00:
                case RecordTypeInts.VX00:
                case RecordTypeInts.WX00:
                case RecordTypeInts.XX00:
                case RecordTypeInts.YX00:
                {
                    item.Terrain.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BiomeTerrain>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: BiomeTerrain_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: BiomeTerrain.TryCreateFromBinary));
                    return (int)Biome_FieldIndex.Terrain;
                }
                case RecordTypeInts.TX16:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GroundLayerNormal = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Biome_FieldIndex.GroundLayerNormal;
                }
                case RecordTypeInts.BTPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BTPS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Biome_FieldIndex.BTPS;
                }
                case RecordTypeInts.BDFS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantView = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Biome_FieldIndex.DistantView;
                }
                case RecordTypeInts.EFSD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalLayerMaterial = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Biome_FieldIndex.GlobalLayerMaterial;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BlockDensityMultGlobal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.BlockDensityMultGlobal;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CellDensityMultGlobal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.CellDensityMultGlobal;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScanWorldspaceMultGlobal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Biome_FieldIndex.ScanWorldspaceMultGlobal;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IBiomeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Biome_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Biome_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BiomeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BiomeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BiomeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IBiome);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region FilterString
        private int? _FilterStringLocation;
        public String? FilterString => _FilterStringLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilterStringLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IFloraGetter>>? Flora { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IResourceGenerationDataGetter>> ResourceGeneration { get; private set; } = [];
        public IReadOnlyList<IBiomeProceduralObjectGenerationGetter> ProceduralObjectGeneration { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IObjectSwapGetter>> ObjectSwaps { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>> MaterialSwaps { get; private set; } = [];
        #region Climate
        private int? _ClimateLocation;
        public IFormLinkNullableGetter<IClimateGetter> Climate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IClimateGetter>(_package, _recordData, _ClimateLocation);
        #endregion
        #region Water
        private IBiomeWaterDataGetter? _Water;
        public IBiomeWaterDataGetter Water => _Water ?? new BiomeWaterData();
        #endregion
        #region BlockDensityMult
        private int? _BlockDensityMultLocation;
        public Single? BlockDensityMult => _BlockDensityMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BlockDensityMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region CellDensityMult
        private int? _CellDensityMultLocation;
        public Single? CellDensityMult => _CellDensityMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CellDensityMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ScanWorldspaceMult
        private int? _ScanWorldspaceMultLocation;
        public Single? ScanWorldspaceMult => _ScanWorldspaceMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScanWorldspaceMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Child
        private int? _ChildLocation;
        public IFormLinkNullableGetter<IBiomeGetter> Child => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IBiomeGetter>(_package, _recordData, _ChildLocation);
        #endregion
        #region AmbienceSet
        private int? _AmbienceSetLocation;
        public IFormLinkNullableGetter<IAmbienceSetGetter> AmbienceSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAmbienceSetGetter>(_package, _recordData, _AmbienceSetLocation);
        #endregion
        #region MusicType
        private int? _MusicTypeLocation;
        public IFormLinkNullableGetter<IMusicTypeGetter> MusicType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMusicTypeGetter>(_package, _recordData, _MusicTypeLocation);
        #endregion
        #region TimeOfDay
        private int? _TimeOfDayLocation;
        public IFormLinkNullableGetter<ITimeOfDayRecordGetter> TimeOfDay => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITimeOfDayRecordGetter>(_package, _recordData, _TimeOfDayLocation);
        #endregion
        #region PatternStyle
        private int? _PatternStyleLocation;
        public IFormLinkNullableGetter<ISurfacePatternStyleGetter> PatternStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISurfacePatternStyleGetter>(_package, _recordData, _PatternStyleLocation);
        #endregion
        #region Color
        private int? _ColorLocation;
        public Color Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region SurfaceColor1
        private int? _SurfaceColor1Location;
        public Color SurfaceColor1 => _SurfaceColor1Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SurfaceColor1Location.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region SurfaceColor2
        private int? _SurfaceColor2Location;
        public Color SurfaceColor2 => _SurfaceColor2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SurfaceColor2Location.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region RockTint
        private int? _RockTintLocation;
        public Color RockTint => _RockTintLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RockTintLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region Type
        private int? _TypeLocation;
        public Biome.TypeEnum Type => EnumBinaryTranslation<Biome.TypeEnum, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_TypeLocation, _recordData, _package, 4);
        #endregion
        public IReadOnlyList<IBiomeMarkerTypeGetter> MarkerObjectKeywords { get; private set; } = [];
        public IReadOnlyList<IBiomeTerrainGetter> Terrain { get; private set; } = [];
        #region GroundLayerNormal
        private int? _GroundLayerNormalLocation;
        public String? GroundLayerNormal => _GroundLayerNormalLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GroundLayerNormalLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region BTPS
        private int? _BTPSLocation;
        public ReadOnlyMemorySlice<Byte>? BTPS => _BTPSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BTPSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DistantView
        private int? _DistantViewLocation;
        public ReadOnlyMemorySlice<Byte> DistantView => _DistantViewLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DistantViewLocation.Value, _package.MetaData.Constants) : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region GlobalLayerMaterial
        private int? _GlobalLayerMaterialLocation;
        public String? GlobalLayerMaterial => _GlobalLayerMaterialLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GlobalLayerMaterialLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region BlockDensityMultGlobal
        private int? _BlockDensityMultGlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> BlockDensityMultGlobal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _BlockDensityMultGlobalLocation);
        #endregion
        #region CellDensityMultGlobal
        private int? _CellDensityMultGlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> CellDensityMultGlobal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _CellDensityMultGlobalLocation);
        #endregion
        #region ScanWorldspaceMultGlobal
        private int? _ScanWorldspaceMultGlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> ScanWorldspaceMultGlobal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _ScanWorldspaceMultGlobalLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeGetter BiomeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BiomeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBiomeGetter BiomeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Biome_FieldIndex.Name)
                    {
                        this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                            stream: stream,
                            package: _package,
                            itemLength: 0x4,
                            countLength: 4,
                            countType: RecordTypes.KSIZ,
                            trigger: RecordTypes.KWDA,
                            getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                        return new ParseResult((int)Biome_FieldIndex.Keywords, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Biome_FieldIndex.Type)
                    {
                        this.MarkerObjectKeywords = this.ParseRepeatedTypelessSubrecord<IBiomeMarkerTypeGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: BiomeMarkerType_Registration.TriggerSpecs,
                            factory: BiomeMarkerTypeBinaryOverlay.BiomeMarkerTypeFactory);
                        return new ParseResult((int)Biome_FieldIndex.MarkerObjectKeywords, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                                    stream: stream,
                                    package: _package,
                                    itemLength: 0x4,
                                    countLength: 4,
                                    countType: RecordTypes.KSIZ,
                                    trigger: RecordTypes.KWDA,
                                    getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                                return new ParseResult((int)Biome_FieldIndex.Keywords, type);
                            }
                            case 1:
                            {
                                this.MarkerObjectKeywords = this.ParseRepeatedTypelessSubrecord<IBiomeMarkerTypeGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: BiomeMarkerType_Registration.TriggerSpecs,
                                    factory: BiomeMarkerTypeBinaryOverlay.BiomeMarkerTypeFactory);
                                return new ParseResult((int)Biome_FieldIndex.MarkerObjectKeywords, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.SNAM:
                {
                    _FilterStringLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.FilterString;
                }
                case RecordTypeInts.PNAM:
                {
                    this.Flora = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IFloraGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IFloraGetter>(p, s));
                    return (int)Biome_FieldIndex.Flora;
                }
                case RecordTypeInts.RNAM:
                {
                    this.ResourceGeneration = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IResourceGenerationDataGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IResourceGenerationDataGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.RNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Biome_FieldIndex.ResourceGeneration;
                }
                case RecordTypeInts.FNAM:
                case RecordTypeInts.BNAM:
                case RecordTypeInts.GNAM:
                case RecordTypeInts.DNAM:
                {
                    this.ProceduralObjectGeneration = this.ParseRepeatedTypelessSubrecord<IBiomeProceduralObjectGenerationGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: BiomeProceduralObjectGeneration_Registration.TriggerSpecs,
                        factory: BiomeProceduralObjectGenerationBinaryOverlay.BiomeProceduralObjectGenerationFactory);
                    return (int)Biome_FieldIndex.ProceduralObjectGeneration;
                }
                case RecordTypeInts.ONAM:
                {
                    this.ObjectSwaps = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IObjectSwapGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IObjectSwapGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ONAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Biome_FieldIndex.ObjectSwaps;
                }
                case RecordTypeInts.NAM1:
                {
                    this.MaterialSwaps = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ILayeredMaterialSwapGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILayeredMaterialSwapGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.NAM1,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Biome_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.ENAM:
                {
                    _ClimateLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.Climate;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.INAM:
                case RecordTypeInts.JNAM:
                {
                    this._Water = BiomeWaterDataBinaryOverlay.BiomeWaterDataFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Biome_FieldIndex.Water;
                }
                case RecordTypeInts.WNAM:
                {
                    _BlockDensityMultLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.BlockDensityMult;
                }
                case RecordTypeInts.YNAM:
                {
                    _CellDensityMultLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.CellDensityMult;
                }
                case RecordTypeInts.UNAM:
                {
                    _ScanWorldspaceMultLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.ScanWorldspaceMult;
                }
                case RecordTypeInts.ZNAM:
                {
                    _ChildLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.Child;
                }
                case RecordTypeInts.BIAS:
                {
                    _AmbienceSetLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.AmbienceSet;
                }
                case RecordTypeInts.BIMT:
                {
                    _MusicTypeLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.MusicType;
                }
                case RecordTypeInts.NAM0:
                {
                    _TimeOfDayLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.TimeOfDay;
                }
                case RecordTypeInts.NNAM:
                {
                    _PatternStyleLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.PatternStyle;
                }
                case RecordTypeInts.CNAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.Color;
                }
                case RecordTypeInts.BMC1:
                {
                    _SurfaceColor1Location = (stream.Position - offset);
                    return (int)Biome_FieldIndex.SurfaceColor1;
                }
                case RecordTypeInts.BMC2:
                {
                    _SurfaceColor2Location = (stream.Position - offset);
                    return (int)Biome_FieldIndex.SurfaceColor2;
                }
                case RecordTypeInts.BMC3:
                {
                    _RockTintLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.RockTint;
                }
                case RecordTypeInts.TNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.Type;
                }
                case RecordTypeInts.KNAM:
                {
                    this.MarkerObjectKeywords = this.ParseRepeatedTypelessSubrecord<IBiomeMarkerTypeGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: BiomeMarkerType_Registration.TriggerSpecs,
                        factory: BiomeMarkerTypeBinaryOverlay.BiomeMarkerTypeFactory);
                    return (int)Biome_FieldIndex.MarkerObjectKeywords;
                }
                case RecordTypeInts.LNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.TX00:
                case RecordTypeInts.UX00:
                case RecordTypeInts.VX00:
                case RecordTypeInts.WX00:
                case RecordTypeInts.XX00:
                case RecordTypeInts.YX00:
                {
                    this.Terrain = this.ParseRepeatedTypelessSubrecord<IBiomeTerrainGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: BiomeTerrain_Registration.TriggerSpecs,
                        factory: BiomeTerrainBinaryOverlay.BiomeTerrainFactory);
                    return (int)Biome_FieldIndex.Terrain;
                }
                case RecordTypeInts.TX16:
                {
                    _GroundLayerNormalLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.GroundLayerNormal;
                }
                case RecordTypeInts.BTPS:
                {
                    _BTPSLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.BTPS;
                }
                case RecordTypeInts.BDFS:
                {
                    _DistantViewLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.DistantView;
                }
                case RecordTypeInts.EFSD:
                {
                    _GlobalLayerMaterialLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.GlobalLayerMaterial;
                }
                case RecordTypeInts.NAM2:
                {
                    _BlockDensityMultGlobalLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.BlockDensityMultGlobal;
                }
                case RecordTypeInts.NAM3:
                {
                    _CellDensityMultGlobalLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.CellDensityMultGlobal;
                }
                case RecordTypeInts.NAM4:
                {
                    _ScanWorldspaceMultGlobalLocation = (stream.Position - offset);
                    return (int)Biome_FieldIndex.ScanWorldspaceMultGlobal;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Biome>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IBiomeGetter rhs) return false;
            return ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeGetter? obj)
        {
            return ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeCommon)((IBiomeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

