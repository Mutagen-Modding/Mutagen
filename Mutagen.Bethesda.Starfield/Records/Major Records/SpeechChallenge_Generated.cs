/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SpeechChallenge :
        StarfieldMajorRecord,
        IEquatable<ISpeechChallengeGetter>,
        ILoquiObjectSetter<SpeechChallenge>,
        ISpeechChallengeInternal
    {
        #region Ctor
        protected SpeechChallenge()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region QuestStageOnWin
        public Int16? QuestStageOnWin { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ISpeechChallengeGetter.QuestStageOnWin => this.QuestStageOnWin;
        #endregion
        #region QuestStageOnLoss
        public Int16? QuestStageOnLoss { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ISpeechChallengeGetter.QuestStageOnLoss => this.QuestStageOnLoss;
        #endregion
        #region SRAN
        public Boolean SRAN { get; set; } = default(Boolean);
        #endregion
        #region SGEN
        public Boolean SGEN { get; set; } = default(Boolean);
        #endregion
        #region Quest
        private readonly IFormLinkNullable<IQuestGetter> _Quest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> ISpeechChallengeGetter.Quest => this.Quest;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ISpeechChallengeGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISceneGetter>>? _Scenes;
        public ExtendedList<IFormLinkGetter<ISceneGetter>>? Scenes
        {
            get => this._Scenes;
            set => this._Scenes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? ISpeechChallengeGetter.Scenes => _Scenes;
        #endregion

        #endregion
        #region DIFF
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DIFF;
        public MemorySlice<Byte>? DIFF
        {
            get => this._DIFF;
            set => this._DIFF = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISpeechChallengeGetter.DIFF => this.DIFF;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpeechChallengeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.QuestStageOnWin = initialValue;
                this.QuestStageOnLoss = initialValue;
                this.SRAN = initialValue;
                this.SGEN = initialValue;
                this.Quest = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scenes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DIFF = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem QuestStageOnWin,
                TItem QuestStageOnLoss,
                TItem SRAN,
                TItem SGEN,
                TItem Quest,
                TItem Keywords,
                TItem Scenes,
                TItem DIFF)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.QuestStageOnWin = QuestStageOnWin;
                this.QuestStageOnLoss = QuestStageOnLoss;
                this.SRAN = SRAN;
                this.SGEN = SGEN;
                this.Quest = Quest;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scenes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Scenes, Enumerable.Empty<(int Index, TItem Value)>());
                this.DIFF = DIFF;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem QuestStageOnWin;
            public TItem QuestStageOnLoss;
            public TItem SRAN;
            public TItem SGEN;
            public TItem Quest;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Scenes;
            public TItem DIFF;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.QuestStageOnWin, rhs.QuestStageOnWin)) return false;
                if (!object.Equals(this.QuestStageOnLoss, rhs.QuestStageOnLoss)) return false;
                if (!object.Equals(this.SRAN, rhs.SRAN)) return false;
                if (!object.Equals(this.SGEN, rhs.SGEN)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                if (!object.Equals(this.DIFF, rhs.DIFF)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.QuestStageOnWin);
                hash.Add(this.QuestStageOnLoss);
                hash.Add(this.SRAN);
                hash.Add(this.SGEN);
                hash.Add(this.Quest);
                hash.Add(this.Keywords);
                hash.Add(this.Scenes);
                hash.Add(this.DIFF);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.QuestStageOnWin)) return false;
                if (!eval(this.QuestStageOnLoss)) return false;
                if (!eval(this.SRAN)) return false;
                if (!eval(this.SGEN)) return false;
                if (!eval(this.Quest)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DIFF)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.QuestStageOnWin)) return true;
                if (eval(this.QuestStageOnLoss)) return true;
                if (eval(this.SRAN)) return true;
                if (eval(this.SGEN)) return true;
                if (eval(this.Quest)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null)
                    {
                        foreach (var item in this.Scenes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DIFF)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SpeechChallenge.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.QuestStageOnWin = eval(this.QuestStageOnWin);
                obj.QuestStageOnLoss = eval(this.QuestStageOnLoss);
                obj.SRAN = eval(this.SRAN);
                obj.SGEN = eval(this.SGEN);
                obj.Quest = eval(this.Quest);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Scenes != null)
                {
                    obj.Scenes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Scenes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Scenes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Scenes.Specific = l;
                        foreach (var item in Scenes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DIFF = eval(this.DIFF);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SpeechChallenge.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SpeechChallenge.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SpeechChallenge.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.QuestStageOnWin ?? true)
                    {
                        sb.AppendItem(QuestStageOnWin, "QuestStageOnWin");
                    }
                    if (printMask?.QuestStageOnLoss ?? true)
                    {
                        sb.AppendItem(QuestStageOnLoss, "QuestStageOnLoss");
                    }
                    if (printMask?.SRAN ?? true)
                    {
                        sb.AppendItem(SRAN, "SRAN");
                    }
                    if (printMask?.SGEN ?? true)
                    {
                        sb.AppendItem(SGEN, "SGEN");
                    }
                    if (printMask?.Quest ?? true)
                    {
                        sb.AppendItem(Quest, "Quest");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Scenes?.Overall ?? true)
                        && Scenes is {} ScenesItem)
                    {
                        sb.AppendLine("Scenes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ScenesItem.Overall);
                            if (ScenesItem.Specific != null)
                            {
                                foreach (var subItem in ScenesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DIFF ?? true)
                    {
                        sb.AppendItem(DIFF, "DIFF");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? QuestStageOnWin;
            public Exception? QuestStageOnLoss;
            public Exception? SRAN;
            public Exception? SGEN;
            public Exception? Quest;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Scenes;
            public Exception? DIFF;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SpeechChallenge_FieldIndex enu = (SpeechChallenge_FieldIndex)index;
                switch (enu)
                {
                    case SpeechChallenge_FieldIndex.QuestStageOnWin:
                        return QuestStageOnWin;
                    case SpeechChallenge_FieldIndex.QuestStageOnLoss:
                        return QuestStageOnLoss;
                    case SpeechChallenge_FieldIndex.SRAN:
                        return SRAN;
                    case SpeechChallenge_FieldIndex.SGEN:
                        return SGEN;
                    case SpeechChallenge_FieldIndex.Quest:
                        return Quest;
                    case SpeechChallenge_FieldIndex.Keywords:
                        return Keywords;
                    case SpeechChallenge_FieldIndex.Scenes:
                        return Scenes;
                    case SpeechChallenge_FieldIndex.DIFF:
                        return DIFF;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SpeechChallenge_FieldIndex enu = (SpeechChallenge_FieldIndex)index;
                switch (enu)
                {
                    case SpeechChallenge_FieldIndex.QuestStageOnWin:
                        this.QuestStageOnWin = ex;
                        break;
                    case SpeechChallenge_FieldIndex.QuestStageOnLoss:
                        this.QuestStageOnLoss = ex;
                        break;
                    case SpeechChallenge_FieldIndex.SRAN:
                        this.SRAN = ex;
                        break;
                    case SpeechChallenge_FieldIndex.SGEN:
                        this.SGEN = ex;
                        break;
                    case SpeechChallenge_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case SpeechChallenge_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SpeechChallenge_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SpeechChallenge_FieldIndex.DIFF:
                        this.DIFF = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SpeechChallenge_FieldIndex enu = (SpeechChallenge_FieldIndex)index;
                switch (enu)
                {
                    case SpeechChallenge_FieldIndex.QuestStageOnWin:
                        this.QuestStageOnWin = (Exception?)obj;
                        break;
                    case SpeechChallenge_FieldIndex.QuestStageOnLoss:
                        this.QuestStageOnLoss = (Exception?)obj;
                        break;
                    case SpeechChallenge_FieldIndex.SRAN:
                        this.SRAN = (Exception?)obj;
                        break;
                    case SpeechChallenge_FieldIndex.SGEN:
                        this.SGEN = (Exception?)obj;
                        break;
                    case SpeechChallenge_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case SpeechChallenge_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SpeechChallenge_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SpeechChallenge_FieldIndex.DIFF:
                        this.DIFF = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (QuestStageOnWin != null) return true;
                if (QuestStageOnLoss != null) return true;
                if (SRAN != null) return true;
                if (SGEN != null) return true;
                if (Quest != null) return true;
                if (Keywords != null) return true;
                if (Scenes != null) return true;
                if (DIFF != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(QuestStageOnWin, "QuestStageOnWin");
                }
                {
                    sb.AppendItem(QuestStageOnLoss, "QuestStageOnLoss");
                }
                {
                    sb.AppendItem(SRAN, "SRAN");
                }
                {
                    sb.AppendItem(SGEN, "SGEN");
                }
                {
                    sb.AppendItem(Quest, "Quest");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Scenes is {} ScenesItem)
                {
                    sb.AppendLine("Scenes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ScenesItem.Overall);
                        if (ScenesItem.Specific != null)
                        {
                            foreach (var subItem in ScenesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DIFF, "DIFF");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.QuestStageOnWin = this.QuestStageOnWin.Combine(rhs.QuestStageOnWin);
                ret.QuestStageOnLoss = this.QuestStageOnLoss.Combine(rhs.QuestStageOnLoss);
                ret.SRAN = this.SRAN.Combine(rhs.SRAN);
                ret.SGEN = this.SGEN.Combine(rhs.SGEN);
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Scenes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Scenes?.Overall, rhs.Scenes?.Overall), Noggog.ExceptionExt.Combine(this.Scenes?.Specific, rhs.Scenes?.Specific));
                ret.DIFF = this.DIFF.Combine(rhs.DIFF);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool QuestStageOnWin;
            public bool QuestStageOnLoss;
            public bool SRAN;
            public bool SGEN;
            public bool Quest;
            public bool Keywords;
            public bool Scenes;
            public bool DIFF;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.QuestStageOnWin = defaultOn;
                this.QuestStageOnLoss = defaultOn;
                this.SRAN = defaultOn;
                this.SGEN = defaultOn;
                this.Quest = defaultOn;
                this.Keywords = defaultOn;
                this.Scenes = defaultOn;
                this.DIFF = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((QuestStageOnWin, null));
                ret.Add((QuestStageOnLoss, null));
                ret.Add((SRAN, null));
                ret.Add((SGEN, null));
                ret.Add((Quest, null));
                ret.Add((Keywords, null));
                ret.Add((Scenes, null));
                ret.Add((DIFF, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SpeechChallenge_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SpeechChallengeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SpeechChallengeSetterCommon.Instance.RemapLinks(this, mapping);
        public SpeechChallenge(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SpeechChallenge(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SpeechChallenge(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SpeechChallenge(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SpeechChallenge(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SpeechChallenge>.ToString(this);
        }

        protected override Type LinkType => typeof(ISpeechChallenge);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISpeechChallengeGetter rhs) return false;
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpeechChallengeGetter? obj)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpeechChallengeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpeechChallengeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SpeechChallenge CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SpeechChallenge();
            ((SpeechChallengeSetterCommon)((ISpeechChallengeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SpeechChallenge item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SpeechChallengeSetterCommon)((ISpeechChallengeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SpeechChallenge GetNew()
        {
            return new SpeechChallenge();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpeechChallenge :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ISpeechChallengeInternal>,
        ISpeechChallengeGetter,
        IStarfieldMajorRecordInternal
    {
        new Int16? QuestStageOnWin { get; set; }
        new Int16? QuestStageOnLoss { get; set; }
        new Boolean SRAN { get; set; }
        new Boolean SGEN { get; set; }
        new IFormLinkNullable<IQuestGetter> Quest { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<IFormLinkGetter<ISceneGetter>>? Scenes { get; set; }
        new MemorySlice<Byte>? DIFF { get; set; }
    }

    public partial interface ISpeechChallengeInternal :
        IStarfieldMajorRecordInternal,
        ISpeechChallenge,
        ISpeechChallengeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SPCH)]
    public partial interface ISpeechChallengeGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ISpeechChallengeGetter>,
        IMapsToGetter<ISpeechChallengeGetter>
    {
        static new ILoquiRegistration StaticRegistration => SpeechChallenge_Registration.Instance;
        Int16? QuestStageOnWin { get; }
        Int16? QuestStageOnLoss { get; }
        Boolean SRAN { get; }
        Boolean SGEN { get; }
        IFormLinkNullableGetter<IQuestGetter> Quest { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IFormLinkGetter<ISceneGetter>>? Scenes { get; }
        ReadOnlyMemorySlice<Byte>? DIFF { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpeechChallengeMixIn
    {
        public static void Clear(this ISpeechChallengeInternal item)
        {
            ((SpeechChallengeSetterCommon)((ISpeechChallengeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SpeechChallenge.Mask<bool> GetEqualsMask(
            this ISpeechChallengeGetter item,
            ISpeechChallengeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISpeechChallengeGetter item,
            string? name = null,
            SpeechChallenge.Mask<bool>? printMask = null)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISpeechChallengeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpeechChallenge.Mask<bool>? printMask = null)
        {
            ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISpeechChallengeGetter item,
            ISpeechChallengeGetter rhs,
            SpeechChallenge.TranslationMask? equalsMask = null)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISpeechChallengeInternal lhs,
            ISpeechChallengeGetter rhs,
            out SpeechChallenge.ErrorMask errorMask,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SpeechChallenge.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpeechChallengeInternal lhs,
            ISpeechChallengeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SpeechChallenge DeepCopy(
            this ISpeechChallengeGetter item,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            return ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SpeechChallenge DeepCopy(
            this ISpeechChallengeGetter item,
            out SpeechChallenge.ErrorMask errorMask,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            return ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SpeechChallenge DeepCopy(
            this ISpeechChallengeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SpeechChallenge Duplicate(
            this ISpeechChallengeGetter item,
            FormKey formKey,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SpeechChallenge Duplicate(
            this ISpeechChallengeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISpeechChallengeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SpeechChallengeSetterCommon)((ISpeechChallengeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SpeechChallenge_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        QuestStageOnWin = 7,
        QuestStageOnLoss = 8,
        SRAN = 9,
        SGEN = 10,
        Quest = 11,
        Keywords = 12,
        Scenes = 13,
        DIFF = 14,
    }
    #endregion

    #region Registration
    internal partial class SpeechChallenge_Registration : ILoquiRegistration
    {
        public static readonly SpeechChallenge_Registration Instance = new SpeechChallenge_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(SpeechChallenge.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpeechChallenge.ErrorMask);

        public static readonly Type ClassType = typeof(SpeechChallenge);

        public static readonly Type GetterType = typeof(ISpeechChallengeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpeechChallenge);

        public static readonly Type? InternalSetterType = typeof(ISpeechChallengeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SpeechChallenge";

        public const string Name = "SpeechChallenge";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SPCH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SPCH);
            var all = RecordCollection.Factory(
                RecordTypes.SPCH,
                RecordTypes.SPWI,
                RecordTypes.SPLO,
                RecordTypes.SRAN,
                RecordTypes.SGEN,
                RecordTypes.SPQU,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.SPMA,
                RecordTypes.DIFF);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SpeechChallengeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SpeechChallengeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SpeechChallengeSetterCommon Instance = new SpeechChallengeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpeechChallengeInternal item)
        {
            ClearPartial();
            item.QuestStageOnWin = default;
            item.QuestStageOnLoss = default;
            item.SRAN = default(Boolean);
            item.SGEN = default(Boolean);
            item.Quest.Clear();
            item.Keywords = null;
            item.Scenes = null;
            item.DIFF = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISpeechChallengeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISpeechChallengeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISpeechChallenge obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quest.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Scenes?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISpeechChallengeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISpeechChallengeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SpeechChallengeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SpeechChallengeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SpeechChallenge)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SpeechChallenge)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SpeechChallengeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SpeechChallengeCommon Instance = new SpeechChallengeCommon();

        public SpeechChallenge.Mask<bool> GetEqualsMask(
            ISpeechChallengeGetter item,
            ISpeechChallengeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpeechChallenge.Mask<bool>(false);
            ((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpeechChallengeGetter item,
            ISpeechChallengeGetter rhs,
            SpeechChallenge.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.QuestStageOnWin = item.QuestStageOnWin == rhs.QuestStageOnWin;
            ret.QuestStageOnLoss = item.QuestStageOnLoss == rhs.QuestStageOnLoss;
            ret.SRAN = item.SRAN == rhs.SRAN;
            ret.SGEN = item.SGEN == rhs.SGEN;
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Scenes = item.Scenes.CollectionEqualsHelper(
                rhs.Scenes,
                (l, r) => object.Equals(l, r),
                include);
            ret.DIFF = MemorySliceExt.SequenceEqual(item.DIFF, rhs.DIFF);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISpeechChallengeGetter item,
            string? name = null,
            SpeechChallenge.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISpeechChallengeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SpeechChallenge.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SpeechChallenge =>");
            }
            else
            {
                sb.AppendLine($"{name} (SpeechChallenge) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISpeechChallengeGetter item,
            StructuredStringBuilder sb,
            SpeechChallenge.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.QuestStageOnWin ?? true)
                && item.QuestStageOnWin is {} QuestStageOnWinItem)
            {
                sb.AppendItem(QuestStageOnWinItem, "QuestStageOnWin");
            }
            if ((printMask?.QuestStageOnLoss ?? true)
                && item.QuestStageOnLoss is {} QuestStageOnLossItem)
            {
                sb.AppendItem(QuestStageOnLossItem, "QuestStageOnLoss");
            }
            if (printMask?.SRAN ?? true)
            {
                sb.AppendItem(item.SRAN, "SRAN");
            }
            if (printMask?.SGEN ?? true)
            {
                sb.AppendItem(item.SGEN, "SGEN");
            }
            if (printMask?.Quest ?? true)
            {
                sb.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Scenes?.Overall ?? true)
                && item.Scenes is {} ScenesItem)
            {
                sb.AppendLine("Scenes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ScenesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.DIFF ?? true)
                && item.DIFF is {} DIFFItem)
            {
                sb.AppendLine($"DIFF => {SpanExt.ToHexString(DIFFItem)}");
            }
        }
        
        public static SpeechChallenge_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SpeechChallenge_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SpeechChallenge_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SpeechChallenge_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SpeechChallenge_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpeechChallengeGetter? lhs,
            ISpeechChallengeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.QuestStageOnWin) ?? true))
            {
                if (lhs.QuestStageOnWin != rhs.QuestStageOnWin) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.QuestStageOnLoss) ?? true))
            {
                if (lhs.QuestStageOnLoss != rhs.QuestStageOnLoss) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.SRAN) ?? true))
            {
                if (lhs.SRAN != rhs.SRAN) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.SGEN) ?? true))
            {
                if (lhs.SGEN != rhs.SGEN) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Scenes) ?? true))
            {
                if (!lhs.Scenes.SequenceEqualNullable(rhs.Scenes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.DIFF) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DIFF, rhs.DIFF)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISpeechChallengeGetter?)lhs,
                rhs: rhs as ISpeechChallengeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISpeechChallengeGetter?)lhs,
                rhs: rhs as ISpeechChallengeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISpeechChallengeGetter item)
        {
            var hash = new HashCode();
            if (item.QuestStageOnWin is {} QuestStageOnWinitem)
            {
                hash.Add(QuestStageOnWinitem);
            }
            if (item.QuestStageOnLoss is {} QuestStageOnLossitem)
            {
                hash.Add(QuestStageOnLossitem);
            }
            hash.Add(item.SRAN);
            hash.Add(item.SGEN);
            hash.Add(item.Quest);
            hash.Add(item.Keywords);
            hash.Add(item.Scenes);
            if (item.DIFF is {} DIFFItem)
            {
                hash.Add(DIFFItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpeechChallengeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpeechChallengeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SpeechChallenge.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISpeechChallengeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Quest, out var QuestInfo))
            {
                yield return QuestInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Scenes is {} ScenesItem)
            {
                foreach (var item in ScenesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public SpeechChallenge Duplicate(
            ISpeechChallengeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SpeechChallenge(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpeechChallengeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpeechChallengeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SpeechChallengeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SpeechChallengeSetterTranslationCommon Instance = new SpeechChallengeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISpeechChallengeInternal item,
            ISpeechChallengeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISpeechChallenge item,
            ISpeechChallengeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.QuestStageOnWin) ?? true))
            {
                item.QuestStageOnWin = rhs.QuestStageOnWin;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.QuestStageOnLoss) ?? true))
            {
                item.QuestStageOnLoss = rhs.QuestStageOnLoss;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.SRAN) ?? true))
            {
                item.SRAN = rhs.SRAN;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.SGEN) ?? true))
            {
                item.SGEN = rhs.SGEN;
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SpeechChallenge_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)SpeechChallenge_FieldIndex.Scenes);
                try
                {
                    if ((rhs.Scenes != null))
                    {
                        item.Scenes = 
                            rhs.Scenes
                                .Select(b => (IFormLinkGetter<ISceneGetter>)new FormLink<ISceneGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISceneGetter>>();
                    }
                    else
                    {
                        item.Scenes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SpeechChallenge_FieldIndex.DIFF) ?? true))
            {
                if(rhs.DIFF is {} DIFFrhs)
                {
                    item.DIFF = DIFFrhs.ToArray();
                }
                else
                {
                    item.DIFF = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISpeechChallenge item,
            ISpeechChallengeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpeechChallengeInternal)item,
                rhs: (ISpeechChallengeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpeechChallenge)item,
                rhs: (ISpeechChallengeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpeechChallengeInternal)item,
                rhs: (ISpeechChallengeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpeechChallenge)item,
                rhs: (ISpeechChallengeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SpeechChallenge DeepCopy(
            ISpeechChallengeGetter item,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            SpeechChallenge ret = (SpeechChallenge)((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).GetNew();
            ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SpeechChallenge DeepCopy(
            ISpeechChallengeGetter item,
            out SpeechChallenge.ErrorMask errorMask,
            SpeechChallenge.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpeechChallenge ret = (SpeechChallenge)((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).GetNew();
            ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SpeechChallenge.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SpeechChallenge DeepCopy(
            ISpeechChallengeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SpeechChallenge ret = (SpeechChallenge)((SpeechChallengeCommon)((ISpeechChallengeGetter)item).CommonInstance()!).GetNew();
            ((SpeechChallengeSetterTranslationCommon)((ISpeechChallengeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SpeechChallenge
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpeechChallenge_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SpeechChallenge_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpeechChallengeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SpeechChallengeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpeechChallengeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SpeechChallengeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SpeechChallengeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISpeechChallengeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.QuestStageOnWin,
                header: translationParams.ConvertToCustom(RecordTypes.SPWI));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.QuestStageOnLoss,
                header: translationParams.ConvertToCustom(RecordTypes.SPLO));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SRAN,
                header: translationParams.ConvertToCustom(RecordTypes.SRAN));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.SGEN,
                header: translationParams.ConvertToCustom(RecordTypes.SGEN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.SPQU));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Write(
                writer: writer,
                items: item.Scenes,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPMA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISceneGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DIFF,
                header: translationParams.ConvertToCustom(RecordTypes.DIFF));
        }

        public void Write(
            MutagenWriter writer,
            ISpeechChallengeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SPCH,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISpeechChallengeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISpeechChallengeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISpeechChallengeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SpeechChallengeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SpeechChallengeBinaryCreateTranslation Instance = new SpeechChallengeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SPCH;
        public static ParseResult FillBinaryRecordTypes(
            ISpeechChallengeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SPWI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestStageOnWin = frame.ReadInt16();
                    return (int)SpeechChallenge_FieldIndex.QuestStageOnWin;
                }
                case RecordTypeInts.SPLO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QuestStageOnLoss = frame.ReadInt16();
                    return (int)SpeechChallenge_FieldIndex.QuestStageOnLoss;
                }
                case RecordTypeInts.SRAN:
                {
                    item.SRAN = true;
                    return (int)SpeechChallenge_FieldIndex.SRAN;
                }
                case RecordTypeInts.SGEN:
                {
                    item.SGEN = true;
                    return (int)SpeechChallenge_FieldIndex.SGEN;
                }
                case RecordTypeInts.SPQU:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SpeechChallenge_FieldIndex.Quest;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)SpeechChallenge_FieldIndex.Keywords;
                }
                case RecordTypeInts.SPMA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scenes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISceneGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISceneGetter>>();
                    return (int)SpeechChallenge_FieldIndex.Scenes;
                }
                case RecordTypeInts.DIFF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DIFF = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SpeechChallenge_FieldIndex.DIFF;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SpeechChallengeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SpeechChallengeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISpeechChallengeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpeechChallenge_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SpeechChallenge_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpeechChallengeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpeechChallengeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SpeechChallengeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpeechChallengeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpeechChallengeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISpeechChallenge);


        #region QuestStageOnWin
        private int? _QuestStageOnWinLocation;
        public Int16? QuestStageOnWin => _QuestStageOnWinLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _QuestStageOnWinLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        #region QuestStageOnLoss
        private int? _QuestStageOnLossLocation;
        public Int16? QuestStageOnLoss => _QuestStageOnLossLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _QuestStageOnLossLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        #region SRAN
        private int? _SRANLocation;
        public Boolean SRAN => _SRANLocation.HasValue ? true : default(Boolean);
        #endregion
        #region SGEN
        private int? _SGENLocation;
        public Boolean SGEN => _SGENLocation.HasValue ? true : default(Boolean);
        #endregion
        #region Quest
        private int? _QuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> Quest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _QuestLocation);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISceneGetter>>? Scenes { get; private set; }
        #region DIFF
        private int? _DIFFLocation;
        public ReadOnlyMemorySlice<Byte>? DIFF => _DIFFLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DIFFLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SpeechChallengeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISpeechChallengeGetter SpeechChallengeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SpeechChallengeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISpeechChallengeGetter SpeechChallengeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SpeechChallengeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SPWI:
                {
                    _QuestStageOnWinLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.QuestStageOnWin;
                }
                case RecordTypeInts.SPLO:
                {
                    _QuestStageOnLossLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.QuestStageOnLoss;
                }
                case RecordTypeInts.SRAN:
                {
                    _SRANLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.SRAN;
                }
                case RecordTypeInts.SGEN:
                {
                    _SGENLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.SGEN;
                }
                case RecordTypeInts.SPQU:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.Quest;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)SpeechChallenge_FieldIndex.Keywords;
                }
                case RecordTypeInts.SPMA:
                {
                    this.Scenes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ISceneGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISceneGetter>(p, s));
                    return (int)SpeechChallenge_FieldIndex.Scenes;
                }
                case RecordTypeInts.DIFF:
                {
                    _DIFFLocation = (stream.Position - offset);
                    return (int)SpeechChallenge_FieldIndex.DIFF;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpeechChallengeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SpeechChallenge>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISpeechChallengeGetter rhs) return false;
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpeechChallengeGetter? obj)
        {
            return ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpeechChallengeCommon)((ISpeechChallengeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

