/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class TerminalMenu :
        StarfieldMajorRecord,
        IEquatable<ITerminalMenuGetter>,
        ILoquiObjectSetter<TerminalMenu>,
        ITerminalMenuInternal
    {
        #region Ctor
        protected TerminalMenu()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapterIndexed? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public VirtualMachineAdapterIndexed? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterIndexedGetter? ITerminalMenuGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalMenuGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ShowBodyText
        public TerminalMenu.ShowBodyTextOption? ShowBodyText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TerminalMenu.ShowBodyTextOption? ITerminalMenuGetter.ShowBodyText => this.ShowBodyText;
        #endregion
        #region MenuButtonStyle
        public TerminalMenu.MenuButtonStyleOption? MenuButtonStyle { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TerminalMenu.MenuButtonStyleOption? ITerminalMenuGetter.MenuButtonStyle => this.MenuButtonStyle;
        #endregion
        #region Style
        public TerminalMenu.StyleOption? Style { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TerminalMenu.StyleOption? ITerminalMenuGetter.Style => this.Style;
        #endregion
        #region INAM
        public TranslatedString? INAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalMenuGetter.INAM => this.INAM;
        #endregion
        #region BodyTexts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TerminalMenuBodyText>? _BodyTexts;
        public ExtendedList<TerminalMenuBodyText>? BodyTexts
        {
            get => this._BodyTexts;
            set => this._BodyTexts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITerminalMenuBodyTextGetter>? ITerminalMenuGetter.BodyTexts => _BodyTexts;
        #endregion

        #endregion
        #region MenuItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TerminalMenuItem>? _MenuItems;
        public ExtendedList<TerminalMenuItem>? MenuItems
        {
            get => this._MenuItems;
            set => this._MenuItems = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITerminalMenuItemGetter>? ITerminalMenuGetter.MenuItems => _MenuItems;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMenuMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(initialValue, new VirtualMachineAdapterIndexed.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.ShowBodyText = initialValue;
                this.MenuButtonStyle = initialValue;
                this.Style = initialValue;
                this.INAM = initialValue;
                this.BodyTexts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuBodyText.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuBodyText.Mask<TItem>?>>());
                this.MenuItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem ShowBodyText,
                TItem MenuButtonStyle,
                TItem Style,
                TItem INAM,
                TItem BodyTexts,
                TItem MenuItems)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapterIndexed.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.ShowBodyText = ShowBodyText;
                this.MenuButtonStyle = MenuButtonStyle;
                this.Style = Style;
                this.INAM = INAM;
                this.BodyTexts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuBodyText.Mask<TItem>?>>?>(BodyTexts, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuBodyText.Mask<TItem>?>>());
                this.MenuItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>(MenuItems, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public TItem ShowBodyText;
            public TItem MenuButtonStyle;
            public TItem Style;
            public TItem INAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuBodyText.Mask<TItem>?>>?>? BodyTexts;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>? MenuItems;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ShowBodyText, rhs.ShowBodyText)) return false;
                if (!object.Equals(this.MenuButtonStyle, rhs.MenuButtonStyle)) return false;
                if (!object.Equals(this.Style, rhs.Style)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.BodyTexts, rhs.BodyTexts)) return false;
                if (!object.Equals(this.MenuItems, rhs.MenuItems)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.ShowBodyText);
                hash.Add(this.MenuButtonStyle);
                hash.Add(this.Style);
                hash.Add(this.INAM);
                hash.Add(this.BodyTexts);
                hash.Add(this.MenuItems);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.ShowBodyText)) return false;
                if (!eval(this.MenuButtonStyle)) return false;
                if (!eval(this.Style)) return false;
                if (!eval(this.INAM)) return false;
                if (this.BodyTexts != null)
                {
                    if (!eval(this.BodyTexts.Overall)) return false;
                    if (this.BodyTexts.Specific != null)
                    {
                        foreach (var item in this.BodyTexts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MenuItems != null)
                {
                    if (!eval(this.MenuItems.Overall)) return false;
                    if (this.MenuItems.Specific != null)
                    {
                        foreach (var item in this.MenuItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.ShowBodyText)) return true;
                if (eval(this.MenuButtonStyle)) return true;
                if (eval(this.Style)) return true;
                if (eval(this.INAM)) return true;
                if (this.BodyTexts != null)
                {
                    if (eval(this.BodyTexts.Overall)) return true;
                    if (this.BodyTexts.Specific != null)
                    {
                        foreach (var item in this.BodyTexts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MenuItems != null)
                {
                    if (eval(this.MenuItems.Overall)) return true;
                    if (this.MenuItems.Specific != null)
                    {
                        foreach (var item in this.MenuItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TerminalMenu.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapterIndexed.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.ShowBodyText = eval(this.ShowBodyText);
                obj.MenuButtonStyle = eval(this.MenuButtonStyle);
                obj.Style = eval(this.Style);
                obj.INAM = eval(this.INAM);
                if (BodyTexts != null)
                {
                    obj.BodyTexts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TerminalMenuBodyText.Mask<R>?>>?>(eval(this.BodyTexts.Overall), Enumerable.Empty<MaskItemIndexed<R, TerminalMenuBodyText.Mask<R>?>>());
                    if (BodyTexts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TerminalMenuBodyText.Mask<R>?>>();
                        obj.BodyTexts.Specific = l;
                        foreach (var item in BodyTexts.Specific)
                        {
                            MaskItemIndexed<R, TerminalMenuBodyText.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TerminalMenuBodyText.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MenuItems != null)
                {
                    obj.MenuItems = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>?>(eval(this.MenuItems.Overall), Enumerable.Empty<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>());
                    if (MenuItems.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>();
                        obj.MenuItems.Specific = l;
                        foreach (var item in MenuItems.Specific)
                        {
                            MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TerminalMenu.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TerminalMenu.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TerminalMenu.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.ShowBodyText ?? true)
                    {
                        sb.AppendItem(ShowBodyText, "ShowBodyText");
                    }
                    if (printMask?.MenuButtonStyle ?? true)
                    {
                        sb.AppendItem(MenuButtonStyle, "MenuButtonStyle");
                    }
                    if (printMask?.Style ?? true)
                    {
                        sb.AppendItem(Style, "Style");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        sb.AppendItem(INAM, "INAM");
                    }
                    if ((printMask?.BodyTexts?.Overall ?? true)
                        && BodyTexts is {} BodyTextsItem)
                    {
                        sb.AppendLine("BodyTexts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BodyTextsItem.Overall);
                            if (BodyTextsItem.Specific != null)
                            {
                                foreach (var subItem in BodyTextsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MenuItems?.Overall ?? true)
                        && MenuItems is {} MenuItemsItem)
                    {
                        sb.AppendLine("MenuItems =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MenuItemsItem.Overall);
                            if (MenuItemsItem.Specific != null)
                            {
                                foreach (var subItem in MenuItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public Exception? ShowBodyText;
            public Exception? MenuButtonStyle;
            public Exception? Style;
            public Exception? INAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuBodyText.ErrorMask?>>?>? BodyTexts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>? MenuItems;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TerminalMenu_FieldIndex enu = (TerminalMenu_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenu_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case TerminalMenu_FieldIndex.Name:
                        return Name;
                    case TerminalMenu_FieldIndex.ShowBodyText:
                        return ShowBodyText;
                    case TerminalMenu_FieldIndex.MenuButtonStyle:
                        return MenuButtonStyle;
                    case TerminalMenu_FieldIndex.Style:
                        return Style;
                    case TerminalMenu_FieldIndex.INAM:
                        return INAM;
                    case TerminalMenu_FieldIndex.BodyTexts:
                        return BodyTexts;
                    case TerminalMenu_FieldIndex.MenuItems:
                        return MenuItems;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TerminalMenu_FieldIndex enu = (TerminalMenu_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenu_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>(ex, null);
                        break;
                    case TerminalMenu_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case TerminalMenu_FieldIndex.ShowBodyText:
                        this.ShowBodyText = ex;
                        break;
                    case TerminalMenu_FieldIndex.MenuButtonStyle:
                        this.MenuButtonStyle = ex;
                        break;
                    case TerminalMenu_FieldIndex.Style:
                        this.Style = ex;
                        break;
                    case TerminalMenu_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case TerminalMenu_FieldIndex.BodyTexts:
                        this.BodyTexts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuBodyText.ErrorMask?>>?>(ex, null);
                        break;
                    case TerminalMenu_FieldIndex.MenuItems:
                        this.MenuItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TerminalMenu_FieldIndex enu = (TerminalMenu_FieldIndex)index;
                switch (enu)
                {
                    case TerminalMenu_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>?)obj;
                        break;
                    case TerminalMenu_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case TerminalMenu_FieldIndex.ShowBodyText:
                        this.ShowBodyText = (Exception?)obj;
                        break;
                    case TerminalMenu_FieldIndex.MenuButtonStyle:
                        this.MenuButtonStyle = (Exception?)obj;
                        break;
                    case TerminalMenu_FieldIndex.Style:
                        this.Style = (Exception?)obj;
                        break;
                    case TerminalMenu_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case TerminalMenu_FieldIndex.BodyTexts:
                        this.BodyTexts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuBodyText.ErrorMask?>>?>)obj;
                        break;
                    case TerminalMenu_FieldIndex.MenuItems:
                        this.MenuItems = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (ShowBodyText != null) return true;
                if (MenuButtonStyle != null) return true;
                if (Style != null) return true;
                if (INAM != null) return true;
                if (BodyTexts != null) return true;
                if (MenuItems != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(ShowBodyText, "ShowBodyText");
                }
                {
                    sb.AppendItem(MenuButtonStyle, "MenuButtonStyle");
                }
                {
                    sb.AppendItem(Style, "Style");
                }
                {
                    sb.AppendItem(INAM, "INAM");
                }
                if (BodyTexts is {} BodyTextsItem)
                {
                    sb.AppendLine("BodyTexts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BodyTextsItem.Overall);
                        if (BodyTextsItem.Specific != null)
                        {
                            foreach (var subItem in BodyTextsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MenuItems is {} MenuItemsItem)
                {
                    sb.AppendLine("MenuItems =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MenuItemsItem.Overall);
                        if (MenuItemsItem.Specific != null)
                        {
                            foreach (var subItem in MenuItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ShowBodyText = this.ShowBodyText.Combine(rhs.ShowBodyText);
                ret.MenuButtonStyle = this.MenuButtonStyle.Combine(rhs.MenuButtonStyle);
                ret.Style = this.Style.Combine(rhs.Style);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.BodyTexts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuBodyText.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.BodyTexts?.Overall, rhs.BodyTexts?.Overall), Noggog.ExceptionExt.Combine(this.BodyTexts?.Specific, rhs.BodyTexts?.Specific));
                ret.MenuItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MenuItems?.Overall, rhs.MenuItems?.Overall), Noggog.ExceptionExt.Combine(this.MenuItems?.Specific, rhs.MenuItems?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapterIndexed.TranslationMask? VirtualMachineAdapter;
            public bool Name;
            public bool ShowBodyText;
            public bool MenuButtonStyle;
            public bool Style;
            public bool INAM;
            public TerminalMenuBodyText.TranslationMask? BodyTexts;
            public TerminalMenuItem.TranslationMask? MenuItems;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ShowBodyText = defaultOn;
                this.MenuButtonStyle = defaultOn;
                this.Style = defaultOn;
                this.INAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((ShowBodyText, null));
                ret.Add((MenuButtonStyle, null));
                ret.Add((Style, null));
                ret.Add((INAM, null));
                ret.Add((BodyTexts == null ? DefaultOn : !BodyTexts.GetCrystal().CopyNothing, BodyTexts?.GetCrystal()));
                ret.Add((MenuItems == null ? DefaultOn : !MenuItems.GetCrystal().CopyNothing, MenuItems?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = TerminalMenu_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalMenuCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TerminalMenuSetterCommon.Instance.RemapLinks(this, mapping);
        public TerminalMenu(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private TerminalMenu(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal TerminalMenu(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public TerminalMenu(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public TerminalMenu(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<TerminalMenu>.ToString(this);
        }

        protected override Type LinkType => typeof(ITerminalMenu);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalMenuGetter rhs) return false;
            return ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalMenuGetter? obj)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalMenuBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalMenuBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static TerminalMenu CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TerminalMenu();
            ((TerminalMenuSetterCommon)((ITerminalMenuGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TerminalMenu item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TerminalMenuSetterCommon)((ITerminalMenuGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TerminalMenu GetNew()
        {
            return new TerminalMenu();
        }

    }
    #endregion

    #region Interface
    public partial interface ITerminalMenu :
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<ITerminalMenuInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITerminalMenuGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new VirtualMachineAdapterIndexed? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TerminalMenu.ShowBodyTextOption? ShowBodyText { get; set; }
        new TerminalMenu.MenuButtonStyleOption? MenuButtonStyle { get; set; }
        new TerminalMenu.StyleOption? Style { get; set; }
        new TranslatedString? INAM { get; set; }
        new ExtendedList<TerminalMenuBodyText>? BodyTexts { get; set; }
        new ExtendedList<TerminalMenuItem>? MenuItems { get; set; }
    }

    public partial interface ITerminalMenuInternal :
        IStarfieldMajorRecordInternal,
        ITerminalMenu,
        ITerminalMenuGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.TMLM)]
    public partial interface ITerminalMenuGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<ITerminalMenuGetter>,
        IMapsToGetter<ITerminalMenuGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => TerminalMenu_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        TerminalMenu.ShowBodyTextOption? ShowBodyText { get; }
        TerminalMenu.MenuButtonStyleOption? MenuButtonStyle { get; }
        TerminalMenu.StyleOption? Style { get; }
        ITranslatedStringGetter? INAM { get; }
        IReadOnlyList<ITerminalMenuBodyTextGetter>? BodyTexts { get; }
        IReadOnlyList<ITerminalMenuItemGetter>? MenuItems { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TerminalMenuMixIn
    {
        public static void Clear(this ITerminalMenuInternal item)
        {
            ((TerminalMenuSetterCommon)((ITerminalMenuGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TerminalMenu.Mask<bool> GetEqualsMask(
            this ITerminalMenuGetter item,
            ITerminalMenuGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITerminalMenuGetter item,
            string? name = null,
            TerminalMenu.Mask<bool>? printMask = null)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITerminalMenuGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TerminalMenu.Mask<bool>? printMask = null)
        {
            ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITerminalMenuGetter item,
            ITerminalMenuGetter rhs,
            TerminalMenu.TranslationMask? equalsMask = null)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITerminalMenuInternal lhs,
            ITerminalMenuGetter rhs,
            out TerminalMenu.ErrorMask errorMask,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TerminalMenu.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITerminalMenuInternal lhs,
            ITerminalMenuGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TerminalMenu DeepCopy(
            this ITerminalMenuGetter item,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            return ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TerminalMenu DeepCopy(
            this ITerminalMenuGetter item,
            out TerminalMenu.ErrorMask errorMask,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            return ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TerminalMenu DeepCopy(
            this ITerminalMenuGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static TerminalMenu Duplicate(
            this ITerminalMenuGetter item,
            FormKey formKey,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static TerminalMenu Duplicate(
            this ITerminalMenuGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITerminalMenuInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TerminalMenuSetterCommon)((ITerminalMenuGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum TerminalMenu_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Name = 8,
        ShowBodyText = 9,
        MenuButtonStyle = 10,
        Style = 11,
        INAM = 12,
        BodyTexts = 13,
        MenuItems = 14,
    }
    #endregion

    #region Registration
    internal partial class TerminalMenu_Registration : ILoquiRegistration
    {
        public static readonly TerminalMenu_Registration Instance = new TerminalMenu_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(TerminalMenu.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TerminalMenu.ErrorMask);

        public static readonly Type ClassType = typeof(TerminalMenu);

        public static readonly Type GetterType = typeof(ITerminalMenuGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITerminalMenu);

        public static readonly Type? InternalSetterType = typeof(ITerminalMenuInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.TerminalMenu";

        public const string Name = "TerminalMenu";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TMLM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TMLM);
            var all = RecordCollection.Factory(
                RecordTypes.TMLM,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.FULL,
                RecordTypes.TMVT,
                RecordTypes.DNAM,
                RecordTypes.SNAM,
                RecordTypes.INAM,
                RecordTypes.BSIZ,
                RecordTypes.BTXT,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.TPLT,
                RecordTypes.ISIZ,
                RecordTypes.ITXT,
                RecordTypes.ISTX,
                RecordTypes.ISET,
                RecordTypes.ITID,
                RecordTypes.XLOC,
                RecordTypes.UNAM,
                RecordTypes.TNAM,
                RecordTypes.BNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TerminalMenuBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TerminalMenuSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly TerminalMenuSetterCommon Instance = new TerminalMenuSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITerminalMenuInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.ShowBodyText = default;
            item.MenuButtonStyle = default;
            item.Style = default;
            item.INAM = default;
            item.BodyTexts = null;
            item.MenuItems = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ITerminalMenuInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITerminalMenuInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITerminalMenu obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.BodyTexts?.RemapLinks(mapping);
            obj.MenuItems?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITerminalMenuInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITerminalMenuInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TerminalMenuBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TerminalMenuBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TerminalMenu)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TerminalMenu)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TerminalMenuCommon : StarfieldMajorRecordCommon
    {
        public new static readonly TerminalMenuCommon Instance = new TerminalMenuCommon();

        public TerminalMenu.Mask<bool> GetEqualsMask(
            ITerminalMenuGetter item,
            ITerminalMenuGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TerminalMenu.Mask<bool>(false);
            ((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITerminalMenuGetter item,
            ITerminalMenuGetter rhs,
            TerminalMenu.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ShowBodyText = item.ShowBodyText == rhs.ShowBodyText;
            ret.MenuButtonStyle = item.MenuButtonStyle == rhs.MenuButtonStyle;
            ret.Style = item.Style == rhs.Style;
            ret.INAM = object.Equals(item.INAM, rhs.INAM);
            ret.BodyTexts = item.BodyTexts.CollectionEqualsHelper(
                rhs.BodyTexts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MenuItems = item.MenuItems.CollectionEqualsHelper(
                rhs.MenuItems,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITerminalMenuGetter item,
            string? name = null,
            TerminalMenu.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITerminalMenuGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TerminalMenu.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TerminalMenu =>");
            }
            else
            {
                sb.AppendLine($"{name} (TerminalMenu) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITerminalMenuGetter item,
            StructuredStringBuilder sb,
            TerminalMenu.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ShowBodyText ?? true)
                && item.ShowBodyText is {} ShowBodyTextItem)
            {
                sb.AppendItem(ShowBodyTextItem, "ShowBodyText");
            }
            if ((printMask?.MenuButtonStyle ?? true)
                && item.MenuButtonStyle is {} MenuButtonStyleItem)
            {
                sb.AppendItem(MenuButtonStyleItem, "MenuButtonStyle");
            }
            if ((printMask?.Style ?? true)
                && item.Style is {} StyleItem)
            {
                sb.AppendItem(StyleItem, "Style");
            }
            if ((printMask?.INAM ?? true)
                && item.INAM is {} INAMItem)
            {
                sb.AppendItem(INAMItem, "INAM");
            }
            if ((printMask?.BodyTexts?.Overall ?? true)
                && item.BodyTexts is {} BodyTextsItem)
            {
                sb.AppendLine("BodyTexts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BodyTextsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MenuItems?.Overall ?? true)
                && item.MenuItems is {} MenuItemsItem)
            {
                sb.AppendLine("MenuItems =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MenuItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static TerminalMenu_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (TerminalMenu_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (TerminalMenu_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new TerminalMenu_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TerminalMenu_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TerminalMenu_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (TerminalMenu_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TerminalMenu_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITerminalMenuGetter? lhs,
            ITerminalMenuGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterIndexedCommon)((IVirtualMachineAdapterIndexedGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)TerminalMenu_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.ShowBodyText) ?? true))
            {
                if (lhs.ShowBodyText != rhs.ShowBodyText) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.MenuButtonStyle) ?? true))
            {
                if (lhs.MenuButtonStyle != rhs.MenuButtonStyle) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.Style) ?? true))
            {
                if (lhs.Style != rhs.Style) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.INAM) ?? true))
            {
                if (!object.Equals(lhs.INAM, rhs.INAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.BodyTexts) ?? true))
            {
                if (!lhs.BodyTexts.SequenceEqualNullable(rhs.BodyTexts, (l, r) => ((TerminalMenuBodyTextCommon)((ITerminalMenuBodyTextGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TerminalMenu_FieldIndex.BodyTexts)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.MenuItems) ?? true))
            {
                if (!lhs.MenuItems.SequenceEqualNullable(rhs.MenuItems, (l, r) => ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TerminalMenu_FieldIndex.MenuItems)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalMenuGetter?)lhs,
                rhs: rhs as ITerminalMenuGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalMenuGetter?)lhs,
                rhs: rhs as ITerminalMenuGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITerminalMenuGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.ShowBodyText is {} ShowBodyTextitem)
            {
                hash.Add(ShowBodyTextitem);
            }
            if (item.MenuButtonStyle is {} MenuButtonStyleitem)
            {
                hash.Add(MenuButtonStyleitem);
            }
            if (item.Style is {} Styleitem)
            {
                hash.Add(Styleitem);
            }
            if (item.INAM is {} INAMitem)
            {
                hash.Add(INAMitem);
            }
            hash.Add(item.BodyTexts);
            hash.Add(item.MenuItems);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalMenuGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalMenuGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TerminalMenu.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITerminalMenuGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.BodyTexts is {} BodyTextsItem)
            {
                foreach (var item in BodyTextsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MenuItems is {} MenuItemsItem)
            {
                foreach (var item in MenuItemsItem.WhereCastable<ITerminalMenuItemGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public TerminalMenu Duplicate(
            ITerminalMenuGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new TerminalMenu(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalMenuGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalMenuGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TerminalMenuSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly TerminalMenuSetterTranslationCommon Instance = new TerminalMenuSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITerminalMenuInternal item,
            ITerminalMenuGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITerminalMenu item,
            ITerminalMenuGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenu_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TerminalMenu_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.ShowBodyText) ?? true))
            {
                item.ShowBodyText = rhs.ShowBodyText;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.MenuButtonStyle) ?? true))
            {
                item.MenuButtonStyle = rhs.MenuButtonStyle;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.Style) ?? true))
            {
                item.Style = rhs.Style;
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.INAM) ?? true))
            {
                item.INAM = rhs.INAM?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.BodyTexts) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenu_FieldIndex.BodyTexts);
                try
                {
                    if ((rhs.BodyTexts != null))
                    {
                        item.BodyTexts = 
                            rhs.BodyTexts
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TerminalMenuBodyText>();
                    }
                    else
                    {
                        item.BodyTexts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TerminalMenu_FieldIndex.MenuItems) ?? true))
            {
                errorMask?.PushIndex((int)TerminalMenu_FieldIndex.MenuItems);
                try
                {
                    if ((rhs.MenuItems != null))
                    {
                        item.MenuItems = 
                            rhs.MenuItems
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TerminalMenuItem>();
                    }
                    else
                    {
                        item.MenuItems = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITerminalMenu item,
            ITerminalMenuGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalMenuInternal)item,
                rhs: (ITerminalMenuGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalMenu)item,
                rhs: (ITerminalMenuGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalMenuInternal)item,
                rhs: (ITerminalMenuGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalMenu)item,
                rhs: (ITerminalMenuGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public TerminalMenu DeepCopy(
            ITerminalMenuGetter item,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            TerminalMenu ret = (TerminalMenu)((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TerminalMenu DeepCopy(
            ITerminalMenuGetter item,
            out TerminalMenu.ErrorMask errorMask,
            TerminalMenu.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TerminalMenu ret = (TerminalMenu)((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TerminalMenu.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TerminalMenu DeepCopy(
            ITerminalMenuGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TerminalMenu ret = (TerminalMenu)((TerminalMenuCommon)((ITerminalMenuGetter)item).CommonInstance()!).GetNew();
            ((TerminalMenuSetterTranslationCommon)((ITerminalMenuGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class TerminalMenu
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TerminalMenu_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TerminalMenu_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalMenuCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TerminalMenuSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalMenuSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TerminalMenuBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TerminalMenuBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITerminalMenuGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterIndexedBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            EnumBinaryTranslation<TerminalMenu.ShowBodyTextOption, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.ShowBodyText,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.TMVT));
            EnumBinaryTranslation<TerminalMenu.MenuButtonStyleOption, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.MenuButtonStyle,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            EnumBinaryTranslation<TerminalMenu.StyleOption, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Style,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITerminalMenuBodyTextGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.BodyTexts,
                counterType: RecordTypes.BSIZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ITerminalMenuBodyTextGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TerminalMenuBodyTextBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITerminalMenuItemGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.MenuItems,
                counterType: RecordTypes.ISIZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ITerminalMenuItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TerminalMenuItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ITerminalMenuGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TMLM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITerminalMenuGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalMenuGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalMenuGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TerminalMenuBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly TerminalMenuBinaryCreateTranslation Instance = new TerminalMenuBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TMLM;
        public static ParseResult FillBinaryRecordTypes(
            ITerminalMenuInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapterIndexed.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)TerminalMenu_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TerminalMenu_FieldIndex.Name;
                }
                case RecordTypeInts.TMVT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShowBodyText = EnumBinaryTranslation<TerminalMenu.ShowBodyTextOption, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TerminalMenu_FieldIndex.ShowBodyText;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuButtonStyle = EnumBinaryTranslation<TerminalMenu.MenuButtonStyleOption, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TerminalMenu_FieldIndex.MenuButtonStyle;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Style = EnumBinaryTranslation<TerminalMenu.StyleOption, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TerminalMenu_FieldIndex.Style;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TerminalMenu_FieldIndex.INAM;
                }
                case RecordTypeInts.BSIZ:
                {
                    item.BodyTexts = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TerminalMenuBodyText>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.BSIZ,
                            triggeringRecord: TerminalMenuBodyText_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TerminalMenuBodyText.TryCreateFromBinary)
                        .CastExtendedList<TerminalMenuBodyText>();
                    return (int)TerminalMenu_FieldIndex.BodyTexts;
                }
                case RecordTypeInts.ISIZ:
                {
                    item.MenuItems = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TerminalMenuItem>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.ISIZ,
                            triggeringRecord: TerminalMenuItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TerminalMenuItem.TryCreateFromBinary)
                        .CastExtendedList<TerminalMenuItem>();
                    return (int)TerminalMenu_FieldIndex.MenuItems;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TerminalMenuBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TerminalMenuBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ITerminalMenuGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TerminalMenu_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TerminalMenu_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalMenuCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalMenuSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalMenuCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalMenuBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalMenuBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITerminalMenu);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterIndexedBinaryOverlay.VirtualMachineAdapterIndexedFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ShowBodyText
        private int? _ShowBodyTextLocation;
        public TerminalMenu.ShowBodyTextOption? ShowBodyText => EnumBinaryTranslation<TerminalMenu.ShowBodyTextOption, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_ShowBodyTextLocation, _recordData, _package, 4);
        #endregion
        #region MenuButtonStyle
        private int? _MenuButtonStyleLocation;
        public TerminalMenu.MenuButtonStyleOption? MenuButtonStyle => EnumBinaryTranslation<TerminalMenu.MenuButtonStyleOption, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_MenuButtonStyleLocation, _recordData, _package, 1);
        #endregion
        #region Style
        private int? _StyleLocation;
        public TerminalMenu.StyleOption? Style => EnumBinaryTranslation<TerminalMenu.StyleOption, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_StyleLocation, _recordData, _package, 4);
        #endregion
        #region INAM
        private int? _INAMLocation;
        public ITranslatedStringGetter? INAM => _INAMLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _INAMLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<ITerminalMenuBodyTextGetter>? BodyTexts { get; private set; }
        public IReadOnlyList<ITerminalMenuItemGetter>? MenuItems { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TerminalMenuBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITerminalMenuGetter TerminalMenuFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TerminalMenuBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITerminalMenuGetter TerminalMenuFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TerminalMenuFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)TerminalMenu_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)TerminalMenu_FieldIndex.Name;
                }
                case RecordTypeInts.TMVT:
                {
                    _ShowBodyTextLocation = (stream.Position - offset);
                    return (int)TerminalMenu_FieldIndex.ShowBodyText;
                }
                case RecordTypeInts.DNAM:
                {
                    _MenuButtonStyleLocation = (stream.Position - offset);
                    return (int)TerminalMenu_FieldIndex.MenuButtonStyle;
                }
                case RecordTypeInts.SNAM:
                {
                    _StyleLocation = (stream.Position - offset);
                    return (int)TerminalMenu_FieldIndex.Style;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)TerminalMenu_FieldIndex.INAM;
                }
                case RecordTypeInts.BSIZ:
                {
                    this.BodyTexts = BinaryOverlayList.FactoryByCountPerItem<ITerminalMenuBodyTextGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: TerminalMenuBodyText_Registration.TriggerSpecs,
                        countType: RecordTypes.BSIZ,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => TerminalMenuBodyTextBinaryOverlay.TerminalMenuBodyTextFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)TerminalMenu_FieldIndex.BodyTexts;
                }
                case RecordTypeInts.ISIZ:
                {
                    this.MenuItems = BinaryOverlayList.FactoryByCountPerItem<ITerminalMenuItemGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: TerminalMenuItem_Registration.TriggerSpecs,
                        countType: RecordTypes.ISIZ,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => TerminalMenuItemBinaryOverlay.TerminalMenuItemFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)TerminalMenu_FieldIndex.MenuItems;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMenuMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<TerminalMenu>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalMenuGetter rhs) return false;
            return ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalMenuGetter? obj)
        {
            return ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalMenuCommon)((ITerminalMenuGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

