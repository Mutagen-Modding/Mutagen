/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class LocationCellStaticReference :
        IEquatable<ILocationCellStaticReferenceGetter>,
        ILocationCellStaticReference,
        ILoquiObjectSetter<LocationCellStaticReference>
    {
        #region Ctor
        public LocationCellStaticReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LocationRefType
        private readonly IFormLink<ILocationReferenceTypeGetter> _LocationRefType = new FormLink<ILocationReferenceTypeGetter>();
        public IFormLink<ILocationReferenceTypeGetter> LocationRefType
        {
            get => _LocationRefType;
            set => _LocationRefType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILocationReferenceTypeGetter> ILocationCellStaticReferenceGetter.LocationRefType => this.LocationRefType;
        #endregion
        #region Marker
        private readonly IFormLink<IPlacedGetter> _Marker = new FormLink<IPlacedGetter>();
        public IFormLink<IPlacedGetter> Marker
        {
            get => _Marker;
            set => _Marker.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlacedGetter> ILocationCellStaticReferenceGetter.Marker => this.Marker;
        #endregion
        #region Location
        private readonly IFormLink<IComplexLocationGetter> _Location = new FormLink<IComplexLocationGetter>();
        public IFormLink<IComplexLocationGetter> Location
        {
            get => _Location;
            set => _Location.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IComplexLocationGetter> ILocationCellStaticReferenceGetter.Location => this.Location;
        #endregion
        #region Grid
        public P2Int16 Grid { get; set; } = default(P2Int16);
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationCellStaticReferenceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocationCellStaticReferenceGetter rhs) return false;
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationCellStaticReferenceGetter? obj)
        {
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LocationRefType = initialValue;
                this.Marker = initialValue;
                this.Location = initialValue;
                this.Grid = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem LocationRefType,
                TItem Marker,
                TItem Location,
                TItem Grid,
                TItem Unknown)
            {
                this.LocationRefType = LocationRefType;
                this.Marker = Marker;
                this.Location = Location;
                this.Grid = Grid;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LocationRefType;
            public TItem Marker;
            public TItem Location;
            public TItem Grid;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LocationRefType, rhs.LocationRefType)) return false;
                if (!object.Equals(this.Marker, rhs.Marker)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LocationRefType);
                hash.Add(this.Marker);
                hash.Add(this.Location);
                hash.Add(this.Grid);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LocationRefType)) return false;
                if (!eval(this.Marker)) return false;
                if (!eval(this.Location)) return false;
                if (!eval(this.Grid)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LocationRefType)) return true;
                if (eval(this.Marker)) return true;
                if (eval(this.Location)) return true;
                if (eval(this.Grid)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocationCellStaticReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LocationRefType = eval(this.LocationRefType);
                obj.Marker = eval(this.Marker);
                obj.Location = eval(this.Location);
                obj.Grid = eval(this.Grid);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LocationCellStaticReference.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LocationCellStaticReference.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LocationCellStaticReference.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.LocationRefType ?? true)
                    {
                        sb.AppendItem(LocationRefType, "LocationRefType");
                    }
                    if (printMask?.Marker ?? true)
                    {
                        sb.AppendItem(Marker, "Marker");
                    }
                    if (printMask?.Location ?? true)
                    {
                        sb.AppendItem(Location, "Location");
                    }
                    if (printMask?.Grid ?? true)
                    {
                        sb.AppendItem(Grid, "Grid");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LocationRefType;
            public Exception? Marker;
            public Exception? Location;
            public Exception? Grid;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocationCellStaticReference_FieldIndex enu = (LocationCellStaticReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationCellStaticReference_FieldIndex.LocationRefType:
                        return LocationRefType;
                    case LocationCellStaticReference_FieldIndex.Marker:
                        return Marker;
                    case LocationCellStaticReference_FieldIndex.Location:
                        return Location;
                    case LocationCellStaticReference_FieldIndex.Grid:
                        return Grid;
                    case LocationCellStaticReference_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocationCellStaticReference_FieldIndex enu = (LocationCellStaticReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationCellStaticReference_FieldIndex.LocationRefType:
                        this.LocationRefType = ex;
                        break;
                    case LocationCellStaticReference_FieldIndex.Marker:
                        this.Marker = ex;
                        break;
                    case LocationCellStaticReference_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case LocationCellStaticReference_FieldIndex.Grid:
                        this.Grid = ex;
                        break;
                    case LocationCellStaticReference_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocationCellStaticReference_FieldIndex enu = (LocationCellStaticReference_FieldIndex)index;
                switch (enu)
                {
                    case LocationCellStaticReference_FieldIndex.LocationRefType:
                        this.LocationRefType = (Exception?)obj;
                        break;
                    case LocationCellStaticReference_FieldIndex.Marker:
                        this.Marker = (Exception?)obj;
                        break;
                    case LocationCellStaticReference_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case LocationCellStaticReference_FieldIndex.Grid:
                        this.Grid = (Exception?)obj;
                        break;
                    case LocationCellStaticReference_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LocationRefType != null) return true;
                if (Marker != null) return true;
                if (Location != null) return true;
                if (Grid != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(LocationRefType, "LocationRefType");
                }
                {
                    sb.AppendItem(Marker, "Marker");
                }
                {
                    sb.AppendItem(Location, "Location");
                }
                {
                    sb.AppendItem(Grid, "Grid");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LocationRefType = this.LocationRefType.Combine(rhs.LocationRefType);
                ret.Marker = this.Marker.Combine(rhs.Marker);
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Grid = this.Grid.Combine(rhs.Grid);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool LocationRefType;
            public bool Marker;
            public bool Location;
            public bool Grid;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.LocationRefType = defaultOn;
                this.Marker = defaultOn;
                this.Location = defaultOn;
                this.Grid = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LocationRefType, null));
                ret.Add((Marker, null));
                ret.Add((Location, null));
                ret.Add((Grid, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCellStaticReferenceCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationCellStaticReferenceSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationCellStaticReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationCellStaticReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static LocationCellStaticReference CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LocationCellStaticReference();
            ((LocationCellStaticReferenceSetterCommon)((ILocationCellStaticReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocationCellStaticReference item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LocationCellStaticReferenceSetterCommon)((ILocationCellStaticReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocationCellStaticReference GetNew()
        {
            return new LocationCellStaticReference();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocationCellStaticReference :
        IFormLinkContainer,
        ILocationCellStaticReferenceGetter,
        ILoquiObjectSetter<ILocationCellStaticReference>
    {
        new IFormLink<ILocationReferenceTypeGetter> LocationRefType { get; set; }
        new IFormLink<IPlacedGetter> Marker { get; set; }
        new IFormLink<IComplexLocationGetter> Location { get; set; }
        new P2Int16 Grid { get; set; }
        new Int32 Unknown { get; set; }
    }

    public partial interface ILocationCellStaticReferenceGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILocationCellStaticReferenceGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => LocationCellStaticReference_Registration.Instance;
        IFormLinkGetter<ILocationReferenceTypeGetter> LocationRefType { get; }
        IFormLinkGetter<IPlacedGetter> Marker { get; }
        IFormLinkGetter<IComplexLocationGetter> Location { get; }
        P2Int16 Grid { get; }
        Int32 Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocationCellStaticReferenceMixIn
    {
        public static void Clear(this ILocationCellStaticReference item)
        {
            ((LocationCellStaticReferenceSetterCommon)((ILocationCellStaticReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocationCellStaticReference.Mask<bool> GetEqualsMask(
            this ILocationCellStaticReferenceGetter item,
            ILocationCellStaticReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILocationCellStaticReferenceGetter item,
            string? name = null,
            LocationCellStaticReference.Mask<bool>? printMask = null)
        {
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILocationCellStaticReferenceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocationCellStaticReference.Mask<bool>? printMask = null)
        {
            ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocationCellStaticReferenceGetter item,
            ILocationCellStaticReferenceGetter rhs,
            LocationCellStaticReference.TranslationMask? equalsMask = null)
        {
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocationCellStaticReference lhs,
            ILocationCellStaticReferenceGetter rhs)
        {
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationCellStaticReference lhs,
            ILocationCellStaticReferenceGetter rhs,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationCellStaticReference lhs,
            ILocationCellStaticReferenceGetter rhs,
            out LocationCellStaticReference.ErrorMask errorMask,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LocationCellStaticReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationCellStaticReference lhs,
            ILocationCellStaticReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LocationCellStaticReference DeepCopy(
            this ILocationCellStaticReferenceGetter item,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            return ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocationCellStaticReference DeepCopy(
            this ILocationCellStaticReferenceGetter item,
            out LocationCellStaticReference.ErrorMask errorMask,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            return ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocationCellStaticReference DeepCopy(
            this ILocationCellStaticReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocationCellStaticReference item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LocationCellStaticReferenceSetterCommon)((ILocationCellStaticReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum LocationCellStaticReference_FieldIndex
    {
        LocationRefType = 0,
        Marker = 1,
        Location = 2,
        Grid = 3,
        Unknown = 4,
    }
    #endregion

    #region Registration
    internal partial class LocationCellStaticReference_Registration : ILoquiRegistration
    {
        public static readonly LocationCellStaticReference_Registration Instance = new LocationCellStaticReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(LocationCellStaticReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocationCellStaticReference.ErrorMask);

        public static readonly Type ClassType = typeof(LocationCellStaticReference);

        public static readonly Type GetterType = typeof(ILocationCellStaticReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocationCellStaticReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.LocationCellStaticReference";

        public const string Name = "LocationCellStaticReference";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(LocationCellStaticReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LocationCellStaticReferenceSetterCommon
    {
        public static readonly LocationCellStaticReferenceSetterCommon Instance = new LocationCellStaticReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationCellStaticReference item)
        {
            ClearPartial();
            item.LocationRefType.Clear();
            item.Marker.Clear();
            item.Location.Clear();
            item.Grid = default(P2Int16);
            item.Unknown = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(ILocationCellStaticReference obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.LocationRefType.Relink(mapping);
            obj.Marker.Relink(mapping);
            obj.Location.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationCellStaticReference item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LocationCellStaticReferenceBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class LocationCellStaticReferenceCommon
    {
        public static readonly LocationCellStaticReferenceCommon Instance = new LocationCellStaticReferenceCommon();

        public LocationCellStaticReference.Mask<bool> GetEqualsMask(
            ILocationCellStaticReferenceGetter item,
            ILocationCellStaticReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocationCellStaticReference.Mask<bool>(false);
            ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationCellStaticReferenceGetter item,
            ILocationCellStaticReferenceGetter rhs,
            LocationCellStaticReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.LocationRefType = item.LocationRefType.Equals(rhs.LocationRefType);
            ret.Marker = item.Marker.Equals(rhs.Marker);
            ret.Location = item.Location.Equals(rhs.Location);
            ret.Grid = item.Grid.Equals(rhs.Grid);
            ret.Unknown = item.Unknown == rhs.Unknown;
        }
        
        public string Print(
            ILocationCellStaticReferenceGetter item,
            string? name = null,
            LocationCellStaticReference.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILocationCellStaticReferenceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LocationCellStaticReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LocationCellStaticReference =>");
            }
            else
            {
                sb.AppendLine($"{name} (LocationCellStaticReference) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILocationCellStaticReferenceGetter item,
            StructuredStringBuilder sb,
            LocationCellStaticReference.Mask<bool>? printMask = null)
        {
            if (printMask?.LocationRefType ?? true)
            {
                sb.AppendItem(item.LocationRefType.FormKey, "LocationRefType");
            }
            if (printMask?.Marker ?? true)
            {
                sb.AppendItem(item.Marker.FormKey, "Marker");
            }
            if (printMask?.Location ?? true)
            {
                sb.AppendItem(item.Location.FormKey, "Location");
            }
            if (printMask?.Grid ?? true)
            {
                sb.AppendItem(item.Grid, "Grid");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationCellStaticReferenceGetter? lhs,
            ILocationCellStaticReferenceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.LocationRefType) ?? true))
            {
                if (!lhs.LocationRefType.Equals(rhs.LocationRefType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Marker) ?? true))
            {
                if (!lhs.Marker.Equals(rhs.Marker)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Location) ?? true))
            {
                if (!lhs.Location.Equals(rhs.Location)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Grid) ?? true))
            {
                if (!lhs.Grid.Equals(rhs.Grid)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ILocationCellStaticReferenceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LocationRefType);
            hash.Add(item.Marker);
            hash.Add(item.Location);
            hash.Add(item.Grid);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocationCellStaticReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILocationCellStaticReferenceGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.LocationRefType);
            yield return FormLinkInformation.Factory(obj.Marker);
            yield return FormLinkInformation.Factory(obj.Location);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class LocationCellStaticReferenceSetterTranslationCommon
    {
        public static readonly LocationCellStaticReferenceSetterTranslationCommon Instance = new LocationCellStaticReferenceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocationCellStaticReference item,
            ILocationCellStaticReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.LocationRefType) ?? true))
            {
                item.LocationRefType.SetTo(rhs.LocationRefType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Marker) ?? true))
            {
                item.Marker.SetTo(rhs.Marker.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Location) ?? true))
            {
                item.Location.SetTo(rhs.Location.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Grid) ?? true))
            {
                item.Grid = rhs.Grid;
            }
            if ((copyMask?.GetShouldTranslate((int)LocationCellStaticReference_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILocationCellStaticReference item,
            ILocationCellStaticReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public LocationCellStaticReference DeepCopy(
            ILocationCellStaticReferenceGetter item,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            LocationCellStaticReference ret = (LocationCellStaticReference)((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).GetNew();
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LocationCellStaticReference DeepCopy(
            ILocationCellStaticReferenceGetter item,
            out LocationCellStaticReference.ErrorMask errorMask,
            LocationCellStaticReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LocationCellStaticReference ret = (LocationCellStaticReference)((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).GetNew();
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LocationCellStaticReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LocationCellStaticReference DeepCopy(
            ILocationCellStaticReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocationCellStaticReference ret = (LocationCellStaticReference)((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)item).CommonInstance()!).GetNew();
            ((LocationCellStaticReferenceSetterTranslationCommon)((ILocationCellStaticReferenceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class LocationCellStaticReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationCellStaticReference_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocationCellStaticReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationCellStaticReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocationCellStaticReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationCellStaticReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationCellStaticReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocationCellStaticReferenceGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocationCellStaticReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class LocationCellStaticReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly LocationCellStaticReferenceBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ILocationCellStaticReferenceGetter item,
            MutagenWriter writer)
        {
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LocationRefType);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Marker);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Location);
            P2Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Grid,
                swapCoords: true);
            writer.Write(item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            ILocationCellStaticReferenceGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILocationCellStaticReferenceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LocationCellStaticReferenceBinaryCreateTranslation
    {
        public static readonly LocationCellStaticReferenceBinaryCreateTranslation Instance = new LocationCellStaticReferenceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocationCellStaticReference item,
            MutagenFrame frame)
        {
            item.LocationRefType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Marker.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Location.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.Grid = P2Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                swapCoords: true);
            item.Unknown = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class LocationCellStaticReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocationCellStaticReferenceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationCellStaticReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class LocationCellStaticReferenceBinaryOverlay :
        PluginBinaryOverlay,
        ILocationCellStaticReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationCellStaticReference_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => LocationCellStaticReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationCellStaticReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationCellStaticReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationCellStaticReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocationCellStaticReferenceGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocationCellStaticReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCellStaticReferenceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationCellStaticReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationCellStaticReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IFormLinkGetter<ILocationReferenceTypeGetter> LocationRefType => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(_package, _structData.Span.Slice(0x0, 0x4));
        public IFormLinkGetter<IPlacedGetter> Marker => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedGetter>(_package, _structData.Span.Slice(0x4, 0x4));
        public IFormLinkGetter<IComplexLocationGetter> Location => FormLinkBinaryTranslation.Instance.OverlayFactory<IComplexLocationGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        public P2Int16 Grid => P2Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(0xC, 0x4), swapCoords: true);
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x10, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationCellStaticReferenceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILocationCellStaticReferenceGetter LocationCellStaticReferenceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x14,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new LocationCellStaticReferenceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x14;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ILocationCellStaticReferenceGetter LocationCellStaticReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LocationCellStaticReferenceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationCellStaticReferenceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ILocationCellStaticReferenceGetter rhs) return false;
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationCellStaticReferenceGetter? obj)
        {
            return ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

