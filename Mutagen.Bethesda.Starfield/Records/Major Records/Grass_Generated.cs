/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Grass :
        StarfieldMajorRecord,
        IEquatable<IGrassGetter>,
        IGrassInternal,
        ILoquiObjectSetter<Grass>
    {
        #region Ctor
        protected Grass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IGrassGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPaletteDefaults? _ObjectPaletteDefaults;
        public ObjectPaletteDefaults? ObjectPaletteDefaults
        {
            get => _ObjectPaletteDefaults;
            set => _ObjectPaletteDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPaletteDefaultsGetter? IGrassGetter.ObjectPaletteDefaults => this.ObjectPaletteDefaults;
        #endregion
        #region XALG
        public UInt64? XALG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? IGrassGetter.XALG => this.XALG;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IGrassGetter.Components => _Components;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IGrassGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Contrast
        public Single Contrast { get; set; } = default(Single);
        public static RangeFloat Contrast_Range = new RangeFloat(0f, 100f);
        #endregion
        #region ClusterScale
        public Single ClusterScale { get; set; } = default(Single);
        public static RangeFloat ClusterScale_Range = new RangeFloat(0f, 10f);
        #endregion
        #region HeightRange
        public Percent HeightRange { get; set; } = default(Percent);
        #endregion
        #region ColorRange
        public Percent ColorRange { get; set; } = default(Percent);
        #endregion
        #region WindFrequency
        public Single WindFrequency { get; set; } = default(Single);
        #endregion
        #region AboveWaterClamp
        public Single AboveWaterClamp { get; set; } = default(Single);
        #endregion
        #region BelowWaterClamp
        public Single BelowWaterClamp { get; set; } = default(Single);
        #endregion
        #region MaxDensity
        public Byte MaxDensity { get; set; } = default(Byte);
        #endregion
        #region MinSlope
        public Byte MinSlope { get; set; } = default(Byte);
        #endregion
        #region MaxSlope
        public Byte MaxSlope { get; set; } = default(Byte);
        #endregion
        #region Flags
        public Grass.Flag Flags { get; set; } = default(Grass.Flag);
        #endregion
        #region Coverage
        public Single Coverage { get; set; } = default(Single);
        public static RangeFloat Coverage_Range = new RangeFloat(0f, 100f);
        #endregion
        #region DirtinessMin
        public Percent DirtinessMin { get; set; } = default(Percent);
        #endregion
        #region DirtinessMax
        public Percent DirtinessMax { get; set; } = default(Percent);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GrassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(initialValue, new ObjectPaletteDefaults.Mask<TItem>(initialValue));
                this.XALG = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Contrast = initialValue;
                this.ClusterScale = initialValue;
                this.HeightRange = initialValue;
                this.ColorRange = initialValue;
                this.WindFrequency = initialValue;
                this.AboveWaterClamp = initialValue;
                this.BelowWaterClamp = initialValue;
                this.MaxDensity = initialValue;
                this.MinSlope = initialValue;
                this.MaxSlope = initialValue;
                this.Flags = initialValue;
                this.Coverage = initialValue;
                this.DirtinessMin = initialValue;
                this.DirtinessMax = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem ObjectPaletteDefaults,
                TItem XALG,
                TItem Components,
                TItem Model,
                TItem Contrast,
                TItem ClusterScale,
                TItem HeightRange,
                TItem ColorRange,
                TItem WindFrequency,
                TItem AboveWaterClamp,
                TItem BelowWaterClamp,
                TItem MaxDensity,
                TItem MinSlope,
                TItem MaxSlope,
                TItem Flags,
                TItem Coverage,
                TItem DirtinessMin,
                TItem DirtinessMax)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.ObjectPaletteDefaults = new MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>(ObjectPaletteDefaults, new ObjectPaletteDefaults.Mask<TItem>(ObjectPaletteDefaults));
                this.XALG = XALG;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Contrast = Contrast;
                this.ClusterScale = ClusterScale;
                this.HeightRange = HeightRange;
                this.ColorRange = ColorRange;
                this.WindFrequency = WindFrequency;
                this.AboveWaterClamp = AboveWaterClamp;
                this.BelowWaterClamp = BelowWaterClamp;
                this.MaxDensity = MaxDensity;
                this.MinSlope = MinSlope;
                this.MaxSlope = MaxSlope;
                this.Flags = Flags;
                this.Coverage = Coverage;
                this.DirtinessMin = DirtinessMin;
                this.DirtinessMax = DirtinessMax;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public MaskItem<TItem, ObjectPaletteDefaults.Mask<TItem>?>? ObjectPaletteDefaults { get; set; }
            public TItem XALG;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Contrast;
            public TItem ClusterScale;
            public TItem HeightRange;
            public TItem ColorRange;
            public TItem WindFrequency;
            public TItem AboveWaterClamp;
            public TItem BelowWaterClamp;
            public TItem MaxDensity;
            public TItem MinSlope;
            public TItem MaxSlope;
            public TItem Flags;
            public TItem Coverage;
            public TItem DirtinessMin;
            public TItem DirtinessMax;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Contrast, rhs.Contrast)) return false;
                if (!object.Equals(this.ClusterScale, rhs.ClusterScale)) return false;
                if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
                if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
                if (!object.Equals(this.WindFrequency, rhs.WindFrequency)) return false;
                if (!object.Equals(this.AboveWaterClamp, rhs.AboveWaterClamp)) return false;
                if (!object.Equals(this.BelowWaterClamp, rhs.BelowWaterClamp)) return false;
                if (!object.Equals(this.MaxDensity, rhs.MaxDensity)) return false;
                if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
                if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Coverage, rhs.Coverage)) return false;
                if (!object.Equals(this.DirtinessMin, rhs.DirtinessMin)) return false;
                if (!object.Equals(this.DirtinessMax, rhs.DirtinessMax)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.ObjectPaletteDefaults);
                hash.Add(this.XALG);
                hash.Add(this.Components);
                hash.Add(this.Model);
                hash.Add(this.Contrast);
                hash.Add(this.ClusterScale);
                hash.Add(this.HeightRange);
                hash.Add(this.ColorRange);
                hash.Add(this.WindFrequency);
                hash.Add(this.AboveWaterClamp);
                hash.Add(this.BelowWaterClamp);
                hash.Add(this.MaxDensity);
                hash.Add(this.MinSlope);
                hash.Add(this.MaxSlope);
                hash.Add(this.Flags);
                hash.Add(this.Coverage);
                hash.Add(this.DirtinessMin);
                hash.Add(this.DirtinessMax);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (ObjectPaletteDefaults != null)
                {
                    if (!eval(this.ObjectPaletteDefaults.Overall)) return false;
                    if (this.ObjectPaletteDefaults.Specific != null && !this.ObjectPaletteDefaults.Specific.All(eval)) return false;
                }
                if (!eval(this.XALG)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Contrast)) return false;
                if (!eval(this.ClusterScale)) return false;
                if (!eval(this.HeightRange)) return false;
                if (!eval(this.ColorRange)) return false;
                if (!eval(this.WindFrequency)) return false;
                if (!eval(this.AboveWaterClamp)) return false;
                if (!eval(this.BelowWaterClamp)) return false;
                if (!eval(this.MaxDensity)) return false;
                if (!eval(this.MinSlope)) return false;
                if (!eval(this.MaxSlope)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Coverage)) return false;
                if (!eval(this.DirtinessMin)) return false;
                if (!eval(this.DirtinessMax)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (ObjectPaletteDefaults != null)
                {
                    if (eval(this.ObjectPaletteDefaults.Overall)) return true;
                    if (this.ObjectPaletteDefaults.Specific != null && this.ObjectPaletteDefaults.Specific.Any(eval)) return true;
                }
                if (eval(this.XALG)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Contrast)) return true;
                if (eval(this.ClusterScale)) return true;
                if (eval(this.HeightRange)) return true;
                if (eval(this.ColorRange)) return true;
                if (eval(this.WindFrequency)) return true;
                if (eval(this.AboveWaterClamp)) return true;
                if (eval(this.BelowWaterClamp)) return true;
                if (eval(this.MaxDensity)) return true;
                if (eval(this.MinSlope)) return true;
                if (eval(this.MaxSlope)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Coverage)) return true;
                if (eval(this.DirtinessMin)) return true;
                if (eval(this.DirtinessMax)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Grass.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.ObjectPaletteDefaults = this.ObjectPaletteDefaults == null ? null : new MaskItem<R, ObjectPaletteDefaults.Mask<R>?>(eval(this.ObjectPaletteDefaults.Overall), this.ObjectPaletteDefaults.Specific?.Translate(eval));
                obj.XALG = eval(this.XALG);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Contrast = eval(this.Contrast);
                obj.ClusterScale = eval(this.ClusterScale);
                obj.HeightRange = eval(this.HeightRange);
                obj.ColorRange = eval(this.ColorRange);
                obj.WindFrequency = eval(this.WindFrequency);
                obj.AboveWaterClamp = eval(this.AboveWaterClamp);
                obj.BelowWaterClamp = eval(this.BelowWaterClamp);
                obj.MaxDensity = eval(this.MaxDensity);
                obj.MinSlope = eval(this.MinSlope);
                obj.MaxSlope = eval(this.MaxSlope);
                obj.Flags = eval(this.Flags);
                obj.Coverage = eval(this.Coverage);
                obj.DirtinessMin = eval(this.DirtinessMin);
                obj.DirtinessMax = eval(this.DirtinessMax);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Grass.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Grass.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Grass.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.ObjectPaletteDefaults?.Overall ?? true)
                    {
                        ObjectPaletteDefaults?.Print(sb);
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Contrast ?? true)
                    {
                        sb.AppendItem(Contrast, "Contrast");
                    }
                    if (printMask?.ClusterScale ?? true)
                    {
                        sb.AppendItem(ClusterScale, "ClusterScale");
                    }
                    if (printMask?.HeightRange ?? true)
                    {
                        sb.AppendItem(HeightRange, "HeightRange");
                    }
                    if (printMask?.ColorRange ?? true)
                    {
                        sb.AppendItem(ColorRange, "ColorRange");
                    }
                    if (printMask?.WindFrequency ?? true)
                    {
                        sb.AppendItem(WindFrequency, "WindFrequency");
                    }
                    if (printMask?.AboveWaterClamp ?? true)
                    {
                        sb.AppendItem(AboveWaterClamp, "AboveWaterClamp");
                    }
                    if (printMask?.BelowWaterClamp ?? true)
                    {
                        sb.AppendItem(BelowWaterClamp, "BelowWaterClamp");
                    }
                    if (printMask?.MaxDensity ?? true)
                    {
                        sb.AppendItem(MaxDensity, "MaxDensity");
                    }
                    if (printMask?.MinSlope ?? true)
                    {
                        sb.AppendItem(MinSlope, "MinSlope");
                    }
                    if (printMask?.MaxSlope ?? true)
                    {
                        sb.AppendItem(MaxSlope, "MaxSlope");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Coverage ?? true)
                    {
                        sb.AppendItem(Coverage, "Coverage");
                    }
                    if (printMask?.DirtinessMin ?? true)
                    {
                        sb.AppendItem(DirtinessMin, "DirtinessMin");
                    }
                    if (printMask?.DirtinessMax ?? true)
                    {
                        sb.AppendItem(DirtinessMax, "DirtinessMax");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>? ObjectPaletteDefaults;
            public Exception? XALG;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Contrast;
            public Exception? ClusterScale;
            public Exception? HeightRange;
            public Exception? ColorRange;
            public Exception? WindFrequency;
            public Exception? AboveWaterClamp;
            public Exception? BelowWaterClamp;
            public Exception? MaxDensity;
            public Exception? MinSlope;
            public Exception? MaxSlope;
            public Exception? Flags;
            public Exception? Coverage;
            public Exception? DirtinessMin;
            public Exception? DirtinessMax;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Grass_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case Grass_FieldIndex.ObjectPaletteDefaults:
                        return ObjectPaletteDefaults;
                    case Grass_FieldIndex.XALG:
                        return XALG;
                    case Grass_FieldIndex.Components:
                        return Components;
                    case Grass_FieldIndex.Model:
                        return Model;
                    case Grass_FieldIndex.Contrast:
                        return Contrast;
                    case Grass_FieldIndex.ClusterScale:
                        return ClusterScale;
                    case Grass_FieldIndex.HeightRange:
                        return HeightRange;
                    case Grass_FieldIndex.ColorRange:
                        return ColorRange;
                    case Grass_FieldIndex.WindFrequency:
                        return WindFrequency;
                    case Grass_FieldIndex.AboveWaterClamp:
                        return AboveWaterClamp;
                    case Grass_FieldIndex.BelowWaterClamp:
                        return BelowWaterClamp;
                    case Grass_FieldIndex.MaxDensity:
                        return MaxDensity;
                    case Grass_FieldIndex.MinSlope:
                        return MinSlope;
                    case Grass_FieldIndex.MaxSlope:
                        return MaxSlope;
                    case Grass_FieldIndex.Flags:
                        return Flags;
                    case Grass_FieldIndex.Coverage:
                        return Coverage;
                    case Grass_FieldIndex.DirtinessMin:
                        return DirtinessMin;
                    case Grass_FieldIndex.DirtinessMax:
                        return DirtinessMax;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case Grass_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = new MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case Grass_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Grass_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.Contrast:
                        this.Contrast = ex;
                        break;
                    case Grass_FieldIndex.ClusterScale:
                        this.ClusterScale = ex;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = ex;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = ex;
                        break;
                    case Grass_FieldIndex.WindFrequency:
                        this.WindFrequency = ex;
                        break;
                    case Grass_FieldIndex.AboveWaterClamp:
                        this.AboveWaterClamp = ex;
                        break;
                    case Grass_FieldIndex.BelowWaterClamp:
                        this.BelowWaterClamp = ex;
                        break;
                    case Grass_FieldIndex.MaxDensity:
                        this.MaxDensity = ex;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = ex;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = ex;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Grass_FieldIndex.Coverage:
                        this.Coverage = ex;
                        break;
                    case Grass_FieldIndex.DirtinessMin:
                        this.DirtinessMin = ex;
                        break;
                    case Grass_FieldIndex.DirtinessMax:
                        this.DirtinessMax = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.ObjectPaletteDefaults:
                        this.ObjectPaletteDefaults = (MaskItem<Exception?, ObjectPaletteDefaults.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Grass_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.Contrast:
                        this.Contrast = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.ClusterScale:
                        this.ClusterScale = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.WindFrequency:
                        this.WindFrequency = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.AboveWaterClamp:
                        this.AboveWaterClamp = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.BelowWaterClamp:
                        this.BelowWaterClamp = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MaxDensity:
                        this.MaxDensity = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Coverage:
                        this.Coverage = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.DirtinessMin:
                        this.DirtinessMin = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.DirtinessMax:
                        this.DirtinessMax = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (ObjectPaletteDefaults != null) return true;
                if (XALG != null) return true;
                if (Components != null) return true;
                if (Model != null) return true;
                if (Contrast != null) return true;
                if (ClusterScale != null) return true;
                if (HeightRange != null) return true;
                if (ColorRange != null) return true;
                if (WindFrequency != null) return true;
                if (AboveWaterClamp != null) return true;
                if (BelowWaterClamp != null) return true;
                if (MaxDensity != null) return true;
                if (MinSlope != null) return true;
                if (MaxSlope != null) return true;
                if (Flags != null) return true;
                if (Coverage != null) return true;
                if (DirtinessMin != null) return true;
                if (DirtinessMax != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                ObjectPaletteDefaults?.Print(sb);
                {
                    sb.AppendItem(XALG, "XALG");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(Contrast, "Contrast");
                }
                {
                    sb.AppendItem(ClusterScale, "ClusterScale");
                }
                {
                    sb.AppendItem(HeightRange, "HeightRange");
                }
                {
                    sb.AppendItem(ColorRange, "ColorRange");
                }
                {
                    sb.AppendItem(WindFrequency, "WindFrequency");
                }
                {
                    sb.AppendItem(AboveWaterClamp, "AboveWaterClamp");
                }
                {
                    sb.AppendItem(BelowWaterClamp, "BelowWaterClamp");
                }
                {
                    sb.AppendItem(MaxDensity, "MaxDensity");
                }
                {
                    sb.AppendItem(MinSlope, "MinSlope");
                }
                {
                    sb.AppendItem(MaxSlope, "MaxSlope");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Coverage, "Coverage");
                }
                {
                    sb.AppendItem(DirtinessMin, "DirtinessMin");
                }
                {
                    sb.AppendItem(DirtinessMax, "DirtinessMax");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.ObjectPaletteDefaults = this.ObjectPaletteDefaults.Combine(rhs.ObjectPaletteDefaults, (l, r) => l.Combine(r));
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Contrast = this.Contrast.Combine(rhs.Contrast);
                ret.ClusterScale = this.ClusterScale.Combine(rhs.ClusterScale);
                ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
                ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
                ret.WindFrequency = this.WindFrequency.Combine(rhs.WindFrequency);
                ret.AboveWaterClamp = this.AboveWaterClamp.Combine(rhs.AboveWaterClamp);
                ret.BelowWaterClamp = this.BelowWaterClamp.Combine(rhs.BelowWaterClamp);
                ret.MaxDensity = this.MaxDensity.Combine(rhs.MaxDensity);
                ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
                ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Coverage = this.Coverage.Combine(rhs.Coverage);
                ret.DirtinessMin = this.DirtinessMin.Combine(rhs.DirtinessMin);
                ret.DirtinessMax = this.DirtinessMax.Combine(rhs.DirtinessMax);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public ObjectPaletteDefaults.TranslationMask? ObjectPaletteDefaults;
            public bool XALG;
            public AComponent.TranslationMask? Components;
            public Model.TranslationMask? Model;
            public bool Contrast;
            public bool ClusterScale;
            public bool HeightRange;
            public bool ColorRange;
            public bool WindFrequency;
            public bool AboveWaterClamp;
            public bool BelowWaterClamp;
            public bool MaxDensity;
            public bool MinSlope;
            public bool MaxSlope;
            public bool Flags;
            public bool Coverage;
            public bool DirtinessMin;
            public bool DirtinessMax;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.XALG = defaultOn;
                this.Contrast = defaultOn;
                this.ClusterScale = defaultOn;
                this.HeightRange = defaultOn;
                this.ColorRange = defaultOn;
                this.WindFrequency = defaultOn;
                this.AboveWaterClamp = defaultOn;
                this.BelowWaterClamp = defaultOn;
                this.MaxDensity = defaultOn;
                this.MinSlope = defaultOn;
                this.MaxSlope = defaultOn;
                this.Flags = defaultOn;
                this.Coverage = defaultOn;
                this.DirtinessMin = defaultOn;
                this.DirtinessMax = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((ObjectPaletteDefaults != null ? ObjectPaletteDefaults.OnOverall : DefaultOn, ObjectPaletteDefaults?.GetCrystal()));
                ret.Add((XALG, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Contrast, null));
                ret.Add((ClusterScale, null));
                ret.Add((HeightRange, null));
                ret.Add((ColorRange, null));
                ret.Add((WindFrequency, null));
                ret.Add((AboveWaterClamp, null));
                ret.Add((BelowWaterClamp, null));
                ret.Add((MaxDensity, null));
                ret.Add((MinSlope, null));
                ret.Add((MaxSlope, null));
                ret.Add((Flags, null));
                ret.Add((Coverage, null));
                ret.Add((DirtinessMin, null));
                ret.Add((DirtinessMax, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Grass_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GrassCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GrassSetterCommon.Instance.RemapLinks(this, mapping);
        public Grass(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Grass(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Grass(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Grass(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Grass(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Grass>.ToString(this);
        }

        protected override Type LinkType => typeof(IGrass);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => GrassCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => GrassSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => GrassSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => GrassSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGrassGetter rhs) return false;
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGrassGetter? obj)
        {
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GrassCommon)((IGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Grass CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Grass();
            ((GrassSetterCommon)((IGrassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Grass item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GrassSetterCommon)((IGrassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Grass GetNew()
        {
            return new Grass();
        }

    }
    #endregion

    #region Interface
    public partial interface IGrass :
        IAssetLinkContainer,
        IBaseObject,
        IFormLinkContainer,
        IGrassGetter,
        ILoquiObjectSetter<IGrassInternal>,
        IModeled,
        IObjectBounded,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new ObjectPaletteDefaults? ObjectPaletteDefaults { get; set; }
        new UInt64? XALG { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Single Contrast { get; set; }
        new Single ClusterScale { get; set; }
        new Percent HeightRange { get; set; }
        new Percent ColorRange { get; set; }
        new Single WindFrequency { get; set; }
        new Single AboveWaterClamp { get; set; }
        new Single BelowWaterClamp { get; set; }
        new Byte MaxDensity { get; set; }
        new Byte MinSlope { get; set; }
        new Byte MaxSlope { get; set; }
        new Grass.Flag Flags { get; set; }
        new Single Coverage { get; set; }
        new Percent DirtinessMin { get; set; }
        new Percent DirtinessMax { get; set; }
    }

    public partial interface IGrassInternal :
        IStarfieldMajorRecordInternal,
        IGrass,
        IGrassGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.GRAS)]
    public partial interface IGrassGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGrassGetter>,
        IMapsToGetter<IGrassGetter>,
        IModeledGetter,
        IObjectBoundedGetter
    {
        static new ILoquiRegistration StaticRegistration => Grass_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        IObjectPaletteDefaultsGetter? ObjectPaletteDefaults { get; }
        UInt64? XALG { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        Single Contrast { get; }
        Single ClusterScale { get; }
        Percent HeightRange { get; }
        Percent ColorRange { get; }
        Single WindFrequency { get; }
        Single AboveWaterClamp { get; }
        Single BelowWaterClamp { get; }
        Byte MaxDensity { get; }
        Byte MinSlope { get; }
        Byte MaxSlope { get; }
        Grass.Flag Flags { get; }
        Single Coverage { get; }
        Percent DirtinessMin { get; }
        Percent DirtinessMax { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GrassMixIn
    {
        public static void Clear(this IGrassInternal item)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Grass.Mask<bool> GetEqualsMask(
            this IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGrassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGrassGetter item,
            IGrassGetter rhs,
            Grass.TranslationMask? equalsMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Grass Duplicate(
            this IGrassGetter item,
            FormKey formKey,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Grass Duplicate(
            this IGrassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGrassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Grass_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        DirtinessScale = 8,
        ObjectPaletteDefaults = 9,
        XALG = 10,
        Components = 11,
        Model = 12,
        Contrast = 13,
        ClusterScale = 14,
        HeightRange = 15,
        ColorRange = 16,
        WindFrequency = 17,
        AboveWaterClamp = 18,
        BelowWaterClamp = 19,
        MaxDensity = 20,
        MinSlope = 21,
        MaxSlope = 22,
        Flags = 23,
        Coverage = 24,
        DirtinessMin = 25,
        DirtinessMax = 26,
    }
    #endregion

    #region Registration
    internal partial class Grass_Registration : ILoquiRegistration
    {
        public static readonly Grass_Registration Instance = new Grass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(Grass.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Grass.ErrorMask);

        public static readonly Type ClassType = typeof(Grass);

        public static readonly Type GetterType = typeof(IGrassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGrass);

        public static readonly Type? InternalSetterType = typeof(IGrassInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Grass";

        public const string Name = "Grass";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GRAS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GRAS);
            var all = RecordCollection.Factory(
                RecordTypes.GRAS,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.OPDS,
                RecordTypes.XALG,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GrassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GrassSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly GrassSetterCommon Instance = new GrassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGrassInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.ObjectPaletteDefaults = null;
            item.XALG = default;
            item.Components.Clear();
            item.Model = null;
            item.Contrast = default(Single);
            item.ClusterScale = default(Single);
            item.HeightRange = default(Percent);
            item.ColorRange = default(Percent);
            item.WindFrequency = default(Single);
            item.AboveWaterClamp = default(Single);
            item.BelowWaterClamp = default(Single);
            item.MaxDensity = default(Byte);
            item.MinSlope = default(Byte);
            item.MaxSlope = default(Byte);
            item.Flags = default(Grass.Flag);
            item.Coverage = default(Single);
            item.DirtinessMin = default(Percent);
            item.DirtinessMax = default(Percent);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGrass obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IGrass obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IGrass obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGrassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGrassInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GrassBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GrassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Grass)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Grass)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GrassCommon : StarfieldMajorRecordCommon
    {
        public new static readonly GrassCommon Instance = new GrassCommon();

        public Grass.Mask<bool> GetEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Grass.Mask<bool>(false);
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            Grass.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.ObjectPaletteDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPaletteDefaults,
                rhs.ObjectPaletteDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XALG = item.XALG == rhs.XALG;
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Contrast = item.Contrast.EqualsWithin(rhs.Contrast);
            ret.ClusterScale = item.ClusterScale.EqualsWithin(rhs.ClusterScale);
            ret.HeightRange = item.HeightRange.Equals(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.Equals(rhs.ColorRange);
            ret.WindFrequency = item.WindFrequency.EqualsWithin(rhs.WindFrequency);
            ret.AboveWaterClamp = item.AboveWaterClamp.EqualsWithin(rhs.AboveWaterClamp);
            ret.BelowWaterClamp = item.BelowWaterClamp.EqualsWithin(rhs.BelowWaterClamp);
            ret.MaxDensity = item.MaxDensity == rhs.MaxDensity;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Coverage = item.Coverage.EqualsWithin(rhs.Coverage);
            ret.DirtinessMin = item.DirtinessMin.Equals(rhs.DirtinessMin);
            ret.DirtinessMax = item.DirtinessMax.Equals(rhs.DirtinessMax);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGrassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Grass =>");
            }
            else
            {
                sb.AppendLine($"{name} (Grass) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGrassGetter item,
            StructuredStringBuilder sb,
            Grass.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.ObjectPaletteDefaults?.Overall ?? true)
                && item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ObjectPaletteDefaultsItem?.Print(sb, "ObjectPaletteDefaults");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendItem(XALGItem, "XALG");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.Contrast ?? true)
            {
                sb.AppendItem(item.Contrast, "Contrast");
            }
            if (printMask?.ClusterScale ?? true)
            {
                sb.AppendItem(item.ClusterScale, "ClusterScale");
            }
            if (printMask?.HeightRange ?? true)
            {
                sb.AppendItem(item.HeightRange, "HeightRange");
            }
            if (printMask?.ColorRange ?? true)
            {
                sb.AppendItem(item.ColorRange, "ColorRange");
            }
            if (printMask?.WindFrequency ?? true)
            {
                sb.AppendItem(item.WindFrequency, "WindFrequency");
            }
            if (printMask?.AboveWaterClamp ?? true)
            {
                sb.AppendItem(item.AboveWaterClamp, "AboveWaterClamp");
            }
            if (printMask?.BelowWaterClamp ?? true)
            {
                sb.AppendItem(item.BelowWaterClamp, "BelowWaterClamp");
            }
            if (printMask?.MaxDensity ?? true)
            {
                sb.AppendItem(item.MaxDensity, "MaxDensity");
            }
            if (printMask?.MinSlope ?? true)
            {
                sb.AppendItem(item.MinSlope, "MinSlope");
            }
            if (printMask?.MaxSlope ?? true)
            {
                sb.AppendItem(item.MaxSlope, "MaxSlope");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Coverage ?? true)
            {
                sb.AppendItem(item.Coverage, "Coverage");
            }
            if (printMask?.DirtinessMin ?? true)
            {
                sb.AppendItem(item.DirtinessMin, "DirtinessMin");
            }
            if (printMask?.DirtinessMax ?? true)
            {
                sb.AppendItem(item.DirtinessMax, "DirtinessMax");
            }
        }
        
        public static Grass_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Grass_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Grass_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGrassGetter? lhs,
            IGrassGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Grass_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPaletteDefaults, rhs.ObjectPaletteDefaults, out var lhsObjectPaletteDefaults, out var rhsObjectPaletteDefaults, out var isObjectPaletteDefaultsEqual))
                {
                    if (!((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)lhsObjectPaletteDefaults).CommonInstance()!).Equals(lhsObjectPaletteDefaults, rhsObjectPaletteDefaults, equalsMask?.GetSubCrystal((int)Grass_FieldIndex.ObjectPaletteDefaults))) return false;
                }
                else if (!isObjectPaletteDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.XALG) ?? true))
            {
                if (lhs.XALG != rhs.XALG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Grass_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Grass_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.Contrast) ?? true))
            {
                if (!lhs.Contrast.EqualsWithin(rhs.Contrast)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.ClusterScale) ?? true))
            {
                if (!lhs.ClusterScale.EqualsWithin(rhs.ClusterScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
            {
                if (!lhs.HeightRange.Equals(rhs.HeightRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
            {
                if (!lhs.ColorRange.Equals(rhs.ColorRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.WindFrequency) ?? true))
            {
                if (!lhs.WindFrequency.EqualsWithin(rhs.WindFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.AboveWaterClamp) ?? true))
            {
                if (!lhs.AboveWaterClamp.EqualsWithin(rhs.AboveWaterClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.BelowWaterClamp) ?? true))
            {
                if (!lhs.BelowWaterClamp.EqualsWithin(rhs.BelowWaterClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxDensity) ?? true))
            {
                if (lhs.MaxDensity != rhs.MaxDensity) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
            {
                if (lhs.MinSlope != rhs.MinSlope) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
            {
                if (lhs.MaxSlope != rhs.MaxSlope) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.Coverage) ?? true))
            {
                if (!lhs.Coverage.EqualsWithin(rhs.Coverage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessMin) ?? true))
            {
                if (!lhs.DirtinessMin.Equals(rhs.DirtinessMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessMax) ?? true))
            {
                if (!lhs.DirtinessMax.Equals(rhs.DirtinessMax)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGrassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsitem)
            {
                hash.Add(ObjectPaletteDefaultsitem);
            }
            if (item.XALG is {} XALGitem)
            {
                hash.Add(XALGitem);
            }
            hash.Add(item.Components);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Contrast);
            hash.Add(item.ClusterScale);
            hash.Add(item.HeightRange);
            hash.Add(item.ColorRange);
            hash.Add(item.WindFrequency);
            hash.Add(item.AboveWaterClamp);
            hash.Add(item.BelowWaterClamp);
            hash.Add(item.MaxDensity);
            hash.Add(item.MinSlope);
            hash.Add(item.MaxSlope);
            hash.Add(item.Flags);
            hash.Add(item.Coverage);
            hash.Add(item.DirtinessMin);
            hash.Add(item.DirtinessMax);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Grass.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGrassGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IGrassGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Grass Duplicate(
            IGrassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Grass(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGrassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGrassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GrassSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly GrassSetterTranslationCommon Instance = new GrassSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGrassInternal item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGrass item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Grass_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectPaletteDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.ObjectPaletteDefaults);
                try
                {
                    if(rhs.ObjectPaletteDefaults is {} rhsObjectPaletteDefaults)
                    {
                        item.ObjectPaletteDefaults = rhsObjectPaletteDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Grass_FieldIndex.ObjectPaletteDefaults));
                    }
                    else
                    {
                        item.ObjectPaletteDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.XALG) ?? true))
            {
                item.XALG = rhs.XALG;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Contrast) ?? true))
            {
                item.Contrast = rhs.Contrast;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ClusterScale) ?? true))
            {
                item.ClusterScale = rhs.ClusterScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
            {
                item.HeightRange = rhs.HeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
            {
                item.ColorRange = rhs.ColorRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.WindFrequency) ?? true))
            {
                item.WindFrequency = rhs.WindFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.AboveWaterClamp) ?? true))
            {
                item.AboveWaterClamp = rhs.AboveWaterClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.BelowWaterClamp) ?? true))
            {
                item.BelowWaterClamp = rhs.BelowWaterClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxDensity) ?? true))
            {
                item.MaxDensity = rhs.MaxDensity;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
            {
                item.MinSlope = rhs.MinSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
            {
                item.MaxSlope = rhs.MaxSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Coverage) ?? true))
            {
                item.Coverage = rhs.Coverage;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessMin) ?? true))
            {
                item.DirtinessMin = rhs.DirtinessMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.DirtinessMax) ?? true))
            {
                item.DirtinessMax = rhs.DirtinessMax;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGrass item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Grass DeepCopy(
            IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Grass
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GrassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GrassBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GrassBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGrassGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.ObjectPaletteDefaults is {} ObjectPaletteDefaultsItem)
            {
                ((ObjectPaletteDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPaletteDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPaletteDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Contrast);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ClusterScale);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.HeightRange,
                    integerType: FloatIntegerType.UInt);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ColorRange,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WindFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AboveWaterClamp);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BelowWaterClamp);
                writer.Write(item.MaxDensity);
                writer.Write(item.MinSlope);
                writer.Write(item.MaxSlope);
                EnumBinaryTranslation<Grass.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Coverage);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DirtinessMin,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DirtinessMax,
                    integerType: FloatIntegerType.Byte);
            }
        }

        public void Write(
            MutagenWriter writer,
            IGrassGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GRAS,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GrassBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly GrassBinaryCreateTranslation Instance = new GrassBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GRAS;
        public static ParseResult FillBinaryRecordTypes(
            IGrassInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Grass_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)Grass_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPaletteDefaults = Mutagen.Bethesda.Starfield.ObjectPaletteDefaults.CreateFromBinary(frame: frame);
                    return (int)Grass_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = frame.ReadUInt64();
                    return (int)Grass_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Grass_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Grass_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Contrast = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ClusterScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HeightRange = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorRange = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.WindFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AboveWaterClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BelowWaterClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.MaxDensity = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.MinSlope = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.MaxSlope = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<Grass.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.Coverage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.DirtinessMin = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.DirtinessMax = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    return (int)Grass_FieldIndex.DirtinessMax;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GrassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GrassBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IGrassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GrassCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => GrassCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGrass);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ObjectPaletteDefaults
        private RangeInt32? _ObjectPaletteDefaultsLocation;
        public IObjectPaletteDefaultsGetter? ObjectPaletteDefaults => _ObjectPaletteDefaultsLocation.HasValue ? ObjectPaletteDefaultsBinaryOverlay.ObjectPaletteDefaultsFactory(_recordData.Slice(_ObjectPaletteDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region XALG
        private int? _XALGLocation;
        public UInt64? XALG => _XALGLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        public IModelGetter? Model { get; private set; }
        private RangeInt32? _DNAMLocation;
        #region Contrast
        private int _ContrastLocation => _DNAMLocation!.Value.Min;
        private bool _Contrast_IsSet => _DNAMLocation.HasValue;
        public Single Contrast => _Contrast_IsSet ? _recordData.Slice(_ContrastLocation, 4).Float() : default(Single);
        #endregion
        #region ClusterScale
        private int _ClusterScaleLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _ClusterScale_IsSet => _DNAMLocation.HasValue;
        public Single ClusterScale => _ClusterScale_IsSet ? _recordData.Slice(_ClusterScaleLocation, 4).Float() : default(Single);
        #endregion
        #region HeightRange
        private int _HeightRangeLocation => _DNAMLocation!.Value.Min + 0x8;
        private bool _HeightRange_IsSet => _DNAMLocation.HasValue;
        public Percent HeightRange => _HeightRange_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_HeightRangeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ColorRange
        private int _ColorRangeLocation => _DNAMLocation!.Value.Min + 0xC;
        private bool _ColorRange_IsSet => _DNAMLocation.HasValue;
        public Percent ColorRange => _ColorRange_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ColorRangeLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region WindFrequency
        private int _WindFrequencyLocation => _DNAMLocation!.Value.Min + 0x10;
        private bool _WindFrequency_IsSet => _DNAMLocation.HasValue;
        public Single WindFrequency => _WindFrequency_IsSet ? _recordData.Slice(_WindFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region AboveWaterClamp
        private int _AboveWaterClampLocation => _DNAMLocation!.Value.Min + 0x14;
        private bool _AboveWaterClamp_IsSet => _DNAMLocation.HasValue;
        public Single AboveWaterClamp => _AboveWaterClamp_IsSet ? _recordData.Slice(_AboveWaterClampLocation, 4).Float() : default(Single);
        #endregion
        #region BelowWaterClamp
        private int _BelowWaterClampLocation => _DNAMLocation!.Value.Min + 0x18;
        private bool _BelowWaterClamp_IsSet => _DNAMLocation.HasValue;
        public Single BelowWaterClamp => _BelowWaterClamp_IsSet ? _recordData.Slice(_BelowWaterClampLocation, 4).Float() : default(Single);
        #endregion
        #region MaxDensity
        private int _MaxDensityLocation => _DNAMLocation!.Value.Min + 0x1C;
        private bool _MaxDensity_IsSet => _DNAMLocation.HasValue;
        public Byte MaxDensity => _MaxDensity_IsSet ? _recordData.Span[_MaxDensityLocation] : default;
        #endregion
        #region MinSlope
        private int _MinSlopeLocation => _DNAMLocation!.Value.Min + 0x1D;
        private bool _MinSlope_IsSet => _DNAMLocation.HasValue;
        public Byte MinSlope => _MinSlope_IsSet ? _recordData.Span[_MinSlopeLocation] : default;
        #endregion
        #region MaxSlope
        private int _MaxSlopeLocation => _DNAMLocation!.Value.Min + 0x1E;
        private bool _MaxSlope_IsSet => _DNAMLocation.HasValue;
        public Byte MaxSlope => _MaxSlope_IsSet ? _recordData.Span[_MaxSlopeLocation] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value.Min + 0x1F;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public Grass.Flag Flags => _Flags_IsSet ? (Grass.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Coverage
        private int _CoverageLocation => _DNAMLocation!.Value.Min + 0x20;
        private bool _Coverage_IsSet => _DNAMLocation.HasValue;
        public Single Coverage => _Coverage_IsSet ? _recordData.Slice(_CoverageLocation, 4).Float() : default(Single);
        #endregion
        #region DirtinessMin
        private int _DirtinessMinLocation => _DNAMLocation!.Value.Min + 0x24;
        private bool _DirtinessMin_IsSet => _DNAMLocation.HasValue;
        public Percent DirtinessMin => _DirtinessMin_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DirtinessMinLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region DirtinessMax
        private int _DirtinessMaxLocation => _DNAMLocation!.Value.Min + 0x25;
        private bool _DirtinessMax_IsSet => _DNAMLocation.HasValue;
        public Percent DirtinessMax => _DirtinessMax_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DirtinessMaxLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GrassBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGrassGetter GrassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GrassBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGrassGetter GrassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GrassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Grass_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)Grass_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPaletteDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Grass_FieldIndex.ObjectPaletteDefaults;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)Grass_FieldIndex.XALG;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Grass_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Grass_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Grass_FieldIndex.DirtinessMax;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GrassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Grass>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGrassGetter rhs) return false;
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGrassGetter? obj)
        {
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GrassCommon)((IGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

