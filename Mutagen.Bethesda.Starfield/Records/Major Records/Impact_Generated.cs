/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Impact :
        StarfieldMajorRecord,
        IEquatable<IImpactGetter>,
        IImpactInternal,
        ILoquiObjectSetter<Impact>
    {
        #region Ctor
        protected Impact()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IImpactGetter.Components => _Components;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IImpactGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Duration
        public Single Duration { get; set; } = default(Single);
        #endregion
        #region Orientation
        public Impact.OrientationType Orientation { get; set; } = default(Impact.OrientationType);
        #endregion
        #region AngleThreshold
        public Single AngleThreshold { get; set; } = default(Single);
        #endregion
        #region PlacementRadius
        public Single PlacementRadius { get; set; } = default(Single);
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default(SoundLevel);
        #endregion
        #region NoDecalData
        public Boolean NoDecalData { get; set; } = default(Boolean);
        #endregion
        #region Result
        public Impact.ResultType Result { get; set; } = default(Impact.ResultType);
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default(Int16);
        #endregion
        #region ProjectedDecals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IProjectedDecalGetter>>? _ProjectedDecals;
        public ExtendedList<IFormLinkGetter<IProjectedDecalGetter>>? ProjectedDecals
        {
            get => this._ProjectedDecals;
            set => this._ProjectedDecals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IProjectedDecalGetter>>? IImpactGetter.ProjectedDecals => _ProjectedDecals;
        #endregion

        #endregion
        #region HNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ImpactHNAM? _HNAM;
        public ImpactHNAM? HNAM
        {
            get => _HNAM;
            set => _HNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IImpactHNAMGetter? IImpactGetter.HNAM => this.HNAM;
        #endregion
        #region Decal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Decal? _Decal;
        public Decal? Decal
        {
            get => _Decal;
            set => _Decal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDecalGetter? IImpactGetter.Decal => this.Decal;
        #endregion
        #region IDSH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _IDSH;
        public SoundReference? IDSH
        {
            get => _IDSH;
            set => _IDSH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IImpactGetter.IDSH => this.IDSH;
        #endregion
        #region IDP1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _IDP1;
        public SoundReference? IDP1
        {
            get => _IDP1;
            set => _IDP1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IImpactGetter.IDP1 => this.IDP1;
        #endregion
        #region IDP3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _IDP3;
        public SoundReference? IDP3
        {
            get => _IDP3;
            set => _IDP3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IImpactGetter.IDP3 => this.IDP3;
        #endregion
        #region FootstepParticleMaxDist
        public Single? FootstepParticleMaxDist { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IImpactGetter.FootstepParticleMaxDist => this.FootstepParticleMaxDist;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImpactMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Duration = initialValue;
                this.Orientation = initialValue;
                this.AngleThreshold = initialValue;
                this.PlacementRadius = initialValue;
                this.SoundLevel = initialValue;
                this.NoDecalData = initialValue;
                this.Result = initialValue;
                this.Unknown = initialValue;
                this.ProjectedDecals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HNAM = new MaskItem<TItem, ImpactHNAM.Mask<TItem>?>(initialValue, new ImpactHNAM.Mask<TItem>(initialValue));
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(initialValue, new Decal.Mask<TItem>(initialValue));
                this.IDSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.IDP1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.IDP3 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.FootstepParticleMaxDist = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Model,
                TItem Duration,
                TItem Orientation,
                TItem AngleThreshold,
                TItem PlacementRadius,
                TItem SoundLevel,
                TItem NoDecalData,
                TItem Result,
                TItem Unknown,
                TItem ProjectedDecals,
                TItem HNAM,
                TItem Decal,
                TItem IDSH,
                TItem IDP1,
                TItem IDP3,
                TItem FootstepParticleMaxDist)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Duration = Duration;
                this.Orientation = Orientation;
                this.AngleThreshold = AngleThreshold;
                this.PlacementRadius = PlacementRadius;
                this.SoundLevel = SoundLevel;
                this.NoDecalData = NoDecalData;
                this.Result = Result;
                this.Unknown = Unknown;
                this.ProjectedDecals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ProjectedDecals, Enumerable.Empty<(int Index, TItem Value)>());
                this.HNAM = new MaskItem<TItem, ImpactHNAM.Mask<TItem>?>(HNAM, new ImpactHNAM.Mask<TItem>(HNAM));
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(Decal, new Decal.Mask<TItem>(Decal));
                this.IDSH = new MaskItem<TItem, SoundReference.Mask<TItem>?>(IDSH, new SoundReference.Mask<TItem>(IDSH));
                this.IDP1 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(IDP1, new SoundReference.Mask<TItem>(IDP1));
                this.IDP3 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(IDP3, new SoundReference.Mask<TItem>(IDP3));
                this.FootstepParticleMaxDist = FootstepParticleMaxDist;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Duration;
            public TItem Orientation;
            public TItem AngleThreshold;
            public TItem PlacementRadius;
            public TItem SoundLevel;
            public TItem NoDecalData;
            public TItem Result;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ProjectedDecals;
            public MaskItem<TItem, ImpactHNAM.Mask<TItem>?>? HNAM { get; set; }
            public MaskItem<TItem, Decal.Mask<TItem>?>? Decal { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? IDSH { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? IDP1 { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? IDP3 { get; set; }
            public TItem FootstepParticleMaxDist;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                if (!object.Equals(this.Orientation, rhs.Orientation)) return false;
                if (!object.Equals(this.AngleThreshold, rhs.AngleThreshold)) return false;
                if (!object.Equals(this.PlacementRadius, rhs.PlacementRadius)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.NoDecalData, rhs.NoDecalData)) return false;
                if (!object.Equals(this.Result, rhs.Result)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ProjectedDecals, rhs.ProjectedDecals)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.Decal, rhs.Decal)) return false;
                if (!object.Equals(this.IDSH, rhs.IDSH)) return false;
                if (!object.Equals(this.IDP1, rhs.IDP1)) return false;
                if (!object.Equals(this.IDP3, rhs.IDP3)) return false;
                if (!object.Equals(this.FootstepParticleMaxDist, rhs.FootstepParticleMaxDist)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Model);
                hash.Add(this.Duration);
                hash.Add(this.Orientation);
                hash.Add(this.AngleThreshold);
                hash.Add(this.PlacementRadius);
                hash.Add(this.SoundLevel);
                hash.Add(this.NoDecalData);
                hash.Add(this.Result);
                hash.Add(this.Unknown);
                hash.Add(this.ProjectedDecals);
                hash.Add(this.HNAM);
                hash.Add(this.Decal);
                hash.Add(this.IDSH);
                hash.Add(this.IDP1);
                hash.Add(this.IDP3);
                hash.Add(this.FootstepParticleMaxDist);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Duration)) return false;
                if (!eval(this.Orientation)) return false;
                if (!eval(this.AngleThreshold)) return false;
                if (!eval(this.PlacementRadius)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.NoDecalData)) return false;
                if (!eval(this.Result)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.ProjectedDecals != null)
                {
                    if (!eval(this.ProjectedDecals.Overall)) return false;
                    if (this.ProjectedDecals.Specific != null)
                    {
                        foreach (var item in this.ProjectedDecals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (HNAM != null)
                {
                    if (!eval(this.HNAM.Overall)) return false;
                    if (this.HNAM.Specific != null && !this.HNAM.Specific.All(eval)) return false;
                }
                if (Decal != null)
                {
                    if (!eval(this.Decal.Overall)) return false;
                    if (this.Decal.Specific != null && !this.Decal.Specific.All(eval)) return false;
                }
                if (IDSH != null)
                {
                    if (!eval(this.IDSH.Overall)) return false;
                    if (this.IDSH.Specific != null && !this.IDSH.Specific.All(eval)) return false;
                }
                if (IDP1 != null)
                {
                    if (!eval(this.IDP1.Overall)) return false;
                    if (this.IDP1.Specific != null && !this.IDP1.Specific.All(eval)) return false;
                }
                if (IDP3 != null)
                {
                    if (!eval(this.IDP3.Overall)) return false;
                    if (this.IDP3.Specific != null && !this.IDP3.Specific.All(eval)) return false;
                }
                if (!eval(this.FootstepParticleMaxDist)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Duration)) return true;
                if (eval(this.Orientation)) return true;
                if (eval(this.AngleThreshold)) return true;
                if (eval(this.PlacementRadius)) return true;
                if (eval(this.SoundLevel)) return true;
                if (eval(this.NoDecalData)) return true;
                if (eval(this.Result)) return true;
                if (eval(this.Unknown)) return true;
                if (this.ProjectedDecals != null)
                {
                    if (eval(this.ProjectedDecals.Overall)) return true;
                    if (this.ProjectedDecals.Specific != null)
                    {
                        foreach (var item in this.ProjectedDecals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (HNAM != null)
                {
                    if (eval(this.HNAM.Overall)) return true;
                    if (this.HNAM.Specific != null && this.HNAM.Specific.Any(eval)) return true;
                }
                if (Decal != null)
                {
                    if (eval(this.Decal.Overall)) return true;
                    if (this.Decal.Specific != null && this.Decal.Specific.Any(eval)) return true;
                }
                if (IDSH != null)
                {
                    if (eval(this.IDSH.Overall)) return true;
                    if (this.IDSH.Specific != null && this.IDSH.Specific.Any(eval)) return true;
                }
                if (IDP1 != null)
                {
                    if (eval(this.IDP1.Overall)) return true;
                    if (this.IDP1.Specific != null && this.IDP1.Specific.Any(eval)) return true;
                }
                if (IDP3 != null)
                {
                    if (eval(this.IDP3.Overall)) return true;
                    if (this.IDP3.Specific != null && this.IDP3.Specific.Any(eval)) return true;
                }
                if (eval(this.FootstepParticleMaxDist)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Impact.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Duration = eval(this.Duration);
                obj.Orientation = eval(this.Orientation);
                obj.AngleThreshold = eval(this.AngleThreshold);
                obj.PlacementRadius = eval(this.PlacementRadius);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.NoDecalData = eval(this.NoDecalData);
                obj.Result = eval(this.Result);
                obj.Unknown = eval(this.Unknown);
                if (ProjectedDecals != null)
                {
                    obj.ProjectedDecals = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ProjectedDecals.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ProjectedDecals.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ProjectedDecals.Specific = l;
                        foreach (var item in ProjectedDecals.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HNAM = this.HNAM == null ? null : new MaskItem<R, ImpactHNAM.Mask<R>?>(eval(this.HNAM.Overall), this.HNAM.Specific?.Translate(eval));
                obj.Decal = this.Decal == null ? null : new MaskItem<R, Decal.Mask<R>?>(eval(this.Decal.Overall), this.Decal.Specific?.Translate(eval));
                obj.IDSH = this.IDSH == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.IDSH.Overall), this.IDSH.Specific?.Translate(eval));
                obj.IDP1 = this.IDP1 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.IDP1.Overall), this.IDP1.Specific?.Translate(eval));
                obj.IDP3 = this.IDP3 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.IDP3.Overall), this.IDP3.Specific?.Translate(eval));
                obj.FootstepParticleMaxDist = eval(this.FootstepParticleMaxDist);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Impact.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Impact.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Impact.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Duration ?? true)
                    {
                        sb.AppendItem(Duration, "Duration");
                    }
                    if (printMask?.Orientation ?? true)
                    {
                        sb.AppendItem(Orientation, "Orientation");
                    }
                    if (printMask?.AngleThreshold ?? true)
                    {
                        sb.AppendItem(AngleThreshold, "AngleThreshold");
                    }
                    if (printMask?.PlacementRadius ?? true)
                    {
                        sb.AppendItem(PlacementRadius, "PlacementRadius");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        sb.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.NoDecalData ?? true)
                    {
                        sb.AppendItem(NoDecalData, "NoDecalData");
                    }
                    if (printMask?.Result ?? true)
                    {
                        sb.AppendItem(Result, "Result");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.ProjectedDecals?.Overall ?? true)
                        && ProjectedDecals is {} ProjectedDecalsItem)
                    {
                        sb.AppendLine("ProjectedDecals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ProjectedDecalsItem.Overall);
                            if (ProjectedDecalsItem.Specific != null)
                            {
                                foreach (var subItem in ProjectedDecalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.HNAM?.Overall ?? true)
                    {
                        HNAM?.Print(sb);
                    }
                    if (printMask?.Decal?.Overall ?? true)
                    {
                        Decal?.Print(sb);
                    }
                    if (printMask?.IDSH?.Overall ?? true)
                    {
                        IDSH?.Print(sb);
                    }
                    if (printMask?.IDP1?.Overall ?? true)
                    {
                        IDP1?.Print(sb);
                    }
                    if (printMask?.IDP3?.Overall ?? true)
                    {
                        IDP3?.Print(sb);
                    }
                    if (printMask?.FootstepParticleMaxDist ?? true)
                    {
                        sb.AppendItem(FootstepParticleMaxDist, "FootstepParticleMaxDist");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Duration;
            public Exception? Orientation;
            public Exception? AngleThreshold;
            public Exception? PlacementRadius;
            public Exception? SoundLevel;
            public Exception? NoDecalData;
            public Exception? Result;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ProjectedDecals;
            public MaskItem<Exception?, ImpactHNAM.ErrorMask?>? HNAM;
            public MaskItem<Exception?, Decal.ErrorMask?>? Decal;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? IDSH;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? IDP1;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? IDP3;
            public Exception? FootstepParticleMaxDist;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Components:
                        return Components;
                    case Impact_FieldIndex.Model:
                        return Model;
                    case Impact_FieldIndex.Duration:
                        return Duration;
                    case Impact_FieldIndex.Orientation:
                        return Orientation;
                    case Impact_FieldIndex.AngleThreshold:
                        return AngleThreshold;
                    case Impact_FieldIndex.PlacementRadius:
                        return PlacementRadius;
                    case Impact_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Impact_FieldIndex.NoDecalData:
                        return NoDecalData;
                    case Impact_FieldIndex.Result:
                        return Result;
                    case Impact_FieldIndex.Unknown:
                        return Unknown;
                    case Impact_FieldIndex.ProjectedDecals:
                        return ProjectedDecals;
                    case Impact_FieldIndex.HNAM:
                        return HNAM;
                    case Impact_FieldIndex.Decal:
                        return Decal;
                    case Impact_FieldIndex.IDSH:
                        return IDSH;
                    case Impact_FieldIndex.IDP1:
                        return IDP1;
                    case Impact_FieldIndex.IDP3:
                        return IDP3;
                    case Impact_FieldIndex.FootstepParticleMaxDist:
                        return FootstepParticleMaxDist;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Impact_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    case Impact_FieldIndex.Orientation:
                        this.Orientation = ex;
                        break;
                    case Impact_FieldIndex.AngleThreshold:
                        this.AngleThreshold = ex;
                        break;
                    case Impact_FieldIndex.PlacementRadius:
                        this.PlacementRadius = ex;
                        break;
                    case Impact_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Impact_FieldIndex.NoDecalData:
                        this.NoDecalData = ex;
                        break;
                    case Impact_FieldIndex.Result:
                        this.Result = ex;
                        break;
                    case Impact_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Impact_FieldIndex.ProjectedDecals:
                        this.ProjectedDecals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Impact_FieldIndex.HNAM:
                        this.HNAM = new MaskItem<Exception?, ImpactHNAM.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.Decal:
                        this.Decal = new MaskItem<Exception?, Decal.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.IDSH:
                        this.IDSH = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.IDP1:
                        this.IDP1 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.IDP3:
                        this.IDP3 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Impact_FieldIndex.FootstepParticleMaxDist:
                        this.FootstepParticleMaxDist = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Impact_FieldIndex enu = (Impact_FieldIndex)index;
                switch (enu)
                {
                    case Impact_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Impact_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Orientation:
                        this.Orientation = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.AngleThreshold:
                        this.AngleThreshold = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.PlacementRadius:
                        this.PlacementRadius = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.NoDecalData:
                        this.NoDecalData = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Result:
                        this.Result = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Impact_FieldIndex.ProjectedDecals:
                        this.ProjectedDecals = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Impact_FieldIndex.HNAM:
                        this.HNAM = (MaskItem<Exception?, ImpactHNAM.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.Decal:
                        this.Decal = (MaskItem<Exception?, Decal.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.IDSH:
                        this.IDSH = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.IDP1:
                        this.IDP1 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.IDP3:
                        this.IDP3 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Impact_FieldIndex.FootstepParticleMaxDist:
                        this.FootstepParticleMaxDist = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Model != null) return true;
                if (Duration != null) return true;
                if (Orientation != null) return true;
                if (AngleThreshold != null) return true;
                if (PlacementRadius != null) return true;
                if (SoundLevel != null) return true;
                if (NoDecalData != null) return true;
                if (Result != null) return true;
                if (Unknown != null) return true;
                if (ProjectedDecals != null) return true;
                if (HNAM != null) return true;
                if (Decal != null) return true;
                if (IDSH != null) return true;
                if (IDP1 != null) return true;
                if (IDP3 != null) return true;
                if (FootstepParticleMaxDist != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(Duration, "Duration");
                }
                {
                    sb.AppendItem(Orientation, "Orientation");
                }
                {
                    sb.AppendItem(AngleThreshold, "AngleThreshold");
                }
                {
                    sb.AppendItem(PlacementRadius, "PlacementRadius");
                }
                {
                    sb.AppendItem(SoundLevel, "SoundLevel");
                }
                {
                    sb.AppendItem(NoDecalData, "NoDecalData");
                }
                {
                    sb.AppendItem(Result, "Result");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                if (ProjectedDecals is {} ProjectedDecalsItem)
                {
                    sb.AppendLine("ProjectedDecals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ProjectedDecalsItem.Overall);
                        if (ProjectedDecalsItem.Specific != null)
                        {
                            foreach (var subItem in ProjectedDecalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                HNAM?.Print(sb);
                Decal?.Print(sb);
                IDSH?.Print(sb);
                IDP1?.Print(sb);
                IDP3?.Print(sb);
                {
                    sb.AppendItem(FootstepParticleMaxDist, "FootstepParticleMaxDist");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Duration = this.Duration.Combine(rhs.Duration);
                ret.Orientation = this.Orientation.Combine(rhs.Orientation);
                ret.AngleThreshold = this.AngleThreshold.Combine(rhs.AngleThreshold);
                ret.PlacementRadius = this.PlacementRadius.Combine(rhs.PlacementRadius);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.NoDecalData = this.NoDecalData.Combine(rhs.NoDecalData);
                ret.Result = this.Result.Combine(rhs.Result);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ProjectedDecals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ProjectedDecals?.Overall, rhs.ProjectedDecals?.Overall), Noggog.ExceptionExt.Combine(this.ProjectedDecals?.Specific, rhs.ProjectedDecals?.Specific));
                ret.HNAM = this.HNAM.Combine(rhs.HNAM, (l, r) => l.Combine(r));
                ret.Decal = this.Decal.Combine(rhs.Decal, (l, r) => l.Combine(r));
                ret.IDSH = this.IDSH.Combine(rhs.IDSH, (l, r) => l.Combine(r));
                ret.IDP1 = this.IDP1.Combine(rhs.IDP1, (l, r) => l.Combine(r));
                ret.IDP3 = this.IDP3.Combine(rhs.IDP3, (l, r) => l.Combine(r));
                ret.FootstepParticleMaxDist = this.FootstepParticleMaxDist.Combine(rhs.FootstepParticleMaxDist);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public Model.TranslationMask? Model;
            public bool Duration;
            public bool Orientation;
            public bool AngleThreshold;
            public bool PlacementRadius;
            public bool SoundLevel;
            public bool NoDecalData;
            public bool Result;
            public bool Unknown;
            public bool ProjectedDecals;
            public ImpactHNAM.TranslationMask? HNAM;
            public Decal.TranslationMask? Decal;
            public SoundReference.TranslationMask? IDSH;
            public SoundReference.TranslationMask? IDP1;
            public SoundReference.TranslationMask? IDP3;
            public bool FootstepParticleMaxDist;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Duration = defaultOn;
                this.Orientation = defaultOn;
                this.AngleThreshold = defaultOn;
                this.PlacementRadius = defaultOn;
                this.SoundLevel = defaultOn;
                this.NoDecalData = defaultOn;
                this.Result = defaultOn;
                this.Unknown = defaultOn;
                this.ProjectedDecals = defaultOn;
                this.FootstepParticleMaxDist = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Duration, null));
                ret.Add((Orientation, null));
                ret.Add((AngleThreshold, null));
                ret.Add((PlacementRadius, null));
                ret.Add((SoundLevel, null));
                ret.Add((NoDecalData, null));
                ret.Add((Result, null));
                ret.Add((Unknown, null));
                ret.Add((ProjectedDecals, null));
                ret.Add((HNAM != null ? HNAM.OnOverall : DefaultOn, HNAM?.GetCrystal()));
                ret.Add((Decal != null ? Decal.OnOverall : DefaultOn, Decal?.GetCrystal()));
                ret.Add((IDSH != null ? IDSH.OnOverall : DefaultOn, IDSH?.GetCrystal()));
                ret.Add((IDP1 != null ? IDP1.OnOverall : DefaultOn, IDP1?.GetCrystal()));
                ret.Add((IDP3 != null ? IDP3.OnOverall : DefaultOn, IDP3?.GetCrystal()));
                ret.Add((FootstepParticleMaxDist, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Impact_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ImpactCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactSetterCommon.Instance.RemapLinks(this, mapping);
        public Impact(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Impact(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Impact(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Impact(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Impact(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Impact>.ToString(this);
        }

        protected override Type LinkType => typeof(IImpact);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ImpactCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ImpactSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ImpactSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ImpactSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImpactGetter rhs) return false;
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImpactGetter? obj)
        {
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImpactBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Impact CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Impact();
            ((ImpactSetterCommon)((IImpactGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Impact item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ImpactSetterCommon)((IImpactGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Impact GetNew()
        {
            return new Impact();
        }

    }
    #endregion

    #region Interface
    public partial interface IImpact :
        IAssetLinkContainer,
        IFormLinkContainer,
        IImpactGetter,
        ILoquiObjectSetter<IImpactInternal>,
        IModeled,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Single Duration { get; set; }
        new Impact.OrientationType Orientation { get; set; }
        new Single AngleThreshold { get; set; }
        new Single PlacementRadius { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new Boolean NoDecalData { get; set; }
        new Impact.ResultType Result { get; set; }
        new Int16 Unknown { get; set; }
        new ExtendedList<IFormLinkGetter<IProjectedDecalGetter>>? ProjectedDecals { get; set; }
        new ImpactHNAM? HNAM { get; set; }
        new Decal? Decal { get; set; }
        new SoundReference? IDSH { get; set; }
        new SoundReference? IDP1 { get; set; }
        new SoundReference? IDP3 { get; set; }
        new Single? FootstepParticleMaxDist { get; set; }
    }

    public partial interface IImpactInternal :
        IStarfieldMajorRecordInternal,
        IImpact,
        IImpactGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.IPCT)]
    public partial interface IImpactGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IImpactGetter>,
        IMapsToGetter<IImpactGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => Impact_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        Single Duration { get; }
        Impact.OrientationType Orientation { get; }
        Single AngleThreshold { get; }
        Single PlacementRadius { get; }
        SoundLevel SoundLevel { get; }
        Boolean NoDecalData { get; }
        Impact.ResultType Result { get; }
        Int16 Unknown { get; }
        IReadOnlyList<IFormLinkGetter<IProjectedDecalGetter>>? ProjectedDecals { get; }
        IImpactHNAMGetter? HNAM { get; }
        IDecalGetter? Decal { get; }
        ISoundReferenceGetter? IDSH { get; }
        ISoundReferenceGetter? IDP1 { get; }
        ISoundReferenceGetter? IDP3 { get; }
        Single? FootstepParticleMaxDist { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImpactMixIn
    {
        public static void Clear(this IImpactInternal item)
        {
            ((ImpactSetterCommon)((IImpactGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Impact.Mask<bool> GetEqualsMask(
            this IImpactGetter item,
            IImpactGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IImpactGetter item,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IImpactGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImpactGetter item,
            IImpactGetter rhs,
            Impact.TranslationMask? equalsMask = null)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IImpactInternal lhs,
            IImpactGetter rhs,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImpactSetterTranslationCommon)((IImpactGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImpactInternal lhs,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImpactSetterTranslationCommon)((IImpactGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            Impact.TranslationMask? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Impact DeepCopy(
            this IImpactGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImpactSetterTranslationCommon)((IImpactGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Impact Duplicate(
            this IImpactGetter item,
            FormKey formKey,
            Impact.TranslationMask? copyMask = null)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Impact Duplicate(
            this IImpactGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImpactInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ImpactSetterCommon)((IImpactGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Impact_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Model = 8,
        Duration = 9,
        Orientation = 10,
        AngleThreshold = 11,
        PlacementRadius = 12,
        SoundLevel = 13,
        NoDecalData = 14,
        Result = 15,
        Unknown = 16,
        ProjectedDecals = 17,
        HNAM = 18,
        Decal = 19,
        IDSH = 20,
        IDP1 = 21,
        IDP3 = 22,
        FootstepParticleMaxDist = 23,
    }
    #endregion

    #region Registration
    internal partial class Impact_Registration : ILoquiRegistration
    {
        public static readonly Impact_Registration Instance = new Impact_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(Impact.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Impact.ErrorMask);

        public static readonly Type ClassType = typeof(Impact);

        public static readonly Type GetterType = typeof(IImpactGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImpact);

        public static readonly Type? InternalSetterType = typeof(IImpactInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Impact";

        public const string Name = "Impact";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IPCT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IPCT);
            var all = RecordCollection.Factory(
                RecordTypes.IPCT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.DATA,
                RecordTypes.GNAM,
                RecordTypes.HNAM,
                RecordTypes.DODT,
                RecordTypes.IDSH,
                RecordTypes.IDP1,
                RecordTypes.IDP3,
                RecordTypes.FNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ImpactBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ImpactSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ImpactSetterCommon Instance = new ImpactSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImpactInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Model = null;
            item.Duration = default(Single);
            item.Orientation = default(Impact.OrientationType);
            item.AngleThreshold = default(Single);
            item.PlacementRadius = default(Single);
            item.SoundLevel = default(SoundLevel);
            item.NoDecalData = default(Boolean);
            item.Result = default(Impact.ResultType);
            item.Unknown = default(Int16);
            item.ProjectedDecals = null;
            item.HNAM = null;
            item.Decal = null;
            item.IDSH = null;
            item.IDP1 = null;
            item.IDP3 = null;
            item.FootstepParticleMaxDist = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IImpactInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImpactInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IImpact obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ProjectedDecals?.RemapLinks(mapping);
            obj.HNAM?.RemapLinks(mapping);
            obj.IDSH?.RemapLinks(mapping);
            obj.IDP1?.RemapLinks(mapping);
            obj.IDP3?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IImpact obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IImpact obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImpactInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IImpactInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ImpactBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImpactBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Impact)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Impact)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ImpactCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ImpactCommon Instance = new ImpactCommon();

        public Impact.Mask<bool> GetEqualsMask(
            IImpactGetter item,
            IImpactGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Impact.Mask<bool>(false);
            ((ImpactCommon)((IImpactGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImpactGetter item,
            IImpactGetter rhs,
            Impact.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Duration = item.Duration.EqualsWithin(rhs.Duration);
            ret.Orientation = item.Orientation == rhs.Orientation;
            ret.AngleThreshold = item.AngleThreshold.EqualsWithin(rhs.AngleThreshold);
            ret.PlacementRadius = item.PlacementRadius.EqualsWithin(rhs.PlacementRadius);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.NoDecalData = item.NoDecalData == rhs.NoDecalData;
            ret.Result = item.Result == rhs.Result;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.ProjectedDecals = item.ProjectedDecals.CollectionEqualsHelper(
                rhs.ProjectedDecals,
                (l, r) => object.Equals(l, r),
                include);
            ret.HNAM = EqualsMaskHelper.EqualsHelper(
                item.HNAM,
                rhs.HNAM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Decal = EqualsMaskHelper.EqualsHelper(
                item.Decal,
                rhs.Decal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IDSH = EqualsMaskHelper.EqualsHelper(
                item.IDSH,
                rhs.IDSH,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IDP1 = EqualsMaskHelper.EqualsHelper(
                item.IDP1,
                rhs.IDP1,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IDP3 = EqualsMaskHelper.EqualsHelper(
                item.IDP3,
                rhs.IDP3,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FootstepParticleMaxDist = item.FootstepParticleMaxDist.EqualsWithin(rhs.FootstepParticleMaxDist);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IImpactGetter item,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IImpactGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Impact.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Impact =>");
            }
            else
            {
                sb.AppendLine($"{name} (Impact) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IImpactGetter item,
            StructuredStringBuilder sb,
            Impact.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.Duration ?? true)
            {
                sb.AppendItem(item.Duration, "Duration");
            }
            if (printMask?.Orientation ?? true)
            {
                sb.AppendItem(item.Orientation, "Orientation");
            }
            if (printMask?.AngleThreshold ?? true)
            {
                sb.AppendItem(item.AngleThreshold, "AngleThreshold");
            }
            if (printMask?.PlacementRadius ?? true)
            {
                sb.AppendItem(item.PlacementRadius, "PlacementRadius");
            }
            if (printMask?.SoundLevel ?? true)
            {
                sb.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.NoDecalData ?? true)
            {
                sb.AppendItem(item.NoDecalData, "NoDecalData");
            }
            if (printMask?.Result ?? true)
            {
                sb.AppendItem(item.Result, "Result");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.ProjectedDecals?.Overall ?? true)
                && item.ProjectedDecals is {} ProjectedDecalsItem)
            {
                sb.AppendLine("ProjectedDecals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ProjectedDecalsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.HNAM?.Overall ?? true)
                && item.HNAM is {} HNAMItem)
            {
                HNAMItem?.Print(sb, "HNAM");
            }
            if ((printMask?.Decal?.Overall ?? true)
                && item.Decal is {} DecalItem)
            {
                DecalItem?.Print(sb, "Decal");
            }
            if ((printMask?.IDSH?.Overall ?? true)
                && item.IDSH is {} IDSHItem)
            {
                IDSHItem?.Print(sb, "IDSH");
            }
            if ((printMask?.IDP1?.Overall ?? true)
                && item.IDP1 is {} IDP1Item)
            {
                IDP1Item?.Print(sb, "IDP1");
            }
            if ((printMask?.IDP3?.Overall ?? true)
                && item.IDP3 is {} IDP3Item)
            {
                IDP3Item?.Print(sb, "IDP3");
            }
            if ((printMask?.FootstepParticleMaxDist ?? true)
                && item.FootstepParticleMaxDist is {} FootstepParticleMaxDistItem)
            {
                sb.AppendItem(FootstepParticleMaxDistItem, "FootstepParticleMaxDist");
            }
        }
        
        public static Impact_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Impact_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Impact_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Impact_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Impact_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Impact_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImpactGetter? lhs,
            IImpactGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Duration) ?? true))
            {
                if (!lhs.Duration.EqualsWithin(rhs.Duration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Orientation) ?? true))
            {
                if (lhs.Orientation != rhs.Orientation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.AngleThreshold) ?? true))
            {
                if (!lhs.AngleThreshold.EqualsWithin(rhs.AngleThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.PlacementRadius) ?? true))
            {
                if (!lhs.PlacementRadius.EqualsWithin(rhs.PlacementRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.SoundLevel) ?? true))
            {
                if (lhs.SoundLevel != rhs.SoundLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.NoDecalData) ?? true))
            {
                if (lhs.NoDecalData != rhs.NoDecalData) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Result) ?? true))
            {
                if (lhs.Result != rhs.Result) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.ProjectedDecals) ?? true))
            {
                if (!lhs.ProjectedDecals.SequenceEqualNullable(rhs.ProjectedDecals)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.HNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HNAM, rhs.HNAM, out var lhsHNAM, out var rhsHNAM, out var isHNAMEqual))
                {
                    if (!((ImpactHNAMCommon)((IImpactHNAMGetter)lhsHNAM).CommonInstance()!).Equals(lhsHNAM, rhsHNAM, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.HNAM))) return false;
                }
                else if (!isHNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.Decal) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Decal, rhs.Decal, out var lhsDecal, out var rhsDecal, out var isDecalEqual))
                {
                    if (!((DecalCommon)((IDecalGetter)lhsDecal).CommonInstance()!).Equals(lhsDecal, rhsDecal, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.Decal))) return false;
                }
                else if (!isDecalEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.IDSH) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IDSH, rhs.IDSH, out var lhsIDSH, out var rhsIDSH, out var isIDSHEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsIDSH).CommonInstance()!).Equals(lhsIDSH, rhsIDSH, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.IDSH))) return false;
                }
                else if (!isIDSHEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.IDP1) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IDP1, rhs.IDP1, out var lhsIDP1, out var rhsIDP1, out var isIDP1Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsIDP1).CommonInstance()!).Equals(lhsIDP1, rhsIDP1, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.IDP1))) return false;
                }
                else if (!isIDP1Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.IDP3) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IDP3, rhs.IDP3, out var lhsIDP3, out var rhsIDP3, out var isIDP3Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsIDP3).CommonInstance()!).Equals(lhsIDP3, rhsIDP3, equalsMask?.GetSubCrystal((int)Impact_FieldIndex.IDP3))) return false;
                }
                else if (!isIDP3Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Impact_FieldIndex.FootstepParticleMaxDist) ?? true))
            {
                if (!lhs.FootstepParticleMaxDist.EqualsWithin(rhs.FootstepParticleMaxDist)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImpactGetter?)lhs,
                rhs: rhs as IImpactGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImpactGetter?)lhs,
                rhs: rhs as IImpactGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IImpactGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Duration);
            hash.Add(item.Orientation);
            hash.Add(item.AngleThreshold);
            hash.Add(item.PlacementRadius);
            hash.Add(item.SoundLevel);
            hash.Add(item.NoDecalData);
            hash.Add(item.Result);
            hash.Add(item.Unknown);
            hash.Add(item.ProjectedDecals);
            if (item.HNAM is {} HNAMitem)
            {
                hash.Add(HNAMitem);
            }
            if (item.Decal is {} Decalitem)
            {
                hash.Add(Decalitem);
            }
            if (item.IDSH is {} IDSHitem)
            {
                hash.Add(IDSHitem);
            }
            if (item.IDP1 is {} IDP1item)
            {
                hash.Add(IDP1item);
            }
            if (item.IDP3 is {} IDP3item)
            {
                hash.Add(IDP3item);
            }
            if (item.FootstepParticleMaxDist is {} FootstepParticleMaxDistitem)
            {
                hash.Add(FootstepParticleMaxDistitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Impact.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IImpactGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.ProjectedDecals is {} ProjectedDecalsItem)
            {
                foreach (var item in ProjectedDecalsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.HNAM is {} HNAMItems)
            {
                foreach (var item in HNAMItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.IDSH is {} IDSHItems)
            {
                foreach (var item in IDSHItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.IDP1 is {} IDP1Items)
            {
                foreach (var item in IDP1Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.IDP3 is {} IDP3Items)
            {
                foreach (var item in IDP3Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IImpactGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Impact Duplicate(
            IImpactGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Impact(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImpactGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImpactGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ImpactSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ImpactSetterTranslationCommon Instance = new ImpactSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImpactInternal item,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IImpact item,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Orientation) ?? true))
            {
                item.Orientation = rhs.Orientation;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.AngleThreshold) ?? true))
            {
                item.AngleThreshold = rhs.AngleThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.PlacementRadius) ?? true))
            {
                item.PlacementRadius = rhs.PlacementRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.NoDecalData) ?? true))
            {
                item.NoDecalData = rhs.NoDecalData;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Result) ?? true))
            {
                item.Result = rhs.Result;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.ProjectedDecals) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.ProjectedDecals);
                try
                {
                    if ((rhs.ProjectedDecals != null))
                    {
                        item.ProjectedDecals = 
                            rhs.ProjectedDecals
                                .Select(b => (IFormLinkGetter<IProjectedDecalGetter>)new FormLink<IProjectedDecalGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IProjectedDecalGetter>>();
                    }
                    else
                    {
                        item.ProjectedDecals = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.HNAM) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.HNAM);
                try
                {
                    if(rhs.HNAM is {} rhsHNAM)
                    {
                        item.HNAM = rhsHNAM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.HNAM));
                    }
                    else
                    {
                        item.HNAM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.Decal) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.Decal);
                try
                {
                    if(rhs.Decal is {} rhsDecal)
                    {
                        item.Decal = rhsDecal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.Decal));
                    }
                    else
                    {
                        item.Decal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.IDSH) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.IDSH);
                try
                {
                    if(rhs.IDSH is {} rhsIDSH)
                    {
                        item.IDSH = rhsIDSH.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.IDSH));
                    }
                    else
                    {
                        item.IDSH = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.IDP1) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.IDP1);
                try
                {
                    if(rhs.IDP1 is {} rhsIDP1)
                    {
                        item.IDP1 = rhsIDP1.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.IDP1));
                    }
                    else
                    {
                        item.IDP1 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.IDP3) ?? true))
            {
                errorMask?.PushIndex((int)Impact_FieldIndex.IDP3);
                try
                {
                    if(rhs.IDP3 is {} rhsIDP3)
                    {
                        item.IDP3 = rhsIDP3.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Impact_FieldIndex.IDP3));
                    }
                    else
                    {
                        item.IDP3 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Impact_FieldIndex.FootstepParticleMaxDist) ?? true))
            {
                item.FootstepParticleMaxDist = rhs.FootstepParticleMaxDist;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IImpact item,
            IImpactGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactInternal)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpact)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactInternal)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpact)item,
                rhs: (IImpactGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Impact DeepCopy(
            IImpactGetter item,
            Impact.TranslationMask? copyMask = null)
        {
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ((ImpactSetterTranslationCommon)((IImpactGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Impact DeepCopy(
            IImpactGetter item,
            out Impact.ErrorMask errorMask,
            Impact.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ((ImpactSetterTranslationCommon)((IImpactGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Impact.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Impact DeepCopy(
            IImpactGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Impact ret = (Impact)((ImpactCommon)((IImpactGetter)item).CommonInstance()!).GetNew();
            ((ImpactSetterTranslationCommon)((IImpactGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Impact
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Impact_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Impact_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImpactSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ImpactBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ImpactBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IImpactGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Duration);
                EnumBinaryTranslation<Impact.OrientationType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Orientation,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngleThreshold);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PlacementRadius);
                EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.SoundLevel,
                    length: 4);
                writer.Write(item.NoDecalData);
                EnumBinaryTranslation<Impact.ResultType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Result,
                    length: 1);
                writer.Write(item.Unknown);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IProjectedDecalGetter>>.Instance.Write(
                writer: writer,
                items: item.ProjectedDecals,
                recordType: translationParams.ConvertToCustom(RecordTypes.GNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IProjectedDecalGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.HNAM is {} HNAMItem)
            {
                ((ImpactHNAMBinaryWriteTranslation)((IBinaryItem)HNAMItem).BinaryWriteTranslator).Write(
                    item: HNAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Decal is {} DecalItem)
            {
                ((DecalBinaryWriteTranslation)((IBinaryItem)DecalItem).BinaryWriteTranslator).Write(
                    item: DecalItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.IDSH is {} IDSHItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.IDSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)IDSHItem).BinaryWriteTranslator).Write(
                        item: IDSHItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.IDP1 is {} IDP1Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.IDP1))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)IDP1Item).BinaryWriteTranslator).Write(
                        item: IDP1Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.IDP3 is {} IDP3Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.IDP3))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)IDP3Item).BinaryWriteTranslator).Write(
                        item: IDP3Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FootstepParticleMaxDist,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
        }

        public void Write(
            MutagenWriter writer,
            IImpactGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IPCT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImpactGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ImpactBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ImpactBinaryCreateTranslation Instance = new ImpactBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IPCT;
        public static ParseResult FillBinaryRecordTypes(
            IImpactInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Impact_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Impact_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Duration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Orientation = EnumBinaryTranslation<Impact.OrientationType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.AngleThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PlacementRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 1) return null;
                    item.NoDecalData = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.Result = EnumBinaryTranslation<Impact.ResultType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadInt16();
                    return (int)Impact_FieldIndex.Unknown;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ProjectedDecals = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IProjectedDecalGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IProjectedDecalGetter>>();
                    return (int)Impact_FieldIndex.ProjectedDecals;
                }
                case RecordTypeInts.HNAM:
                {
                    item.HNAM = Mutagen.Bethesda.Starfield.ImpactHNAM.CreateFromBinary(frame: frame);
                    return (int)Impact_FieldIndex.HNAM;
                }
                case RecordTypeInts.DODT:
                {
                    item.Decal = Mutagen.Bethesda.Starfield.Decal.CreateFromBinary(frame: frame);
                    return (int)Impact_FieldIndex.Decal;
                }
                case RecordTypeInts.IDSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.IDSH = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Impact_FieldIndex.IDSH;
                }
                case RecordTypeInts.IDP1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.IDP1 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Impact_FieldIndex.IDP1;
                }
                case RecordTypeInts.IDP3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.IDP3 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Impact_FieldIndex.IDP3;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FootstepParticleMaxDist = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Impact_FieldIndex.FootstepParticleMaxDist;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ImpactBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ImpactBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IImpactGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Impact_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Impact_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ImpactCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ImpactCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImpactBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IImpact);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        public IModelGetter? Model { get; private set; }
        private RangeInt32? _DATALocation;
        #region Duration
        private int _DurationLocation => _DATALocation!.Value.Min;
        private bool _Duration_IsSet => _DATALocation.HasValue;
        public Single Duration => _Duration_IsSet ? _recordData.Slice(_DurationLocation, 4).Float() : default(Single);
        #endregion
        #region Orientation
        private int _OrientationLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Orientation_IsSet => _DATALocation.HasValue;
        public Impact.OrientationType Orientation => _Orientation_IsSet ? (Impact.OrientationType)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_OrientationLocation, 0x4)) : default;
        #endregion
        #region AngleThreshold
        private int _AngleThresholdLocation => _DATALocation!.Value.Min + 0x8;
        private bool _AngleThreshold_IsSet => _DATALocation.HasValue;
        public Single AngleThreshold => _AngleThreshold_IsSet ? _recordData.Slice(_AngleThresholdLocation, 4).Float() : default(Single);
        #endregion
        #region PlacementRadius
        private int _PlacementRadiusLocation => _DATALocation!.Value.Min + 0xC;
        private bool _PlacementRadius_IsSet => _DATALocation.HasValue;
        public Single PlacementRadius => _PlacementRadius_IsSet ? _recordData.Slice(_PlacementRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region SoundLevel
        private int _SoundLevelLocation => _DATALocation!.Value.Min + 0x10;
        private bool _SoundLevel_IsSet => _DATALocation.HasValue;
        public SoundLevel SoundLevel => _SoundLevel_IsSet ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_SoundLevelLocation, 0x4)) : default;
        #endregion
        #region NoDecalData
        private int _NoDecalDataLocation => _DATALocation!.Value.Min + 0x14;
        private bool _NoDecalData_IsSet => _DATALocation.HasValue;
        public Boolean NoDecalData => _NoDecalData_IsSet ? _recordData.Slice(_NoDecalDataLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region Result
        private int _ResultLocation => _DATALocation!.Value.Min + 0x15;
        private bool _Result_IsSet => _DATALocation.HasValue;
        public Impact.ResultType Result => _Result_IsSet ? (Impact.ResultType)_recordData.Span.Slice(_ResultLocation, 0x1)[0] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0x16;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(Int16);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IProjectedDecalGetter>>? ProjectedDecals { get; private set; }
        #region HNAM
        private RangeInt32? _HNAMLocation;
        public IImpactHNAMGetter? HNAM => _HNAMLocation.HasValue ? ImpactHNAMBinaryOverlay.ImpactHNAMFactory(_recordData.Slice(_HNAMLocation!.Value.Min), _package) : default;
        #endregion
        #region Decal
        private RangeInt32? _DecalLocation;
        public IDecalGetter? Decal => _DecalLocation.HasValue ? DecalBinaryOverlay.DecalFactory(_recordData.Slice(_DecalLocation!.Value.Min), _package) : default;
        #endregion
        public ISoundReferenceGetter? IDSH { get; private set; }
        public ISoundReferenceGetter? IDP1 { get; private set; }
        public ISoundReferenceGetter? IDP3 { get; private set; }
        #region FootstepParticleMaxDist
        private int? _FootstepParticleMaxDistLocation;
        public Single? FootstepParticleMaxDist => _FootstepParticleMaxDistLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FootstepParticleMaxDistLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImpactBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IImpactGetter ImpactFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ImpactBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IImpactGetter ImpactFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ImpactFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Impact_FieldIndex.Components;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Impact_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Impact_FieldIndex.Unknown;
                }
                case RecordTypeInts.GNAM:
                {
                    this.ProjectedDecals = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IProjectedDecalGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IProjectedDecalGetter>(p, s));
                    return (int)Impact_FieldIndex.ProjectedDecals;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Impact_FieldIndex.HNAM;
                }
                case RecordTypeInts.DODT:
                {
                    _DecalLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Impact_FieldIndex.Decal;
                }
                case RecordTypeInts.IDSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.IDSH = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Impact_FieldIndex.IDSH;
                }
                case RecordTypeInts.IDP1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.IDP1 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Impact_FieldIndex.IDP1;
                }
                case RecordTypeInts.IDP3:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.IDP3 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Impact_FieldIndex.IDP3;
                }
                case RecordTypeInts.FNAM:
                {
                    _FootstepParticleMaxDistLocation = (stream.Position - offset);
                    return (int)Impact_FieldIndex.FootstepParticleMaxDist;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImpactMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Impact>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImpactGetter rhs) return false;
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImpactGetter? obj)
        {
            return ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImpactCommon)((IImpactGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

