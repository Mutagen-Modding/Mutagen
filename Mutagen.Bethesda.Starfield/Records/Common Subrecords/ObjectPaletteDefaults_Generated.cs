/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ObjectPaletteDefaults :
        IEquatable<IObjectPaletteDefaultsGetter>,
        ILoquiObjectSetter<ObjectPaletteDefaults>,
        IObjectPaletteDefaults
    {
        #region Ctor
        public ObjectPaletteDefaults()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public ObjectPaletteDefaults.Flag Flags { get; set; } = default(ObjectPaletteDefaults.Flag);
        #endregion
        #region SinkMeters
        public Single SinkMeters { get; set; } = default(Single);
        #endregion
        #region SinkVariance
        public Single SinkVariance { get; set; } = default(Single);
        #endregion
        #region XYOffsetVariance
        public Single XYOffsetVariance { get; set; } = default(Single);
        #endregion
        #region FootprintSize
        public ObjectPaletteDefaults.FootprintSizes FootprintSize { get; set; } = default(ObjectPaletteDefaults.FootprintSizes);
        #endregion
        #region ScalePercent
        public Single ScalePercent { get; set; } = default(Single);
        #endregion
        #region ScaleVariance
        public Single ScaleVariance { get; set; } = default(Single);
        #endregion
        #region AngleXDegrees
        public Single AngleXDegrees { get; set; } = default(Single);
        #endregion
        #region AngleXVariance
        public Single AngleXVariance { get; set; } = default(Single);
        #endregion
        #region AngleYDegrees
        public Single AngleYDegrees { get; set; } = default(Single);
        #endregion
        #region AngleYVariance
        public Single AngleYVariance { get; set; } = default(Single);
        #endregion
        #region AngleZDegrees
        public Single AngleZDegrees { get; set; } = default(Single);
        #endregion
        #region AngleZVariance
        public Single AngleZVariance { get; set; } = default(Single);
        #endregion
        #region SlopePercent
        public Single SlopePercent { get; set; } = default(Single);
        #endregion
        #region SlopePercentVariance
        public Single SlopePercentVariance { get; set; } = default(Single);
        #endregion
        #region Density
        public Single Density { get; set; } = default(Single);
        #endregion
        #region FrequencyPercent
        public Single FrequencyPercent { get; set; } = default(Single);
        #endregion
        #region SlopeLimit
        public Single SlopeLimit { get; set; } = default(Single);
        #endregion
        #region DistanceBelowWater
        public Single DistanceBelowWater { get; set; } = default(Single);
        #endregion
        #region DistanceAboveWater
        public Single DistanceAboveWater { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectPaletteDefaultsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectPaletteDefaultsGetter rhs) return false;
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectPaletteDefaultsGetter? obj)
        {
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.SinkMeters = initialValue;
                this.SinkVariance = initialValue;
                this.XYOffsetVariance = initialValue;
                this.FootprintSize = initialValue;
                this.ScalePercent = initialValue;
                this.ScaleVariance = initialValue;
                this.AngleXDegrees = initialValue;
                this.AngleXVariance = initialValue;
                this.AngleYDegrees = initialValue;
                this.AngleYVariance = initialValue;
                this.AngleZDegrees = initialValue;
                this.AngleZVariance = initialValue;
                this.SlopePercent = initialValue;
                this.SlopePercentVariance = initialValue;
                this.Density = initialValue;
                this.FrequencyPercent = initialValue;
                this.SlopeLimit = initialValue;
                this.DistanceBelowWater = initialValue;
                this.DistanceAboveWater = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem SinkMeters,
                TItem SinkVariance,
                TItem XYOffsetVariance,
                TItem FootprintSize,
                TItem ScalePercent,
                TItem ScaleVariance,
                TItem AngleXDegrees,
                TItem AngleXVariance,
                TItem AngleYDegrees,
                TItem AngleYVariance,
                TItem AngleZDegrees,
                TItem AngleZVariance,
                TItem SlopePercent,
                TItem SlopePercentVariance,
                TItem Density,
                TItem FrequencyPercent,
                TItem SlopeLimit,
                TItem DistanceBelowWater,
                TItem DistanceAboveWater)
            {
                this.Flags = Flags;
                this.SinkMeters = SinkMeters;
                this.SinkVariance = SinkVariance;
                this.XYOffsetVariance = XYOffsetVariance;
                this.FootprintSize = FootprintSize;
                this.ScalePercent = ScalePercent;
                this.ScaleVariance = ScaleVariance;
                this.AngleXDegrees = AngleXDegrees;
                this.AngleXVariance = AngleXVariance;
                this.AngleYDegrees = AngleYDegrees;
                this.AngleYVariance = AngleYVariance;
                this.AngleZDegrees = AngleZDegrees;
                this.AngleZVariance = AngleZVariance;
                this.SlopePercent = SlopePercent;
                this.SlopePercentVariance = SlopePercentVariance;
                this.Density = Density;
                this.FrequencyPercent = FrequencyPercent;
                this.SlopeLimit = SlopeLimit;
                this.DistanceBelowWater = DistanceBelowWater;
                this.DistanceAboveWater = DistanceAboveWater;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem SinkMeters;
            public TItem SinkVariance;
            public TItem XYOffsetVariance;
            public TItem FootprintSize;
            public TItem ScalePercent;
            public TItem ScaleVariance;
            public TItem AngleXDegrees;
            public TItem AngleXVariance;
            public TItem AngleYDegrees;
            public TItem AngleYVariance;
            public TItem AngleZDegrees;
            public TItem AngleZVariance;
            public TItem SlopePercent;
            public TItem SlopePercentVariance;
            public TItem Density;
            public TItem FrequencyPercent;
            public TItem SlopeLimit;
            public TItem DistanceBelowWater;
            public TItem DistanceAboveWater;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.SinkMeters, rhs.SinkMeters)) return false;
                if (!object.Equals(this.SinkVariance, rhs.SinkVariance)) return false;
                if (!object.Equals(this.XYOffsetVariance, rhs.XYOffsetVariance)) return false;
                if (!object.Equals(this.FootprintSize, rhs.FootprintSize)) return false;
                if (!object.Equals(this.ScalePercent, rhs.ScalePercent)) return false;
                if (!object.Equals(this.ScaleVariance, rhs.ScaleVariance)) return false;
                if (!object.Equals(this.AngleXDegrees, rhs.AngleXDegrees)) return false;
                if (!object.Equals(this.AngleXVariance, rhs.AngleXVariance)) return false;
                if (!object.Equals(this.AngleYDegrees, rhs.AngleYDegrees)) return false;
                if (!object.Equals(this.AngleYVariance, rhs.AngleYVariance)) return false;
                if (!object.Equals(this.AngleZDegrees, rhs.AngleZDegrees)) return false;
                if (!object.Equals(this.AngleZVariance, rhs.AngleZVariance)) return false;
                if (!object.Equals(this.SlopePercent, rhs.SlopePercent)) return false;
                if (!object.Equals(this.SlopePercentVariance, rhs.SlopePercentVariance)) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.FrequencyPercent, rhs.FrequencyPercent)) return false;
                if (!object.Equals(this.SlopeLimit, rhs.SlopeLimit)) return false;
                if (!object.Equals(this.DistanceBelowWater, rhs.DistanceBelowWater)) return false;
                if (!object.Equals(this.DistanceAboveWater, rhs.DistanceAboveWater)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.SinkMeters);
                hash.Add(this.SinkVariance);
                hash.Add(this.XYOffsetVariance);
                hash.Add(this.FootprintSize);
                hash.Add(this.ScalePercent);
                hash.Add(this.ScaleVariance);
                hash.Add(this.AngleXDegrees);
                hash.Add(this.AngleXVariance);
                hash.Add(this.AngleYDegrees);
                hash.Add(this.AngleYVariance);
                hash.Add(this.AngleZDegrees);
                hash.Add(this.AngleZVariance);
                hash.Add(this.SlopePercent);
                hash.Add(this.SlopePercentVariance);
                hash.Add(this.Density);
                hash.Add(this.FrequencyPercent);
                hash.Add(this.SlopeLimit);
                hash.Add(this.DistanceBelowWater);
                hash.Add(this.DistanceAboveWater);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.SinkMeters)) return false;
                if (!eval(this.SinkVariance)) return false;
                if (!eval(this.XYOffsetVariance)) return false;
                if (!eval(this.FootprintSize)) return false;
                if (!eval(this.ScalePercent)) return false;
                if (!eval(this.ScaleVariance)) return false;
                if (!eval(this.AngleXDegrees)) return false;
                if (!eval(this.AngleXVariance)) return false;
                if (!eval(this.AngleYDegrees)) return false;
                if (!eval(this.AngleYVariance)) return false;
                if (!eval(this.AngleZDegrees)) return false;
                if (!eval(this.AngleZVariance)) return false;
                if (!eval(this.SlopePercent)) return false;
                if (!eval(this.SlopePercentVariance)) return false;
                if (!eval(this.Density)) return false;
                if (!eval(this.FrequencyPercent)) return false;
                if (!eval(this.SlopeLimit)) return false;
                if (!eval(this.DistanceBelowWater)) return false;
                if (!eval(this.DistanceAboveWater)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.SinkMeters)) return true;
                if (eval(this.SinkVariance)) return true;
                if (eval(this.XYOffsetVariance)) return true;
                if (eval(this.FootprintSize)) return true;
                if (eval(this.ScalePercent)) return true;
                if (eval(this.ScaleVariance)) return true;
                if (eval(this.AngleXDegrees)) return true;
                if (eval(this.AngleXVariance)) return true;
                if (eval(this.AngleYDegrees)) return true;
                if (eval(this.AngleYVariance)) return true;
                if (eval(this.AngleZDegrees)) return true;
                if (eval(this.AngleZVariance)) return true;
                if (eval(this.SlopePercent)) return true;
                if (eval(this.SlopePercentVariance)) return true;
                if (eval(this.Density)) return true;
                if (eval(this.FrequencyPercent)) return true;
                if (eval(this.SlopeLimit)) return true;
                if (eval(this.DistanceBelowWater)) return true;
                if (eval(this.DistanceAboveWater)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectPaletteDefaults.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.SinkMeters = eval(this.SinkMeters);
                obj.SinkVariance = eval(this.SinkVariance);
                obj.XYOffsetVariance = eval(this.XYOffsetVariance);
                obj.FootprintSize = eval(this.FootprintSize);
                obj.ScalePercent = eval(this.ScalePercent);
                obj.ScaleVariance = eval(this.ScaleVariance);
                obj.AngleXDegrees = eval(this.AngleXDegrees);
                obj.AngleXVariance = eval(this.AngleXVariance);
                obj.AngleYDegrees = eval(this.AngleYDegrees);
                obj.AngleYVariance = eval(this.AngleYVariance);
                obj.AngleZDegrees = eval(this.AngleZDegrees);
                obj.AngleZVariance = eval(this.AngleZVariance);
                obj.SlopePercent = eval(this.SlopePercent);
                obj.SlopePercentVariance = eval(this.SlopePercentVariance);
                obj.Density = eval(this.Density);
                obj.FrequencyPercent = eval(this.FrequencyPercent);
                obj.SlopeLimit = eval(this.SlopeLimit);
                obj.DistanceBelowWater = eval(this.DistanceBelowWater);
                obj.DistanceAboveWater = eval(this.DistanceAboveWater);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ObjectPaletteDefaults.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ObjectPaletteDefaults.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectPaletteDefaults.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.SinkMeters ?? true)
                    {
                        sb.AppendItem(SinkMeters, "SinkMeters");
                    }
                    if (printMask?.SinkVariance ?? true)
                    {
                        sb.AppendItem(SinkVariance, "SinkVariance");
                    }
                    if (printMask?.XYOffsetVariance ?? true)
                    {
                        sb.AppendItem(XYOffsetVariance, "XYOffsetVariance");
                    }
                    if (printMask?.FootprintSize ?? true)
                    {
                        sb.AppendItem(FootprintSize, "FootprintSize");
                    }
                    if (printMask?.ScalePercent ?? true)
                    {
                        sb.AppendItem(ScalePercent, "ScalePercent");
                    }
                    if (printMask?.ScaleVariance ?? true)
                    {
                        sb.AppendItem(ScaleVariance, "ScaleVariance");
                    }
                    if (printMask?.AngleXDegrees ?? true)
                    {
                        sb.AppendItem(AngleXDegrees, "AngleXDegrees");
                    }
                    if (printMask?.AngleXVariance ?? true)
                    {
                        sb.AppendItem(AngleXVariance, "AngleXVariance");
                    }
                    if (printMask?.AngleYDegrees ?? true)
                    {
                        sb.AppendItem(AngleYDegrees, "AngleYDegrees");
                    }
                    if (printMask?.AngleYVariance ?? true)
                    {
                        sb.AppendItem(AngleYVariance, "AngleYVariance");
                    }
                    if (printMask?.AngleZDegrees ?? true)
                    {
                        sb.AppendItem(AngleZDegrees, "AngleZDegrees");
                    }
                    if (printMask?.AngleZVariance ?? true)
                    {
                        sb.AppendItem(AngleZVariance, "AngleZVariance");
                    }
                    if (printMask?.SlopePercent ?? true)
                    {
                        sb.AppendItem(SlopePercent, "SlopePercent");
                    }
                    if (printMask?.SlopePercentVariance ?? true)
                    {
                        sb.AppendItem(SlopePercentVariance, "SlopePercentVariance");
                    }
                    if (printMask?.Density ?? true)
                    {
                        sb.AppendItem(Density, "Density");
                    }
                    if (printMask?.FrequencyPercent ?? true)
                    {
                        sb.AppendItem(FrequencyPercent, "FrequencyPercent");
                    }
                    if (printMask?.SlopeLimit ?? true)
                    {
                        sb.AppendItem(SlopeLimit, "SlopeLimit");
                    }
                    if (printMask?.DistanceBelowWater ?? true)
                    {
                        sb.AppendItem(DistanceBelowWater, "DistanceBelowWater");
                    }
                    if (printMask?.DistanceAboveWater ?? true)
                    {
                        sb.AppendItem(DistanceAboveWater, "DistanceAboveWater");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? SinkMeters;
            public Exception? SinkVariance;
            public Exception? XYOffsetVariance;
            public Exception? FootprintSize;
            public Exception? ScalePercent;
            public Exception? ScaleVariance;
            public Exception? AngleXDegrees;
            public Exception? AngleXVariance;
            public Exception? AngleYDegrees;
            public Exception? AngleYVariance;
            public Exception? AngleZDegrees;
            public Exception? AngleZVariance;
            public Exception? SlopePercent;
            public Exception? SlopePercentVariance;
            public Exception? Density;
            public Exception? FrequencyPercent;
            public Exception? SlopeLimit;
            public Exception? DistanceBelowWater;
            public Exception? DistanceAboveWater;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectPaletteDefaults_FieldIndex enu = (ObjectPaletteDefaults_FieldIndex)index;
                switch (enu)
                {
                    case ObjectPaletteDefaults_FieldIndex.Flags:
                        return Flags;
                    case ObjectPaletteDefaults_FieldIndex.SinkMeters:
                        return SinkMeters;
                    case ObjectPaletteDefaults_FieldIndex.SinkVariance:
                        return SinkVariance;
                    case ObjectPaletteDefaults_FieldIndex.XYOffsetVariance:
                        return XYOffsetVariance;
                    case ObjectPaletteDefaults_FieldIndex.FootprintSize:
                        return FootprintSize;
                    case ObjectPaletteDefaults_FieldIndex.ScalePercent:
                        return ScalePercent;
                    case ObjectPaletteDefaults_FieldIndex.ScaleVariance:
                        return ScaleVariance;
                    case ObjectPaletteDefaults_FieldIndex.AngleXDegrees:
                        return AngleXDegrees;
                    case ObjectPaletteDefaults_FieldIndex.AngleXVariance:
                        return AngleXVariance;
                    case ObjectPaletteDefaults_FieldIndex.AngleYDegrees:
                        return AngleYDegrees;
                    case ObjectPaletteDefaults_FieldIndex.AngleYVariance:
                        return AngleYVariance;
                    case ObjectPaletteDefaults_FieldIndex.AngleZDegrees:
                        return AngleZDegrees;
                    case ObjectPaletteDefaults_FieldIndex.AngleZVariance:
                        return AngleZVariance;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercent:
                        return SlopePercent;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercentVariance:
                        return SlopePercentVariance;
                    case ObjectPaletteDefaults_FieldIndex.Density:
                        return Density;
                    case ObjectPaletteDefaults_FieldIndex.FrequencyPercent:
                        return FrequencyPercent;
                    case ObjectPaletteDefaults_FieldIndex.SlopeLimit:
                        return SlopeLimit;
                    case ObjectPaletteDefaults_FieldIndex.DistanceBelowWater:
                        return DistanceBelowWater;
                    case ObjectPaletteDefaults_FieldIndex.DistanceAboveWater:
                        return DistanceAboveWater;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectPaletteDefaults_FieldIndex enu = (ObjectPaletteDefaults_FieldIndex)index;
                switch (enu)
                {
                    case ObjectPaletteDefaults_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SinkMeters:
                        this.SinkMeters = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SinkVariance:
                        this.SinkVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.XYOffsetVariance:
                        this.XYOffsetVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.FootprintSize:
                        this.FootprintSize = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.ScalePercent:
                        this.ScalePercent = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.ScaleVariance:
                        this.ScaleVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleXDegrees:
                        this.AngleXDegrees = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleXVariance:
                        this.AngleXVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleYDegrees:
                        this.AngleYDegrees = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleYVariance:
                        this.AngleYVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleZDegrees:
                        this.AngleZDegrees = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleZVariance:
                        this.AngleZVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercent:
                        this.SlopePercent = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercentVariance:
                        this.SlopePercentVariance = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.FrequencyPercent:
                        this.FrequencyPercent = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopeLimit:
                        this.SlopeLimit = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.DistanceBelowWater:
                        this.DistanceBelowWater = ex;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.DistanceAboveWater:
                        this.DistanceAboveWater = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectPaletteDefaults_FieldIndex enu = (ObjectPaletteDefaults_FieldIndex)index;
                switch (enu)
                {
                    case ObjectPaletteDefaults_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SinkMeters:
                        this.SinkMeters = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SinkVariance:
                        this.SinkVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.XYOffsetVariance:
                        this.XYOffsetVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.FootprintSize:
                        this.FootprintSize = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.ScalePercent:
                        this.ScalePercent = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.ScaleVariance:
                        this.ScaleVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleXDegrees:
                        this.AngleXDegrees = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleXVariance:
                        this.AngleXVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleYDegrees:
                        this.AngleYDegrees = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleYVariance:
                        this.AngleYVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleZDegrees:
                        this.AngleZDegrees = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.AngleZVariance:
                        this.AngleZVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercent:
                        this.SlopePercent = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopePercentVariance:
                        this.SlopePercentVariance = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.FrequencyPercent:
                        this.FrequencyPercent = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.SlopeLimit:
                        this.SlopeLimit = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.DistanceBelowWater:
                        this.DistanceBelowWater = (Exception?)obj;
                        break;
                    case ObjectPaletteDefaults_FieldIndex.DistanceAboveWater:
                        this.DistanceAboveWater = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (SinkMeters != null) return true;
                if (SinkVariance != null) return true;
                if (XYOffsetVariance != null) return true;
                if (FootprintSize != null) return true;
                if (ScalePercent != null) return true;
                if (ScaleVariance != null) return true;
                if (AngleXDegrees != null) return true;
                if (AngleXVariance != null) return true;
                if (AngleYDegrees != null) return true;
                if (AngleYVariance != null) return true;
                if (AngleZDegrees != null) return true;
                if (AngleZVariance != null) return true;
                if (SlopePercent != null) return true;
                if (SlopePercentVariance != null) return true;
                if (Density != null) return true;
                if (FrequencyPercent != null) return true;
                if (SlopeLimit != null) return true;
                if (DistanceBelowWater != null) return true;
                if (DistanceAboveWater != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(SinkMeters, "SinkMeters");
                }
                {
                    sb.AppendItem(SinkVariance, "SinkVariance");
                }
                {
                    sb.AppendItem(XYOffsetVariance, "XYOffsetVariance");
                }
                {
                    sb.AppendItem(FootprintSize, "FootprintSize");
                }
                {
                    sb.AppendItem(ScalePercent, "ScalePercent");
                }
                {
                    sb.AppendItem(ScaleVariance, "ScaleVariance");
                }
                {
                    sb.AppendItem(AngleXDegrees, "AngleXDegrees");
                }
                {
                    sb.AppendItem(AngleXVariance, "AngleXVariance");
                }
                {
                    sb.AppendItem(AngleYDegrees, "AngleYDegrees");
                }
                {
                    sb.AppendItem(AngleYVariance, "AngleYVariance");
                }
                {
                    sb.AppendItem(AngleZDegrees, "AngleZDegrees");
                }
                {
                    sb.AppendItem(AngleZVariance, "AngleZVariance");
                }
                {
                    sb.AppendItem(SlopePercent, "SlopePercent");
                }
                {
                    sb.AppendItem(SlopePercentVariance, "SlopePercentVariance");
                }
                {
                    sb.AppendItem(Density, "Density");
                }
                {
                    sb.AppendItem(FrequencyPercent, "FrequencyPercent");
                }
                {
                    sb.AppendItem(SlopeLimit, "SlopeLimit");
                }
                {
                    sb.AppendItem(DistanceBelowWater, "DistanceBelowWater");
                }
                {
                    sb.AppendItem(DistanceAboveWater, "DistanceAboveWater");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.SinkMeters = this.SinkMeters.Combine(rhs.SinkMeters);
                ret.SinkVariance = this.SinkVariance.Combine(rhs.SinkVariance);
                ret.XYOffsetVariance = this.XYOffsetVariance.Combine(rhs.XYOffsetVariance);
                ret.FootprintSize = this.FootprintSize.Combine(rhs.FootprintSize);
                ret.ScalePercent = this.ScalePercent.Combine(rhs.ScalePercent);
                ret.ScaleVariance = this.ScaleVariance.Combine(rhs.ScaleVariance);
                ret.AngleXDegrees = this.AngleXDegrees.Combine(rhs.AngleXDegrees);
                ret.AngleXVariance = this.AngleXVariance.Combine(rhs.AngleXVariance);
                ret.AngleYDegrees = this.AngleYDegrees.Combine(rhs.AngleYDegrees);
                ret.AngleYVariance = this.AngleYVariance.Combine(rhs.AngleYVariance);
                ret.AngleZDegrees = this.AngleZDegrees.Combine(rhs.AngleZDegrees);
                ret.AngleZVariance = this.AngleZVariance.Combine(rhs.AngleZVariance);
                ret.SlopePercent = this.SlopePercent.Combine(rhs.SlopePercent);
                ret.SlopePercentVariance = this.SlopePercentVariance.Combine(rhs.SlopePercentVariance);
                ret.Density = this.Density.Combine(rhs.Density);
                ret.FrequencyPercent = this.FrequencyPercent.Combine(rhs.FrequencyPercent);
                ret.SlopeLimit = this.SlopeLimit.Combine(rhs.SlopeLimit);
                ret.DistanceBelowWater = this.DistanceBelowWater.Combine(rhs.DistanceBelowWater);
                ret.DistanceAboveWater = this.DistanceAboveWater.Combine(rhs.DistanceAboveWater);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool SinkMeters;
            public bool SinkVariance;
            public bool XYOffsetVariance;
            public bool FootprintSize;
            public bool ScalePercent;
            public bool ScaleVariance;
            public bool AngleXDegrees;
            public bool AngleXVariance;
            public bool AngleYDegrees;
            public bool AngleYVariance;
            public bool AngleZDegrees;
            public bool AngleZVariance;
            public bool SlopePercent;
            public bool SlopePercentVariance;
            public bool Density;
            public bool FrequencyPercent;
            public bool SlopeLimit;
            public bool DistanceBelowWater;
            public bool DistanceAboveWater;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.SinkMeters = defaultOn;
                this.SinkVariance = defaultOn;
                this.XYOffsetVariance = defaultOn;
                this.FootprintSize = defaultOn;
                this.ScalePercent = defaultOn;
                this.ScaleVariance = defaultOn;
                this.AngleXDegrees = defaultOn;
                this.AngleXVariance = defaultOn;
                this.AngleYDegrees = defaultOn;
                this.AngleYVariance = defaultOn;
                this.AngleZDegrees = defaultOn;
                this.AngleZVariance = defaultOn;
                this.SlopePercent = defaultOn;
                this.SlopePercentVariance = defaultOn;
                this.Density = defaultOn;
                this.FrequencyPercent = defaultOn;
                this.SlopeLimit = defaultOn;
                this.DistanceBelowWater = defaultOn;
                this.DistanceAboveWater = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((SinkMeters, null));
                ret.Add((SinkVariance, null));
                ret.Add((XYOffsetVariance, null));
                ret.Add((FootprintSize, null));
                ret.Add((ScalePercent, null));
                ret.Add((ScaleVariance, null));
                ret.Add((AngleXDegrees, null));
                ret.Add((AngleXVariance, null));
                ret.Add((AngleYDegrees, null));
                ret.Add((AngleYVariance, null));
                ret.Add((AngleZDegrees, null));
                ret.Add((AngleZVariance, null));
                ret.Add((SlopePercent, null));
                ret.Add((SlopePercentVariance, null));
                ret.Add((Density, null));
                ret.Add((FrequencyPercent, null));
                ret.Add((SlopeLimit, null));
                ret.Add((DistanceBelowWater, null));
                ret.Add((DistanceAboveWater, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectPaletteDefaultsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectPaletteDefaultsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ObjectPaletteDefaults CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectPaletteDefaults();
            ((ObjectPaletteDefaultsSetterCommon)((IObjectPaletteDefaultsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectPaletteDefaults item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectPaletteDefaultsSetterCommon)((IObjectPaletteDefaultsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectPaletteDefaults GetNew()
        {
            return new ObjectPaletteDefaults();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectPaletteDefaults :
        ILoquiObjectSetter<IObjectPaletteDefaults>,
        IObjectPaletteDefaultsGetter
    {
        new ObjectPaletteDefaults.Flag Flags { get; set; }
        new Single SinkMeters { get; set; }
        new Single SinkVariance { get; set; }
        new Single XYOffsetVariance { get; set; }
        new ObjectPaletteDefaults.FootprintSizes FootprintSize { get; set; }
        new Single ScalePercent { get; set; }
        new Single ScaleVariance { get; set; }
        new Single AngleXDegrees { get; set; }
        new Single AngleXVariance { get; set; }
        new Single AngleYDegrees { get; set; }
        new Single AngleYVariance { get; set; }
        new Single AngleZDegrees { get; set; }
        new Single AngleZVariance { get; set; }
        new Single SlopePercent { get; set; }
        new Single SlopePercentVariance { get; set; }
        new Single Density { get; set; }
        new Single FrequencyPercent { get; set; }
        new Single SlopeLimit { get; set; }
        new Single DistanceBelowWater { get; set; }
        new Single DistanceAboveWater { get; set; }
    }

    public partial interface IObjectPaletteDefaultsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IObjectPaletteDefaultsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ObjectPaletteDefaults_Registration.Instance;
        ObjectPaletteDefaults.Flag Flags { get; }
        Single SinkMeters { get; }
        Single SinkVariance { get; }
        Single XYOffsetVariance { get; }
        ObjectPaletteDefaults.FootprintSizes FootprintSize { get; }
        Single ScalePercent { get; }
        Single ScaleVariance { get; }
        Single AngleXDegrees { get; }
        Single AngleXVariance { get; }
        Single AngleYDegrees { get; }
        Single AngleYVariance { get; }
        Single AngleZDegrees { get; }
        Single AngleZVariance { get; }
        Single SlopePercent { get; }
        Single SlopePercentVariance { get; }
        Single Density { get; }
        Single FrequencyPercent { get; }
        Single SlopeLimit { get; }
        Single DistanceBelowWater { get; }
        Single DistanceAboveWater { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectPaletteDefaultsMixIn
    {
        public static void Clear(this IObjectPaletteDefaults item)
        {
            ((ObjectPaletteDefaultsSetterCommon)((IObjectPaletteDefaultsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectPaletteDefaults.Mask<bool> GetEqualsMask(
            this IObjectPaletteDefaultsGetter item,
            IObjectPaletteDefaultsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IObjectPaletteDefaultsGetter item,
            string? name = null,
            ObjectPaletteDefaults.Mask<bool>? printMask = null)
        {
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IObjectPaletteDefaultsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectPaletteDefaults.Mask<bool>? printMask = null)
        {
            ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectPaletteDefaultsGetter item,
            IObjectPaletteDefaultsGetter rhs,
            ObjectPaletteDefaults.TranslationMask? equalsMask = null)
        {
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectPaletteDefaults lhs,
            IObjectPaletteDefaultsGetter rhs)
        {
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectPaletteDefaults lhs,
            IObjectPaletteDefaultsGetter rhs,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IObjectPaletteDefaults lhs,
            IObjectPaletteDefaultsGetter rhs,
            out ObjectPaletteDefaults.ErrorMask errorMask,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectPaletteDefaults.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectPaletteDefaults lhs,
            IObjectPaletteDefaultsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectPaletteDefaults DeepCopy(
            this IObjectPaletteDefaultsGetter item,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            return ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectPaletteDefaults DeepCopy(
            this IObjectPaletteDefaultsGetter item,
            out ObjectPaletteDefaults.ErrorMask errorMask,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            return ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectPaletteDefaults DeepCopy(
            this IObjectPaletteDefaultsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectPaletteDefaults item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ObjectPaletteDefaultsSetterCommon)((IObjectPaletteDefaultsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ObjectPaletteDefaults_FieldIndex
    {
        Flags = 0,
        SinkMeters = 1,
        SinkVariance = 2,
        XYOffsetVariance = 3,
        FootprintSize = 4,
        ScalePercent = 5,
        ScaleVariance = 6,
        AngleXDegrees = 7,
        AngleXVariance = 8,
        AngleYDegrees = 9,
        AngleYVariance = 10,
        AngleZDegrees = 11,
        AngleZVariance = 12,
        SlopePercent = 13,
        SlopePercentVariance = 14,
        Density = 15,
        FrequencyPercent = 16,
        SlopeLimit = 17,
        DistanceBelowWater = 18,
        DistanceAboveWater = 19,
    }
    #endregion

    #region Registration
    internal partial class ObjectPaletteDefaults_Registration : ILoquiRegistration
    {
        public static readonly ObjectPaletteDefaults_Registration Instance = new ObjectPaletteDefaults_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(ObjectPaletteDefaults.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectPaletteDefaults.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectPaletteDefaults);

        public static readonly Type GetterType = typeof(IObjectPaletteDefaultsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectPaletteDefaults);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ObjectPaletteDefaults";

        public const string Name = "ObjectPaletteDefaults";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OPDS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.OPDS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectPaletteDefaultsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ObjectPaletteDefaultsSetterCommon
    {
        public static readonly ObjectPaletteDefaultsSetterCommon Instance = new ObjectPaletteDefaultsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectPaletteDefaults item)
        {
            ClearPartial();
            item.Flags = default(ObjectPaletteDefaults.Flag);
            item.SinkMeters = default(Single);
            item.SinkVariance = default(Single);
            item.XYOffsetVariance = default(Single);
            item.FootprintSize = default(ObjectPaletteDefaults.FootprintSizes);
            item.ScalePercent = default(Single);
            item.ScaleVariance = default(Single);
            item.AngleXDegrees = default(Single);
            item.AngleXVariance = default(Single);
            item.AngleYDegrees = default(Single);
            item.AngleYVariance = default(Single);
            item.AngleZDegrees = default(Single);
            item.AngleZVariance = default(Single);
            item.SlopePercent = default(Single);
            item.SlopePercentVariance = default(Single);
            item.Density = default(Single);
            item.FrequencyPercent = default(Single);
            item.SlopeLimit = default(Single);
            item.DistanceBelowWater = default(Single);
            item.DistanceAboveWater = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectPaletteDefaults obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectPaletteDefaults item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.OPDS),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectPaletteDefaultsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ObjectPaletteDefaultsCommon
    {
        public static readonly ObjectPaletteDefaultsCommon Instance = new ObjectPaletteDefaultsCommon();

        public ObjectPaletteDefaults.Mask<bool> GetEqualsMask(
            IObjectPaletteDefaultsGetter item,
            IObjectPaletteDefaultsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectPaletteDefaults.Mask<bool>(false);
            ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectPaletteDefaultsGetter item,
            IObjectPaletteDefaultsGetter rhs,
            ObjectPaletteDefaults.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.SinkMeters = item.SinkMeters.EqualsWithin(rhs.SinkMeters);
            ret.SinkVariance = item.SinkVariance.EqualsWithin(rhs.SinkVariance);
            ret.XYOffsetVariance = item.XYOffsetVariance.EqualsWithin(rhs.XYOffsetVariance);
            ret.FootprintSize = item.FootprintSize == rhs.FootprintSize;
            ret.ScalePercent = item.ScalePercent.EqualsWithin(rhs.ScalePercent);
            ret.ScaleVariance = item.ScaleVariance.EqualsWithin(rhs.ScaleVariance);
            ret.AngleXDegrees = item.AngleXDegrees.EqualsWithin(rhs.AngleXDegrees);
            ret.AngleXVariance = item.AngleXVariance.EqualsWithin(rhs.AngleXVariance);
            ret.AngleYDegrees = item.AngleYDegrees.EqualsWithin(rhs.AngleYDegrees);
            ret.AngleYVariance = item.AngleYVariance.EqualsWithin(rhs.AngleYVariance);
            ret.AngleZDegrees = item.AngleZDegrees.EqualsWithin(rhs.AngleZDegrees);
            ret.AngleZVariance = item.AngleZVariance.EqualsWithin(rhs.AngleZVariance);
            ret.SlopePercent = item.SlopePercent.EqualsWithin(rhs.SlopePercent);
            ret.SlopePercentVariance = item.SlopePercentVariance.EqualsWithin(rhs.SlopePercentVariance);
            ret.Density = item.Density.EqualsWithin(rhs.Density);
            ret.FrequencyPercent = item.FrequencyPercent.EqualsWithin(rhs.FrequencyPercent);
            ret.SlopeLimit = item.SlopeLimit.EqualsWithin(rhs.SlopeLimit);
            ret.DistanceBelowWater = item.DistanceBelowWater.EqualsWithin(rhs.DistanceBelowWater);
            ret.DistanceAboveWater = item.DistanceAboveWater.EqualsWithin(rhs.DistanceAboveWater);
        }
        
        public string Print(
            IObjectPaletteDefaultsGetter item,
            string? name = null,
            ObjectPaletteDefaults.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectPaletteDefaultsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectPaletteDefaults.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectPaletteDefaults =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectPaletteDefaults) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectPaletteDefaultsGetter item,
            StructuredStringBuilder sb,
            ObjectPaletteDefaults.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.SinkMeters ?? true)
            {
                sb.AppendItem(item.SinkMeters, "SinkMeters");
            }
            if (printMask?.SinkVariance ?? true)
            {
                sb.AppendItem(item.SinkVariance, "SinkVariance");
            }
            if (printMask?.XYOffsetVariance ?? true)
            {
                sb.AppendItem(item.XYOffsetVariance, "XYOffsetVariance");
            }
            if (printMask?.FootprintSize ?? true)
            {
                sb.AppendItem(item.FootprintSize, "FootprintSize");
            }
            if (printMask?.ScalePercent ?? true)
            {
                sb.AppendItem(item.ScalePercent, "ScalePercent");
            }
            if (printMask?.ScaleVariance ?? true)
            {
                sb.AppendItem(item.ScaleVariance, "ScaleVariance");
            }
            if (printMask?.AngleXDegrees ?? true)
            {
                sb.AppendItem(item.AngleXDegrees, "AngleXDegrees");
            }
            if (printMask?.AngleXVariance ?? true)
            {
                sb.AppendItem(item.AngleXVariance, "AngleXVariance");
            }
            if (printMask?.AngleYDegrees ?? true)
            {
                sb.AppendItem(item.AngleYDegrees, "AngleYDegrees");
            }
            if (printMask?.AngleYVariance ?? true)
            {
                sb.AppendItem(item.AngleYVariance, "AngleYVariance");
            }
            if (printMask?.AngleZDegrees ?? true)
            {
                sb.AppendItem(item.AngleZDegrees, "AngleZDegrees");
            }
            if (printMask?.AngleZVariance ?? true)
            {
                sb.AppendItem(item.AngleZVariance, "AngleZVariance");
            }
            if (printMask?.SlopePercent ?? true)
            {
                sb.AppendItem(item.SlopePercent, "SlopePercent");
            }
            if (printMask?.SlopePercentVariance ?? true)
            {
                sb.AppendItem(item.SlopePercentVariance, "SlopePercentVariance");
            }
            if (printMask?.Density ?? true)
            {
                sb.AppendItem(item.Density, "Density");
            }
            if (printMask?.FrequencyPercent ?? true)
            {
                sb.AppendItem(item.FrequencyPercent, "FrequencyPercent");
            }
            if (printMask?.SlopeLimit ?? true)
            {
                sb.AppendItem(item.SlopeLimit, "SlopeLimit");
            }
            if (printMask?.DistanceBelowWater ?? true)
            {
                sb.AppendItem(item.DistanceBelowWater, "DistanceBelowWater");
            }
            if (printMask?.DistanceAboveWater ?? true)
            {
                sb.AppendItem(item.DistanceAboveWater, "DistanceAboveWater");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectPaletteDefaultsGetter? lhs,
            IObjectPaletteDefaultsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SinkMeters) ?? true))
            {
                if (!lhs.SinkMeters.EqualsWithin(rhs.SinkMeters)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SinkVariance) ?? true))
            {
                if (!lhs.SinkVariance.EqualsWithin(rhs.SinkVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.XYOffsetVariance) ?? true))
            {
                if (!lhs.XYOffsetVariance.EqualsWithin(rhs.XYOffsetVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.FootprintSize) ?? true))
            {
                if (lhs.FootprintSize != rhs.FootprintSize) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.ScalePercent) ?? true))
            {
                if (!lhs.ScalePercent.EqualsWithin(rhs.ScalePercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.ScaleVariance) ?? true))
            {
                if (!lhs.ScaleVariance.EqualsWithin(rhs.ScaleVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleXDegrees) ?? true))
            {
                if (!lhs.AngleXDegrees.EqualsWithin(rhs.AngleXDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleXVariance) ?? true))
            {
                if (!lhs.AngleXVariance.EqualsWithin(rhs.AngleXVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleYDegrees) ?? true))
            {
                if (!lhs.AngleYDegrees.EqualsWithin(rhs.AngleYDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleYVariance) ?? true))
            {
                if (!lhs.AngleYVariance.EqualsWithin(rhs.AngleYVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleZDegrees) ?? true))
            {
                if (!lhs.AngleZDegrees.EqualsWithin(rhs.AngleZDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleZVariance) ?? true))
            {
                if (!lhs.AngleZVariance.EqualsWithin(rhs.AngleZVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopePercent) ?? true))
            {
                if (!lhs.SlopePercent.EqualsWithin(rhs.SlopePercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopePercentVariance) ?? true))
            {
                if (!lhs.SlopePercentVariance.EqualsWithin(rhs.SlopePercentVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.Density) ?? true))
            {
                if (!lhs.Density.EqualsWithin(rhs.Density)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.FrequencyPercent) ?? true))
            {
                if (!lhs.FrequencyPercent.EqualsWithin(rhs.FrequencyPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopeLimit) ?? true))
            {
                if (!lhs.SlopeLimit.EqualsWithin(rhs.SlopeLimit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.DistanceBelowWater) ?? true))
            {
                if (!lhs.DistanceBelowWater.EqualsWithin(rhs.DistanceBelowWater)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.DistanceAboveWater) ?? true))
            {
                if (!lhs.DistanceAboveWater.EqualsWithin(rhs.DistanceAboveWater)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectPaletteDefaultsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.SinkMeters);
            hash.Add(item.SinkVariance);
            hash.Add(item.XYOffsetVariance);
            hash.Add(item.FootprintSize);
            hash.Add(item.ScalePercent);
            hash.Add(item.ScaleVariance);
            hash.Add(item.AngleXDegrees);
            hash.Add(item.AngleXVariance);
            hash.Add(item.AngleYDegrees);
            hash.Add(item.AngleYVariance);
            hash.Add(item.AngleZDegrees);
            hash.Add(item.AngleZVariance);
            hash.Add(item.SlopePercent);
            hash.Add(item.SlopePercentVariance);
            hash.Add(item.Density);
            hash.Add(item.FrequencyPercent);
            hash.Add(item.SlopeLimit);
            hash.Add(item.DistanceBelowWater);
            hash.Add(item.DistanceAboveWater);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectPaletteDefaults.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectPaletteDefaultsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ObjectPaletteDefaultsSetterTranslationCommon
    {
        public static readonly ObjectPaletteDefaultsSetterTranslationCommon Instance = new ObjectPaletteDefaultsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectPaletteDefaults item,
            IObjectPaletteDefaultsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SinkMeters) ?? true))
            {
                item.SinkMeters = rhs.SinkMeters;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SinkVariance) ?? true))
            {
                item.SinkVariance = rhs.SinkVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.XYOffsetVariance) ?? true))
            {
                item.XYOffsetVariance = rhs.XYOffsetVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.FootprintSize) ?? true))
            {
                item.FootprintSize = rhs.FootprintSize;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.ScalePercent) ?? true))
            {
                item.ScalePercent = rhs.ScalePercent;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.ScaleVariance) ?? true))
            {
                item.ScaleVariance = rhs.ScaleVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleXDegrees) ?? true))
            {
                item.AngleXDegrees = rhs.AngleXDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleXVariance) ?? true))
            {
                item.AngleXVariance = rhs.AngleXVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleYDegrees) ?? true))
            {
                item.AngleYDegrees = rhs.AngleYDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleYVariance) ?? true))
            {
                item.AngleYVariance = rhs.AngleYVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleZDegrees) ?? true))
            {
                item.AngleZDegrees = rhs.AngleZDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.AngleZVariance) ?? true))
            {
                item.AngleZVariance = rhs.AngleZVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopePercent) ?? true))
            {
                item.SlopePercent = rhs.SlopePercent;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopePercentVariance) ?? true))
            {
                item.SlopePercentVariance = rhs.SlopePercentVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.FrequencyPercent) ?? true))
            {
                item.FrequencyPercent = rhs.FrequencyPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.SlopeLimit) ?? true))
            {
                item.SlopeLimit = rhs.SlopeLimit;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.DistanceBelowWater) ?? true))
            {
                item.DistanceBelowWater = rhs.DistanceBelowWater;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectPaletteDefaults_FieldIndex.DistanceAboveWater) ?? true))
            {
                item.DistanceAboveWater = rhs.DistanceAboveWater;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IObjectPaletteDefaults item,
            IObjectPaletteDefaultsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ObjectPaletteDefaults DeepCopy(
            IObjectPaletteDefaultsGetter item,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            ObjectPaletteDefaults ret = (ObjectPaletteDefaults)((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).GetNew();
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectPaletteDefaults DeepCopy(
            IObjectPaletteDefaultsGetter item,
            out ObjectPaletteDefaults.ErrorMask errorMask,
            ObjectPaletteDefaults.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectPaletteDefaults ret = (ObjectPaletteDefaults)((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).GetNew();
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectPaletteDefaults.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectPaletteDefaults DeepCopy(
            IObjectPaletteDefaultsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectPaletteDefaults ret = (ObjectPaletteDefaults)((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)item).CommonInstance()!).GetNew();
            ((ObjectPaletteDefaultsSetterTranslationCommon)((IObjectPaletteDefaultsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectPaletteDefaults
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectPaletteDefaults_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectPaletteDefaults_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectPaletteDefaultsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectPaletteDefaultsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectPaletteDefaultsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectPaletteDefaultsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectPaletteDefaultsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectPaletteDefaultsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ObjectPaletteDefaultsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ObjectPaletteDefaultsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IObjectPaletteDefaultsGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<ObjectPaletteDefaults.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SinkMeters);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SinkVariance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XYOffsetVariance);
            EnumBinaryTranslation<ObjectPaletteDefaults.FootprintSizes, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.FootprintSize,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ScalePercent);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ScaleVariance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleXDegrees,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleXVariance,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleYDegrees,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleYVariance,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleZDegrees,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AngleZVariance,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlopePercent);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlopePercentVariance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Density);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FrequencyPercent,
                divisor: null,
                multiplier: 100f);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlopeLimit,
                divisor: 57.295799255371094f,
                multiplier: null);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DistanceBelowWater);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DistanceAboveWater);
        }

        public void Write(
            MutagenWriter writer,
            IObjectPaletteDefaultsGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.OPDS),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IObjectPaletteDefaultsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectPaletteDefaultsBinaryCreateTranslation
    {
        public static readonly ObjectPaletteDefaultsBinaryCreateTranslation Instance = new ObjectPaletteDefaultsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IObjectPaletteDefaults item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<ObjectPaletteDefaults.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.SinkMeters = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SinkVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.XYOffsetVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FootprintSize = EnumBinaryTranslation<ObjectPaletteDefaults.FootprintSizes, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.ScalePercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ScaleVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AngleXDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.AngleXVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.AngleYDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.AngleYVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.AngleZDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.AngleZVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.SlopePercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlopePercentVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Density = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FrequencyPercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: null,
                divisor: 100f);
            item.SlopeLimit = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                multiplier: 57.295799255371094f,
                divisor: null);
            item.DistanceBelowWater = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DistanceAboveWater = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ObjectPaletteDefaultsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectPaletteDefaultsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectPaletteDefaultsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ObjectPaletteDefaultsBinaryOverlay :
        PluginBinaryOverlay,
        IObjectPaletteDefaultsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectPaletteDefaults_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectPaletteDefaults_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectPaletteDefaultsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectPaletteDefaultsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectPaletteDefaultsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IObjectPaletteDefaultsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IObjectPaletteDefaultsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectPaletteDefaultsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectPaletteDefaultsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ObjectPaletteDefaults.Flag Flags => (ObjectPaletteDefaults.Flag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public Single SinkMeters => _structData.Slice(0x4, 0x4).Float();
        public Single SinkVariance => _structData.Slice(0x8, 0x4).Float();
        public Single XYOffsetVariance => _structData.Slice(0xC, 0x4).Float();
        public ObjectPaletteDefaults.FootprintSizes FootprintSize => (ObjectPaletteDefaults.FootprintSizes)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x10, 0x4));
        public Single ScalePercent => _structData.Slice(0x14, 0x4).Float();
        public Single ScaleVariance => _structData.Slice(0x18, 0x4).Float();
        public Single AngleXDegrees => _structData.Slice(0x1C, 0x4).Float() * 57.2958f;
        public Single AngleXVariance => _structData.Slice(0x20, 0x4).Float() * 57.2958f;
        public Single AngleYDegrees => _structData.Slice(0x24, 0x4).Float() * 57.2958f;
        public Single AngleYVariance => _structData.Slice(0x28, 0x4).Float() * 57.2958f;
        public Single AngleZDegrees => _structData.Slice(0x2C, 0x4).Float() * 57.2958f;
        public Single AngleZVariance => _structData.Slice(0x30, 0x4).Float() * 57.2958f;
        public Single SlopePercent => _structData.Slice(0x34, 0x4).Float();
        public Single SlopePercentVariance => _structData.Slice(0x38, 0x4).Float();
        public Single Density => _structData.Slice(0x3C, 0x4).Float();
        public Single FrequencyPercent => _structData.Slice(0x40, 0x4).Float() / 100f;
        public Single SlopeLimit => _structData.Slice(0x44, 0x4).Float() * 57.2958f;
        public Single DistanceBelowWater => _structData.Slice(0x48, 0x4).Float();
        public Single DistanceAboveWater => _structData.Slice(0x4C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectPaletteDefaultsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectPaletteDefaultsGetter ObjectPaletteDefaultsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x50,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new ObjectPaletteDefaultsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x50 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IObjectPaletteDefaultsGetter ObjectPaletteDefaultsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectPaletteDefaultsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectPaletteDefaultsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectPaletteDefaultsGetter rhs) return false;
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectPaletteDefaultsGetter? obj)
        {
            return ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectPaletteDefaultsCommon)((IObjectPaletteDefaultsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

