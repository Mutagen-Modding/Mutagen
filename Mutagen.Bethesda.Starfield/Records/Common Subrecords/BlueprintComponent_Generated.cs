/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BlueprintComponent :
        AComponent,
        IBlueprintComponent,
        IEquatable<IBlueprintComponentGetter>,
        ILoquiObjectSetter<BlueprintComponent>
    {
        #region Ctor
        public BlueprintComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BlueprintComponentItem>? _Items;
        public ExtendedList<BlueprintComponentItem>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBlueprintComponentItemGetter>? IBlueprintComponentGetter.Items => _Items;
        #endregion

        #endregion
        #region BODSRows
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BlueprintComponentBODSRow> _BODSRows = new ExtendedList<BlueprintComponentBODSRow>();
        public ExtendedList<BlueprintComponentBODSRow> BODSRows
        {
            get => this._BODSRows;
            init => this._BODSRows = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBlueprintComponentBODSRowGetter> IBlueprintComponentGetter.BODSRows => _BODSRows;
        #endregion

        #endregion
        #region BLUF
        public Byte? BLUF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IBlueprintComponentGetter.BLUF => this.BLUF;
        #endregion
        #region NextPartID
        public UInt32? NextPartID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IBlueprintComponentGetter.NextPartID => this.NextPartID;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlueprintComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlueprintComponentGetter rhs) return false;
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlueprintComponentGetter? obj)
        {
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BlueprintComponentItem.Mask<TItem>?>>());
                this.BODSRows = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentBODSRow.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BlueprintComponentBODSRow.Mask<TItem>?>>());
                this.BLUF = initialValue;
                this.NextPartID = initialValue;
            }

            public Mask(
                TItem Items,
                TItem BODSRows,
                TItem BLUF,
                TItem NextPartID)
            : base()
            {
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentItem.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, BlueprintComponentItem.Mask<TItem>?>>());
                this.BODSRows = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentBODSRow.Mask<TItem>?>>?>(BODSRows, Enumerable.Empty<MaskItemIndexed<TItem, BlueprintComponentBODSRow.Mask<TItem>?>>());
                this.BLUF = BLUF;
                this.NextPartID = NextPartID;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentItem.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BlueprintComponentBODSRow.Mask<TItem>?>>?>? BODSRows;
            public TItem BLUF;
            public TItem NextPartID;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.BODSRows, rhs.BODSRows)) return false;
                if (!object.Equals(this.BLUF, rhs.BLUF)) return false;
                if (!object.Equals(this.NextPartID, rhs.NextPartID)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Items);
                hash.Add(this.BODSRows);
                hash.Add(this.BLUF);
                hash.Add(this.NextPartID);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BODSRows != null)
                {
                    if (!eval(this.BODSRows.Overall)) return false;
                    if (this.BODSRows.Specific != null)
                    {
                        foreach (var item in this.BODSRows.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.BLUF)) return false;
                if (!eval(this.NextPartID)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BODSRows != null)
                {
                    if (eval(this.BODSRows.Overall)) return true;
                    if (this.BODSRows.Specific != null)
                    {
                        foreach (var item in this.BODSRows.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.BLUF)) return true;
                if (eval(this.NextPartID)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BlueprintComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BlueprintComponentItem.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, BlueprintComponentItem.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BlueprintComponentItem.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, BlueprintComponentItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BlueprintComponentItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (BODSRows != null)
                {
                    obj.BODSRows = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BlueprintComponentBODSRow.Mask<R>?>>?>(eval(this.BODSRows.Overall), Enumerable.Empty<MaskItemIndexed<R, BlueprintComponentBODSRow.Mask<R>?>>());
                    if (BODSRows.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BlueprintComponentBODSRow.Mask<R>?>>();
                        obj.BODSRows.Specific = l;
                        foreach (var item in BODSRows.Specific)
                        {
                            MaskItemIndexed<R, BlueprintComponentBODSRow.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BlueprintComponentBODSRow.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BLUF = eval(this.BLUF);
                obj.NextPartID = eval(this.NextPartID);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BlueprintComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BlueprintComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BlueprintComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.BODSRows?.Overall ?? true)
                        && BODSRows is {} BODSRowsItem)
                    {
                        sb.AppendLine("BODSRows =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BODSRowsItem.Overall);
                            if (BODSRowsItem.Specific != null)
                            {
                                foreach (var subItem in BODSRowsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BLUF ?? true)
                    {
                        sb.AppendItem(BLUF, "BLUF");
                    }
                    if (printMask?.NextPartID ?? true)
                    {
                        sb.AppendItem(NextPartID, "NextPartID");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentItem.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentBODSRow.ErrorMask?>>?>? BODSRows;
            public Exception? BLUF;
            public Exception? NextPartID;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                BlueprintComponent_FieldIndex enu = (BlueprintComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponent_FieldIndex.Items:
                        return Items;
                    case BlueprintComponent_FieldIndex.BODSRows:
                        return BODSRows;
                    case BlueprintComponent_FieldIndex.BLUF:
                        return BLUF;
                    case BlueprintComponent_FieldIndex.NextPartID:
                        return NextPartID;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                BlueprintComponent_FieldIndex enu = (BlueprintComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponent_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentItem.ErrorMask?>>?>(ex, null);
                        break;
                    case BlueprintComponent_FieldIndex.BODSRows:
                        this.BODSRows = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentBODSRow.ErrorMask?>>?>(ex, null);
                        break;
                    case BlueprintComponent_FieldIndex.BLUF:
                        this.BLUF = ex;
                        break;
                    case BlueprintComponent_FieldIndex.NextPartID:
                        this.NextPartID = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                BlueprintComponent_FieldIndex enu = (BlueprintComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponent_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentItem.ErrorMask?>>?>)obj;
                        break;
                    case BlueprintComponent_FieldIndex.BODSRows:
                        this.BODSRows = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentBODSRow.ErrorMask?>>?>)obj;
                        break;
                    case BlueprintComponent_FieldIndex.BLUF:
                        this.BLUF = (Exception?)obj;
                        break;
                    case BlueprintComponent_FieldIndex.NextPartID:
                        this.NextPartID = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Items != null) return true;
                if (BODSRows != null) return true;
                if (BLUF != null) return true;
                if (NextPartID != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (BODSRows is {} BODSRowsItem)
                {
                    sb.AppendLine("BODSRows =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BODSRowsItem.Overall);
                        if (BODSRowsItem.Specific != null)
                        {
                            foreach (var subItem in BODSRowsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BLUF, "BLUF");
                }
                {
                    sb.AppendItem(NextPartID, "NextPartID");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.BODSRows = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BlueprintComponentBODSRow.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.BODSRows?.Overall, rhs.BODSRows?.Overall), Noggog.ExceptionExt.Combine(this.BODSRows?.Specific, rhs.BODSRows?.Specific));
                ret.BLUF = this.BLUF.Combine(rhs.BLUF);
                ret.NextPartID = this.NextPartID.Combine(rhs.NextPartID);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public BlueprintComponentItem.TranslationMask? Items;
            public BlueprintComponentBODSRow.TranslationMask? BODSRows;
            public bool BLUF;
            public bool NextPartID;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.BLUF = defaultOn;
                this.NextPartID = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((BODSRows == null ? DefaultOn : !BODSRows.GetCrystal().CopyNothing, BODSRows?.GetCrystal()));
                ret.Add((BLUF, null));
                ret.Add((NextPartID, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BlueprintComponentCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BlueprintComponentSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BlueprintComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlueprintComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static BlueprintComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BlueprintComponent();
            ((BlueprintComponentSetterCommon)((IBlueprintComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BlueprintComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BlueprintComponentSetterCommon)((IBlueprintComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new BlueprintComponent GetNew()
        {
            return new BlueprintComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IBlueprintComponent :
        IAComponent,
        IBlueprintComponentGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBlueprintComponent>
    {
        new ExtendedList<BlueprintComponentItem>? Items { get; set; }
        new ExtendedList<BlueprintComponentBODSRow> BODSRows { get; }
        new Byte? BLUF { get; set; }
        new UInt32? NextPartID { get; set; }
    }

    public partial interface IBlueprintComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBlueprintComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => BlueprintComponent_Registration.Instance;
        IReadOnlyList<IBlueprintComponentItemGetter>? Items { get; }
        IReadOnlyList<IBlueprintComponentBODSRowGetter> BODSRows { get; }
        Byte? BLUF { get; }
        UInt32? NextPartID { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BlueprintComponentMixIn
    {
        public static void Clear(this IBlueprintComponent item)
        {
            ((BlueprintComponentSetterCommon)((IBlueprintComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BlueprintComponent.Mask<bool> GetEqualsMask(
            this IBlueprintComponentGetter item,
            IBlueprintComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBlueprintComponentGetter item,
            string? name = null,
            BlueprintComponent.Mask<bool>? printMask = null)
        {
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBlueprintComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlueprintComponent.Mask<bool>? printMask = null)
        {
            ((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBlueprintComponentGetter item,
            IBlueprintComponentGetter rhs,
            BlueprintComponent.TranslationMask? equalsMask = null)
        {
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBlueprintComponent lhs,
            IBlueprintComponentGetter rhs,
            out BlueprintComponent.ErrorMask errorMask,
            BlueprintComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BlueprintComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBlueprintComponent lhs,
            IBlueprintComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BlueprintComponent DeepCopy(
            this IBlueprintComponentGetter item,
            BlueprintComponent.TranslationMask? copyMask = null)
        {
            return ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BlueprintComponent DeepCopy(
            this IBlueprintComponentGetter item,
            out BlueprintComponent.ErrorMask errorMask,
            BlueprintComponent.TranslationMask? copyMask = null)
        {
            return ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BlueprintComponent DeepCopy(
            this IBlueprintComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBlueprintComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BlueprintComponentSetterCommon)((IBlueprintComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BlueprintComponent_FieldIndex
    {
        Items = 0,
        BODSRows = 1,
        BLUF = 2,
        NextPartID = 3,
    }
    #endregion

    #region Registration
    internal partial class BlueprintComponent_Registration : ILoquiRegistration
    {
        public static readonly BlueprintComponent_Registration Instance = new BlueprintComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(BlueprintComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BlueprintComponent.ErrorMask);

        public static readonly Type ClassType = typeof(BlueprintComponent);

        public static readonly Type GetterType = typeof(IBlueprintComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBlueprintComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BlueprintComponent";

        public const string Name = "BlueprintComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.BUO4,
                RecordTypes.BODM,
                RecordTypes.BODC,
                RecordTypes.BODS,
                RecordTypes.BODV,
                RecordTypes.BLUF,
                RecordTypes.BOID);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BlueprintComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BlueprintComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly BlueprintComponentSetterCommon Instance = new BlueprintComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBlueprintComponent item)
        {
            ClearPartial();
            item.Items = null;
            item.BODSRows.Clear();
            item.BLUF = default;
            item.NextPartID = default;
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IBlueprintComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBlueprintComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Items?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBlueprintComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BlueprintComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (BlueprintComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BlueprintComponentCommon : AComponentCommon
    {
        public new static readonly BlueprintComponentCommon Instance = new BlueprintComponentCommon();

        public BlueprintComponent.Mask<bool> GetEqualsMask(
            IBlueprintComponentGetter item,
            IBlueprintComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BlueprintComponent.Mask<bool>(false);
            ((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBlueprintComponentGetter item,
            IBlueprintComponentGetter rhs,
            BlueprintComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BODSRows = item.BODSRows.CollectionEqualsHelper(
                rhs.BODSRows,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BLUF = item.BLUF == rhs.BLUF;
            ret.NextPartID = item.NextPartID == rhs.NextPartID;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBlueprintComponentGetter item,
            string? name = null,
            BlueprintComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBlueprintComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlueprintComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BlueprintComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (BlueprintComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBlueprintComponentGetter item,
            StructuredStringBuilder sb,
            BlueprintComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.BODSRows?.Overall ?? true)
            {
                sb.AppendLine("BODSRows =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.BODSRows)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BLUF ?? true)
                && item.BLUF is {} BLUFItem)
            {
                sb.AppendItem(BLUFItem, "BLUF");
            }
            if ((printMask?.NextPartID ?? true)
                && item.NextPartID is {} NextPartIDItem)
            {
                sb.AppendItem(NextPartIDItem, "NextPartID");
            }
        }
        
        public static BlueprintComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBlueprintComponentGetter? lhs,
            IBlueprintComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((BlueprintComponentItemCommon)((IBlueprintComponentItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)BlueprintComponent_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.BODSRows) ?? true))
            {
                if (!lhs.BODSRows.SequenceEqual(rhs.BODSRows, (l, r) => ((BlueprintComponentBODSRowCommon)((IBlueprintComponentBODSRowGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)BlueprintComponent_FieldIndex.BODSRows)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.BLUF) ?? true))
            {
                if (lhs.BLUF != rhs.BLUF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.NextPartID) ?? true))
            {
                if (lhs.NextPartID != rhs.NextPartID) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBlueprintComponentGetter?)lhs,
                rhs: rhs as IBlueprintComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBlueprintComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Items);
            hash.Add(item.BODSRows);
            if (item.BLUF is {} BLUFitem)
            {
                hash.Add(BLUFitem);
            }
            if (item.NextPartID is {} NextPartIDitem)
            {
                hash.Add(NextPartIDitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IBlueprintComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return BlueprintComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBlueprintComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BlueprintComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly BlueprintComponentSetterTranslationCommon Instance = new BlueprintComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBlueprintComponent item,
            IBlueprintComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)BlueprintComponent_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<BlueprintComponentItem>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.BODSRows) ?? true))
            {
                errorMask?.PushIndex((int)BlueprintComponent_FieldIndex.BODSRows);
                try
                {
                    item.BODSRows.SetTo(
                        rhs.BODSRows
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.BLUF) ?? true))
            {
                item.BLUF = rhs.BLUF;
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponent_FieldIndex.NextPartID) ?? true))
            {
                item.NextPartID = rhs.NextPartID;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBlueprintComponent item,
            IBlueprintComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBlueprintComponent)item,
                rhs: (IBlueprintComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public BlueprintComponent DeepCopy(
            IBlueprintComponentGetter item,
            BlueprintComponent.TranslationMask? copyMask = null)
        {
            BlueprintComponent ret = (BlueprintComponent)((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BlueprintComponent DeepCopy(
            IBlueprintComponentGetter item,
            out BlueprintComponent.ErrorMask errorMask,
            BlueprintComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BlueprintComponent ret = (BlueprintComponent)((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BlueprintComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BlueprintComponent DeepCopy(
            IBlueprintComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BlueprintComponent ret = (BlueprintComponent)((BlueprintComponentCommon)((IBlueprintComponentGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentSetterTranslationCommon)((IBlueprintComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BlueprintComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlueprintComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BlueprintComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BlueprintComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BlueprintComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BlueprintComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BlueprintComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BlueprintComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBlueprintComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBlueprintComponentItemGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                recordType: translationParams.ConvertToCustom(RecordTypes.BUO4),
                transl: (MutagenWriter subWriter, IBlueprintComponentItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BlueprintComponentItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBlueprintComponentBODSRowGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.BODSRows,
                counterType: RecordTypes.BODM,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IBlueprintComponentBODSRowGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BlueprintComponentBODSRowBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BLUF,
                header: translationParams.ConvertToCustom(RecordTypes.BLUF));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NextPartID,
                header: translationParams.ConvertToCustom(RecordTypes.BOID));
        }

        public void Write(
            MutagenWriter writer,
            IBlueprintComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBlueprintComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBlueprintComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BlueprintComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly BlueprintComponentBinaryCreateTranslation Instance = new BlueprintComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBlueprintComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BUO4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BlueprintComponentItem>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: BlueprintComponentItem.TryCreateFromBinary)
                        .CastExtendedList<BlueprintComponentItem>();
                    return (int)BlueprintComponent_FieldIndex.Items;
                }
                case RecordTypeInts.BODM:
                {
                    item.BODSRows.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BlueprintComponentBODSRow>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.BODM,
                            triggeringRecord: BlueprintComponentBODSRow_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: BlueprintComponentBODSRow.TryCreateFromBinary));
                    return (int)BlueprintComponent_FieldIndex.BODSRows;
                }
                case RecordTypeInts.BLUF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BLUF = frame.ReadUInt8();
                    return (int)BlueprintComponent_FieldIndex.BLUF;
                }
                case RecordTypeInts.BOID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NextPartID = frame.ReadUInt32();
                    return (int)BlueprintComponent_FieldIndex.NextPartID;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BlueprintComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BlueprintComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IBlueprintComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlueprintComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BlueprintComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BlueprintComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BlueprintComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BlueprintComponentCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BlueprintComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlueprintComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IReadOnlyList<IBlueprintComponentItemGetter>? Items { get; private set; }
        public IReadOnlyList<IBlueprintComponentBODSRowGetter> BODSRows { get; private set; } = [];
        #region BLUF
        private int? _BLUFLocation;
        public Byte? BLUF => _BLUFLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BLUFLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region NextPartID
        private int? _NextPartIDLocation;
        public UInt32? NextPartID => _NextPartIDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NextPartIDLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BlueprintComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBlueprintComponentGetter BlueprintComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BlueprintComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBlueprintComponentGetter BlueprintComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BlueprintComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BUO4:
                {
                    this.Items = BinaryOverlayList.FactoryByStartIndexWithTrigger<IBlueprintComponentItemGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 36,
                        getter: (s, p) => BlueprintComponentItemBinaryOverlay.BlueprintComponentItemFactory(s, p));
                    return (int)BlueprintComponent_FieldIndex.Items;
                }
                case RecordTypeInts.BODM:
                {
                    this.BODSRows = BinaryOverlayList.FactoryByCountPerItem<IBlueprintComponentBODSRowGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: BlueprintComponentBODSRow_Registration.TriggerSpecs,
                        countType: RecordTypes.BODM,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => BlueprintComponentBODSRowBinaryOverlay.BlueprintComponentBODSRowFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)BlueprintComponent_FieldIndex.BODSRows;
                }
                case RecordTypeInts.BLUF:
                {
                    _BLUFLocation = (stream.Position - offset);
                    return (int)BlueprintComponent_FieldIndex.BLUF;
                }
                case RecordTypeInts.BOID:
                {
                    _NextPartIDLocation = (stream.Position - offset);
                    return (int)BlueprintComponent_FieldIndex.NextPartID;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlueprintComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlueprintComponentGetter rhs) return false;
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlueprintComponentGetter? obj)
        {
            return ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlueprintComponentCommon)((IBlueprintComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

