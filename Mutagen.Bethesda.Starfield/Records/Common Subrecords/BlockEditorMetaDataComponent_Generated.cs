/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BlockEditorMetaDataComponent :
        AComponent,
        IBlockEditorMetaDataComponent,
        IEquatable<IBlockEditorMetaDataComponentGetter>,
        ILoquiObjectSetter<BlockEditorMetaDataComponent>
    {
        #region Ctor
        public BlockEditorMetaDataComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UnknownString1
        public String UnknownString1 { get; set; } = string.Empty;
        #endregion
        #region UnknownByte
        public Byte UnknownByte { get; set; } = default(Byte);
        #endregion
        #region UnknownString2
        public String UnknownString2 { get; set; } = string.Empty;
        #endregion
        #region UnknownString3
        public String UnknownString3 { get; set; } = string.Empty;
        #endregion
        #region UnknownInts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Int32> _UnknownInts = new ExtendedList<Int32>();
        public ExtendedList<Int32> UnknownInts
        {
            get => this._UnknownInts;
            init => this._UnknownInts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int32> IBlockEditorMetaDataComponentGetter.UnknownInts => _UnknownInts;
        #endregion

        #endregion
        #region UnknownInt1
        public Int32 UnknownInt1 { get; set; } = default(Int32);
        #endregion
        #region UnknownInt2
        public Int32 UnknownInt2 { get; set; } = default(Int32);
        #endregion
        #region UnknownInt3
        public Int32 UnknownInt3 { get; set; } = default(Int32);
        #endregion
        #region UnknownInt4
        public Int32 UnknownInt4 { get; set; } = default(Int32);
        #endregion
        #region UnknownEnding
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _UnknownEnding = new byte[0];
        public MemorySlice<Byte> UnknownEnding
        {
            get => _UnknownEnding;
            set => this._UnknownEnding = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IBlockEditorMetaDataComponentGetter.UnknownEnding => this.UnknownEnding;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlockEditorMetaDataComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlockEditorMetaDataComponentGetter rhs) return false;
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlockEditorMetaDataComponentGetter? obj)
        {
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.UnknownString1 = initialValue;
                this.UnknownByte = initialValue;
                this.UnknownString2 = initialValue;
                this.UnknownString3 = initialValue;
                this.UnknownInts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnknownInt1 = initialValue;
                this.UnknownInt2 = initialValue;
                this.UnknownInt3 = initialValue;
                this.UnknownInt4 = initialValue;
                this.UnknownEnding = initialValue;
            }

            public Mask(
                TItem UnknownString1,
                TItem UnknownByte,
                TItem UnknownString2,
                TItem UnknownString3,
                TItem UnknownInts,
                TItem UnknownInt1,
                TItem UnknownInt2,
                TItem UnknownInt3,
                TItem UnknownInt4,
                TItem UnknownEnding)
            : base()
            {
                this.UnknownString1 = UnknownString1;
                this.UnknownByte = UnknownByte;
                this.UnknownString2 = UnknownString2;
                this.UnknownString3 = UnknownString3;
                this.UnknownInts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(UnknownInts, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnknownInt1 = UnknownInt1;
                this.UnknownInt2 = UnknownInt2;
                this.UnknownInt3 = UnknownInt3;
                this.UnknownInt4 = UnknownInt4;
                this.UnknownEnding = UnknownEnding;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem UnknownString1;
            public TItem UnknownByte;
            public TItem UnknownString2;
            public TItem UnknownString3;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? UnknownInts;
            public TItem UnknownInt1;
            public TItem UnknownInt2;
            public TItem UnknownInt3;
            public TItem UnknownInt4;
            public TItem UnknownEnding;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.UnknownString1, rhs.UnknownString1)) return false;
                if (!object.Equals(this.UnknownByte, rhs.UnknownByte)) return false;
                if (!object.Equals(this.UnknownString2, rhs.UnknownString2)) return false;
                if (!object.Equals(this.UnknownString3, rhs.UnknownString3)) return false;
                if (!object.Equals(this.UnknownInts, rhs.UnknownInts)) return false;
                if (!object.Equals(this.UnknownInt1, rhs.UnknownInt1)) return false;
                if (!object.Equals(this.UnknownInt2, rhs.UnknownInt2)) return false;
                if (!object.Equals(this.UnknownInt3, rhs.UnknownInt3)) return false;
                if (!object.Equals(this.UnknownInt4, rhs.UnknownInt4)) return false;
                if (!object.Equals(this.UnknownEnding, rhs.UnknownEnding)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.UnknownString1);
                hash.Add(this.UnknownByte);
                hash.Add(this.UnknownString2);
                hash.Add(this.UnknownString3);
                hash.Add(this.UnknownInts);
                hash.Add(this.UnknownInt1);
                hash.Add(this.UnknownInt2);
                hash.Add(this.UnknownInt3);
                hash.Add(this.UnknownInt4);
                hash.Add(this.UnknownEnding);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.UnknownString1)) return false;
                if (!eval(this.UnknownByte)) return false;
                if (!eval(this.UnknownString2)) return false;
                if (!eval(this.UnknownString3)) return false;
                if (this.UnknownInts != null)
                {
                    if (!eval(this.UnknownInts.Overall)) return false;
                    if (this.UnknownInts.Specific != null)
                    {
                        foreach (var item in this.UnknownInts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.UnknownInt1)) return false;
                if (!eval(this.UnknownInt2)) return false;
                if (!eval(this.UnknownInt3)) return false;
                if (!eval(this.UnknownInt4)) return false;
                if (!eval(this.UnknownEnding)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.UnknownString1)) return true;
                if (eval(this.UnknownByte)) return true;
                if (eval(this.UnknownString2)) return true;
                if (eval(this.UnknownString3)) return true;
                if (this.UnknownInts != null)
                {
                    if (eval(this.UnknownInts.Overall)) return true;
                    if (this.UnknownInts.Specific != null)
                    {
                        foreach (var item in this.UnknownInts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.UnknownInt1)) return true;
                if (eval(this.UnknownInt2)) return true;
                if (eval(this.UnknownInt3)) return true;
                if (eval(this.UnknownInt4)) return true;
                if (eval(this.UnknownEnding)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BlockEditorMetaDataComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.UnknownString1 = eval(this.UnknownString1);
                obj.UnknownByte = eval(this.UnknownByte);
                obj.UnknownString2 = eval(this.UnknownString2);
                obj.UnknownString3 = eval(this.UnknownString3);
                if (UnknownInts != null)
                {
                    obj.UnknownInts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.UnknownInts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (UnknownInts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.UnknownInts.Specific = l;
                        foreach (var item in UnknownInts.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.UnknownInt1 = eval(this.UnknownInt1);
                obj.UnknownInt2 = eval(this.UnknownInt2);
                obj.UnknownInt3 = eval(this.UnknownInt3);
                obj.UnknownInt4 = eval(this.UnknownInt4);
                obj.UnknownEnding = eval(this.UnknownEnding);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BlockEditorMetaDataComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.UnknownString1 ?? true)
                    {
                        sb.AppendItem(UnknownString1, "UnknownString1");
                    }
                    if (printMask?.UnknownByte ?? true)
                    {
                        sb.AppendItem(UnknownByte, "UnknownByte");
                    }
                    if (printMask?.UnknownString2 ?? true)
                    {
                        sb.AppendItem(UnknownString2, "UnknownString2");
                    }
                    if (printMask?.UnknownString3 ?? true)
                    {
                        sb.AppendItem(UnknownString3, "UnknownString3");
                    }
                    if ((printMask?.UnknownInts?.Overall ?? true)
                        && UnknownInts is {} UnknownIntsItem)
                    {
                        sb.AppendLine("UnknownInts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownIntsItem.Overall);
                            if (UnknownIntsItem.Specific != null)
                            {
                                foreach (var subItem in UnknownIntsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnknownInt1 ?? true)
                    {
                        sb.AppendItem(UnknownInt1, "UnknownInt1");
                    }
                    if (printMask?.UnknownInt2 ?? true)
                    {
                        sb.AppendItem(UnknownInt2, "UnknownInt2");
                    }
                    if (printMask?.UnknownInt3 ?? true)
                    {
                        sb.AppendItem(UnknownInt3, "UnknownInt3");
                    }
                    if (printMask?.UnknownInt4 ?? true)
                    {
                        sb.AppendItem(UnknownInt4, "UnknownInt4");
                    }
                    if (printMask?.UnknownEnding ?? true)
                    {
                        sb.AppendItem(UnknownEnding, "UnknownEnding");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? UnknownString1;
            public Exception? UnknownByte;
            public Exception? UnknownString2;
            public Exception? UnknownString3;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? UnknownInts;
            public Exception? UnknownInt1;
            public Exception? UnknownInt2;
            public Exception? UnknownInt3;
            public Exception? UnknownInt4;
            public Exception? UnknownEnding;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                BlockEditorMetaDataComponent_FieldIndex enu = (BlockEditorMetaDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString1:
                        return UnknownString1;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownByte:
                        return UnknownByte;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString2:
                        return UnknownString2;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString3:
                        return UnknownString3;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInts:
                        return UnknownInts;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt1:
                        return UnknownInt1;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt2:
                        return UnknownInt2;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt3:
                        return UnknownInt3;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt4:
                        return UnknownInt4;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownEnding:
                        return UnknownEnding;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                BlockEditorMetaDataComponent_FieldIndex enu = (BlockEditorMetaDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString1:
                        this.UnknownString1 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownByte:
                        this.UnknownByte = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString2:
                        this.UnknownString2 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString3:
                        this.UnknownString3 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInts:
                        this.UnknownInts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt1:
                        this.UnknownInt1 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt4:
                        this.UnknownInt4 = ex;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownEnding:
                        this.UnknownEnding = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                BlockEditorMetaDataComponent_FieldIndex enu = (BlockEditorMetaDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString1:
                        this.UnknownString1 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownByte:
                        this.UnknownByte = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString2:
                        this.UnknownString2 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownString3:
                        this.UnknownString3 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInts:
                        this.UnknownInts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt1:
                        this.UnknownInt1 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownInt4:
                        this.UnknownInt4 = (Exception?)obj;
                        break;
                    case BlockEditorMetaDataComponent_FieldIndex.UnknownEnding:
                        this.UnknownEnding = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (UnknownString1 != null) return true;
                if (UnknownByte != null) return true;
                if (UnknownString2 != null) return true;
                if (UnknownString3 != null) return true;
                if (UnknownInts != null) return true;
                if (UnknownInt1 != null) return true;
                if (UnknownInt2 != null) return true;
                if (UnknownInt3 != null) return true;
                if (UnknownInt4 != null) return true;
                if (UnknownEnding != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(UnknownString1, "UnknownString1");
                }
                {
                    sb.AppendItem(UnknownByte, "UnknownByte");
                }
                {
                    sb.AppendItem(UnknownString2, "UnknownString2");
                }
                {
                    sb.AppendItem(UnknownString3, "UnknownString3");
                }
                if (UnknownInts is {} UnknownIntsItem)
                {
                    sb.AppendLine("UnknownInts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownIntsItem.Overall);
                        if (UnknownIntsItem.Specific != null)
                        {
                            foreach (var subItem in UnknownIntsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnknownInt1, "UnknownInt1");
                }
                {
                    sb.AppendItem(UnknownInt2, "UnknownInt2");
                }
                {
                    sb.AppendItem(UnknownInt3, "UnknownInt3");
                }
                {
                    sb.AppendItem(UnknownInt4, "UnknownInt4");
                }
                {
                    sb.AppendItem(UnknownEnding, "UnknownEnding");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UnknownString1 = this.UnknownString1.Combine(rhs.UnknownString1);
                ret.UnknownByte = this.UnknownByte.Combine(rhs.UnknownByte);
                ret.UnknownString2 = this.UnknownString2.Combine(rhs.UnknownString2);
                ret.UnknownString3 = this.UnknownString3.Combine(rhs.UnknownString3);
                ret.UnknownInts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.UnknownInts?.Overall, rhs.UnknownInts?.Overall), Noggog.ExceptionExt.Combine(this.UnknownInts?.Specific, rhs.UnknownInts?.Specific));
                ret.UnknownInt1 = this.UnknownInt1.Combine(rhs.UnknownInt1);
                ret.UnknownInt2 = this.UnknownInt2.Combine(rhs.UnknownInt2);
                ret.UnknownInt3 = this.UnknownInt3.Combine(rhs.UnknownInt3);
                ret.UnknownInt4 = this.UnknownInt4.Combine(rhs.UnknownInt4);
                ret.UnknownEnding = this.UnknownEnding.Combine(rhs.UnknownEnding);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool UnknownString1;
            public bool UnknownByte;
            public bool UnknownString2;
            public bool UnknownString3;
            public bool UnknownInts;
            public bool UnknownInt1;
            public bool UnknownInt2;
            public bool UnknownInt3;
            public bool UnknownInt4;
            public bool UnknownEnding;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.UnknownString1 = defaultOn;
                this.UnknownByte = defaultOn;
                this.UnknownString2 = defaultOn;
                this.UnknownString3 = defaultOn;
                this.UnknownInts = defaultOn;
                this.UnknownInt1 = defaultOn;
                this.UnknownInt2 = defaultOn;
                this.UnknownInt3 = defaultOn;
                this.UnknownInt4 = defaultOn;
                this.UnknownEnding = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((UnknownString1, null));
                ret.Add((UnknownByte, null));
                ret.Add((UnknownString2, null));
                ret.Add((UnknownString3, null));
                ret.Add((UnknownInts, null));
                ret.Add((UnknownInt1, null));
                ret.Add((UnknownInt2, null));
                ret.Add((UnknownInt3, null));
                ret.Add((UnknownInt4, null));
                ret.Add((UnknownEnding, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BlockEditorMetaDataComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlockEditorMetaDataComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static BlockEditorMetaDataComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BlockEditorMetaDataComponent();
            ((BlockEditorMetaDataComponentSetterCommon)((IBlockEditorMetaDataComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BlockEditorMetaDataComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BlockEditorMetaDataComponentSetterCommon)((IBlockEditorMetaDataComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new BlockEditorMetaDataComponent GetNew()
        {
            return new BlockEditorMetaDataComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IBlockEditorMetaDataComponent :
        IAComponent,
        IBlockEditorMetaDataComponentGetter,
        ILoquiObjectSetter<IBlockEditorMetaDataComponent>
    {
        new String UnknownString1 { get; set; }
        new Byte UnknownByte { get; set; }
        new String UnknownString2 { get; set; }
        new String UnknownString3 { get; set; }
        new ExtendedList<Int32> UnknownInts { get; }
        new Int32 UnknownInt1 { get; set; }
        new Int32 UnknownInt2 { get; set; }
        new Int32 UnknownInt3 { get; set; }
        new Int32 UnknownInt4 { get; set; }
        new MemorySlice<Byte> UnknownEnding { get; set; }
    }

    public partial interface IBlockEditorMetaDataComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        ILoquiObject<IBlockEditorMetaDataComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => BlockEditorMetaDataComponent_Registration.Instance;
        String UnknownString1 { get; }
        Byte UnknownByte { get; }
        String UnknownString2 { get; }
        String UnknownString3 { get; }
        IReadOnlyList<Int32> UnknownInts { get; }
        Int32 UnknownInt1 { get; }
        Int32 UnknownInt2 { get; }
        Int32 UnknownInt3 { get; }
        Int32 UnknownInt4 { get; }
        ReadOnlyMemorySlice<Byte> UnknownEnding { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BlockEditorMetaDataComponentMixIn
    {
        public static void Clear(this IBlockEditorMetaDataComponent item)
        {
            ((BlockEditorMetaDataComponentSetterCommon)((IBlockEditorMetaDataComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BlockEditorMetaDataComponent.Mask<bool> GetEqualsMask(
            this IBlockEditorMetaDataComponentGetter item,
            IBlockEditorMetaDataComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBlockEditorMetaDataComponentGetter item,
            string? name = null,
            BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
        {
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBlockEditorMetaDataComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
        {
            ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBlockEditorMetaDataComponentGetter item,
            IBlockEditorMetaDataComponentGetter rhs,
            BlockEditorMetaDataComponent.TranslationMask? equalsMask = null)
        {
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBlockEditorMetaDataComponent lhs,
            IBlockEditorMetaDataComponentGetter rhs,
            out BlockEditorMetaDataComponent.ErrorMask errorMask,
            BlockEditorMetaDataComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BlockEditorMetaDataComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBlockEditorMetaDataComponent lhs,
            IBlockEditorMetaDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BlockEditorMetaDataComponent DeepCopy(
            this IBlockEditorMetaDataComponentGetter item,
            BlockEditorMetaDataComponent.TranslationMask? copyMask = null)
        {
            return ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BlockEditorMetaDataComponent DeepCopy(
            this IBlockEditorMetaDataComponentGetter item,
            out BlockEditorMetaDataComponent.ErrorMask errorMask,
            BlockEditorMetaDataComponent.TranslationMask? copyMask = null)
        {
            return ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BlockEditorMetaDataComponent DeepCopy(
            this IBlockEditorMetaDataComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBlockEditorMetaDataComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BlockEditorMetaDataComponentSetterCommon)((IBlockEditorMetaDataComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BlockEditorMetaDataComponent_FieldIndex
    {
        UnknownString1 = 0,
        UnknownByte = 1,
        UnknownString2 = 2,
        UnknownString3 = 3,
        UnknownInts = 4,
        UnknownInt1 = 5,
        UnknownInt2 = 6,
        UnknownInt3 = 7,
        UnknownInt4 = 8,
        UnknownEnding = 9,
    }
    #endregion

    #region Registration
    internal partial class BlockEditorMetaDataComponent_Registration : ILoquiRegistration
    {
        public static readonly BlockEditorMetaDataComponent_Registration Instance = new BlockEditorMetaDataComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(BlockEditorMetaDataComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BlockEditorMetaDataComponent.ErrorMask);

        public static readonly Type ClassType = typeof(BlockEditorMetaDataComponent);

        public static readonly Type GetterType = typeof(IBlockEditorMetaDataComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBlockEditorMetaDataComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BlockEditorMetaDataComponent";

        public const string Name = "BlockEditorMetaDataComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.DAT2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BlockEditorMetaDataComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BlockEditorMetaDataComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly BlockEditorMetaDataComponentSetterCommon Instance = new BlockEditorMetaDataComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBlockEditorMetaDataComponent item)
        {
            ClearPartial();
            item.UnknownString1 = string.Empty;
            item.UnknownByte = default(Byte);
            item.UnknownString2 = string.Empty;
            item.UnknownString3 = string.Empty;
            item.UnknownInts.Clear();
            item.UnknownInt1 = default(Int32);
            item.UnknownInt2 = default(Int32);
            item.UnknownInt3 = default(Int32);
            item.UnknownInt4 = default(Int32);
            item.UnknownEnding = Array.Empty<byte>();
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IBlockEditorMetaDataComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBlockEditorMetaDataComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBlockEditorMetaDataComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BlockEditorMetaDataComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (BlockEditorMetaDataComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BlockEditorMetaDataComponentCommon : AComponentCommon
    {
        public new static readonly BlockEditorMetaDataComponentCommon Instance = new BlockEditorMetaDataComponentCommon();

        public BlockEditorMetaDataComponent.Mask<bool> GetEqualsMask(
            IBlockEditorMetaDataComponentGetter item,
            IBlockEditorMetaDataComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BlockEditorMetaDataComponent.Mask<bool>(false);
            ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBlockEditorMetaDataComponentGetter item,
            IBlockEditorMetaDataComponentGetter rhs,
            BlockEditorMetaDataComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.UnknownString1 = string.Equals(item.UnknownString1, rhs.UnknownString1);
            ret.UnknownByte = item.UnknownByte == rhs.UnknownByte;
            ret.UnknownString2 = string.Equals(item.UnknownString2, rhs.UnknownString2);
            ret.UnknownString3 = string.Equals(item.UnknownString3, rhs.UnknownString3);
            ret.UnknownInts = item.UnknownInts.CollectionEqualsHelper(
                rhs.UnknownInts,
                (l, r) => l == r,
                include);
            ret.UnknownInt1 = item.UnknownInt1 == rhs.UnknownInt1;
            ret.UnknownInt2 = item.UnknownInt2 == rhs.UnknownInt2;
            ret.UnknownInt3 = item.UnknownInt3 == rhs.UnknownInt3;
            ret.UnknownInt4 = item.UnknownInt4 == rhs.UnknownInt4;
            ret.UnknownEnding = MemoryExtensions.SequenceEqual(item.UnknownEnding.Span, rhs.UnknownEnding.Span);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBlockEditorMetaDataComponentGetter item,
            string? name = null,
            BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBlockEditorMetaDataComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BlockEditorMetaDataComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (BlockEditorMetaDataComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBlockEditorMetaDataComponentGetter item,
            StructuredStringBuilder sb,
            BlockEditorMetaDataComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.UnknownString1 ?? true)
            {
                sb.AppendItem(item.UnknownString1, "UnknownString1");
            }
            if (printMask?.UnknownByte ?? true)
            {
                sb.AppendItem(item.UnknownByte, "UnknownByte");
            }
            if (printMask?.UnknownString2 ?? true)
            {
                sb.AppendItem(item.UnknownString2, "UnknownString2");
            }
            if (printMask?.UnknownString3 ?? true)
            {
                sb.AppendItem(item.UnknownString3, "UnknownString3");
            }
            if (printMask?.UnknownInts?.Overall ?? true)
            {
                sb.AppendLine("UnknownInts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.UnknownInts)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.UnknownInt1 ?? true)
            {
                sb.AppendItem(item.UnknownInt1, "UnknownInt1");
            }
            if (printMask?.UnknownInt2 ?? true)
            {
                sb.AppendItem(item.UnknownInt2, "UnknownInt2");
            }
            if (printMask?.UnknownInt3 ?? true)
            {
                sb.AppendItem(item.UnknownInt3, "UnknownInt3");
            }
            if (printMask?.UnknownInt4 ?? true)
            {
                sb.AppendItem(item.UnknownInt4, "UnknownInt4");
            }
            if (printMask?.UnknownEnding ?? true)
            {
                sb.AppendLine($"UnknownEnding => {SpanExt.ToHexString(item.UnknownEnding)}");
            }
        }
        
        public static BlockEditorMetaDataComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBlockEditorMetaDataComponentGetter? lhs,
            IBlockEditorMetaDataComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString1) ?? true))
            {
                if (!string.Equals(lhs.UnknownString1, rhs.UnknownString1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownByte) ?? true))
            {
                if (lhs.UnknownByte != rhs.UnknownByte) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString2) ?? true))
            {
                if (!string.Equals(lhs.UnknownString2, rhs.UnknownString2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString3) ?? true))
            {
                if (!string.Equals(lhs.UnknownString3, rhs.UnknownString3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInts) ?? true))
            {
                if (!lhs.UnknownInts.SequenceEqualNullable(rhs.UnknownInts)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt1) ?? true))
            {
                if (lhs.UnknownInt1 != rhs.UnknownInt1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt2) ?? true))
            {
                if (lhs.UnknownInt2 != rhs.UnknownInt2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt3) ?? true))
            {
                if (lhs.UnknownInt3 != rhs.UnknownInt3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt4) ?? true))
            {
                if (lhs.UnknownInt4 != rhs.UnknownInt4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownEnding) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.UnknownEnding.Span, rhs.UnknownEnding.Span)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBlockEditorMetaDataComponentGetter?)lhs,
                rhs: rhs as IBlockEditorMetaDataComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBlockEditorMetaDataComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.UnknownString1);
            hash.Add(item.UnknownByte);
            hash.Add(item.UnknownString2);
            hash.Add(item.UnknownString3);
            hash.Add(item.UnknownInts);
            hash.Add(item.UnknownInt1);
            hash.Add(item.UnknownInt2);
            hash.Add(item.UnknownInt3);
            hash.Add(item.UnknownInt4);
            hash.Add(item.UnknownEnding);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IBlockEditorMetaDataComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return BlockEditorMetaDataComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBlockEditorMetaDataComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BlockEditorMetaDataComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly BlockEditorMetaDataComponentSetterTranslationCommon Instance = new BlockEditorMetaDataComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBlockEditorMetaDataComponent item,
            IBlockEditorMetaDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString1) ?? true))
            {
                item.UnknownString1 = rhs.UnknownString1;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownByte) ?? true))
            {
                item.UnknownByte = rhs.UnknownByte;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString2) ?? true))
            {
                item.UnknownString2 = rhs.UnknownString2;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownString3) ?? true))
            {
                item.UnknownString3 = rhs.UnknownString3;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInts) ?? true))
            {
                errorMask?.PushIndex((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInts);
                try
                {
                    item.UnknownInts.SetTo(rhs.UnknownInts);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt1) ?? true))
            {
                item.UnknownInt1 = rhs.UnknownInt1;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt2) ?? true))
            {
                item.UnknownInt2 = rhs.UnknownInt2;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt3) ?? true))
            {
                item.UnknownInt3 = rhs.UnknownInt3;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownInt4) ?? true))
            {
                item.UnknownInt4 = rhs.UnknownInt4;
            }
            if ((copyMask?.GetShouldTranslate((int)BlockEditorMetaDataComponent_FieldIndex.UnknownEnding) ?? true))
            {
                item.UnknownEnding = rhs.UnknownEnding.ToArray();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBlockEditorMetaDataComponent item,
            IBlockEditorMetaDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBlockEditorMetaDataComponent)item,
                rhs: (IBlockEditorMetaDataComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public BlockEditorMetaDataComponent DeepCopy(
            IBlockEditorMetaDataComponentGetter item,
            BlockEditorMetaDataComponent.TranslationMask? copyMask = null)
        {
            BlockEditorMetaDataComponent ret = (BlockEditorMetaDataComponent)((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).GetNew();
            ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BlockEditorMetaDataComponent DeepCopy(
            IBlockEditorMetaDataComponentGetter item,
            out BlockEditorMetaDataComponent.ErrorMask errorMask,
            BlockEditorMetaDataComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BlockEditorMetaDataComponent ret = (BlockEditorMetaDataComponent)((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).GetNew();
            ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BlockEditorMetaDataComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BlockEditorMetaDataComponent DeepCopy(
            IBlockEditorMetaDataComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BlockEditorMetaDataComponent ret = (BlockEditorMetaDataComponent)((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)item).CommonInstance()!).GetNew();
            ((BlockEditorMetaDataComponentSetterTranslationCommon)((IBlockEditorMetaDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BlockEditorMetaDataComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlockEditorMetaDataComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BlockEditorMetaDataComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BlockEditorMetaDataComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BlockEditorMetaDataComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BlockEditorMetaDataComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BlockEditorMetaDataComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BlockEditorMetaDataComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBlockEditorMetaDataComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(writer.MetaData.FormVersion!.Value switch
            {
                <= 558 => RecordTypes.DATA,
                _ => RecordTypes.DAT2
            }
            )))
            {
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UnknownString1,
                    binaryType: StringBinaryType.PrependLength);
                writer.Write(item.UnknownByte);
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UnknownString2,
                    binaryType: StringBinaryType.PrependLength);
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.UnknownString3,
                    binaryType: StringBinaryType.PrependLength);
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Write(
                    writer: writer,
                    items: item.UnknownInts,
                    countLengthLength: 4,
                    transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                writer.Write(item.UnknownInt1);
                writer.Write(item.UnknownInt2);
                writer.Write(item.UnknownInt3);
                writer.Write(item.UnknownInt4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownEnding);
            }
        }

        public void Write(
            MutagenWriter writer,
            IBlockEditorMetaDataComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBlockEditorMetaDataComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBlockEditorMetaDataComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BlockEditorMetaDataComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly BlockEditorMetaDataComponentBinaryCreateTranslation Instance = new BlockEditorMetaDataComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBlockEditorMetaDataComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA
                    when frame.MetaData.FormVersion <= 558:
                case RecordTypeInts.DAT2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.UnknownString1 = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLength,
                        parseWhole: true);
                    if (dataFrame.Remaining < 1) return null;
                    item.UnknownByte = dataFrame.ReadUInt8();
                    item.UnknownString2 = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLength,
                        parseWhole: true);
                    item.UnknownString3 = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLength,
                        parseWhole: true);
                    item.UnknownInts.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Parse(
                            amount: checked((int)frame.ReadUInt32()),
                            reader: frame,
                            transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt1 = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt2 = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt3 = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt4 = dataFrame.ReadInt32();
                    item.UnknownEnding = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)BlockEditorMetaDataComponent_FieldIndex.UnknownEnding;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BlockEditorMetaDataComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BlockEditorMetaDataComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IBlockEditorMetaDataComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlockEditorMetaDataComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BlockEditorMetaDataComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BlockEditorMetaDataComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BlockEditorMetaDataComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BlockEditorMetaDataComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlockEditorMetaDataComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _DAT2Location;
        #region UnknownString1
        private int _UnknownString1Location => _DAT2Location!.Value.Min;
        private bool _UnknownString1_IsSet => _DAT2Location.HasValue;
        public String UnknownString1 => _UnknownString1_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_UnknownString1Location), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int UnknownString1EndingPos;
        #endregion
        #region UnknownByte
        private int _UnknownByteLocation => UnknownString1EndingPos;
        private bool _UnknownByte_IsSet => _DAT2Location.HasValue;
        public Byte UnknownByte => _UnknownByte_IsSet ? _recordData.Span[_UnknownByteLocation] : default;
        #endregion
        #region UnknownString2
        private int _UnknownString2Location => UnknownString1EndingPos + 0x1;
        private bool _UnknownString2_IsSet => _DAT2Location.HasValue;
        public String UnknownString2 => _UnknownString2_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_UnknownString2Location), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int UnknownString2EndingPos;
        #endregion
        #region UnknownString3
        private int _UnknownString3Location => UnknownString2EndingPos;
        private bool _UnknownString3_IsSet => _DAT2Location.HasValue;
        public String UnknownString3 => _UnknownString3_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_UnknownString3Location), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int UnknownString3EndingPos;
        #endregion
        #region UnknownInts
        public IReadOnlyList<Int32> UnknownInts => BinaryOverlayList.FactoryByCountLength<Int32>(_recordData.Slice(UnknownString3EndingPos), _package, 4, countLength: 4, (s, p) => BinaryPrimitives.ReadInt32LittleEndian(s));
        protected int UnknownIntsEndingPos;
        #endregion
        #region UnknownInt1
        private int _UnknownInt1Location => UnknownIntsEndingPos;
        private bool _UnknownInt1_IsSet => _DAT2Location.HasValue;
        public Int32 UnknownInt1 => _UnknownInt1_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownInt1Location, 4)) : default(Int32);
        #endregion
        #region UnknownInt2
        private int _UnknownInt2Location => UnknownIntsEndingPos + 0x4;
        private bool _UnknownInt2_IsSet => _DAT2Location.HasValue;
        public Int32 UnknownInt2 => _UnknownInt2_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownInt2Location, 4)) : default(Int32);
        #endregion
        #region UnknownInt3
        private int _UnknownInt3Location => UnknownIntsEndingPos + 0x8;
        private bool _UnknownInt3_IsSet => _DAT2Location.HasValue;
        public Int32 UnknownInt3 => _UnknownInt3_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownInt3Location, 4)) : default(Int32);
        #endregion
        #region UnknownInt4
        private int _UnknownInt4Location => UnknownIntsEndingPos + 0xC;
        private bool _UnknownInt4_IsSet => _DAT2Location.HasValue;
        public Int32 UnknownInt4 => _UnknownInt4_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownInt4Location, 4)) : default(Int32);
        #endregion
        #region UnknownEnding
        private int _UnknownEndingLocation => UnknownIntsEndingPos + 0x10;
        private bool _UnknownEnding_IsSet => _DAT2Location.HasValue;
        public ReadOnlyMemorySlice<Byte> UnknownEnding => _UnknownEnding_IsSet ? _recordData.Span.Slice(_UnknownEndingLocation, _DAT2Location!.Value.Max - _UnknownEndingLocation + 1).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        protected int UnknownEndingEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BlockEditorMetaDataComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBlockEditorMetaDataComponentGetter BlockEditorMetaDataComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BlockEditorMetaDataComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.UnknownString1EndingPos = ret._DAT2Location!.Value.Min + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret._DAT2Location!.Value.Min)) + 4;
            ret.UnknownString2EndingPos = ret.UnknownString1EndingPos + 0x1 + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret.UnknownString1EndingPos + 0x1)) + 4;
            ret.UnknownString3EndingPos = ret.UnknownString2EndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret.UnknownString2EndingPos)) + 4;
            ret.UnknownIntsEndingPos = ret.UnknownString3EndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret.UnknownString3EndingPos)) * 4 + 4;
            return ret;
        }

        public static IBlockEditorMetaDataComponentGetter BlockEditorMetaDataComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BlockEditorMetaDataComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA
                    when this._package.FormVersion!.FormVersion <= 558:
                case RecordTypeInts.DAT2:
                {
                    _DAT2Location = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)BlockEditorMetaDataComponent_FieldIndex.UnknownEnding;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlockEditorMetaDataComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlockEditorMetaDataComponentGetter rhs) return false;
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlockEditorMetaDataComponentGetter? obj)
        {
            return ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlockEditorMetaDataComponentCommon)((IBlockEditorMetaDataComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

