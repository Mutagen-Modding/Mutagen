/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class HeadTracking :
        IEquatable<IHeadTrackingGetter>,
        IHeadTracking,
        ILoquiObjectSetter<HeadTracking>
    {
        #region Ctor
        public HeadTracking()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Int32>? _Aliases;
        public ExtendedList<Int32>? Aliases
        {
            get => this._Aliases;
            set => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Int32>? IHeadTrackingGetter.Aliases => _Aliases;
        #endregion

        #endregion
        #region ForceRotate
        public Boolean ForceRotate { get; set; } = default(Boolean);
        #endregion
        #region ForceRotateMustComplete
        public Boolean ForceRotateMustComplete { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadTrackingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHeadTrackingGetter rhs) return false;
            return ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadTrackingGetter? obj)
        {
            return ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Aliases = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ForceRotate = initialValue;
                this.ForceRotateMustComplete = initialValue;
            }

            public Mask(
                TItem Aliases,
                TItem ForceRotate,
                TItem ForceRotateMustComplete)
            {
                this.Aliases = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Aliases, Enumerable.Empty<(int Index, TItem Value)>());
                this.ForceRotate = ForceRotate;
                this.ForceRotateMustComplete = ForceRotateMustComplete;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Aliases;
            public TItem ForceRotate;
            public TItem ForceRotateMustComplete;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                if (!object.Equals(this.ForceRotate, rhs.ForceRotate)) return false;
                if (!object.Equals(this.ForceRotateMustComplete, rhs.ForceRotateMustComplete)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Aliases);
                hash.Add(this.ForceRotate);
                hash.Add(this.ForceRotateMustComplete);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ForceRotate)) return false;
                if (!eval(this.ForceRotateMustComplete)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ForceRotate)) return true;
                if (eval(this.ForceRotateMustComplete)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadTracking.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Aliases.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ForceRotate = eval(this.ForceRotate);
                obj.ForceRotateMustComplete = eval(this.ForceRotateMustComplete);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HeadTracking.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HeadTracking.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HeadTracking.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases is {} AliasesItem)
                    {
                        sb.AppendLine("Aliases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ForceRotate ?? true)
                    {
                        sb.AppendItem(ForceRotate, "ForceRotate");
                    }
                    if (printMask?.ForceRotateMustComplete ?? true)
                    {
                        sb.AppendItem(ForceRotateMustComplete, "ForceRotateMustComplete");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Aliases;
            public Exception? ForceRotate;
            public Exception? ForceRotateMustComplete;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HeadTracking_FieldIndex enu = (HeadTracking_FieldIndex)index;
                switch (enu)
                {
                    case HeadTracking_FieldIndex.Aliases:
                        return Aliases;
                    case HeadTracking_FieldIndex.ForceRotate:
                        return ForceRotate;
                    case HeadTracking_FieldIndex.ForceRotateMustComplete:
                        return ForceRotateMustComplete;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HeadTracking_FieldIndex enu = (HeadTracking_FieldIndex)index;
                switch (enu)
                {
                    case HeadTracking_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadTracking_FieldIndex.ForceRotate:
                        this.ForceRotate = ex;
                        break;
                    case HeadTracking_FieldIndex.ForceRotateMustComplete:
                        this.ForceRotateMustComplete = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HeadTracking_FieldIndex enu = (HeadTracking_FieldIndex)index;
                switch (enu)
                {
                    case HeadTracking_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadTracking_FieldIndex.ForceRotate:
                        this.ForceRotate = (Exception?)obj;
                        break;
                    case HeadTracking_FieldIndex.ForceRotateMustComplete:
                        this.ForceRotateMustComplete = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Aliases != null) return true;
                if (ForceRotate != null) return true;
                if (ForceRotateMustComplete != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                if (Aliases is {} AliasesItem)
                {
                    sb.AppendLine("Aliases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ForceRotate, "ForceRotate");
                }
                {
                    sb.AppendItem(ForceRotateMustComplete, "ForceRotateMustComplete");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Aliases = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), Noggog.ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                ret.ForceRotate = this.ForceRotate.Combine(rhs.ForceRotate);
                ret.ForceRotateMustComplete = this.ForceRotateMustComplete.Combine(rhs.ForceRotateMustComplete);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Aliases;
            public bool ForceRotate;
            public bool ForceRotateMustComplete;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Aliases = defaultOn;
                this.ForceRotate = defaultOn;
                this.ForceRotateMustComplete = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Aliases, null));
                ret.Add((ForceRotate, null));
                ret.Add((ForceRotateMustComplete, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadTrackingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadTrackingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static HeadTracking CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HeadTracking();
            ((HeadTrackingSetterCommon)((IHeadTrackingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HeadTracking item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HeadTrackingSetterCommon)((IHeadTrackingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HeadTracking GetNew()
        {
            return new HeadTracking();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadTracking :
        IHeadTrackingGetter,
        ILoquiObjectSetter<IHeadTracking>
    {
        new ExtendedList<Int32>? Aliases { get; set; }
        new Boolean ForceRotate { get; set; }
        new Boolean ForceRotateMustComplete { get; set; }
    }

    public partial interface IHeadTrackingGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IHeadTrackingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => HeadTracking_Registration.Instance;
        IReadOnlyList<Int32>? Aliases { get; }
        Boolean ForceRotate { get; }
        Boolean ForceRotateMustComplete { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HeadTrackingMixIn
    {
        public static void Clear(this IHeadTracking item)
        {
            ((HeadTrackingSetterCommon)((IHeadTrackingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadTracking.Mask<bool> GetEqualsMask(
            this IHeadTrackingGetter item,
            IHeadTrackingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHeadTrackingGetter item,
            string? name = null,
            HeadTracking.Mask<bool>? printMask = null)
        {
            return ((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHeadTrackingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadTracking.Mask<bool>? printMask = null)
        {
            ((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHeadTrackingGetter item,
            IHeadTrackingGetter rhs,
            HeadTracking.TranslationMask? equalsMask = null)
        {
            return ((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHeadTracking lhs,
            IHeadTrackingGetter rhs)
        {
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadTracking lhs,
            IHeadTrackingGetter rhs,
            HeadTracking.TranslationMask? copyMask = null)
        {
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadTracking lhs,
            IHeadTrackingGetter rhs,
            out HeadTracking.ErrorMask errorMask,
            HeadTracking.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HeadTracking.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadTracking lhs,
            IHeadTrackingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HeadTracking DeepCopy(
            this IHeadTrackingGetter item,
            HeadTracking.TranslationMask? copyMask = null)
        {
            return ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadTracking DeepCopy(
            this IHeadTrackingGetter item,
            out HeadTracking.ErrorMask errorMask,
            HeadTracking.TranslationMask? copyMask = null)
        {
            return ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadTracking DeepCopy(
            this IHeadTrackingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHeadTracking item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HeadTrackingSetterCommon)((IHeadTrackingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum HeadTracking_FieldIndex
    {
        Aliases = 0,
        ForceRotate = 1,
        ForceRotateMustComplete = 2,
    }
    #endregion

    #region Registration
    internal partial class HeadTracking_Registration : ILoquiRegistration
    {
        public static readonly HeadTracking_Registration Instance = new HeadTracking_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(HeadTracking.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadTracking.ErrorMask);

        public static readonly Type ClassType = typeof(HeadTracking);

        public static readonly Type GetterType = typeof(IHeadTrackingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadTracking);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.HeadTracking";

        public const string Name = "HeadTracking";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.HNAM);
            var triggers = RecordCollection.Factory(RecordTypes.HNAM);
            var all = RecordCollection.Factory(
                RecordTypes.HNAM,
                RecordTypes.HTID,
                RecordTypes.FNAM,
                RecordTypes.PNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HeadTrackingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HeadTrackingSetterCommon
    {
        public static readonly HeadTrackingSetterCommon Instance = new HeadTrackingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadTracking item)
        {
            ClearPartial();
            item.Aliases = null;
            item.ForceRotate = default(Boolean);
            item.ForceRotateMustComplete = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IHeadTracking obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHeadTracking item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame.ReadSubrecord(RecordTypes.HNAM);
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: HeadTrackingBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class HeadTrackingCommon
    {
        public static readonly HeadTrackingCommon Instance = new HeadTrackingCommon();

        public HeadTracking.Mask<bool> GetEqualsMask(
            IHeadTrackingGetter item,
            IHeadTrackingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadTracking.Mask<bool>(false);
            ((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadTrackingGetter item,
            IHeadTrackingGetter rhs,
            HeadTracking.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (l, r) => l == r,
                include);
            ret.ForceRotate = item.ForceRotate == rhs.ForceRotate;
            ret.ForceRotateMustComplete = item.ForceRotateMustComplete == rhs.ForceRotateMustComplete;
        }
        
        public string Print(
            IHeadTrackingGetter item,
            string? name = null,
            HeadTracking.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHeadTrackingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadTracking.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HeadTracking =>");
            }
            else
            {
                sb.AppendLine($"{name} (HeadTracking) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHeadTrackingGetter item,
            StructuredStringBuilder sb,
            HeadTracking.Mask<bool>? printMask = null)
        {
            if ((printMask?.Aliases?.Overall ?? true)
                && item.Aliases is {} AliasesItem)
            {
                sb.AppendLine("Aliases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AliasesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.ForceRotate ?? true)
            {
                sb.AppendItem(item.ForceRotate, "ForceRotate");
            }
            if (printMask?.ForceRotateMustComplete ?? true)
            {
                sb.AppendItem(item.ForceRotateMustComplete, "ForceRotateMustComplete");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadTrackingGetter? lhs,
            IHeadTrackingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.Aliases) ?? true))
            {
                if (!lhs.Aliases.SequenceEqualNullable(rhs.Aliases)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.ForceRotate) ?? true))
            {
                if (lhs.ForceRotate != rhs.ForceRotate) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.ForceRotateMustComplete) ?? true))
            {
                if (lhs.ForceRotateMustComplete != rhs.ForceRotateMustComplete) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IHeadTrackingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Aliases);
            hash.Add(item.ForceRotate);
            hash.Add(item.ForceRotateMustComplete);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HeadTracking.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHeadTrackingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class HeadTrackingSetterTranslationCommon
    {
        public static readonly HeadTrackingSetterTranslationCommon Instance = new HeadTrackingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHeadTracking item,
            IHeadTrackingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)HeadTracking_FieldIndex.Aliases);
                try
                {
                    if ((rhs.Aliases != null))
                    {
                        item.Aliases = 
                            rhs.Aliases
                            .ToExtendedList<Int32>();
                    }
                    else
                    {
                        item.Aliases = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.ForceRotate) ?? true))
            {
                item.ForceRotate = rhs.ForceRotate;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadTracking_FieldIndex.ForceRotateMustComplete) ?? true))
            {
                item.ForceRotateMustComplete = rhs.ForceRotateMustComplete;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IHeadTracking item,
            IHeadTrackingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public HeadTracking DeepCopy(
            IHeadTrackingGetter item,
            HeadTracking.TranslationMask? copyMask = null)
        {
            HeadTracking ret = (HeadTracking)((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).GetNew();
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HeadTracking DeepCopy(
            IHeadTrackingGetter item,
            out HeadTracking.ErrorMask errorMask,
            HeadTracking.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HeadTracking ret = (HeadTracking)((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).GetNew();
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HeadTracking.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HeadTracking DeepCopy(
            IHeadTrackingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadTracking ret = (HeadTracking)((HeadTrackingCommon)((IHeadTrackingGetter)item).CommonInstance()!).GetNew();
            ((HeadTrackingSetterTranslationCommon)((IHeadTrackingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class HeadTracking
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadTracking_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HeadTracking_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadTrackingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HeadTrackingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadTrackingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadTrackingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHeadTrackingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHeadTrackingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class HeadTrackingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly HeadTrackingBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IHeadTrackingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Write(
                writer: writer,
                items: item.Aliases,
                recordType: translationParams.ConvertToCustom(RecordTypes.HTID),
                transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.ForceRotate,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.ForceRotateMustComplete,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
        }

        public void Write(
            MutagenWriter writer,
            IHeadTrackingGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { } // Start Marker
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHeadTrackingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HeadTrackingBinaryCreateTranslation
    {
        public static readonly HeadTrackingBinaryCreateTranslation Instance = new HeadTrackingBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IHeadTracking item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HTID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Aliases = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int32>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        .CastExtendedList<Int32>();
                    return (int)HeadTracking_FieldIndex.Aliases;
                }
                case RecordTypeInts.FNAM:
                {
                    item.ForceRotate = true;
                    return (int)HeadTracking_FieldIndex.ForceRotate;
                }
                case RecordTypeInts.PNAM:
                {
                    item.ForceRotateMustComplete = true;
                    return (int)HeadTracking_FieldIndex.ForceRotateMustComplete;
                }
                case RecordTypeInts.HNAM: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class HeadTrackingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHeadTrackingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadTrackingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class HeadTrackingBinaryOverlay :
        PluginBinaryOverlay,
        IHeadTrackingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadTracking_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HeadTracking_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadTrackingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadTrackingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadTrackingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHeadTrackingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHeadTrackingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadTrackingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadTrackingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IReadOnlyList<Int32>? Aliases { get; private set; }
        #region ForceRotate
        private int? _ForceRotateLocation;
        public Boolean ForceRotate => _ForceRotateLocation.HasValue ? true : default(Boolean);
        #endregion
        #region ForceRotateMustComplete
        private int? _ForceRotateMustCompleteLocation;
        public Boolean ForceRotateMustComplete => _ForceRotateMustCompleteLocation.HasValue ? true : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HeadTrackingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHeadTrackingGetter HeadTrackingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream.ReadSubrecord(RecordTypes.HNAM);
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new HeadTrackingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IHeadTrackingGetter HeadTrackingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HeadTrackingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HTID:
                {
                    this.Aliases = BinaryOverlayList.FactoryByStartIndexWithTrigger<Int32>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => BinaryPrimitives.ReadInt32LittleEndian(s));
                    return (int)HeadTracking_FieldIndex.Aliases;
                }
                case RecordTypeInts.FNAM:
                {
                    _ForceRotateLocation = (stream.Position - offset);
                    return (int)HeadTracking_FieldIndex.ForceRotate;
                }
                case RecordTypeInts.PNAM:
                {
                    _ForceRotateMustCompleteLocation = (stream.Position - offset);
                    return (int)HeadTracking_FieldIndex.ForceRotateMustComplete;
                }
                case RecordTypeInts.HNAM: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadTrackingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHeadTrackingGetter rhs) return false;
            return ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadTrackingGetter? obj)
        {
            return ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadTrackingCommon)((IHeadTrackingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

