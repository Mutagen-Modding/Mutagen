/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ScriptFragment :
        IEquatable<IScriptFragmentGetter>,
        ILoquiObjectSetter<ScriptFragment>,
        IScriptFragment
    {
        #region Ctor
        public ScriptFragment()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ExtraBindDataVersion
        public static readonly Byte ExtraBindDataVersionDefault = 3;
        public Byte ExtraBindDataVersion { get; set; } = ExtraBindDataVersionDefault;
        #endregion
        #region ScriptName
        public String ScriptName { get; set; } = string.Empty;
        #endregion
        #region FragmentName
        public String FragmentName { get; set; } = string.Empty;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptFragmentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptFragmentGetter rhs) return false;
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptFragmentGetter? obj)
        {
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ExtraBindDataVersion = initialValue;
                this.ScriptName = initialValue;
                this.FragmentName = initialValue;
            }

            public Mask(
                TItem ExtraBindDataVersion,
                TItem ScriptName,
                TItem FragmentName)
            {
                this.ExtraBindDataVersion = ExtraBindDataVersion;
                this.ScriptName = ScriptName;
                this.FragmentName = FragmentName;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ExtraBindDataVersion;
            public TItem ScriptName;
            public TItem FragmentName;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ExtraBindDataVersion, rhs.ExtraBindDataVersion)) return false;
                if (!object.Equals(this.ScriptName, rhs.ScriptName)) return false;
                if (!object.Equals(this.FragmentName, rhs.FragmentName)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ExtraBindDataVersion);
                hash.Add(this.ScriptName);
                hash.Add(this.FragmentName);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ExtraBindDataVersion)) return false;
                if (!eval(this.ScriptName)) return false;
                if (!eval(this.FragmentName)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ExtraBindDataVersion)) return true;
                if (eval(this.ScriptName)) return true;
                if (eval(this.FragmentName)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptFragment.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ExtraBindDataVersion = eval(this.ExtraBindDataVersion);
                obj.ScriptName = eval(this.ScriptName);
                obj.FragmentName = eval(this.FragmentName);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ScriptFragment.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ScriptFragment.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ScriptFragment.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ExtraBindDataVersion ?? true)
                    {
                        sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                    }
                    if (printMask?.ScriptName ?? true)
                    {
                        sb.AppendItem(ScriptName, "ScriptName");
                    }
                    if (printMask?.FragmentName ?? true)
                    {
                        sb.AppendItem(FragmentName, "FragmentName");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ExtraBindDataVersion;
            public Exception? ScriptName;
            public Exception? FragmentName;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScriptFragment_FieldIndex enu = (ScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFragment_FieldIndex.ExtraBindDataVersion:
                        return ExtraBindDataVersion;
                    case ScriptFragment_FieldIndex.ScriptName:
                        return ScriptName;
                    case ScriptFragment_FieldIndex.FragmentName:
                        return FragmentName;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScriptFragment_FieldIndex enu = (ScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFragment_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = ex;
                        break;
                    case ScriptFragment_FieldIndex.ScriptName:
                        this.ScriptName = ex;
                        break;
                    case ScriptFragment_FieldIndex.FragmentName:
                        this.FragmentName = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScriptFragment_FieldIndex enu = (ScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFragment_FieldIndex.ExtraBindDataVersion:
                        this.ExtraBindDataVersion = (Exception?)obj;
                        break;
                    case ScriptFragment_FieldIndex.ScriptName:
                        this.ScriptName = (Exception?)obj;
                        break;
                    case ScriptFragment_FieldIndex.FragmentName:
                        this.FragmentName = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ExtraBindDataVersion != null) return true;
                if (ScriptName != null) return true;
                if (FragmentName != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ExtraBindDataVersion, "ExtraBindDataVersion");
                }
                {
                    sb.AppendItem(ScriptName, "ScriptName");
                }
                {
                    sb.AppendItem(FragmentName, "FragmentName");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ExtraBindDataVersion = this.ExtraBindDataVersion.Combine(rhs.ExtraBindDataVersion);
                ret.ScriptName = this.ScriptName.Combine(rhs.ScriptName);
                ret.FragmentName = this.FragmentName.Combine(rhs.FragmentName);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ExtraBindDataVersion;
            public bool ScriptName;
            public bool FragmentName;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ExtraBindDataVersion = defaultOn;
                this.ScriptName = defaultOn;
                this.FragmentName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ExtraBindDataVersion, null));
                ret.Add((ScriptName, null));
                ret.Add((FragmentName, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFragmentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFragmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ScriptFragment CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ScriptFragment();
            ((ScriptFragmentSetterCommon)((IScriptFragmentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptFragment item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ScriptFragmentSetterCommon)((IScriptFragmentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScriptFragment GetNew()
        {
            return new ScriptFragment();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptFragment :
        ILoquiObjectSetter<IScriptFragment>,
        IScriptFragmentGetter
    {
        new Byte ExtraBindDataVersion { get; set; }
        new String ScriptName { get; set; }
        new String FragmentName { get; set; }
    }

    public partial interface IScriptFragmentGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IScriptFragmentGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ScriptFragment_Registration.Instance;
        Byte ExtraBindDataVersion { get; }
        String ScriptName { get; }
        String FragmentName { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptFragmentMixIn
    {
        public static void Clear(this IScriptFragment item)
        {
            ((ScriptFragmentSetterCommon)((IScriptFragmentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptFragment.Mask<bool> GetEqualsMask(
            this IScriptFragmentGetter item,
            IScriptFragmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IScriptFragmentGetter item,
            string? name = null,
            ScriptFragment.Mask<bool>? printMask = null)
        {
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IScriptFragmentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptFragment.Mask<bool>? printMask = null)
        {
            ((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptFragmentGetter item,
            IScriptFragmentGetter rhs,
            ScriptFragment.TranslationMask? equalsMask = null)
        {
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptFragment lhs,
            IScriptFragmentGetter rhs)
        {
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptFragment lhs,
            IScriptFragmentGetter rhs,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptFragment lhs,
            IScriptFragmentGetter rhs,
            out ScriptFragment.ErrorMask errorMask,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptFragment.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptFragment lhs,
            IScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptFragment DeepCopy(
            this IScriptFragmentGetter item,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            return ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptFragment DeepCopy(
            this IScriptFragmentGetter item,
            out ScriptFragment.ErrorMask errorMask,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            return ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptFragment DeepCopy(
            this IScriptFragmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptFragment item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ScriptFragmentSetterCommon)((IScriptFragmentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ScriptFragment_FieldIndex
    {
        ExtraBindDataVersion = 0,
        ScriptName = 1,
        FragmentName = 2,
    }
    #endregion

    #region Registration
    internal partial class ScriptFragment_Registration : ILoquiRegistration
    {
        public static readonly ScriptFragment_Registration Instance = new ScriptFragment_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ScriptFragment.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptFragment.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptFragment);

        public static readonly Type GetterType = typeof(IScriptFragmentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptFragment);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ScriptFragment";

        public const string Name = "ScriptFragment";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ScriptFragmentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ScriptFragmentSetterCommon
    {
        public static readonly ScriptFragmentSetterCommon Instance = new ScriptFragmentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptFragment item)
        {
            ClearPartial();
            item.ExtraBindDataVersion = ScriptFragment.ExtraBindDataVersionDefault;
            item.ScriptName = string.Empty;
            item.FragmentName = string.Empty;
        }
        
        #region Mutagen
        public void RemapLinks(IScriptFragment obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptFragment item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ScriptFragmentBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ScriptFragmentCommon
    {
        public static readonly ScriptFragmentCommon Instance = new ScriptFragmentCommon();

        public ScriptFragment.Mask<bool> GetEqualsMask(
            IScriptFragmentGetter item,
            IScriptFragmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptFragment.Mask<bool>(false);
            ((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptFragmentGetter item,
            IScriptFragmentGetter rhs,
            ScriptFragment.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ExtraBindDataVersion = item.ExtraBindDataVersion == rhs.ExtraBindDataVersion;
            ret.ScriptName = string.Equals(item.ScriptName, rhs.ScriptName);
            ret.FragmentName = string.Equals(item.FragmentName, rhs.FragmentName);
        }
        
        public string Print(
            IScriptFragmentGetter item,
            string? name = null,
            ScriptFragment.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IScriptFragmentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptFragment.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ScriptFragment =>");
            }
            else
            {
                sb.AppendLine($"{name} (ScriptFragment) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IScriptFragmentGetter item,
            StructuredStringBuilder sb,
            ScriptFragment.Mask<bool>? printMask = null)
        {
            if (printMask?.ExtraBindDataVersion ?? true)
            {
                sb.AppendItem(item.ExtraBindDataVersion, "ExtraBindDataVersion");
            }
            if (printMask?.ScriptName ?? true)
            {
                sb.AppendItem(item.ScriptName, "ScriptName");
            }
            if (printMask?.FragmentName ?? true)
            {
                sb.AppendItem(item.FragmentName, "FragmentName");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptFragmentGetter? lhs,
            IScriptFragmentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                if (lhs.ExtraBindDataVersion != rhs.ExtraBindDataVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.ScriptName) ?? true))
            {
                if (!string.Equals(lhs.ScriptName, rhs.ScriptName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.FragmentName) ?? true))
            {
                if (!string.Equals(lhs.FragmentName, rhs.FragmentName)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IScriptFragmentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ExtraBindDataVersion);
            hash.Add(item.ScriptName);
            hash.Add(item.FragmentName);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScriptFragment.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IScriptFragmentGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ScriptFragmentSetterTranslationCommon
    {
        public static readonly ScriptFragmentSetterTranslationCommon Instance = new ScriptFragmentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptFragment item,
            IScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.ExtraBindDataVersion) ?? true))
            {
                item.ExtraBindDataVersion = rhs.ExtraBindDataVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.ScriptName) ?? true))
            {
                item.ScriptName = rhs.ScriptName;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFragment_FieldIndex.FragmentName) ?? true))
            {
                item.FragmentName = rhs.FragmentName;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IScriptFragment item,
            IScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ScriptFragment DeepCopy(
            IScriptFragmentGetter item,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            ScriptFragment ret = (ScriptFragment)((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptFragment DeepCopy(
            IScriptFragmentGetter item,
            out ScriptFragment.ErrorMask errorMask,
            ScriptFragment.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptFragment ret = (ScriptFragment)((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptFragment.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptFragment DeepCopy(
            IScriptFragmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptFragment ret = (ScriptFragment)((ScriptFragmentCommon)((IScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((ScriptFragmentSetterTranslationCommon)((IScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ScriptFragment
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFragment_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptFragment_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFragmentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScriptFragmentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFragmentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFragmentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptFragmentGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScriptFragmentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ScriptFragmentBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ScriptFragmentBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IScriptFragmentGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.ExtraBindDataVersion);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptName,
                binaryType: StringBinaryType.PrependLengthUShort);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FragmentName,
                binaryType: StringBinaryType.PrependLengthUShort);
        }

        public void Write(
            MutagenWriter writer,
            IScriptFragmentGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IScriptFragmentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ScriptFragmentBinaryCreateTranslation
    {
        public static readonly ScriptFragmentBinaryCreateTranslation Instance = new ScriptFragmentBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptFragment item,
            MutagenFrame frame)
        {
            item.ExtraBindDataVersion = frame.ReadUInt8();
            item.ScriptName = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthUShort,
                parseWhole: true);
            item.FragmentName = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthUShort,
                parseWhole: true);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ScriptFragmentBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptFragmentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFragmentBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ScriptFragmentBinaryOverlay :
        PluginBinaryOverlay,
        IScriptFragmentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFragment_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptFragment_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFragmentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFragmentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFragmentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScriptFragmentGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScriptFragmentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFragmentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFragmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte ExtraBindDataVersion => _structData.Span[0x0];
        #region ScriptName
        public String ScriptName => BinaryStringUtility.ParsePrependedString(_structData.Slice(0x1), lengthLength: 2, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int ScriptNameEndingPos;
        #endregion
        #region FragmentName
        public String FragmentName => BinaryStringUtility.ParsePrependedString(_structData.Slice(ScriptNameEndingPos), lengthLength: 2, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int FragmentNameEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptFragmentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void ScriptFragmentParseEndingPositions(
            ScriptFragmentBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.ScriptNameEndingPos = 0x1 + BinaryPrimitives.ReadUInt16LittleEndian(ret._structData.Slice(0x1)) + 2;
            ret.FragmentNameEndingPos = ret.ScriptNameEndingPos + BinaryPrimitives.ReadUInt16LittleEndian(ret._structData.Slice(ret.ScriptNameEndingPos)) + 2;
        }

        public static IScriptFragmentGetter ScriptFragmentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ScriptFragmentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ScriptFragmentParseEndingPositions(ret, package);
            stream.Position += ret.FragmentNameEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IScriptFragmentGetter ScriptFragmentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ScriptFragmentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptFragmentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptFragmentGetter rhs) return false;
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptFragmentGetter? obj)
        {
            return ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptFragmentCommon)((IScriptFragmentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

