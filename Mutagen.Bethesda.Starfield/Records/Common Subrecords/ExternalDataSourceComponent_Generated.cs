/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ExternalDataSourceComponent :
        AComponent,
        IEquatable<IExternalDataSourceComponentGetter>,
        IExternalDataSourceComponent,
        ILoquiObjectSetter<ExternalDataSourceComponent>
    {
        #region Ctor
        public ExternalDataSourceComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ExternalBaseTemplate
        private readonly IFormLinkNullable<IExternalBaseTemplateGetter> _ExternalBaseTemplate = new FormLinkNullable<IExternalBaseTemplateGetter>();
        public IFormLinkNullable<IExternalBaseTemplateGetter> ExternalBaseTemplate
        {
            get => _ExternalBaseTemplate;
            set => _ExternalBaseTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IExternalBaseTemplateGetter> IExternalDataSourceComponentGetter.ExternalBaseTemplate => this.ExternalBaseTemplate;
        #endregion
        #region Sources
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ExternalDataSource> _Sources = new ExtendedList<ExternalDataSource>();
        public ExtendedList<ExternalDataSource> Sources
        {
            get => this._Sources;
            init => this._Sources = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IExternalDataSourceGetter> IExternalDataSourceComponentGetter.Sources => _Sources;
        #endregion

        #endregion
        #region EXASs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _EXASs;
        public ExtendedList<String>? EXASs
        {
            get => this._EXASs;
            set => this._EXASs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? IExternalDataSourceComponentGetter.EXASs => _EXASs;
        #endregion

        #endregion
        #region EXBS
        public String EXBS { get; set; } = string.Empty;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ExternalDataSourceComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IExternalDataSourceComponentGetter rhs) return false;
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IExternalDataSourceComponentGetter? obj)
        {
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ExternalBaseTemplate = initialValue;
                this.Sources = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ExternalDataSource.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ExternalDataSource.Mask<TItem>?>>());
                this.EXASs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.EXBS = initialValue;
            }

            public Mask(
                TItem ExternalBaseTemplate,
                TItem Sources,
                TItem EXASs,
                TItem EXBS)
            : base()
            {
                this.ExternalBaseTemplate = ExternalBaseTemplate;
                this.Sources = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ExternalDataSource.Mask<TItem>?>>?>(Sources, Enumerable.Empty<MaskItemIndexed<TItem, ExternalDataSource.Mask<TItem>?>>());
                this.EXASs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(EXASs, Enumerable.Empty<(int Index, TItem Value)>());
                this.EXBS = EXBS;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ExternalBaseTemplate;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ExternalDataSource.Mask<TItem>?>>?>? Sources;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? EXASs;
            public TItem EXBS;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ExternalBaseTemplate, rhs.ExternalBaseTemplate)) return false;
                if (!object.Equals(this.Sources, rhs.Sources)) return false;
                if (!object.Equals(this.EXASs, rhs.EXASs)) return false;
                if (!object.Equals(this.EXBS, rhs.EXBS)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ExternalBaseTemplate);
                hash.Add(this.Sources);
                hash.Add(this.EXASs);
                hash.Add(this.EXBS);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ExternalBaseTemplate)) return false;
                if (this.Sources != null)
                {
                    if (!eval(this.Sources.Overall)) return false;
                    if (this.Sources.Specific != null)
                    {
                        foreach (var item in this.Sources.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EXASs != null)
                {
                    if (!eval(this.EXASs.Overall)) return false;
                    if (this.EXASs.Specific != null)
                    {
                        foreach (var item in this.EXASs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.EXBS)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ExternalBaseTemplate)) return true;
                if (this.Sources != null)
                {
                    if (eval(this.Sources.Overall)) return true;
                    if (this.Sources.Specific != null)
                    {
                        foreach (var item in this.Sources.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EXASs != null)
                {
                    if (eval(this.EXASs.Overall)) return true;
                    if (this.EXASs.Specific != null)
                    {
                        foreach (var item in this.EXASs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.EXBS)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ExternalDataSourceComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ExternalBaseTemplate = eval(this.ExternalBaseTemplate);
                if (Sources != null)
                {
                    obj.Sources = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ExternalDataSource.Mask<R>?>>?>(eval(this.Sources.Overall), Enumerable.Empty<MaskItemIndexed<R, ExternalDataSource.Mask<R>?>>());
                    if (Sources.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ExternalDataSource.Mask<R>?>>();
                        obj.Sources.Specific = l;
                        foreach (var item in Sources.Specific)
                        {
                            MaskItemIndexed<R, ExternalDataSource.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ExternalDataSource.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (EXASs != null)
                {
                    obj.EXASs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.EXASs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (EXASs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.EXASs.Specific = l;
                        foreach (var item in EXASs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.EXBS = eval(this.EXBS);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ExternalDataSourceComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ExternalDataSourceComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ExternalDataSourceComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ExternalBaseTemplate ?? true)
                    {
                        sb.AppendItem(ExternalBaseTemplate, "ExternalBaseTemplate");
                    }
                    if ((printMask?.Sources?.Overall ?? true)
                        && Sources is {} SourcesItem)
                    {
                        sb.AppendLine("Sources =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SourcesItem.Overall);
                            if (SourcesItem.Specific != null)
                            {
                                foreach (var subItem in SourcesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.EXASs?.Overall ?? true)
                        && EXASs is {} EXASsItem)
                    {
                        sb.AppendLine("EXASs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EXASsItem.Overall);
                            if (EXASsItem.Specific != null)
                            {
                                foreach (var subItem in EXASsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EXBS ?? true)
                    {
                        sb.AppendItem(EXBS, "EXBS");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ExternalBaseTemplate;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ExternalDataSource.ErrorMask?>>?>? Sources;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? EXASs;
            public Exception? EXBS;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ExternalDataSourceComponent_FieldIndex enu = (ExternalDataSourceComponent_FieldIndex)index;
                switch (enu)
                {
                    case ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate:
                        return ExternalBaseTemplate;
                    case ExternalDataSourceComponent_FieldIndex.Sources:
                        return Sources;
                    case ExternalDataSourceComponent_FieldIndex.EXASs:
                        return EXASs;
                    case ExternalDataSourceComponent_FieldIndex.EXBS:
                        return EXBS;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ExternalDataSourceComponent_FieldIndex enu = (ExternalDataSourceComponent_FieldIndex)index;
                switch (enu)
                {
                    case ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate:
                        this.ExternalBaseTemplate = ex;
                        break;
                    case ExternalDataSourceComponent_FieldIndex.Sources:
                        this.Sources = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ExternalDataSource.ErrorMask?>>?>(ex, null);
                        break;
                    case ExternalDataSourceComponent_FieldIndex.EXASs:
                        this.EXASs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ExternalDataSourceComponent_FieldIndex.EXBS:
                        this.EXBS = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ExternalDataSourceComponent_FieldIndex enu = (ExternalDataSourceComponent_FieldIndex)index;
                switch (enu)
                {
                    case ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate:
                        this.ExternalBaseTemplate = (Exception?)obj;
                        break;
                    case ExternalDataSourceComponent_FieldIndex.Sources:
                        this.Sources = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ExternalDataSource.ErrorMask?>>?>)obj;
                        break;
                    case ExternalDataSourceComponent_FieldIndex.EXASs:
                        this.EXASs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ExternalDataSourceComponent_FieldIndex.EXBS:
                        this.EXBS = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ExternalBaseTemplate != null) return true;
                if (Sources != null) return true;
                if (EXASs != null) return true;
                if (EXBS != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ExternalBaseTemplate, "ExternalBaseTemplate");
                }
                if (Sources is {} SourcesItem)
                {
                    sb.AppendLine("Sources =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SourcesItem.Overall);
                        if (SourcesItem.Specific != null)
                        {
                            foreach (var subItem in SourcesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (EXASs is {} EXASsItem)
                {
                    sb.AppendLine("EXASs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EXASsItem.Overall);
                        if (EXASsItem.Specific != null)
                        {
                            foreach (var subItem in EXASsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EXBS, "EXBS");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ExternalBaseTemplate = this.ExternalBaseTemplate.Combine(rhs.ExternalBaseTemplate);
                ret.Sources = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ExternalDataSource.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sources?.Overall, rhs.Sources?.Overall), Noggog.ExceptionExt.Combine(this.Sources?.Specific, rhs.Sources?.Specific));
                ret.EXASs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.EXASs?.Overall, rhs.EXASs?.Overall), Noggog.ExceptionExt.Combine(this.EXASs?.Specific, rhs.EXASs?.Specific));
                ret.EXBS = this.EXBS.Combine(rhs.EXBS);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ExternalBaseTemplate;
            public ExternalDataSource.TranslationMask? Sources;
            public bool EXASs;
            public bool EXBS;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ExternalBaseTemplate = defaultOn;
                this.EXASs = defaultOn;
                this.EXBS = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ExternalBaseTemplate, null));
                ret.Add((Sources == null ? DefaultOn : !Sources.GetCrystal().CopyNothing, Sources?.GetCrystal()));
                ret.Add((EXASs, null));
                ret.Add((EXBS, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ExternalDataSourceComponentCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExternalDataSourceComponentSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ExternalDataSourceComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ExternalDataSourceComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ExternalDataSourceComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ExternalDataSourceComponent();
            ((ExternalDataSourceComponentSetterCommon)((IExternalDataSourceComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ExternalDataSourceComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ExternalDataSourceComponentSetterCommon)((IExternalDataSourceComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ExternalDataSourceComponent GetNew()
        {
            return new ExternalDataSourceComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IExternalDataSourceComponent :
        IAComponent,
        IExternalDataSourceComponentGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IExternalDataSourceComponent>
    {
        new IFormLinkNullable<IExternalBaseTemplateGetter> ExternalBaseTemplate { get; set; }
        new ExtendedList<ExternalDataSource> Sources { get; }
        new ExtendedList<String>? EXASs { get; set; }
        new String EXBS { get; set; }
    }

    public partial interface IExternalDataSourceComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IExternalDataSourceComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => ExternalDataSourceComponent_Registration.Instance;
        IFormLinkNullableGetter<IExternalBaseTemplateGetter> ExternalBaseTemplate { get; }
        IReadOnlyList<IExternalDataSourceGetter> Sources { get; }
        IReadOnlyList<String>? EXASs { get; }
        String EXBS { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ExternalDataSourceComponentMixIn
    {
        public static void Clear(this IExternalDataSourceComponent item)
        {
            ((ExternalDataSourceComponentSetterCommon)((IExternalDataSourceComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ExternalDataSourceComponent.Mask<bool> GetEqualsMask(
            this IExternalDataSourceComponentGetter item,
            IExternalDataSourceComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IExternalDataSourceComponentGetter item,
            string? name = null,
            ExternalDataSourceComponent.Mask<bool>? printMask = null)
        {
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IExternalDataSourceComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ExternalDataSourceComponent.Mask<bool>? printMask = null)
        {
            ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IExternalDataSourceComponentGetter item,
            IExternalDataSourceComponentGetter rhs,
            ExternalDataSourceComponent.TranslationMask? equalsMask = null)
        {
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IExternalDataSourceComponent lhs,
            IExternalDataSourceComponentGetter rhs,
            out ExternalDataSourceComponent.ErrorMask errorMask,
            ExternalDataSourceComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ExternalDataSourceComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IExternalDataSourceComponent lhs,
            IExternalDataSourceComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ExternalDataSourceComponent DeepCopy(
            this IExternalDataSourceComponentGetter item,
            ExternalDataSourceComponent.TranslationMask? copyMask = null)
        {
            return ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ExternalDataSourceComponent DeepCopy(
            this IExternalDataSourceComponentGetter item,
            out ExternalDataSourceComponent.ErrorMask errorMask,
            ExternalDataSourceComponent.TranslationMask? copyMask = null)
        {
            return ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ExternalDataSourceComponent DeepCopy(
            this IExternalDataSourceComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IExternalDataSourceComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ExternalDataSourceComponentSetterCommon)((IExternalDataSourceComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ExternalDataSourceComponent_FieldIndex
    {
        ExternalBaseTemplate = 0,
        Sources = 1,
        EXASs = 2,
        EXBS = 3,
    }
    #endregion

    #region Registration
    internal partial class ExternalDataSourceComponent_Registration : ILoquiRegistration
    {
        public static readonly ExternalDataSourceComponent_Registration Instance = new ExternalDataSourceComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(ExternalDataSourceComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ExternalDataSourceComponent.ErrorMask);

        public static readonly Type ClassType = typeof(ExternalDataSourceComponent);

        public static readonly Type GetterType = typeof(IExternalDataSourceComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IExternalDataSourceComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.ExternalDataSourceComponent";

        public const string Name = "ExternalDataSourceComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.EXDC,
                RecordTypes.EXDZ,
                RecordTypes.EXCN,
                RecordTypes.EXCI,
                RecordTypes.EXAS,
                RecordTypes.EXAC,
                RecordTypes.EXBS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ExternalDataSourceComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ExternalDataSourceComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly ExternalDataSourceComponentSetterCommon Instance = new ExternalDataSourceComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IExternalDataSourceComponent item)
        {
            ClearPartial();
            item.ExternalBaseTemplate.Clear();
            item.Sources.Clear();
            item.EXASs = null;
            item.EXBS = string.Empty;
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IExternalDataSourceComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IExternalDataSourceComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ExternalBaseTemplate.Relink(mapping);
            obj.Sources.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IExternalDataSourceComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ExternalDataSourceComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ExternalDataSourceComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ExternalDataSourceComponentCommon : AComponentCommon
    {
        public new static readonly ExternalDataSourceComponentCommon Instance = new ExternalDataSourceComponentCommon();

        public ExternalDataSourceComponent.Mask<bool> GetEqualsMask(
            IExternalDataSourceComponentGetter item,
            IExternalDataSourceComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ExternalDataSourceComponent.Mask<bool>(false);
            ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IExternalDataSourceComponentGetter item,
            IExternalDataSourceComponentGetter rhs,
            ExternalDataSourceComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ExternalBaseTemplate = item.ExternalBaseTemplate.Equals(rhs.ExternalBaseTemplate);
            ret.Sources = item.Sources.CollectionEqualsHelper(
                rhs.Sources,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EXASs = item.EXASs.CollectionEqualsHelper(
                rhs.EXASs,
                (l, r) => string.Equals(l, r),
                include);
            ret.EXBS = string.Equals(item.EXBS, rhs.EXBS);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IExternalDataSourceComponentGetter item,
            string? name = null,
            ExternalDataSourceComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IExternalDataSourceComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ExternalDataSourceComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ExternalDataSourceComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (ExternalDataSourceComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IExternalDataSourceComponentGetter item,
            StructuredStringBuilder sb,
            ExternalDataSourceComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ExternalBaseTemplate ?? true)
            {
                sb.AppendItem(item.ExternalBaseTemplate.FormKeyNullable, "ExternalBaseTemplate");
            }
            if (printMask?.Sources?.Overall ?? true)
            {
                sb.AppendLine("Sources =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sources)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EXASs?.Overall ?? true)
                && item.EXASs is {} EXASsItem)
            {
                sb.AppendLine("EXASs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in EXASsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.EXBS ?? true)
            {
                sb.AppendItem(item.EXBS, "EXBS");
            }
        }
        
        public static ExternalDataSourceComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IExternalDataSourceComponentGetter? lhs,
            IExternalDataSourceComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate) ?? true))
            {
                if (!lhs.ExternalBaseTemplate.Equals(rhs.ExternalBaseTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.Sources) ?? true))
            {
                if (!lhs.Sources.SequenceEqual(rhs.Sources, (l, r) => ((ExternalDataSourceCommon)((IExternalDataSourceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ExternalDataSourceComponent_FieldIndex.Sources)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.EXASs) ?? true))
            {
                if (!lhs.EXASs.SequenceEqualNullable(rhs.EXASs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.EXBS) ?? true))
            {
                if (!string.Equals(lhs.EXBS, rhs.EXBS)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IExternalDataSourceComponentGetter?)lhs,
                rhs: rhs as IExternalDataSourceComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IExternalDataSourceComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ExternalBaseTemplate);
            hash.Add(item.Sources);
            hash.Add(item.EXASs);
            hash.Add(item.EXBS);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IExternalDataSourceComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ExternalDataSourceComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IExternalDataSourceComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.ExternalBaseTemplate, out var ExternalBaseTemplateInfo))
            {
                yield return ExternalBaseTemplateInfo;
            }
            foreach (var item in obj.Sources.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ExternalDataSourceComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly ExternalDataSourceComponentSetterTranslationCommon Instance = new ExternalDataSourceComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IExternalDataSourceComponent item,
            IExternalDataSourceComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate) ?? true))
            {
                item.ExternalBaseTemplate.SetTo(rhs.ExternalBaseTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.Sources) ?? true))
            {
                errorMask?.PushIndex((int)ExternalDataSourceComponent_FieldIndex.Sources);
                try
                {
                    item.Sources.SetTo(
                        rhs.Sources
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.EXASs) ?? true))
            {
                errorMask?.PushIndex((int)ExternalDataSourceComponent_FieldIndex.EXASs);
                try
                {
                    if ((rhs.EXASs != null))
                    {
                        item.EXASs = 
                            rhs.EXASs
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.EXASs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ExternalDataSourceComponent_FieldIndex.EXBS) ?? true))
            {
                item.EXBS = rhs.EXBS;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IExternalDataSourceComponent item,
            IExternalDataSourceComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IExternalDataSourceComponent)item,
                rhs: (IExternalDataSourceComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ExternalDataSourceComponent DeepCopy(
            IExternalDataSourceComponentGetter item,
            ExternalDataSourceComponent.TranslationMask? copyMask = null)
        {
            ExternalDataSourceComponent ret = (ExternalDataSourceComponent)((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).GetNew();
            ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ExternalDataSourceComponent DeepCopy(
            IExternalDataSourceComponentGetter item,
            out ExternalDataSourceComponent.ErrorMask errorMask,
            ExternalDataSourceComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ExternalDataSourceComponent ret = (ExternalDataSourceComponent)((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).GetNew();
            ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ExternalDataSourceComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ExternalDataSourceComponent DeepCopy(
            IExternalDataSourceComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ExternalDataSourceComponent ret = (ExternalDataSourceComponent)((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)item).CommonInstance()!).GetNew();
            ((ExternalDataSourceComponentSetterTranslationCommon)((IExternalDataSourceComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ExternalDataSourceComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ExternalDataSourceComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ExternalDataSourceComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ExternalDataSourceComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ExternalDataSourceComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ExternalDataSourceComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ExternalDataSourceComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ExternalDataSourceComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IExternalDataSourceComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExternalBaseTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.EXDC));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IExternalDataSourceGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Sources,
                counterType: RecordTypes.EXDZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IExternalDataSourceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ExternalDataSourceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.WriteWithCounter(
                writer: writer,
                items: item.EXASs,
                counterType: RecordTypes.EXAC,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.EXAS),
                subRecordPerItem: true,
                transl: StringBinaryTranslation.Instance.Write);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EXBS,
                header: translationParams.ConvertToCustom(RecordTypes.EXBS),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IExternalDataSourceComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IExternalDataSourceComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IExternalDataSourceComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ExternalDataSourceComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly ExternalDataSourceComponentBinaryCreateTranslation Instance = new ExternalDataSourceComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IExternalDataSourceComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EXDC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ExternalBaseTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate;
                }
                case RecordTypeInts.EXDZ:
                {
                    item.Sources.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ExternalDataSource>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.EXDZ,
                            triggeringRecord: ExternalDataSource_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ExternalDataSource.TryCreateFromBinary));
                    return (int)ExternalDataSourceComponent_FieldIndex.Sources;
                }
                case RecordTypeInts.EXAC:
                {
                    item.EXASs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.EXAC),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.EXAS),
                            transl: StringBinaryTranslation.Instance.Parse)
                        .CastExtendedList<String>();
                    return (int)ExternalDataSourceComponent_FieldIndex.EXASs;
                }
                case RecordTypeInts.EXBS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EXBS = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ExternalDataSourceComponent_FieldIndex.EXBS;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ExternalDataSourceComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ExternalDataSourceComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IExternalDataSourceComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ExternalDataSourceComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ExternalDataSourceComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ExternalDataSourceComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ExternalDataSourceComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ExternalDataSourceComponentCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ExternalDataSourceComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ExternalDataSourceComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ExternalBaseTemplate
        private int? _ExternalBaseTemplateLocation;
        public IFormLinkNullableGetter<IExternalBaseTemplateGetter> ExternalBaseTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IExternalBaseTemplateGetter>(_package, _recordData, _ExternalBaseTemplateLocation);
        #endregion
        public IReadOnlyList<IExternalDataSourceGetter> Sources { get; private set; } = Array.Empty<IExternalDataSourceGetter>();
        public IReadOnlyList<String>? EXASs { get; private set; }
        #region EXBS
        private int? _EXBSLocation;
        public String EXBS => _EXBSLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EXBSLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ExternalDataSourceComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IExternalDataSourceComponentGetter ExternalDataSourceComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ExternalDataSourceComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IExternalDataSourceComponentGetter ExternalDataSourceComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ExternalDataSourceComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EXDC:
                {
                    _ExternalBaseTemplateLocation = (stream.Position - offset);
                    return (int)ExternalDataSourceComponent_FieldIndex.ExternalBaseTemplate;
                }
                case RecordTypeInts.EXDZ:
                {
                    this.Sources = BinaryOverlayList.FactoryByCountPerItem<IExternalDataSourceGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ExternalDataSource_Registration.TriggerSpecs,
                        countType: RecordTypes.EXDZ,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ExternalDataSourceBinaryOverlay.ExternalDataSourceFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)ExternalDataSourceComponent_FieldIndex.Sources;
                }
                case RecordTypeInts.EXAC:
                {
                    this.EXASs = BinaryOverlayList.FactoryByCountPerItem<String>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: RecordTypes.EXAS,
                        countType: RecordTypes.EXAC,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(s, encoding: p.MetaData.Encodings.NonTranslated),
                        skipHeader: true);
                    return (int)ExternalDataSourceComponent_FieldIndex.EXASs;
                }
                case RecordTypeInts.EXBS:
                {
                    _EXBSLocation = (stream.Position - offset);
                    return (int)ExternalDataSourceComponent_FieldIndex.EXBS;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ExternalDataSourceComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IExternalDataSourceComponentGetter rhs) return false;
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IExternalDataSourceComponentGetter? obj)
        {
            return ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ExternalDataSourceComponentCommon)((IExternalDataSourceComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

