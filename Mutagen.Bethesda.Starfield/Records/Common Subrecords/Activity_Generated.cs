/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Activity :
        IActivity,
        IEquatable<IActivityGetter>,
        ILoquiObjectSetter<Activity>
    {
        #region Ctor
        public Activity()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ATAN
        public String ATAN { get; set; } = string.Empty;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActivityGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IActivityGetter.Description => this.Description;
        #endregion
        #region ProgressionEvalutor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ProgressionEvaluatorArgument> _ProgressionEvalutor = new ExtendedList<ProgressionEvaluatorArgument>();
        public ExtendedList<ProgressionEvaluatorArgument> ProgressionEvalutor
        {
            get => this._ProgressionEvalutor;
            init => this._ProgressionEvalutor = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IProgressionEvaluatorArgumentGetter> IActivityGetter.ProgressionEvalutor => _ProgressionEvalutor;
        #endregion

        #endregion
        #region ANAM
        public String ANAM { get; set; } = string.Empty;
        #endregion
        #region Configuration
        public String Configuration { get; set; } = string.Empty;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActivityMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IActivityGetter rhs) return false;
            return ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActivityGetter? obj)
        {
            return ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ATAN = initialValue;
                this.Name = initialValue;
                this.Description = initialValue;
                this.ProgressionEvalutor = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ProgressionEvaluatorArgument.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ProgressionEvaluatorArgument.Mask<TItem>?>>());
                this.ANAM = initialValue;
                this.Configuration = initialValue;
            }

            public Mask(
                TItem ATAN,
                TItem Name,
                TItem Description,
                TItem ProgressionEvalutor,
                TItem ANAM,
                TItem Configuration)
            {
                this.ATAN = ATAN;
                this.Name = Name;
                this.Description = Description;
                this.ProgressionEvalutor = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ProgressionEvaluatorArgument.Mask<TItem>?>>?>(ProgressionEvalutor, Enumerable.Empty<MaskItemIndexed<TItem, ProgressionEvaluatorArgument.Mask<TItem>?>>());
                this.ANAM = ANAM;
                this.Configuration = Configuration;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ATAN;
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ProgressionEvaluatorArgument.Mask<TItem>?>>?>? ProgressionEvalutor;
            public TItem ANAM;
            public TItem Configuration;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ATAN, rhs.ATAN)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ProgressionEvalutor, rhs.ProgressionEvalutor)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ATAN);
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ProgressionEvalutor);
                hash.Add(this.ANAM);
                hash.Add(this.Configuration);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ATAN)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ProgressionEvalutor != null)
                {
                    if (!eval(this.ProgressionEvalutor.Overall)) return false;
                    if (this.ProgressionEvalutor.Specific != null)
                    {
                        foreach (var item in this.ProgressionEvalutor.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ANAM)) return false;
                if (!eval(this.Configuration)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ATAN)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ProgressionEvalutor != null)
                {
                    if (eval(this.ProgressionEvalutor.Overall)) return true;
                    if (this.ProgressionEvalutor.Specific != null)
                    {
                        foreach (var item in this.ProgressionEvalutor.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ANAM)) return true;
                if (eval(this.Configuration)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Activity.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ATAN = eval(this.ATAN);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ProgressionEvalutor != null)
                {
                    obj.ProgressionEvalutor = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ProgressionEvaluatorArgument.Mask<R>?>>?>(eval(this.ProgressionEvalutor.Overall), Enumerable.Empty<MaskItemIndexed<R, ProgressionEvaluatorArgument.Mask<R>?>>());
                    if (ProgressionEvalutor.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ProgressionEvaluatorArgument.Mask<R>?>>();
                        obj.ProgressionEvalutor.Specific = l;
                        foreach (var item in ProgressionEvalutor.Specific)
                        {
                            MaskItemIndexed<R, ProgressionEvaluatorArgument.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ProgressionEvaluatorArgument.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ANAM = eval(this.ANAM);
                obj.Configuration = eval(this.Configuration);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Activity.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Activity.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Activity.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ATAN ?? true)
                    {
                        sb.AppendItem(ATAN, "ATAN");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ProgressionEvalutor?.Overall ?? true)
                        && ProgressionEvalutor is {} ProgressionEvalutorItem)
                    {
                        sb.AppendLine("ProgressionEvalutor =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ProgressionEvalutorItem.Overall);
                            if (ProgressionEvalutorItem.Specific != null)
                            {
                                foreach (var subItem in ProgressionEvalutorItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        sb.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.Configuration ?? true)
                    {
                        sb.AppendItem(Configuration, "Configuration");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ATAN;
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ProgressionEvaluatorArgument.ErrorMask?>>?>? ProgressionEvalutor;
            public Exception? ANAM;
            public Exception? Configuration;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Activity_FieldIndex enu = (Activity_FieldIndex)index;
                switch (enu)
                {
                    case Activity_FieldIndex.ATAN:
                        return ATAN;
                    case Activity_FieldIndex.Name:
                        return Name;
                    case Activity_FieldIndex.Description:
                        return Description;
                    case Activity_FieldIndex.ProgressionEvalutor:
                        return ProgressionEvalutor;
                    case Activity_FieldIndex.ANAM:
                        return ANAM;
                    case Activity_FieldIndex.Configuration:
                        return Configuration;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Activity_FieldIndex enu = (Activity_FieldIndex)index;
                switch (enu)
                {
                    case Activity_FieldIndex.ATAN:
                        this.ATAN = ex;
                        break;
                    case Activity_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Activity_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Activity_FieldIndex.ProgressionEvalutor:
                        this.ProgressionEvalutor = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ProgressionEvaluatorArgument.ErrorMask?>>?>(ex, null);
                        break;
                    case Activity_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case Activity_FieldIndex.Configuration:
                        this.Configuration = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Activity_FieldIndex enu = (Activity_FieldIndex)index;
                switch (enu)
                {
                    case Activity_FieldIndex.ATAN:
                        this.ATAN = (Exception?)obj;
                        break;
                    case Activity_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Activity_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Activity_FieldIndex.ProgressionEvalutor:
                        this.ProgressionEvalutor = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ProgressionEvaluatorArgument.ErrorMask?>>?>)obj;
                        break;
                    case Activity_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case Activity_FieldIndex.Configuration:
                        this.Configuration = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ATAN != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ProgressionEvalutor != null) return true;
                if (ANAM != null) return true;
                if (Configuration != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ATAN, "ATAN");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (ProgressionEvalutor is {} ProgressionEvalutorItem)
                {
                    sb.AppendLine("ProgressionEvalutor =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ProgressionEvalutorItem.Overall);
                        if (ProgressionEvalutorItem.Specific != null)
                        {
                            foreach (var subItem in ProgressionEvalutorItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ANAM, "ANAM");
                }
                {
                    sb.AppendItem(Configuration, "Configuration");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ATAN = this.ATAN.Combine(rhs.ATAN);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ProgressionEvalutor = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ProgressionEvaluatorArgument.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ProgressionEvalutor?.Overall, rhs.ProgressionEvalutor?.Overall), Noggog.ExceptionExt.Combine(this.ProgressionEvalutor?.Specific, rhs.ProgressionEvalutor?.Specific));
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.Configuration = this.Configuration.Combine(rhs.Configuration);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ATAN;
            public bool Name;
            public bool Description;
            public ProgressionEvaluatorArgument.TranslationMask? ProgressionEvalutor;
            public bool ANAM;
            public bool Configuration;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ATAN = defaultOn;
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ANAM = defaultOn;
                this.Configuration = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ATAN, null));
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ProgressionEvalutor == null ? DefaultOn : !ProgressionEvalutor.GetCrystal().CopyNothing, ProgressionEvalutor?.GetCrystal()));
                ret.Add((ANAM, null));
                ret.Add((Configuration, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ActivityCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ActivitySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ActivityBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActivityBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Activity CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Activity();
            ((ActivitySetterCommon)((IActivityGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Activity item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ActivitySetterCommon)((IActivityGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Activity GetNew()
        {
            return new Activity();
        }

    }
    #endregion

    #region Interface
    public partial interface IActivity :
        IActivityGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IActivity>,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new String ATAN { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<ProgressionEvaluatorArgument> ProgressionEvalutor { get; }
        new String ANAM { get; set; }
        new String Configuration { get; set; }
    }

    public partial interface IActivityGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IActivityGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Activity_Registration.Instance;
        String ATAN { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IProgressionEvaluatorArgumentGetter> ProgressionEvalutor { get; }
        String ANAM { get; }
        String Configuration { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ActivityMixIn
    {
        public static void Clear(this IActivity item)
        {
            ((ActivitySetterCommon)((IActivityGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Activity.Mask<bool> GetEqualsMask(
            this IActivityGetter item,
            IActivityGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActivityCommon)((IActivityGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IActivityGetter item,
            string? name = null,
            Activity.Mask<bool>? printMask = null)
        {
            return ((ActivityCommon)((IActivityGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IActivityGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Activity.Mask<bool>? printMask = null)
        {
            ((ActivityCommon)((IActivityGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActivityGetter item,
            IActivityGetter rhs,
            Activity.TranslationMask? equalsMask = null)
        {
            return ((ActivityCommon)((IActivityGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IActivity lhs,
            IActivityGetter rhs)
        {
            ((ActivitySetterTranslationCommon)((IActivityGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IActivity lhs,
            IActivityGetter rhs,
            Activity.TranslationMask? copyMask = null)
        {
            ((ActivitySetterTranslationCommon)((IActivityGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IActivity lhs,
            IActivityGetter rhs,
            out Activity.ErrorMask errorMask,
            Activity.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActivitySetterTranslationCommon)((IActivityGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Activity.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActivity lhs,
            IActivityGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActivitySetterTranslationCommon)((IActivityGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Activity DeepCopy(
            this IActivityGetter item,
            Activity.TranslationMask? copyMask = null)
        {
            return ((ActivitySetterTranslationCommon)((IActivityGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Activity DeepCopy(
            this IActivityGetter item,
            out Activity.ErrorMask errorMask,
            Activity.TranslationMask? copyMask = null)
        {
            return ((ActivitySetterTranslationCommon)((IActivityGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Activity DeepCopy(
            this IActivityGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActivitySetterTranslationCommon)((IActivityGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActivity item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ActivitySetterCommon)((IActivityGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Activity_FieldIndex
    {
        ATAN = 0,
        Name = 1,
        Description = 2,
        ProgressionEvalutor = 3,
        ANAM = 4,
        Configuration = 5,
    }
    #endregion

    #region Registration
    internal partial class Activity_Registration : ILoquiRegistration
    {
        public static readonly Activity_Registration Instance = new Activity_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Activity.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Activity.ErrorMask);

        public static readonly Type ClassType = typeof(Activity);

        public static readonly Type GetterType = typeof(IActivityGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActivity);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Activity";

        public const string Name = "Activity";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ATAN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.ATAF);
            var triggers = RecordCollection.Factory(RecordTypes.ATAN);
            var all = RecordCollection.Factory(
                RecordTypes.ATAN,
                RecordTypes.ATAF,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.DNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.ANAM,
                RecordTypes.ATAV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ActivityBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ActivitySetterCommon
    {
        public static readonly ActivitySetterCommon Instance = new ActivitySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActivity item)
        {
            ClearPartial();
            item.ATAN = string.Empty;
            item.Name = default;
            item.Description.Clear();
            item.ProgressionEvalutor.Clear();
            item.ANAM = string.Empty;
            item.Configuration = string.Empty;
        }
        
        #region Mutagen
        public void RemapLinks(IActivity obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ProgressionEvalutor.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActivity item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ActivityBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ActivityCommon
    {
        public static readonly ActivityCommon Instance = new ActivityCommon();

        public Activity.Mask<bool> GetEqualsMask(
            IActivityGetter item,
            IActivityGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Activity.Mask<bool>(false);
            ((ActivityCommon)((IActivityGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActivityGetter item,
            IActivityGetter rhs,
            Activity.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ATAN = string.Equals(item.ATAN, rhs.ATAN);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ProgressionEvalutor = item.ProgressionEvalutor.CollectionEqualsHelper(
                rhs.ProgressionEvalutor,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ANAM = string.Equals(item.ANAM, rhs.ANAM);
            ret.Configuration = string.Equals(item.Configuration, rhs.Configuration);
        }
        
        public string Print(
            IActivityGetter item,
            string? name = null,
            Activity.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IActivityGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Activity.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Activity =>");
            }
            else
            {
                sb.AppendLine($"{name} (Activity) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IActivityGetter item,
            StructuredStringBuilder sb,
            Activity.Mask<bool>? printMask = null)
        {
            if (printMask?.ATAN ?? true)
            {
                sb.AppendItem(item.ATAN, "ATAN");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if (printMask?.ProgressionEvalutor?.Overall ?? true)
            {
                sb.AppendLine("ProgressionEvalutor =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ProgressionEvalutor)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ANAM ?? true)
            {
                sb.AppendItem(item.ANAM, "ANAM");
            }
            if (printMask?.Configuration ?? true)
            {
                sb.AppendItem(item.Configuration, "Configuration");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActivityGetter? lhs,
            IActivityGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.ATAN) ?? true))
            {
                if (!string.Equals(lhs.ATAN, rhs.ATAN)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.ProgressionEvalutor) ?? true))
            {
                if (!lhs.ProgressionEvalutor.SequenceEqual(rhs.ProgressionEvalutor, (l, r) => ((ProgressionEvaluatorArgumentCommon)((IProgressionEvaluatorArgumentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Activity_FieldIndex.ProgressionEvalutor)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.ANAM) ?? true))
            {
                if (!string.Equals(lhs.ANAM, rhs.ANAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Activity_FieldIndex.Configuration) ?? true))
            {
                if (!string.Equals(lhs.Configuration, rhs.Configuration)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IActivityGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ATAN);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ProgressionEvalutor);
            hash.Add(item.ANAM);
            hash.Add(item.Configuration);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Activity.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IActivityGetter obj)
        {
            foreach (var item in obj.ProgressionEvalutor.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ActivitySetterTranslationCommon
    {
        public static readonly ActivitySetterTranslationCommon Instance = new ActivitySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActivity item,
            IActivityGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.ATAN) ?? true))
            {
                item.ATAN = rhs.ATAN;
            }
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.ProgressionEvalutor) ?? true))
            {
                errorMask?.PushIndex((int)Activity_FieldIndex.ProgressionEvalutor);
                try
                {
                    item.ProgressionEvalutor.SetTo(
                        rhs.ProgressionEvalutor
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.ANAM) ?? true))
            {
                item.ANAM = rhs.ANAM;
            }
            if ((copyMask?.GetShouldTranslate((int)Activity_FieldIndex.Configuration) ?? true))
            {
                item.Configuration = rhs.Configuration;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IActivity item,
            IActivityGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Activity DeepCopy(
            IActivityGetter item,
            Activity.TranslationMask? copyMask = null)
        {
            Activity ret = (Activity)((ActivityCommon)((IActivityGetter)item).CommonInstance()!).GetNew();
            ((ActivitySetterTranslationCommon)((IActivityGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Activity DeepCopy(
            IActivityGetter item,
            out Activity.ErrorMask errorMask,
            Activity.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Activity ret = (Activity)((ActivityCommon)((IActivityGetter)item).CommonInstance()!).GetNew();
            ((ActivitySetterTranslationCommon)((IActivityGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Activity.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Activity DeepCopy(
            IActivityGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Activity ret = (Activity)((ActivityCommon)((IActivityGetter)item).CommonInstance()!).GetNew();
            ((ActivitySetterTranslationCommon)((IActivityGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Activity
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Activity_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Activity_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ActivityCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ActivitySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ActivitySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IActivityGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IActivityGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IActivityGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ActivityBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ActivityBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IActivityGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ATAN,
                header: translationParams.ConvertToCustom(RecordTypes.ATAN),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IProgressionEvaluatorArgumentGetter>.Instance.Write(
                writer: writer,
                items: item.ProgressionEvalutor,
                transl: (MutagenWriter subWriter, IProgressionEvaluatorArgumentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ProgressionEvaluatorArgumentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ANAM,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Configuration,
                header: translationParams.ConvertToCustom(RecordTypes.ATAV),
                binaryType: StringBinaryType.Plain);
        }

        public void Write(
            MutagenWriter writer,
            IActivityGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.ATAF)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IActivityGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ActivityBinaryCreateTranslation
    {
        public static readonly ActivityBinaryCreateTranslation Instance = new ActivityBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IActivity item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ATAN:
                {
                    if (lastParsed.ShortCircuit((int)Activity_FieldIndex.ATAN, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ATAN = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Activity_FieldIndex.ATAN;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Activity_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Activity_FieldIndex.Description;
                }
                case RecordTypeInts.DNAM:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.ProgressionEvalutor.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ProgressionEvaluatorArgument>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: ProgressionEvaluatorArgument_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ProgressionEvaluatorArgument.TryCreateFromBinary));
                    return (int)Activity_FieldIndex.ProgressionEvalutor;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Activity_FieldIndex.ANAM;
                }
                case RecordTypeInts.ATAV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Configuration = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.Plain,
                        parseWhole: true);
                    return (int)Activity_FieldIndex.Configuration;
                }
                case RecordTypeInts.ATAF: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ActivityBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IActivityGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActivityBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ActivityBinaryOverlay :
        PluginBinaryOverlay,
        IActivityGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Activity_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Activity_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ActivityCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ActivitySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IActivityGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IActivityGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IActivityGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ActivityCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ActivityBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ActivityBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ATAN
        private int? _ATANLocation;
        public String ATAN => _ATANLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ATANLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IProgressionEvaluatorArgumentGetter> ProgressionEvalutor { get; private set; } = Array.Empty<IProgressionEvaluatorArgumentGetter>();
        #region ANAM
        private int? _ANAMLocation;
        public String ANAM => _ANAMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ANAMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Configuration
        private int? _ConfigurationLocation;
        public String Configuration => _ConfigurationLocation.HasValue ? BinaryStringUtility.ToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ConfigurationLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActivityBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IActivityGetter ActivityFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ActivityBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IActivityGetter ActivityFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ActivityFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ATAN:
                {
                    if (lastParsed.ShortCircuit((int)Activity_FieldIndex.ATAN, translationParams)) return ParseResult.Stop;
                    _ATANLocation = (stream.Position - offset);
                    return (int)Activity_FieldIndex.ATAN;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Activity_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Activity_FieldIndex.Description;
                }
                case RecordTypeInts.DNAM:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    this.ProgressionEvalutor = this.ParseRepeatedTypelessSubrecord<IProgressionEvaluatorArgumentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: ProgressionEvaluatorArgument_Registration.TriggerSpecs,
                        factory: ProgressionEvaluatorArgumentBinaryOverlay.ProgressionEvaluatorArgumentFactory);
                    return (int)Activity_FieldIndex.ProgressionEvalutor;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = (stream.Position - offset);
                    return (int)Activity_FieldIndex.ANAM;
                }
                case RecordTypeInts.ATAV:
                {
                    _ConfigurationLocation = (stream.Position - offset);
                    return (int)Activity_FieldIndex.Configuration;
                }
                case RecordTypeInts.ATAF: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ActivityMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IActivityGetter rhs) return false;
            return ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IActivityGetter? obj)
        {
            return ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ActivityCommon)((IActivityGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

