/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Assets;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Model :
        IEquatable<IModelGetter>,
        ILoquiObjectSetter<Model>,
        IModel
    {
        #region Ctor
        public Model()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        public AssetLink<StarfieldModelAssetType>? File { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<StarfieldModelAssetType>? IModelGetter.File => this.File;
        #endregion
        #region TextureFileHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFileHashes;
        public MemorySlice<Byte>? TextureFileHashes
        {
            get => this._TextureFileHashes;
            set => this._TextureFileHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IModelGetter.TextureFileHashes => this.TextureFileHashes;
        #endregion
        #region MaterialSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? _MaterialSwaps;
        public ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? MaterialSwaps
        {
            get => this._MaterialSwaps;
            set => this._MaterialSwaps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? IModelGetter.MaterialSwaps => _MaterialSwaps;
        #endregion

        #endregion
        #region LightLayer
        public UInt32? LightLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IModelGetter.LightLayer => this.LightLayer;
        #endregion
        #region Flags
        public Model.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model.Flag? IModelGetter.Flags => this.Flags;
        #endregion
        #region ColorRemappingIndex
        public Single? ColorRemappingIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IModelGetter.ColorRemappingIndex => this.ColorRemappingIndex;
        #endregion
        #region FlagsVestigial
        public Model.Flag? FlagsVestigial { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Model.Flag? IModelGetter.FlagsVestigial => this.FlagsVestigial;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IModelGetter rhs) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IModelGetter? obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.File = initialValue;
                this.TextureFileHashes = initialValue;
                this.MaterialSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LightLayer = initialValue;
                this.Flags = initialValue;
                this.ColorRemappingIndex = initialValue;
                this.FlagsVestigial = initialValue;
            }

            public Mask(
                TItem File,
                TItem TextureFileHashes,
                TItem MaterialSwaps,
                TItem LightLayer,
                TItem Flags,
                TItem ColorRemappingIndex,
                TItem FlagsVestigial)
            {
                this.File = File;
                this.TextureFileHashes = TextureFileHashes;
                this.MaterialSwaps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MaterialSwaps, Enumerable.Empty<(int Index, TItem Value)>());
                this.LightLayer = LightLayer;
                this.Flags = Flags;
                this.ColorRemappingIndex = ColorRemappingIndex;
                this.FlagsVestigial = FlagsVestigial;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem File;
            public TItem TextureFileHashes;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MaterialSwaps;
            public TItem LightLayer;
            public TItem Flags;
            public TItem ColorRemappingIndex;
            public TItem FlagsVestigial;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.File, rhs.File)) return false;
                if (!object.Equals(this.TextureFileHashes, rhs.TextureFileHashes)) return false;
                if (!object.Equals(this.MaterialSwaps, rhs.MaterialSwaps)) return false;
                if (!object.Equals(this.LightLayer, rhs.LightLayer)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ColorRemappingIndex, rhs.ColorRemappingIndex)) return false;
                if (!object.Equals(this.FlagsVestigial, rhs.FlagsVestigial)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.File);
                hash.Add(this.TextureFileHashes);
                hash.Add(this.MaterialSwaps);
                hash.Add(this.LightLayer);
                hash.Add(this.Flags);
                hash.Add(this.ColorRemappingIndex);
                hash.Add(this.FlagsVestigial);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.File)) return false;
                if (!eval(this.TextureFileHashes)) return false;
                if (this.MaterialSwaps != null)
                {
                    if (!eval(this.MaterialSwaps.Overall)) return false;
                    if (this.MaterialSwaps.Specific != null)
                    {
                        foreach (var item in this.MaterialSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LightLayer)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.ColorRemappingIndex)) return false;
                if (!eval(this.FlagsVestigial)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.File)) return true;
                if (eval(this.TextureFileHashes)) return true;
                if (this.MaterialSwaps != null)
                {
                    if (eval(this.MaterialSwaps.Overall)) return true;
                    if (this.MaterialSwaps.Specific != null)
                    {
                        foreach (var item in this.MaterialSwaps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LightLayer)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.ColorRemappingIndex)) return true;
                if (eval(this.FlagsVestigial)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Model.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.File = eval(this.File);
                obj.TextureFileHashes = eval(this.TextureFileHashes);
                if (MaterialSwaps != null)
                {
                    obj.MaterialSwaps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MaterialSwaps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MaterialSwaps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MaterialSwaps.Specific = l;
                        foreach (var item in MaterialSwaps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LightLayer = eval(this.LightLayer);
                obj.Flags = eval(this.Flags);
                obj.ColorRemappingIndex = eval(this.ColorRemappingIndex);
                obj.FlagsVestigial = eval(this.FlagsVestigial);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Model.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Model.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Model.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.File ?? true)
                    {
                        sb.AppendItem(File, "File");
                    }
                    if (printMask?.TextureFileHashes ?? true)
                    {
                        sb.AppendItem(TextureFileHashes, "TextureFileHashes");
                    }
                    if ((printMask?.MaterialSwaps?.Overall ?? true)
                        && MaterialSwaps is {} MaterialSwapsItem)
                    {
                        sb.AppendLine("MaterialSwaps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MaterialSwapsItem.Overall);
                            if (MaterialSwapsItem.Specific != null)
                            {
                                foreach (var subItem in MaterialSwapsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LightLayer ?? true)
                    {
                        sb.AppendItem(LightLayer, "LightLayer");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ColorRemappingIndex ?? true)
                    {
                        sb.AppendItem(ColorRemappingIndex, "ColorRemappingIndex");
                    }
                    if (printMask?.FlagsVestigial ?? true)
                    {
                        sb.AppendItem(FlagsVestigial, "FlagsVestigial");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? File;
            public Exception? TextureFileHashes;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MaterialSwaps;
            public Exception? LightLayer;
            public Exception? Flags;
            public Exception? ColorRemappingIndex;
            public Exception? FlagsVestigial;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        return File;
                    case Model_FieldIndex.TextureFileHashes:
                        return TextureFileHashes;
                    case Model_FieldIndex.MaterialSwaps:
                        return MaterialSwaps;
                    case Model_FieldIndex.LightLayer:
                        return LightLayer;
                    case Model_FieldIndex.Flags:
                        return Flags;
                    case Model_FieldIndex.ColorRemappingIndex:
                        return ColorRemappingIndex;
                    case Model_FieldIndex.FlagsVestigial:
                        return FlagsVestigial;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = ex;
                        break;
                    case Model_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = ex;
                        break;
                    case Model_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Model_FieldIndex.LightLayer:
                        this.LightLayer = ex;
                        break;
                    case Model_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Model_FieldIndex.ColorRemappingIndex:
                        this.ColorRemappingIndex = ex;
                        break;
                    case Model_FieldIndex.FlagsVestigial:
                        this.FlagsVestigial = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = (Exception?)obj;
                        break;
                    case Model_FieldIndex.TextureFileHashes:
                        this.TextureFileHashes = (Exception?)obj;
                        break;
                    case Model_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Model_FieldIndex.LightLayer:
                        this.LightLayer = (Exception?)obj;
                        break;
                    case Model_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Model_FieldIndex.ColorRemappingIndex:
                        this.ColorRemappingIndex = (Exception?)obj;
                        break;
                    case Model_FieldIndex.FlagsVestigial:
                        this.FlagsVestigial = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (File != null) return true;
                if (TextureFileHashes != null) return true;
                if (MaterialSwaps != null) return true;
                if (LightLayer != null) return true;
                if (Flags != null) return true;
                if (ColorRemappingIndex != null) return true;
                if (FlagsVestigial != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(File, "File");
                }
                {
                    sb.AppendItem(TextureFileHashes, "TextureFileHashes");
                }
                if (MaterialSwaps is {} MaterialSwapsItem)
                {
                    sb.AppendLine("MaterialSwaps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MaterialSwapsItem.Overall);
                        if (MaterialSwapsItem.Specific != null)
                        {
                            foreach (var subItem in MaterialSwapsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(LightLayer, "LightLayer");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(ColorRemappingIndex, "ColorRemappingIndex");
                }
                {
                    sb.AppendItem(FlagsVestigial, "FlagsVestigial");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.File = this.File.Combine(rhs.File);
                ret.TextureFileHashes = this.TextureFileHashes.Combine(rhs.TextureFileHashes);
                ret.MaterialSwaps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MaterialSwaps?.Overall, rhs.MaterialSwaps?.Overall), Noggog.ExceptionExt.Combine(this.MaterialSwaps?.Specific, rhs.MaterialSwaps?.Specific));
                ret.LightLayer = this.LightLayer.Combine(rhs.LightLayer);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ColorRemappingIndex = this.ColorRemappingIndex.Combine(rhs.ColorRemappingIndex);
                ret.FlagsVestigial = this.FlagsVestigial.Combine(rhs.FlagsVestigial);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool File;
            public bool TextureFileHashes;
            public bool MaterialSwaps;
            public bool LightLayer;
            public bool Flags;
            public bool ColorRemappingIndex;
            public bool FlagsVestigial;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.File = defaultOn;
                this.TextureFileHashes = defaultOn;
                this.MaterialSwaps = defaultOn;
                this.LightLayer = defaultOn;
                this.Flags = defaultOn;
                this.ColorRemappingIndex = defaultOn;
                this.FlagsVestigial = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((File, null));
                ret.Add((TextureFileHashes, null));
                ret.Add((MaterialSwaps, null));
                ret.Add((LightLayer, null));
                ret.Add((Flags, null));
                ret.Add((ColorRemappingIndex, null));
                ret.Add((FlagsVestigial, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ModelCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ModelSetterCommon.Instance.RemapLinks(this, mapping);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ModelSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ModelSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ModelSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Model CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Model item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ModelSetterCommon)((IModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Model GetNew()
        {
            return new Model();
        }

    }
    #endregion

    #region Interface
    public partial interface IModel :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IModel>,
        IModelGetter
    {
        new AssetLink<StarfieldModelAssetType>? File { get; set; }
        new MemorySlice<Byte>? TextureFileHashes { get; set; }
        new ExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? MaterialSwaps { get; set; }
        new UInt32? LightLayer { get; set; }
        new Model.Flag? Flags { get; set; }
        new Single? ColorRemappingIndex { get; set; }
        new Model.Flag? FlagsVestigial { get; set; }
    }

    public partial interface IModelGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IModelGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Model_Registration.Instance;
        AssetLinkGetter<StarfieldModelAssetType>? File { get; }
        ReadOnlyMemorySlice<Byte>? TextureFileHashes { get; }
        IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? MaterialSwaps { get; }
        UInt32? LightLayer { get; }
        Model.Flag? Flags { get; }
        Single? ColorRemappingIndex { get; }
        Model.Flag? FlagsVestigial { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ModelMixIn
    {
        public static void Clear(this IModel item)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Model.Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IModelGetter item,
            IModelGetter rhs,
            Model.TranslationMask? equalsMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            Model.TranslationMask? copyMask = null)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Model_FieldIndex
    {
        File = 0,
        TextureFileHashes = 1,
        MaterialSwaps = 2,
        LightLayer = 3,
        Flags = 4,
        ColorRemappingIndex = 5,
        FlagsVestigial = 6,
    }
    #endregion

    #region Registration
    internal partial class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Model.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model.ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ModelSetterCommon
    {
        public static readonly ModelSetterCommon Instance = new ModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModel item)
        {
            ClearPartial();
            item.File = default;
            item.TextureFileHashes = default;
            item.MaterialSwaps = null;
            item.LightLayer = default;
            item.Flags = default;
            item.ColorRemappingIndex = default;
            item.FlagsVestigial = default;
        }
        
        #region Mutagen
        public void RemapLinks(IModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MaterialSwaps?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IModel obj)
        {
            if (obj.File != null)
            {
                yield return obj.File;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IModel obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.File?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IModel item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ModelCommon
    {
        public static readonly ModelCommon Instance = new ModelCommon();

        public Model.Mask<bool> GetEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Model.Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.File = object.Equals(item.File, rhs.File);
            ret.TextureFileHashes = MemorySliceExt.SequenceEqual(item.TextureFileHashes, rhs.TextureFileHashes);
            ret.MaterialSwaps = item.MaterialSwaps.CollectionEqualsHelper(
                rhs.MaterialSwaps,
                (l, r) => object.Equals(l, r),
                include);
            ret.LightLayer = item.LightLayer == rhs.LightLayer;
            ret.Flags = item.Flags == rhs.Flags;
            ret.ColorRemappingIndex = item.ColorRemappingIndex.EqualsWithin(rhs.ColorRemappingIndex);
            ret.FlagsVestigial = item.FlagsVestigial == rhs.FlagsVestigial;
        }
        
        public string Print(
            IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Model =>");
            }
            else
            {
                sb.AppendLine($"{name} (Model) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IModelGetter item,
            StructuredStringBuilder sb,
            Model.Mask<bool>? printMask = null)
        {
            if ((printMask?.File ?? true)
                && item.File is {} FileItem)
            {
                sb.AppendItem(FileItem, "File");
            }
            if ((printMask?.TextureFileHashes ?? true)
                && item.TextureFileHashes is {} TextureFileHashesItem)
            {
                sb.AppendLine($"TextureFileHashes => {SpanExt.ToHexString(TextureFileHashesItem)}");
            }
            if ((printMask?.MaterialSwaps?.Overall ?? true)
                && item.MaterialSwaps is {} MaterialSwapsItem)
            {
                sb.AppendLine("MaterialSwaps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MaterialSwapsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.LightLayer ?? true)
                && item.LightLayer is {} LightLayerItem)
            {
                sb.AppendItem(LightLayerItem, "LightLayer");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.ColorRemappingIndex ?? true)
                && item.ColorRemappingIndex is {} ColorRemappingIndexItem)
            {
                sb.AppendItem(ColorRemappingIndexItem, "ColorRemappingIndex");
            }
            if ((printMask?.FlagsVestigial ?? true)
                && item.FlagsVestigial is {} FlagsVestigialItem)
            {
                sb.AppendItem(FlagsVestigialItem, "FlagsVestigial");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModelGetter? lhs,
            IModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                if (!object.Equals(lhs.File, rhs.File)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.TextureFileHashes) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextureFileHashes, rhs.TextureFileHashes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.MaterialSwaps) ?? true))
            {
                if (!lhs.MaterialSwaps.SequenceEqualNullable(rhs.MaterialSwaps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.LightLayer) ?? true))
            {
                if (lhs.LightLayer != rhs.LightLayer) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.ColorRemappingIndex) ?? true))
            {
                if (!lhs.ColorRemappingIndex.EqualsWithin(rhs.ColorRemappingIndex)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Model_FieldIndex.FlagsVestigial) ?? true))
            {
                if (lhs.FlagsVestigial != rhs.FlagsVestigial) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IModelGetter item)
        {
            var hash = new HashCode();
            if (item.File is {} Fileitem)
            {
                hash.Add(Fileitem);
            }
            if (item.TextureFileHashes is {} TextureFileHashesItem)
            {
                hash.Add(TextureFileHashesItem);
            }
            hash.Add(item.MaterialSwaps);
            if (item.LightLayer is {} LightLayeritem)
            {
                hash.Add(LightLayeritem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.ColorRemappingIndex is {} ColorRemappingIndexitem)
            {
                hash.Add(ColorRemappingIndexitem);
            }
            if (item.FlagsVestigial is {} FlagsVestigialitem)
            {
                hash.Add(FlagsVestigialitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Model.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IModelGetter obj)
        {
            if (obj.MaterialSwaps is {} MaterialSwapsItem)
            {
                foreach (var item in MaterialSwapsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IModelGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.File != null)
                {
                    yield return obj.File;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ModelSetterTranslationCommon
    {
        public static readonly ModelSetterTranslationCommon Instance = new ModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            item.File = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.File, rhs.File);
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.TextureFileHashes) ?? true))
            {
                if(rhs.TextureFileHashes is {} TextureFileHashesrhs)
                {
                    item.TextureFileHashes = TextureFileHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFileHashes = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.MaterialSwaps) ?? true))
            {
                errorMask?.PushIndex((int)Model_FieldIndex.MaterialSwaps);
                try
                {
                    if ((rhs.MaterialSwaps != null))
                    {
                        item.MaterialSwaps = 
                            rhs.MaterialSwaps
                                .Select(b => (IFormLinkGetter<ILayeredMaterialSwapGetter>)new FormLink<ILayeredMaterialSwapGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>();
                    }
                    else
                    {
                        item.MaterialSwaps = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.LightLayer) ?? true))
            {
                item.LightLayer = rhs.LightLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.ColorRemappingIndex) ?? true))
            {
                item.ColorRemappingIndex = rhs.ColorRemappingIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.FlagsVestigial) ?? true))
            {
                item.FlagsVestigial = rhs.FlagsVestigial;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Model DeepCopy(
            IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ((ModelSetterTranslationCommon)((IModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Model
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.File?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.MODL),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureFileHashes,
                header: translationParams.ConvertToCustom(RecordTypes.MODT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILayeredMaterialSwapGetter>>.Instance.Write(
                writer: writer,
                items: item.MaterialSwaps,
                recordType: translationParams.ConvertToCustom(RecordTypes.MOLM),
                countLengthLength: 2,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILayeredMaterialSwapGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LightLayer,
                header: translationParams.ConvertToCustom(RecordTypes.FLLD));
            EnumBinaryTranslation<Model.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.XFLG));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ColorRemappingIndex,
                header: translationParams.ConvertToCustom(RecordTypes.MODC));
            EnumBinaryTranslation<Model.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.FlagsVestigial,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.MODF));
        }

        public void Write(
            MutagenWriter writer,
            IModelGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ModelBinaryCreateTranslation
    {
        public static readonly ModelBinaryCreateTranslation Instance = new ModelBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IModel item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.File, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.File = AssetLinkBinaryTranslation.Instance.Parse<StarfieldModelAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)Model_FieldIndex.File;
                }
                case RecordTypeInts.MODT:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.TextureFileHashes, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFileHashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Model_FieldIndex.TextureFileHashes;
                }
                case RecordTypeInts.MOLM:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.MaterialSwaps, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaterialSwaps = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILayeredMaterialSwapGetter>>.Instance.Parse(
                            amount: frame.ReadUInt16(),
                            reader: frame,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILayeredMaterialSwapGetter>>();
                    return (int)Model_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.FLLD:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.LightLayer, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LightLayer = frame.ReadUInt32();
                    return (int)Model_FieldIndex.LightLayer;
                }
                case RecordTypeInts.XFLG:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Model.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Model_FieldIndex.Flags;
                }
                case RecordTypeInts.MODC:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.ColorRemappingIndex, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ColorRemappingIndex = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Model_FieldIndex.ColorRemappingIndex;
                }
                case RecordTypeInts.MODF:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.FlagsVestigial, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FlagsVestigial = EnumBinaryTranslation<Model.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Model_FieldIndex.FlagsVestigial;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ModelBinaryOverlay :
        PluginBinaryOverlay,
        IModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ModelCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region File
        private int? _FileLocation;
        public AssetLinkGetter<StarfieldModelAssetType>? File => _FileLocation.HasValue ? new AssetLinkGetter<StarfieldModelAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FileLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<StarfieldModelAssetType>?);
        #endregion
        #region TextureFileHashes
        private int? _TextureFileHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFileHashes => _TextureFileHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureFileHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ILayeredMaterialSwapGetter>>? MaterialSwaps { get; private set; }
        #region LightLayer
        private int? _LightLayerLocation;
        public UInt32? LightLayer => _LightLayerLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LightLayerLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Model.Flag? Flags => _FlagsLocation.HasValue ? (Model.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Model.Flag?);
        #endregion
        #region ColorRemappingIndex
        private int? _ColorRemappingIndexLocation;
        public Single? ColorRemappingIndex => _ColorRemappingIndexLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorRemappingIndexLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FlagsVestigial
        private int? _FlagsVestigialLocation;
        public Model.Flag? FlagsVestigial => _FlagsVestigialLocation.HasValue ? (Model.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsVestigialLocation!.Value, _package.MetaData.Constants)[0] : default(Model.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IModelGetter ModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IModelGetter ModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.File, translationParams)) return ParseResult.Stop;
                    _FileLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.File;
                }
                case RecordTypeInts.MODT:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.TextureFileHashes, translationParams)) return ParseResult.Stop;
                    _TextureFileHashesLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.TextureFileHashes;
                }
                case RecordTypeInts.MOLM:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.MaterialSwaps, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    var count = stream.ReadUInt16();
                    this.MaterialSwaps = BinaryOverlayList.FactoryByCountLength<IFormLinkGetter<ILayeredMaterialSwapGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 4,
                        count: count,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILayeredMaterialSwapGetter>(p, s));
                    return (int)Model_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.FLLD:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.LightLayer, translationParams)) return ParseResult.Stop;
                    _LightLayerLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.LightLayer;
                }
                case RecordTypeInts.XFLG:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.Flags;
                }
                case RecordTypeInts.MODC:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.ColorRemappingIndex, translationParams)) return ParseResult.Stop;
                    _ColorRemappingIndexLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.ColorRemappingIndex;
                }
                case RecordTypeInts.MODF:
                {
                    if (lastParsed.ShortCircuit((int)Model_FieldIndex.FlagsVestigial, translationParams)) return ParseResult.Stop;
                    _FlagsVestigialLocation = (stream.Position - offset);
                    return (int)Model_FieldIndex.FlagsVestigial;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IModelGetter rhs) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IModelGetter? obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

