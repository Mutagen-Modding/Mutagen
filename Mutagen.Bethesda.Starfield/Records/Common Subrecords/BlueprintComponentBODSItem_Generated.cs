/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BlueprintComponentBODSItem :
        IBlueprintComponentBODSItem,
        IEquatable<IBlueprintComponentBODSItemGetter>,
        ILoquiObjectSetter<BlueprintComponentBODSItem>
    {
        #region Ctor
        public BlueprintComponentBODSItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        public String Name { get; set; } = string.Empty;
        #endregion
        #region Color1
        public Color Color1 { get; set; } = default(Color);
        #endregion
        #region Color2
        public Color Color2 { get; set; } = default(Color);
        #endregion
        #region Color3
        public Color Color3 { get; set; } = default(Color);
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlueprintComponentBODSItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlueprintComponentBODSItemGetter rhs) return false;
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlueprintComponentBODSItemGetter? obj)
        {
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.Color1 = initialValue;
                this.Color2 = initialValue;
                this.Color3 = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem Name,
                TItem Color1,
                TItem Color2,
                TItem Color3,
                TItem Unknown)
            {
                this.Name = Name;
                this.Color1 = Color1;
                this.Color2 = Color2;
                this.Color3 = Color3;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Color1;
            public TItem Color2;
            public TItem Color3;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Color1, rhs.Color1)) return false;
                if (!object.Equals(this.Color2, rhs.Color2)) return false;
                if (!object.Equals(this.Color3, rhs.Color3)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Color1);
                hash.Add(this.Color2);
                hash.Add(this.Color3);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.Color1)) return false;
                if (!eval(this.Color2)) return false;
                if (!eval(this.Color3)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.Color1)) return true;
                if (eval(this.Color2)) return true;
                if (eval(this.Color3)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BlueprintComponentBODSItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.Color1 = eval(this.Color1);
                obj.Color2 = eval(this.Color2);
                obj.Color3 = eval(this.Color3);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BlueprintComponentBODSItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BlueprintComponentBODSItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BlueprintComponentBODSItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Color1 ?? true)
                    {
                        sb.AppendItem(Color1, "Color1");
                    }
                    if (printMask?.Color2 ?? true)
                    {
                        sb.AppendItem(Color2, "Color2");
                    }
                    if (printMask?.Color3 ?? true)
                    {
                        sb.AppendItem(Color3, "Color3");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? Color1;
            public Exception? Color2;
            public Exception? Color3;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BlueprintComponentBODSItem_FieldIndex enu = (BlueprintComponentBODSItem_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponentBODSItem_FieldIndex.Name:
                        return Name;
                    case BlueprintComponentBODSItem_FieldIndex.Color1:
                        return Color1;
                    case BlueprintComponentBODSItem_FieldIndex.Color2:
                        return Color2;
                    case BlueprintComponentBODSItem_FieldIndex.Color3:
                        return Color3;
                    case BlueprintComponentBODSItem_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BlueprintComponentBODSItem_FieldIndex enu = (BlueprintComponentBODSItem_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponentBODSItem_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color1:
                        this.Color1 = ex;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color2:
                        this.Color2 = ex;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color3:
                        this.Color3 = ex;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BlueprintComponentBODSItem_FieldIndex enu = (BlueprintComponentBODSItem_FieldIndex)index;
                switch (enu)
                {
                    case BlueprintComponentBODSItem_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color1:
                        this.Color1 = (Exception?)obj;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color2:
                        this.Color2 = (Exception?)obj;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Color3:
                        this.Color3 = (Exception?)obj;
                        break;
                    case BlueprintComponentBODSItem_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Color1 != null) return true;
                if (Color2 != null) return true;
                if (Color3 != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Color1, "Color1");
                }
                {
                    sb.AppendItem(Color2, "Color2");
                }
                {
                    sb.AppendItem(Color3, "Color3");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Color1 = this.Color1.Combine(rhs.Color1);
                ret.Color2 = this.Color2.Combine(rhs.Color2);
                ret.Color3 = this.Color3.Combine(rhs.Color3);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool Color1;
            public bool Color2;
            public bool Color3;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.Color1 = defaultOn;
                this.Color2 = defaultOn;
                this.Color3 = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((Color1, null));
                ret.Add((Color2, null));
                ret.Add((Color3, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BlueprintComponentBODSItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlueprintComponentBODSItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BlueprintComponentBODSItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BlueprintComponentBODSItem();
            ((BlueprintComponentBODSItemSetterCommon)((IBlueprintComponentBODSItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BlueprintComponentBODSItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BlueprintComponentBODSItemSetterCommon)((IBlueprintComponentBODSItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BlueprintComponentBODSItem GetNew()
        {
            return new BlueprintComponentBODSItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IBlueprintComponentBODSItem :
        IBlueprintComponentBODSItemGetter,
        ILoquiObjectSetter<IBlueprintComponentBODSItem>,
        INamedRequired
    {
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        new String Name { get; set; }
        new Color Color1 { get; set; }
        new Color Color2 { get; set; }
        new Color Color3 { get; set; }
        new Int32 Unknown { get; set; }
    }

    public partial interface IBlueprintComponentBODSItemGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBlueprintComponentBODSItemGetter>,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BlueprintComponentBODSItem_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter
        /// </summary>
        String Name { get; }
        #endregion
        Color Color1 { get; }
        Color Color2 { get; }
        Color Color3 { get; }
        Int32 Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BlueprintComponentBODSItemMixIn
    {
        public static void Clear(this IBlueprintComponentBODSItem item)
        {
            ((BlueprintComponentBODSItemSetterCommon)((IBlueprintComponentBODSItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BlueprintComponentBODSItem.Mask<bool> GetEqualsMask(
            this IBlueprintComponentBODSItemGetter item,
            IBlueprintComponentBODSItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBlueprintComponentBODSItemGetter item,
            string? name = null,
            BlueprintComponentBODSItem.Mask<bool>? printMask = null)
        {
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBlueprintComponentBODSItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlueprintComponentBODSItem.Mask<bool>? printMask = null)
        {
            ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBlueprintComponentBODSItemGetter item,
            IBlueprintComponentBODSItemGetter rhs,
            BlueprintComponentBODSItem.TranslationMask? equalsMask = null)
        {
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBlueprintComponentBODSItem lhs,
            IBlueprintComponentBODSItemGetter rhs)
        {
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBlueprintComponentBODSItem lhs,
            IBlueprintComponentBODSItemGetter rhs,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBlueprintComponentBODSItem lhs,
            IBlueprintComponentBODSItemGetter rhs,
            out BlueprintComponentBODSItem.ErrorMask errorMask,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BlueprintComponentBODSItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBlueprintComponentBODSItem lhs,
            IBlueprintComponentBODSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BlueprintComponentBODSItem DeepCopy(
            this IBlueprintComponentBODSItemGetter item,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            return ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BlueprintComponentBODSItem DeepCopy(
            this IBlueprintComponentBODSItemGetter item,
            out BlueprintComponentBODSItem.ErrorMask errorMask,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            return ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BlueprintComponentBODSItem DeepCopy(
            this IBlueprintComponentBODSItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBlueprintComponentBODSItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BlueprintComponentBODSItemSetterCommon)((IBlueprintComponentBODSItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BlueprintComponentBODSItem_FieldIndex
    {
        Name = 0,
        Color1 = 1,
        Color2 = 2,
        Color3 = 3,
        Unknown = 4,
    }
    #endregion

    #region Registration
    internal partial class BlueprintComponentBODSItem_Registration : ILoquiRegistration
    {
        public static readonly BlueprintComponentBODSItem_Registration Instance = new BlueprintComponentBODSItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(BlueprintComponentBODSItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BlueprintComponentBODSItem.ErrorMask);

        public static readonly Type ClassType = typeof(BlueprintComponentBODSItem);

        public static readonly Type GetterType = typeof(IBlueprintComponentBODSItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBlueprintComponentBODSItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BlueprintComponentBODSItem";

        public const string Name = "BlueprintComponentBODSItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BODS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BODS);
            var all = RecordCollection.Factory(
                RecordTypes.BODS,
                RecordTypes.BODV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BlueprintComponentBODSItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BlueprintComponentBODSItemSetterCommon
    {
        public static readonly BlueprintComponentBODSItemSetterCommon Instance = new BlueprintComponentBODSItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBlueprintComponentBODSItem item)
        {
            ClearPartial();
            item.Name = string.Empty;
            item.Color1 = default(Color);
            item.Color2 = default(Color);
            item.Color3 = default(Color);
            item.Unknown = default(Int32);
        }
        
        #region Mutagen
        public void RemapLinks(IBlueprintComponentBODSItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBlueprintComponentBODSItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BlueprintComponentBODSItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BlueprintComponentBODSItemCommon
    {
        public static readonly BlueprintComponentBODSItemCommon Instance = new BlueprintComponentBODSItemCommon();

        public BlueprintComponentBODSItem.Mask<bool> GetEqualsMask(
            IBlueprintComponentBODSItemGetter item,
            IBlueprintComponentBODSItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BlueprintComponentBODSItem.Mask<bool>(false);
            ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBlueprintComponentBODSItemGetter item,
            IBlueprintComponentBODSItemGetter rhs,
            BlueprintComponentBODSItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Color1 = item.Color1.ColorOnlyEquals(rhs.Color1);
            ret.Color2 = item.Color2.ColorOnlyEquals(rhs.Color2);
            ret.Color3 = item.Color3.ColorOnlyEquals(rhs.Color3);
            ret.Unknown = item.Unknown == rhs.Unknown;
        }
        
        public string Print(
            IBlueprintComponentBODSItemGetter item,
            string? name = null,
            BlueprintComponentBODSItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBlueprintComponentBODSItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BlueprintComponentBODSItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BlueprintComponentBODSItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (BlueprintComponentBODSItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBlueprintComponentBODSItemGetter item,
            StructuredStringBuilder sb,
            BlueprintComponentBODSItem.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if (printMask?.Color1 ?? true)
            {
                sb.AppendItem(item.Color1, "Color1");
            }
            if (printMask?.Color2 ?? true)
            {
                sb.AppendItem(item.Color2, "Color2");
            }
            if (printMask?.Color3 ?? true)
            {
                sb.AppendItem(item.Color3, "Color3");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBlueprintComponentBODSItemGetter? lhs,
            IBlueprintComponentBODSItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color1) ?? true))
            {
                if (!lhs.Color1.ColorOnlyEquals(rhs.Color1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color2) ?? true))
            {
                if (!lhs.Color2.ColorOnlyEquals(rhs.Color2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color3) ?? true))
            {
                if (!lhs.Color3.ColorOnlyEquals(rhs.Color3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBlueprintComponentBODSItemGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.Color1);
            hash.Add(item.Color2);
            hash.Add(item.Color3);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BlueprintComponentBODSItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBlueprintComponentBODSItemGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BlueprintComponentBODSItemSetterTranslationCommon
    {
        public static readonly BlueprintComponentBODSItemSetterTranslationCommon Instance = new BlueprintComponentBODSItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBlueprintComponentBODSItem item,
            IBlueprintComponentBODSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color1) ?? true))
            {
                item.Color1 = rhs.Color1;
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color2) ?? true))
            {
                item.Color2 = rhs.Color2;
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Color3) ?? true))
            {
                item.Color3 = rhs.Color3;
            }
            if ((copyMask?.GetShouldTranslate((int)BlueprintComponentBODSItem_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBlueprintComponentBODSItem item,
            IBlueprintComponentBODSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BlueprintComponentBODSItem DeepCopy(
            IBlueprintComponentBODSItemGetter item,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            BlueprintComponentBODSItem ret = (BlueprintComponentBODSItem)((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BlueprintComponentBODSItem DeepCopy(
            IBlueprintComponentBODSItemGetter item,
            out BlueprintComponentBODSItem.ErrorMask errorMask,
            BlueprintComponentBODSItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BlueprintComponentBODSItem ret = (BlueprintComponentBODSItem)((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BlueprintComponentBODSItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BlueprintComponentBODSItem DeepCopy(
            IBlueprintComponentBODSItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BlueprintComponentBODSItem ret = (BlueprintComponentBODSItem)((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)item).CommonInstance()!).GetNew();
            ((BlueprintComponentBODSItemSetterTranslationCommon)((IBlueprintComponentBODSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BlueprintComponentBODSItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlueprintComponentBODSItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BlueprintComponentBODSItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BlueprintComponentBODSItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BlueprintComponentBODSItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BlueprintComponentBODSItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBlueprintComponentBODSItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBlueprintComponentBODSItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBlueprintComponentBODSItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BlueprintComponentBODSItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BlueprintComponentBODSItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBlueprintComponentBODSItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.BODS),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.BODV)))
            {
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Color1,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Color2,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Color3,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                writer.Write(item.Unknown);
            }
        }

        public void Write(
            MutagenWriter writer,
            IBlueprintComponentBODSItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBlueprintComponentBODSItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BlueprintComponentBODSItemBinaryCreateTranslation
    {
        public static readonly BlueprintComponentBODSItemBinaryCreateTranslation Instance = new BlueprintComponentBODSItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBlueprintComponentBODSItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BODS:
                {
                    if (lastParsed.ShortCircuit((int)BlueprintComponentBODSItem_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BlueprintComponentBODSItem_FieldIndex.Name;
                }
                case RecordTypeInts.BODV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 12) return null;
                    item.Color1 = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 12) return null;
                    item.Color2 = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 12) return null;
                    item.Color3 = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    return (int)BlueprintComponentBODSItem_FieldIndex.Unknown;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BlueprintComponentBODSItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBlueprintComponentBODSItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlueprintComponentBODSItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BlueprintComponentBODSItemBinaryOverlay :
        PluginBinaryOverlay,
        IBlueprintComponentBODSItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BlueprintComponentBODSItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BlueprintComponentBODSItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BlueprintComponentBODSItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BlueprintComponentBODSItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBlueprintComponentBODSItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBlueprintComponentBODSItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBlueprintComponentBODSItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BlueprintComponentBODSItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BlueprintComponentBODSItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        private RangeInt32? _BODVLocation;
        #region Color1
        private int _Color1Location => _BODVLocation!.Value.Min;
        private bool _Color1_IsSet => _BODVLocation.HasValue;
        public Color Color1 => _Color1_IsSet ? _recordData.Slice(_Color1Location, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region Color2
        private int _Color2Location => _BODVLocation!.Value.Min + 0xC;
        private bool _Color2_IsSet => _BODVLocation.HasValue;
        public Color Color2 => _Color2_IsSet ? _recordData.Slice(_Color2Location, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region Color3
        private int _Color3Location => _BODVLocation!.Value.Min + 0x18;
        private bool _Color3_IsSet => _BODVLocation.HasValue;
        public Color Color3 => _Color3_IsSet ? _recordData.Slice(_Color3Location, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region Unknown
        private int _UnknownLocation => _BODVLocation!.Value.Min + 0x24;
        private bool _Unknown_IsSet => _BODVLocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BlueprintComponentBODSItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBlueprintComponentBODSItemGetter BlueprintComponentBODSItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BlueprintComponentBODSItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBlueprintComponentBODSItemGetter BlueprintComponentBODSItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BlueprintComponentBODSItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BODS:
                {
                    if (lastParsed.ShortCircuit((int)BlueprintComponentBODSItem_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)BlueprintComponentBODSItem_FieldIndex.Name;
                }
                case RecordTypeInts.BODV:
                {
                    _BODVLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)BlueprintComponentBODSItem_FieldIndex.Unknown;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BlueprintComponentBODSItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBlueprintComponentBODSItemGetter rhs) return false;
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBlueprintComponentBODSItemGetter? obj)
        {
            return ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BlueprintComponentBODSItemCommon)((IBlueprintComponentBODSItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

