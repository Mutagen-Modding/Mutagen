/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetModelComponent :
        AComponent,
        IEquatable<IPlanetModelComponentGetter>,
        ILoquiObjectSetter<PlanetModelComponent>,
        IPlanetModelComponent
    {
        #region Ctor
        public PlanetModelComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IPlanetModelComponentGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region XMPM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlanetModelComponentXMPM? _XMPM;
        public PlanetModelComponentXMPM? XMPM
        {
            get => _XMPM;
            set => _XMPM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlanetModelComponentXMPMGetter? IPlanetModelComponentGetter.XMPM => this.XMPM;
        #endregion
        #region RingModel
        public String? RingModel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlanetModelComponentGetter.RingModel => this.RingModel;
        #endregion
        #region RingMaterial
        public String? RingMaterial { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlanetModelComponentGetter.RingMaterial => this.RingMaterial;
        #endregion
        #region RingId
        public String? RingId { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlanetModelComponentGetter.RingId => this.RingId;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetModelComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetModelComponentGetter rhs) return false;
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetModelComponentGetter? obj)
        {
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.XMPM = new MaskItem<TItem, PlanetModelComponentXMPM.Mask<TItem>?>(initialValue, new PlanetModelComponentXMPM.Mask<TItem>(initialValue));
                this.RingModel = initialValue;
                this.RingMaterial = initialValue;
                this.RingId = initialValue;
            }

            public Mask(
                TItem Model,
                TItem XMPM,
                TItem RingModel,
                TItem RingMaterial,
                TItem RingId)
            : base()
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.XMPM = new MaskItem<TItem, PlanetModelComponentXMPM.Mask<TItem>?>(XMPM, new PlanetModelComponentXMPM.Mask<TItem>(XMPM));
                this.RingModel = RingModel;
                this.RingMaterial = RingMaterial;
                this.RingId = RingId;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, PlanetModelComponentXMPM.Mask<TItem>?>? XMPM { get; set; }
            public TItem RingModel;
            public TItem RingMaterial;
            public TItem RingId;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.XMPM, rhs.XMPM)) return false;
                if (!object.Equals(this.RingModel, rhs.RingModel)) return false;
                if (!object.Equals(this.RingMaterial, rhs.RingMaterial)) return false;
                if (!object.Equals(this.RingId, rhs.RingId)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.XMPM);
                hash.Add(this.RingModel);
                hash.Add(this.RingMaterial);
                hash.Add(this.RingId);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (XMPM != null)
                {
                    if (!eval(this.XMPM.Overall)) return false;
                    if (this.XMPM.Specific != null && !this.XMPM.Specific.All(eval)) return false;
                }
                if (!eval(this.RingModel)) return false;
                if (!eval(this.RingMaterial)) return false;
                if (!eval(this.RingId)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (XMPM != null)
                {
                    if (eval(this.XMPM.Overall)) return true;
                    if (this.XMPM.Specific != null && this.XMPM.Specific.Any(eval)) return true;
                }
                if (eval(this.RingModel)) return true;
                if (eval(this.RingMaterial)) return true;
                if (eval(this.RingId)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetModelComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.XMPM = this.XMPM == null ? null : new MaskItem<R, PlanetModelComponentXMPM.Mask<R>?>(eval(this.XMPM.Overall), this.XMPM.Specific?.Translate(eval));
                obj.RingModel = eval(this.RingModel);
                obj.RingMaterial = eval(this.RingMaterial);
                obj.RingId = eval(this.RingId);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetModelComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetModelComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetModelComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.XMPM?.Overall ?? true)
                    {
                        XMPM?.Print(sb);
                    }
                    if (printMask?.RingModel ?? true)
                    {
                        sb.AppendItem(RingModel, "RingModel");
                    }
                    if (printMask?.RingMaterial ?? true)
                    {
                        sb.AppendItem(RingMaterial, "RingMaterial");
                    }
                    if (printMask?.RingId ?? true)
                    {
                        sb.AppendItem(RingId, "RingId");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, PlanetModelComponentXMPM.ErrorMask?>? XMPM;
            public Exception? RingModel;
            public Exception? RingMaterial;
            public Exception? RingId;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlanetModelComponent_FieldIndex enu = (PlanetModelComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponent_FieldIndex.Model:
                        return Model;
                    case PlanetModelComponent_FieldIndex.XMPM:
                        return XMPM;
                    case PlanetModelComponent_FieldIndex.RingModel:
                        return RingModel;
                    case PlanetModelComponent_FieldIndex.RingMaterial:
                        return RingMaterial;
                    case PlanetModelComponent_FieldIndex.RingId:
                        return RingId;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlanetModelComponent_FieldIndex enu = (PlanetModelComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponent_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case PlanetModelComponent_FieldIndex.XMPM:
                        this.XMPM = new MaskItem<Exception?, PlanetModelComponentXMPM.ErrorMask?>(ex, null);
                        break;
                    case PlanetModelComponent_FieldIndex.RingModel:
                        this.RingModel = ex;
                        break;
                    case PlanetModelComponent_FieldIndex.RingMaterial:
                        this.RingMaterial = ex;
                        break;
                    case PlanetModelComponent_FieldIndex.RingId:
                        this.RingId = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlanetModelComponent_FieldIndex enu = (PlanetModelComponent_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponent_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case PlanetModelComponent_FieldIndex.XMPM:
                        this.XMPM = (MaskItem<Exception?, PlanetModelComponentXMPM.ErrorMask?>?)obj;
                        break;
                    case PlanetModelComponent_FieldIndex.RingModel:
                        this.RingModel = (Exception?)obj;
                        break;
                    case PlanetModelComponent_FieldIndex.RingMaterial:
                        this.RingMaterial = (Exception?)obj;
                        break;
                    case PlanetModelComponent_FieldIndex.RingId:
                        this.RingId = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (XMPM != null) return true;
                if (RingModel != null) return true;
                if (RingMaterial != null) return true;
                if (RingId != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                Model?.Print(sb);
                XMPM?.Print(sb);
                {
                    sb.AppendItem(RingModel, "RingModel");
                }
                {
                    sb.AppendItem(RingMaterial, "RingMaterial");
                }
                {
                    sb.AppendItem(RingId, "RingId");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.XMPM = this.XMPM.Combine(rhs.XMPM, (l, r) => l.Combine(r));
                ret.RingModel = this.RingModel.Combine(rhs.RingModel);
                ret.RingMaterial = this.RingMaterial.Combine(rhs.RingMaterial);
                ret.RingId = this.RingId.Combine(rhs.RingId);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Model.TranslationMask? Model;
            public PlanetModelComponentXMPM.TranslationMask? XMPM;
            public bool RingModel;
            public bool RingMaterial;
            public bool RingId;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.RingModel = defaultOn;
                this.RingMaterial = defaultOn;
                this.RingId = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((XMPM != null ? XMPM.OnOverall : DefaultOn, XMPM?.GetCrystal()));
                ret.Add((RingModel, null));
                ret.Add((RingMaterial, null));
                ret.Add((RingId, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetModelComponentCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlanetModelComponentSetterCommon.Instance.RemapLinks(this, mapping);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetModelComponentCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => PlanetModelComponentSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => PlanetModelComponentSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => PlanetModelComponentSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetModelComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetModelComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlanetModelComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetModelComponent();
            ((PlanetModelComponentSetterCommon)((IPlanetModelComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetModelComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetModelComponentSetterCommon)((IPlanetModelComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlanetModelComponent GetNew()
        {
            return new PlanetModelComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetModelComponent :
        IAComponent,
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IPlanetModelComponent>,
        IModeled,
        IPlanetModelComponentGetter
    {
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new PlanetModelComponentXMPM? XMPM { get; set; }
        new String? RingModel { get; set; }
        new String? RingMaterial { get; set; }
        new String? RingId { get; set; }
    }

    public partial interface IPlanetModelComponentGetter :
        IAComponentGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlanetModelComponentGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => PlanetModelComponent_Registration.Instance;
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IPlanetModelComponentXMPMGetter? XMPM { get; }
        String? RingModel { get; }
        String? RingMaterial { get; }
        String? RingId { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetModelComponentMixIn
    {
        public static void Clear(this IPlanetModelComponent item)
        {
            ((PlanetModelComponentSetterCommon)((IPlanetModelComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetModelComponent.Mask<bool> GetEqualsMask(
            this IPlanetModelComponentGetter item,
            IPlanetModelComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetModelComponentGetter item,
            string? name = null,
            PlanetModelComponent.Mask<bool>? printMask = null)
        {
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetModelComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetModelComponent.Mask<bool>? printMask = null)
        {
            ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetModelComponentGetter item,
            IPlanetModelComponentGetter rhs,
            PlanetModelComponent.TranslationMask? equalsMask = null)
        {
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetModelComponent lhs,
            IPlanetModelComponentGetter rhs,
            out PlanetModelComponent.ErrorMask errorMask,
            PlanetModelComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetModelComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetModelComponent lhs,
            IPlanetModelComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetModelComponent DeepCopy(
            this IPlanetModelComponentGetter item,
            PlanetModelComponent.TranslationMask? copyMask = null)
        {
            return ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetModelComponent DeepCopy(
            this IPlanetModelComponentGetter item,
            out PlanetModelComponent.ErrorMask errorMask,
            PlanetModelComponent.TranslationMask? copyMask = null)
        {
            return ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetModelComponent DeepCopy(
            this IPlanetModelComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetModelComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetModelComponentSetterCommon)((IPlanetModelComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetModelComponent_FieldIndex
    {
        Model = 0,
        XMPM = 1,
        RingModel = 2,
        RingMaterial = 3,
        RingId = 4,
    }
    #endregion

    #region Registration
    internal partial class PlanetModelComponent_Registration : ILoquiRegistration
    {
        public static readonly PlanetModelComponent_Registration Instance = new PlanetModelComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(PlanetModelComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetModelComponent.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetModelComponent);

        public static readonly Type GetterType = typeof(IPlanetModelComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetModelComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetModelComponent";

        public const string Name = "PlanetModelComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.XMPM,
                RecordTypes.MCQP,
                RecordTypes.XMSP,
                RecordTypes.XLMS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetModelComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetModelComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly PlanetModelComponentSetterCommon Instance = new PlanetModelComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetModelComponent item)
        {
            ClearPartial();
            item.Model = null;
            item.XMPM = null;
            item.RingModel = default;
            item.RingMaterial = default;
            item.RingId = default;
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IPlanetModelComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetModelComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IPlanetModelComponent obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IPlanetModelComponent obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetModelComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: PlanetModelComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlanetModelComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlanetModelComponentCommon : AComponentCommon
    {
        public new static readonly PlanetModelComponentCommon Instance = new PlanetModelComponentCommon();

        public PlanetModelComponent.Mask<bool> GetEqualsMask(
            IPlanetModelComponentGetter item,
            IPlanetModelComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetModelComponent.Mask<bool>(false);
            ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetModelComponentGetter item,
            IPlanetModelComponentGetter rhs,
            PlanetModelComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XMPM = EqualsMaskHelper.EqualsHelper(
                item.XMPM,
                rhs.XMPM,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RingModel = string.Equals(item.RingModel, rhs.RingModel);
            ret.RingMaterial = string.Equals(item.RingMaterial, rhs.RingMaterial);
            ret.RingId = string.Equals(item.RingId, rhs.RingId);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlanetModelComponentGetter item,
            string? name = null,
            PlanetModelComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetModelComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetModelComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetModelComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetModelComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetModelComponentGetter item,
            StructuredStringBuilder sb,
            PlanetModelComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.XMPM?.Overall ?? true)
                && item.XMPM is {} XMPMItem)
            {
                XMPMItem?.Print(sb, "XMPM");
            }
            if ((printMask?.RingModel ?? true)
                && item.RingModel is {} RingModelItem)
            {
                sb.AppendItem(RingModelItem, "RingModel");
            }
            if ((printMask?.RingMaterial ?? true)
                && item.RingMaterial is {} RingMaterialItem)
            {
                sb.AppendItem(RingMaterialItem, "RingMaterial");
            }
            if ((printMask?.RingId ?? true)
                && item.RingId is {} RingIdItem)
            {
                sb.AppendItem(RingIdItem, "RingId");
            }
        }
        
        public static PlanetModelComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetModelComponentGetter? lhs,
            IPlanetModelComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)PlanetModelComponent_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.XMPM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.XMPM, rhs.XMPM, out var lhsXMPM, out var rhsXMPM, out var isXMPMEqual))
                {
                    if (!((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)lhsXMPM).CommonInstance()!).Equals(lhsXMPM, rhsXMPM, equalsMask?.GetSubCrystal((int)PlanetModelComponent_FieldIndex.XMPM))) return false;
                }
                else if (!isXMPMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingModel) ?? true))
            {
                if (!string.Equals(lhs.RingModel, rhs.RingModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingMaterial) ?? true))
            {
                if (!string.Equals(lhs.RingMaterial, rhs.RingMaterial)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingId) ?? true))
            {
                if (!string.Equals(lhs.RingId, rhs.RingId)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetModelComponentGetter?)lhs,
                rhs: rhs as IPlanetModelComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlanetModelComponentGetter item)
        {
            var hash = new HashCode();
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.XMPM is {} XMPMitem)
            {
                hash.Add(XMPMitem);
            }
            if (item.RingModel is {} RingModelitem)
            {
                hash.Add(RingModelitem);
            }
            if (item.RingMaterial is {} RingMaterialitem)
            {
                hash.Add(RingMaterialitem);
            }
            if (item.RingId is {} RingIditem)
            {
                hash.Add(RingIditem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IPlanetModelComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlanetModelComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetModelComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IPlanetModelComponentGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlanetModelComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly PlanetModelComponentSetterTranslationCommon Instance = new PlanetModelComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetModelComponent item,
            IPlanetModelComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)PlanetModelComponent_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlanetModelComponent_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.XMPM) ?? true))
            {
                errorMask?.PushIndex((int)PlanetModelComponent_FieldIndex.XMPM);
                try
                {
                    if(rhs.XMPM is {} rhsXMPM)
                    {
                        item.XMPM = rhsXMPM.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlanetModelComponent_FieldIndex.XMPM));
                    }
                    else
                    {
                        item.XMPM = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingModel) ?? true))
            {
                item.RingModel = rhs.RingModel;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingMaterial) ?? true))
            {
                item.RingMaterial = rhs.RingMaterial;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponent_FieldIndex.RingId) ?? true))
            {
                item.RingId = rhs.RingId;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlanetModelComponent item,
            IPlanetModelComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetModelComponent)item,
                rhs: (IPlanetModelComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlanetModelComponent DeepCopy(
            IPlanetModelComponentGetter item,
            PlanetModelComponent.TranslationMask? copyMask = null)
        {
            PlanetModelComponent ret = (PlanetModelComponent)((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetModelComponent DeepCopy(
            IPlanetModelComponentGetter item,
            out PlanetModelComponent.ErrorMask errorMask,
            PlanetModelComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetModelComponent ret = (PlanetModelComponent)((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetModelComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetModelComponent DeepCopy(
            IPlanetModelComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetModelComponent ret = (PlanetModelComponent)((PlanetModelComponentCommon)((IPlanetModelComponentGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentSetterTranslationCommon)((IPlanetModelComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetModelComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetModelComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetModelComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetModelComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlanetModelComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetModelComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetModelComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlanetModelComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlanetModelComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.XMPM is {} XMPMItem)
            {
                ((PlanetModelComponentXMPMBinaryWriteTranslation)((IBinaryItem)XMPMItem).BinaryWriteTranslator).Write(
                    item: XMPMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RingModel,
                header: translationParams.ConvertToCustom(RecordTypes.MCQP),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RingMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.XMSP),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RingId,
                header: translationParams.ConvertToCustom(RecordTypes.XLMS),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IPlanetModelComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetModelComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetModelComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetModelComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly PlanetModelComponentBinaryCreateTranslation Instance = new PlanetModelComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPlanetModelComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlanetModelComponent_FieldIndex.Model;
                }
                case RecordTypeInts.XMPM:
                {
                    item.XMPM = Mutagen.Bethesda.Starfield.PlanetModelComponentXMPM.CreateFromBinary(frame: frame);
                    return (int)PlanetModelComponent_FieldIndex.XMPM;
                }
                case RecordTypeInts.MCQP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RingModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlanetModelComponent_FieldIndex.RingModel;
                }
                case RecordTypeInts.XMSP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RingMaterial = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlanetModelComponent_FieldIndex.RingMaterial;
                }
                case RecordTypeInts.XLMS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RingId = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlanetModelComponent_FieldIndex.RingId;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetModelComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetModelComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IPlanetModelComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetModelComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetModelComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetModelComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetModelComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetModelComponentCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetModelComponentCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetModelComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetModelComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IModelGetter? Model { get; private set; }
        #region XMPM
        private RangeInt32? _XMPMLocation;
        public IPlanetModelComponentXMPMGetter? XMPM => _XMPMLocation.HasValue ? PlanetModelComponentXMPMBinaryOverlay.PlanetModelComponentXMPMFactory(_recordData.Slice(_XMPMLocation!.Value.Min), _package) : default;
        #endregion
        #region RingModel
        private int? _RingModelLocation;
        public String? RingModel => _RingModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RingModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region RingMaterial
        private int? _RingMaterialLocation;
        public String? RingMaterial => _RingMaterialLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RingMaterialLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region RingId
        private int? _RingIdLocation;
        public String? RingId => _RingIdLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RingIdLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetModelComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlanetModelComponentGetter PlanetModelComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetModelComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlanetModelComponentGetter PlanetModelComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetModelComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlanetModelComponent_FieldIndex.Model;
                }
                case RecordTypeInts.XMPM:
                {
                    _XMPMLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlanetModelComponent_FieldIndex.XMPM;
                }
                case RecordTypeInts.MCQP:
                {
                    _RingModelLocation = (stream.Position - offset);
                    return (int)PlanetModelComponent_FieldIndex.RingModel;
                }
                case RecordTypeInts.XMSP:
                {
                    _RingMaterialLocation = (stream.Position - offset);
                    return (int)PlanetModelComponent_FieldIndex.RingMaterial;
                }
                case RecordTypeInts.XLMS:
                {
                    _RingIdLocation = (stream.Position - offset);
                    return (int)PlanetModelComponent_FieldIndex.RingId;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetModelComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetModelComponentGetter rhs) return false;
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetModelComponentGetter? obj)
        {
            return ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetModelComponentCommon)((IPlanetModelComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

